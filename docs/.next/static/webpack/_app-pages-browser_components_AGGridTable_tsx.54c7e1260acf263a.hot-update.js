"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("_app-pages-browser_components_AGGridTable_tsx",{

/***/ "(app-pages-browser)/./components/AGGridTable.tsx":
/*!************************************!*\
  !*** ./components/AGGridTable.tsx ***!
  \************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/../node_modules/.pnpm/next@15.3.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/../node_modules/.pnpm/next@15.3.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var ag_grid_react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ag-grid-react */ \"(app-pages-browser)/../node_modules/.pnpm/ag-grid-react@33.3.1_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/ag-grid-react/dist/package/index.esm.mjs\");\n/* harmony import */ var ag_grid_community__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ag-grid-community */ \"(app-pages-browser)/../node_modules/.pnpm/ag-grid-community@33.3.1/node_modules/ag-grid-community/dist/package/main.esm.mjs\");\n/* harmony import */ var ag_grid_community_styles_ag_grid_css__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ag-grid-community/styles/ag-grid.css */ \"(app-pages-browser)/../node_modules/.pnpm/ag-grid-community@33.3.1/node_modules/ag-grid-community/styles/ag-grid.css\");\n/* harmony import */ var ag_grid_community_styles_ag_theme_alpine_css__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ag-grid-community/styles/ag-theme-alpine.css */ \"(app-pages-browser)/../node_modules/.pnpm/ag-grid-community@33.3.1/node_modules/ag-grid-community/styles/ag-theme-alpine.css\");\n/* harmony import */ var _utils_tableManager__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/tableManager */ \"(app-pages-browser)/./utils/tableManager.ts\");\n/* harmony import */ var _utils_transactionManager__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utils/transactionManager */ \"(app-pages-browser)/./utils/transactionManager.ts\");\n/* __next_internal_client_entry_do_not_use__ default auto */ \nvar _s = $RefreshSig$();\n\n\n\n\n\n\n\n// Register AG Grid modules\nag_grid_community__WEBPACK_IMPORTED_MODULE_7__.ModuleRegistry.registerModules([\n    ag_grid_community__WEBPACK_IMPORTED_MODULE_7__.AllCommunityModule\n]);\nconst AGGridTable = (param)=>{\n    let { db, resource, rowData, onCellEdit, onError } = param;\n    _s();\n    const [columnDefs, setColumnDefs] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [gridApi, setGridApi] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [error, setError] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [isEditing, setIsEditing] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [bulkEditState, setBulkEditState] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({\n        isEditing: false,\n        selectedRows: [],\n        pendingChanges: new Map(),\n        errors: new Map()\n    });\n    const tableManager = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(new _utils_tableManager__WEBPACK_IMPORTED_MODULE_5__.TableManager(db));\n    const transactionManager = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(new _utils_transactionManager__WEBPACK_IMPORTED_MODULE_6__.TransactionManager(db));\n    // Load and validate schema\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"AGGridTable.useEffect\": ()=>{\n            if (!db) return;\n            ({\n                \"AGGridTable.useEffect\": async ()=>{\n                    try {\n                        const cols = await tableManager.current.getTableSchema(resource);\n                        const newColumnDefs = cols.map({\n                            \"AGGridTable.useEffect.newColumnDefs\": (c)=>({\n                                    field: c.name,\n                                    headerName: c.name,\n                                    editable: c.name !== \"rowid\",\n                                    type: getColumnType(c.type),\n                                    cellEditor: getCellEditor(c.type),\n                                    cellEditorParams: getCellEditorParams(c.type),\n                                    valueFormatter: getValueFormatter(c.type),\n                                    valueParser: getValueParser(c.type),\n                                    cellStyle: ({\n                                        \"AGGridTable.useEffect.newColumnDefs\": (params)=>{\n                                            var _params_data_rowid, _params_data_id;\n                                            const colDef = params.colDef;\n                                            if (colDef.field === 'rowid') {\n                                                return {\n                                                    backgroundColor: '#f5f5f5'\n                                                };\n                                            }\n                                            // Highlight cells with pending changes\n                                            const rowId = ((_params_data_rowid = params.data.rowid) === null || _params_data_rowid === void 0 ? void 0 : _params_data_rowid.toString()) || ((_params_data_id = params.data.id) === null || _params_data_id === void 0 ? void 0 : _params_data_id.toString());\n                                            if (rowId && bulkEditState.pendingChanges.has(rowId)) {\n                                                const colChanges = bulkEditState.pendingChanges.get(rowId);\n                                                if (colChanges === null || colChanges === void 0 ? void 0 : colChanges.has(colDef.field)) {\n                                                    return {\n                                                        backgroundColor: '#fff3cd'\n                                                    };\n                                                }\n                                            }\n                                            // Highlight cells with errors\n                                            if (rowId && bulkEditState.errors.has(\"\".concat(rowId, \"_\").concat(colDef.field))) {\n                                                return {\n                                                    backgroundColor: '#f8d7da'\n                                                };\n                                            }\n                                            return null;\n                                        }\n                                    })[\"AGGridTable.useEffect.newColumnDefs\"],\n                                    tooltipValueGetter: ({\n                                        \"AGGridTable.useEffect.newColumnDefs\": (params)=>{\n                                            var _params_data_rowid, _params_data_id;\n                                            const colDef = params.colDef;\n                                            const rowId = ((_params_data_rowid = params.data.rowid) === null || _params_data_rowid === void 0 ? void 0 : _params_data_rowid.toString()) || ((_params_data_id = params.data.id) === null || _params_data_id === void 0 ? void 0 : _params_data_id.toString());\n                                            if (rowId && bulkEditState.errors.has(\"\".concat(rowId, \"_\").concat(colDef.field))) {\n                                                return bulkEditState.errors.get(\"\".concat(rowId, \"_\").concat(colDef.field));\n                                            }\n                                            return null;\n                                        }\n                                    })[\"AGGridTable.useEffect.newColumnDefs\"]\n                                })\n                        }[\"AGGridTable.useEffect.newColumnDefs\"]);\n                        setColumnDefs(newColumnDefs);\n                    } catch (err) {\n                        const errorMessage = err.message;\n                        setError(errorMessage);\n                        onError === null || onError === void 0 ? void 0 : onError(errorMessage);\n                    }\n                }\n            })[\"AGGridTable.useEffect\"]();\n        }\n    }[\"AGGridTable.useEffect\"], [\n        db,\n        resource,\n        bulkEditState.pendingChanges,\n        bulkEditState.errors\n    ]);\n    // Force grid refresh when rowData changes\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"AGGridTable.useEffect\": ()=>{\n            if (gridApi) {\n                console.log('Refreshing grid with new data:', rowData);\n                gridApi.setRowData(rowData);\n                gridApi.refreshCells({\n                    force: true\n                });\n            }\n        }\n    }[\"AGGridTable.useEffect\"], [\n        rowData,\n        gridApi\n    ]);\n    const onGridReady = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"AGGridTable.useCallback[onGridReady]\": (params)=>{\n            setGridApi(params.api);\n            params.api.sizeColumnsToFit();\n        }\n    }[\"AGGridTable.useCallback[onGridReady]\"], []);\n    const onSelectionChanged = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"AGGridTable.useCallback[onSelectionChanged]\": (event)=>{\n            setBulkEditState({\n                \"AGGridTable.useCallback[onSelectionChanged]\": (prev)=>({\n                        ...prev,\n                        selectedRows: event.api.getSelectedNodes()\n                    })\n            }[\"AGGridTable.useCallback[onSelectionChanged]\"]);\n        }\n    }[\"AGGridTable.useCallback[onSelectionChanged]\"], []);\n    const onCellValueChanged = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"AGGridTable.useCallback[onCellValueChanged]\": async (event)=>{\n            if (!event.colDef.field) return;\n            setIsEditing(true);\n            setError(null);\n            try {\n                // Validate the new value before proceeding\n                await tableManager.current.validateData(resource, {\n                    [event.colDef.field]: event.newValue\n                });\n                await transactionManager.current.executeInTransaction({\n                    \"AGGridTable.useCallback[onCellValueChanged]\": async ()=>{\n                        var _data_rowid, _data_id;\n                        const { data, colDef, newValue } = event;\n                        const rowId = ((_data_rowid = data.rowid) === null || _data_rowid === void 0 ? void 0 : _data_rowid.toString()) || ((_data_id = data.id) === null || _data_id === void 0 ? void 0 : _data_id.toString());\n                        if (rowId && colDef.field) {\n                            await onCellEdit(rowId, colDef.field, newValue);\n                        }\n                    }\n                }[\"AGGridTable.useCallback[onCellValueChanged]\"], {\n                    onError: {\n                        \"AGGridTable.useCallback[onCellValueChanged]\": (err)=>{\n                            const errorMessage = err.message;\n                            setError(errorMessage);\n                            onError === null || onError === void 0 ? void 0 : onError(errorMessage);\n                            // Refresh the grid to show the original value\n                            gridApi === null || gridApi === void 0 ? void 0 : gridApi.refreshCells({\n                                force: true\n                            });\n                        }\n                    }[\"AGGridTable.useCallback[onCellValueChanged]\"],\n                    onRollback: {\n                        \"AGGridTable.useCallback[onCellValueChanged]\": ()=>{\n                            // Refresh the grid to show the original value\n                            gridApi === null || gridApi === void 0 ? void 0 : gridApi.refreshCells({\n                                force: true\n                            });\n                        }\n                    }[\"AGGridTable.useCallback[onCellValueChanged]\"]\n                });\n            } catch (err) {\n                const errorMessage = err.message;\n                setError(errorMessage);\n                onError === null || onError === void 0 ? void 0 : onError(errorMessage);\n                gridApi === null || gridApi === void 0 ? void 0 : gridApi.refreshCells({\n                    force: true\n                });\n            } finally{\n                setIsEditing(false);\n            }\n        }\n    }[\"AGGridTable.useCallback[onCellValueChanged]\"], [\n        gridApi,\n        onCellEdit,\n        resource\n    ]);\n    const handleBulkEdit = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"AGGridTable.useCallback[handleBulkEdit]\": async (field, value)=>{\n            if (!gridApi || bulkEditState.selectedRows.length === 0) return;\n            setBulkEditState({\n                \"AGGridTable.useCallback[handleBulkEdit]\": (prev)=>({\n                        ...prev,\n                        isEditing: true,\n                        errors: new Map()\n                    })\n            }[\"AGGridTable.useCallback[handleBulkEdit]\"]);\n            try {\n                // Validate all changes first\n                const validationPromises = bulkEditState.selectedRows.map({\n                    \"AGGridTable.useCallback[handleBulkEdit].validationPromises\": async (node)=>{\n                        var _node_data_rowid, _node_data_id;\n                        const rowId = ((_node_data_rowid = node.data.rowid) === null || _node_data_rowid === void 0 ? void 0 : _node_data_rowid.toString()) || ((_node_data_id = node.data.id) === null || _node_data_id === void 0 ? void 0 : _node_data_id.toString());\n                        if (!rowId) return;\n                        try {\n                            await tableManager.current.validateData(resource, {\n                                [field]: value\n                            });\n                            // Store the pending change\n                            setBulkEditState({\n                                \"AGGridTable.useCallback[handleBulkEdit].validationPromises\": (prev)=>{\n                                    const newPendingChanges = new Map(prev.pendingChanges);\n                                    const rowChanges = newPendingChanges.get(rowId) || new Map();\n                                    rowChanges.set(field, value);\n                                    newPendingChanges.set(rowId, rowChanges);\n                                    return {\n                                        ...prev,\n                                        pendingChanges: newPendingChanges\n                                    };\n                                }\n                            }[\"AGGridTable.useCallback[handleBulkEdit].validationPromises\"]);\n                        } catch (err) {\n                            const error = err;\n                            setBulkEditState({\n                                \"AGGridTable.useCallback[handleBulkEdit].validationPromises\": (prev)=>{\n                                    const newErrors = new Map(prev.errors);\n                                    newErrors.set(\"\".concat(rowId, \"_\").concat(field), error.message);\n                                    return {\n                                        ...prev,\n                                        errors: newErrors\n                                    };\n                                }\n                            }[\"AGGridTable.useCallback[handleBulkEdit].validationPromises\"]);\n                        }\n                    }\n                }[\"AGGridTable.useCallback[handleBulkEdit].validationPromises\"]);\n                await Promise.all(validationPromises);\n                // If there are no errors, apply all changes in a transaction\n                if (bulkEditState.errors.size === 0) {\n                    await transactionManager.current.executeInTransaction({\n                        \"AGGridTable.useCallback[handleBulkEdit]\": async ()=>{\n                            for (const [rowId, changes] of bulkEditState.pendingChanges){\n                                for (const [field, value] of changes){\n                                    await onCellEdit(rowId, field, value);\n                                }\n                            }\n                        }\n                    }[\"AGGridTable.useCallback[handleBulkEdit]\"], {\n                        onError: {\n                            \"AGGridTable.useCallback[handleBulkEdit]\": (err)=>{\n                                const errorMessage = err.message;\n                                setError(errorMessage);\n                                onError === null || onError === void 0 ? void 0 : onError(errorMessage);\n                                // Refresh the grid to show the original values\n                                gridApi.refreshCells({\n                                    force: true\n                                });\n                            }\n                        }[\"AGGridTable.useCallback[handleBulkEdit]\"],\n                        onRollback: {\n                            \"AGGridTable.useCallback[handleBulkEdit]\": ()=>{\n                                // Refresh the grid to show the original values\n                                gridApi.refreshCells({\n                                    force: true\n                                });\n                            }\n                        }[\"AGGridTable.useCallback[handleBulkEdit]\"]\n                    });\n                    // Clear pending changes after successful commit\n                    setBulkEditState({\n                        \"AGGridTable.useCallback[handleBulkEdit]\": (prev)=>({\n                                ...prev,\n                                pendingChanges: new Map(),\n                                errors: new Map()\n                            })\n                    }[\"AGGridTable.useCallback[handleBulkEdit]\"]);\n                }\n            } finally{\n                setBulkEditState({\n                    \"AGGridTable.useCallback[handleBulkEdit]\": (prev)=>({\n                            ...prev,\n                            isEditing: false\n                        })\n                }[\"AGGridTable.useCallback[handleBulkEdit]\"]);\n            }\n        }\n    }[\"AGGridTable.useCallback[handleBulkEdit]\"], [\n        gridApi,\n        bulkEditState.selectedRows,\n        bulkEditState.pendingChanges,\n        resource,\n        onCellEdit\n    ]);\n    const handleBulkEditCancel = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"AGGridTable.useCallback[handleBulkEditCancel]\": ()=>{\n            setBulkEditState({\n                \"AGGridTable.useCallback[handleBulkEditCancel]\": (prev)=>({\n                        ...prev,\n                        pendingChanges: new Map(),\n                        errors: new Map()\n                    })\n            }[\"AGGridTable.useCallback[handleBulkEditCancel]\"]);\n            gridApi === null || gridApi === void 0 ? void 0 : gridApi.refreshCells({\n                force: true\n            });\n        }\n    }[\"AGGridTable.useCallback[handleBulkEditCancel]\"], [\n        gridApi\n    ]);\n    // Handle window resize\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"AGGridTable.useEffect\": ()=>{\n            const handleResize = {\n                \"AGGridTable.useEffect.handleResize\": ()=>{\n                    gridApi === null || gridApi === void 0 ? void 0 : gridApi.sizeColumnsToFit();\n                }\n            }[\"AGGridTable.useEffect.handleResize\"];\n            window.addEventListener('resize', handleResize);\n            return ({\n                \"AGGridTable.useEffect\": ()=>window.removeEventListener('resize', handleResize)\n            })[\"AGGridTable.useEffect\"];\n        }\n    }[\"AGGridTable.useEffect\"], [\n        gridApi\n    ]);\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        style: {\n            width: \"100%\",\n            height: \"100%\",\n            display: \"flex\",\n            flexDirection: \"column\"\n        },\n        children: [\n            error && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                style: {\n                    padding: \"8px\",\n                    marginBottom: \"8px\",\n                    backgroundColor: \"#fee2e2\",\n                    border: \"1px solid #ef4444\",\n                    borderRadius: \"4px\",\n                    color: \"#991b1b\"\n                },\n                children: error\n            }, void 0, false, {\n                fileName: \"/Users/ethankim/Nestor/medfetch.js/docs/components/AGGridTable.tsx\",\n                lineNumber: 285,\n                columnNumber: 9\n            }, undefined),\n            bulkEditState.selectedRows.length > 0 && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                style: {\n                    padding: \"8px\",\n                    marginBottom: \"8px\",\n                    backgroundColor: \"#f8fafc\",\n                    border: \"1px solid #e2e8f0\",\n                    borderRadius: \"4px\",\n                    display: \"flex\",\n                    gap: \"8px\",\n                    alignItems: \"center\"\n                },\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                        style: {\n                            fontWeight: 500\n                        },\n                        children: [\n                            bulkEditState.selectedRows.length,\n                            \" rows selected\"\n                        ]\n                    }, void 0, true, {\n                        fileName: \"/Users/ethankim/Nestor/medfetch.js/docs/components/AGGridTable.tsx\",\n                        lineNumber: 307,\n                        columnNumber: 11\n                    }, undefined),\n                    bulkEditState.pendingChanges.size > 0 && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n                        children: [\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                                onClick: handleBulkEditCancel,\n                                style: {\n                                    padding: \"4px 8px\",\n                                    backgroundColor: \"#ef4444\",\n                                    color: \"white\",\n                                    border: \"none\",\n                                    borderRadius: \"4px\",\n                                    cursor: \"pointer\"\n                                },\n                                children: \"Cancel Changes\"\n                            }, void 0, false, {\n                                fileName: \"/Users/ethankim/Nestor/medfetch.js/docs/components/AGGridTable.tsx\",\n                                lineNumber: 312,\n                                columnNumber: 15\n                            }, undefined),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                                onClick: ()=>{\n                                    // Apply all pending changes\n                                    for (const [rowId, changes] of bulkEditState.pendingChanges){\n                                        for (const [field, value] of changes){\n                                            handleBulkEdit(field, value);\n                                        }\n                                    }\n                                },\n                                style: {\n                                    padding: \"4px 8px\",\n                                    backgroundColor: \"#22c55e\",\n                                    color: \"white\",\n                                    border: \"none\",\n                                    borderRadius: \"4px\",\n                                    cursor: \"pointer\"\n                                },\n                                children: \"Apply Changes\"\n                            }, void 0, false, {\n                                fileName: \"/Users/ethankim/Nestor/medfetch.js/docs/components/AGGridTable.tsx\",\n                                lineNumber: 325,\n                                columnNumber: 15\n                            }, undefined)\n                        ]\n                    }, void 0, true)\n                ]\n            }, void 0, true, {\n                fileName: \"/Users/ethankim/Nestor/medfetch.js/docs/components/AGGridTable.tsx\",\n                lineNumber: 297,\n                columnNumber: 9\n            }, undefined),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"ag-theme-alpine\",\n                style: {\n                    flex: 1,\n                    opacity: isEditing || bulkEditState.isEditing ? 0.7 : 1,\n                    transition: \"opacity 0.2s\"\n                },\n                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(ag_grid_react__WEBPACK_IMPORTED_MODULE_2__.AgGridReact, {\n                    theme: \"legacy\",\n                    rowData: rowData,\n                    columnDefs: columnDefs,\n                    defaultColDef: {\n                        flex: 1,\n                        filter: true,\n                        sortable: true,\n                        resizable: true,\n                        minWidth: 100,\n                        editable: true,\n                        cellClass: 'editable-cell'\n                    },\n                    getRowId: (params)=>{\n                        var _params_data_patient_id, _params_data_procedure_id;\n                        return ((_params_data_patient_id = params.data.patient_id) === null || _params_data_patient_id === void 0 ? void 0 : _params_data_patient_id.toString()) || ((_params_data_procedure_id = params.data.procedure_id) === null || _params_data_procedure_id === void 0 ? void 0 : _params_data_procedure_id.toString());\n                    },\n                    onGridReady: onGridReady,\n                    onCellValueChanged: onCellValueChanged,\n                    onSelectionChanged: onSelectionChanged,\n                    rowSelection: \"multiple\",\n                    enableCellTextSelection: true,\n                    ensureDomOrder: true,\n                    suppressRowClickSelection: true,\n                    stopEditingWhenCellsLoseFocus: true,\n                    undoRedoCellEditing: true,\n                    undoRedoCellEditingLimit: 20,\n                    suppressModelUpdateAfterUpdateTransaction: true\n                }, void 0, false, {\n                    fileName: \"/Users/ethankim/Nestor/medfetch.js/docs/components/AGGridTable.tsx\",\n                    lineNumber: 357,\n                    columnNumber: 9\n                }, undefined)\n            }, void 0, false, {\n                fileName: \"/Users/ethankim/Nestor/medfetch.js/docs/components/AGGridTable.tsx\",\n                lineNumber: 349,\n                columnNumber: 7\n            }, undefined)\n        ]\n    }, void 0, true, {\n        fileName: \"/Users/ethankim/Nestor/medfetch.js/docs/components/AGGridTable.tsx\",\n        lineNumber: 283,\n        columnNumber: 5\n    }, undefined);\n};\n_s(AGGridTable, \"z7Xub+a+JWEFjyUIM92VT/Y/vfI=\");\n_c = AGGridTable;\n// Helper functions for column configuration\nfunction getColumnType(sqlType) {\n    switch(sqlType.toUpperCase()){\n        case 'INTEGER':\n            return 'numericColumn';\n        case 'REAL':\n            return 'numericColumn';\n        case 'BOOLEAN':\n            return 'booleanColumn';\n        case 'DATE':\n            return 'dateColumn';\n        default:\n            return 'textColumn';\n    }\n}\nfunction getCellEditor(sqlType) {\n    switch(sqlType.toUpperCase()){\n        case 'BOOLEAN':\n            return 'agSelectCellEditor';\n        case 'DATE':\n            return 'agDatePickerCellEditor';\n        default:\n            return undefined;\n    }\n}\nfunction getCellEditorParams(sqlType) {\n    switch(sqlType.toUpperCase()){\n        case 'BOOLEAN':\n            return {\n                values: [\n                    true,\n                    false\n                ]\n            };\n        case 'DATE':\n            return {\n                browserDatePicker: true\n            };\n        default:\n            return undefined;\n    }\n}\nfunction getValueFormatter(sqlType) {\n    switch(sqlType.toUpperCase()){\n        case 'DATE':\n            return (params)=>{\n                if (!params.value) return '';\n                return new Date(params.value).toLocaleDateString();\n            };\n        case 'BOOLEAN':\n            return (params)=>params.value ? 'Yes' : 'No';\n        default:\n            return undefined;\n    }\n}\nfunction getValueParser(sqlType) {\n    switch(sqlType.toUpperCase()){\n        case 'DATE':\n            return (params)=>{\n                if (!params.newValue) return null;\n                const date = new Date(params.newValue);\n                return date.toISOString().split('T')[0];\n            };\n        case 'BOOLEAN':\n            return (params)=>{\n                if (typeof params.newValue === 'string') {\n                    return params.newValue.toLowerCase() === 'yes';\n                }\n                return params.newValue;\n            };\n        default:\n            return undefined;\n    }\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (AGGridTable);\nvar _c;\n$RefreshReg$(_c, \"AGGridTable\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./components/AGGridTable.tsx\n"));

/***/ })

});