/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "(app-pages-browser)/../medfetch/dist/Data-CYZAqtZB.mjs":
/*!******************************************!*\
  !*** ../medfetch/dist/Data-CYZAqtZB.mjs ***!
  \******************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   T: () => (/* binding */ E),\n/* harmony export */   _: () => (/* binding */ g),\n/* harmony export */   a: () => (/* binding */ l),\n/* harmony export */   t: () => (/* binding */ h)\n/* harmony export */ });\n/* harmony import */ var _Effect_D4rBamoz_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Effect-D4rBamoz.mjs */ \"(app-pages-browser)/../medfetch/dist/Effect-D4rBamoz.mjs\");\nvar o = Object.defineProperty;\nvar u = (t, n, e)=>n in t ? o(t, n, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: e\n    }) : t[n] = e;\nvar s = (t, n, e)=>u(t, typeof n != \"symbol\" ? n + \"\" : n, e);\n\nconst a = _Effect_D4rBamoz_mjs__WEBPACK_IMPORTED_MODULE_0__.s, g = ()=>(t)=>t === void 0 ? Object.create(_Effect_D4rBamoz_mjs__WEBPACK_IMPORTED_MODULE_0__.S) : a(t), l = (t)=>(n)=>{\n        const e = n === void 0 ? Object.create(_Effect_D4rBamoz_mjs__WEBPACK_IMPORTED_MODULE_0__.S) : a(n);\n        return e._tag = t, e;\n    }, h = ()=>new Proxy({}, {\n        get (t, n, e) {\n            return n === \"$is\" ? _Effect_D4rBamoz_mjs__WEBPACK_IMPORTED_MODULE_0__.i : n === \"$match\" ? m : l(n);\n        }\n    });\nfunction m() {\n    if (arguments.length === 1) {\n        const e = arguments[0];\n        return function(r) {\n            return e[r._tag](r);\n        };\n    }\n    const t = arguments[0];\n    return arguments[1][t._tag](t);\n}\nconst p = /* @__PURE__ */ function() {\n    const t = /* @__PURE__ */ Symbol.for(\"effect/Data/Error/plainArgs\");\n    return class extends _Effect_D4rBamoz_mjs__WEBPACK_IMPORTED_MODULE_0__.Y {\n        toJSON() {\n            return {\n                ...this[t],\n                ...this\n            };\n        }\n        constructor(e){\n            super(e == null ? void 0 : e.message, e != null && e.cause ? {\n                cause: e.cause\n            } : void 0), e && (Object.assign(this, e), Object.defineProperty(this, t, {\n                value: e,\n                enumerable: !1\n            }));\n        }\n    };\n}(), E = (t)=>{\n    class n extends p {\n        constructor(){\n            super(...arguments);\n            s(this, \"_tag\", t);\n        }\n    }\n    return n.prototype.name = t, n;\n};\n\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = __webpack_module__.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = __webpack_module__.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, __webpack_module__.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                __webpack_module__.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                __webpack_module__.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        __webpack_module__.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    __webpack_module__.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi9tZWRmZXRjaC9kaXN0L0RhdGEtQ1laQXF0WkIubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUEsSUFBSUEsSUFBSUMsT0FBT0MsY0FBYztBQUM3QixJQUFJQyxJQUFJLENBQUNDLEdBQUdDLEdBQUdDLElBQU1ELEtBQUtELElBQUlKLEVBQUVJLEdBQUdDLEdBQUc7UUFBRUUsWUFBWSxDQUFDO1FBQUdDLGNBQWMsQ0FBQztRQUFHQyxVQUFVLENBQUM7UUFBR0MsT0FBT0o7SUFBRSxLQUFLRixDQUFDLENBQUNDLEVBQUUsR0FBR0M7QUFDN0csSUFBSUssSUFBSSxDQUFDUCxHQUFHQyxHQUFHQyxJQUFNSCxFQUFFQyxHQUFHLE9BQU9DLEtBQUssV0FBV0EsSUFBSSxLQUFLQSxHQUFHQztBQUNVO0FBQ3ZFLE1BQU1ZLElBQUlKLG1EQUFDQSxFQUFFSyxJQUFJLElBQU0sQ0FBQ2YsSUFBTUEsTUFBTSxLQUFLLElBQUlILE9BQU9tQixNQUFNLENBQUNKLG1EQUFDQSxJQUFJRSxFQUFFZCxJQUFJaUIsSUFBSSxDQUFDakIsSUFBTSxDQUFDQztRQUNoRixNQUFNQyxJQUFJRCxNQUFNLEtBQUssSUFBSUosT0FBT21CLE1BQU0sQ0FBQ0osbURBQUNBLElBQUlFLEVBQUViO1FBQzlDLE9BQU9DLEVBQUVnQixJQUFJLEdBQUdsQixHQUFHRTtJQUNyQixHQUFHaUIsSUFBSSxJQUFNLElBQUlDLE1BQU0sQ0FBQyxHQUFHO1FBQ3pCQyxLQUFJckIsQ0FBQyxFQUFFQyxDQUFDLEVBQUVDLENBQUM7WUFDVCxPQUFPRCxNQUFNLFFBQVFZLG1EQUFDQSxHQUFHWixNQUFNLFdBQVdxQixJQUFJTCxFQUFFaEI7UUFDbEQ7SUFDRjtBQUNBLFNBQVNxQjtJQUNQLElBQUlDLFVBQVVDLE1BQU0sS0FBSyxHQUFHO1FBQzFCLE1BQU10QixJQUFJcUIsU0FBUyxDQUFDLEVBQUU7UUFDdEIsT0FBTyxTQUFTRSxDQUFDO1lBQ2YsT0FBT3ZCLENBQUMsQ0FBQ3VCLEVBQUVQLElBQUksQ0FBQyxDQUFDTztRQUNuQjtJQUNGO0lBQ0EsTUFBTXpCLElBQUl1QixTQUFTLENBQUMsRUFBRTtJQUN0QixPQUFPQSxTQUFTLENBQUMsRUFBRSxDQUFDdkIsRUFBRWtCLElBQUksQ0FBQyxDQUFDbEI7QUFDOUI7QUFDQSxNQUFNMEIsSUFBSSxhQUFhLEdBQUc7SUFDeEIsTUFBTTFCLElBQUksYUFBYSxHQUFHMkIsT0FBT0MsR0FBRyxDQUFDO0lBQ3JDLE9BQU8sY0FBY25CLG1EQUFDQTtRQVNwQm9CLFNBQVM7WUFDUCxPQUFPO2dCQUNMLEdBQUcsSUFBSSxDQUFDN0IsRUFBRTtnQkFDVixHQUFHLElBQUk7WUFDVDtRQUNGO1FBYkE4QixZQUFZNUIsQ0FBQyxDQUFFO1lBQ2IsS0FBSyxDQUFDQSxLQUFLLE9BQU8sS0FBSyxJQUFJQSxFQUFFNkIsT0FBTyxFQUFFN0IsS0FBSyxRQUFRQSxFQUFFOEIsS0FBSyxHQUFHO2dCQUMzREEsT0FBTzlCLEVBQUU4QixLQUFLO1lBQ2hCLElBQUksS0FBSyxJQUFJOUIsS0FBTUwsQ0FBQUEsT0FBT29DLE1BQU0sQ0FBQyxJQUFJLEVBQUUvQixJQUFJTCxPQUFPQyxjQUFjLENBQUMsSUFBSSxFQUFFRSxHQUFHO2dCQUN4RU0sT0FBT0o7Z0JBQ1BDLFlBQVksQ0FBQztZQUNmLEVBQUM7UUFDSDtJQU9GO0FBQ0YsS0FBSytCLElBQUksQ0FBQ2xDO0lBQ1IsTUFBTUMsVUFBVXlCO1FBQ2RJLGFBQWM7WUFDWixLQUFLLElBQUlQO1lBQ1RoQixFQUFFLElBQUksRUFBRSxRQUFRUDtRQUNsQjtJQUNGO0lBQ0EsT0FBT0MsRUFBRWtDLFNBQVMsQ0FBQ0MsSUFBSSxHQUFHcEMsR0FBR0M7QUFDL0I7QUFNRSIsInNvdXJjZXMiOlsiL1VzZXJzL2V0aGFua2ltL05lc3Rvci9tZWRmZXRjaC5qcy9tZWRmZXRjaC9kaXN0L0RhdGEtQ1laQXF0WkIubWpzIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBvID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIHUgPSAodCwgbiwgZSkgPT4gbiBpbiB0ID8gbyh0LCBuLCB7IGVudW1lcmFibGU6ICEwLCBjb25maWd1cmFibGU6ICEwLCB3cml0YWJsZTogITAsIHZhbHVlOiBlIH0pIDogdFtuXSA9IGU7XG52YXIgcyA9ICh0LCBuLCBlKSA9PiB1KHQsIHR5cGVvZiBuICE9IFwic3ltYm9sXCIgPyBuICsgXCJcIiA6IG4sIGUpO1xuaW1wb3J0IHsgWSBhcyBpLCBzIGFzIGYsIFMgYXMgYywgaSBhcyBkIH0gZnJvbSBcIi4vRWZmZWN0LUQ0ckJhbW96Lm1qc1wiO1xuY29uc3QgYSA9IGYsIGcgPSAoKSA9PiAodCkgPT4gdCA9PT0gdm9pZCAwID8gT2JqZWN0LmNyZWF0ZShjKSA6IGEodCksIGwgPSAodCkgPT4gKG4pID0+IHtcbiAgY29uc3QgZSA9IG4gPT09IHZvaWQgMCA/IE9iamVjdC5jcmVhdGUoYykgOiBhKG4pO1xuICByZXR1cm4gZS5fdGFnID0gdCwgZTtcbn0sIGggPSAoKSA9PiBuZXcgUHJveHkoe30sIHtcbiAgZ2V0KHQsIG4sIGUpIHtcbiAgICByZXR1cm4gbiA9PT0gXCIkaXNcIiA/IGQgOiBuID09PSBcIiRtYXRjaFwiID8gbSA6IGwobik7XG4gIH1cbn0pO1xuZnVuY3Rpb24gbSgpIHtcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDEpIHtcbiAgICBjb25zdCBlID0gYXJndW1lbnRzWzBdO1xuICAgIHJldHVybiBmdW5jdGlvbihyKSB7XG4gICAgICByZXR1cm4gZVtyLl90YWddKHIpO1xuICAgIH07XG4gIH1cbiAgY29uc3QgdCA9IGFyZ3VtZW50c1swXTtcbiAgcmV0dXJuIGFyZ3VtZW50c1sxXVt0Ll90YWddKHQpO1xufVxuY29uc3QgcCA9IC8qIEBfX1BVUkVfXyAqLyBmdW5jdGlvbigpIHtcbiAgY29uc3QgdCA9IC8qIEBfX1BVUkVfXyAqLyBTeW1ib2wuZm9yKFwiZWZmZWN0L0RhdGEvRXJyb3IvcGxhaW5BcmdzXCIpO1xuICByZXR1cm4gY2xhc3MgZXh0ZW5kcyBpIHtcbiAgICBjb25zdHJ1Y3RvcihlKSB7XG4gICAgICBzdXBlcihlID09IG51bGwgPyB2b2lkIDAgOiBlLm1lc3NhZ2UsIGUgIT0gbnVsbCAmJiBlLmNhdXNlID8ge1xuICAgICAgICBjYXVzZTogZS5jYXVzZVxuICAgICAgfSA6IHZvaWQgMCksIGUgJiYgKE9iamVjdC5hc3NpZ24odGhpcywgZSksIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCB0LCB7XG4gICAgICAgIHZhbHVlOiBlLFxuICAgICAgICBlbnVtZXJhYmxlOiAhMVxuICAgICAgfSkpO1xuICAgIH1cbiAgICB0b0pTT04oKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi50aGlzW3RdLFxuICAgICAgICAuLi50aGlzXG4gICAgICB9O1xuICAgIH1cbiAgfTtcbn0oKSwgRSA9ICh0KSA9PiB7XG4gIGNsYXNzIG4gZXh0ZW5kcyBwIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICBzKHRoaXMsIFwiX3RhZ1wiLCB0KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG4ucHJvdG90eXBlLm5hbWUgPSB0LCBuO1xufTtcbmV4cG9ydCB7XG4gIEUgYXMgVCxcbiAgZyBhcyBfLFxuICBsIGFzIGEsXG4gIGggYXMgdFxufTtcbiJdLCJuYW1lcyI6WyJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJ1IiwidCIsIm4iLCJlIiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwidmFsdWUiLCJzIiwiWSIsImkiLCJmIiwiUyIsImMiLCJkIiwiYSIsImciLCJjcmVhdGUiLCJsIiwiX3RhZyIsImgiLCJQcm94eSIsImdldCIsIm0iLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJyIiwicCIsIlN5bWJvbCIsImZvciIsInRvSlNPTiIsImNvbnN0cnVjdG9yIiwibWVzc2FnZSIsImNhdXNlIiwiYXNzaWduIiwiRSIsInByb3RvdHlwZSIsIm5hbWUiLCJUIiwiXyJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/../medfetch/dist/Data-CYZAqtZB.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/../medfetch/dist/Effect-D4rBamoz.mjs":
/*!********************************************!*\
  !*** ../medfetch/dist/Effect-D4rBamoz.mjs ***!
  \********************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   $: () => (/* binding */ ME),\n/* harmony export */   A: () => (/* binding */ kc),\n/* harmony export */   B: () => (/* binding */ W$),\n/* harmony export */   C: () => (/* binding */ J$),\n/* harmony export */   D: () => (/* binding */ Bd),\n/* harmony export */   E: () => (/* binding */ tl),\n/* harmony export */   F: () => (/* binding */ ye),\n/* harmony export */   G: () => (/* binding */ de),\n/* harmony export */   H: () => (/* binding */ uE),\n/* harmony export */   I: () => (/* binding */ I),\n/* harmony export */   J: () => (/* binding */ v),\n/* harmony export */   K: () => (/* binding */ tt),\n/* harmony export */   L: () => (/* binding */ bl),\n/* harmony export */   M: () => (/* binding */ fE),\n/* harmony export */   N: () => (/* binding */ C),\n/* harmony export */   O: () => (/* binding */ Si),\n/* harmony export */   P: () => (/* binding */ Zg),\n/* harmony export */   Q: () => (/* binding */ Nr),\n/* harmony export */   R: () => (/* binding */ Wr),\n/* harmony export */   S: () => (/* binding */ Os),\n/* harmony export */   T: () => (/* binding */ SE),\n/* harmony export */   U: () => (/* binding */ _E),\n/* harmony export */   V: () => (/* binding */ pE),\n/* harmony export */   W: () => (/* binding */ $g),\n/* harmony export */   X: () => (/* binding */ xn),\n/* harmony export */   Y: () => (/* binding */ Hf),\n/* harmony export */   Z: () => (/* binding */ nm),\n/* harmony export */   _: () => (/* binding */ TE),\n/* harmony export */   a: () => (/* binding */ KI),\n/* harmony export */   a$: () => (/* binding */ Ab),\n/* harmony export */   a0: () => (/* binding */ Fn),\n/* harmony export */   a1: () => (/* binding */ to),\n/* harmony export */   a2: () => (/* binding */ NE),\n/* harmony export */   a3: () => (/* binding */ j),\n/* harmony export */   a4: () => (/* binding */ A),\n/* harmony export */   a5: () => (/* binding */ Nn),\n/* harmony export */   a6: () => (/* binding */ Ne),\n/* harmony export */   a7: () => (/* binding */ dc),\n/* harmony export */   a8: () => (/* binding */ CE),\n/* harmony export */   a9: () => (/* binding */ ha),\n/* harmony export */   aA: () => (/* binding */ zI),\n/* harmony export */   aB: () => (/* binding */ Tk),\n/* harmony export */   aC: () => (/* binding */ kg),\n/* harmony export */   aD: () => (/* binding */ tI),\n/* harmony export */   aE: () => (/* binding */ VE),\n/* harmony export */   aF: () => (/* binding */ Dg),\n/* harmony export */   aG: () => (/* binding */ sE),\n/* harmony export */   aH: () => (/* binding */ gI),\n/* harmony export */   aI: () => (/* binding */ dE),\n/* harmony export */   aJ: () => (/* binding */ zE),\n/* harmony export */   aK: () => (/* binding */ rE),\n/* harmony export */   aL: () => (/* binding */ dI),\n/* harmony export */   aM: () => (/* binding */ aE),\n/* harmony export */   aN: () => (/* binding */ tE),\n/* harmony export */   aO: () => (/* binding */ Yg),\n/* harmony export */   aP: () => (/* binding */ Z$),\n/* harmony export */   aQ: () => (/* binding */ Ss),\n/* harmony export */   aR: () => (/* binding */ Q$),\n/* harmony export */   aS: () => (/* binding */ H$),\n/* harmony export */   aT: () => (/* binding */ gE),\n/* harmony export */   aU: () => (/* binding */ Y$),\n/* harmony export */   aV: () => (/* binding */ G$),\n/* harmony export */   aW: () => (/* binding */ mE),\n/* harmony export */   aX: () => (/* binding */ oE),\n/* harmony export */   aY: () => (/* binding */ W),\n/* harmony export */   aZ: () => (/* binding */ Sl),\n/* harmony export */   a_: () => (/* binding */ bE),\n/* harmony export */   aa: () => (/* binding */ FE),\n/* harmony export */   ab: () => (/* binding */ ar),\n/* harmony export */   ac: () => (/* binding */ Bn),\n/* harmony export */   ad: () => (/* binding */ Cy),\n/* harmony export */   ae: () => (/* binding */ My),\n/* harmony export */   af: () => (/* binding */ Oe),\n/* harmony export */   ag: () => (/* binding */ $y),\n/* harmony export */   ah: () => (/* binding */ Iy),\n/* harmony export */   ai: () => (/* binding */ Te),\n/* harmony export */   aj: () => (/* binding */ RE),\n/* harmony export */   ak: () => (/* binding */ wg),\n/* harmony export */   al: () => (/* binding */ U),\n/* harmony export */   am: () => (/* binding */ iE),\n/* harmony export */   an: () => (/* binding */ cE),\n/* harmony export */   ao: () => (/* binding */ Qa),\n/* harmony export */   ap: () => (/* binding */ it),\n/* harmony export */   aq: () => (/* binding */ Xu),\n/* harmony export */   ar: () => (/* binding */ Pt),\n/* harmony export */   as: () => (/* binding */ ZE),\n/* harmony export */   at: () => (/* binding */ eE),\n/* harmony export */   au: () => (/* binding */ at),\n/* harmony export */   av: () => (/* binding */ RI),\n/* harmony export */   aw: () => (/* binding */ $I),\n/* harmony export */   ax: () => (/* binding */ eI),\n/* harmony export */   ay: () => (/* binding */ yE),\n/* harmony export */   az: () => (/* binding */ le),\n/* harmony export */   b: () => (/* binding */ YE),\n/* harmony export */   b$: () => (/* binding */ JI),\n/* harmony export */   b0: () => (/* binding */ PE),\n/* harmony export */   b1: () => (/* binding */ Lb),\n/* harmony export */   b2: () => (/* binding */ ro),\n/* harmony export */   b3: () => (/* binding */ jb),\n/* harmony export */   b4: () => (/* binding */ V),\n/* harmony export */   b5: () => (/* binding */ Q),\n/* harmony export */   b6: () => (/* binding */ be),\n/* harmony export */   b7: () => (/* binding */ Ae),\n/* harmony export */   b8: () => (/* binding */ yt),\n/* harmony export */   b9: () => (/* binding */ Jc),\n/* harmony export */   bA: () => (/* binding */ z),\n/* harmony export */   bB: () => (/* binding */ Bt),\n/* harmony export */   bC: () => (/* binding */ Hg),\n/* harmony export */   bD: () => (/* binding */ Tm),\n/* harmony export */   bE: () => (/* binding */ Yf),\n/* harmony export */   bF: () => (/* binding */ Df),\n/* harmony export */   bG: () => (/* binding */ Pl),\n/* harmony export */   bH: () => (/* binding */ Qf),\n/* harmony export */   bI: () => (/* binding */ vE),\n/* harmony export */   bJ: () => (/* binding */ ve),\n/* harmony export */   bK: () => (/* binding */ Mm),\n/* harmony export */   bL: () => (/* binding */ K),\n/* harmony export */   bM: () => (/* binding */ Wi),\n/* harmony export */   bN: () => (/* binding */ rI),\n/* harmony export */   bO: () => (/* binding */ GI),\n/* harmony export */   bP: () => (/* binding */ EI),\n/* harmony export */   bQ: () => (/* binding */ uI),\n/* harmony export */   bR: () => (/* binding */ BE),\n/* harmony export */   bS: () => (/* binding */ wO),\n/* harmony export */   bT: () => (/* binding */ Gc),\n/* harmony export */   bU: () => (/* binding */ pI),\n/* harmony export */   bV: () => (/* binding */ vI),\n/* harmony export */   bW: () => (/* binding */ HI),\n/* harmony export */   bX: () => (/* binding */ Zl),\n/* harmony export */   bY: () => (/* binding */ EE),\n/* harmony export */   bZ: () => (/* binding */ XE),\n/* harmony export */   b_: () => (/* binding */ II),\n/* harmony export */   ba: () => (/* binding */ mt),\n/* harmony export */   bb: () => (/* binding */ $a),\n/* harmony export */   bc: () => (/* binding */ y0),\n/* harmony export */   bd: () => (/* binding */ xE),\n/* harmony export */   be: () => (/* binding */ jE),\n/* harmony export */   bf: () => (/* binding */ es),\n/* harmony export */   bg: () => (/* binding */ zf),\n/* harmony export */   bh: () => (/* binding */ fs),\n/* harmony export */   bi: () => (/* binding */ m),\n/* harmony export */   bj: () => (/* binding */ y),\n/* harmony export */   bk: () => (/* binding */ T),\n/* harmony export */   bl: () => (/* binding */ Ps),\n/* harmony export */   bm: () => (/* binding */ ao),\n/* harmony export */   bn: () => (/* binding */ N),\n/* harmony export */   bo: () => (/* binding */ Zr),\n/* harmony export */   bp: () => (/* binding */ Qy),\n/* harmony export */   bq: () => (/* binding */ Ze),\n/* harmony export */   br: () => (/* binding */ Ks),\n/* harmony export */   bs: () => (/* binding */ L),\n/* harmony export */   bt: () => (/* binding */ xs),\n/* harmony export */   bu: () => (/* binding */ nt),\n/* harmony export */   bv: () => (/* binding */ rb),\n/* harmony export */   bw: () => (/* binding */ oe),\n/* harmony export */   bx: () => (/* binding */ pt),\n/* harmony export */   by: () => (/* binding */ AE),\n/* harmony export */   bz: () => (/* binding */ S),\n/* harmony export */   c: () => (/* binding */ MI),\n/* harmony export */   c0: () => (/* binding */ PI),\n/* harmony export */   c1: () => (/* binding */ LE),\n/* harmony export */   c2: () => (/* binding */ JE),\n/* harmony export */   c3: () => (/* binding */ wI),\n/* harmony export */   c4: () => (/* binding */ DI),\n/* harmony export */   c5: () => (/* binding */ kI),\n/* harmony export */   c6: () => (/* binding */ oI),\n/* harmony export */   c7: () => (/* binding */ _I),\n/* harmony export */   c8: () => (/* binding */ aI),\n/* harmony export */   c9: () => (/* binding */ WI),\n/* harmony export */   cA: () => (/* binding */ wE),\n/* harmony export */   cB: () => (/* binding */ ie),\n/* harmony export */   cC: () => (/* binding */ jI),\n/* harmony export */   cD: () => (/* binding */ OE),\n/* harmony export */   cE: () => (/* binding */ QI),\n/* harmony export */   cF: () => (/* binding */ hE),\n/* harmony export */   cG: () => (/* binding */ lE),\n/* harmony export */   cH: () => (/* binding */ Es),\n/* harmony export */   cI: () => (/* binding */ kE),\n/* harmony export */   ca: () => (/* binding */ HE),\n/* harmony export */   cb: () => (/* binding */ nI),\n/* harmony export */   cc: () => (/* binding */ TI),\n/* harmony export */   cd: () => (/* binding */ SI),\n/* harmony export */   ce: () => (/* binding */ iI),\n/* harmony export */   cf: () => (/* binding */ LI),\n/* harmony export */   cg: () => (/* binding */ bI),\n/* harmony export */   ch: () => (/* binding */ ht),\n/* harmony export */   ci: () => (/* binding */ O),\n/* harmony export */   cj: () => (/* binding */ UE),\n/* harmony export */   ck: () => (/* binding */ qE),\n/* harmony export */   cl: () => (/* binding */ vO),\n/* harmony export */   cm: () => (/* binding */ Sc),\n/* harmony export */   cn: () => (/* binding */ yI),\n/* harmony export */   co: () => (/* binding */ UI),\n/* harmony export */   cp: () => (/* binding */ NI),\n/* harmony export */   cq: () => (/* binding */ FI),\n/* harmony export */   cr: () => (/* binding */ CI),\n/* harmony export */   cs: () => (/* binding */ fI),\n/* harmony export */   ct: () => (/* binding */ xI),\n/* harmony export */   cu: () => (/* binding */ hI),\n/* harmony export */   cv: () => (/* binding */ KE),\n/* harmony export */   cw: () => (/* binding */ qI),\n/* harmony export */   cx: () => (/* binding */ DE),\n/* harmony export */   cy: () => (/* binding */ WE),\n/* harmony export */   cz: () => (/* binding */ mI),\n/* harmony export */   d: () => (/* binding */ l),\n/* harmony export */   e: () => (/* binding */ cI),\n/* harmony export */   f: () => (/* binding */ YI),\n/* harmony export */   g: () => (/* binding */ GE),\n/* harmony export */   h: () => (/* binding */ OI),\n/* harmony export */   i: () => (/* binding */ el),\n/* harmony export */   j: () => (/* binding */ VI),\n/* harmony export */   k: () => (/* binding */ sI),\n/* harmony export */   l: () => (/* binding */ lI),\n/* harmony export */   m: () => (/* binding */ QE),\n/* harmony export */   n: () => (/* binding */ $e),\n/* harmony export */   o: () => (/* binding */ nE),\n/* harmony export */   p: () => (/* binding */ f),\n/* harmony export */   q: () => (/* binding */ P),\n/* harmony export */   r: () => (/* binding */ BI),\n/* harmony export */   s: () => (/* binding */ IE),\n/* harmony export */   t: () => (/* binding */ AI),\n/* harmony export */   u: () => (/* binding */ ae),\n/* harmony export */   v: () => (/* binding */ w),\n/* harmony export */   w: () => (/* binding */ X$),\n/* harmony export */   x: () => (/* binding */ $),\n/* harmony export */   y: () => (/* binding */ Zn),\n/* harmony export */   z: () => (/* binding */ zd)\n/* harmony export */ });\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"(app-pages-browser)/../node_modules/.pnpm/next@15.3.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/build/polyfills/process.js\");\nvar Pd = Object.defineProperty;\nvar No = (e)=>{\n    throw TypeError(e);\n};\n_c1 = No;\nvar xd = (e, t, n)=>t in e ? Pd(e, t, {\n        enumerable: !0,\n        configurable: !0,\n        writable: !0,\n        value: n\n    }) : e[t] = n;\nvar u = (e, t, n)=>xd(e, typeof t != \"symbol\" ? t + \"\" : t, n), Ao = (e, t, n)=>t.has(e) || No(\"Cannot \" + n);\nvar Po = (e, t, n)=>(Ao(e, t, \"read from private field\"), n ? n.call(e) : t.get(e)), xo = (e, t, n)=>t.has(e) ? No(\"Cannot add the same private member more than once\") : t instanceof WeakSet ? t.add(e) : t.set(e, n), jo = (e, t, n, r)=>(Ao(e, t, \"write to private field\"), r ? r.call(e, n) : t.set(e, n), n);\nconst jd = (e)=>typeof e == \"function\", l = function(e, t) {\n    if (typeof e == \"function\") return function() {\n        return e(arguments) ? t.apply(this, arguments) : (n)=>t(n, ...arguments);\n    };\n    switch(e){\n        case 0:\n        case 1:\n            throw new RangeError(\"Invalid arity \".concat(e));\n        case 2:\n            return function(n, r) {\n                return arguments.length >= 2 ? t(n, r) : function(s) {\n                    return t(s, n);\n                };\n            };\n        case 3:\n            return function(n, r, s) {\n                return arguments.length >= 3 ? t(n, r, s) : function(c) {\n                    return t(c, n, r);\n                };\n            };\n        case 4:\n            return function(n, r, s, c) {\n                return arguments.length >= 4 ? t(n, r, s, c) : function(i) {\n                    return t(i, n, r, s);\n                };\n            };\n        case 5:\n            return function(n, r, s, c, i) {\n                return arguments.length >= 5 ? t(n, r, s, c, i) : function(o) {\n                    return t(o, n, r, s, c);\n                };\n            };\n        default:\n            return function() {\n                if (arguments.length >= e) return t.apply(this, arguments);\n                const n = arguments;\n                return function(r) {\n                    return t(r, ...n);\n                };\n            };\n    }\n}, P = (e)=>e, Qn = (e)=>()=>e, Lo = /* @__PURE__ */ Qn(!0), bc = /* @__PURE__ */ Qn(!1), Ld = /* @__PURE__ */ Qn(null), Zu = /* @__PURE__ */ Qn(void 0), Sc = Zu;\nfunction f(e, t, n, r, s, c, i, o, a) {\n    switch(arguments.length){\n        case 1:\n            return e;\n        case 2:\n            return t(e);\n        case 3:\n            return n(t(e));\n        case 4:\n            return r(n(t(e)));\n        case 5:\n            return s(r(n(t(e))));\n        case 6:\n            return c(s(r(n(t(e)))));\n        case 7:\n            return i(c(s(r(n(t(e))))));\n        case 8:\n            return o(i(c(s(r(n(t(e)))))));\n        case 9:\n            return a(o(i(c(s(r(n(t(e))))))));\n        default:\n            {\n                let h = arguments[0];\n                for(let d = 1; d < arguments.length; d++)h = arguments[d](h);\n                return h;\n            }\n    }\n}\nconst ys = (e)=>(t, n)=>t === n || e(t, n), Dd = /* @__PURE__ */ l(2, (e, t)=>ys((n, r)=>e(t(n), t(r)))), qd = (e)=>ys((t, n)=>{\n        if (t.length !== n.length) return !1;\n        for(let r = 0; r < t.length; r++)if (!e(t[r], n[r])) return !1;\n        return !0;\n    });\nlet Ud = \"3.14.12\";\nconst bs = ()=>Ud, Or = \"effect/GlobalValue/globalStoreId/\".concat(bs());\nlet wn;\nconst C = (e, t)=>{\n    var _globalThis_Or;\n    return wn || ((_globalThis_Or = globalThis[Or]) !== null && _globalThis_Or !== void 0 ? _globalThis_Or : globalThis[Or] = /* @__PURE__ */ new Map(), wn = globalThis[Or]), wn.has(e) || wn.set(e, t()), wn.get(e);\n}, zd = (e)=>typeof e == \"string\", kc = (e)=>typeof e == \"number\", W$ = (e)=>typeof e == \"boolean\", Bd = (e)=>typeof e == \"bigint\", J$ = (e)=>typeof e == \"symbol\", Zn = jd, H$ = (e)=>e === void 0, G$ = (e)=>e !== void 0, Y$ = (e)=>e !== null, Q$ = (e)=>!1, Xu = (e)=>typeof e == \"object\" && e !== null, Ss = (e)=>Xu(e) || Zn(e), $ = /* @__PURE__ */ l(2, (e, t)=>Ss(e) && t in e), el = /* @__PURE__ */ l(2, (e, t)=>$(e, \"_tag\") && e._tag === t), Tt = (e)=>e == null, Z$ = (e)=>e != null, X$ = (e)=>e instanceof Date, tl = (e)=>$(e, Symbol.iterator), eE = (e)=>Xu(e) && !Array.isArray(e), nl = (e)=>$(e, \"then\") && Zn(e.then), ks = (e)=>\"BUG: \".concat(e, \" - please report an issue at https://github.com/Effect-TS/effect/issues\");\nlet rl = class sl {\n    /**\n   * @since 2.0.0\n   */ next(t) {\n        return this.called ? {\n            value: t,\n            done: !0\n        } : (this.called = !0, {\n            value: this.self,\n            done: !1\n        });\n    }\n    /**\n   * @since 2.0.0\n   */ return(t) {\n        return {\n            value: t,\n            done: !0\n        };\n    }\n    /**\n   * @since 2.0.0\n   */ throw(t) {\n        throw t;\n    }\n    /**\n   * @since 2.0.0\n   */ [Symbol.iterator]() {\n        return new sl(this.self);\n    }\n    constructor(t){\n        u(this, \"self\");\n        u(this, \"called\", !1);\n        this.self = t;\n    }\n};\nconst Vd = 335903614, Kd = 4150755663, Wd = 1481765933, Jd = 1284865837, Hd = 9007199254740992, Gd = 134217728;\nclass Yd {\n    /**\n   * Returns a copy of the internal state of this random number generator as a\n   * JavaScript Array.\n   *\n   * @category getters\n   * @since 2.0.0\n   */ getState() {\n        return [\n            this._state[0],\n            this._state[1],\n            this._state[2],\n            this._state[3]\n        ];\n    }\n    /**\n   * Restore state previously retrieved using `getState()`.\n   *\n   * @since 2.0.0\n   */ setState(t) {\n        this._state[0] = t[0], this._state[1] = t[1], this._state[2] = t[2], this._state[3] = t[3] | 1;\n    }\n    /**\n   * Get a uniformly distributed 32 bit integer between [0, max).\n   *\n   * @category getter\n   * @since 2.0.0\n   */ integer(t) {\n        return Math.round(this.number() * Number.MAX_SAFE_INTEGER) % t;\n    }\n    /**\n   * Get a uniformly distributed IEEE-754 double between 0.0 and 1.0, with\n   * 53 bits of precision (every bit of the mantissa is randomized).\n   *\n   * @category getters\n   * @since 2.0.0\n   */ number() {\n        const t = (this._next() & 67108863) * 1, n = (this._next() & 134217727) * 1;\n        return (t * Gd + n) / Hd;\n    }\n    /** @internal */ _next() {\n        const t = this._state[0] >>> 0, n = this._state[1] >>> 0;\n        Qd(this._state, t, n, Wd, Jd), Do(this._state, this._state[0], this._state[1], this._state[2], this._state[3]);\n        let r = t >>> 18, s = (n >>> 18 | t << 14) >>> 0;\n        r = (r ^ t) >>> 0, s = (s ^ n) >>> 0;\n        const c = (s >>> 27 | r << 5) >>> 0, i = t >>> 27, o = (-i >>> 0 & 31) >>> 0;\n        return (c >>> i | c << o) >>> 0;\n    }\n    constructor(t, n, r, s){\n        u(this, \"_state\");\n        return Tt(n) && Tt(t) ? (n = Math.random() * 4294967295 >>> 0, t = 0) : Tt(n) && (n = t, t = 0), Tt(s) && Tt(r) ? (s = this._state ? this._state[3] : Kd, r = this._state ? this._state[2] : Vd) : Tt(s) && (s = r, r = 0), this._state = new Int32Array([\n            0,\n            0,\n            r >>> 0,\n            ((s || 0) | 1) >>> 0\n        ]), this._next(), Do(this._state, this._state[0], this._state[1], t >>> 0, n >>> 0), this._next(), this;\n    }\n}\nfunction Qd(e, t, n, r, s) {\n    let c = (n >>> 16) * (s & 65535) >>> 0, i = (n & 65535) * (s >>> 16) >>> 0, o = (n & 65535) * (s & 65535) >>> 0, a = (n >>> 16) * (s >>> 16) + ((i >>> 16) + (c >>> 16)) >>> 0;\n    i = i << 16 >>> 0, o = o + i >>> 0, o >>> 0 < i >>> 0 && (a = a + 1 >>> 0), c = c << 16 >>> 0, o = o + c >>> 0, o >>> 0 < c >>> 0 && (a = a + 1 >>> 0), a = a + Math.imul(n, r) >>> 0, a = a + Math.imul(t, s) >>> 0, e[0] = a, e[1] = o;\n}\n_c2 = Qd;\nfunction Do(e, t, n, r, s) {\n    let c = t + r >>> 0;\n    const i = n + s >>> 0;\n    i >>> 0 < n >>> 0 && (c = c + 1 | 0), e[0] = c, e[1] = i;\n}\n_c3 = Do;\nconst vc = /* @__PURE__ */ Symbol.for(\"effect/Utils/YieldWrap\");\nvar Yn;\nclass Xn {\n    /**\n   * @since 3.0.6\n   */ [vc]() {\n        return Po(this, Yn);\n    }\n    constructor(t){\n        /**\n     * @since 3.0.6\n     */ xo(this, Yn);\n        jo(this, Yn, t);\n    }\n}\nYn = new WeakMap();\nfunction Zd(e) {\n    if (typeof e == \"object\" && e !== null && vc in e) return e[vc]();\n    throw new Error(ks(\"yieldWrapGet\"));\n}\n_c4 = Zd;\nconst pe = /* @__PURE__ */ C(\"effect/Utils/isStructuralRegion\", ()=>({\n        enabled: !1,\n        tester: void 0\n    })), Xd = (e)=>{\n    const t = {\n        [e] (n) {\n            return n();\n        }\n    };\n    return function(n) {\n        return t[e](n);\n    };\n}, ee = /* @__PURE__ */ Xd(\"effect_internal_function\"), ic = /* @__PURE__ */ C(/* @__PURE__ */ Symbol.for(\"effect/Hash/randomHashCache\"), ()=>/* @__PURE__ */ new WeakMap()), F = /* @__PURE__ */ Symbol.for(\"effect/Hash\"), k = (e)=>{\n    if (pe.enabled === !0) return 0;\n    switch(typeof e){\n        case \"number\":\n            return di(e);\n        case \"bigint\":\n            return B(e.toString(10));\n        case \"boolean\":\n            return B(String(e));\n        case \"symbol\":\n            return B(String(e));\n        case \"string\":\n            return B(e);\n        case \"undefined\":\n            return B(\"undefined\");\n        case \"function\":\n        case \"object\":\n            return e === null ? B(\"null\") : e instanceof Date ? k(e.toISOString()) : e instanceof URL ? k(e.href) : eg(e) ? e[F]() : hi(e);\n        default:\n            throw new Error(\"BUG: unhandled typeof \".concat(typeof e, \" - please report an issue at https://github.com/Effect-TS/effect/issues\"));\n    }\n}, hi = (e)=>(ic.has(e) || ic.set(e, di(Math.floor(Math.random() * Number.MAX_SAFE_INTEGER))), ic.get(e)), R = (e)=>(t)=>t * 53 ^ e, vs = (e)=>e & 3221225471 | e >>> 1 & 1073741824, eg = (e)=>$(e, F), di = (e)=>{\n    if (e !== e || e === 1 / 0) return 0;\n    let t = e | 0;\n    for(t !== e && (t ^= e * 4294967295); e > 4294967295;)t ^= e /= 4294967295;\n    return vs(t);\n}, B = (e)=>{\n    let t = 5381, n = e.length;\n    for(; n;)t = t * 33 ^ e.charCodeAt(--n);\n    return vs(t);\n}, tg = (e, t)=>{\n    let n = 12289;\n    for(let r = 0; r < t.length; r++)n ^= f(B(t[r]), R(k(e[t[r]])));\n    return vs(n);\n}, cl = (e)=>tg(e, Object.keys(e)), er = (e)=>{\n    let t = 6151;\n    for(let n = 0; n < e.length; n++)t = f(t, R(k(e[n])));\n    return vs(t);\n}, q = function() {\n    if (arguments.length === 1) {\n        const n = arguments[0];\n        return function(r) {\n            return Object.defineProperty(n, F, {\n                value () {\n                    return r;\n                },\n                enumerable: !1\n            }), r;\n        };\n    }\n    const e = arguments[0], t = arguments[1];\n    return Object.defineProperty(e, F, {\n        value () {\n            return t;\n        },\n        enumerable: !1\n    }), t;\n}, E = /* @__PURE__ */ Symbol.for(\"effect/Equal\");\nfunction O() {\n    return arguments.length === 1 ? (e)=>qr(e, arguments[0]) : qr(arguments[0], arguments[1]);\n}\n_c5 = O;\nfunction qr(e, t) {\n    if (e === t) return !0;\n    const n = typeof e;\n    if (n !== typeof t) return !1;\n    if (n === \"object\" || n === \"function\") {\n        if (e !== null && t !== null) {\n            if (Ur(e) && Ur(t)) return k(e) === k(t) && e[E](t) ? !0 : pe.enabled && pe.tester ? pe.tester(e, t) : !1;\n            if (e instanceof Date && t instanceof Date) return e.toISOString() === t.toISOString();\n            if (e instanceof URL && t instanceof URL) return e.href === t.href;\n        }\n        if (pe.enabled) {\n            if (Array.isArray(e) && Array.isArray(t)) return e.length === t.length && e.every((r, s)=>qr(r, t[s]));\n            if (Object.getPrototypeOf(e) === Object.prototype && Object.getPrototypeOf(e) === Object.prototype) {\n                const r = Object.keys(e), s = Object.keys(t);\n                if (r.length === s.length) {\n                    for (const c of r)if (!(c in t && qr(e[c], t[c]))) return pe.tester ? pe.tester(e, t) : !1;\n                    return !0;\n                }\n            }\n            return pe.tester ? pe.tester(e, t) : !1;\n        }\n    }\n    return pe.enabled && pe.tester ? pe.tester(e, t) : !1;\n}\nconst Ur = (e)=>$(e, E), gi = ()=>O, U = /* @__PURE__ */ Symbol.for(\"nodejs.util.inspect.custom\"), V = (e)=>{\n    try {\n        if ($(e, \"toJSON\") && Zn(e.toJSON) && e.toJSON.length === 0) return e.toJSON();\n        if (Array.isArray(e)) return e.map(V);\n    } catch (e) {\n        return {};\n    }\n    return rg(e);\n}, Q = (e)=>JSON.stringify(e, null, 2), Ut = function(e) {\n    let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 2;\n    if (typeof e == \"string\") return e;\n    try {\n        return typeof e == \"object\" ? il(e, t) : String(e);\n    } catch (e1) {\n        return String(e);\n    }\n}, il = (e, t)=>{\n    let n = [];\n    const r = JSON.stringify(e, (s, c)=>typeof c == \"object\" && c !== null ? n.includes(c) ? void 0 : n.push(c) && (lt.fiberRefs !== void 0 && ol(c) ? c[mi](lt.fiberRefs) : c) : c, t);\n    return n = void 0, r;\n}, mi = /* @__PURE__ */ Symbol.for(\"effect/Inspectable/Redactable\"), ol = (e)=>typeof e == \"object\" && e !== null && mi in e, lt = /* @__PURE__ */ C(\"effect/Inspectable/redactableState\", ()=>({\n        fiberRefs: void 0\n    })), ng = (e, t)=>{\n    const n = lt.fiberRefs;\n    lt.fiberRefs = e;\n    try {\n        return t();\n    } finally{\n        lt.fiberRefs = n;\n    }\n}, rg = (e)=>ol(e) && lt.fiberRefs !== void 0 ? e[mi](lt.fiberRefs) : e, w = (e, t)=>{\n    switch(t.length){\n        case 0:\n            return e;\n        case 1:\n            return t[0](e);\n        case 2:\n            return t[1](t[0](e));\n        case 3:\n            return t[2](t[1](t[0](e)));\n        case 4:\n            return t[3](t[2](t[1](t[0](e))));\n        case 5:\n            return t[4](t[3](t[2](t[1](t[0](e)))));\n        case 6:\n            return t[5](t[4](t[3](t[2](t[1](t[0](e))))));\n        case 7:\n            return t[6](t[5](t[4](t[3](t[2](t[1](t[0](e)))))));\n        case 8:\n            return t[7](t[6](t[5](t[4](t[3](t[2](t[1](t[0](e))))))));\n        case 9:\n            return t[8](t[7](t[6](t[5](t[4](t[3](t[2](t[1](t[0](e)))))))));\n        default:\n            {\n                let n = e;\n                for(let r = 0, s = t.length; r < s; r++)n = t[r](n);\n                return n;\n            }\n    }\n}, Rn = \"Async\", ws = \"Commit\", te = \"Failure\", Tr = \"OnFailure\", zr = \"OnSuccess\", Br = \"OnSuccessAndFailure\", ne = \"Success\", al = \"Sync\", sg = \"Tag\", un = \"UpdateRuntimeFlags\", Vr = \"While\", Mn = \"Iterator\", ul = \"WithRuntime\", Cr = \"Yield\", pi = \"RevertFlags\", cg = /* @__PURE__ */ Symbol.for(\"effect/Effect\"), ig = /* @__PURE__ */ Symbol.for(\"effect/Stream\"), og = /* @__PURE__ */ Symbol.for(\"effect/Sink\"), ag = /* @__PURE__ */ Symbol.for(\"effect/Channel\"), zt = {\n    /* c8 ignore next */ _R: (e)=>e,\n    /* c8 ignore next */ _E: (e)=>e,\n    /* c8 ignore next */ _A: (e)=>e,\n    _V: /* @__PURE__ */ bs()\n}, ug = {\n    /* c8 ignore next */ _A: (e)=>e,\n    /* c8 ignore next */ _In: (e)=>e,\n    /* c8 ignore next */ _L: (e)=>e,\n    /* c8 ignore next */ _E: (e)=>e,\n    /* c8 ignore next */ _R: (e)=>e\n}, lg = {\n    /* c8 ignore next */ _Env: (e)=>e,\n    /* c8 ignore next */ _InErr: (e)=>e,\n    /* c8 ignore next */ _InElem: (e)=>e,\n    /* c8 ignore next */ _InDone: (e)=>e,\n    /* c8 ignore next */ _OutErr: (e)=>e,\n    /* c8 ignore next */ _OutElem: (e)=>e,\n    /* c8 ignore next */ _OutDone: (e)=>e\n}, tr = {\n    [cg]: zt,\n    [ig]: zt,\n    [og]: ug,\n    [ag]: lg,\n    [E] (e) {\n        return this === e;\n    },\n    [F] () {\n        return q(this, hi(this));\n    },\n    [Symbol.iterator] () {\n        return new rl(new Xn(this));\n    },\n    pipe () {\n        return w(this, arguments);\n    }\n}, Os = {\n    [F] () {\n        return q(this, cl(this));\n    },\n    [E] (e) {\n        const t = Object.keys(this), n = Object.keys(e);\n        if (t.length !== n.length) return !1;\n        for (const r of t)if (!(r in e && O(this[r], e[r]))) return !1;\n        return !0;\n    }\n}, nr = {\n    ...tr,\n    _op: ws\n}, fg = {\n    ...nr,\n    ...Os\n}, hg = /* @__PURE__ */ function() {\n    function e() {}\n    return e.prototype = nr, e;\n}(), ll = /* @__PURE__ */ Symbol.for(\"effect/Option\"), fl = {\n    ...tr,\n    [ll]: {\n        _A: (e)=>e\n    },\n    [U] () {\n        return this.toJSON();\n    },\n    toString () {\n        return Q(this.toJSON());\n    }\n}, dg = /* @__PURE__ */ Object.assign(/* @__PURE__ */ Object.create(fl), {\n    _tag: \"Some\",\n    _op: \"Some\",\n    [E] (e) {\n        return _i(e) && dl(e) && O(this.value, e.value);\n    },\n    [F] () {\n        return q(this, R(k(this._tag))(k(this.value)));\n    },\n    toJSON () {\n        return {\n            _id: \"Option\",\n            _tag: this._tag,\n            value: V(this.value)\n        };\n    }\n}), gg = /* @__PURE__ */ k(\"None\"), mg = /* @__PURE__ */ Object.assign(/* @__PURE__ */ Object.create(fl), {\n    _tag: \"None\",\n    _op: \"None\",\n    [E] (e) {\n        return _i(e) && hl(e);\n    },\n    [F] () {\n        return gg;\n    },\n    toJSON () {\n        return {\n            _id: \"Option\",\n            _tag: this._tag\n        };\n    }\n}), _i = (e)=>$(e, ll), hl = (e)=>e._tag === \"None\", dl = (e)=>e._tag === \"Some\", $s = /* @__PURE__ */ Object.create(mg), Pn = (e)=>{\n    const t = Object.create(dg);\n    return t.value = e, t;\n}, gl = /* @__PURE__ */ Symbol.for(\"effect/Either\"), ml = {\n    ...tr,\n    [gl]: {\n        _R: (e)=>e\n    },\n    [U] () {\n        return this.toJSON();\n    },\n    toString () {\n        return Q(this.toJSON());\n    }\n}, pg = /* @__PURE__ */ Object.assign(/* @__PURE__ */ Object.create(ml), {\n    _tag: \"Right\",\n    _op: \"Right\",\n    [E] (e) {\n        return yi(e) && pl(e) && O(this.right, e.right);\n    },\n    [F] () {\n        return R(k(this._tag))(k(this.right));\n    },\n    toJSON () {\n        return {\n            _id: \"Either\",\n            _tag: this._tag,\n            right: V(this.right)\n        };\n    }\n}), _g = /* @__PURE__ */ Object.assign(/* @__PURE__ */ Object.create(ml), {\n    _tag: \"Left\",\n    _op: \"Left\",\n    [E] (e) {\n        return yi(e) && bi(e) && O(this.left, e.left);\n    },\n    [F] () {\n        return R(k(this._tag))(k(this.left));\n    },\n    toJSON () {\n        return {\n            _id: \"Either\",\n            _tag: this._tag,\n            left: V(this.left)\n        };\n    }\n}), yi = (e)=>$(e, gl), bi = (e)=>e._tag === \"Left\", pl = (e)=>e._tag === \"Right\", yg = (e)=>{\n    const t = Object.create(_g);\n    return t.left = e, t;\n}, bg = (e)=>{\n    const t = Object.create(pg);\n    return t.right = e, t;\n}, Sg = (e)=>bi(e) ? $s : Pn(e.right), ae = bg, $e = yg, tE = (e)=>{\n    if (Zn(e)) try {\n        return ae(e());\n    } catch (t) {\n        return $e(t);\n    }\n    else try {\n        return ae(e.try());\n    } catch (t) {\n        return $e(e.catch(t));\n    }\n}, nE = yi, at = bi, Pt = pl, rE = /* @__PURE__ */ l(2, (e, param)=>{\n    let { onLeft: t, onRight: n } = param;\n    return at(e) ? $e(t(e.left)) : ae(n(e.right));\n}), sE = /* @__PURE__ */ l(2, (e, t)=>at(e) ? $e(t(e.left)) : ae(e.right)), cE = /* @__PURE__ */ l(2, (e, t)=>Pt(e) ? ae(t(e.right)) : $e(e.left)), kg = /* @__PURE__ */ l(2, (e, param)=>{\n    let { onLeft: t, onRight: n } = param;\n    return at(e) ? t(e.left) : n(e.right);\n}), vg = /* @__PURE__ */ kg({\n    onLeft: P,\n    onRight: P\n}), wg = /* @__PURE__ */ l(2, (e, t)=>{\n    if (Pt(e)) return e.right;\n    throw t(e.left);\n}), iE = /* @__PURE__ */ wg(()=>new Error(\"getOrThrow called on a Left\")), _l = (e)=>e.length > 0, yl = (e)=>(t, n)=>t === n ? 0 : e(t, n), Og = /* @__PURE__ */ yl((e, t)=>e < t ? -1 : 1), $g = /* @__PURE__ */ l(2, (e, t)=>yl((n, r)=>e(t(n), t(r)))), Eg = (e)=>l(2, (t, n)=>e(t, n) === 1), v = ()=>$s, I = Pn, oE = _i, W = hl, ye = dl, tt = /* @__PURE__ */ l(2, (e, param)=>{\n    let { onNone: t, onSome: n } = param;\n    return W(e) ? t() : n(e.value);\n}), aE = Sg, de = /* @__PURE__ */ l(2, (e, t)=>W(e) ? t() : e.value), uE = /* @__PURE__ */ l(2, (e, t)=>W(e) ? t() : e), Ig = /* @__PURE__ */ l(2, (e, t)=>W(e) ? I(t()) : e), Es = (e)=>e == null ? v() : I(e), lE = /* @__PURE__ */ de(Ld), it = /* @__PURE__ */ de(Zu), fE = (e)=>function() {\n        for(var _len = arguments.length, t = new Array(_len), _key = 0; _key < _len; _key++){\n            t[_key] = arguments[_key];\n        }\n        try {\n            return I(e(...t));\n        } catch (e) {\n            return v();\n        }\n    }, Fg = /* @__PURE__ */ l(2, (e, t)=>{\n    if (ye(e)) return e.value;\n    throw t();\n}), hE = /* @__PURE__ */ Fg(()=>new Error(\"getOrThrow called on a None\")), Nr = /* @__PURE__ */ l(2, (e, t)=>W(e) ? v() : I(t(e.value))), bl = /* @__PURE__ */ l(2, (e, t)=>W(e) ? v() : t(e.value)), dE = /* @__PURE__ */ l(2, (e, t)=>W(e) ? v() : Es(t(e.value))), Rg = bl, gE = /* @__PURE__ */ l(2, (e, t)=>Rg(e, (n)=>t(n) ? Pn(n) : $s)), mE = (e)=>ys((t, n)=>W(t) ? W(n) : W(n) ? !1 : e(t.value, n.value)), Mg = (e)=>l(2, (t, n)=>W(t) ? !1 : e(t.value, n)), Tg = /* @__PURE__ */ gi(), Cg = /* @__PURE__ */ Mg(Tg), pE = /* @__PURE__ */ l(2, (e, t)=>W(e) ? !1 : t(e.value)), Ng = function() {\n    for(var _len = arguments.length, e = new Array(_len), _key = 0; _key < _len; _key++){\n        e[_key] = arguments[_key];\n    }\n    return e;\n}, Si = (e)=>new Array(e), Ag = /* @__PURE__ */ l(2, (e, t)=>{\n    const n = Math.max(1, Math.floor(e)), r = new Array(n);\n    for(let s = 0; s < n; s++)r[s] = t(s);\n    return r;\n}), z = (e)=>Array.isArray(e) ? e : Array.from(e), Pg = (e)=>Array.isArray(e) ? e : [\n        e\n    ], _E = /* @__PURE__ */ l(2, (e, param)=>{\n    let { onEmpty: t, onNonEmpty: n } = param;\n    return le(e) ? n(ue(e), _t(e)) : t();\n}), Kr = /* @__PURE__ */ l(2, (e, t)=>[\n        t,\n        ...e\n    ]), xg = /* @__PURE__ */ l(2, (e, t)=>[\n        ...e,\n        t\n    ]), Sl = /* @__PURE__ */ l(2, (e, t)=>z(e).concat(z(t))), yE = Array.isArray, jg = (e)=>e.length === 0, Lg = jg, Dg = _l, le = _l, kl = (e, t)=>e < 0 || e >= t.length, qg = (e, t)=>Math.floor(Math.min(Math.max(0, e), t.length)), Ug = /* @__PURE__ */ l(2, (e, t)=>{\n    const n = Math.floor(t);\n    return kl(n, e) ? v() : I(e[n]);\n}), vl = /* @__PURE__ */ l(2, (e, t)=>{\n    const n = Math.floor(t);\n    if (kl(n, e)) throw new Error(\"Index \".concat(n, \" out of bounds\"));\n    return e[n];\n}), Tn = /* @__PURE__ */ Ug(0), ue = /* @__PURE__ */ vl(0), zg = (e)=>le(e) ? I(wl(e)) : v(), wl = (e)=>e[e.length - 1], _t = (e)=>e.slice(1), Bg = (e, t)=>{\n    let n = 0;\n    for (const r of e){\n        if (!t(r, n)) break;\n        n++;\n    }\n    return n;\n}, Vg = /* @__PURE__ */ l(2, (e, t)=>Hg(e, Bg(e, t))), Kg = /* @__PURE__ */ l(2, (e, t)=>{\n    const n = z(e);\n    return n.slice(qg(t, n), n.length);\n}), qo = (e)=>Array.from(e).reverse(), Wr = /* @__PURE__ */ l(2, (e, t)=>{\n    const n = Array.from(e);\n    return n.sort(t), n;\n}), Uo = /* @__PURE__ */ l(2, (e, t)=>Wg(e, t, Ng)), Wg = /* @__PURE__ */ l(3, (e, t, n)=>{\n    const r = z(e), s = z(t);\n    if (le(r) && le(s)) {\n        const c = [\n            n(ue(r), ue(s))\n        ], i = Math.min(r.length, s.length);\n        for(let o = 1; o < i; o++)c[o] = n(r[o], s[o]);\n        return c;\n    }\n    return [];\n}), Jg = /* @__PURE__ */ gi(), Hg = /* @__PURE__ */ l(2, (e, t)=>{\n    const n = Array.from(e), r = Math.floor(t);\n    return le(n) ? r >= 1 ? Gg(n, r) : [\n        [],\n        n\n    ] : [\n        n,\n        []\n    ];\n}), Gg = /* @__PURE__ */ l(2, (e, t)=>{\n    const n = Math.max(1, Math.floor(t));\n    return n >= e.length ? [\n        Yg(e),\n        []\n    ] : [\n        Kr(e.slice(1, n), ue(e)),\n        e.slice(n)\n    ];\n}), Yg = (e)=>e.slice(), Qg = /* @__PURE__ */ l(3, (e, t, n)=>{\n    const r = z(e), s = z(t);\n    return le(r) ? le(s) ? Ol(n)(Sl(r, s)) : r : s;\n}), Ar = /* @__PURE__ */ l(2, (e, t)=>Qg(e, t, Jg)), Bt = ()=>[], ke = (e)=>[\n        e\n    ], ft = /* @__PURE__ */ l(2, (e, t)=>e.map(t)), Zg = /* @__PURE__ */ l(2, (e, t)=>{\n    if (Lg(e)) return [];\n    const n = [];\n    for(let r = 0; r < e.length; r++){\n        const s = t(e[r], r);\n        for(let c = 0; c < s.length; c++)n.push(s[c]);\n    }\n    return n;\n}), Xg = /* @__PURE__ */ Zg(P), bE = /* @__PURE__ */ l(2, (e, t)=>{\n    const n = z(e), r = [];\n    for(let s = 0; s < n.length; s++){\n        const c = t(n[s], s);\n        ye(c) && r.push(c.value);\n    }\n    return r;\n}), em = /* @__PURE__ */ l(2, (e, t)=>{\n    const n = z(e), r = [];\n    for(let s = 0; s < n.length; s++)t(n[s], s) && r.push(n[s]);\n    return r;\n}), ki = /* @__PURE__ */ l(3, (e, t, n)=>z(e).reduce((r, s, c)=>n(r, s, c), t)), zo = (e, t)=>{\n    const n = [];\n    let r = e, s;\n    for(; ye(s = t(r));){\n        const [c, i] = s.value;\n        n.push(c), r = i;\n    }\n    return n;\n}, vi = qd, Ol = /* @__PURE__ */ l(2, (e, t)=>{\n    const n = z(e);\n    if (le(n)) {\n        const r = [\n            ue(n)\n        ], s = _t(n);\n        for (const c of s)r.every((i)=>!t(c, i)) && r.push(c);\n        return r;\n    }\n    return [];\n}), tm = (e)=>Ol(e, gi()), ln = /* @__PURE__ */ l(2, (e, t)=>z(e).join(t)), xn = Og, nm = (e)=>e.replace(/[/\\\\^$*+?.()|[\\]{}]/g, \"\\\\$&\"), $l = /* @__PURE__ */ Symbol.for(\"effect/Context/Tag\"), Jr = /* @__PURE__ */ Symbol.for(\"effect/Context/Reference\"), rm = \"effect/STM\", sm = /* @__PURE__ */ Symbol.for(rm), Is = {\n    ...tr,\n    _op: \"Tag\",\n    [sm]: zt,\n    [$l]: {\n        _Service: (e)=>e,\n        _Identifier: (e)=>e\n    },\n    toString () {\n        return Q(this.toJSON());\n    },\n    toJSON () {\n        return {\n            _id: \"Tag\",\n            key: this.key,\n            stack: this.stack\n        };\n    },\n    [U] () {\n        return this.toJSON();\n    },\n    of (e) {\n        return e;\n    },\n    context (e) {\n        return Fl(this, e);\n    }\n}, cm = {\n    ...Is,\n    [Jr]: Jr\n}, im = (e)=>{\n    const t = Error.stackTraceLimit;\n    Error.stackTraceLimit = 2;\n    const n = new Error();\n    Error.stackTraceLimit = t;\n    const r = Object.create(Is);\n    return Object.defineProperty(r, \"stack\", {\n        get () {\n            return n.stack;\n        }\n    }), r.key = e, r;\n}, om = (e)=>()=>{\n        const t = Error.stackTraceLimit;\n        Error.stackTraceLimit = 2;\n        const n = new Error();\n        Error.stackTraceLimit = t;\n        function r() {}\n        return Object.setPrototypeOf(r, Is), r.key = e, Object.defineProperty(r, \"stack\", {\n            get () {\n                return n.stack;\n            }\n        }), r;\n    }, am = ()=>(e, t)=>{\n        const n = Error.stackTraceLimit;\n        Error.stackTraceLimit = 2;\n        const r = new Error();\n        Error.stackTraceLimit = n;\n        function s() {}\n        return Object.setPrototypeOf(s, cm), s.key = e, s.defaultValue = t.defaultValue, Object.defineProperty(s, \"stack\", {\n            get () {\n                return r.stack;\n            }\n        }), s;\n    }, El = /* @__PURE__ */ Symbol.for(\"effect/Context\"), um = {\n    [El]: {\n        _Services: (e)=>e\n    },\n    [E] (e) {\n        if (Il(e) && this.unsafeMap.size === e.unsafeMap.size) {\n            for (const t of this.unsafeMap.keys())if (!e.unsafeMap.has(t) || !O(this.unsafeMap.get(t), e.unsafeMap.get(t))) return !1;\n            return !0;\n        }\n        return !1;\n    },\n    [F] () {\n        return q(this, di(this.unsafeMap.size));\n    },\n    pipe () {\n        return w(this, arguments);\n    },\n    toString () {\n        return Q(this.toJSON());\n    },\n    toJSON () {\n        return {\n            _id: \"Context\",\n            services: Array.from(this.unsafeMap).map(V)\n        };\n    },\n    [U] () {\n        return this.toJSON();\n    }\n}, Vt = (e)=>{\n    const t = Object.create(um);\n    return t.unsafeMap = e, t;\n}, lm = (e)=>{\n    const t = new Error(\"Service not found\".concat(e.key ? \": \".concat(String(e.key)) : \"\"));\n    if (e.stack) {\n        const n = e.stack.split(\"\\n\");\n        if (n.length > 2) {\n            const r = n[2].match(/at (.*)/);\n            r && (t.message = t.message + \" (defined at \".concat(r[1], \")\"));\n        }\n    }\n    if (t.stack) {\n        const n = t.stack.split(\"\\n\");\n        n.splice(1, 3), t.stack = n.join(\"\\n\");\n    }\n    return t;\n}, Il = (e)=>$(e, El), fm = (e)=>$(e, $l), hm = (e)=>$(e, Jr), dm = /* @__PURE__ */ Vt(/* @__PURE__ */ new Map()), gm = ()=>dm, Fl = (e, t)=>Vt(/* @__PURE__ */ new Map([\n        [\n            e.key,\n            t\n        ]\n    ])), mm = /* @__PURE__ */ l(3, (e, t, n)=>{\n    const r = new Map(e.unsafeMap);\n    return r.set(t.key, n), Vt(r);\n}), oc = /* @__PURE__ */ C(\"effect/Context/defaultValueCache\", ()=>/* @__PURE__ */ new Map()), wi = (e)=>{\n    if (oc.has(e.key)) return oc.get(e.key);\n    const t = e.defaultValue();\n    return oc.set(e.key, t), t;\n}, pm = (e, t)=>e.unsafeMap.has(t.key) ? e.unsafeMap.get(t.key) : wi(t), Rl = /* @__PURE__ */ l(2, (e, t)=>{\n    if (!e.unsafeMap.has(t.key)) {\n        if (Jr in t) return wi(t);\n        throw lm(t);\n    }\n    return e.unsafeMap.get(t.key);\n}), _m = Rl, ym = /* @__PURE__ */ l(2, (e, t)=>e.unsafeMap.has(t.key) ? Pn(e.unsafeMap.get(t.key)) : hm(t) ? Pn(wi(t)) : $s), bm = /* @__PURE__ */ l(2, (e, t)=>{\n    const n = new Map(e.unsafeMap);\n    for (const [r, s] of t.unsafeMap)n.set(r, s);\n    return Vt(n);\n}), It = im, Sm = Il, Fs = fm, Oi = gm, rr = Fl, At = mm, Ml = _m, Tl = Rl, sr = ym, fn = bm, SE = om, $i = am, Cl = /* @__PURE__ */ Symbol.for(\"effect/Chunk\");\nfunction km(e, t, n, r, s) {\n    for(let c = t; c < Math.min(e.length, t + s); c++)n[r + c - t] = e[c];\n    return n;\n}\nconst Nl = [], vm = (e)=>ys((t, n)=>t.length === n.length && We(t).every((r, s)=>e(r, ht(n, s)))), wm = /* @__PURE__ */ vm(O), Om = {\n    [Cl]: {\n        _A: (e)=>e\n    },\n    toString () {\n        return Q(this.toJSON());\n    },\n    toJSON () {\n        return {\n            _id: \"Chunk\",\n            values: We(this).map(V)\n        };\n    },\n    [U] () {\n        return this.toJSON();\n    },\n    [E] (e) {\n        return Al(e) && wm(this, e);\n    },\n    [F] () {\n        return q(this, er(We(this)));\n    },\n    [Symbol.iterator] () {\n        switch(this.backing._tag){\n            case \"IArray\":\n                return this.backing.array[Symbol.iterator]();\n            case \"IEmpty\":\n                return Nl[Symbol.iterator]();\n            default:\n                return We(this)[Symbol.iterator]();\n        }\n    },\n    pipe () {\n        return w(this, arguments);\n    }\n}, G = (e)=>{\n    const t = Object.create(Om);\n    switch(t.backing = e, e._tag){\n        case \"IEmpty\":\n            {\n                t.length = 0, t.depth = 0, t.left = t, t.right = t;\n                break;\n            }\n        case \"IConcat\":\n            {\n                t.length = e.left.length + e.right.length, t.depth = 1 + Math.max(e.left.depth, e.right.depth), t.left = e.left, t.right = e.right;\n                break;\n            }\n        case \"IArray\":\n            {\n                t.length = e.array.length, t.depth = 0, t.left = Me, t.right = Me;\n                break;\n            }\n        case \"ISingleton\":\n            {\n                t.length = 1, t.depth = 0, t.left = Me, t.right = Me;\n                break;\n            }\n        case \"ISlice\":\n            {\n                t.length = e.length, t.depth = e.chunk.depth + 1, t.left = Me, t.right = Me;\n                break;\n            }\n    }\n    return t;\n}, Al = (e)=>$(e, Cl), Me = /* @__PURE__ */ G({\n    _tag: \"IEmpty\"\n}), Ae = ()=>Me, ac = function() {\n    for(var _len = arguments.length, e = new Array(_len), _key = 0; _key < _len; _key++){\n        e[_key] = arguments[_key];\n    }\n    return Rm(e);\n}, ie = (e)=>G({\n        _tag: \"ISingleton\",\n        a: e\n    }), Pl = (e)=>Al(e) ? e : hn(z(e)), wc = (e, t, n)=>{\n    switch(e.backing._tag){\n        case \"IArray\":\n            {\n                km(e.backing.array, 0, t, n, e.length);\n                break;\n            }\n        case \"IConcat\":\n            {\n                wc(e.left, t, n), wc(e.right, t, n + e.left.length);\n                break;\n            }\n        case \"ISingleton\":\n            {\n                t[n] = e.backing.a;\n                break;\n            }\n        case \"ISlice\":\n            {\n                let r = 0, s = n;\n                for(; r < e.length;)t[s] = ht(e, r), r += 1, s += 1;\n                break;\n            }\n    }\n}, $m = (e)=>We(e).slice(), kE = $m, Em = (e)=>{\n    switch(e.backing._tag){\n        case \"IEmpty\":\n            return Nl;\n        case \"IArray\":\n            return e.backing.array;\n        default:\n            {\n                const t = new Array(e.length);\n                return wc(e, t, 0), e.backing = {\n                    _tag: \"IArray\",\n                    array: t\n                }, e.left = Me, e.right = Me, e.depth = 0, t;\n            }\n    }\n}, We = Em, Im = (e)=>{\n    switch(e.backing._tag){\n        case \"IEmpty\":\n        case \"ISingleton\":\n            return e;\n        case \"IArray\":\n            return G({\n                _tag: \"IArray\",\n                array: qo(e.backing.array)\n            });\n        case \"IConcat\":\n            return G({\n                _tag: \"IConcat\",\n                left: yt(e.backing.right),\n                right: yt(e.backing.left)\n            });\n        case \"ISlice\":\n            return hn(qo(We(e)));\n    }\n}, yt = Im, Fm = /* @__PURE__ */ l(2, (e, t)=>t < 0 || t >= e.length ? v() : I(ht(e, t))), hn = (e)=>e.length === 0 ? Ae() : e.length === 1 ? ie(e[0]) : G({\n        _tag: \"IArray\",\n        array: e\n    }), Rm = (e)=>hn(e), ht = /* @__PURE__ */ l(2, (e, t)=>{\n    switch(e.backing._tag){\n        case \"IEmpty\":\n            throw new Error(\"Index out of bounds\");\n        case \"ISingleton\":\n            {\n                if (t !== 0) throw new Error(\"Index out of bounds\");\n                return e.backing.a;\n            }\n        case \"IArray\":\n            {\n                if (t >= e.length || t < 0) throw new Error(\"Index out of bounds\");\n                return e.backing.array[t];\n            }\n        case \"IConcat\":\n            return t < e.left.length ? ht(e.left, t) : ht(e.right, t - e.left.length);\n        case \"ISlice\":\n            return ht(e.backing.chunk, t + e.backing.offset);\n    }\n}), Mm = /* @__PURE__ */ l(2, (e, t)=>ve(e, ie(t))), be = /* @__PURE__ */ l(2, (e, t)=>ve(ie(t), e)), Oc = /* @__PURE__ */ l(2, (e, t)=>{\n    if (t <= 0) return e;\n    if (t >= e.length) return Me;\n    switch(e.backing._tag){\n        case \"ISlice\":\n            return G({\n                _tag: \"ISlice\",\n                chunk: e.backing.chunk,\n                offset: e.backing.offset + t,\n                length: e.backing.length - t\n            });\n        case \"IConcat\":\n            return t > e.left.length ? Oc(e.right, t - e.left.length) : G({\n                _tag: \"IConcat\",\n                left: Oc(e.left, t),\n                right: e.right\n            });\n        default:\n            return G({\n                _tag: \"ISlice\",\n                chunk: e,\n                offset: t,\n                length: e.length - t\n            });\n    }\n}), ve = /* @__PURE__ */ l(2, (e, t)=>{\n    if (e.backing._tag === \"IEmpty\") return t;\n    if (t.backing._tag === \"IEmpty\") return e;\n    const n = t.depth - e.depth;\n    if (Math.abs(n) <= 1) return G({\n        _tag: \"IConcat\",\n        left: e,\n        right: t\n    });\n    if (n < -1) if (e.left.depth >= e.right.depth) {\n        const r = ve(e.right, t);\n        return G({\n            _tag: \"IConcat\",\n            left: e.left,\n            right: r\n        });\n    } else {\n        const r = ve(e.right.right, t);\n        if (r.depth === e.depth - 3) {\n            const s = G({\n                _tag: \"IConcat\",\n                left: e.right.left,\n                right: r\n            });\n            return G({\n                _tag: \"IConcat\",\n                left: e.left,\n                right: s\n            });\n        } else {\n            const s = G({\n                _tag: \"IConcat\",\n                left: e.left,\n                right: e.right.left\n            });\n            return G({\n                _tag: \"IConcat\",\n                left: s,\n                right: r\n            });\n        }\n    }\n    else if (t.right.depth >= t.left.depth) {\n        const r = ve(e, t.left);\n        return G({\n            _tag: \"IConcat\",\n            left: r,\n            right: t.right\n        });\n    } else {\n        const r = ve(e, t.left.left);\n        if (r.depth === t.depth - 3) {\n            const s = G({\n                _tag: \"IConcat\",\n                left: r,\n                right: t.left.right\n            });\n            return G({\n                _tag: \"IConcat\",\n                left: s,\n                right: t.right\n            });\n        } else {\n            const s = G({\n                _tag: \"IConcat\",\n                left: t.left.right,\n                right: t.right\n            });\n            return G({\n                _tag: \"IConcat\",\n                left: r,\n                right: s\n            });\n        }\n    }\n}), vE = /* @__PURE__ */ l(2, (e, t)=>hn(em(e, t))), Tm = (e)=>e.length === 0, He = (e)=>e.length > 0, xl = /* @__PURE__ */ Fm(0), jl = (e)=>ht(e, 0), Ce = jl, wE = /* @__PURE__ */ l(2, (e, t)=>e.backing._tag === \"ISingleton\" ? ie(t(e.backing.a, 0)) : hn(f(We(e), ft((n, r)=>t(n, r))))), Ve = (e)=>Oc(e, 1), OE = ki, $c = /* @__PURE__ */ Symbol.for(\"effect/Duration\"), Ll = /* @__PURE__ */ BigInt(0), Bo = /* @__PURE__ */ BigInt(24), $r = /* @__PURE__ */ BigInt(60), Ec = /* @__PURE__ */ BigInt(1e3), Vo = /* @__PURE__ */ BigInt(1e6), Ko = /* @__PURE__ */ BigInt(1e9), Cm = /^(-?\\d+(?:\\.\\d+)?)\\s+(nanos?|micros?|millis?|seconds?|minutes?|hours?|days?|weeks?)$/, Pe = (e)=>{\n    if (Dl(e)) return e;\n    if (kc(e)) return Hr(e);\n    if (Bd(e)) return uc(e);\n    if (Array.isArray(e) && e.length === 2 && e.every(kc)) return e[0] === -1 / 0 || e[1] === -1 / 0 || Number.isNaN(e[0]) || Number.isNaN(e[1]) ? ql : e[0] === 1 / 0 || e[1] === 1 / 0 ? xm : uc(BigInt(Math.round(e[0] * 1e9)) + BigInt(Math.round(e[1])));\n    if (zd(e)) {\n        const t = Cm.exec(e);\n        if (t) {\n            const [n, r, s] = t, c = Number(r);\n            switch(s){\n                case \"nano\":\n                case \"nanos\":\n                    return uc(BigInt(r));\n                case \"micro\":\n                case \"micros\":\n                    return jm(BigInt(r));\n                case \"milli\":\n                case \"millis\":\n                    return Hr(c);\n                case \"second\":\n                case \"seconds\":\n                    return Lm(c);\n                case \"minute\":\n                case \"minutes\":\n                    return Dm(c);\n                case \"hour\":\n                case \"hours\":\n                    return qm(c);\n                case \"day\":\n                case \"days\":\n                    return Um(c);\n                case \"week\":\n                case \"weeks\":\n                    return zm(c);\n            }\n        }\n    }\n    throw new Error(\"Invalid DurationInput\");\n}, Wo = {\n    _tag: \"Millis\",\n    millis: 0\n}, Nm = {\n    _tag: \"Infinity\"\n}, Am = {\n    [$c]: $c,\n    [F] () {\n        return q(this, cl(this.value));\n    },\n    [E] (e) {\n        return Dl(e) && Gm(this, e);\n    },\n    toString () {\n        return \"Duration(\".concat(Qm(this), \")\");\n    },\n    toJSON () {\n        switch(this.value._tag){\n            case \"Millis\":\n                return {\n                    _id: \"Duration\",\n                    _tag: \"Millis\",\n                    millis: this.value.millis\n                };\n            case \"Nanos\":\n                return {\n                    _id: \"Duration\",\n                    _tag: \"Nanos\",\n                    hrtime: Vm(this)\n                };\n            case \"Infinity\":\n                return {\n                    _id: \"Duration\",\n                    _tag: \"Infinity\"\n                };\n        }\n    },\n    [U] () {\n        return this.toJSON();\n    },\n    pipe () {\n        return w(this, arguments);\n    }\n}, je = (e)=>{\n    const t = Object.create(Am);\n    return kc(e) ? isNaN(e) || e <= 0 ? t.value = Wo : Number.isFinite(e) ? Number.isInteger(e) ? t.value = {\n        _tag: \"Millis\",\n        millis: e\n    } : t.value = {\n        _tag: \"Nanos\",\n        nanos: BigInt(Math.round(e * 1e6))\n    } : t.value = Nm : e <= Ll ? t.value = Wo : t.value = {\n        _tag: \"Nanos\",\n        nanos: e\n    }, t;\n}, Dl = (e)=>$(e, $c), Pm = (e)=>{\n    switch(e.value._tag){\n        case \"Millis\":\n            return e.value.millis === 0;\n        case \"Nanos\":\n            return e.value.nanos === Ll;\n        case \"Infinity\":\n            return !1;\n    }\n}, ql = /* @__PURE__ */ je(0), xm = /* @__PURE__ */ je(1 / 0), uc = (e)=>je(e), jm = (e)=>je(e * Ec), Hr = (e)=>je(e), Lm = (e)=>je(e * 1e3), Dm = (e)=>je(e * 6e4), qm = (e)=>je(e * 36e5), Um = (e)=>je(e * 864e5), zm = (e)=>je(e * 6048e5), Ic = (e)=>Km(e, {\n        onMillis: (t)=>t,\n        onNanos: (t)=>Number(t) / 1e6\n    }), Bm = (e)=>{\n    const t = Pe(e);\n    switch(t.value._tag){\n        case \"Infinity\":\n            throw new Error(\"Cannot convert infinite duration to nanos\");\n        case \"Nanos\":\n            return t.value.nanos;\n        case \"Millis\":\n            return BigInt(Math.round(t.value.millis * 1e6));\n    }\n}, Vm = (e)=>{\n    const t = Pe(e);\n    switch(t.value._tag){\n        case \"Infinity\":\n            return [\n                1 / 0,\n                0\n            ];\n        case \"Nanos\":\n            return [\n                Number(t.value.nanos / Ko),\n                Number(t.value.nanos % Ko)\n            ];\n        case \"Millis\":\n            return [\n                Math.floor(t.value.millis / 1e3),\n                Math.round(t.value.millis % 1e3 * 1e6)\n            ];\n    }\n}, Km = /* @__PURE__ */ l(2, (e, t)=>{\n    const n = Pe(e);\n    switch(n.value._tag){\n        case \"Nanos\":\n            return t.onNanos(n.value.nanos);\n        case \"Infinity\":\n            return t.onMillis(1 / 0);\n        case \"Millis\":\n            return t.onMillis(n.value.millis);\n    }\n}), Ei = /* @__PURE__ */ l(3, (e, t, n)=>{\n    const r = Pe(e), s = Pe(t);\n    if (r.value._tag === \"Infinity\" || s.value._tag === \"Infinity\") return n.onMillis(Ic(r), Ic(s));\n    if (r.value._tag === \"Nanos\" || s.value._tag === \"Nanos\") {\n        const c = r.value._tag === \"Nanos\" ? r.value.nanos : BigInt(Math.round(r.value.millis * 1e6)), i = s.value._tag === \"Nanos\" ? s.value.nanos : BigInt(Math.round(s.value.millis * 1e6));\n        return n.onNanos(c, i);\n    }\n    return n.onMillis(r.value.millis, s.value.millis);\n}), Wm = (e, t)=>Ei(e, t, {\n        onMillis: (n, r)=>n === r,\n        onNanos: (n, r)=>n === r\n    }), Jm = /* @__PURE__ */ l(2, (e, t)=>Ei(e, t, {\n        onMillis: (n, r)=>n <= r,\n        onNanos: (n, r)=>n <= r\n    })), Hm = /* @__PURE__ */ l(2, (e, t)=>Ei(e, t, {\n        onMillis: (n, r)=>n >= r,\n        onNanos: (n, r)=>n >= r\n    })), Gm = /* @__PURE__ */ l(2, (e, t)=>Wm(Pe(e), Pe(t))), Ym = (e)=>{\n    const t = Pe(e);\n    if (t.value._tag === \"Infinity\") return {\n        days: 1 / 0,\n        hours: 1 / 0,\n        minutes: 1 / 0,\n        seconds: 1 / 0,\n        millis: 1 / 0,\n        nanos: 1 / 0\n    };\n    const n = Bm(t), r = n / Vo, s = r / Ec, c = s / $r, i = c / $r, o = i / Bo;\n    return {\n        days: Number(o),\n        hours: Number(i % Bo),\n        minutes: Number(c % $r),\n        seconds: Number(s % $r),\n        millis: Number(r % Ec),\n        nanos: Number(n % Vo)\n    };\n}, Qm = (e)=>{\n    const t = Pe(e);\n    if (t.value._tag === \"Infinity\") return \"Infinity\";\n    if (Pm(t)) return \"0\";\n    const n = Ym(t), r = [];\n    return n.days !== 0 && r.push(\"\".concat(n.days, \"d\")), n.hours !== 0 && r.push(\"\".concat(n.hours, \"h\")), n.minutes !== 0 && r.push(\"\".concat(n.minutes, \"m\")), n.seconds !== 0 && r.push(\"\".concat(n.seconds, \"s\")), n.millis !== 0 && r.push(\"\".concat(n.millis, \"ms\")), n.nanos !== 0 && r.push(\"\".concat(n.nanos, \"ns\")), r.join(\" \");\n}, bt = 5, Ii = /* @__PURE__ */ Math.pow(2, bt), Zm = Ii - 1, Xm = Ii / 2, ep = Ii / 4;\nfunction tp(e) {\n    return e -= e >> 1 & 1431655765, e = (e & 858993459) + (e >> 2 & 858993459), e = e + (e >> 4) & 252645135, e += e >> 8, e += e >> 16, e & 127;\n}\nfunction Kt(e, t) {\n    return t >>> e & Zm;\n}\n_c6 = Kt;\nfunction xt(e) {\n    return 1 << e;\n}\nfunction Ul(e, t) {\n    return tp(e & t - 1);\n}\n_c7 = Ul;\nconst np = (e, t)=>({\n        value: e,\n        previous: t\n    });\nfunction Lt(e, t, n, r) {\n    let s = r;\n    if (!e) {\n        const c = r.length;\n        s = new Array(c);\n        for(let i = 0; i < c; ++i)s[i] = r[i];\n    }\n    return s[t] = n, s;\n}\n_c8 = Lt;\nfunction zl(e, t, n) {\n    const r = n.length - 1;\n    let s = 0, c = 0, i = n;\n    if (e) s = c = t;\n    else for(i = new Array(r); s < t;)i[c++] = n[s++];\n    for(++s; s <= r;)i[c++] = n[s++];\n    return e && (i.length = r), i;\n}\nfunction rp(e, t, n, r) {\n    const s = r.length;\n    if (e) {\n        let a = s;\n        for(; a >= t;)r[a--] = r[a];\n        return r[t] = n, r;\n    }\n    let c = 0, i = 0;\n    const o = new Array(s + 1);\n    for(; c < t;)o[i++] = r[c++];\n    for(o[t] = n; c < s;)o[++i] = r[c++];\n    return o;\n}\nclass Qe {\n    modify(t, n, r, s, c, i) {\n        const o = r(v());\n        return W(o) ? new Qe() : (++i.value, new dt(t, s, c, o));\n    }\n    constructor(){\n        u(this, \"_tag\", \"EmptyNode\");\n    }\n}\nfunction we(e) {\n    return el(e, \"EmptyNode\");\n}\nfunction sp(e) {\n    return we(e) || e._tag === \"LeafNode\" || e._tag === \"CollisionNode\";\n}\nfunction Rs(e, t) {\n    return we(e) ? !1 : t === e.edit;\n}\n_c9 = Rs;\nclass dt {\n    modify(t, n, r, s, c, i) {\n        if (O(c, this.key)) {\n            const a = r(this.value);\n            return a === this.value ? this : W(a) ? (--i.value, new Qe()) : Rs(this, t) ? (this.value = a, this) : new dt(t, s, c, a);\n        }\n        const o = r(v());\n        return W(o) ? this : (++i.value, Bl(t, n, this.hash, this, s, new dt(t, s, c, o)));\n    }\n    constructor(t, n, r, s){\n        u(this, \"edit\");\n        u(this, \"hash\");\n        u(this, \"key\");\n        u(this, \"value\");\n        u(this, \"_tag\", \"LeafNode\");\n        this.edit = t, this.hash = n, this.key = r, this.value = s;\n    }\n}\nclass Fi {\n    modify(t, n, r, s, c, i) {\n        if (s === this.hash) {\n            const a = Rs(this, t), h = this.updateCollisionList(a, t, this.hash, this.children, r, c, i);\n            return h === this.children ? this : h.length > 1 ? new Fi(t, this.hash, h) : h[0];\n        }\n        const o = r(v());\n        return W(o) ? this : (++i.value, Bl(t, n, this.hash, this, s, new dt(t, s, c, o)));\n    }\n    updateCollisionList(t, n, r, s, c, i, o) {\n        const a = s.length;\n        for(let d = 0; d < a; ++d){\n            const g = s[d];\n            if (\"key\" in g && O(i, g.key)) {\n                const p = g.value, _ = c(p);\n                return _ === p ? s : W(_) ? (--o.value, zl(t, d, s)) : Lt(t, d, new dt(n, r, i, _), s);\n            }\n        }\n        const h = c(v());\n        return W(h) ? s : (++o.value, Lt(t, a, new dt(n, r, i, h), s));\n    }\n    constructor(t, n, r){\n        u(this, \"edit\");\n        u(this, \"hash\");\n        u(this, \"children\");\n        u(this, \"_tag\", \"CollisionNode\");\n        this.edit = t, this.hash = n, this.children = r;\n    }\n}\nclass Wt {\n    modify(t, n, r, s, c, i) {\n        const o = this.mask, a = this.children, h = Kt(n, s), d = xt(h), g = Ul(o, d), p = o & d, _ = Rs(this, t);\n        if (!p) {\n            const H = new Qe().modify(t, n + bt, r, s, c, i);\n            return H ? a.length >= Xm ? ip(t, h, H, o, a) : new Wt(t, o | d, rp(_, g, H, a)) : this;\n        }\n        const b = a[g], M = b.modify(t, n + bt, r, s, c, i);\n        if (b === M) return this;\n        let D = o, X;\n        if (we(M)) {\n            if (D &= ~d, !D) return new Qe();\n            if (a.length <= 2 && sp(a[g ^ 1])) return a[g ^ 1];\n            X = zl(_, g, a);\n        } else X = Lt(_, g, M, a);\n        return _ ? (this.mask = D, this.children = X, this) : new Wt(t, D, X);\n    }\n    constructor(t, n, r){\n        u(this, \"edit\");\n        u(this, \"mask\");\n        u(this, \"children\");\n        u(this, \"_tag\", \"IndexedNode\");\n        this.edit = t, this.mask = n, this.children = r;\n    }\n}\nclass Ri {\n    modify(t, n, r, s, c, i) {\n        let o = this.size;\n        const a = this.children, h = Kt(n, s), d = a[h], g = (d || new Qe()).modify(t, n + bt, r, s, c, i);\n        if (d === g) return this;\n        const p = Rs(this, t);\n        let _;\n        if (we(d) && !we(g)) ++o, _ = Lt(p, h, g, a);\n        else if (!we(d) && we(g)) {\n            if (--o, o <= ep) return cp(t, o, h, a);\n            _ = Lt(p, h, new Qe(), a);\n        } else _ = Lt(p, h, g, a);\n        return p ? (this.size = o, this.children = _, this) : new Ri(t, o, _);\n    }\n    constructor(t, n, r){\n        u(this, \"edit\");\n        u(this, \"size\");\n        u(this, \"children\");\n        u(this, \"_tag\", \"ArrayNode\");\n        this.edit = t, this.size = n, this.children = r;\n    }\n}\nfunction cp(e, t, n, r) {\n    const s = new Array(t - 1);\n    let c = 0, i = 0;\n    for(let o = 0, a = r.length; o < a; ++o)if (o !== n) {\n        const h = r[o];\n        h && !we(h) && (s[c++] = h, i |= 1 << o);\n    }\n    return new Wt(e, i, s);\n}\nfunction ip(e, t, n, r, s) {\n    const c = [];\n    let i = r, o = 0;\n    for(let a = 0; i; ++a)i & 1 && (c[a] = s[o++]), i >>>= 1;\n    return c[t] = n, new Ri(e, o + 1, c);\n}\nfunction op(e, t, n, r, s, c) {\n    if (n === s) return new Fi(e, n, [\n        c,\n        r\n    ]);\n    const i = Kt(t, n), o = Kt(t, s);\n    if (i === o) return (a)=>new Wt(e, xt(i) | xt(o), [\n            a\n        ]);\n    {\n        const a = i < o ? [\n            r,\n            c\n        ] : [\n            c,\n            r\n        ];\n        return new Wt(e, xt(i) | xt(o), a);\n    }\n}\nfunction Bl(e, t, n, r, s, c) {\n    let i, o = t;\n    for(;;){\n        const a = op(e, o, n, r, s, c);\n        if (typeof a == \"function\") i = np(a, i), o = o + bt;\n        else {\n            let h = a;\n            for(; i != null;)h = i.value(h), i = i.previous;\n            return h;\n        }\n    }\n}\n_c10 = Bl;\nconst Vl = \"effect/HashMap\", Fc = /* @__PURE__ */ Symbol.for(Vl), ap = {\n    [Fc]: Fc,\n    [Symbol.iterator] () {\n        return new Ms(this, (e, t)=>[\n                e,\n                t\n            ]);\n    },\n    [F] () {\n        let e = k(Vl);\n        for (const t of this)e ^= f(k(t[0]), R(k(t[1])));\n        return q(this, e);\n    },\n    [E] (e) {\n        if (fp(e)) {\n            if (e._size !== this._size) return !1;\n            for (const t of this){\n                const n = f(e, Ti(t[0], k(t[0])));\n                if (W(n)) return !1;\n                if (!O(t[1], n.value)) return !1;\n            }\n            return !0;\n        }\n        return !1;\n    },\n    toString () {\n        return Q(this.toJSON());\n    },\n    toJSON () {\n        return {\n            _id: \"HashMap\",\n            values: Array.from(this).map(V)\n        };\n    },\n    [U] () {\n        return this.toJSON();\n    },\n    pipe () {\n        return w(this, arguments);\n    }\n}, Mi = (e, t, n, r)=>{\n    const s = Object.create(ap);\n    return s._editable = e, s._edit = t, s._root = n, s._size = r, s;\n};\nclass Ms {\n    next() {\n        if (W(this.v)) return {\n            done: !0,\n            value: void 0\n        };\n        const t = this.v.value;\n        return this.v = Gr(t.cont), {\n            done: !1,\n            value: t.value\n        };\n    }\n    [Symbol.iterator]() {\n        return new Ms(this.map, this.f);\n    }\n    constructor(t, n){\n        u(this, \"map\");\n        u(this, \"f\");\n        u(this, \"v\");\n        this.map = t, this.f = n, this.v = Kl(this.map._root, this.f, void 0);\n    }\n}\nconst Gr = (e)=>e ? Wl(e[0], e[1], e[2], e[3], e[4]) : v(), Kl = function(e, t) {\n    let n = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : void 0;\n    switch(e._tag){\n        case \"LeafNode\":\n            return ye(e.value) ? I({\n                value: t(e.key, e.value.value),\n                cont: n\n            }) : Gr(n);\n        case \"CollisionNode\":\n        case \"ArrayNode\":\n        case \"IndexedNode\":\n            {\n                const r = e.children;\n                return Wl(r.length, r, 0, t, n);\n            }\n        default:\n            return Gr(n);\n    }\n}, Wl = (e, t, n, r, s)=>{\n    for(; n < e;){\n        const c = t[n++];\n        if (c && !we(c)) return Kl(c, r, [\n            e,\n            t,\n            n,\n            r,\n            s\n        ]);\n    }\n    return Gr(s);\n}, up = /* @__PURE__ */ Mi(!1, 0, /* @__PURE__ */ new Qe(), 0), Ts = ()=>up, lp = (e)=>{\n    const t = Hl(Ts());\n    for (const n of e)jn(t, n[0], n[1]);\n    return pp(t);\n}, fp = (e)=>$(e, Fc), hp = (e)=>e && we(e._root), dp = /* @__PURE__ */ l(2, (e, t)=>Ti(e, t, k(t))), Ti = /* @__PURE__ */ l(3, (e, t, n)=>{\n    let r = e._root, s = 0;\n    for(;;)switch(r._tag){\n        case \"LeafNode\":\n            return O(t, r.key) ? r.value : v();\n        case \"CollisionNode\":\n            {\n                if (n === r.hash) {\n                    const c = r.children;\n                    for(let i = 0, o = c.length; i < o; ++i){\n                        const a = c[i];\n                        if (\"key\" in a && O(t, a.key)) return a.value;\n                    }\n                }\n                return v();\n            }\n        case \"IndexedNode\":\n            {\n                const c = Kt(s, n), i = xt(c);\n                if (r.mask & i) {\n                    r = r.children[Ul(r.mask, i)], s += bt;\n                    break;\n                }\n                return v();\n            }\n        case \"ArrayNode\":\n            {\n                if (r = r.children[Kt(s, n)], r) {\n                    s += bt;\n                    break;\n                }\n                return v();\n            }\n        default:\n            return v();\n    }\n}), gp = /* @__PURE__ */ l(2, (e, t)=>ye(Ti(e, t, k(t)))), jn = /* @__PURE__ */ l(3, (e, t, n)=>Ci(e, t, ()=>I(n))), mp = /* @__PURE__ */ l(3, (e, t, n)=>e._editable ? (e._root = t, e._size = n, e) : t === e._root ? e : Mi(e._editable, e._edit, t, n)), Jl = (e)=>new Ms(e, (t)=>t), Rc = (e)=>e._size, Hl = (e)=>Mi(!0, e._edit + 1, e._root, e._size), pp = (e)=>(e._editable = !1, e), Ci = /* @__PURE__ */ l(3, (e, t, n)=>_p(e, t, k(t), n)), _p = /* @__PURE__ */ l(4, (e, t, n, r)=>{\n    const s = {\n        value: e._size\n    }, c = e._root.modify(e._editable ? e._edit : NaN, 0, r, n, t, s);\n    return f(e, mp(c, s.value));\n}), Jo = /* @__PURE__ */ l(2, (e, t)=>Ci(e, t, v)), yp = /* @__PURE__ */ l(2, (e, t)=>Cs(e, Ts(), (n, r, s)=>jn(n, s, t(r, s)))), bp = /* @__PURE__ */ l(2, (e, t)=>Cs(e, void 0, (n, r, s)=>t(r, s))), Cs = /* @__PURE__ */ l(3, (e, t, n)=>{\n    const r = e._root;\n    if (r._tag === \"LeafNode\") return ye(r.value) ? n(t, r.value.value, r.key) : t;\n    if (r._tag === \"EmptyNode\") return t;\n    const s = [\n        r.children\n    ];\n    let c;\n    for(; c = s.pop();)for(let i = 0, o = c.length; i < o;){\n        const a = c[i++];\n        a && !we(a) && (a._tag === \"LeafNode\" ? ye(a.value) && (t = n(t, a.value.value, a.key)) : s.push(a.children));\n    }\n    return t;\n}), Gl = \"effect/HashSet\", Mc = /* @__PURE__ */ Symbol.for(Gl), Sp = {\n    [Mc]: Mc,\n    [Symbol.iterator] () {\n        return Jl(this._keyMap);\n    },\n    [F] () {\n        return q(this, R(k(this._keyMap))(k(Gl)));\n    },\n    [E] (e) {\n        return kp(e) ? Rc(this._keyMap) === Rc(e._keyMap) && O(this._keyMap, e._keyMap) : !1;\n    },\n    toString () {\n        return Q(this.toJSON());\n    },\n    toJSON () {\n        return {\n            _id: \"HashSet\",\n            values: Array.from(this).map(V)\n        };\n    },\n    [U] () {\n        return this.toJSON();\n    },\n    pipe () {\n        return w(this, arguments);\n    }\n}, Ns = (e)=>{\n    const t = Object.create(Sp);\n    return t._keyMap = e, t;\n}, kp = (e)=>$(e, Mc), vp = /* @__PURE__ */ Ns(/* @__PURE__ */ Ts()), As = ()=>vp, wp = (e)=>{\n    const t = Ni(As());\n    for (const n of e)Ln(t, n);\n    return Ai(t);\n}, Op = function() {\n    for(var _len = arguments.length, e = new Array(_len), _key = 0; _key < _len; _key++){\n        e[_key] = arguments[_key];\n    }\n    const t = Ni(As());\n    for (const n of e)Ln(t, n);\n    return Ai(t);\n}, $p = /* @__PURE__ */ l(2, (e, t)=>gp(e._keyMap, t)), Ep = (e)=>Rc(e._keyMap), Ni = (e)=>Ns(Hl(e._keyMap)), Ai = (e)=>(e._keyMap._editable = !1, e), Yl = /* @__PURE__ */ l(2, (e, t)=>{\n    const n = Ni(e);\n    return t(n), Ai(n);\n}), Ln = /* @__PURE__ */ l(2, (e, t)=>e._keyMap._editable ? (jn(t, !0)(e._keyMap), e) : Ns(jn(t, !0)(e._keyMap))), Ql = /* @__PURE__ */ l(2, (e, t)=>e._keyMap._editable ? (Jo(t)(e._keyMap), e) : Ns(Jo(t)(e._keyMap))), Ip = /* @__PURE__ */ l(2, (e, t)=>Yl(e, (n)=>{\n        for (const r of t)Ql(n, r);\n    })), Fp = /* @__PURE__ */ l(2, (e, t)=>Yl(As(), (n)=>{\n        Rp(e, (r)=>Ln(n, r));\n        for (const r of t)Ln(n, r);\n    })), Rp = /* @__PURE__ */ l(2, (e, t)=>bp(e._keyMap, (n, r)=>t(r))), Mp = /* @__PURE__ */ l(3, (e, t, n)=>Cs(e._keyMap, t, (r, s, c)=>n(r, c))), St = As, Tp = wp, Pi = Op, Cp = $p, Zl = Ep, Cn = Ln, Xl = Ql, Ho = Ip, Dn = Fp, qn = Mp, Go = /* @__PURE__ */ Symbol.for(\"effect/MutableRef\"), Np = {\n    [Go]: Go,\n    toString () {\n        return Q(this.toJSON());\n    },\n    toJSON () {\n        return {\n            _id: \"MutableRef\",\n            current: V(this.current)\n        };\n    },\n    [U] () {\n        return this.toJSON();\n    },\n    pipe () {\n        return w(this, arguments);\n    }\n}, Ps = (e)=>{\n    const t = Object.create(Np);\n    return t.current = e, t;\n}, Ap = /* @__PURE__ */ l(3, (e, t, n)=>O(t, e.current) ? (e.current = n, !0) : !1), Ze = (e)=>e.current, xs = /* @__PURE__ */ l(2, (e, t)=>(e.current = t, e)), js = \"effect/FiberId\", kt = /* @__PURE__ */ Symbol.for(js), Jt = \"None\", Tc = \"Runtime\", Cc = \"Composite\", Pp = /* @__PURE__ */ B(\"\".concat(js, \"-\").concat(Jt));\nvar Za;\nlet xp = class {\n    [(Za = kt, F)]() {\n        return Pp;\n    }\n    [E](t) {\n        return xi(t) && t._tag === Jt;\n    }\n    toString() {\n        return Q(this.toJSON());\n    }\n    toJSON() {\n        return {\n            _id: \"FiberId\",\n            _tag: this._tag\n        };\n    }\n    [U]() {\n        return this.toJSON();\n    }\n    constructor(){\n        u(this, Za, kt);\n        u(this, \"_tag\", Jt);\n        u(this, \"id\", -1);\n        u(this, \"startTimeMillis\", -1);\n    }\n};\nvar Xa;\nclass jp {\n    [(Xa = kt, F)]() {\n        return q(this, B(\"\".concat(js, \"-\").concat(this._tag, \"-\").concat(this.id, \"-\").concat(this.startTimeMillis)));\n    }\n    [E](t) {\n        return xi(t) && t._tag === Tc && this.id === t.id && this.startTimeMillis === t.startTimeMillis;\n    }\n    toString() {\n        return Q(this.toJSON());\n    }\n    toJSON() {\n        return {\n            _id: \"FiberId\",\n            _tag: this._tag,\n            id: this.id,\n            startTimeMillis: this.startTimeMillis\n        };\n    }\n    [U]() {\n        return this.toJSON();\n    }\n    constructor(t, n){\n        u(this, \"id\");\n        u(this, \"startTimeMillis\");\n        u(this, Xa, kt);\n        u(this, \"_tag\", Tc);\n        this.id = t, this.startTimeMillis = n;\n    }\n}\nvar eu;\nclass Lp {\n    [(eu = kt, F)]() {\n        return f(B(\"\".concat(js, \"-\").concat(this._tag)), R(k(this.left)), R(k(this.right)), q(this));\n    }\n    [E](t) {\n        return xi(t) && t._tag === Cc && O(this.left, t.left) && O(this.right, t.right);\n    }\n    toString() {\n        return Q(this.toJSON());\n    }\n    toJSON() {\n        return {\n            _id: \"FiberId\",\n            _tag: this._tag,\n            left: V(this.left),\n            right: V(this.right)\n        };\n    }\n    [U]() {\n        return this.toJSON();\n    }\n    constructor(t, n){\n        u(this, \"left\");\n        u(this, \"right\");\n        u(this, eu, kt);\n        u(this, \"_tag\", Cc);\n        u(this, \"_hash\");\n        this.left = t, this.right = n;\n    }\n}\nconst ef = /* @__PURE__ */ new xp(), xi = (e)=>$(e, kt), tf = /* @__PURE__ */ l(2, (e, t)=>e._tag === Jt ? t : t._tag === Jt ? e : new Lp(e, t)), Dp = (e)=>f(e, qn(ef, (t, n)=>tf(n)(t))), Nc = (e)=>{\n    switch(e._tag){\n        case Jt:\n            return St();\n        case Tc:\n            return Pi(e.id);\n        case Cc:\n            return f(Nc(e.left), Dn(Nc(e.right)));\n    }\n}, Yo = /* @__PURE__ */ C(/* @__PURE__ */ Symbol.for(\"effect/Fiber/Id/_fiberCounter\"), ()=>Ps(0)), nf = (e)=>Array.from(Nc(e)).map((n)=>\"#\".concat(n)).join(\",\"), qp = ()=>{\n    const e = Ze(Yo);\n    return f(Yo, xs(e + 1)), new jp(e, Date.now());\n}, Ht = ef, Up = tf, EE = Dp, zp = nf, rf = qp, ji = Ts, Bp = lp, Vp = hp, sf = dp, cf = jn, of = Jl, Kp = Ci, Wp = yp, af = Cs, Un = /* @__PURE__ */ Symbol.for(\"effect/List\"), Ac = (e)=>z(e), Jp = (e)=>Dd(vi(e), Ac), Hp = /* @__PURE__ */ Jp(O), Gp = {\n    [Un]: Un,\n    _tag: \"Cons\",\n    toString () {\n        return Q(this.toJSON());\n    },\n    toJSON () {\n        return {\n            _id: \"List\",\n            _tag: \"Cons\",\n            values: Ac(this).map(V)\n        };\n    },\n    [U] () {\n        return this.toJSON();\n    },\n    [E] (e) {\n        return lf(e) && this._tag === e._tag && Hp(this, e);\n    },\n    [F] () {\n        return q(this, er(Ac(this)));\n    },\n    [Symbol.iterator] () {\n        let e = !1, t = this;\n        return {\n            next () {\n                if (e) return this.return();\n                if (t._tag === \"Nil\") return e = !0, this.return();\n                const n = t.head;\n                return t = t.tail, {\n                    done: e,\n                    value: n\n                };\n            },\n            return (n) {\n                return e || (e = !0), {\n                    done: !0,\n                    value: n\n                };\n            }\n        };\n    },\n    pipe () {\n        return w(this, arguments);\n    }\n}, Yr = (e, t)=>{\n    const n = Object.create(Gp);\n    return n.head = e, n.tail = t, n;\n}, Yp = /* @__PURE__ */ B(\"Nil\"), Qp = {\n    [Un]: Un,\n    _tag: \"Nil\",\n    toString () {\n        return Q(this.toJSON());\n    },\n    toJSON () {\n        return {\n            _id: \"List\",\n            _tag: \"Nil\"\n        };\n    },\n    [U] () {\n        return this.toJSON();\n    },\n    [F] () {\n        return Yp;\n    },\n    [E] (e) {\n        return lf(e) && this._tag === e._tag;\n    },\n    [Symbol.iterator] () {\n        return {\n            next () {\n                return {\n                    done: !0,\n                    value: void 0\n                };\n            }\n        };\n    },\n    pipe () {\n        return w(this, arguments);\n    }\n}, uf = /* @__PURE__ */ Object.create(Qp), lf = (e)=>$(e, Un), Je = (e)=>e._tag === \"Nil\", Zp = (e)=>e._tag === \"Cons\", Xp = ()=>uf, vt = (e, t)=>Yr(e, t), Gt = Xp, Li = (e)=>Yr(e, uf), e_ = /* @__PURE__ */ l(2, (e, t)=>n_(t, e)), t_ = /* @__PURE__ */ l(2, (e, t)=>vt(t, e)), n_ = /* @__PURE__ */ l(2, (e, t)=>{\n    if (Je(e)) return t;\n    if (Je(t)) return e;\n    {\n        const n = Yr(t.head, e);\n        let r = n, s = t.tail;\n        for(; !Je(s);){\n            const c = Yr(s.head, e);\n            r.tail = c, r = c, s = s.tail;\n        }\n        return n;\n    }\n}), r_ = /* @__PURE__ */ l(3, (e, t, n)=>{\n    let r = t, s = e;\n    for(; !Je(s);)r = n(r, s.head), s = s.tail;\n    return r;\n}), s_ = (e)=>{\n    let t = Gt(), n = e;\n    for(; !Je(n);)t = t_(t, n.head), n = n.tail;\n    return t;\n}, Di = /* @__PURE__ */ function() {\n    function e(t) {\n        t && Object.assign(this, t);\n    }\n    return e.prototype = Os, e;\n}(), IE = (e)=>Object.assign(Object.create(Os), e), c_ = /* @__PURE__ */ Symbol.for(\"effect/DifferContextPatch\");\nfunction Qo(e) {\n    return e;\n}\n_c11 = Qo;\nconst cr = {\n    ...Di.prototype,\n    [c_]: {\n        _Value: Qo,\n        _Patch: Qo\n    }\n}, i_ = /* @__PURE__ */ Object.assign(/* @__PURE__ */ Object.create(cr), {\n    _tag: \"Empty\"\n}), o_ = /* @__PURE__ */ Object.create(i_), ff = ()=>o_, a_ = /* @__PURE__ */ Object.assign(/* @__PURE__ */ Object.create(cr), {\n    _tag: \"AndThen\"\n}), u_ = (e, t)=>{\n    const n = Object.create(a_);\n    return n.first = e, n.second = t, n;\n}, l_ = /* @__PURE__ */ Object.assign(/* @__PURE__ */ Object.create(cr), {\n    _tag: \"AddService\"\n}), f_ = (e, t)=>{\n    const n = Object.create(l_);\n    return n.key = e, n.service = t, n;\n}, h_ = /* @__PURE__ */ Object.assign(/* @__PURE__ */ Object.create(cr), {\n    _tag: \"RemoveService\"\n}), d_ = (e)=>{\n    const t = Object.create(h_);\n    return t.key = e, t;\n}, g_ = /* @__PURE__ */ Object.assign(/* @__PURE__ */ Object.create(cr), {\n    _tag: \"UpdateService\"\n}), m_ = (e, t)=>{\n    const n = Object.create(g_);\n    return n.key = e, n.update = t, n;\n}, p_ = (e, t)=>{\n    const n = new Map(e.unsafeMap);\n    let r = ff();\n    for (const [s, c] of t.unsafeMap.entries())if (n.has(s)) {\n        const i = n.get(s);\n        n.delete(s), O(i, c) || (r = Pr(m_(s, ()=>c))(r));\n    } else n.delete(s), r = Pr(f_(s, c))(r);\n    for (const [s] of n.entries())r = Pr(d_(s))(r);\n    return r;\n}, Pr = /* @__PURE__ */ l(2, (e, t)=>u_(e, t)), __ = /* @__PURE__ */ l(2, (e, t)=>{\n    if (e._tag === \"Empty\") return t;\n    let n = !1, r = ie(e);\n    const s = new Map(t.unsafeMap);\n    for(; He(r);){\n        const i = Ce(r), o = Ve(r);\n        switch(i._tag){\n            case \"Empty\":\n                {\n                    r = o;\n                    break;\n                }\n            case \"AddService\":\n                {\n                    s.set(i.key, i.service), r = o;\n                    break;\n                }\n            case \"AndThen\":\n                {\n                    r = be(be(o, i.second), i.first);\n                    break;\n                }\n            case \"RemoveService\":\n                {\n                    s.delete(i.key), r = o;\n                    break;\n                }\n            case \"UpdateService\":\n                {\n                    s.set(i.key, i.update(s.get(i.key))), n = !0, r = o;\n                    break;\n                }\n        }\n    }\n    if (!n) return Vt(s);\n    const c = /* @__PURE__ */ new Map();\n    for (const [i] of t.unsafeMap)s.has(i) && (c.set(i, s.get(i)), s.delete(i));\n    for (const [i, o] of s)c.set(i, o);\n    return Vt(c);\n}), y_ = /* @__PURE__ */ Symbol.for(\"effect/DifferHashSetPatch\");\nfunction lc(e) {\n    return e;\n}\nconst Ls = {\n    ...Di.prototype,\n    [y_]: {\n        _Value: lc,\n        _Key: lc,\n        _Patch: lc\n    }\n}, b_ = /* @__PURE__ */ Object.assign(/* @__PURE__ */ Object.create(Ls), {\n    _tag: \"Empty\"\n}), S_ = /* @__PURE__ */ Object.create(b_), hf = ()=>S_, k_ = /* @__PURE__ */ Object.assign(/* @__PURE__ */ Object.create(Ls), {\n    _tag: \"AndThen\"\n}), v_ = (e, t)=>{\n    const n = Object.create(k_);\n    return n.first = e, n.second = t, n;\n}, w_ = /* @__PURE__ */ Object.assign(/* @__PURE__ */ Object.create(Ls), {\n    _tag: \"Add\"\n}), O_ = (e)=>{\n    const t = Object.create(w_);\n    return t.value = e, t;\n}, $_ = /* @__PURE__ */ Object.assign(/* @__PURE__ */ Object.create(Ls), {\n    _tag: \"Remove\"\n}), E_ = (e)=>{\n    const t = Object.create($_);\n    return t.value = e, t;\n}, I_ = (e, t)=>{\n    const [n, r] = qn([\n        e,\n        hf()\n    ], (param, i)=>{\n        let [s, c] = param;\n        return Cp(i)(s) ? [\n            Xl(i)(s),\n            c\n        ] : [\n            s,\n            Pc(O_(i))(c)\n        ];\n    })(t);\n    return qn(r, (s, c)=>Pc(E_(c))(s))(n);\n}, Pc = /* @__PURE__ */ l(2, (e, t)=>v_(e, t)), F_ = /* @__PURE__ */ l(2, (e, t)=>{\n    if (e._tag === \"Empty\") return t;\n    let n = t, r = ie(e);\n    for(; He(r);){\n        const s = Ce(r), c = Ve(r);\n        switch(s._tag){\n            case \"Empty\":\n                {\n                    r = c;\n                    break;\n                }\n            case \"AndThen\":\n                {\n                    r = be(s.first)(be(s.second)(c));\n                    break;\n                }\n            case \"Add\":\n                {\n                    n = Cn(s.value)(n), r = c;\n                    break;\n                }\n            case \"Remove\":\n                n = Xl(s.value)(n), r = c;\n        }\n    }\n    return n;\n}), R_ = /* @__PURE__ */ Symbol.for(\"effect/DifferReadonlyArrayPatch\");\nfunction Zo(e) {\n    return e;\n}\n_c12 = Zo;\nconst ir = {\n    ...Di.prototype,\n    [R_]: {\n        _Value: Zo,\n        _Patch: Zo\n    }\n}, M_ = /* @__PURE__ */ Object.assign(/* @__PURE__ */ Object.create(ir), {\n    _tag: \"Empty\"\n}), T_ = /* @__PURE__ */ Object.create(M_), df = ()=>T_, C_ = /* @__PURE__ */ Object.assign(/* @__PURE__ */ Object.create(ir), {\n    _tag: \"AndThen\"\n}), N_ = (e, t)=>{\n    const n = Object.create(C_);\n    return n.first = e, n.second = t, n;\n}, A_ = /* @__PURE__ */ Object.assign(/* @__PURE__ */ Object.create(ir), {\n    _tag: \"Append\"\n}), P_ = (e)=>{\n    const t = Object.create(A_);\n    return t.values = e, t;\n}, x_ = /* @__PURE__ */ Object.assign(/* @__PURE__ */ Object.create(ir), {\n    _tag: \"Slice\"\n}), j_ = (e, t)=>{\n    const n = Object.create(x_);\n    return n.from = e, n.until = t, n;\n}, L_ = /* @__PURE__ */ Object.assign(/* @__PURE__ */ Object.create(ir), {\n    _tag: \"Update\"\n}), D_ = (e, t)=>{\n    const n = Object.create(L_);\n    return n.index = e, n.patch = t, n;\n}, q_ = (e)=>{\n    let t = 0, n = df();\n    for(; t < e.oldValue.length && t < e.newValue.length;){\n        const r = e.oldValue[t], s = e.newValue[t], c = e.differ.diff(r, s);\n        O(c, e.differ.empty) || (n = xr(n, D_(t, c))), t = t + 1;\n    }\n    return t < e.oldValue.length && (n = xr(n, j_(0, t))), t < e.newValue.length && (n = xr(n, P_(Kg(t)(e.newValue)))), n;\n}, xr = /* @__PURE__ */ l(2, (e, t)=>N_(e, t)), U_ = /* @__PURE__ */ l(3, (e, t, n)=>{\n    if (e._tag === \"Empty\") return t;\n    let r = t.slice(), s = ke(e);\n    for(; Dg(s);){\n        const c = ue(s), i = _t(s);\n        switch(c._tag){\n            case \"Empty\":\n                {\n                    s = i;\n                    break;\n                }\n            case \"AndThen\":\n                {\n                    i.unshift(c.first, c.second), s = i;\n                    break;\n                }\n            case \"Append\":\n                {\n                    for (const o of c.values)r.push(o);\n                    s = i;\n                    break;\n                }\n            case \"Slice\":\n                {\n                    r = r.slice(c.from, c.until), s = i;\n                    break;\n                }\n            case \"Update\":\n                {\n                    r[c.index] = n.patch(c.patch, r[c.index]), s = i;\n                    break;\n                }\n        }\n    }\n    return r;\n}), z_ = /* @__PURE__ */ Symbol.for(\"effect/Differ\"), B_ = {\n    [z_]: {\n        _P: P,\n        _V: P\n    },\n    pipe () {\n        return w(this, arguments);\n    }\n}, dn = (e)=>{\n    const t = Object.create(B_);\n    return t.empty = e.empty, t.diff = e.diff, t.combine = e.combine, t.patch = e.patch, t;\n}, V_ = ()=>dn({\n        empty: ff(),\n        combine: (e, t)=>Pr(t)(e),\n        diff: (e, t)=>p_(e, t),\n        patch: (e, t)=>__(t)(e)\n    }), K_ = ()=>dn({\n        empty: hf(),\n        combine: (e, t)=>Pc(t)(e),\n        diff: (e, t)=>I_(e, t),\n        patch: (e, t)=>F_(t)(e)\n    }), W_ = (e)=>dn({\n        empty: df(),\n        combine: (t, n)=>xr(t, n),\n        diff: (t, n)=>q_({\n                oldValue: t,\n                newValue: n,\n                differ: e\n            }),\n        patch: (t, n)=>U_(t, n, e)\n    }), gf = ()=>J_((e, t)=>t), J_ = (e)=>dn({\n        empty: P,\n        combine: (t, n)=>t === P ? n : n === P ? t : (r)=>n(t(r)),\n        diff: (t, n)=>O(t, n) ? P : Qn(n),\n        patch: (t, n)=>e(n, t(n))\n    }), zn = 255, mf = 8, xc = (e)=>e & zn, jc = (e)=>e >> mf & zn, or = (e, t)=>(e & zn) + ((t & e & zn) << mf), H_ = /* @__PURE__ */ or(0, 0), G_ = (e)=>or(e, e), Y_ = (e)=>or(e, 0), Q_ = /* @__PURE__ */ l(2, (e, t)=>or(xc(e) & ~t, jc(e))), Z_ = /* @__PURE__ */ l(2, (e, t)=>e | t), X_ = (e)=>~e >>> 0 & zn, ey = 0, gn = 1, ty = 2, pf = 4, Lc = 16, _f = 32, ny = (e)=>Ds(e, _f), ry = /* @__PURE__ */ l(2, (e, t)=>e | t), Ge = (e)=>yf(e) && !cy(e), yf = (e)=>Ds(e, gn), Ds = /* @__PURE__ */ l(2, (e, t)=>(e & t) !== 0), bf = function() {\n    for(var _len = arguments.length, e = new Array(_len), _key = 0; _key < _len; _key++){\n        e[_key] = arguments[_key];\n    }\n    return e.reduce((t, n)=>t | n, 0);\n}, sy = /* @__PURE__ */ bf(ey), Xo = (e)=>Ds(e, pf), cy = (e)=>Ds(e, Lc), gt = /* @__PURE__ */ l(2, (e, t)=>or(e ^ t, t)), Dt = /* @__PURE__ */ l(2, (e, t)=>e & (X_(xc(t)) | jc(t)) | xc(t) & jc(t)), ea = /* @__PURE__ */ dn({\n    empty: H_,\n    diff: (e, t)=>gt(e, t),\n    combine: (e, t)=>Z_(t)(e),\n    patch: (e, t)=>Dt(t, e)\n}), iy = G_, Sf = Y_, ta = Q_, kf = (e, t)=>({\n        _tag: \"Par\",\n        left: e,\n        right: t\n    }), Er = (e, t)=>({\n        _tag: \"Seq\",\n        left: e,\n        right: t\n    }), oy = (e)=>{\n    let t = Li(e), n = Gt();\n    for(;;){\n        const [r, s] = r_(t, [\n            vf(),\n            Gt()\n        ], (param, o)=>{\n            let [c, i] = param;\n            const [a, h] = ay(o);\n            return [\n                dy(c, a),\n                e_(i, h)\n            ];\n        });\n        if (n = uy(n, r), Je(s)) return s_(n);\n        t = s;\n    }\n    throw new Error(\"BUG: BlockedRequests.flatten - please report an issue at https://github.com/Effect-TS/effect/issues\");\n}, ay = (e)=>{\n    let t = e, n = vf(), r = Gt(), s = Gt();\n    for(;;)switch(t._tag){\n        case \"Empty\":\n            {\n                if (Je(r)) return [\n                    n,\n                    s\n                ];\n                t = r.head, r = r.tail;\n                break;\n            }\n        case \"Par\":\n            {\n                r = vt(t.right, r), t = t.left;\n                break;\n            }\n        case \"Seq\":\n            {\n                const c = t.left, i = t.right;\n                switch(c._tag){\n                    case \"Empty\":\n                        {\n                            t = i;\n                            break;\n                        }\n                    case \"Par\":\n                        {\n                            const o = c.left, a = c.right;\n                            t = kf(Er(o, i), Er(a, i));\n                            break;\n                        }\n                    case \"Seq\":\n                        {\n                            const o = c.left, a = c.right;\n                            t = Er(o, Er(a, i));\n                            break;\n                        }\n                    case \"Single\":\n                        {\n                            t = c, s = vt(i, s);\n                            break;\n                        }\n                }\n                break;\n            }\n        case \"Single\":\n            {\n                if (n = hy(n, t), Je(r)) return [\n                    n,\n                    s\n                ];\n                t = r.head, r = r.tail;\n                break;\n            }\n    }\n    throw new Error(\"BUG: BlockedRequests.step - please report an issue at https://github.com/Effect-TS/effect/issues\");\n}, uy = (e, t)=>{\n    if (Je(e)) return Li(fc(t));\n    if (gy(t)) return e;\n    const n = Sy(e.head), r = my(t);\n    return n.length === 1 && r.length === 1 && O(n[0], r[0]) ? vt(by(e.head, fc(t)), e.tail) : vt(fc(t), e);\n}, ly = /* @__PURE__ */ Symbol.for(\"effect/RequestBlock/RequestBlockParallel\"), fy = {\n    /* c8 ignore next */ _R: (e)=>e\n};\nvar tu;\ntu = ly;\nclass qi {\n    constructor(t){\n        u(this, \"map\");\n        u(this, tu, fy);\n        this.map = t;\n    }\n}\nconst vf = ()=>new qi(ji()), hy = (e, t)=>new qi(Kp(e.map, t.dataSource, (n)=>Ig(Nr(n, Mm(t.blockedRequest)), ()=>ie(t.blockedRequest)))), dy = (e, t)=>new qi(af(e.map, t.map, (n, r, s)=>cf(n, s, tt(sf(n, s), {\n            onNone: ()=>r,\n            onSome: (c)=>ve(r, c)\n        })))), gy = (e)=>Vp(e.map), my = (e)=>Array.from(of(e.map)), fc = (e)=>yy(Wp(e.map, (t)=>ie(t))), py = /* @__PURE__ */ Symbol.for(\"effect/RequestBlock/RequestBlockSequential\"), _y = {\n    /* c8 ignore next */ _R: (e)=>e\n};\nvar nu;\nnu = py;\nclass wf {\n    constructor(t){\n        u(this, \"map\");\n        u(this, nu, _y);\n        this.map = t;\n    }\n}\nconst yy = (e)=>new wf(e), by = (e, t)=>new wf(af(t.map, e.map, (n, r, s)=>cf(n, s, tt(sf(n, s), {\n            onNone: ()=>Ae(),\n            onSome: (c)=>ve(c, r)\n        })))), Sy = (e)=>Array.from(of(e.map)), ky = (e)=>Array.from(e.map), mn = \"Die\", wt = \"Empty\", Ft = \"Fail\", pn = \"Interrupt\", Yt = \"Parallel\", Qt = \"Sequential\", Of = \"effect/Cause\", $f = /* @__PURE__ */ Symbol.for(Of), vy = {\n    /* c8 ignore next */ _E: (e)=>e\n}, _n = {\n    [$f]: vy,\n    [F] () {\n        return f(k(Of), R(k(jy(this))), q(this));\n    },\n    [E] (e) {\n        return wy(e) && xy(this, e);\n    },\n    pipe () {\n        return w(this, arguments);\n    },\n    toJSON () {\n        switch(this._tag){\n            case \"Empty\":\n                return {\n                    _id: \"Cause\",\n                    _tag: this._tag\n                };\n            case \"Die\":\n                return {\n                    _id: \"Cause\",\n                    _tag: this._tag,\n                    defect: V(this.defect)\n                };\n            case \"Interrupt\":\n                return {\n                    _id: \"Cause\",\n                    _tag: this._tag,\n                    fiberId: this.fiberId.toJSON()\n                };\n            case \"Fail\":\n                return {\n                    _id: \"Cause\",\n                    _tag: this._tag,\n                    failure: V(this.error)\n                };\n            case \"Sequential\":\n            case \"Parallel\":\n                return {\n                    _id: \"Cause\",\n                    _tag: this._tag,\n                    left: V(this.left),\n                    right: V(this.right)\n                };\n        }\n    },\n    toString () {\n        return ar(this);\n    },\n    [U] () {\n        return this.toJSON();\n    }\n}, Zt = /* @__PURE__ */ (()=>{\n    const e = /* @__PURE__ */ Object.create(_n);\n    return e._tag = wt, e;\n})(), Bn = (e)=>{\n    const t = Object.create(_n);\n    return t._tag = Ft, t.error = e, t;\n}, Oe = (e)=>{\n    const t = Object.create(_n);\n    return t._tag = mn, t.defect = e, t;\n}, Te = (e)=>{\n    const t = Object.create(_n);\n    return t._tag = pn, t.fiberId = e, t;\n}, Ot = (e, t)=>{\n    const n = Object.create(_n);\n    return n._tag = Yt, n.left = e, n.right = t, n;\n}, se = (e, t)=>{\n    const n = Object.create(_n);\n    return n._tag = Qt, n.left = e, n.right = t, n;\n}, wy = (e)=>$(e, $f), Oy = (e)=>e._tag === wt, FE = (e)=>e._tag === Ft, $y = (e)=>e._tag === mn, Ey = (e)=>e._tag === wt ? !0 : Xt(e, !0, (t, n)=>{\n        switch(n._tag){\n            case wt:\n                return I(t);\n            case mn:\n            case Ft:\n            case pn:\n                return I(!1);\n            default:\n                return v();\n        }\n    }), Iy = (e)=>ye(Ny(e)), Ui = (e)=>Vi(void 0, Dy)(e), Fy = (e)=>yt(Xt(e, Ae(), (t, n)=>n._tag === Ft ? I(f(t, be(n.error))) : v())), Ry = (e)=>yt(Xt(e, Ae(), (t, n)=>n._tag === mn ? I(f(t, be(n.defect))) : v())), My = (e)=>Xt(e, St(), (t, n)=>n._tag === pn ? I(f(t, Cn(n.fiberId))) : v()), Ty = (e)=>zi(e, (t)=>t._tag === Ft ? I(t.error) : v()), Cy = (e)=>{\n    const t = Ty(e);\n    switch(t._tag){\n        case \"None\":\n            return ae(e);\n        case \"Some\":\n            return $e(t.value);\n    }\n}, Ny = (e)=>zi(e, (t)=>t._tag === pn ? I(t.fiberId) : v()), na = (e)=>Bi(e, {\n        onEmpty: Zt,\n        onFail: ()=>Zt,\n        onDie: Oe,\n        onInterrupt: Te,\n        onSequential: se,\n        onParallel: Ot\n    }), Ay = (e)=>Bi(e, {\n        onEmpty: Zt,\n        onFail: Oe,\n        onDie: Oe,\n        onInterrupt: Te,\n        onSequential: se,\n        onParallel: Ot\n    }), RE = /* @__PURE__ */ l(2, (e, t)=>Py(e, (n)=>Bn(t(n)))), Py = /* @__PURE__ */ l(2, (e, t)=>Bi(e, {\n        onEmpty: Zt,\n        onFail: (n)=>t(n),\n        onDie: (n)=>Oe(n),\n        onInterrupt: (n)=>Te(n),\n        onSequential: (n, r)=>se(n, r),\n        onParallel: (n, r)=>Ot(n, r)\n    })), xy = (e, t)=>{\n    let n = ie(e), r = ie(t);\n    for(; He(n) && He(r);){\n        const [s, c] = f(Ce(n), Xt([\n            St(),\n            Ae()\n        ], (param, d)=>{\n            let [a, h] = param;\n            const [g, p] = Dc(d);\n            return I([\n                f(a, Dn(g)),\n                f(h, ve(p))\n            ]);\n        })), [i, o] = f(Ce(r), Xt([\n            St(),\n            Ae()\n        ], (param, d)=>{\n            let [a, h] = param;\n            const [g, p] = Dc(d);\n            return I([\n                f(a, Dn(g)),\n                f(h, ve(p))\n            ]);\n        }));\n        if (!O(s, i)) return !1;\n        n = c, r = o;\n    }\n    return !0;\n}, jy = (e)=>Ly(ie(e), Ae()), Ly = (e, t)=>{\n    for(;;){\n        const [n, r] = f(e, ki([\n            St(),\n            Ae()\n        ], (param, o)=>{\n            let [c, i] = param;\n            const [a, h] = Dc(o);\n            return [\n                f(c, Dn(a)),\n                f(i, ve(h))\n            ];\n        })), s = Zl(n) > 0 ? f(t, be(n)) : t;\n        if (Tm(r)) return yt(s);\n        e = r, t = s;\n    }\n    throw new Error(ks(\"Cause.flattenCauseLoop\"));\n}, zi = /* @__PURE__ */ l(2, (e, t)=>{\n    const n = [\n        e\n    ];\n    for(; n.length > 0;){\n        const r = n.pop(), s = t(r);\n        switch(s._tag){\n            case \"None\":\n                {\n                    switch(r._tag){\n                        case Qt:\n                        case Yt:\n                            {\n                                n.push(r.right), n.push(r.left);\n                                break;\n                            }\n                    }\n                    break;\n                }\n            case \"Some\":\n                return s;\n        }\n    }\n    return v();\n}), Dc = (e)=>{\n    let t = e;\n    const n = [];\n    let r = St(), s = Ae();\n    for(; t !== void 0;)switch(t._tag){\n        case wt:\n            {\n                if (n.length === 0) return [\n                    r,\n                    s\n                ];\n                t = n.pop();\n                break;\n            }\n        case Ft:\n            {\n                if (r = Cn(r, ac(t._tag, t.error)), n.length === 0) return [\n                    r,\n                    s\n                ];\n                t = n.pop();\n                break;\n            }\n        case mn:\n            {\n                if (r = Cn(r, ac(t._tag, t.defect)), n.length === 0) return [\n                    r,\n                    s\n                ];\n                t = n.pop();\n                break;\n            }\n        case pn:\n            {\n                if (r = Cn(r, ac(t._tag, t.fiberId)), n.length === 0) return [\n                    r,\n                    s\n                ];\n                t = n.pop();\n                break;\n            }\n        case Qt:\n            {\n                switch(t.left._tag){\n                    case wt:\n                        {\n                            t = t.right;\n                            break;\n                        }\n                    case Qt:\n                        {\n                            t = se(t.left.left, se(t.left.right, t.right));\n                            break;\n                        }\n                    case Yt:\n                        {\n                            t = Ot(se(t.left.left, t.right), se(t.left.right, t.right));\n                            break;\n                        }\n                    default:\n                        {\n                            s = be(s, t.right), t = t.left;\n                            break;\n                        }\n                }\n                break;\n            }\n        case Yt:\n            {\n                n.push(t.right), t = t.left;\n                break;\n            }\n    }\n    throw new Error(ks(\"Cause.evaluateCauseLoop\"));\n}, Dy = {\n    emptyCase: Lo,\n    failCase: bc,\n    dieCase: bc,\n    interruptCase: Lo,\n    sequentialCase: (e, t, n)=>t && n,\n    parallelCase: (e, t, n)=>t && n\n}, ra = \"SequentialCase\", sa = \"ParallelCase\", Bi = /* @__PURE__ */ l(2, (e, param)=>{\n    let { onDie: t, onEmpty: n, onFail: r, onInterrupt: s, onParallel: c, onSequential: i } = param;\n    return Vi(e, void 0, {\n        emptyCase: ()=>n,\n        failCase: (o, a)=>r(a),\n        dieCase: (o, a)=>t(a),\n        interruptCase: (o, a)=>s(a),\n        sequentialCase: (o, a, h)=>i(a, h),\n        parallelCase: (o, a, h)=>c(a, h)\n    });\n}), Xt = /* @__PURE__ */ l(3, (e, t, n)=>{\n    let r = t, s = e;\n    const c = [];\n    for(; s !== void 0;){\n        const i = n(r, s);\n        switch(r = ye(i) ? i.value : r, s._tag){\n            case Qt:\n                {\n                    c.push(s.right), s = s.left;\n                    break;\n                }\n            case Yt:\n                {\n                    c.push(s.right), s = s.left;\n                    break;\n                }\n            default:\n                {\n                    s = void 0;\n                    break;\n                }\n        }\n        s === void 0 && c.length > 0 && (s = c.pop());\n    }\n    return r;\n}), Vi = /* @__PURE__ */ l(3, (e, t, n)=>{\n    const r = [\n        e\n    ], s = [];\n    for(; r.length > 0;){\n        const i = r.pop();\n        switch(i._tag){\n            case wt:\n                {\n                    s.push(ae(n.emptyCase(t)));\n                    break;\n                }\n            case Ft:\n                {\n                    s.push(ae(n.failCase(t, i.error)));\n                    break;\n                }\n            case mn:\n                {\n                    s.push(ae(n.dieCase(t, i.defect)));\n                    break;\n                }\n            case pn:\n                {\n                    s.push(ae(n.interruptCase(t, i.fiberId)));\n                    break;\n                }\n            case Qt:\n                {\n                    r.push(i.right), r.push(i.left), s.push($e({\n                        _tag: ra\n                    }));\n                    break;\n                }\n            case Yt:\n                {\n                    r.push(i.right), r.push(i.left), s.push($e({\n                        _tag: sa\n                    }));\n                    break;\n                }\n        }\n    }\n    const c = [];\n    for(; s.length > 0;){\n        const i = s.pop();\n        switch(i._tag){\n            case \"Left\":\n                {\n                    switch(i.left._tag){\n                        case ra:\n                            {\n                                const o = c.pop(), a = c.pop(), h = n.sequentialCase(t, o, a);\n                                c.push(h);\n                                break;\n                            }\n                        case sa:\n                            {\n                                const o = c.pop(), a = c.pop(), h = n.parallelCase(t, o, a);\n                                c.push(h);\n                                break;\n                            }\n                    }\n                    break;\n                }\n            case \"Right\":\n                {\n                    c.push(i.right);\n                    break;\n                }\n        }\n    }\n    if (c.length === 0) throw new Error(\"BUG: Cause.reduceWithContext - please report an issue at https://github.com/Effect-TS/effect/issues\");\n    return c.pop();\n}), ar = (e, t)=>Ui(e) ? \"All fibers interrupted without errors.\" : If(e).map(function(n) {\n        return (t == null ? void 0 : t.renderErrorCause) !== !0 || n.cause === void 0 ? n.stack : \"\".concat(n.stack, \" {\\n\").concat(Ef(n.cause, \"  \"), \"\\n}\");\n    }).join(\"\\n\"), Ef = (e, t)=>{\n    const n = e.stack.split(\"\\n\");\n    let r = \"\".concat(t, \"[cause]: \").concat(n[0]);\n    for(let s = 1, c = n.length; s < c; s++)r += \"\\n\".concat(t).concat(n[s]);\n    return e.cause && (r += \" {\\n\".concat(Ef(e.cause, \"\".concat(t, \"  \")), \"\\n\").concat(t, \"}\")), r;\n};\nclass Qr extends globalThis.Error {\n    constructor(n){\n        const r = typeof n == \"object\" && n !== null, s = Error.stackTraceLimit;\n        Error.stackTraceLimit = 1;\n        super(qy(n), r && \"cause\" in n && typeof n.cause < \"u\" ? {\n            cause: new Qr(n.cause)\n        } : void 0);\n        u(this, \"span\");\n        this.message === \"\" && (this.message = \"An error has occurred\"), Error.stackTraceLimit = s, this.name = n instanceof Error ? n.name : \"Error\", r && (en in n && (this.span = n[en]), Object.keys(n).forEach((c)=>{\n            c in this || (this[c] = n[c]);\n        })), this.stack = By(\"\".concat(this.name, \": \").concat(this.message), n instanceof Error && n.stack ? n.stack : \"\", this.span);\n    }\n}\nconst qy = (e)=>{\n    if (typeof e == \"string\") return e;\n    if (typeof e == \"object\" && e !== null && e instanceof Error) return e.message;\n    try {\n        if ($(e, \"toString\") && Zn(e.toString) && e.toString !== Object.prototype.toString && e.toString !== globalThis.Array.prototype.toString) return e.toString();\n    } catch (e) {}\n    return il(e);\n}, Uy = /\\((.*)\\)/g, zy = /* @__PURE__ */ C(\"effect/Tracer/spanToTrace\", ()=>/* @__PURE__ */ new WeakMap()), By = (e, t, n)=>{\n    const r = [\n        e\n    ], s = t.startsWith(e) ? t.slice(e.length).split(\"\\n\") : t.split(\"\\n\");\n    for(let c = 1; c < s.length && !s[c].includes(\"Generator.next\"); c++){\n        if (s[c].includes(\"effect_internal_function\")) {\n            r.pop();\n            break;\n        }\n        r.push(s[c].replace(/at .*effect_instruction_i.*\\((.*)\\)/, \"at $1\").replace(/EffectPrimitive\\.\\w+/, \"<anonymous>\"));\n    }\n    if (n) {\n        let c = n, i = 0;\n        for(; c && c._tag === \"Span\" && i < 10;){\n            const o = zy.get(c);\n            if (typeof o == \"function\") {\n                const a = o();\n                if (typeof a == \"string\") {\n                    const h = a.matchAll(Uy);\n                    let d = !1;\n                    for (const [, g] of h)d = !0, r.push(\"    at \".concat(c.name, \" (\").concat(g, \")\"));\n                    d || r.push(\"    at \".concat(c.name, \" (\").concat(a.replace(/^at /, \"\"), \")\"));\n                } else r.push(\"    at \".concat(c.name));\n            } else r.push(\"    at \".concat(c.name));\n            c = it(c.parent), i++;\n        }\n    }\n    return r.join(\"\\n\");\n}, en = /* @__PURE__ */ Symbol.for(\"effect/SpanAnnotation\"), If = (e)=>Vi(e, void 0, {\n        emptyCase: ()=>[],\n        dieCase: (t, n)=>[\n                new Qr(n)\n            ],\n        failCase: (t, n)=>[\n                new Qr(n)\n            ],\n        interruptCase: ()=>[],\n        parallelCase: (t, n, r)=>[\n                ...n,\n                ...r\n            ],\n        sequentialCase: (t, n, r)=>[\n                ...n,\n                ...r\n            ]\n    }), ur = \"Pending\", qs = \"Done\", Vy = \"effect/Deferred\", Ky = /* @__PURE__ */ Symbol.for(Vy), Wy = {\n    /* c8 ignore next */ _E: (e)=>e,\n    /* c8 ignore next */ _A: (e)=>e\n}, Jy = (e)=>({\n        _tag: ur,\n        joiners: e\n    }), Ff = (e)=>({\n        _tag: qs,\n        effect: e\n    });\nclass lr {\n    next(t) {\n        return this.called ? {\n            value: t,\n            done: !0\n        } : (this.called = !0, {\n            value: this.self,\n            done: !1\n        });\n    }\n    return(t) {\n        return {\n            value: t,\n            done: !0\n        };\n    }\n    throw(t) {\n        throw t;\n    }\n    [Symbol.iterator]() {\n        return new lr(this.self);\n    }\n    constructor(t){\n        u(this, \"self\");\n        u(this, \"called\", !1);\n        this.self = t;\n    }\n}\nconst Rf = (e, t)=>{\n    const n = new J(\"Blocked\");\n    return n.effect_instruction_i0 = e, n.effect_instruction_i1 = t, n;\n}, Hy = (e)=>{\n    const t = new J(\"RunBlocked\");\n    return t.effect_instruction_i0 = e, t;\n}, tn = /* @__PURE__ */ Symbol.for(\"effect/Effect\");\nclass Gy {\n    constructor(t, n){\n        u(this, \"patch\");\n        u(this, \"op\");\n        u(this, \"_op\", pi);\n        this.patch = t, this.op = n;\n    }\n}\nvar ru;\nclass J {\n    [(ru = tn, E)](t) {\n        return this === t;\n    }\n    [F]() {\n        return q(this, hi(this));\n    }\n    pipe() {\n        return w(this, arguments);\n    }\n    toJSON() {\n        return {\n            _id: \"Effect\",\n            _op: this._op,\n            effect_instruction_i0: V(this.effect_instruction_i0),\n            effect_instruction_i1: V(this.effect_instruction_i1),\n            effect_instruction_i2: V(this.effect_instruction_i2)\n        };\n    }\n    toString() {\n        return Q(this.toJSON());\n    }\n    [U]() {\n        return this.toJSON();\n    }\n    [Symbol.iterator]() {\n        return new lr(new Xn(this));\n    }\n    constructor(t){\n        u(this, \"_op\");\n        u(this, \"effect_instruction_i0\");\n        u(this, \"effect_instruction_i1\");\n        u(this, \"effect_instruction_i2\");\n        u(this, \"trace\");\n        u(this, ru, zt);\n        this._op = t;\n    }\n}\nvar su;\nclass Mf {\n    [(su = tn, E)](t) {\n        return eo(t) && t._op === \"Failure\" && // @ts-expect-error\n        O(this.effect_instruction_i0, t.effect_instruction_i0);\n    }\n    [F]() {\n        return f(// @ts-expect-error\n        B(this._tag), // @ts-expect-error\n        R(k(this.effect_instruction_i0)), q(this));\n    }\n    get cause() {\n        return this.effect_instruction_i0;\n    }\n    pipe() {\n        return w(this, arguments);\n    }\n    toJSON() {\n        return {\n            _id: \"Exit\",\n            _tag: this._op,\n            cause: this.cause.toJSON()\n        };\n    }\n    toString() {\n        return Q(this.toJSON());\n    }\n    [U]() {\n        return this.toJSON();\n    }\n    [Symbol.iterator]() {\n        return new lr(new Xn(this));\n    }\n    constructor(t){\n        u(this, \"_op\");\n        u(this, \"effect_instruction_i0\");\n        u(this, \"effect_instruction_i1\");\n        u(this, \"effect_instruction_i2\");\n        u(this, \"trace\");\n        u(this, su, zt);\n        this._op = t, this._tag = t;\n    }\n}\nvar cu;\nclass Tf {\n    [(cu = tn, E)](t) {\n        return eo(t) && t._op === \"Success\" && // @ts-expect-error\n        O(this.effect_instruction_i0, t.effect_instruction_i0);\n    }\n    [F]() {\n        return f(// @ts-expect-error\n        B(this._tag), // @ts-expect-error\n        R(k(this.effect_instruction_i0)), q(this));\n    }\n    get value() {\n        return this.effect_instruction_i0;\n    }\n    pipe() {\n        return w(this, arguments);\n    }\n    toJSON() {\n        return {\n            _id: \"Exit\",\n            _tag: this._op,\n            value: V(this.value)\n        };\n    }\n    toString() {\n        return Q(this.toJSON());\n    }\n    [U]() {\n        return this.toJSON();\n    }\n    [Symbol.iterator]() {\n        return new lr(new Xn(this));\n    }\n    constructor(t){\n        u(this, \"_op\");\n        u(this, \"effect_instruction_i0\");\n        u(this, \"effect_instruction_i1\");\n        u(this, \"effect_instruction_i2\");\n        u(this, \"trace\");\n        u(this, cu, zt);\n        this._op = t, this._tag = t;\n    }\n}\nconst Le = (e)=>$(e, tn), L = (e)=>{\n    const t = new J(ul);\n    return t.effect_instruction_i0 = e, t;\n}, Cf = /* @__PURE__ */ l(3, (e, t, n)=>Ee((r)=>m(e, (s)=>m(Ye(N(()=>r(t(s)))), (c)=>N(()=>n(s, c)).pipe(Se({\n                    onFailure: (i)=>{\n                        switch(c._tag){\n                            case te:\n                                return Z(se(c.effect_instruction_i0, i));\n                            case ne:\n                                return Z(i);\n                        }\n                    },\n                    onSuccess: ()=>c\n                })))))), fe = /* @__PURE__ */ l(2, (e, t)=>m(e, ()=>S(t))), nt = (e)=>fe(e, void 0), Nf = function() {\n    const e = new J(ws);\n    switch(arguments.length){\n        case 2:\n            {\n                e.effect_instruction_i0 = arguments[0], e.commit = arguments[1];\n                break;\n            }\n        case 3:\n            {\n                e.effect_instruction_i0 = arguments[0], e.effect_instruction_i1 = arguments[1], e.commit = arguments[2];\n                break;\n            }\n        case 4:\n            {\n                e.effect_instruction_i0 = arguments[0], e.effect_instruction_i1 = arguments[1], e.effect_instruction_i2 = arguments[2], e.commit = arguments[3];\n                break;\n            }\n        default:\n            throw new Error(ks(\"you're not supposed to end up here\"));\n    }\n    return e;\n}, Vn = function(e) {\n    let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : Ht;\n    const n = new J(Rn);\n    let r;\n    return n.effect_instruction_i0 = (s)=>{\n        r = e(s);\n    }, n.effect_instruction_i1 = t, Df(n, (s)=>Le(r) ? r : K);\n}, Af = function(e) {\n    let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : Ht;\n    return N(()=>Vn(e, t));\n}, xe = function(e) {\n    let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : Ht;\n    return Nf(e, function() {\n        let n, r;\n        function s(a) {\n            n ? n(a) : r === void 0 && (r = a);\n        }\n        const c = new J(Rn);\n        c.effect_instruction_i0 = (a)=>{\n            n = a, r && a(r);\n        }, c.effect_instruction_i1 = t;\n        let i, o;\n        return this.effect_instruction_i0.length !== 1 ? (o = new AbortController(), i = ee(()=>this.effect_instruction_i0(s, o.signal))) : i = ee(()=>this.effect_instruction_i0(s)), i || o ? Df(c, (a)=>(o && o.abort(), i !== null && i !== void 0 ? i : K)) : c;\n    });\n}, Pf = /* @__PURE__ */ l(2, (e, t)=>{\n    const n = new J(Tr);\n    return n.effect_instruction_i0 = e, n.effect_instruction_i1 = t, n;\n}), Zr = /* @__PURE__ */ l(2, (e, t)=>Xe(e, {\n        onFailure: t,\n        onSuccess: S\n    })), ca = /* @__PURE__ */ Symbol.for(\"effect/OriginalAnnotation\"), Ki = (e, t)=>ye(t) ? new Proxy(e, {\n        has (n, r) {\n            return r === en || r === ca || r in n;\n        },\n        get (n, r) {\n            return r === en ? t.value : r === ca ? e : n[r];\n        }\n    }) : e, Xr = (e)=>Ss(e) && !(en in e) ? L((t)=>Z(Oe(Ki(e, io(t))))) : Z(Oe(e)), qc = (e)=>xf(()=>Oe(new Fb(e))), nn = (e)=>Xe(e, {\n        onFailure: (t)=>S($e(t)),\n        onSuccess: (t)=>S(ae(t))\n    }), Ye = (e)=>jf(e, {\n        onFailure: A,\n        onSuccess: j\n    }), x = (e)=>Ss(e) && !(en in e) ? L((t)=>Z(Bn(Ki(e, io(t))))) : Z(Bn(e)), Us = (e)=>m(y(e), x), Z = (e)=>{\n    const t = new Mf(te);\n    return t.effect_instruction_i0 = e, t;\n}, xf = (e)=>m(y(e), Z), Wi = /* @__PURE__ */ L((e)=>S(e.id())), fr = (e)=>L((t)=>e(t.id())), m = /* @__PURE__ */ l(2, (e, t)=>{\n    const n = new J(zr);\n    return n.effect_instruction_i0 = e, n.effect_instruction_i1 = t, n;\n}), jt = /* @__PURE__ */ l(2, (e, t)=>m(e, (n)=>{\n        const r = typeof t == \"function\" ? t(n) : t;\n        return Le(r) ? r : nl(r) ? Vn((s)=>{\n            r.then((c)=>s(S(c)), (c)=>s(x(new Gs(c, \"An unknown error occurred in Effect.andThen\"))));\n        }) : S(r);\n    })), Yy = (e)=>{\n    const t = new J(\"OnStep\");\n    return t.effect_instruction_i0 = e, t;\n}, zs = (e)=>m(e, P), jf = /* @__PURE__ */ l(2, (e, t)=>Se(e, {\n        onFailure: (n)=>S(t.onFailure(n)),\n        onSuccess: (n)=>S(t.onSuccess(n))\n    })), Se = /* @__PURE__ */ l(2, (e, t)=>{\n    const n = new J(Br);\n    return n.effect_instruction_i0 = e, n.effect_instruction_i1 = t.onFailure, n.effect_instruction_i2 = t.onSuccess, n;\n}), Xe = /* @__PURE__ */ l(2, (e, t)=>Se(e, {\n        onFailure: (n)=>{\n            if (Ry(n).length > 0) return Z(Ay(n));\n            const s = Fy(n);\n            return s.length > 0 ? t.onFailure(jl(s)) : Z(n);\n        },\n        onSuccess: t.onSuccess\n    })), Ke = /* @__PURE__ */ l(2, (e, t)=>N(()=>{\n        const n = z(e), r = Si(n.length);\n        let s = 0;\n        return fe(Yi({\n            while: ()=>s < n.length,\n            body: ()=>t(n[s], s),\n            step: (c)=>{\n                r[s++] = c;\n            }\n        }), r);\n    })), Bs = /* @__PURE__ */ l(2, (e, t)=>N(()=>{\n        const n = z(e);\n        let r = 0;\n        return Yi({\n            while: ()=>r < n.length,\n            body: ()=>t(n[r], r),\n            step: ()=>{\n                r++;\n            }\n        });\n    })), Qy = /* @__PURE__ */ m(Wi, (e)=>Lf(e)), Lf = (e)=>Z(Te(e)), Ji = (e)=>{\n    const t = new J(un);\n    return t.effect_instruction_i0 = iy(gn), t.effect_instruction_i1 = ()=>e, t;\n}, Zy = /* @__PURE__ */ l(2, (e, t)=>Ee((n)=>m(Ye(n(e)), (r)=>xb(t, r)))), T = /* @__PURE__ */ l(2, (e, t)=>m(e, (n)=>y(()=>t(n)))), Hi = /* @__PURE__ */ l(2, (e, t)=>Xe(e, {\n        onFailure: (n)=>Us(()=>t.onFailure(n)),\n        onSuccess: (n)=>y(()=>t.onSuccess(n))\n    })), Vs = /* @__PURE__ */ l(2, (e, t)=>Se(e, {\n        onFailure: (n)=>{\n            const r = Cy(n);\n            switch(r._tag){\n                case \"Left\":\n                    return Us(()=>t(r.left));\n                case \"Right\":\n                    return Z(r.right);\n            }\n        },\n        onSuccess: S\n    })), rn = /* @__PURE__ */ l(2, (e, t)=>Ee((n)=>Se(n(e), {\n            onFailure: (r)=>{\n                const s = A(r);\n                return Se(t(s), {\n                    onFailure: (c)=>A(se(r, c)),\n                    onSuccess: ()=>s\n                });\n            },\n            onSuccess: (r)=>{\n                const s = j(r);\n                return oe(t(s), s);\n            }\n        }))), Df = /* @__PURE__ */ l(2, (e, t)=>rn(e, to({\n        onFailure: (n)=>Ui(n) ? nt(t(My(n))) : K,\n        onSuccess: ()=>K\n    }))), Xy = (e)=>eb(e, P), eb = /* @__PURE__ */ l(2, (e, t)=>Xe(e, {\n        onFailure: (n)=>Xr(t(n)),\n        onSuccess: S\n    })), S = (e)=>{\n    const t = new Tf(ne);\n    return t.effect_instruction_i0 = e, t;\n}, N = (e)=>{\n    const t = new J(ws);\n    return t.commit = e, t;\n}, y = (e)=>{\n    const t = new J(al);\n    return t.effect_instruction_i0 = e, t;\n}, Gi = /* @__PURE__ */ l((e)=>e.length === 3 || e.length === 2 && !(Ss(e[1]) && \"onlyEffect\" in e[1]), (e, t)=>m(e, (n)=>{\n        const r = typeof t == \"function\" ? t(n) : t;\n        return Le(r) ? fe(r, n) : nl(r) ? Vn((s)=>{\n            r.then((c)=>s(S(n)), (c)=>s(x(new Gs(c, \"An unknown error occurred in Effect.tap\"))));\n        }) : S(n);\n    })), tb = (e)=>L((t)=>{\n        const n = t.getFiberRef(zc), r = f(n, de(()=>t.scope()));\n        return e(hr(zc, I(r)));\n    }), Ks = (e)=>{\n    const t = new J(un);\n    return t.effect_instruction_i0 = Sf(gn), t.effect_instruction_i1 = ()=>e, t;\n}, Ee = (e)=>Nf(e, function() {\n        const t = new J(un);\n        return t.effect_instruction_i0 = Sf(gn), t.effect_instruction_i1 = (n)=>yf(n) ? ee(()=>this.effect_instruction_i0(Ji)) : ee(()=>this.effect_instruction_i0(Ks)), t;\n    }), K = /* @__PURE__ */ S(void 0), nb = (e)=>{\n    const t = new J(un);\n    return t.effect_instruction_i0 = e, t.effect_instruction_i1 = void 0, t;\n}, rb = /* @__PURE__ */ l(2, (e, t)=>m(t, (n)=>n ? f(e, T(I)) : S(v()))), Yi = (e)=>{\n    const t = new J(Vr);\n    return t.effect_instruction_i0 = e.while, t.effect_instruction_i1 = e.body, t.effect_instruction_i2 = e.step, t;\n}, sb = (e)=>N(()=>{\n        const t = new J(Mn);\n        return t.effect_instruction_i0 = e(), t;\n    }), cb = function() {\n    const e = arguments.length === 1 ? arguments[0] : arguments[1].bind(arguments[0]);\n    return sb(()=>e(f));\n}, ib = /* @__PURE__ */ l(2, (e, t)=>{\n    const n = new J(un);\n    return n.effect_instruction_i0 = t, n.effect_instruction_i1 = ()=>e, n;\n}), Qi = (e)=>{\n    const t = new J(Cr);\n    return typeof (e == null ? void 0 : e.priority) < \"u\" ? Ob(t, e.priority) : t;\n}, qf = /* @__PURE__ */ l(2, (e, t)=>m(e, (n)=>T(t, (r)=>[\n                n,\n                r\n            ]))), Zi = /* @__PURE__ */ l(2, (e, t)=>m(e, (n)=>fe(t, n))), oe = /* @__PURE__ */ l(2, (e, t)=>m(e, ()=>t)), Uf = /* @__PURE__ */ l(3, (e, t, n)=>m(e, (r)=>T(t, (s)=>n(r, s)))), zf = (e)=>m(Wi, (t)=>f(e, es(t))), es = /* @__PURE__ */ l(2, (e, t)=>m(e.interruptAsFork(t), ()=>e.await)), ob = {\n    _tag: \"All\",\n    syslog: 0,\n    label: \"ALL\",\n    ordinal: Number.MIN_SAFE_INTEGER,\n    pipe () {\n        return w(this, arguments);\n    }\n}, ab = {\n    _tag: \"Fatal\",\n    syslog: 2,\n    label: \"FATAL\",\n    ordinal: 5e4,\n    pipe () {\n        return w(this, arguments);\n    }\n}, ub = {\n    _tag: \"Error\",\n    syslog: 3,\n    label: \"ERROR\",\n    ordinal: 4e4,\n    pipe () {\n        return w(this, arguments);\n    }\n}, lb = {\n    _tag: \"Warning\",\n    syslog: 4,\n    label: \"WARN\",\n    ordinal: 3e4,\n    pipe () {\n        return w(this, arguments);\n    }\n}, Bf = {\n    _tag: \"Info\",\n    syslog: 6,\n    label: \"INFO\",\n    ordinal: 2e4,\n    pipe () {\n        return w(this, arguments);\n    }\n}, Vf = {\n    _tag: \"Debug\",\n    syslog: 7,\n    label: \"DEBUG\",\n    ordinal: 1e4,\n    pipe () {\n        return w(this, arguments);\n    }\n}, fb = {\n    _tag: \"Trace\",\n    syslog: 7,\n    label: \"TRACE\",\n    ordinal: 0,\n    pipe () {\n        return w(this, arguments);\n    }\n}, hb = {\n    _tag: \"None\",\n    syslog: 7,\n    label: \"OFF\",\n    ordinal: Number.MAX_SAFE_INTEGER,\n    pipe () {\n        return w(this, arguments);\n    }\n}, db = \"effect/FiberRef\", gb = /* @__PURE__ */ Symbol.for(db), mb = {\n    /* c8 ignore next */ _A: (e)=>e\n}, Xi = (e)=>L((t)=>j(t.getFiberRef(e))), Ws = /* @__PURE__ */ l(2, (e, t)=>m(Xi(e), t)), ia = /* @__PURE__ */ l(2, (e, t)=>pb(e, ()=>[\n            void 0,\n            t\n        ])), pb = /* @__PURE__ */ l(2, (e, t)=>L((n)=>{\n        const [r, s] = t(n.getFiberRef(e));\n        return n.setFiberRef(e, s), S(r);\n    })), hr = /* @__PURE__ */ l(3, (e, t, n)=>Cf(Zi(Xi(t), ia(t, n)), ()=>e, (r)=>ia(t, r))), _b = /* @__PURE__ */ l(3, (e, t, n)=>Ws(t, (r)=>hr(e, t, n(r)))), ge = (e, t)=>{\n    var _ref;\n    return yn(e, {\n        differ: gf(),\n        fork: (_ref = t == null ? void 0 : t.fork) !== null && _ref !== void 0 ? _ref : P,\n        join: t == null ? void 0 : t.join\n    });\n}, yb = (e)=>{\n    const t = K_();\n    return yn(e, {\n        differ: t,\n        fork: t.empty\n    });\n}, bb = (e)=>{\n    const t = W_(gf());\n    return yn(e, {\n        differ: t,\n        fork: t.empty\n    });\n}, Kf = (e)=>{\n    const t = V_();\n    return yn(e, {\n        differ: t,\n        fork: t.empty\n    });\n}, yn = (e, t)=>{\n    var _t_join;\n    return {\n        ...nr,\n        [gb]: mb,\n        initial: e,\n        commit () {\n            return Xi(this);\n        },\n        diff: (r, s)=>t.differ.diff(r, s),\n        combine: (r, s)=>t.differ.combine(r, s),\n        patch: (r)=>(s)=>t.differ.patch(r, s),\n        fork: t.fork,\n        join: (_t_join = t.join) !== null && _t_join !== void 0 ? _t_join : (r, s)=>s\n    };\n}, Sb = (e)=>yn(e, {\n        differ: ea,\n        fork: ea.empty\n    }), rt = /* @__PURE__ */ C(/* @__PURE__ */ Symbol.for(\"effect/FiberRef/currentContext\"), ()=>Kf(Oi())), dr = /* @__PURE__ */ C(/* @__PURE__ */ Symbol.for(\"effect/FiberRef/currentSchedulingPriority\"), ()=>ge(0)), Wf = /* @__PURE__ */ C(/* @__PURE__ */ Symbol.for(\"effect/FiberRef/currentMaxOpsBeforeYield\"), ()=>ge(2048)), kb = /* @__PURE__ */ C(/* @__PURE__ */ Symbol.for(\"effect/FiberRef/currentLogAnnotation\"), ()=>ge(ji())), vb = /* @__PURE__ */ C(/* @__PURE__ */ Symbol.for(\"effect/FiberRef/currentLogLevel\"), ()=>ge(Bf)), wb = /* @__PURE__ */ C(/* @__PURE__ */ Symbol.for(\"effect/FiberRef/currentLogSpan\"), ()=>ge(Gt())), Ob = /* @__PURE__ */ l(2, (e, t)=>hr(e, dr, t)), $b = /* @__PURE__ */ C(/* @__PURE__ */ Symbol.for(\"effect/FiberRef/currentConcurrency\"), ()=>ge(\"unbounded\")), Eb = /* @__PURE__ */ C(/* @__PURE__ */ Symbol.for(\"effect/FiberRef/currentRequestBatching\"), ()=>ge(!0)), Ib = /* @__PURE__ */ C(/* @__PURE__ */ Symbol.for(\"effect/FiberRef/currentUnhandledErrorLogLevel\"), ()=>ge(I(Vf))), Uc = /* @__PURE__ */ C(/* @__PURE__ */ Symbol.for(\"effect/FiberRef/currentMetricLabels\"), ()=>bb(Bt())), zc = /* @__PURE__ */ C(/* @__PURE__ */ Symbol.for(\"effect/FiberRef/currentForkScopeOverride\"), ()=>ge(v(), {\n        fork: ()=>v(),\n        join: (e, t)=>e\n    })), Ir = /* @__PURE__ */ C(/* @__PURE__ */ Symbol.for(\"effect/FiberRef/currentInterruptedCause\"), ()=>ge(Zt, {\n        fork: ()=>Zt,\n        join: (e, t)=>e\n    })), oa = /* @__PURE__ */ Symbol.for(\"effect/Scope\"), aa = /* @__PURE__ */ Symbol.for(\"effect/CloseableScope\"), Jf = (e, t)=>e.addFinalizer(()=>nt(t)), ts = (e, t)=>e.addFinalizer(t), Bc = (e, t)=>e.close(t), Js = (e, t)=>e.fork(t), Hf = /* @__PURE__ */ function() {\n    class e extends globalThis.Error {\n        commit() {\n            return x(this);\n        }\n        toJSON() {\n            const n = {\n                ...this\n            };\n            return this.message && (n.message = this.message), this.cause && (n.cause = this.cause), n;\n        }\n        [U]() {\n            return this.toString !== globalThis.Error.prototype.toString ? this.stack ? \"\".concat(this.toString(), \"\\n\").concat(this.stack.split(\"\\n\").slice(1).join(\"\\n\")) : this.toString() : \"Bun\" in globalThis ? ar(Bn(this), {\n                renderErrorCause: !0\n            }) : this;\n        }\n    }\n    return Object.assign(e.prototype, fg), e;\n}(), Gf = (e, t)=>{\n    class n extends Hf {\n        constructor(){\n            super(...arguments);\n            u(this, \"_tag\", t);\n        }\n    }\n    return Object.assign(n.prototype, e), n.prototype.name = t, n;\n}, ua = /* @__PURE__ */ Symbol.for(\"effect/Cause/errors/RuntimeException\"), Fb = /* @__PURE__ */ Gf({\n    [ua]: ua\n}, \"RuntimeException\"), Rb = /* @__PURE__ */ Symbol.for(\"effect/Cause/errors/InterruptedException\"), Mb = (e)=>$(e, Rb), la = /* @__PURE__ */ Symbol.for(\"effect/Cause/errors/NoSuchElement\"), Hs = /* @__PURE__ */ Gf({\n    [la]: la\n}, \"NoSuchElementException\"), fa = /* @__PURE__ */ Symbol.for(\"effect/Cause/errors/UnknownException\"), Gs = /* @__PURE__ */ function() {\n    class e extends Hf {\n        constructor(r, s){\n            super(s !== null && s !== void 0 ? s : \"An unknown error occurred\", {\n                cause: r\n            });\n            u(this, \"_tag\", \"UnknownException\");\n            u(this, \"error\");\n            this.error = r;\n        }\n    }\n    return Object.assign(e.prototype, {\n        [fa]: fa,\n        name: \"UnknownException\"\n    }), e;\n}(), eo = (e)=>Le(e) && \"_tag\" in e && (e._tag === \"Success\" || e._tag === \"Failure\"), ME = (e)=>e._tag === \"Failure\", TE = (e)=>e._tag === \"Success\", Tb = /* @__PURE__ */ l(2, (e, t)=>{\n    switch(e._tag){\n        case te:\n            return A(e.effect_instruction_i0);\n        case ne:\n            return j(t);\n    }\n}), hc = (e)=>Tb(e, void 0), Nn = (e, t)=>Nb(e, t != null && t.parallel ? Ot : se), Fn = (e)=>A(Oe(e)), ha = (e)=>A(Bn(e)), A = (e)=>{\n    const t = new Mf(te);\n    return t.effect_instruction_i0 = e, t;\n}, Cb = (e)=>A(Te(e)), dc = /* @__PURE__ */ l(2, (e, t)=>{\n    switch(e._tag){\n        case te:\n            return A(e.effect_instruction_i0);\n        case ne:\n            return j(t(e.effect_instruction_i0));\n    }\n}), to = /* @__PURE__ */ l(2, (e, param)=>{\n    let { onFailure: t, onSuccess: n } = param;\n    switch(e._tag){\n        case te:\n            return t(e.effect_instruction_i0);\n        case ne:\n            return n(e.effect_instruction_i0);\n    }\n}), Vc = /* @__PURE__ */ l(2, (e, param)=>{\n    let { onFailure: t, onSuccess: n } = param;\n    switch(e._tag){\n        case te:\n            return t(e.effect_instruction_i0);\n        case ne:\n            return n(e.effect_instruction_i0);\n    }\n}), j = (e)=>{\n    const t = new Tf(ne);\n    return t.effect_instruction_i0 = e, t;\n}, Ne = /* @__PURE__ */ j(void 0), CE = /* @__PURE__ */ l(2, (e, t)=>no(e, t, {\n        onSuccess: (n, r)=>[\n                n,\n                r\n            ],\n        onFailure: se\n    })), NE = /* @__PURE__ */ l(2, (e, t)=>no(e, t, {\n        onSuccess: (n, r)=>r,\n        onFailure: se\n    })), no = /* @__PURE__ */ l(3, (e, t, param)=>{\n    let { onFailure: n, onSuccess: r } = param;\n    switch(e._tag){\n        case te:\n            switch(t._tag){\n                case ne:\n                    return A(e.effect_instruction_i0);\n                case te:\n                    return A(n(e.effect_instruction_i0, t.effect_instruction_i0));\n            }\n        case ne:\n            switch(t._tag){\n                case ne:\n                    return j(r(e.effect_instruction_i0, t.effect_instruction_i0));\n                case te:\n                    return A(t.effect_instruction_i0);\n            }\n    }\n}), Nb = (e, t)=>{\n    const n = Pl(e);\n    return He(n) ? f(Ve(n), ki(f(Ce(n), dc(ie)), (r, s)=>f(r, no(s, {\n            onSuccess: (c, i)=>f(c, be(i)),\n            onFailure: t\n        }))), dc(yt), dc((r)=>We(r)), I) : v();\n}, Yf = (e)=>({\n        ...nr,\n        [Ky]: Wy,\n        state: Ps(Jy([])),\n        commit () {\n            return ro(this);\n        },\n        blockingOn: e\n    }), Ab = ()=>m(Wi, (e)=>Pb(e)), Pb = (e)=>y(()=>Yf(e)), ro = (e)=>Af((t)=>{\n        const n = Ze(e.state);\n        switch(n._tag){\n            case qs:\n                return t(n.effect);\n            case ur:\n                return n.joiners.push(t), Db(e, t);\n        }\n    }, e.blockingOn), Ys = /* @__PURE__ */ l(2, (e, t)=>y(()=>{\n        const n = Ze(e.state);\n        switch(n._tag){\n            case qs:\n                return !1;\n            case ur:\n                {\n                    xs(e.state, Ff(t));\n                    for(let r = 0, s = n.joiners.length; r < s; r++)n.joiners[r](t);\n                    return !0;\n                }\n        }\n    })), xb = /* @__PURE__ */ l(2, (e, t)=>Ys(e, t)), jb = /* @__PURE__ */ l(2, (e, t)=>Ys(e, Z(t))), AE = /* @__PURE__ */ l(2, (e, t)=>Ys(e, Lf(t))), PE = (e)=>y(()=>Ze(e.state)._tag === qs), Lb = /* @__PURE__ */ l(2, (e, t)=>Ys(e, S(t))), Qf = (e, t)=>{\n    const n = Ze(e.state);\n    if (n._tag === ur) {\n        xs(e.state, Ff(t));\n        for(let r = 0, s = n.joiners.length; r < s; r++)n.joiners[r](t);\n    }\n}, Db = (e, t)=>y(()=>{\n        const n = Ze(e.state);\n        if (n._tag === ur) {\n            const r = n.joiners.indexOf(t);\n            r >= 0 && n.joiners.splice(r, 1);\n        }\n    }), qb = /* @__PURE__ */ L((e)=>j(e.currentContext)), Zf = ()=>qb, bn = (e)=>m(Zf(), e), so = /* @__PURE__ */ l(2, (e, t)=>hr(rt, t)(e)), co = /* @__PURE__ */ l(2, (e, t)=>_b(rt, (n)=>fn(n, t))(e)), Ub = /* @__PURE__ */ l(2, (e, t)=>bn((n)=>so(e, t(n)))), io = (e)=>{\n    const t = e.currentSpan;\n    return t !== void 0 && t._tag === \"Span\" ? I(t) : v();\n}, da = /* @__PURE__ */ Symbol.for(\"effect/MutableHashMap\"), zb = {\n    [da]: da,\n    [Symbol.iterator] () {\n        return new oo(this);\n    },\n    toString () {\n        return Q(this.toJSON());\n    },\n    toJSON () {\n        return {\n            _id: \"MutableHashMap\",\n            values: Array.from(this).map(V)\n        };\n    },\n    [U] () {\n        return this.toJSON();\n    },\n    pipe () {\n        return w(this, arguments);\n    }\n};\nclass oo {\n    next() {\n        if (this.bucketIterator !== void 0) return this.bucketIterator.next();\n        const t = this.referentialIterator.next();\n        return t.done ? (this.bucketIterator = new Bb(this.self.buckets.values()), this.next()) : t;\n    }\n    [Symbol.iterator]() {\n        return new oo(this.self);\n    }\n    constructor(t){\n        u(this, \"self\");\n        u(this, \"referentialIterator\");\n        u(this, \"bucketIterator\");\n        this.self = t, this.referentialIterator = t.referential[Symbol.iterator]();\n    }\n}\nclass Bb {\n    next() {\n        if (this.currentBucket === void 0) {\n            const n = this.backing.next();\n            if (n.done) return n;\n            this.currentBucket = n.value[Symbol.iterator]();\n        }\n        const t = this.currentBucket.next();\n        return t.done ? (this.currentBucket = void 0, this.next()) : t;\n    }\n    constructor(t){\n        u(this, \"backing\");\n        u(this, \"currentBucket\");\n        this.backing = t;\n    }\n}\nconst Vb = ()=>{\n    const e = Object.create(zb);\n    return e.referential = /* @__PURE__ */ new Map(), e.buckets = /* @__PURE__ */ new Map(), e.bucketsSize = 0, e;\n}, ot = /* @__PURE__ */ l(2, (e, t)=>{\n    if (Ur(t) === !1) return e.referential.has(t) ? I(e.referential.get(t)) : v();\n    const n = t[F](), r = e.buckets.get(n);\n    return r === void 0 ? v() : Kb(e, r, t);\n}), Kb = function(e, t, n) {\n    let r = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : !1;\n    for(let s = 0, c = t.length; s < c; s++)if (n[E](t[s][0])) {\n        const i = t[s][1];\n        return r && (t.splice(s, 1), e.bucketsSize--), I(i);\n    }\n    return v();\n}, On = /* @__PURE__ */ l(2, (e, t)=>ye(ot(e, t))), $n = /* @__PURE__ */ l(3, (e, t, n)=>{\n    if (Ur(t) === !1) return e.referential.set(t, n), e;\n    const r = t[F](), s = e.buckets.get(r);\n    return s === void 0 ? (e.buckets.set(r, [\n        [\n            t,\n            n\n        ]\n    ]), e.bucketsSize++, e) : (Wb(e, s, t), s.push([\n        t,\n        n\n    ]), e.bucketsSize++, e);\n}), Wb = (e, t, n)=>{\n    for(let r = 0, s = t.length; r < s; r++)if (n[E](t[r][0])) {\n        t.splice(r, 1), e.bucketsSize--;\n        return;\n    }\n}, Jb = \"effect/Clock\", ga = /* @__PURE__ */ Symbol.for(Jb), Qs = /* @__PURE__ */ It(\"effect/Clock\"), Hb = 2 ** 31 - 1, ma = {\n    unsafeSchedule (e, t) {\n        const n = Ic(t);\n        if (n > Hb) return bc;\n        let r = !1;\n        const s = setTimeout(()=>{\n            r = !0, e();\n        }, n);\n        return ()=>(clearTimeout(s), !r);\n    }\n}, pa = /* @__PURE__ */ function() {\n    const e = /* @__PURE__ */ BigInt(1e6);\n    if (typeof performance > \"u\") return ()=>BigInt(Date.now()) * e;\n    if (typeof performance.timeOrigin == \"number\" && performance.timeOrigin === 0) return ()=>BigInt(Math.round(performance.now() * 1e6));\n    const t = /* @__PURE__ */ BigInt(/* @__PURE__ */ Date.now()) * e - /* @__PURE__ */ BigInt(/* @__PURE__ */ Math.round(/* @__PURE__ */ performance.now() * 1e6));\n    return ()=>t + BigInt(Math.round(performance.now() * 1e6));\n}(), Gb = /* @__PURE__ */ function() {\n    const e = typeof process == \"object\" && \"hrtime\" in process && typeof process.hrtime.bigint == \"function\" ? process.hrtime : void 0;\n    if (!e) return pa;\n    const t = /* @__PURE__ */ pa() - /* @__PURE__ */ e.bigint();\n    return ()=>t + e.bigint();\n}();\nvar iu;\niu = ga;\nclass Yb {\n    unsafeCurrentTimeMillis() {\n        return Date.now();\n    }\n    unsafeCurrentTimeNanos() {\n        return Gb();\n    }\n    scheduler() {\n        return S(ma);\n    }\n    sleep(t) {\n        return xe((n)=>{\n            const r = ma.unsafeSchedule(()=>n(K), t);\n            return nt(y(r));\n        });\n    }\n    constructor(){\n        u(this, iu, ga);\n        u(this, \"currentTimeMillis\", /* @__PURE__ */ y(()=>this.unsafeCurrentTimeMillis()));\n        u(this, \"currentTimeNanos\", /* @__PURE__ */ y(()=>this.unsafeCurrentTimeNanos()));\n    }\n}\nconst Qb = ()=>new Yb(), Xf = \"And\", eh = \"Or\", th = \"InvalidData\", nh = \"MissingData\", rh = \"SourceUnavailable\", sh = \"Unsupported\", Zb = \"effect/ConfigError\", _a = /* @__PURE__ */ Symbol.for(Zb), Sn = {\n    _tag: \"ConfigError\",\n    [_a]: _a\n}, ch = (e, t)=>{\n    const n = Object.create(Sn);\n    return n._op = Xf, n.left = e, n.right = t, Object.defineProperty(n, \"toString\", {\n        enumerable: !1,\n        value () {\n            return \"\".concat(this.left, \" and \").concat(this.right);\n        }\n    }), n;\n}, ih = (e, t)=>{\n    const n = Object.create(Sn);\n    return n._op = eh, n.left = e, n.right = t, Object.defineProperty(n, \"toString\", {\n        enumerable: !1,\n        value () {\n            return \"\".concat(this.left, \" or \").concat(this.right);\n        }\n    }), n;\n}, Xb = function(e, t) {\n    let n = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {\n        pathDelim: \".\"\n    };\n    const r = Object.create(Sn);\n    return r._op = th, r.path = e, r.message = t, Object.defineProperty(r, \"toString\", {\n        enumerable: !1,\n        value () {\n            return \"(Invalid data at \".concat(f(this.path, ln(n.pathDelim)), ': \"').concat(this.message, '\")');\n        }\n    }), r;\n}, $t = function(e, t) {\n    let n = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {\n        pathDelim: \".\"\n    };\n    const r = Object.create(Sn);\n    return r._op = nh, r.path = e, r.message = t, Object.defineProperty(r, \"toString\", {\n        enumerable: !1,\n        value () {\n            return \"(Missing data at \".concat(f(this.path, ln(n.pathDelim)), ': \"').concat(this.message, '\")');\n        }\n    }), r;\n}, eS = function(e, t, n) {\n    let r = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {\n        pathDelim: \".\"\n    };\n    const s = Object.create(Sn);\n    return s._op = rh, s.path = e, s.message = t, s.cause = n, Object.defineProperty(s, \"toString\", {\n        enumerable: !1,\n        value () {\n            return \"(Source unavailable at \".concat(f(this.path, ln(r.pathDelim)), ': \"').concat(this.message, '\")');\n        }\n    }), s;\n}, tS = function(e, t) {\n    let n = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {\n        pathDelim: \".\"\n    };\n    const r = Object.create(Sn);\n    return r._op = sh, r.path = e, r.message = t, Object.defineProperty(r, \"toString\", {\n        enumerable: !1,\n        value () {\n            return \"(Unsupported operation at \".concat(f(this.path, ln(n.pathDelim)), ': \"').concat(this.message, '\")');\n        }\n    }), r;\n}, ut = /* @__PURE__ */ l(2, (e, t)=>{\n    switch(e._op){\n        case Xf:\n            return ch(ut(e.left, t), ut(e.right, t));\n        case eh:\n            return ih(ut(e.left, t), ut(e.right, t));\n        case th:\n            return Xb([\n                ...t,\n                ...e.path\n            ], e.message);\n        case nh:\n            return $t([\n                ...t,\n                ...e.path\n            ], e.message);\n        case rh:\n            return eS([\n                ...t,\n                ...e.path\n            ], e.message, e.cause);\n        case sh:\n            return tS([\n                ...t,\n                ...e.path\n            ], e.message);\n    }\n}), nS = {\n    _tag: \"Empty\"\n}, gc = /* @__PURE__ */ l(2, (e, t)=>{\n    let n = Li(t), r = e;\n    for(; Zp(n);){\n        const s = n.head;\n        switch(s._tag){\n            case \"Empty\":\n                {\n                    n = n.tail;\n                    break;\n                }\n            case \"AndThen\":\n                {\n                    n = vt(s.first, vt(s.second, n.tail));\n                    break;\n                }\n            case \"MapName\":\n                {\n                    r = ft(r, s.f), n = n.tail;\n                    break;\n                }\n            case \"Nested\":\n                {\n                    r = Kr(r, s.name), n = n.tail;\n                    break;\n                }\n            case \"Unnested\":\n                {\n                    if (f(Tn(r), Cg(s.name))) r = _t(r), n = n.tail;\n                    else return $e($t(r, \"Expected \".concat(s.name, \" to be in path in ConfigProvider#unnested\")));\n                    break;\n                }\n        }\n    }\n    return ae(r);\n}), rS = \"Constant\", sS = \"Fail\", cS = \"Fallback\", iS = \"Described\", oS = \"Lazy\", aS = \"MapOrFail\", uS = \"Nested\", lS = \"Primitive\", fS = \"Sequence\", hS = \"HashMap\", dS = \"ZipWith\", ns = (e, t)=>[\n        ...e,\n        ...t\n    ], gS = \"effect/ConfigProvider\", ya = /* @__PURE__ */ Symbol.for(gS), mS = /* @__PURE__ */ It(\"effect/ConfigProvider\"), pS = \"effect/ConfigProviderFlat\", ba = /* @__PURE__ */ Symbol.for(pS), _S = (e)=>({\n        [ya]: ya,\n        pipe () {\n            return w(this, arguments);\n        },\n        ...e\n    }), yS = (e)=>({\n        [ba]: ba,\n        patch: e.patch,\n        load: function(t, n) {\n            let r = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !0;\n            return e.load(t, n, r);\n        },\n        enumerateChildren: e.enumerateChildren\n    }), bS = (e)=>_S({\n        load: (t)=>m(_e(e, Bt(), t, !1), (n)=>tt(Tn(n), {\n                    onNone: ()=>x($t(Bt(), \"Expected a single value having structure: \".concat(t))),\n                    onSome: S\n                })),\n        flattened: e\n    }), SS = (e)=>{\n    const { pathDelim: t, seqDelim: n } = Object.assign({}, {\n        pathDelim: \"_\",\n        seqDelim: \",\"\n    }, e), r = (a)=>f(a, ln(t)), s = (a)=>a.split(t), c = ()=>typeof process < \"u\" && \"env\" in process && typeof process.env == \"object\" ? process.env : {};\n    return bS(yS({\n        load: function(a, h) {\n            let d = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !0;\n            const g = r(a), p = c(), _ = g in p ? I(p[g]) : v();\n            return f(_, Vs(()=>$t(a, \"Expected \".concat(g, \" to exist in the process context\"))), m((b)=>$S(b, a, h, n, d)));\n        },\n        enumerateChildren: (a)=>y(()=>{\n                const h = c(), p = Object.keys(h).map((_)=>s(_.toUpperCase())).filter((_)=>{\n                    for(let b = 0; b < a.length; b++){\n                        const M = f(a, vl(b)), D = _[b];\n                        if (D === void 0 || M !== D) return !1;\n                    }\n                    return !0;\n                }).flatMap((_)=>_.slice(a.length, a.length + 1));\n                return Tp(p);\n            }),\n        patch: nS\n    }));\n}, kS = (e, t, n, r)=>{\n    const s = zo(n.length, (a)=>a >= r.length ? v() : I([\n            e(a),\n            a + 1\n        ])), c = zo(r.length, (a)=>a >= n.length ? v() : I([\n            t(a),\n            a + 1\n        ])), i = ns(n, s), o = ns(r, c);\n    return [\n        i,\n        o\n    ];\n}, vS = (e, t)=>{\n    let n = t;\n    if (n._tag === \"Nested\") {\n        const r = e.slice();\n        for(; n._tag === \"Nested\";)r.push(n.name), n = n.config;\n        return r;\n    }\n    return e;\n}, _e = (e, t, n, r)=>{\n    const s = n;\n    switch(s._tag){\n        case rS:\n            return S(ke(s.value));\n        case iS:\n            return N(()=>_e(e, t, s.config, r));\n        case sS:\n            return x($t(t, s.message));\n        case cS:\n            return f(N(()=>_e(e, t, s.first, r)), Zr((c)=>s.condition(c) ? f(_e(e, t, s.second, r), Zr((i)=>x(ih(c, i)))) : x(c)));\n        case oS:\n            return N(()=>_e(e, t, s.config(), r));\n        case aS:\n            return N(()=>f(_e(e, t, s.original, r), m(Ke((c)=>f(s.mapOrFail(c), Vs(ut(vS(t, s.original))))))));\n        case uS:\n            return N(()=>_e(e, ns(t, ke(s.name)), s.config, r));\n        case lS:\n            return f(gc(t, e.patch), m((c)=>f(e.load(c, s, r), m((i)=>{\n                    if (i.length === 0) {\n                        const o = f(zg(c), de(()=>\"<n/a>\"));\n                        return x($t([], \"Expected \".concat(s.description, \" with name \").concat(o)));\n                    }\n                    return S(i);\n                }))));\n        case fS:\n            return f(gc(t, e.patch), m((c)=>f(e.enumerateChildren(c), m(IS), m((i)=>i.length === 0 ? N(()=>T(_e(e, t, s.config, !0), ke)) : f(Ke(i, (o)=>_e(e, xg(t, \"[\".concat(o, \"]\")), s.config, !0)), T((o)=>{\n                        const a = Xg(o);\n                        return a.length === 0 ? ke(Bt()) : ke(a);\n                    }))))));\n        case hS:\n            return N(()=>f(gc(t, e.patch), m((c)=>f(e.enumerateChildren(c), m((i)=>f(i, Ke((o)=>_e(e, ns(c, ke(o)), s.valueConfig, r)), T((o)=>o.length === 0 ? ke(ji()) : f(ES(o), ft((a)=>Bp(Uo(z(i), a)))))))))));\n        case dS:\n            return N(()=>f(_e(e, t, s.left, r), nn, m((c)=>f(_e(e, t, s.right, r), nn, m((i)=>{\n                        if (at(c) && at(i)) return x(ch(c.left, i.left));\n                        if (at(c) && Pt(i)) return x(c.left);\n                        if (Pt(c) && at(i)) return x(i.left);\n                        if (Pt(c) && Pt(i)) {\n                            const o = f(t, ln(\".\")), a = wS(t, o), [h, d] = kS(a, a, f(c.right, ft(ae)), f(i.right, ft(ae)));\n                            return f(h, Uo(d), Ke((param)=>{\n                                let [g, p] = param;\n                                return f(qf(g, p), T((param)=>{\n                                    let [_, b] = param;\n                                    return s.zip(_, b);\n                                }));\n                            }));\n                        }\n                        throw new Error(\"BUG: ConfigProvider.fromFlatLoop - please report an issue at https://github.com/Effect-TS/effect/issues\");\n                    })))));\n    }\n}, wS = (e, t)=>(n)=>$e($t(e, \"The element at index \".concat(n, ' in a sequence at path \"').concat(t, '\" was missing'))), OS = (e, t)=>e.split(new RegExp(\"\\\\s*\".concat(nm(t), \"\\\\s*\"))), $S = (e, t, n, r, s)=>s ? f(OS(e, r), Ke((c)=>n.parse(c.trim())), Vs(ut(t))) : f(n.parse(e), Hi({\n        onFailure: ut(t),\n        onSuccess: ke\n    })), ES = (e)=>Object.keys(e[0]).map((t)=>e.map((n)=>n[t])), IS = (e)=>f(Ke(e, RS), Hi({\n        onFailure: ()=>Bt(),\n        onSuccess: Wr(xn)\n    }), nn, T(vg)), FS = /^(\\[(\\d+)\\])$/, RS = (e)=>{\n    const t = e.match(FS);\n    if (t !== null) {\n        const n = t[2];\n        return f(n !== void 0 && n.length > 0 ? I(n) : v(), bl(MS));\n    }\n    return v();\n}, MS = (e)=>{\n    const t = Number.parseInt(e);\n    return Number.isNaN(t) ? v() : I(t);\n}, Sa = /* @__PURE__ */ Symbol.for(\"effect/Console\"), oh = /* @__PURE__ */ It(\"effect/Console\"), TS = {\n    [Sa]: Sa,\n    assert (e) {\n        for(var _len = arguments.length, t = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n            t[_key - 1] = arguments[_key];\n        }\n        return y(()=>{\n            console.assert(e, ...t);\n        });\n    },\n    clear: /* @__PURE__ */ y(()=>{\n        console.clear();\n    }),\n    count (e) {\n        return y(()=>{\n            console.count(e);\n        });\n    },\n    countReset (e) {\n        return y(()=>{\n            console.countReset(e);\n        });\n    },\n    debug () {\n        for(var _len = arguments.length, e = new Array(_len), _key = 0; _key < _len; _key++){\n            e[_key] = arguments[_key];\n        }\n        return y(()=>{\n            console.debug(...e);\n        });\n    },\n    dir (e, t) {\n        return y(()=>{\n            console.dir(e, t);\n        });\n    },\n    dirxml () {\n        for(var _len = arguments.length, e = new Array(_len), _key = 0; _key < _len; _key++){\n            e[_key] = arguments[_key];\n        }\n        return y(()=>{\n            console.dirxml(...e);\n        });\n    },\n    error () {\n        for(var _len = arguments.length, e = new Array(_len), _key = 0; _key < _len; _key++){\n            e[_key] = arguments[_key];\n        }\n        return y(()=>{\n            console.error(...e);\n        });\n    },\n    group (e) {\n        return e != null && e.collapsed ? y(()=>console.groupCollapsed(e == null ? void 0 : e.label)) : y(()=>console.group(e == null ? void 0 : e.label));\n    },\n    groupEnd: /* @__PURE__ */ y(()=>{\n        console.groupEnd();\n    }),\n    info () {\n        for(var _len = arguments.length, e = new Array(_len), _key = 0; _key < _len; _key++){\n            e[_key] = arguments[_key];\n        }\n        return y(()=>{\n            console.info(...e);\n        });\n    },\n    log () {\n        for(var _len = arguments.length, e = new Array(_len), _key = 0; _key < _len; _key++){\n            e[_key] = arguments[_key];\n        }\n        return y(()=>{\n            console.log(...e);\n        });\n    },\n    table (e, t) {\n        return y(()=>{\n            console.table(e, t);\n        });\n    },\n    time (e) {\n        return y(()=>console.time(e));\n    },\n    timeEnd (e) {\n        return y(()=>console.timeEnd(e));\n    },\n    timeLog (e) {\n        for(var _len = arguments.length, t = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n            t[_key - 1] = arguments[_key];\n        }\n        return y(()=>{\n            console.timeLog(e, ...t);\n        });\n    },\n    trace () {\n        for(var _len = arguments.length, e = new Array(_len), _key = 0; _key < _len; _key++){\n            e[_key] = arguments[_key];\n        }\n        return y(()=>{\n            console.trace(...e);\n        });\n    },\n    warn () {\n        for(var _len = arguments.length, e = new Array(_len), _key = 0; _key < _len; _key++){\n            e[_key] = arguments[_key];\n        }\n        return y(()=>{\n            console.warn(...e);\n        });\n    },\n    unsafe: console\n}, CS = \"effect/Random\", ka = /* @__PURE__ */ Symbol.for(CS), NS = /* @__PURE__ */ It(\"effect/Random\");\nvar ou;\nou = ka;\nclass AS {\n    get next() {\n        return y(()=>this.PRNG.number());\n    }\n    get nextBoolean() {\n        return T(this.next, (t)=>t > 0.5);\n    }\n    get nextInt() {\n        return y(()=>this.PRNG.integer(Number.MAX_SAFE_INTEGER));\n    }\n    nextRange(t, n) {\n        return T(this.next, (r)=>(n - t) * r + t);\n    }\n    nextIntBetween(t, n) {\n        return y(()=>this.PRNG.integer(n - t) + t);\n    }\n    shuffle(t) {\n        return PS(t, (n)=>this.nextIntBetween(0, n));\n    }\n    constructor(t){\n        u(this, \"seed\");\n        u(this, ou, ka);\n        u(this, \"PRNG\");\n        this.seed = t, this.PRNG = new Yd(t);\n    }\n}\nconst PS = (e, t)=>N(()=>f(y(()=>Array.from(e)), m((n)=>{\n            const r = [];\n            for(let s = n.length; s >= 2; s = s - 1)r.push(s);\n            return f(r, Bs((s)=>f(t(s), T((c)=>xS(n, s - 1, c)))), fe(Pl(n)));\n        }))), xS = (e, t, n)=>{\n    const r = e[t];\n    return e[t] = e[n], e[n] = r, e;\n}, jS = (e)=>new AS(k(e)), va = /* @__PURE__ */ Symbol.for(\"effect/Tracer\"), LS = (e)=>({\n        [va]: va,\n        ...e\n    }), ah = /* @__PURE__ */ It(\"effect/Tracer\"), uh = /* @__PURE__ */ It(\"effect/ParentSpan\"), wa = /* @__PURE__ */ function() {\n    const e = \"abcdef0123456789\", t = e.length;\n    return function(n) {\n        let r = \"\";\n        for(let s = 0; s < n; s++)r += e.charAt(Math.floor(Math.random() * t));\n        return r;\n    };\n}();\nclass DS {\n    end(t, n) {\n        this.status = {\n            _tag: \"Ended\",\n            endTime: t,\n            exit: n,\n            startTime: this.status.startTime\n        };\n    }\n    attribute(t, n) {\n        this.attributes.set(t, n);\n    }\n    event(t, n, r) {\n        this.events.push([\n            t,\n            n,\n            r !== null && r !== void 0 ? r : {}\n        ]);\n    }\n    addLinks(t) {\n        this.links.push(...t);\n    }\n    constructor(t, n, r, s, c, i){\n        u(this, \"name\");\n        u(this, \"parent\");\n        u(this, \"context\");\n        u(this, \"startTime\");\n        u(this, \"kind\");\n        u(this, \"_tag\", \"Span\");\n        u(this, \"spanId\");\n        u(this, \"traceId\", \"native\");\n        u(this, \"sampled\", !0);\n        u(this, \"status\");\n        u(this, \"attributes\");\n        u(this, \"events\", []);\n        u(this, \"links\");\n        this.name = t, this.parent = n, this.context = r, this.startTime = c, this.kind = i, this.status = {\n            _tag: \"Started\",\n            startTime: c\n        }, this.attributes = /* @__PURE__ */ new Map(), this.traceId = n._tag === \"Some\" ? n.value.traceId : wa(32), this.spanId = wa(16), this.links = Array.from(s);\n    }\n}\nconst qS = /* @__PURE__ */ LS({\n    span: (e, t, n, r, s, c)=>new DS(e, t, n, r, s, c),\n    context: (e)=>e()\n}), US = /* @__PURE__ */ f(/* @__PURE__ */ Oi(), /* @__PURE__ */ At(Qs, /* @__PURE__ */ Qb()), /* @__PURE__ */ At(oh, TS), /* @__PURE__ */ At(NS, /* @__PURE__ */ jS(/* @__PURE__ */ Math.random())), /* @__PURE__ */ At(mS, /* @__PURE__ */ SS()), /* @__PURE__ */ At(ah, qS)), rs = /* @__PURE__ */ C(/* @__PURE__ */ Symbol.for(\"effect/DefaultServices/currentServices\"), ()=>Kf(US)), zS = (e)=>{\n    const t = Pe(e);\n    return lh((n)=>n.sleep(t));\n}, BS = (e)=>L((t)=>e(t.currentDefaultServices)), lh = (e)=>BS((t)=>e(t.unsafeMap.get(Qs.key))), VS = /* @__PURE__ */ lh((e)=>e.currentTimeMillis), KS = zS, WS = VS;\nfunction JS(e) {\n    return new et(e);\n}\n_c13 = JS;\nfunction HS() {\n    return JS(/* @__PURE__ */ new Map());\n}\n_c14 = HS;\nconst Oa = /* @__PURE__ */ Symbol.for(\"effect/FiberRefs\");\nvar au;\nau = Oa;\nclass et {\n    pipe() {\n        return w(this, arguments);\n    }\n    constructor(t){\n        u(this, \"locals\");\n        u(this, au, Oa);\n        this.locals = t;\n    }\n}\nconst GS = function(e, t, n) {\n    let r = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : !1;\n    const s = e;\n    let c = t, i = n, o = r, a;\n    for(; a === void 0;)if (le(c) && le(i)) {\n        const h = ue(c)[0], d = _t(c), g = ue(i)[0], p = ue(i)[1], _ = _t(i);\n        h.startTimeMillis < g.startTimeMillis ? (i = _, o = !0) : h.startTimeMillis > g.startTimeMillis ? c = d : h.id < g.id ? (i = _, o = !0) : h.id > g.id ? c = d : a = [\n            p,\n            o\n        ];\n    } else a = [\n        s.initial,\n        !0\n    ];\n    return a;\n}, YS = /* @__PURE__ */ l(3, (e, t, n)=>{\n    const r = new Map(e.locals);\n    return n.locals.forEach((s, c)=>{\n        const i = s[0][1];\n        if (!s[0][0][E](t)) {\n            if (!r.has(c)) {\n                if (O(i, c.initial)) return;\n                r.set(c, [\n                    [\n                        t,\n                        c.join(c.initial, i)\n                    ]\n                ]);\n                return;\n            }\n            const o = r.get(c), [a, h] = GS(c, o, s);\n            if (h) {\n                const d = c.diff(a, i), g = o[0][1], p = c.join(g, c.patch(d)(g));\n                if (!O(g, p)) {\n                    let _;\n                    const b = o[0][0];\n                    b[E](t) ? _ = [\n                        [\n                            b,\n                            p\n                        ],\n                        ...o.slice(1)\n                    ] : _ = [\n                        [\n                            t,\n                            p\n                        ],\n                        ...o\n                    ], r.set(c, _);\n                }\n            }\n        }\n    }), new et(r);\n}), QS = /* @__PURE__ */ l(2, (e, t)=>{\n    const n = /* @__PURE__ */ new Map();\n    return fh(e, n, t), new et(n);\n}), fh = (e, t, n)=>{\n    e.locals.forEach((r, s)=>{\n        const c = r[0][1], i = s.patch(s.fork)(c);\n        O(c, i) ? t.set(s, r) : t.set(s, [\n            [\n                n,\n                i\n            ],\n            ...r\n        ]);\n    });\n}, hh = /* @__PURE__ */ l(2, (e, t)=>{\n    const n = new Map(e.locals);\n    return n.delete(t), new et(n);\n}), ZS = /* @__PURE__ */ l(2, (e, t)=>e.locals.has(t) ? I(ue(e.locals.get(t))[1]) : v()), Kn = /* @__PURE__ */ l(2, (e, t)=>f(ZS(e, t), de(()=>t.initial))), Kc = /* @__PURE__ */ l(2, (e, param)=>{\n    let { fiberId: t, fiberRef: n, value: r } = param;\n    if (e.locals.size === 0) return new et(/* @__PURE__ */ new Map([\n        [\n            n,\n            [\n                [\n                    t,\n                    r\n                ]\n            ]\n        ]\n    ]));\n    const s = new Map(e.locals);\n    return Wc(s, t, n, r), new et(s);\n}), Wc = (e, t, n, r)=>{\n    var _e_get;\n    const s = (_e_get = e.get(n)) !== null && _e_get !== void 0 ? _e_get : [];\n    let c;\n    if (le(s)) {\n        const [i, o] = ue(s);\n        if (i[E](t)) {\n            if (O(o, r)) return;\n            c = [\n                [\n                    t,\n                    r\n                ],\n                ...s.slice(1)\n            ];\n        } else c = [\n            [\n                t,\n                r\n            ],\n            ...s\n        ];\n    } else c = [\n        [\n            t,\n            r\n        ]\n    ];\n    e.set(n, c);\n}, XS = /* @__PURE__ */ l(2, (e, param)=>{\n    let { entries: t, forkAs: n } = param;\n    if (e.locals.size === 0) return new et(new Map(t));\n    const r = new Map(e.locals);\n    return n !== void 0 && fh(e, r, n), t.forEach((param)=>{\n        let [s, c] = param;\n        c.length === 1 ? Wc(r, c[0][0], s, c[0][1]) : c.forEach((param)=>{\n            let [i, o] = param;\n            Wc(r, i, s, o);\n        });\n    }), new et(r);\n}), e0 = Kn, t0 = XS, n0 = HS, r0 = ob, s0 = ab, c0 = ub, i0 = lb, o0 = Bf, a0 = Vf, u0 = fb, l0 = hb, f0 = /* @__PURE__ */ f(xn, /* @__PURE__ */ $g((e)=>e.ordinal)), h0 = /* @__PURE__ */ Eg(f0), d0 = (e)=>{\n    switch(e){\n        case \"All\":\n            return r0;\n        case \"Debug\":\n            return a0;\n        case \"Error\":\n            return c0;\n        case \"Fatal\":\n            return s0;\n        case \"Info\":\n            return o0;\n        case \"Trace\":\n            return u0;\n        case \"None\":\n            return l0;\n        case \"Warning\":\n            return i0;\n    }\n}, dh = (e)=>e.replace(/[\\s=\"]/g, \"_\"), g0 = (e)=>(t)=>\"\".concat(dh(t.label), \"=\").concat(e - t.startTime, \"ms\"), m0 = tr, p0 = hg;\nclass ao extends p0 {\n}\nconst ss = /* @__PURE__ */ Symbol.for(\"effect/Readable\"), gh = /* @__PURE__ */ Symbol.for(\"effect/Ref\"), mh = {\n    /* c8 ignore next */ _A: (e)=>e\n};\nvar uu, lu, fu;\nclass _0 extends (fu = ao, lu = gh, uu = ss, fu) {\n    commit() {\n        return this.get;\n    }\n    modify(n) {\n        return y(()=>{\n            const r = Ze(this.ref), [s, c] = n(r);\n            return r !== c && xs(c)(this.ref), s;\n        });\n    }\n    constructor(n){\n        super();\n        u(this, \"ref\");\n        u(this, lu, mh);\n        u(this, uu, ss);\n        u(this, \"get\");\n        this.ref = n, this.get = y(()=>Ze(this.ref));\n    }\n}\nconst ph = (e)=>new _0(Ps(e)), Jc = (e)=>y(()=>ph(e)), mt = (e)=>e.get, cs = /* @__PURE__ */ l(2, (e, t)=>e.modify(()=>[\n            void 0,\n            t\n        ])), y0 = /* @__PURE__ */ l(2, (e, t)=>e.modify(t)), $a = /* @__PURE__ */ l(2, (e, t)=>e.modify((n)=>[\n            void 0,\n            t(n)\n        ])), _h = \"Empty\", yh = \"Add\", bh = \"Remove\", Sh = \"Update\", kh = \"AndThen\", b0 = {\n    _tag: _h\n}, vh = (e, t)=>{\n    const n = new Map(e.locals);\n    let r = b0;\n    for (const [s, c] of t.locals.entries()){\n        const i = ue(c)[1], o = n.get(s);\n        if (o !== void 0) {\n            const a = ue(o)[1];\n            O(a, i) || (r = mc({\n                _tag: Sh,\n                fiberRef: s,\n                patch: s.diff(a, i)\n            })(r));\n        } else r = mc({\n            _tag: yh,\n            fiberRef: s,\n            value: i\n        })(r);\n        n.delete(s);\n    }\n    for (const [s] of n.entries())r = mc({\n        _tag: bh,\n        fiberRef: s\n    })(r);\n    return r;\n}, mc = /* @__PURE__ */ l(2, (e, t)=>({\n        _tag: kh,\n        first: e,\n        second: t\n    })), wh = /* @__PURE__ */ l(3, (e, t, n)=>{\n    let r = n, s = ke(e);\n    for(; le(s);){\n        const c = ue(s), i = _t(s);\n        switch(c._tag){\n            case _h:\n                {\n                    s = i;\n                    break;\n                }\n            case yh:\n                {\n                    r = Kc(r, {\n                        fiberId: t,\n                        fiberRef: c.fiberRef,\n                        value: c.value\n                    }), s = i;\n                    break;\n                }\n            case bh:\n                {\n                    r = hh(r, c.fiberRef), s = i;\n                    break;\n                }\n            case Sh:\n                {\n                    const o = Kn(r, c.fiberRef);\n                    r = Kc(r, {\n                        fiberId: t,\n                        fiberRef: c.fiberRef,\n                        value: c.fiberRef.patch(c.patch)(o)\n                    }), s = i;\n                    break;\n                }\n            case kh:\n                {\n                    s = Kr(c.first)(Kr(c.second)(i));\n                    break;\n                }\n        }\n    }\n    return r;\n}), Oh = \"effect/MetricLabel\", Hc = /* @__PURE__ */ Symbol.for(Oh);\nvar hu;\nclass S0 {\n    [(hu = Hc, F)]() {\n        return this._hash;\n    }\n    [E](t) {\n        return v0(t) && this.key === t.key && this.value === t.value;\n    }\n    pipe() {\n        return w(this, arguments);\n    }\n    constructor(t, n){\n        u(this, \"key\");\n        u(this, \"value\");\n        u(this, hu, Hc);\n        u(this, \"_hash\");\n        this.key = t, this.value = n, this._hash = B(Oh + this.key + this.value);\n    }\n}\nconst k0 = (e, t)=>new S0(e, t), v0 = (e)=>$(e, Hc), w0 = (e)=>T(e, I), O0 = (e)=>{\n    let t, n;\n    return typeof e == \"function\" ? t = e : (t = e.try, n = e.catch), N(()=>{\n        try {\n            return S(ee(t));\n        } catch (r) {\n            return x(n ? ee(()=>n(r)) : new Gs(r, \"An unknown error occurred in Effect.try\"));\n        }\n    });\n}, $0 = (e)=>A0(e, I0, vh), E0 = /* @__PURE__ */ l(3, (e, t, n)=>N(()=>t(e) ? S(e) : x(n(e)))), $h = /* @__PURE__ */ l(2, (e, t)=>Xe(e, {\n        onFailure: (n)=>S(t.onFailure(n)),\n        onSuccess: (n)=>S(t.onSuccess(n))\n    })), I0 = /* @__PURE__ */ L((e)=>S(e.getFiberRefs())), F0 = (e)=>$h(e, {\n        onFailure: Sc,\n        onSuccess: Sc\n    }), Ea = /* @__PURE__ */ l(2, (e, t)=>Se(e, {\n        onFailure: (n)=>xf(()=>t(n)),\n        onSuccess: S\n    })), R0 = (e)=>T(e, (t)=>!t), M0 = (e)=>j0((t, n)=>f(e, wh(t, n))), T0 = (e)=>e.length >= 1 ? xe((t, n)=>{\n        try {\n            e(n).then((r)=>t(j(r)), (r)=>t(Fn(r)));\n        } catch (r) {\n            t(Fn(r));\n        }\n    }) : xe((t)=>{\n        try {\n            e().then((n)=>t(j(n)), (n)=>t(Fn(n)));\n        } catch (n) {\n            t(Fn(n));\n        }\n    }), Eh = /* @__PURE__ */ l(3, (e, t, n)=>bn((r)=>so(e, At(r, t, n)))), C0 = KS, N0 = /* @__PURE__ */ S(/* @__PURE__ */ v()), A0 = /* @__PURE__ */ l(3, (e, t, n)=>m(t, (r)=>m(e, (s)=>T(t, (c)=>[\n                    n(r, c),\n                    s\n                ])))), P0 = /* @__PURE__ */ l(2, (e, t)=>Se(e, {\n        onFailure: (n)=>oe(t(n), Z(n)),\n        onSuccess: S\n    })), x0 = (e)=>{\n    let t, n;\n    typeof e == \"function\" ? t = e : (t = e.try, n = e.catch);\n    const r = (s)=>n ? Us(()=>n(s)) : x(new Gs(s, \"An unknown error occurred in Effect.tryPromise\"));\n    return t.length >= 1 ? xe((s, c)=>{\n        try {\n            t(c).then((i)=>s(j(i)), (i)=>s(r(i)));\n        } catch (i) {\n            s(r(i));\n        }\n    }) : xe((s)=>{\n        try {\n            t().then((c)=>s(j(c)), (c)=>s(r(c)));\n        } catch (c) {\n            s(r(c));\n        }\n    });\n}, j0 = (e)=>L((t)=>(t.setFiberRefs(e(t.id(), t.getFiberRefs())), K)), L0 = /* @__PURE__ */ l(2, (e, t)=>N(()=>t() ? T(e, I) : S(v()))), D0 = (e)=>e == null ? x(new Hs()) : S(e), Ih = \"Sequential\", Fh = \"Parallel\", q0 = \"ParallelN\", Zs = {\n    _tag: Ih\n}, U0 = {\n    _tag: Fh\n}, z0 = (e)=>({\n        _tag: q0,\n        parallelism: e\n    }), B0 = (e)=>e._tag === Ih, V0 = (e)=>e._tag === Fh, Gc = Zs, Yc = U0, Qc = z0, Wn = vh, Jn = wh, Xs = \"effect/FiberStatus\", Et = /* @__PURE__ */ Symbol.for(Xs), is = \"Done\", Ia = \"Running\", Fa = \"Suspended\", K0 = /* @__PURE__ */ B(\"\".concat(Xs, \"-\").concat(is));\nvar du;\nclass W0 {\n    [(du = Et, F)]() {\n        return K0;\n    }\n    [E](t) {\n        return uo(t) && t._tag === is;\n    }\n    constructor(){\n        u(this, du, Et);\n        u(this, \"_tag\", is);\n    }\n}\nvar gu;\nclass J0 {\n    [(gu = Et, F)]() {\n        return f(k(Xs), R(k(this._tag)), R(k(this.runtimeFlags)), q(this));\n    }\n    [E](t) {\n        return uo(t) && t._tag === Ia && this.runtimeFlags === t.runtimeFlags;\n    }\n    constructor(t){\n        u(this, \"runtimeFlags\");\n        u(this, gu, Et);\n        u(this, \"_tag\", Ia);\n        this.runtimeFlags = t;\n    }\n}\nvar mu;\nclass H0 {\n    [(mu = Et, F)]() {\n        return f(k(Xs), R(k(this._tag)), R(k(this.runtimeFlags)), R(k(this.blockingOn)), q(this));\n    }\n    [E](t) {\n        return uo(t) && t._tag === Fa && this.runtimeFlags === t.runtimeFlags && O(this.blockingOn, t.blockingOn);\n    }\n    constructor(t, n){\n        u(this, \"runtimeFlags\");\n        u(this, \"blockingOn\");\n        u(this, mu, Et);\n        u(this, \"_tag\", Fa);\n        this.runtimeFlags = t, this.blockingOn = n;\n    }\n}\nconst G0 = /* @__PURE__ */ new W0(), Y0 = (e)=>new J0(e), Q0 = (e, t)=>new H0(e, t), uo = (e)=>$(e, Et), Z0 = (e)=>e._tag === is, X0 = G0, Rh = Y0, ek = Q0, tk = Z0, nk = /* @__PURE__ */ Symbol.for(\"effect/Micro\"), os = /* @__PURE__ */ Symbol.for(\"effect/Micro/MicroExit\"), Ra = /* @__PURE__ */ Symbol.for(\"effect/Micro/MicroCause\"), rk = {\n    _E: P\n};\nvar pu;\nclass Mh extends globalThis.Error {\n    pipe() {\n        return w(this, arguments);\n    }\n    toString() {\n        return this.stack;\n    }\n    [(pu = Ra, U)]() {\n        return this.stack;\n    }\n    constructor(n, r, s){\n        const c = \"MicroCause.\".concat(n);\n        let i, o, a;\n        if (r instanceof globalThis.Error) {\n            i = \"(\".concat(c, \") \").concat(r.name), o = r.message;\n            const h = o.split(\"\\n\").length;\n            a = r.stack ? \"(\".concat(c, \") \").concat(r.stack.split(\"\\n\").slice(0, h + 3).join(\"\\n\")) : \"\".concat(i, \": \").concat(o);\n        } else i = c, o = Ut(r, 0), a = \"\".concat(i, \": \").concat(o);\n        s.length > 0 && (a += \"\\n    \".concat(s.join(\"\\n    \")));\n        super(o);\n        u(this, \"_tag\");\n        u(this, \"traces\");\n        u(this, pu);\n        this._tag = n, this.traces = s, this[Ra] = rk, this.name = i, this.stack = a;\n    }\n}\nclass sk extends Mh {\n    constructor(n, r = []){\n        super(\"Die\", n, r);\n        u(this, \"defect\");\n        this.defect = n;\n    }\n}\nconst ck = function(e) {\n    let t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];\n    return new sk(e, t);\n};\nclass ik extends Mh {\n    constructor(t = []){\n        super(\"Interrupt\", \"interrupted\", t);\n    }\n}\nconst ok = function() {\n    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];\n    return new ik(e);\n}, ak = (e)=>e._tag === \"Interrupt\", Ma = /* @__PURE__ */ Symbol.for(\"effect/Micro/MicroFiber\"), uk = {\n    _A: P,\n    _E: P\n};\nvar _u;\n_u = Ma;\nclass lk {\n    getRef(t) {\n        return pm(this.context, t);\n    }\n    addObserver(t) {\n        return this._exit ? (t(this._exit), Sc) : (this._observers.push(t), ()=>{\n            const n = this._observers.indexOf(t);\n            n >= 0 && this._observers.splice(n, 1);\n        });\n    }\n    unsafeInterrupt() {\n        this._exit || (this._interrupted = !0, this.interruptible && this.evaluate(mo));\n    }\n    unsafePoll() {\n        return this._exit;\n    }\n    evaluate(t) {\n        if (this._exit) return;\n        if (this._yielded !== void 0) {\n            const s = this._yielded;\n            this._yielded = void 0, s();\n        }\n        const n = this.runLoop(t);\n        if (n === Fr) return;\n        const r = Ta.interruptChildren && Ta.interruptChildren(this);\n        if (r !== void 0) return this.evaluate(us(r, ()=>n));\n        this._exit = n;\n        for(let s = 0; s < this._observers.length; s++)this._observers[s](n);\n        this._observers.length = 0;\n    }\n    runLoop(t) {\n        let n = !1, r = t;\n        this.currentOpCount = 0;\n        try {\n            for(;;){\n                if (this.currentOpCount++, !n && this.getRef(po).shouldYield(this)) {\n                    n = !0;\n                    const s = r;\n                    r = us(mk, ()=>s);\n                }\n                if (r = r[Zc](this), r === Fr) {\n                    const s = this._yielded;\n                    return os in s ? (this._yielded = void 0, s) : Fr;\n                }\n            }\n        } catch (s) {\n            return $(r, Zc) ? Xc(s) : Xc(\"MicroFiber.runLoop: Not a valid effect: \".concat(String(r)));\n        }\n    }\n    getCont(t) {\n        for(;;){\n            const n = this._stack.pop();\n            if (!n) return;\n            const r = n[as] && n[as](this);\n            if (r) return {\n                [t]: r\n            };\n            if (n[t]) return n;\n        }\n    }\n    yieldWith(t) {\n        return this._yielded = t, Fr;\n    }\n    children() {\n        var _this__children;\n        return (_this__children = this._children) !== null && _this__children !== void 0 ? _this__children : this._children = /* @__PURE__ */ new Set();\n    }\n    constructor(t, n = !0){\n        u(this, \"context\");\n        u(this, \"interruptible\");\n        u(this, _u);\n        u(this, \"_stack\", []);\n        u(this, \"_observers\", []);\n        u(this, \"_exit\");\n        u(this, \"_children\");\n        u(this, \"currentOpCount\", 0);\n        u(this, \"_interrupted\", !1);\n        // cancel the yielded operation, or for the yielded exit value\n        u(this, \"_yielded\");\n        this.context = t, this.interruptible = n, this[Ma] = uk;\n    }\n}\nconst Ta = /* @__PURE__ */ C(\"effect/Micro/fiberMiddleware\", ()=>({\n        interruptChildren: void 0\n    })), Th = /* @__PURE__ */ Symbol.for(\"effect/Micro/identifier\"), Y = /* @__PURE__ */ Symbol.for(\"effect/Micro/args\"), Zc = /* @__PURE__ */ Symbol.for(\"effect/Micro/evaluate\"), sn = /* @__PURE__ */ Symbol.for(\"effect/Micro/successCont\"), qt = /* @__PURE__ */ Symbol.for(\"effect/Micro/failureCont\"), as = /* @__PURE__ */ Symbol.for(\"effect/Micro/ensureCont\"), Fr = /* @__PURE__ */ Symbol.for(\"effect/Micro/Yield\"), fk = {\n    _A: P,\n    _E: P,\n    _R: P\n}, hk = {\n    ...m0,\n    _op: \"Micro\",\n    [nk]: fk,\n    pipe () {\n        return w(this, arguments);\n    },\n    [Symbol.iterator] () {\n        return new rl(new Xn(this));\n    },\n    toJSON () {\n        return {\n            _id: \"Micro\",\n            op: this[Th],\n            ...Y in this ? {\n                args: this[Y]\n            } : void 0\n        };\n    },\n    toString () {\n        return Q(this);\n    },\n    [U] () {\n        return Q(this);\n    }\n};\nfunction dk(e) {\n    return Xc(\"Micro.evaluate: Not implemented\");\n}\nconst ec = (e)=>{\n    var _e_eval;\n    return {\n        ...hk,\n        [Th]: e.op,\n        [Zc]: (_e_eval = e.eval) !== null && _e_eval !== void 0 ? _e_eval : dk,\n        [sn]: e.contA,\n        [qt]: e.contE,\n        [as]: e.ensure\n    };\n}, lo = (e)=>{\n    const t = ec(e);\n    return function() {\n        const n = Object.create(t);\n        return n[Y] = e.single === !1 ? arguments : arguments[0], n;\n    };\n}, Ch = (e)=>{\n    const t = {\n        ...ec(e),\n        [os]: os,\n        _tag: e.op,\n        get [e.prop] () {\n            return this[Y];\n        },\n        toJSON () {\n            return {\n                _id: \"MicroExit\",\n                _tag: e.op,\n                [e.prop]: this[Y]\n            };\n        },\n        [E] (n) {\n            return yk(n) && n._tag === e.op && O(this[Y], n[Y]);\n        },\n        [F] () {\n            return q(this, R(B(e.op))(k(this[Y])));\n        }\n    };\n    return function(n) {\n        const r = Object.create(t);\n        return r[Y] = n, r[sn] = void 0, r[qt] = void 0, r[as] = void 0, r;\n    };\n}, fo = /* @__PURE__ */ Ch({\n    op: \"Success\",\n    prop: \"value\",\n    eval (e) {\n        const t = e.getCont(sn);\n        return t ? t[sn](this[Y], e) : e.yieldWith(this);\n    }\n}), Nh = /* @__PURE__ */ Ch({\n    op: \"Failure\",\n    prop: \"cause\",\n    eval (e) {\n        let t = e.getCont(qt);\n        for(; ak(this[Y]) && t && e.interruptible;)t = e.getCont(qt);\n        return t ? t[qt](this[Y], e) : e.yieldWith(this);\n    }\n}), gk = /* @__PURE__ */ lo({\n    op: \"Yield\",\n    eval (e) {\n        let t = !1;\n        var _this_Y;\n        return e.getRef(po).scheduleTask(()=>{\n            t || e.evaluate(bk);\n        }, (_this_Y = this[Y]) !== null && _this_Y !== void 0 ? _this_Y : 0), e.yieldWith(()=>{\n            t = !0;\n        });\n    }\n}), mk = /* @__PURE__ */ gk(0), pk = /* @__PURE__ */ fo(void 0), ho = /* @__PURE__ */ lo({\n    op: \"WithMicroFiber\",\n    eval (e) {\n        return this[Y](e);\n    }\n}), us = /* @__PURE__ */ l(2, (e, t)=>{\n    const n = Object.create(_k);\n    return n[Y] = e, n[sn] = t, n;\n}), _k = /* @__PURE__ */ ec({\n    op: \"OnSuccess\",\n    eval (e) {\n        return e._stack.push(this), this[Y];\n    }\n}), yk = (e)=>$(e, os), Ah = fo, go = Nh, mo = /* @__PURE__ */ go(/* @__PURE__ */ ok()), Xc = (e)=>go(ck(e)), bk = /* @__PURE__ */ Ah(void 0), Sk = \"setImmediate\" in globalThis ? globalThis.setImmediate : (e)=>setTimeout(e, 0);\nclass Ph {\n    /**\n   * @since 3.5.9\n   */ scheduleTask(t, n) {\n        this.tasks.push(t), this.running || (this.running = !0, Sk(this.afterScheduled));\n    }\n    /**\n   * @since 3.5.9\n   */ runTasks() {\n        const t = this.tasks;\n        this.tasks = [];\n        for(let n = 0, r = t.length; n < r; n++)t[n]();\n    }\n    /**\n   * @since 3.5.9\n   */ shouldYield(t) {\n        return t.currentOpCount >= t.getRef(wk);\n    }\n    /**\n   * @since 3.5.9\n   */ flush() {\n        for(; this.tasks.length > 0;)this.runTasks();\n    }\n    constructor(){\n        u(this, \"tasks\", []);\n        u(this, \"running\", !1);\n        /**\n     * @since 3.5.9\n     */ u(this, \"afterScheduled\", ()=>{\n            this.running = !1, this.runTasks();\n        });\n    }\n}\nconst kk = /* @__PURE__ */ l(2, (e, t)=>ho((n)=>{\n        const r = n.context;\n        return n.context = t(r), Ek(e, ()=>(n.context = r, pk));\n    })), vk = /* @__PURE__ */ l(2, (e, t)=>kk(e, fn(t)));\nclass wk extends /* @__PURE__ */ $i()(\"effect/Micro/currentMaxOpsBeforeYield\", {\n    defaultValue: ()=>2048\n}) {\n}\nclass po extends /* @__PURE__ */ $i()(\"effect/Micro/currentScheduler\", {\n    defaultValue: ()=>new Ph()\n}) {\n}\nconst Ok = /* @__PURE__ */ l(2, (e, t)=>{\n    const n = Object.create($k);\n    return n[Y] = e, n[sn] = t.onSuccess, n[qt] = t.onFailure, n;\n}), $k = /* @__PURE__ */ ec({\n    op: \"OnSuccessAndFailure\",\n    eval (e) {\n        return e._stack.push(this), this[Y];\n    }\n}), Ek = /* @__PURE__ */ l(2, (e, t)=>Fk((n)=>Ok(n(e), {\n            onFailure: (r)=>us(t(go(r)), ()=>Nh(r)),\n            onSuccess: (r)=>us(t(Ah(r)), ()=>fo(r))\n        }))), xh = /* @__PURE__ */ lo({\n    op: \"SetInterruptible\",\n    ensure (e) {\n        if (e.interruptible = this[Y], e._interrupted && e.interruptible) return ()=>mo;\n    }\n}), Ik = (e)=>ho((t)=>t.interruptible ? e : (t.interruptible = !0, t._stack.push(xh(!1)), t._interrupted ? mo : e)), Fk = (e)=>ho((t)=>t.interruptible ? (t.interruptible = !1, t._stack.push(xh(!0)), e(Ik)) : e(P)), Rk = (e, t)=>{\n    const n = new lk(po.context(new Ph()));\n    return n.evaluate(e), n;\n};\nclass jh {\n    /**\n   * @since 2.0.0\n   */ scheduleTask(t, n) {\n        const r = this.buckets.length;\n        let s, c = 0;\n        for(; c < r && this.buckets[c][0] <= n; c++)s = this.buckets[c];\n        s && s[0] === n ? s[1].push(t) : c === r ? this.buckets.push([\n            n,\n            [\n                t\n            ]\n        ]) : this.buckets.splice(c, 0, [\n            n,\n            [\n                t\n            ]\n        ]);\n    }\n    constructor(){\n        /**\n     * @since 2.0.0\n     */ u(this, \"buckets\", []);\n    }\n}\nclass Mk {\n    /**\n   * @since 2.0.0\n   */ starveInternal(t) {\n        const n = this.tasks.buckets;\n        this.tasks.buckets = [];\n        for (const [r, s] of n)for(let c = 0; c < s.length; c++)s[c]();\n        this.tasks.buckets.length === 0 ? this.running = !1 : this.starve(t);\n    }\n    /**\n   * @since 2.0.0\n   */ starve() {\n        let t = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 0;\n        t >= this.maxNextTickBeforeTimer ? setTimeout(()=>this.starveInternal(0), 0) : Promise.resolve(void 0).then(()=>this.starveInternal(t + 1));\n    }\n    /**\n   * @since 2.0.0\n   */ shouldYield(t) {\n        return t.currentOpCount > t.getFiberRef(Wf) ? t.getFiberRef(dr) : !1;\n    }\n    /**\n   * @since 2.0.0\n   */ scheduleTask(t, n) {\n        this.tasks.scheduleTask(t, n), this.running || (this.running = !0, this.starve());\n    }\n    constructor(t){\n        u(this, \"maxNextTickBeforeTimer\");\n        /**\n     * @since 2.0.0\n     */ u(this, \"running\", !1);\n        /**\n     * @since 2.0.0\n     */ u(this, \"tasks\", /* @__PURE__ */ new jh());\n        this.maxNextTickBeforeTimer = t;\n    }\n}\nconst Lh = /* @__PURE__ */ C(/* @__PURE__ */ Symbol.for(\"effect/Scheduler/defaultScheduler\"), ()=>new Mk(2048));\nclass Tk {\n    /**\n   * @since 2.0.0\n   */ scheduleTask(t, n) {\n        this.deferred ? Lh.scheduleTask(t, n) : this.tasks.scheduleTask(t, n);\n    }\n    /**\n   * @since 2.0.0\n   */ shouldYield(t) {\n        return t.currentOpCount > t.getFiberRef(Wf) ? t.getFiberRef(dr) : !1;\n    }\n    /**\n   * @since 2.0.0\n   */ flush() {\n        for(; this.tasks.buckets.length > 0;){\n            const t = this.tasks.buckets;\n            this.tasks.buckets = [];\n            for (const [n, r] of t)for(let s = 0; s < r.length; s++)r[s]();\n        }\n        this.deferred = !0;\n    }\n    constructor(){\n        /**\n     * @since 2.0.0\n     */ u(this, \"tasks\", /* @__PURE__ */ new jh());\n        /**\n     * @since 2.0.0\n     */ u(this, \"deferred\", !1);\n    }\n}\nconst _o = /* @__PURE__ */ C(/* @__PURE__ */ Symbol.for(\"effect/FiberRef/currentScheduler\"), ()=>ge(Lh)), Dh = /* @__PURE__ */ C(/* @__PURE__ */ Symbol.for(\"effect/FiberRef/currentRequestMap\"), ()=>ge(/* @__PURE__ */ new Map())), Ca = (e, t, n, r)=>{\n    switch(e){\n        case void 0:\n            return t();\n        case \"unbounded\":\n            return n();\n        case \"inherit\":\n            return Ws($b, (s)=>s === \"unbounded\" ? n() : s > 1 ? r(s) : t());\n        default:\n            return e > 1 ? r(e) : t();\n    }\n}, yo = \"InterruptSignal\", bo = \"Stateful\", So = \"Resume\", ko = \"YieldNow\", pc = (e)=>({\n        _tag: yo,\n        cause: e\n    }), jr = (e)=>({\n        _tag: bo,\n        onFiber: e\n    }), Ct = (e)=>({\n        _tag: So,\n        effect: e\n    }), Ck = ()=>({\n        _tag: ko\n    }), Nk = \"effect/FiberScope\", ls = /* @__PURE__ */ Symbol.for(Nk);\nvar yu;\nyu = ls;\nclass Ak {\n    add(t, n) {\n        this.roots.add(n), n.addObserver(()=>{\n            this.roots.delete(n);\n        });\n    }\n    constructor(){\n        u(this, yu, ls);\n        u(this, \"fiberId\", Ht);\n        u(this, \"roots\", /* @__PURE__ */ new Set());\n    }\n}\nvar bu;\nbu = ls;\nclass Pk {\n    add(t, n) {\n        this.parent.tell(jr((r)=>{\n            r.addChild(n), n.addObserver(()=>{\n                r.removeChild(n);\n            });\n        }));\n    }\n    constructor(t, n){\n        u(this, \"fiberId\");\n        u(this, \"parent\");\n        u(this, bu, ls);\n        this.fiberId = t, this.parent = n;\n    }\n}\nconst xk = (e)=>new Pk(e.id(), e), tc = /* @__PURE__ */ C(/* @__PURE__ */ Symbol.for(\"effect/FiberScope/Global\"), ()=>new Ak()), jk = \"effect/Fiber\", Lk = /* @__PURE__ */ Symbol.for(jk), Dk = {\n    /* c8 ignore next */ _E: (e)=>e,\n    /* c8 ignore next */ _A: (e)=>e\n}, qk = \"effect/Fiber\", Uk = /* @__PURE__ */ Symbol.for(qk), xE = (e)=>e.await, jE = (e)=>e.inheritAll, fs = (e)=>Zi(zs(e.await), e.inheritAll);\n({\n    ...nr\n});\nconst ct = \"effect/FiberCurrent\", zk = \"effect/Logger\", Bk = /* @__PURE__ */ Symbol.for(zk), Vk = {\n    /* c8 ignore next */ _Message: (e)=>e,\n    /* c8 ignore next */ _Output: (e)=>e\n}, vo = (e)=>({\n        [Bk]: Vk,\n        log: e,\n        pipe () {\n            return w(this, arguments);\n        }\n    }), Kk = /^[^\\s\"=]*$/, Wk = (e, t)=>(param)=>{\n        let { annotations: n, cause: r, date: s, fiberId: c, logLevel: i, message: o, spans: a } = param;\n        const h = (b)=>b.match(Kk) ? b : e(b), d = (b, M)=>\"\".concat(dh(b), \"=\").concat(h(M)), g = (b, M)=>\" \" + d(b, M);\n        let p = d(\"timestamp\", s.toISOString());\n        p += g(\"level\", i.label), p += g(\"fiber\", nf(c));\n        const _ = Pg(o);\n        for(let b = 0; b < _.length; b++)p += g(\"message\", Ut(_[b], t));\n        Oy(r) || (p += g(\"cause\", ar(r, {\n            renderErrorCause: !0\n        })));\n        for (const b of a)p += \" \" + g0(s.getTime())(b);\n        for (const [b, M] of n)p += g(b, Ut(M, t));\n        return p;\n    }, Jk = (e)=>'\"'.concat(e.replace(/\\\\([\\s\\S])|(\")/g, \"\\\\$1$2\"), '\"'), Hk = /* @__PURE__ */ vo(/* @__PURE__ */ Wk(Jk)), Gk = typeof process == \"object\" && process !== null && typeof process.stdout == \"object\" && process.stdout !== null;\nGk && process.stdout.isTTY;\nconst qh = \"effect/MetricBoundaries\", ei = /* @__PURE__ */ Symbol.for(qh);\nvar Su;\nclass Yk {\n    [(Su = ei, F)]() {\n        return this._hash;\n    }\n    [E](t) {\n        return Qk(t) && O(this.values, t.values);\n    }\n    pipe() {\n        return w(this, arguments);\n    }\n    constructor(t){\n        u(this, \"values\");\n        u(this, Su, ei);\n        u(this, \"_hash\");\n        this.values = t, this._hash = f(B(qh), R(er(this.values)));\n    }\n}\nconst Qk = (e)=>$(e, ei), Zk = (e)=>{\n    const t = f(e, Sl(ie(Number.POSITIVE_INFINITY)), tm);\n    return new Yk(t);\n}, Xk = (e)=>f(Ag(e.count - 1, (t)=>e.start * Math.pow(e.factor, t)), hn, Zk), ev = \"effect/MetricKeyType\", Uh = /* @__PURE__ */ Symbol.for(ev), zh = \"effect/MetricKeyType/Counter\", ti = /* @__PURE__ */ Symbol.for(zh), tv = \"effect/MetricKeyType/Frequency\", nv = /* @__PURE__ */ Symbol.for(tv), rv = \"effect/MetricKeyType/Gauge\", sv = /* @__PURE__ */ Symbol.for(rv), Bh = \"effect/MetricKeyType/Histogram\", ni = /* @__PURE__ */ Symbol.for(Bh), cv = \"effect/MetricKeyType/Summary\", iv = /* @__PURE__ */ Symbol.for(cv), Vh = {\n    /* c8 ignore next */ _In: (e)=>e,\n    /* c8 ignore next */ _Out: (e)=>e\n};\nvar ku, vu;\nclass ov {\n    [(vu = Uh, ku = ti, F)]() {\n        return this._hash;\n    }\n    [E](t) {\n        return Kh(t);\n    }\n    pipe() {\n        return w(this, arguments);\n    }\n    constructor(t, n){\n        u(this, \"incremental\");\n        u(this, \"bigint\");\n        u(this, vu, Vh);\n        u(this, ku, ti);\n        u(this, \"_hash\");\n        this.incremental = t, this.bigint = n, this._hash = B(zh);\n    }\n}\nvar wu, Ou;\nclass av {\n    [(Ou = Uh, wu = ni, F)]() {\n        return this._hash;\n    }\n    [E](t) {\n        return Wh(t) && O(this.boundaries, t.boundaries);\n    }\n    pipe() {\n        return w(this, arguments);\n    }\n    constructor(t){\n        u(this, \"boundaries\");\n        u(this, Ou, Vh);\n        u(this, wu, ni);\n        u(this, \"_hash\");\n        this.boundaries = t, this._hash = f(B(Bh), R(k(this.boundaries)));\n    }\n}\nconst uv = (e)=>{\n    var _ref, _ref1;\n    return new ov((_ref = e == null ? void 0 : e.incremental) !== null && _ref !== void 0 ? _ref : !1, (_ref1 = e == null ? void 0 : e.bigint) !== null && _ref1 !== void 0 ? _ref1 : !1);\n}, lv = (e)=>new av(e), Kh = (e)=>$(e, ti), fv = (e)=>$(e, nv), hv = (e)=>$(e, sv), Wh = (e)=>$(e, ni), dv = (e)=>$(e, iv), gv = \"effect/MetricKey\", Jh = /* @__PURE__ */ Symbol.for(gv), mv = {\n    /* c8 ignore next */ _Type: (e)=>e\n}, pv = /* @__PURE__ */ vi(O);\nvar $u;\nclass wo {\n    [($u = Jh, F)]() {\n        return this._hash;\n    }\n    [E](t) {\n        return _v(t) && this.name === t.name && O(this.keyType, t.keyType) && O(this.description, t.description) && pv(this.tags, t.tags);\n    }\n    pipe() {\n        return w(this, arguments);\n    }\n    constructor(t, n, r, s = []){\n        u(this, \"name\");\n        u(this, \"keyType\");\n        u(this, \"description\");\n        u(this, \"tags\");\n        u(this, $u, mv);\n        u(this, \"_hash\");\n        this.name = t, this.keyType = n, this.description = r, this.tags = s, this._hash = f(B(this.name + this.description), R(k(this.keyType)), R(er(this.tags)));\n    }\n}\nconst _v = (e)=>$(e, Jh), yv = (e, t)=>new wo(e, uv(t), Es(t == null ? void 0 : t.description)), bv = (e, t, n)=>new wo(e, lv(t), Es(n)), Sv = /* @__PURE__ */ l(2, (e, t)=>t.length === 0 ? e : new wo(e.name, e.keyType, e.description, Ar(e.tags, t))), kv = \"effect/MetricState\", gr = /* @__PURE__ */ Symbol.for(kv), Hh = \"effect/MetricState/Counter\", ri = /* @__PURE__ */ Symbol.for(Hh), Gh = \"effect/MetricState/Frequency\", si = /* @__PURE__ */ Symbol.for(Gh), Yh = \"effect/MetricState/Gauge\", ci = /* @__PURE__ */ Symbol.for(Yh), Qh = \"effect/MetricState/Histogram\", ii = /* @__PURE__ */ Symbol.for(Qh), Zh = \"effect/MetricState/Summary\", oi = /* @__PURE__ */ Symbol.for(Zh), mr = {\n    /* c8 ignore next */ _A: (e)=>e\n};\nvar Eu, Iu;\nclass vv {\n    [(Iu = gr, Eu = ri, F)]() {\n        return f(k(Hh), R(k(this.count)), q(this));\n    }\n    [E](t) {\n        return Nv(t) && this.count === t.count;\n    }\n    pipe() {\n        return w(this, arguments);\n    }\n    constructor(t){\n        u(this, \"count\");\n        u(this, Iu, mr);\n        u(this, Eu, ri);\n        this.count = t;\n    }\n}\nconst wv = /* @__PURE__ */ vi(O);\nvar Fu, Ru;\nclass Ov {\n    [(Ru = gr, Fu = si, F)]() {\n        return f(B(Gh), R(er(z(this.occurrences.entries()))), q(this));\n    }\n    [E](t) {\n        return Av(t) && wv(z(this.occurrences.entries()), z(t.occurrences.entries()));\n    }\n    pipe() {\n        return w(this, arguments);\n    }\n    constructor(t){\n        u(this, \"occurrences\");\n        u(this, Ru, mr);\n        u(this, Fu, si);\n        u(this, \"_hash\");\n        this.occurrences = t;\n    }\n}\nvar Mu, Tu;\nclass $v {\n    [(Tu = gr, Mu = ci, F)]() {\n        return f(k(Yh), R(k(this.value)), q(this));\n    }\n    [E](t) {\n        return Pv(t) && this.value === t.value;\n    }\n    pipe() {\n        return w(this, arguments);\n    }\n    constructor(t){\n        u(this, \"value\");\n        u(this, Tu, mr);\n        u(this, Mu, ci);\n        this.value = t;\n    }\n}\nvar Cu, Nu;\nclass Ev {\n    [(Nu = gr, Cu = ii, F)]() {\n        return f(k(Qh), R(k(this.buckets)), R(k(this.count)), R(k(this.min)), R(k(this.max)), R(k(this.sum)), q(this));\n    }\n    [E](t) {\n        return xv(t) && O(this.buckets, t.buckets) && this.count === t.count && this.min === t.min && this.max === t.max && this.sum === t.sum;\n    }\n    pipe() {\n        return w(this, arguments);\n    }\n    constructor(t, n, r, s, c){\n        u(this, \"buckets\");\n        u(this, \"count\");\n        u(this, \"min\");\n        u(this, \"max\");\n        u(this, \"sum\");\n        u(this, Nu, mr);\n        u(this, Cu, ii);\n        this.buckets = t, this.count = n, this.min = r, this.max = s, this.sum = c;\n    }\n}\nvar Au, Pu;\nclass Iv {\n    [(Pu = gr, Au = oi, F)]() {\n        return f(k(Zh), R(k(this.error)), R(k(this.quantiles)), R(k(this.count)), R(k(this.min)), R(k(this.max)), R(k(this.sum)), q(this));\n    }\n    [E](t) {\n        return jv(t) && this.error === t.error && O(this.quantiles, t.quantiles) && this.count === t.count && this.min === t.min && this.max === t.max && this.sum === t.sum;\n    }\n    pipe() {\n        return w(this, arguments);\n    }\n    constructor(t, n, r, s, c, i){\n        u(this, \"error\");\n        u(this, \"quantiles\");\n        u(this, \"count\");\n        u(this, \"min\");\n        u(this, \"max\");\n        u(this, \"sum\");\n        u(this, Pu, mr);\n        u(this, Au, oi);\n        this.error = t, this.quantiles = n, this.count = r, this.min = s, this.max = c, this.sum = i;\n    }\n}\nconst Fv = (e)=>new vv(e), Rv = (e)=>new Ov(e), Mv = (e)=>new $v(e), Tv = (e)=>new Ev(e.buckets, e.count, e.min, e.max, e.sum), Cv = (e)=>new Iv(e.error, e.quantiles, e.count, e.min, e.max, e.sum), Nv = (e)=>$(e, ri), Av = (e)=>$(e, si), Pv = (e)=>$(e, ci), xv = (e)=>$(e, ii), jv = (e)=>$(e, oi), Lv = \"effect/MetricHook\", Dv = /* @__PURE__ */ Symbol.for(Lv), qv = {\n    /* c8 ignore next */ _In: (e)=>e,\n    /* c8 ignore next */ _Out: (e)=>e\n}, pr = (e)=>({\n        [Dv]: qv,\n        pipe () {\n            return w(this, arguments);\n        },\n        ...e\n    }), Na = /* @__PURE__ */ BigInt(0), Uv = (e)=>{\n    let t = e.keyType.bigint ? Na : 0;\n    const n = e.keyType.incremental ? e.keyType.bigint ? (s)=>s >= Na : (s)=>s >= 0 : (s)=>!0, r = (s)=>{\n        n(s) && (t = t + s);\n    };\n    return pr({\n        get: ()=>Fv(t),\n        update: r,\n        modify: r\n    });\n}, zv = (e)=>{\n    const t = /* @__PURE__ */ new Map();\n    for (const r of e.keyType.preregisteredWords)t.set(r, 0);\n    const n = (r)=>{\n        var _t_get;\n        const s = (_t_get = t.get(r)) !== null && _t_get !== void 0 ? _t_get : 0;\n        t.set(r, s + 1);\n    };\n    return pr({\n        get: ()=>Rv(t),\n        update: n,\n        modify: n\n    });\n}, Bv = (e, t)=>{\n    let n = t;\n    return pr({\n        get: ()=>Mv(n),\n        update: (r)=>{\n            n = r;\n        },\n        modify: (r)=>{\n            n = n + r;\n        }\n    });\n}, Vv = (e)=>{\n    const t = e.keyType.boundaries.values, n = t.length, r = new Uint32Array(n + 1), s = new Float32Array(n);\n    let c = 0, i = 0, o = Number.MAX_VALUE, a = Number.MIN_VALUE;\n    f(t, Wr(xn), ft((g, p)=>{\n        s[p] = g;\n    }));\n    const h = (g)=>{\n        let p = 0, _ = n;\n        for(; p !== _;){\n            const b = Math.floor(p + (_ - p) / 2), M = s[b];\n            g <= M ? _ = b : p = b, _ === p + 1 && (g <= s[p] ? _ = p : p = _);\n        }\n        r[p] = r[p] + 1, c = c + 1, i = i + g, g < o && (o = g), g > a && (a = g);\n    }, d = ()=>{\n        const g = Si(n);\n        let p = 0;\n        for(let _ = 0; _ < n; _++){\n            const b = s[_], M = r[_];\n            p = p + M, g[_] = [\n                b,\n                p\n            ];\n        }\n        return g;\n    };\n    return pr({\n        get: ()=>Tv({\n                buckets: d(),\n                count: c,\n                min: o,\n                max: a,\n                sum: i\n            }),\n        update: h,\n        modify: h\n    });\n}, Kv = (e)=>{\n    const { error: t, maxAge: n, maxSize: r, quantiles: s } = e.keyType, c = f(s, Wr(xn)), i = Si(r);\n    let o = 0, a = 0, h = 0, d = Number.MAX_VALUE, g = Number.MIN_VALUE;\n    const p = (b)=>{\n        const M = [];\n        let D = 0;\n        for(; D !== r - 1;){\n            const X = i[D];\n            if (X != null) {\n                const [H, Ie] = X, De = Hr(b - H);\n                Hm(De, ql) && Jm(De, n) && M.push(Ie);\n            }\n            D = D + 1;\n        }\n        return Wv(t, c, Wr(M, xn));\n    }, _ = (b, M)=>{\n        if (r > 0) {\n            o = o + 1;\n            const D = o % r;\n            i[D] = [\n                M,\n                b\n            ];\n        }\n        a = a + 1, h = h + b, b < d && (d = b), b > g && (g = b);\n    };\n    return pr({\n        get: ()=>Cv({\n                error: t,\n                quantiles: p(Date.now()),\n                count: a,\n                min: d,\n                max: g,\n                sum: h\n            }),\n        update: (param)=>{\n            let [b, M] = param;\n            return _(b, M);\n        },\n        modify: (param)=>{\n            let [b, M] = param;\n            return _(b, M);\n        }\n    });\n}, Wv = (e, t, n)=>{\n    const r = n.length;\n    if (!le(t)) return Bt();\n    const s = t[0], c = t.slice(1), i = Aa(e, r, v(), 0, s, n), o = ke(i);\n    return c.forEach((a)=>{\n        o.push(Aa(e, r, i.value, i.consumed, a, i.rest));\n    }), ft(o, (a)=>[\n            a.quantile,\n            a.value\n        ]);\n}, Aa = (e, t, n, r, s, c)=>{\n    let i = e, o = t, a = n, h = r, d = s, g = c, p = e, _ = t, b = n, M = r, D = s, X = c;\n    for(;;){\n        if (!le(g)) return {\n            quantile: d,\n            value: v(),\n            consumed: h,\n            rest: []\n        };\n        if (d === 1) return {\n            quantile: d,\n            value: I(wl(g)),\n            consumed: h + g.length,\n            rest: []\n        };\n        const H = Vg(g, (Mt)=>Mt <= g[0]), Ie = d * o, De = i / 2 * Ie, qe = h + H[0].length, kr = Math.abs(qe - Ie);\n        if (qe < Ie - De) {\n            p = i, _ = o, b = Tn(g), M = qe, D = d, X = H[1], i = p, o = _, a = b, h = M, d = D, g = X;\n            continue;\n        }\n        if (qe > Ie + De) return {\n            quantile: d,\n            value: a,\n            consumed: h,\n            rest: g\n        };\n        switch(a._tag){\n            case \"None\":\n                {\n                    p = i, _ = o, b = Tn(g), M = qe, D = d, X = H[1], i = p, o = _, a = b, h = M, d = D, g = X;\n                    continue;\n                }\n            case \"Some\":\n                {\n                    const Mt = Math.abs(Ie - a.value);\n                    if (kr < Mt) {\n                        p = i, _ = o, b = Tn(g), M = qe, D = d, X = H[1], i = p, o = _, a = b, h = M, d = D, g = X;\n                        continue;\n                    }\n                    return {\n                        quantile: d,\n                        value: I(a.value),\n                        consumed: h,\n                        rest: g\n                    };\n                }\n        }\n    }\n    throw new Error(\"BUG: MetricHook.resolveQuantiles - please report an issue at https://github.com/Effect-TS/effect/issues\");\n}, Jv = \"effect/MetricPair\", Hv = /* @__PURE__ */ Symbol.for(Jv), Gv = {\n    /* c8 ignore next */ _Type: (e)=>e\n}, Yv = (e, t)=>({\n        [Hv]: Gv,\n        metricKey: e,\n        metricState: t,\n        pipe () {\n            return w(this, arguments);\n        }\n    }), Qv = \"effect/MetricRegistry\", Pa = /* @__PURE__ */ Symbol.for(Qv);\nvar xu;\nxu = Pa;\nclass Zv {\n    snapshot() {\n        const t = [];\n        for (const [n, r] of this.map)t.push(Yv(n, r.get()));\n        return t;\n    }\n    get(t) {\n        const n = f(this.map, ot(t), it);\n        if (n == null) {\n            if (Kh(t.keyType)) return this.getCounter(t);\n            if (hv(t.keyType)) return this.getGauge(t);\n            if (fv(t.keyType)) return this.getFrequency(t);\n            if (Wh(t.keyType)) return this.getHistogram(t);\n            if (dv(t.keyType)) return this.getSummary(t);\n            throw new Error(\"BUG: MetricRegistry.get - unknown MetricKeyType - please report an issue at https://github.com/Effect-TS/effect/issues\");\n        } else return n;\n    }\n    getCounter(t) {\n        let n = f(this.map, ot(t), it);\n        if (n == null) {\n            const r = Uv(t);\n            f(this.map, On(t)) || f(this.map, $n(t, r)), n = r;\n        }\n        return n;\n    }\n    getFrequency(t) {\n        let n = f(this.map, ot(t), it);\n        if (n == null) {\n            const r = zv(t);\n            f(this.map, On(t)) || f(this.map, $n(t, r)), n = r;\n        }\n        return n;\n    }\n    getGauge(t) {\n        let n = f(this.map, ot(t), it);\n        if (n == null) {\n            const r = Bv(t, t.keyType.bigint ? BigInt(0) : 0);\n            f(this.map, On(t)) || f(this.map, $n(t, r)), n = r;\n        }\n        return n;\n    }\n    getHistogram(t) {\n        let n = f(this.map, ot(t), it);\n        if (n == null) {\n            const r = Vv(t);\n            f(this.map, On(t)) || f(this.map, $n(t, r)), n = r;\n        }\n        return n;\n    }\n    getSummary(t) {\n        let n = f(this.map, ot(t), it);\n        if (n == null) {\n            const r = Kv(t);\n            f(this.map, On(t)) || f(this.map, $n(t, r)), n = r;\n        }\n        return n;\n    }\n    constructor(){\n        u(this, xu, Pa);\n        u(this, \"map\", /* @__PURE__ */ Vb());\n    }\n}\nconst Xv = ()=>new Zv(), ew = \"effect/Metric\", tw = /* @__PURE__ */ Symbol.for(ew), nw = {\n    /* c8 ignore next */ _Type: (e)=>e,\n    /* c8 ignore next */ _In: (e)=>e,\n    /* c8 ignore next */ _Out: (e)=>e\n}, xa = /* @__PURE__ */ C(/* @__PURE__ */ Symbol.for(\"effect/Metric/globalMetricRegistry\"), ()=>Xv()), Xh = function(e, t, n, r) {\n    const s = Object.assign((c)=>Gi(c, (i)=>iw(s, i)), {\n        [tw]: nw,\n        keyType: e,\n        unsafeUpdate: t,\n        unsafeValue: n,\n        unsafeModify: r,\n        register () {\n            return this.unsafeValue([]), this;\n        },\n        pipe () {\n            return w(this, arguments);\n        }\n    });\n    return s;\n}, nc = (e, t)=>ed(yv(e, t)), ed = (e)=>{\n    let t;\n    const n = /* @__PURE__ */ new WeakMap(), r = (s)=>{\n        if (s.length === 0) return t !== void 0 || (t = xa.get(e)), t;\n        let c = n.get(s);\n        return c !== void 0 || (c = xa.get(Sv(e, s)), n.set(s, c)), c;\n    };\n    return Xh(e.keyType, (s, c)=>r(c).update(s), (s)=>r(s).get(), (s, c)=>r(c).modify(s));\n}, rw = (e, t, n)=>ed(bv(e, t, n)), sw = /* @__PURE__ */ l(3, (e, t, n)=>cw(e, [\n        k0(t, n)\n    ])), cw = /* @__PURE__ */ l(2, (e, t)=>Xh(e.keyType, (n, r)=>e.unsafeUpdate(n, Ar(t, r)), (n)=>e.unsafeValue(Ar(t, n)), (n, r)=>e.unsafeModify(n, Ar(t, r)))), iw = /* @__PURE__ */ l(2, (e, t)=>Ws(Uc, (n)=>y(()=>e.unsafeUpdate(t, n))));\n({\n    ...Os\n});\nconst ow = /* @__PURE__ */ l(2, (e, t)=>Ws(Dh, (n)=>y(()=>{\n            if (n.has(e)) {\n                const r = n.get(e);\n                r.state.completed || (r.state.completed = !0, Qf(r.result, t));\n            }\n        }))), aw = \"effect/Supervisor\", rc = /* @__PURE__ */ Symbol.for(aw), Oo = {\n    /* c8 ignore next */ _T: (e)=>e\n};\nvar ju;\nju = rc;\nconst Mo = class Mo {\n    get value() {\n        return this.value0;\n    }\n    onStart(t, n, r, s) {\n        this.underlying.onStart(t, n, r, s);\n    }\n    onEnd(t, n) {\n        this.underlying.onEnd(t, n);\n    }\n    onEffect(t, n) {\n        this.underlying.onEffect(t, n);\n    }\n    onSuspend(t) {\n        this.underlying.onSuspend(t);\n    }\n    onResume(t) {\n        this.underlying.onResume(t);\n    }\n    map(t) {\n        return new Mo(this, f(this.value, T(t)));\n    }\n    zip(t) {\n        return new ds(this, t);\n    }\n    constructor(t, n){\n        u(this, \"underlying\");\n        u(this, \"value0\");\n        u(this, ju, Oo);\n        this.underlying = t, this.value0 = n;\n    }\n};\nlet hs = Mo;\nvar Lu;\nLu = rc;\nconst To = class To {\n    get value() {\n        return qf(this.left.value, this.right.value);\n    }\n    onStart(t, n, r, s) {\n        this.left.onStart(t, n, r, s), this.right.onStart(t, n, r, s);\n    }\n    onEnd(t, n) {\n        this.left.onEnd(t, n), this.right.onEnd(t, n);\n    }\n    onEffect(t, n) {\n        this.left.onEffect(t, n), this.right.onEffect(t, n);\n    }\n    onSuspend(t) {\n        this.left.onSuspend(t), this.right.onSuspend(t);\n    }\n    onResume(t) {\n        this.left.onResume(t), this.right.onResume(t);\n    }\n    map(t) {\n        return new hs(this, f(this.value, T(t)));\n    }\n    zip(t) {\n        return new To(this, t);\n    }\n    constructor(t, n){\n        u(this, \"left\");\n        u(this, \"right\");\n        u(this, \"_tag\", \"Zip\");\n        u(this, Lu, Oo);\n        this.left = t, this.right = n;\n    }\n};\nlet ds = To;\nconst td = (e)=>$(e, rc) && el(e, \"Zip\");\nvar Du;\nDu = rc;\nclass uw {\n    get value() {\n        return this.effect;\n    }\n    onStart(t, n, r, s) {}\n    onEnd(t, n) {}\n    onEffect(t, n) {}\n    onSuspend(t) {}\n    onResume(t) {}\n    map(t) {\n        return new hs(this, f(this.value, T(t)));\n    }\n    zip(t) {\n        return new ds(this, t);\n    }\n    onRun(t, n) {\n        return t();\n    }\n    constructor(t){\n        u(this, \"effect\");\n        u(this, Du, Oo);\n        this.effect = t;\n    }\n}\nconst lw = (e)=>new uw(e), sc = /* @__PURE__ */ C(\"effect/Supervisor/none\", ()=>lw(K)), fw = dn, nd = \"Empty\", rd = \"AddSupervisor\", sd = \"RemoveSupervisor\", cd = \"AndThen\", An = {\n    _tag: nd\n}, Lr = (e, t)=>({\n        _tag: cd,\n        first: e,\n        second: t\n    }), hw = (e, t)=>dw(t, ie(e)), dw = (e, t)=>{\n    let n = e, r = t;\n    for(; He(r);){\n        const s = Ce(r);\n        switch(s._tag){\n            case nd:\n                {\n                    r = Ve(r);\n                    break;\n                }\n            case rd:\n                {\n                    n = n.zip(s.supervisor), r = Ve(r);\n                    break;\n                }\n            case sd:\n                {\n                    n = ai(n, s.supervisor), r = Ve(r);\n                    break;\n                }\n            case cd:\n                {\n                    r = be(s.first)(be(s.second)(Ve(r)));\n                    break;\n                }\n        }\n    }\n    return n;\n}, ai = (e, t)=>O(e, t) ? sc : td(e) ? ai(e.left, t).zip(ai(e.right, t)) : e, gs = (e)=>O(e, sc) ? St() : td(e) ? f(gs(e.left), Dn(gs(e.right))) : Pi(e), gw = (e, t)=>{\n    if (O(e, t)) return An;\n    const n = gs(e), r = gs(t), s = f(r, Ho(n), qn(An, (i, o)=>Lr(i, {\n            _tag: rd,\n            supervisor: o\n        }))), c = f(n, Ho(r), qn(An, (i, o)=>Lr(i, {\n            _tag: sd,\n            supervisor: o\n        })));\n    return Lr(s, c);\n}, mw = /* @__PURE__ */ fw({\n    empty: An,\n    patch: hw,\n    combine: Lr,\n    diff: gw\n}), pw = /* @__PURE__ */ nc(\"effect_fiber_started\", {\n    incremental: !0\n}), ja = /* @__PURE__ */ nc(\"effect_fiber_active\"), _w = /* @__PURE__ */ nc(\"effect_fiber_successes\", {\n    incremental: !0\n}), yw = /* @__PURE__ */ nc(\"effect_fiber_failures\", {\n    incremental: !0\n}), bw = /* @__PURE__ */ sw(/* @__PURE__ */ rw(\"effect_fiber_lifetimes\", /* @__PURE__ */ Xk({\n    start: 0.5,\n    factor: 2,\n    count: 35\n})), \"time_unit\", \"milliseconds\"), En = \"Continue\", Sw = \"Done\", La = \"Yield\", kw = {\n    /* c8 ignore next */ _E: (e)=>e,\n    /* c8 ignore next */ _A: (e)=>e\n}, Rr = (e)=>{\n    throw new Error(\"BUG: FiberRuntime - \".concat(Ut(e), \" - please report an issue at https://github.com/Effect-TS/effect/issues\"));\n}, ze = /* @__PURE__ */ Symbol.for(\"effect/internal/fiberRuntime/YieldedOp\"), Be = /* @__PURE__ */ C(\"effect/internal/fiberRuntime/yieldedOpChannel\", ()=>({\n        currentOp: null\n    })), In = {\n    [zr]: (e, t, n)=>ee(()=>t.effect_instruction_i1(n)),\n    OnStep: (e, t, n)=>j(j(n)),\n    [Br]: (e, t, n)=>ee(()=>t.effect_instruction_i2(n)),\n    [pi]: (e, t, n)=>(e.patchRuntimeFlags(e.currentRuntimeFlags, t.patch), Ge(e.currentRuntimeFlags) && e.isInterrupted() ? A(e.getInterruptedCause()) : j(n)),\n    [Vr]: (e, t, n)=>(ee(()=>t.effect_instruction_i2(n)), ee(()=>t.effect_instruction_i0()) ? (e.pushStack(t), ee(()=>t.effect_instruction_i1())) : K),\n    [Mn]: (e, t, n)=>{\n        const r = ee(()=>t.effect_instruction_i0.next(n));\n        return r.done ? j(r.value) : (e.pushStack(t), Zd(r.value));\n    }\n}, vw = {\n    [yo]: (e, t, n, r)=>(e.processNewInterruptSignal(r.cause), Ge(t) ? A(r.cause) : n),\n    [So]: (e, t, n, r)=>{\n        throw new Error(\"It is illegal to have multiple concurrent run loops in a single fiber\");\n    },\n    [bo]: (e, t, n, r)=>(r.onFiber(e, Rh(t)), n),\n    [ko]: (e, t, n, r)=>m(Qi(), ()=>n)\n}, ww = (e)=>Bs(oy(e), (t)=>pt(ky(t), (param)=>{\n            let [n, r] = param;\n            const s = /* @__PURE__ */ new Map(), c = [];\n            for (const o of r){\n                c.push(We(o));\n                for (const a of o)s.set(a.request, a);\n            }\n            const i = c.flat();\n            return hr(Jw(n.runAll(c), i, ()=>i.forEach((o)=>{\n                    o.listeners.interrupted = !0;\n                })), Dh, s);\n        }, !1, !1)), Ow = /* @__PURE__ */ bs();\nvar qu, Uu;\nclass id extends ao {\n    commit() {\n        return fs(this);\n    }\n    /**\n   * The identity of the fiber.\n   */ id() {\n        return this._fiberId;\n    }\n    /**\n   * Begins execution of the effect associated with this fiber on in the\n   * background. This can be called to \"kick off\" execution of a fiber after\n   * it has been created.\n   */ resume(n) {\n        this.tell(Ct(n));\n    }\n    /**\n   * The status of the fiber.\n   */ get status() {\n        return this.ask((n, r)=>r);\n    }\n    /**\n   * Gets the fiber runtime flags.\n   */ get runtimeFlags() {\n        return this.ask((n, r)=>tk(r) ? n.currentRuntimeFlags : r.runtimeFlags);\n    }\n    /**\n   * Returns the current `FiberScope` for the fiber.\n   */ scope() {\n        return xk(this);\n    }\n    /**\n   * Retrieves the immediate children of the fiber.\n   */ get children() {\n        return this.ask((n)=>Array.from(n.getChildren()));\n    }\n    /**\n   * Gets the fiber's set of children.\n   */ getChildren() {\n        return this._children === null && (this._children = /* @__PURE__ */ new Set()), this._children;\n    }\n    /**\n   * Retrieves the interrupted cause of the fiber, which will be `Cause.empty`\n   * if the fiber has not been interrupted.\n   *\n   * **NOTE**: This method is safe to invoke on any fiber, but if not invoked\n   * on this fiber, then values derived from the fiber's state (including the\n   * log annotations and log level) may not be up-to-date.\n   */ getInterruptedCause() {\n        return this.getFiberRef(Ir);\n    }\n    /**\n   * Retrieves the whole set of fiber refs.\n   */ fiberRefs() {\n        return this.ask((n)=>n.getFiberRefs());\n    }\n    /**\n   * Returns an effect that will contain information computed from the fiber\n   * state and status while running on the fiber.\n   *\n   * This allows the outside world to interact safely with mutable fiber state\n   * without locks or immutable data.\n   */ ask(n) {\n        return N(()=>{\n            const r = Yf(this._fiberId);\n            return this.tell(jr((s, c)=>{\n                Qf(r, y(()=>n(s, c)));\n            })), ro(r);\n        });\n    }\n    /**\n   * Adds a message to be processed by the fiber on the fiber.\n   */ tell(n) {\n        this._queue.push(n), this._running || (this._running = !0, this.drainQueueLaterOnExecutor());\n    }\n    get await() {\n        return xe((n)=>{\n            const r = (s)=>n(S(s));\n            return this.tell(jr((s, c)=>{\n                s._exitValue !== null ? r(this._exitValue) : s.addObserver(r);\n            })), y(()=>this.tell(jr((s, c)=>{\n                    s.removeObserver(r);\n                })));\n        }, this.id());\n    }\n    get inheritAll() {\n        return L((n, r)=>{\n            const s = n.id(), c = n.getFiberRefs(), i = r.runtimeFlags, o = this.getFiberRefs(), a = YS(c, s, o);\n            n.setFiberRefs(a);\n            const h = n.getFiberRef(za), d = f(gt(i, h), // Do not inherit WindDown or Interruption!\n            ta(gn), ta(Lc));\n            return nb(d);\n        });\n    }\n    /**\n   * Tentatively observes the fiber, but returns immediately if it is not\n   * already done.\n   */ get poll() {\n        return y(()=>Es(this._exitValue));\n    }\n    /**\n   * Unsafely observes the fiber, but returns immediately if it is not\n   * already done.\n   */ unsafePoll() {\n        return this._exitValue;\n    }\n    /**\n   * In the background, interrupts the fiber as if interrupted from the specified fiber.\n   */ interruptAsFork(n) {\n        return y(()=>this.tell(pc(Te(n))));\n    }\n    /**\n   * In the background, interrupts the fiber as if interrupted from the specified fiber.\n   */ unsafeInterruptAsFork(n) {\n        this.tell(pc(Te(n)));\n    }\n    /**\n   * Adds an observer to the list of observers.\n   *\n   * **NOTE**: This method must be invoked by the fiber itself.\n   */ addObserver(n) {\n        this._exitValue !== null ? n(this._exitValue) : this._observers.push(n);\n    }\n    /**\n   * Removes the specified observer from the list of observers that will be\n   * notified when the fiber exits.\n   *\n   * **NOTE**: This method must be invoked by the fiber itself.\n   */ removeObserver(n) {\n        this._observers = this._observers.filter((r)=>r !== n);\n    }\n    /**\n   * Retrieves all fiber refs of the fiber.\n   *\n   * **NOTE**: This method is safe to invoke on any fiber, but if not invoked\n   * on this fiber, then values derived from the fiber's state (including the\n   * log annotations and log level) may not be up-to-date.\n   */ getFiberRefs() {\n        return this.setFiberRef(za, this.currentRuntimeFlags), this._fiberRefs;\n    }\n    /**\n   * Deletes the specified fiber ref.\n   *\n   * **NOTE**: This method must be invoked by the fiber itself.\n   */ unsafeDeleteFiberRef(n) {\n        this._fiberRefs = hh(this._fiberRefs, n);\n    }\n    /**\n   * Retrieves the state of the fiber ref, or else its initial value.\n   *\n   * **NOTE**: This method is safe to invoke on any fiber, but if not invoked\n   * on this fiber, then values derived from the fiber's state (including the\n   * log annotations and log level) may not be up-to-date.\n   */ getFiberRef(n) {\n        return this._fiberRefs.locals.has(n) ? this._fiberRefs.locals.get(n)[0][1] : n.initial;\n    }\n    /**\n   * Sets the fiber ref to the specified value.\n   *\n   * **NOTE**: This method must be invoked by the fiber itself.\n   */ setFiberRef(n, r) {\n        this._fiberRefs = Kc(this._fiberRefs, {\n            fiberId: this._fiberId,\n            fiberRef: n,\n            value: r\n        }), this.refreshRefCache();\n    }\n    refreshRefCache() {\n        this.currentDefaultServices = this.getFiberRef(rs), this.currentTracer = this.currentDefaultServices.unsafeMap.get(ah.key), this.currentSupervisor = this.getFiberRef(Vw), this.currentScheduler = this.getFiberRef(_o), this.currentContext = this.getFiberRef(rt), this.currentSpan = this.currentContext.unsafeMap.get(uh.key);\n    }\n    /**\n   * Wholesale replaces all fiber refs of this fiber.\n   *\n   * **NOTE**: This method must be invoked by the fiber itself.\n   */ setFiberRefs(n) {\n        this._fiberRefs = n, this.refreshRefCache();\n    }\n    /**\n   * Adds a reference to the specified fiber inside the children set.\n   *\n   * **NOTE**: This method must be invoked by the fiber itself.\n   */ addChild(n) {\n        this.getChildren().add(n);\n    }\n    /**\n   * Removes a reference to the specified fiber inside the children set.\n   *\n   * **NOTE**: This method must be invoked by the fiber itself.\n   */ removeChild(n) {\n        this.getChildren().delete(n);\n    }\n    /**\n   * Transfers all children of this fiber that are currently running to the\n   * specified fiber scope.\n   *\n   * **NOTE**: This method must be invoked by the fiber itself after it has\n   * evaluated the effects but prior to exiting.\n   */ transferChildren(n) {\n        const r = this._children;\n        if (this._children = null, r !== null && r.size > 0) for (const s of r)s._exitValue === null && n.add(this.currentRuntimeFlags, s);\n    }\n    /**\n   * On the current thread, executes all messages in the fiber's inbox. This\n   * method may return before all work is done, in the event the fiber executes\n   * an asynchronous operation.\n   *\n   * **NOTE**: This method must be invoked by the fiber itself.\n   */ drainQueueOnCurrentThread() {\n        let n = !0;\n        for(; n;){\n            let r = En;\n            const s = globalThis[ct];\n            globalThis[ct] = this;\n            try {\n                for(; r === En;)r = this._queue.length === 0 ? Sw : this.evaluateMessageWhileSuspended(this._queue.splice(0, 1)[0]);\n            } finally{\n                this._running = !1, globalThis[ct] = s;\n            }\n            this._queue.length > 0 && !this._running ? (this._running = !0, r === La ? (this.drainQueueLaterOnExecutor(), n = !1) : n = !0) : n = !1;\n        }\n    }\n    /**\n   * Schedules the execution of all messages in the fiber's inbox.\n   *\n   * This method will return immediately after the scheduling\n   * operation is completed, but potentially before such messages have been\n   * executed.\n   *\n   * **NOTE**: This method must be invoked by the fiber itself.\n   */ drainQueueLaterOnExecutor() {\n        this.currentScheduler.scheduleTask(this.run, this.getFiberRef(dr));\n    }\n    /**\n   * Drains the fiber's message queue while the fiber is actively running,\n   * returning the next effect to execute, which may be the input effect if no\n   * additional effect needs to be executed.\n   *\n   * **NOTE**: This method must be invoked by the fiber itself.\n   */ drainQueueWhileRunning(n, r) {\n        let s = r;\n        for(; this._queue.length > 0;){\n            const c = this._queue.splice(0, 1)[0];\n            s = vw[c._tag](this, n, s, c);\n        }\n        return s;\n    }\n    /**\n   * Determines if the fiber is interrupted.\n   *\n   * **NOTE**: This method is safe to invoke on any fiber, but if not invoked\n   * on this fiber, then values derived from the fiber's state (including the\n   * log annotations and log level) may not be up-to-date.\n   */ isInterrupted() {\n        return !Ey(this.getFiberRef(Ir));\n    }\n    /**\n   * Adds an interruptor to the set of interruptors that are interrupting this\n   * fiber.\n   *\n   * **NOTE**: This method must be invoked by the fiber itself.\n   */ addInterruptedCause(n) {\n        const r = this.getFiberRef(Ir);\n        this.setFiberRef(Ir, se(r, n));\n    }\n    /**\n   * Processes a new incoming interrupt signal.\n   *\n   * **NOTE**: This method must be invoked by the fiber itself.\n   */ processNewInterruptSignal(n) {\n        this.addInterruptedCause(n), this.sendInterruptSignalToAllChildren();\n    }\n    /**\n   * Interrupts all children of the current fiber, returning an effect that will\n   * await the exit of the children. This method will return null if the fiber\n   * has no children.\n   *\n   * **NOTE**: This method must be invoked by the fiber itself.\n   */ sendInterruptSignalToAllChildren() {\n        if (this._children === null || this._children.size === 0) return !1;\n        let n = !1;\n        for (const r of this._children)r.tell(pc(Te(this.id()))), n = !0;\n        return n;\n    }\n    /**\n   * Interrupts all children of the current fiber, returning an effect that will\n   * await the exit of the children. This method will return null if the fiber\n   * has no children.\n   *\n   * **NOTE**: This method must be invoked by the fiber itself.\n   */ interruptAllChildren() {\n        if (this.sendInterruptSignalToAllChildren()) {\n            const n = this._children.values();\n            this._children = null;\n            let r = !1;\n            return Yi({\n                while: ()=>!r,\n                body: ()=>{\n                    const c = n.next();\n                    return c.done ? y(()=>{\n                        r = !0;\n                    }) : nt(c.value.await);\n                },\n                step: ()=>{}\n            });\n        }\n        return null;\n    }\n    reportExitValue(n) {\n        if (Xo(this.currentRuntimeFlags)) {\n            const r = this.getFiberRef(Uc), s = this.id().startTimeMillis, c = Date.now();\n            switch(bw.unsafeUpdate(c - s, r), ja.unsafeUpdate(-1, r), n._tag){\n                case ne:\n                    {\n                        _w.unsafeUpdate(1, r);\n                        break;\n                    }\n                case te:\n                    {\n                        yw.unsafeUpdate(1, r);\n                        break;\n                    }\n            }\n        }\n        if (n._tag === \"Failure\") {\n            const r = this.getFiberRef(Ib);\n            !Ui(n.cause) && r._tag === \"Some\" && this.log(\"Fiber terminated with an unhandled error\", n.cause, r);\n        }\n    }\n    setExitValue(n) {\n        this._exitValue = n, this.reportExitValue(n);\n        for(let r = this._observers.length - 1; r >= 0; r--)this._observers[r](n);\n        this._observers = [];\n    }\n    getLoggers() {\n        return this.getFiberRef(Rw);\n    }\n    log(n, r, s) {\n        const c = ye(s) ? s.value : this.getFiberRef(vb), i = this.getFiberRef($w);\n        if (h0(i, c)) return;\n        const o = this.getFiberRef(wb), a = this.getFiberRef(kb), h = this.getLoggers(), d = this.getFiberRefs();\n        if (Zl(h) > 0) {\n            const g = Ml(this.getFiberRef(rs), Qs), p = new Date(g.unsafeCurrentTimeMillis());\n            ng(d, ()=>{\n                for (const _ of h)_.log({\n                    fiberId: this.id(),\n                    logLevel: c,\n                    message: n,\n                    cause: r,\n                    context: d,\n                    spans: o,\n                    annotations: a,\n                    date: p\n                });\n            });\n        }\n    }\n    /**\n   * Evaluates a single message on the current thread, while the fiber is\n   * suspended. This method should only be called while evaluation of the\n   * fiber's effect is suspended due to an asynchronous operation.\n   *\n   * **NOTE**: This method must be invoked by the fiber itself.\n   */ evaluateMessageWhileSuspended(n) {\n        switch(n._tag){\n            case ko:\n                return La;\n            case yo:\n                return this.processNewInterruptSignal(n.cause), this._asyncInterruptor !== null && (this._asyncInterruptor(A(n.cause)), this._asyncInterruptor = null), En;\n            case So:\n                return this._asyncInterruptor = null, this._asyncBlockingOn = null, this.evaluateEffect(n.effect), En;\n            case bo:\n                return n.onFiber(this, this._exitValue !== null ? X0 : ek(this.currentRuntimeFlags, this._asyncBlockingOn)), En;\n            default:\n                return Rr(n);\n        }\n    }\n    /**\n   * Evaluates an effect until completion, potentially asynchronously.\n   *\n   * **NOTE**: This method must be invoked by the fiber itself.\n   */ evaluateEffect(n) {\n        this.currentSupervisor.onResume(this);\n        try {\n            let r = Ge(this.currentRuntimeFlags) && this.isInterrupted() ? A(this.getInterruptedCause()) : n;\n            for(; r !== null;){\n                const s = r, c = this.runLoop(s);\n                if (c === ze) {\n                    const i = Be.currentOp;\n                    Be.currentOp = null, i._op === Cr ? ny(this.currentRuntimeFlags) ? (this.tell(Ck()), this.tell(Ct(Ne)), r = null) : r = Ne : i._op === Rn && (r = null);\n                } else {\n                    this.currentRuntimeFlags = f(this.currentRuntimeFlags, ry(Lc));\n                    const i = this.interruptAllChildren();\n                    i !== null ? r = m(i, ()=>c) : (this._queue.length === 0 ? this.setExitValue(c) : this.tell(Ct(c)), r = null);\n                }\n            }\n        } finally{\n            this.currentSupervisor.onSuspend(this);\n        }\n    }\n    /**\n   * Begins execution of the effect associated with this fiber on the current\n   * thread. This can be called to \"kick off\" execution of a fiber after it has\n   * been created, in hopes that the effect can be executed synchronously.\n   *\n   * This is not the normal way of starting a fiber, but it is useful when the\n   * express goal of executing the fiber is to synchronously produce its exit.\n   */ start(n) {\n        if (this._running) this.tell(Ct(n));\n        else {\n            this._running = !0;\n            const r = globalThis[ct];\n            globalThis[ct] = this;\n            try {\n                this.evaluateEffect(n);\n            } finally{\n                this._running = !1, globalThis[ct] = r, this._queue.length > 0 && this.drainQueueLaterOnExecutor();\n            }\n        }\n    }\n    /**\n   * Begins execution of the effect associated with this fiber on in the\n   * background, and on the correct thread pool. This can be called to \"kick\n   * off\" execution of a fiber after it has been created, in hopes that the\n   * effect can be executed synchronously.\n   */ startFork(n) {\n        this.tell(Ct(n));\n    }\n    /**\n   * Takes the current runtime flags, patches them to return the new runtime\n   * flags, and then makes any changes necessary to fiber state based on the\n   * specified patch.\n   *\n   * **NOTE**: This method must be invoked by the fiber itself.\n   */ patchRuntimeFlags(n, r) {\n        const s = Dt(n, r);\n        return globalThis[ct] = this, this.currentRuntimeFlags = s, s;\n    }\n    /**\n   * Initiates an asynchronous operation, by building a callback that will\n   * resume execution, and then feeding that callback to the registration\n   * function, handling error cases and repeated resumptions appropriately.\n   *\n   * **NOTE**: This method must be invoked by the fiber itself.\n   */ initiateAsync(n, r) {\n        let s = !1;\n        const c = (i)=>{\n            s || (s = !0, this.tell(Ct(i)));\n        };\n        Ge(n) && (this._asyncInterruptor = c);\n        try {\n            r(c);\n        } catch (i) {\n            c(Z(Oe(i)));\n        }\n    }\n    pushStack(n) {\n        this._stack.push(n), n._op === \"OnStep\" && this._steps.push({\n            refs: this.getFiberRefs(),\n            flags: this.currentRuntimeFlags\n        });\n    }\n    popStack() {\n        const n = this._stack.pop();\n        if (n) return n._op === \"OnStep\" && this._steps.pop(), n;\n    }\n    getNextSuccessCont() {\n        let n = this.popStack();\n        for(; n;){\n            if (n._op !== Tr) return n;\n            n = this.popStack();\n        }\n    }\n    getNextFailCont() {\n        let n = this.popStack();\n        for(; n;){\n            if (n._op !== zr && n._op !== Vr && n._op !== Mn) return n;\n            n = this.popStack();\n        }\n    }\n    [(Uu = Lk, qu = Uk, sg)](n) {\n        return y(()=>Tl(this.currentContext, n));\n    }\n    Left(n) {\n        return x(n.left);\n    }\n    None(n) {\n        return x(new Hs());\n    }\n    Right(n) {\n        return j(n.right);\n    }\n    Some(n) {\n        return j(n.value);\n    }\n    Micro(n) {\n        return Vn((r)=>{\n            let s = r;\n            const c = Rk(vk(n, this.currentContext));\n            return c.addObserver((i)=>{\n                if (i._tag === \"Success\") return s(j(i.value));\n                switch(i.cause._tag){\n                    case \"Interrupt\":\n                        return s(A(Te(Ht)));\n                    case \"Fail\":\n                        return s(x(i.cause.error));\n                    case \"Die\":\n                        return s(Xr(i.cause.defect));\n                }\n            }), Vn((i)=>{\n                s = (o)=>{\n                    i(K);\n                }, c.unsafeInterrupt();\n            });\n        });\n    }\n    [al](n) {\n        const r = ee(()=>n.effect_instruction_i0()), s = this.getNextSuccessCont();\n        return s !== void 0 ? (s._op in In || Rr(s), In[s._op](this, s, r)) : (Be.currentOp = j(r), ze);\n    }\n    [ne](n) {\n        const r = n, s = this.getNextSuccessCont();\n        return s !== void 0 ? (s._op in In || Rr(s), In[s._op](this, s, r.effect_instruction_i0)) : (Be.currentOp = r, ze);\n    }\n    [te](n) {\n        const r = n.effect_instruction_i0, s = this.getNextFailCont();\n        if (s !== void 0) switch(s._op){\n            case Tr:\n            case Br:\n                return Ge(this.currentRuntimeFlags) && this.isInterrupted() ? A(na(r)) : ee(()=>s.effect_instruction_i1(r));\n            case \"OnStep\":\n                return Ge(this.currentRuntimeFlags) && this.isInterrupted() ? A(na(r)) : j(A(r));\n            case pi:\n                return this.patchRuntimeFlags(this.currentRuntimeFlags, s.patch), Ge(this.currentRuntimeFlags) && this.isInterrupted() ? A(se(r, this.getInterruptedCause())) : A(r);\n            default:\n                Rr(s);\n        }\n        else return Be.currentOp = A(r), ze;\n    }\n    [ul](n) {\n        return ee(()=>n.effect_instruction_i0(this, Rh(this.currentRuntimeFlags)));\n    }\n    Blocked(n) {\n        const r = this.getFiberRefs(), s = this.currentRuntimeFlags;\n        if (this._steps.length > 0) {\n            const c = [], i = this._steps[this._steps.length - 1];\n            let o = this.popStack();\n            for(; o && o._op !== \"OnStep\";)c.push(o), o = this.popStack();\n            this.setFiberRefs(i.refs), this.currentRuntimeFlags = i.flags;\n            const a = Wn(i.refs, r), h = gt(i.flags, s);\n            return j(Rf(n.effect_instruction_i0, L((d)=>{\n                for(; c.length > 0;)d.pushStack(c.pop());\n                return d.setFiberRefs(Jn(d.id(), d.getFiberRefs())(a)), d.currentRuntimeFlags = Dt(h)(d.currentRuntimeFlags), n.effect_instruction_i1;\n            })));\n        }\n        return Ee((c)=>m($o(Hy(n.effect_instruction_i0)), ()=>c(n.effect_instruction_i1)));\n    }\n    RunBlocked(n) {\n        return ww(n.effect_instruction_i0);\n    }\n    [un](n) {\n        const r = n.effect_instruction_i0, s = this.currentRuntimeFlags, c = Dt(s, r);\n        if (Ge(c) && this.isInterrupted()) return A(this.getInterruptedCause());\n        if (this.patchRuntimeFlags(this.currentRuntimeFlags, r), n.effect_instruction_i1) {\n            const i = gt(c, s);\n            return this.pushStack(new Gy(i, n)), ee(()=>n.effect_instruction_i1(s));\n        } else return Ne;\n    }\n    [zr](n) {\n        return this.pushStack(n), n.effect_instruction_i0;\n    }\n    OnStep(n) {\n        return this.pushStack(n), n.effect_instruction_i0;\n    }\n    [Tr](n) {\n        return this.pushStack(n), n.effect_instruction_i0;\n    }\n    [Br](n) {\n        return this.pushStack(n), n.effect_instruction_i0;\n    }\n    [Rn](n) {\n        return this._asyncBlockingOn = n.effect_instruction_i1, this.initiateAsync(this.currentRuntimeFlags, n.effect_instruction_i0), Be.currentOp = n, ze;\n    }\n    [Cr](n) {\n        return this._isYielding = !1, Be.currentOp = n, ze;\n    }\n    [Vr](n) {\n        const r = n.effect_instruction_i0, s = n.effect_instruction_i1;\n        return r() ? (this.pushStack(n), s()) : Ne;\n    }\n    [Mn](n) {\n        return In[Mn](this, n, void 0);\n    }\n    [ws](n) {\n        return ee(()=>n.commit());\n    }\n    /**\n   * The main run-loop for evaluating effects.\n   *\n   * **NOTE**: This method must be invoked by the fiber itself.\n   */ runLoop(n) {\n        let r = n;\n        for(this.currentOpCount = 0;;){\n            if ((this.currentRuntimeFlags & ty) !== 0 && this.currentSupervisor.onEffect(this, r), this._queue.length > 0 && (r = this.drainQueueWhileRunning(this.currentRuntimeFlags, r)), !this._isYielding) {\n                this.currentOpCount += 1;\n                const s = this.currentScheduler.shouldYield(this);\n                if (s !== !1) {\n                    this._isYielding = !0, this.currentOpCount = 0;\n                    const c = r;\n                    r = m(Qi({\n                        priority: s\n                    }), ()=>c);\n                }\n            }\n            try {\n                if (r = this.currentTracer.context(()=>Ow !== r[tn]._V ? qc(\"Cannot execute an Effect versioned \".concat(r[tn]._V, \" with a Runtime of version \").concat(bs())) : this[r._op](r), this), r === ze) {\n                    const s = Be.currentOp;\n                    return s._op === Cr || s._op === Rn ? ze : (Be.currentOp = null, s._op === ne || s._op === te ? s : A(Oe(s)));\n                }\n            } catch (s) {\n                r !== ze && !$(r, \"_op\") || !(r._op in this) ? r = qc(\"Not a valid effect: \".concat(Ut(r))) : Mb(s) ? r = A(se(Oe(s), Te(Ht))) : r = Xr(s);\n            }\n        }\n    }\n    constructor(n, r, s){\n        super();\n        u(this, Uu, Dk);\n        u(this, qu, kw);\n        u(this, \"_fiberRefs\");\n        u(this, \"_fiberId\");\n        u(this, \"_queue\", /* @__PURE__ */ new Array());\n        u(this, \"_children\", null);\n        u(this, \"_observers\", /* @__PURE__ */ new Array());\n        u(this, \"_running\", !1);\n        u(this, \"_stack\", []);\n        u(this, \"_asyncInterruptor\", null);\n        u(this, \"_asyncBlockingOn\", null);\n        u(this, \"_exitValue\", null);\n        u(this, \"_steps\", []);\n        u(this, \"_isYielding\", !1);\n        u(this, \"currentRuntimeFlags\");\n        u(this, \"currentOpCount\", 0);\n        u(this, \"currentSupervisor\");\n        u(this, \"currentScheduler\");\n        u(this, \"currentTracer\");\n        u(this, \"currentSpan\");\n        u(this, \"currentContext\");\n        u(this, \"currentDefaultServices\");\n        u(this, \"run\", ()=>{\n            this.drainQueueOnCurrentThread();\n        });\n        if (this.currentRuntimeFlags = s, this._fiberId = n, this._fiberRefs = r, Xo(s)) {\n            const c = this.getFiberRef(Uc);\n            pw.unsafeUpdate(1, c), ja.unsafeUpdate(1, c);\n        }\n        this.refreshRefCache();\n    }\n}\nconst $w = /* @__PURE__ */ C(\"effect/FiberRef/currentMinimumLogLevel\", ()=>ge(d0(\"Info\"))), Ew = (e)=>vo((t)=>{\n        const n = e0(t.context, rs);\n        Ml(n, oh).unsafe.log(e.log(t));\n    }), Iw = /* @__PURE__ */ C(/* @__PURE__ */ Symbol.for(\"effect/Logger/defaultLogger\"), ()=>Ew(Hk)), Fw = /* @__PURE__ */ C(/* @__PURE__ */ Symbol.for(\"effect/Logger/tracerLogger\"), ()=>vo((param)=>{\n        let { annotations: e, cause: t, context: n, fiberId: r, logLevel: s, message: c } = param;\n        const i = sr(Kn(n, rt), uh);\n        if (i._tag === \"None\" || i.value._tag === \"ExternalSpan\") return;\n        const o = Tl(Kn(n, rs), Qs), a = {};\n        for (const [h, d] of e)a[h] = d;\n        a[\"effect.fiberId\"] = zp(r), a[\"effect.logLevel\"] = s.label, t !== null && t._tag !== \"Empty\" && (a[\"effect.cause\"] = ar(t, {\n            renderErrorCause: !0\n        })), i.value.event(Ut(Array.isArray(c) ? c[0] : c), o.unsafeCurrentTimeNanos(), a);\n    })), Rw = /* @__PURE__ */ C(/* @__PURE__ */ Symbol.for(\"effect/FiberRef/currentLoggers\"), ()=>yb(Pi(Iw, Fw))), Mw = /* @__PURE__ */ l((e)=>Le(e[0]), (e, t)=>Ks(Gi(e, (n)=>Tw((r)=>t(n, r))))), Tw = (e)=>L((t)=>{\n        const n = t.getFiberRefs(), r = t.currentRuntimeFlags;\n        return m(fd, (s)=>ts(s, (c)=>L((i)=>{\n                    const o = i.getFiberRefs(), a = i.currentRuntimeFlags, h = Wn(o, n), d = gt(a, r), g = Wn(n, o);\n                    return i.setFiberRefs(Jn(h, i.id(), n)), Hn(ib(e(c), d), y(()=>{\n                        i.setFiberRefs(Jn(g, i.id(), i.getFiberRefs()));\n                    }));\n                })));\n    }), Cw = (e)=>{\n    if (Array.isArray(e) || tl(e)) return [\n        e,\n        v()\n    ];\n    const t = Object.keys(e), n = t.length;\n    return [\n        t.map((r)=>e[r]),\n        I((r)=>{\n            const s = {};\n            for(let c = 0; c < n; c++)s[t[c]] = r[c];\n            return s;\n        })\n    ];\n}, Nw = (e, t, n)=>{\n    const r = [];\n    for (const s of e)r.push(nn(s));\n    return m(cn(r, P, {\n        concurrency: n == null ? void 0 : n.concurrency,\n        batching: n == null ? void 0 : n.batching,\n        concurrentFinalizers: n == null ? void 0 : n.concurrentFinalizers\n    }), (s)=>{\n        const c = v(), i = s.length, o = new Array(i), a = new Array(i);\n        let h = !1;\n        for(let d = 0; d < i; d++){\n            const g = s[d];\n            g._tag === \"Left\" ? (o[d] = I(g.left), h = !0) : (a[d] = g.right, o[d] = c);\n        }\n        return h ? t._tag === \"Some\" ? x(t.value(o)) : x(o) : n != null && n.discard ? K : t._tag === \"Some\" ? S(t.value(a)) : S(a);\n    });\n}, Aw = (e, t, n)=>{\n    const r = [];\n    for (const s of e)r.push(nn(s));\n    return n != null && n.discard ? cn(r, P, {\n        concurrency: n == null ? void 0 : n.concurrency,\n        batching: n == null ? void 0 : n.batching,\n        discard: !0,\n        concurrentFinalizers: n == null ? void 0 : n.concurrentFinalizers\n    }) : T(cn(r, P, {\n        concurrency: n == null ? void 0 : n.concurrency,\n        batching: n == null ? void 0 : n.batching,\n        concurrentFinalizers: n == null ? void 0 : n.concurrentFinalizers\n    }), (s)=>t._tag === \"Some\" ? t.value(s) : s);\n}, od = (e, t)=>{\n    const [n, r] = Cw(e);\n    return (t == null ? void 0 : t.mode) === \"validate\" ? Nw(n, r, t) : (t == null ? void 0 : t.mode) === \"either\" ? Aw(n, r, t) : (t == null ? void 0 : t.discard) !== !0 && r._tag === \"Some\" ? T(cn(n, P, t), r.value) : cn(n, P, t);\n}, cn = /* @__PURE__ */ l((e)=>tl(e[0]), (e, t, n)=>L((r)=>{\n        const s = (n == null ? void 0 : n.batching) === !0 || (n == null ? void 0 : n.batching) === \"inherit\" && r.getFiberRef(Eb);\n        return n != null && n.discard ? Ca(n.concurrency, ()=>Nt(Gc, n == null ? void 0 : n.concurrentFinalizers)((c)=>s ? pt(e, (i, o)=>c(t(i, o)), !0, !1, 1) : Bs(e, (i, o)=>c(t(i, o)))), ()=>Nt(Yc, n == null ? void 0 : n.concurrentFinalizers)((c)=>pt(e, (i, o)=>c(t(i, o)), s, !1)), (c)=>Nt(Qc(c), n == null ? void 0 : n.concurrentFinalizers)((i)=>pt(e, (o, a)=>i(t(o, a)), s, !1, c))) : Ca(n == null ? void 0 : n.concurrency, ()=>Nt(Gc, n == null ? void 0 : n.concurrentFinalizers)((c)=>s ? ui(e, 1, (i, o)=>c(t(i, o)), !0) : Ke(e, (i, o)=>c(t(i, o)))), ()=>Nt(Yc, n == null ? void 0 : n.concurrentFinalizers)((c)=>ad(e, (i, o)=>c(t(i, o)), s)), (c)=>Nt(Qc(c), n == null ? void 0 : n.concurrentFinalizers)((i)=>ui(e, c, (o, a)=>i(t(o, a)), s)));\n    })), ad = (e, t, n)=>N(()=>{\n        const r = z(e), s = new Array(r.length);\n        return oe(pt(r, (i, o)=>m(t(i, o), (a)=>y(()=>s[o] = a)), n, !1), S(s));\n    }), pt = (e, t, n, r, s)=>Ee((c)=>tb((i)=>L((o)=>{\n                let a = Array.from(e).reverse(), h = a.length;\n                if (h === 0) return K;\n                let d = 0, g = !1;\n                const p = s ? Math.min(a.length, s) : a.length, _ = /* @__PURE__ */ new Set(), b = new Array(), M = ()=>_.forEach((ce)=>{\n                        ce.currentScheduler.scheduleTask(()=>{\n                            ce.unsafeInterruptAsFork(o.id());\n                        }, 0);\n                    }), D = new Array(), X = new Array(), H = new Array(), Ie = ()=>{\n                    const ce = b.filter((param)=>{\n                        let { exit: he } = param;\n                        return he._tag === \"Failure\";\n                    }).sort((he, Fe)=>he.index < Fe.index ? -1 : he.index === Fe.index ? 0 : 1).map((param)=>{\n                        let { exit: he } = param;\n                        return he;\n                    });\n                    return ce.length === 0 && ce.push(Ne), ce;\n                }, De = function(ce) {\n                    let he = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : !1;\n                    const Fe = Ks(i(ce)), re = Pw(Fe, o, o.currentRuntimeFlags, tc);\n                    return o.currentScheduler.scheduleTask(()=>{\n                        he && re.unsafeInterruptAsFork(o.id()), re.resume(Fe);\n                    }, 0), re;\n                }, qe = ()=>{\n                    r || (h -= a.length, a = []), g = !0, M();\n                }, kr = n ? Yy : Ye, Mt = De(xe((ce)=>{\n                    const he = (re, Ue)=>{\n                        re._op === \"Blocked\" ? H.push(re) : (b.push({\n                            index: Ue,\n                            exit: re\n                        }), re._op === \"Failure\" && !g && qe());\n                    }, Fe = ()=>{\n                        if (a.length > 0) {\n                            const re = a.pop();\n                            let Ue = d++;\n                            const vr = ()=>{\n                                const me = a.pop();\n                                return Ue = d++, m(Qi(), ()=>m(kr(c(t(me, Ue))), st));\n                            }, st = (me)=>a.length > 0 && (he(me, Ue), a.length > 0) ? vr() : S(me), wr = m(kr(c(t(re, Ue))), st), Re = De(wr);\n                            D.push(Re), _.add(Re), g && Re.currentScheduler.scheduleTask(()=>{\n                                Re.unsafeInterruptAsFork(o.id());\n                            }, 0), Re.addObserver((me)=>{\n                                let kn;\n                                if (me._op === \"Failure\" ? kn = me : kn = me.effect_instruction_i0, X.push(Re), _.delete(Re), he(kn, Ue), b.length === h) ce(S(de(Nn(Ie(), {\n                                    parallel: !0\n                                }), ()=>Ne)));\n                                else if (H.length + b.length === h) {\n                                    const Co = Ie(), Ad = H.map((vn)=>vn.effect_instruction_i0).reduce(kf);\n                                    ce(S(Rf(Ad, pt([\n                                        de(Nn(Co, {\n                                            parallel: !0\n                                        }), ()=>Ne),\n                                        ...H.map((vn)=>vn.effect_instruction_i1)\n                                    ], (vn)=>vn, n, !0, s))));\n                                } else Fe();\n                            });\n                        }\n                    };\n                    for(let re = 0; re < p; re++)Fe();\n                }));\n                return nt(rn(zs(c(fs(Mt))), to({\n                    onFailure: (ce)=>{\n                        qe();\n                        const he = H.length + 1, Fe = Math.min(typeof s == \"number\" ? s : H.length, H.length), re = Array.from(H);\n                        return xe((Ue)=>{\n                            let vr = 0, st = 0;\n                            const wr = (me, kn)=>(Co)=>{\n                                    vr++, vr === he && Ue(j(A(ce))), re.length > 0 && kn && Re();\n                                }, Re = ()=>{\n                                De(re.pop(), !0).addObserver(wr(st, !0)), st++;\n                            };\n                            Mt.addObserver(wr(st, !1)), st++;\n                            for(let me = 0; me < Fe; me++)Re();\n                        });\n                    },\n                    onSuccess: ()=>Ke(X, (ce)=>ce.inheritAll)\n                })));\n            }))), ui = (e, t, n, r)=>N(()=>{\n        const s = z(e), c = new Array(s.length);\n        return oe(pt(s, (o, a)=>T(n(o, a), (h)=>c[a] = h), r, !1, t), S(c));\n    }), $o = (e)=>xw(e, tc), ud = function(e, t, n) {\n    let r = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;\n    const s = ms(e, t, n, r);\n    return s.resume(e), s;\n}, Pw = function(e, t, n) {\n    let r = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;\n    return ms(e, t, n, r);\n}, ms = function(e, t, n) {\n    let r = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;\n    const s = rf(), c = t.getFiberRefs(), i = QS(c, s), o = new id(s, i, n), a = Kn(i, rt), h = o.currentSupervisor;\n    return h.onStart(a, e, I(t), o), o.addObserver((g)=>h.onEnd(g, o)), (r !== null ? r : f(t.getFiberRef(zc), de(()=>t.scope()))).add(n, o), o;\n}, xw = (e, t)=>L((n, r)=>S(ud(e, n, r.runtimeFlags, t))), Da = (e)=>bn((t)=>tt(sr(t, Rt), {\n            onNone: ()=>e,\n            onSome: (n)=>{\n                switch(n.strategy._tag){\n                    case \"Parallel\":\n                        return e;\n                    case \"Sequential\":\n                    case \"ParallelN\":\n                        return m(Js(n, Yc), (r)=>yr(e, r));\n                }\n            }\n        })), qa = (e)=>(t)=>bn((n)=>tt(sr(n, Rt), {\n                onNone: ()=>t,\n                onSome: (r)=>r.strategy._tag === \"ParallelN\" && r.strategy.parallelism === e ? t : m(Js(r, Qc(e)), (s)=>yr(t, s))\n            })), Nt = (e, t)=>(n)=>bn((r)=>tt(sr(r, Rt), {\n                onNone: ()=>n(P),\n                onSome: (s)=>{\n                    if (t === !0) {\n                        const c = e._tag === \"Parallel\" ? Da : e._tag === \"Sequential\" ? Ua : qa(e.parallelism);\n                        switch(s.strategy._tag){\n                            case \"Parallel\":\n                                return c(n(Da));\n                            case \"Sequential\":\n                                return c(n(Ua));\n                            case \"ParallelN\":\n                                return c(n(qa(s.strategy.parallelism)));\n                        }\n                    } else return n(P);\n                }\n            })), jw = (e)=>m(Rt, e), ld = (e)=>m(Eo(), (t)=>rn(e(t), (n)=>t.close(n))), Ua = (e)=>bn((t)=>tt(sr(t, Rt), {\n            onNone: ()=>e,\n            onSome: (n)=>{\n                switch(n.strategy._tag){\n                    case \"Sequential\":\n                        return e;\n                    case \"Parallel\":\n                    case \"ParallelN\":\n                        return m(Js(n, Gc), (r)=>yr(e, r));\n                }\n            }\n        })), Lw = /* @__PURE__ */ l((e)=>Le(e[1]), (e, t, n)=>_r(e, t, (r, s)=>[\n            r,\n            s\n        ], n)), Dw = /* @__PURE__ */ l((e)=>Le(e[1]), (e, t, n)=>(n == null ? void 0 : n.concurrent) !== !0 && ((n == null ? void 0 : n.batching) === void 0 || n.batching === !1) ? Zi(e, t) : _r(e, t, (r, s)=>r, n)), qw = /* @__PURE__ */ l((e)=>Le(e[1]), (e, t, n)=>(n == null ? void 0 : n.concurrent) !== !0 && ((n == null ? void 0 : n.batching) === void 0 || n.batching === !1) ? oe(e, t) : _r(e, t, (r, s)=>s, n)), _r = /* @__PURE__ */ l((e)=>Le(e[1]), (e, t, n, r)=>T(od([\n        e,\n        t\n    ], {\n        concurrency: r != null && r.concurrent ? 2 : 1,\n        batching: r == null ? void 0 : r.batching,\n        concurrentFinalizers: r == null ? void 0 : r.concurrentFinalizers\n    }), (param)=>{\n        let [s, c] = param;\n        return n(s, c);\n    })), Rt = /* @__PURE__ */ It(\"effect/Scope\"), fd = Rt, Uw = (e, t)=>{\n    e.state._tag === \"Open\" && e.state.finalizers.set({}, t);\n}, zw = {\n    [oa]: oa,\n    [aa]: aa,\n    pipe () {\n        return w(this, arguments);\n    },\n    fork (e) {\n        return y(()=>{\n            const t = hd(e);\n            if (this.state._tag === \"Closed\") return t.state = this.state, t;\n            const n = {}, r = (s)=>t.close(s);\n            return this.state.finalizers.set(n, r), Uw(t, (s)=>y(()=>{\n                    this.state._tag === \"Open\" && this.state.finalizers.delete(n);\n                })), t;\n        });\n    },\n    close (e) {\n        return N(()=>{\n            if (this.state._tag === \"Closed\") return K;\n            const t = Array.from(this.state.finalizers.values()).reverse();\n            return this.state = {\n                _tag: \"Closed\",\n                exit: e\n            }, t.length === 0 ? K : B0(this.strategy) ? f(Ke(t, (n)=>Ye(n(e))), m((n)=>f(Nn(n), Nr(hc), de(()=>Ne)))) : V0(this.strategy) ? f(ad(t, (n)=>Ye(n(e)), !1), m((n)=>f(Nn(n, {\n                    parallel: !0\n                }), Nr(hc), de(()=>Ne)))) : f(ui(t, this.strategy.parallelism, (n)=>Ye(n(e)), !1), m((n)=>f(Nn(n, {\n                    parallel: !0\n                }), Nr(hc), de(()=>Ne))));\n        });\n    },\n    addFinalizer (e) {\n        return N(()=>this.state._tag === \"Closed\" ? e(this.state.exit) : (this.state.finalizers.set({}, e), K));\n    }\n}, hd = function() {\n    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : Zs;\n    const t = Object.create(zw);\n    return t.strategy = e, t.state = {\n        _tag: \"Open\",\n        finalizers: /* @__PURE__ */ new Map()\n    }, t;\n}, Eo = function() {\n    let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : Zs;\n    return y(()=>hd(e));\n}, yr = /* @__PURE__ */ l(2, (e, t)=>Ub(e, // @ts-expect-error\n    fn(rr(Rt, t)))), Bw = (e)=>yn(e, {\n        differ: mw,\n        fork: An\n    }), za = /* @__PURE__ */ Sb(sy), Vw = /* @__PURE__ */ Bw(sc), dd = /* @__PURE__ */ l(3, (e, t, n)=>Ww(e, t, {\n        onSelfWin: (r, s)=>m(r.await, (c)=>{\n                switch(c._tag){\n                    case ne:\n                        return m(r.inheritAll, ()=>n.onSelfDone(c, s));\n                    case te:\n                        return n.onSelfDone(c, s);\n                }\n            }),\n        onOtherWin: (r, s)=>m(r.await, (c)=>{\n                switch(c._tag){\n                    case ne:\n                        return m(r.inheritAll, ()=>n.onOtherDone(c, s));\n                    case te:\n                        return n.onOtherDone(c, s);\n                }\n            })\n    })), Kw = /* @__PURE__ */ l(2, (e, t)=>fr((n)=>dd(e, t, {\n            onSelfDone: (r, s)=>Vc(r, {\n                    onFailure: (c)=>f(fs(s), Ea((i)=>Ot(c, i))),\n                    onSuccess: (c)=>f(s, es(n), fe(c))\n                }),\n            onOtherDone: (r, s)=>Vc(r, {\n                    onFailure: (c)=>f(fs(s), Ea((i)=>Ot(i, c))),\n                    onSuccess: (c)=>f(s, es(n), fe(c))\n                })\n        }))), Ww = /* @__PURE__ */ l(3, (e, t, n)=>L((r, s)=>{\n        const c = s.runtimeFlags, i = Ps(!0), o = ms(e, r, c, n.selfScope), a = ms(t, r, c, n.otherScope);\n        return xe((h)=>{\n            o.addObserver(()=>Ba(o, a, n.onSelfWin, i, h)), a.addObserver(()=>Ba(a, o, n.onOtherWin, i, h)), o.startFork(e), a.startFork(t);\n        }, Up(o.id(), a.id()));\n    })), Ba = (e, t, n, r, s)=>{\n    Ap(!0, !1)(r) && s(n(e, t));\n}, Hn = /* @__PURE__ */ l(2, (e, t)=>Ee((n)=>Se(n(e), {\n            onFailure: (r)=>Se(t, {\n                    onFailure: (s)=>Z(se(r, s)),\n                    onSuccess: ()=>Z(r)\n                }),\n            onSuccess: (r)=>fe(t, r)\n        }))), Jw = (e, t, n)=>fr((r)=>m(m($o(Ji(e)), (s)=>xe((c)=>{\n                const i = t.map((h)=>h.listeners.count), o = ()=>{\n                    i.every((h)=>h === 0) && t.every((h)=>h.result.state.current._tag === \"Pending\" ? !0 : !!(h.result.state.current._tag === \"Done\" && eo(h.result.state.current.effect) && h.result.state.current.effect._tag === \"Failure\" && Iy(h.result.state.current.effect.cause))) && (a.forEach((h)=>h()), n == null || n(), c(zf(s)));\n                };\n                s.addObserver((h)=>{\n                    a.forEach((d)=>d()), c(h);\n                });\n                const a = t.map((h, d)=>{\n                    const g = (p)=>{\n                        i[d] = p, o();\n                    };\n                    return h.listeners.addObserver(g), ()=>h.listeners.removeObserver(g);\n                });\n                return o(), y(()=>{\n                    a.forEach((h)=>h());\n                });\n            })), ()=>N(()=>{\n                const s = t.flatMap((c)=>c.state.completed ? [] : [\n                        c\n                    ]);\n                return Bs(s, (c)=>ow(c.request, Cb(r)));\n            }))), Hw = \"effect/ScheduleInterval\", ps = /* @__PURE__ */ Symbol.for(Hw), gd = {\n    [ps]: ps,\n    startMillis: 0,\n    endMillis: 0\n}, md = (e, t)=>e > t ? gd : {\n        [ps]: ps,\n        startMillis: e,\n        endMillis: t\n    }, Gw = /* @__PURE__ */ l(2, (e, t)=>Yw(e, t) === e), Yw = /* @__PURE__ */ l(2, (e, t)=>e.endMillis <= t.startMillis ? e : t.endMillis <= e.startMillis ? t : e.startMillis < t.startMillis ? e : t.startMillis < e.startMillis ? t : e.endMillis <= t.endMillis ? e : t), Qw = (e)=>e.startMillis >= e.endMillis, Zw = /* @__PURE__ */ l(2, (e, t)=>{\n    const n = Math.max(e.startMillis, t.startMillis), r = Math.min(e.endMillis, t.endMillis);\n    return md(n, r);\n}), Xw = (e)=>md(e, Number.POSITIVE_INFINITY), pd = gd, eO = Gw, tO = Qw, nO = Zw, rO = Xw, sO = \"effect/ScheduleIntervals\", Va = /* @__PURE__ */ Symbol.for(sO), _d = (e)=>({\n        [Va]: Va,\n        intervals: e\n    }), cO = /* @__PURE__ */ l(2, (e, t)=>iO(e.intervals, t.intervals, Ae())), iO = (e, t, n)=>{\n    let r = e, s = t, c = n;\n    for(; He(r) && He(s);){\n        const i = f(Ce(r), nO(Ce(s))), o = tO(i) ? c : f(c, be(i));\n        f(Ce(r), eO(Ce(s))) ? r = Ve(r) : s = Ve(s), c = o;\n    }\n    return _d(yt(c));\n}, li = (e)=>f(e.intervals, xl, de(()=>pd)).startMillis, oO = (e)=>f(e.intervals, xl, de(()=>pd)).endMillis, aO = /* @__PURE__ */ l(2, (e, t)=>li(e) < li(t)), uO = (e)=>He(e.intervals), lO = _d, fO = cO, hO = li, Ka = oO, dO = aO, gO = uO, Io = \"Continue\", yd = \"Done\", mO = (e)=>({\n        _tag: Io,\n        intervals: e\n    }), pO = (e)=>({\n        _tag: Io,\n        intervals: lO(ie(e))\n    }), _O = {\n    _tag: yd\n}, yO = (e)=>e._tag === Io, bO = (e)=>e._tag === yd, SO = mO, kO = pO, Gn = _O, Wa = yO, _s = bO, LE = Jf, DE = ts, vO = Bc, qE = yr, wO = Js, UE = Eo, OO = \"effect/Schedule\", bd = /* @__PURE__ */ Symbol.for(OO), $O = (e)=>$(e, bd), EO = \"effect/ScheduleDriver\", IO = /* @__PURE__ */ Symbol.for(EO), FO = {\n    /* c8 ignore next */ _Out: (e)=>e,\n    /* c8 ignore next */ _In: (e)=>e,\n    /* c8 ignore next */ _R: (e)=>e\n}, RO = {\n    /* c8 ignore next */ _Out: (e)=>e,\n    /* c8 ignore next */ _In: (e)=>e,\n    /* c8 ignore next */ _R: (e)=>e\n};\nvar zu;\nzu = bd;\nclass MO {\n    pipe() {\n        return w(this, arguments);\n    }\n    constructor(t, n){\n        u(this, \"initial\");\n        u(this, \"step\");\n        u(this, zu, FO);\n        this.initial = t, this.step = n;\n    }\n}\nvar Bu;\nBu = IO;\nclass TO {\n    get state() {\n        return T(mt(this.ref), (t)=>t[1]);\n    }\n    get last() {\n        return m(mt(this.ref), (param)=>{\n            let [t, n] = param;\n            switch(t._tag){\n                case \"None\":\n                    return Us(()=>new Hs());\n                case \"Some\":\n                    return S(t.value);\n            }\n        });\n    }\n    get reset() {\n        return cs(this.ref, [\n            v(),\n            this.schedule.initial\n        ]);\n    }\n    next(t) {\n        return f(T(mt(this.ref), (n)=>n[1]), m((n)=>f(WS, m((r)=>f(N(()=>this.schedule.step(r, t, n)), m((param)=>{\n                    let [s, c, i] = param;\n                    const o = cs(this.ref, [\n                        I(c),\n                        s\n                    ]);\n                    if (_s(i)) return oe(o, x(v()));\n                    const a = hO(i.intervals) - r;\n                    return a <= 0 ? fe(o, c) : f(o, oe(C0(Hr(a))), fe(c));\n                }))))));\n    }\n    constructor(t, n){\n        u(this, \"schedule\");\n        u(this, \"ref\");\n        u(this, Bu, RO);\n        this.schedule = t, this.ref = n;\n    }\n}\nconst br = (e, t)=>new MO(e, t), CO = /* @__PURE__ */ l(2, (e, t)=>Fo(e, (n, r)=>y(()=>t(n, r)))), Fo = /* @__PURE__ */ l(2, (e, t)=>br(e.initial, (n, r, s)=>m(e.step(n, r, s), (param)=>{\n            let [c, i, o] = param;\n            return _s(o) ? S([\n                c,\n                i,\n                Gn\n            ]) : T(t(r, i), (a)=>a ? [\n                    c,\n                    i,\n                    o\n                ] : [\n                    c,\n                    i,\n                    Gn\n                ]);\n        }))), NO = (e)=>f(Jc([\n        v(),\n        e.initial\n    ]), T((t)=>new TO(e, t))), AO = /* @__PURE__ */ l(2, (e, t)=>PO(e, t, fO)), PO = /* @__PURE__ */ l(3, (e, t, n)=>br([\n        e.initial,\n        t.initial\n    ], (r, s, c)=>f(Uf(e.step(r, s, c[0]), t.step(r, s, c[1]), (i, o)=>[\n                i,\n                o\n            ]), m((param)=>{\n            let [[i, o, a], [h, d, g]] = param;\n            return Wa(a) && Wa(g) ? fi(e, t, s, i, o, a.intervals, h, d, g.intervals, n) : S([\n                [\n                    i,\n                    h\n                ],\n                [\n                    o,\n                    d\n                ],\n                Gn\n            ]);\n        })))), fi = (e, t, n, r, s, c, i, o, a, h)=>{\n    const d = h(c, a);\n    return gO(d) ? S([\n        [\n            r,\n            i\n        ],\n        [\n            s,\n            o\n        ],\n        SO(d)\n    ]) : f(c, dO(a)) ? m(e.step(Ka(c), n, r), (param)=>{\n        let [g, p, _] = param;\n        return _s(_) ? S([\n            [\n                g,\n                i\n            ],\n            [\n                p,\n                o\n            ],\n            Gn\n        ]) : fi(e, t, n, g, p, _.intervals, i, o, a, h);\n    }) : m(t.step(Ka(a), n, i), (param)=>{\n        let [g, p, _] = param;\n        return _s(_) ? S([\n            [\n                r,\n                g\n            ],\n            [\n                s,\n                p\n            ],\n            Gn\n        ]) : fi(e, t, n, r, s, c, g, p, _.intervals, h);\n    });\n}, xO = /* @__PURE__ */ l(2, (e, t)=>jO(e, (n)=>y(()=>t(n)))), jO = /* @__PURE__ */ l(2, (e, t)=>br(e.initial, (n, r, s)=>m(e.step(n, r, s), (param)=>{\n            let [c, i, o] = param;\n            return T(t(i), (a)=>[\n                    c,\n                    a,\n                    o\n                ]);\n        }))), LO = (e)=>br(e.initial, (t, n, r)=>f(e.step(t, n, r), T((param)=>{\n            let [s, c, i] = param;\n            return [\n                s,\n                n,\n                i\n            ];\n        }))), DO = (e)=>BO(kd, (t)=>t < e), qO = (e, t)=>br(e, (n, r, s)=>y(()=>[\n                t(s),\n                s,\n                kO(rO(n))\n            ])), UO = /* @__PURE__ */ l(2, (e, t)=>Fo(e, (n, r)=>R0(t(n)))), zO = /* @__PURE__ */ l(2, (e, t)=>Fo(e, (n, r)=>t(n))), BO = /* @__PURE__ */ l(2, (e, t)=>CO(e, (n, r)=>t(r))), Dr = /* @__PURE__ */ Symbol.for(\"effect/Schedule/ScheduleDefect\");\nvar Vu;\nVu = Dr;\nclass VO {\n    constructor(t){\n        u(this, \"error\");\n        u(this, Vu);\n        this.error = t, this[Dr] = Dr;\n    }\n}\nconst KO = (e)=>$(e, Dr), Ja = (e)=>Zr(e, (t)=>Xr(new VO(t))), WO = (e)=>Pf(e, (t)=>tt(zi(t, (n)=>$y(n) && KO(n.defect) ? I(n.defect) : v()), {\n            onNone: ()=>Z(t),\n            onSome: (n)=>x(n.error)\n        })), Ha = /* @__PURE__ */ l(2, (e, t)=>HO(e, t, (n, r)=>x(n))), JO = /* @__PURE__ */ l(2, (e, t)=>{\n    if ($O(t)) return Ha(e, t);\n    var _t_schedule;\n    const n = (_t_schedule = t.schedule) !== null && _t_schedule !== void 0 ? _t_schedule : LO(kd), r = t.while ? zO(n, (i)=>{\n        const o = t.while(i);\n        return typeof o == \"boolean\" ? S(o) : Ja(o);\n    }) : n, s = t.until ? UO(r, (i)=>{\n        const o = t.until(i);\n        return typeof o == \"boolean\" ? S(o) : Ja(o);\n    }) : r, c = t.times ? AO(s, DO(t.times)).pipe(xO((i)=>i[0])) : s;\n    return WO(Ha(e, c));\n}), HO = /* @__PURE__ */ l(3, (e, t, n)=>m(NO(t), (r)=>Xe(e, {\n            onFailure: (s)=>n(s, v()),\n            onSuccess: (s)=>Sd(e, r, n, s)\n        }))), Sd = (e, t, n, r)=>Xe(t.next(r), {\n        onFailure: ()=>Xy(t.last),\n        onSuccess: (s)=>Xe(e, {\n                onFailure: (c)=>n(c, I(s)),\n                onSuccess: (c)=>Sd(e, t, n, c)\n            })\n    }), kd = /* @__PURE__ */ qO(0, (e)=>e + 1);\nclass GO {\n    get free() {\n        return this.permits - this.taken;\n    }\n    constructor(t){\n        u(this, \"permits\");\n        u(this, \"waiters\", /* @__PURE__ */ new Set());\n        u(this, \"taken\", 0);\n        u(this, \"take\", (t)=>Af((n)=>{\n                if (this.free < t) {\n                    const r = ()=>{\n                        this.free < t || (this.waiters.delete(r), this.taken += t, n(S(t)));\n                    };\n                    return this.waiters.add(r), y(()=>{\n                        this.waiters.delete(r);\n                    });\n                }\n                return this.taken += t, n(S(t));\n            }));\n        u(this, \"updateTaken\", (t)=>L((n)=>(this.taken = t(this.taken), this.waiters.size > 0 && n.getFiberRef(_o).scheduleTask(()=>{\n                    const r = this.waiters.values();\n                    let s = r.next();\n                    for(; s.done === !1 && this.free > 0;)s.value(), s = r.next();\n                }, n.getFiberRef(dr)), S(this.free))));\n        u(this, \"release\", (t)=>this.updateTaken((n)=>n - t));\n        u(this, \"releaseAll\", /* @__PURE__ */ this.updateTaken((t)=>0));\n        u(this, \"withPermits\", (t)=>(n)=>Ee((r)=>m(r(this.take(t)), (s)=>Hn(r(n), this.release(s)))));\n        u(this, \"withPermitsIfAvailable\", (t)=>(n)=>Ee((r)=>N(()=>this.free < t ? N0 : (this.taken += t, Hn(r(w0(n)), this.release(t))))));\n        this.permits = t;\n    }\n}\nconst vd = (e)=>new GO(e), YO = (e)=>y(()=>vd(e)), QO = /* @__PURE__ */ l(2, (e, t)=>L((n, r)=>{\n        const s = t, c = ud(e, n, r.runtimeFlags, tc);\n        if (s.state._tag === \"Open\") {\n            const i = ()=>fr((a)=>O(a, c.id()) ? K : nt(zf(c))), o = {};\n            s.state.finalizers.set(o, i), c.addObserver(()=>{\n                s.state._tag !== \"Closed\" && s.state.finalizers.delete(o);\n            });\n        } else c.unsafeInterruptAsFork(n.id());\n        return S(c);\n    })), ZO = \"effect/Ref/SynchronizedRef\", XO = /* @__PURE__ */ Symbol.for(ZO), e$ = {\n    /* c8 ignore next */ _A: (e)=>e\n};\nvar Ku, Wu, Ju, Hu;\nclass t$ extends (Hu = ao, Ju = XO, Wu = gh, Ku = ss, Hu) {\n    commit() {\n        return this.get;\n    }\n    modify(n) {\n        return this.modifyEffect((r)=>S(n(r)));\n    }\n    modifyEffect(n) {\n        return this.withLock(f(m(mt(this.ref), n), m((param)=>{\n            let [r, s] = param;\n            return fe(cs(this.ref, s), r);\n        })));\n    }\n    constructor(n, r){\n        super();\n        u(this, \"ref\");\n        u(this, \"withLock\");\n        u(this, Ju, e$);\n        u(this, Wu, mh);\n        u(this, Ku, ss);\n        u(this, \"get\");\n        this.ref = n, this.withLock = r, this.get = mt(this.ref);\n    }\n}\nconst n$ = (e)=>y(()=>wd(e)), wd = (e)=>{\n    const t = ph(e), n = vd(1);\n    return new t$(t, n.withPermits(1));\n}, r$ = /* @__PURE__ */ Symbol.for(\"effect/ManagedRuntime\"), s$ = \"Fresh\", c$ = \"FromEffect\", i$ = \"Scoped\", o$ = \"Suspend\", a$ = \"Provide\", u$ = \"ProvideMerge\", l$ = \"ZipWith\", Sr = (e)=>function() {\n        if (arguments.length === 1) {\n            const t = arguments[0];\n            return function(n) {\n                for(var _len = arguments.length, r = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n                    r[_key - 1] = arguments[_key];\n                }\n                return e(t, n, ...r);\n            };\n        }\n        return e.apply(this, arguments);\n    }, Ro = /* @__PURE__ */ Sr((e, t, n)=>{\n    const r = rf(), s = [\n        [\n            rt,\n            [\n                [\n                    r,\n                    e.context\n                ]\n            ]\n        ]\n    ];\n    n != null && n.scheduler && s.push([\n        _o,\n        [\n            [\n                r,\n                n.scheduler\n            ]\n        ]\n    ]);\n    let c = t0(e.fiberRefs, {\n        entries: s,\n        forkAs: r\n    });\n    n != null && n.updateRefs && (c = n.updateRefs(c, r));\n    const i = new id(r, c, e.runtimeFlags);\n    let o = t;\n    n != null && n.scope && (o = m(wO(n.scope, Zs), (h)=>oe(Jf(h, fr((d)=>O(d, i.id()) ? K : es(i, d))), rn(t, (d)=>vO(h, d)))));\n    const a = i.currentSupervisor;\n    return a !== sc && (a.onStart(e.context, o, v(), i), i.addObserver((h)=>a.onEnd(h, i))), tc.add(e.runtimeFlags, i), (n == null ? void 0 : n.immediate) === !1 ? i.resume(o) : i.start(o), i;\n}), f$ = /* @__PURE__ */ Sr((e, t)=>{\n    const n = m$(e)(t);\n    if (n._tag === \"Failure\") throw Od(n.effect_instruction_i0);\n    return n.effect_instruction_i0;\n});\nclass h$ extends Error {\n    constructor(n){\n        super(\"Fiber #\".concat(n.id().id, \" cannot be resolved synchronously. This is caused by using runSync on an effect that performs async work\"));\n        u(this, \"fiber\");\n        u(this, \"_tag\", \"AsyncFiberException\");\n        this.fiber = n, this.name = this._tag, this.stack = this.message;\n    }\n}\nconst d$ = (e)=>{\n    const t = Error.stackTraceLimit;\n    Error.stackTraceLimit = 0;\n    const n = new h$(e);\n    return Error.stackTraceLimit = t, n;\n}, _c = /* @__PURE__ */ Symbol.for(\"effect/Runtime/FiberFailure\"), Mr = /* @__PURE__ */ Symbol.for(\"effect/Runtime/FiberFailure/Cause\");\nvar Gu, Yu;\nclass g$ extends Error {\n    toJSON() {\n        return {\n            _id: \"FiberFailure\",\n            cause: this[Mr].toJSON()\n        };\n    }\n    toString() {\n        return \"(FiberFailure) \" + ar(this[Mr], {\n            renderErrorCause: !0\n        });\n    }\n    [(Yu = _c, Gu = Mr, U)]() {\n        return this.toString();\n    }\n    constructor(n){\n        const r = If(n)[0];\n        super((r == null ? void 0 : r.message) || \"An error has occurred\");\n        u(this, Yu);\n        u(this, Gu);\n        this[_c] = _c, this[Mr] = n, this.name = r ? \"(FiberFailure) \".concat(r.name) : \"FiberFailure\", r != null && r.stack && (this.stack = r.stack);\n    }\n}\nconst Od = (e)=>{\n    const t = Error.stackTraceLimit;\n    Error.stackTraceLimit = 0;\n    const n = new g$(e);\n    return Error.stackTraceLimit = t, n;\n}, $d = (e)=>{\n    const t = e;\n    switch(t._op){\n        case \"Failure\":\n        case \"Success\":\n            return t;\n        case \"Left\":\n            return ha(t.left);\n        case \"Right\":\n            return j(t.right);\n        case \"Some\":\n            return j(t.value);\n        case \"None\":\n            return ha(Hs());\n    }\n}, m$ = /* @__PURE__ */ Sr((e, t)=>{\n    const n = $d(t);\n    if (n) return n;\n    const r = new Tk(), s = Ro(e)(t, {\n        scheduler: r\n    });\n    r.flush();\n    const c = s.unsafePoll();\n    return c || Fn(Ki(d$(s), io(s)));\n}), p$ = /* @__PURE__ */ Sr((e, t, n)=>Ed(e, t, n).then((r)=>{\n        switch(r._tag){\n            case ne:\n                return r.effect_instruction_i0;\n            case te:\n                throw Od(r.effect_instruction_i0);\n        }\n    })), Ed = /* @__PURE__ */ Sr((e, t, n)=>new Promise((r)=>{\n        const s = $d(t);\n        s && r(s);\n        const c = Ro(e)(t);\n        c.addObserver((i)=>{\n            r(i);\n        }), (n == null ? void 0 : n.signal) !== void 0 && (n.signal.aborted ? c.unsafeInterruptAsFork(c.id()) : n.signal.addEventListener(\"abort\", ()=>{\n            c.unsafeInterruptAsFork(c.id());\n        }, {\n            once: !0\n        }));\n    }));\nclass Id {\n    pipe() {\n        return w(this, arguments);\n    }\n    constructor(t, n, r){\n        u(this, \"context\");\n        u(this, \"runtimeFlags\");\n        u(this, \"fiberRefs\");\n        this.context = t, this.runtimeFlags = n, this.fiberRefs = r;\n    }\n}\nconst _$ = (e)=>new Id(e.context, e.runtimeFlags, e.fiberRefs), y$ = ()=>L((e, t)=>S(new Id(e.getFiberRef(rt), t.runtimeFlags, e.getFiberRefs()))), b$ = /* @__PURE__ */ bf(gn, _f, pf), on = /* @__PURE__ */ _$({\n    context: /* @__PURE__ */ Oi(),\n    runtimeFlags: b$,\n    fiberRefs: /* @__PURE__ */ n0()\n}), S$ = /* @__PURE__ */ Ro(on), k$ = /* @__PURE__ */ p$(on), v$ = /* @__PURE__ */ Ed(on), w$ = /* @__PURE__ */ f$(on), O$ = /* @__PURE__ */ l(2, (e, t)=>e.modifyEffect(t)), $$ = \"effect/Layer\", Fd = /* @__PURE__ */ Symbol.for($$), E$ = {\n    /* c8 ignore next */ _RIn: (e)=>e,\n    /* c8 ignore next */ _E: (e)=>e,\n    /* c8 ignore next */ _ROut: (e)=>e\n}, an = {\n    [Fd]: E$,\n    pipe () {\n        return w(this, arguments);\n    }\n}, I$ = \"effect/Layer/MemoMap\", yc = /* @__PURE__ */ Symbol.for(I$), F$ = /* @__PURE__ */ $i()(\"effect/Layer/CurrentMemoMap\", {\n    defaultValue: ()=>C$()\n}), R$ = (e)=>$(e, Fd), M$ = (e)=>e._op_layer === s$;\nvar Qu;\nQu = yc;\nclass Rd {\n    /**\n   * Checks the memo map to see if a layer exists. If it is, immediately\n   * returns it. Otherwise, obtains the layer, stores it in the memo map,\n   * and adds a finalizer to the `Scope`.\n   */ getOrElseMemoize(t, n) {\n        return f(O$(this.ref, (r)=>{\n            const s = r.get(t);\n            if (s !== void 0) {\n                const [c, i] = s, o = f(c, m((param)=>{\n                    let [a, h] = param;\n                    return f(M0(a), fe(h));\n                }), rn(to({\n                    onFailure: ()=>K,\n                    onSuccess: ()=>ts(n, i)\n                })));\n                return S([\n                    o,\n                    r\n                ]);\n            }\n            return f(Jc(0), m((c)=>f(Ab(), m((i)=>f(Jc(()=>K), T((o)=>{\n                        const a = Ee((d)=>f(Eo(), m((g)=>f(d(m(Td(t, g, !0), (p)=>$0(p(this)))), Ye, m((p)=>{\n                                    switch(p._tag){\n                                        case te:\n                                            return f(jb(i, p.effect_instruction_i0), oe(Bc(g, p)), oe(Z(p.effect_instruction_i0)));\n                                        case ne:\n                                            return f(cs(o, (_)=>f(Bc(g, _), rb(y0(c, (b)=>[\n                                                        b === 1,\n                                                        b - 1\n                                                    ])), nt)), oe($a(c, (_)=>_ + 1)), oe(ts(n, (_)=>f(y(()=>r.delete(t)), oe(mt(o)), m((b)=>b(_))))), oe(Lb(i, p.effect_instruction_i0)), fe(p.effect_instruction_i0[1]));\n                                    }\n                                }))))), h = [\n                            f(ro(i), rn(Vc({\n                                onFailure: ()=>K,\n                                onSuccess: ()=>$a(c, (d)=>d + 1)\n                            }))),\n                            (d)=>f(mt(o), m((g)=>g(d)))\n                        ];\n                        return [\n                            a,\n                            M$(t) ? r : r.set(t, h)\n                        ];\n                    }))))));\n        }), zs);\n    }\n    constructor(t){\n        u(this, \"ref\");\n        u(this, Qu);\n        this.ref = t, this[yc] = yc;\n    }\n}\nconst T$ = /* @__PURE__ */ N(()=>T(n$(/* @__PURE__ */ new Map()), (e)=>new Rd(e))), C$ = ()=>new Rd(wd(/* @__PURE__ */ new Map())), Md = /* @__PURE__ */ l(2, (e, t)=>m(T$, (n)=>N$(e, n, t))), N$ = /* @__PURE__ */ l(3, (e, t, n)=>m(Td(e, n), (r)=>Eh(r(t), F$, t))), Td = function(e, t) {\n    let n = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : !1;\n    const r = e;\n    switch(r._op_layer){\n        case \"Locally\":\n            return y(()=>(s)=>r.f(s.getOrElseMemoize(r.self, t)));\n        case \"ExtendScope\":\n            return y(()=>(s)=>jw((c)=>s.getOrElseMemoize(r.layer, c)));\n        case \"Fold\":\n            return y(()=>(s)=>f(s.getOrElseMemoize(r.layer, t), Se({\n                        onFailure: (c)=>s.getOrElseMemoize(r.failureK(c), t),\n                        onSuccess: (c)=>s.getOrElseMemoize(r.successK(c), t)\n                    })));\n        case \"Fresh\":\n            return y(()=>(s)=>f(r.layer, Md(t)));\n        case \"FromEffect\":\n            return y(n ? ()=>(s)=>r.effect : ()=>(s)=>s.getOrElseMemoize(e, t));\n        case \"Provide\":\n            return y(()=>(s)=>f(s.getOrElseMemoize(r.first, t), m((c)=>f(s.getOrElseMemoize(r.second, t), so(c)))));\n        case \"Scoped\":\n            return y(n ? ()=>(s)=>yr(r.effect, t) : ()=>(s)=>s.getOrElseMemoize(e, t));\n        case \"Suspend\":\n            return y(()=>(s)=>s.getOrElseMemoize(r.evaluate(), t));\n        case \"ProvideMerge\":\n            return y(()=>(s)=>f(s.getOrElseMemoize(r.first, t), Uf(s.getOrElseMemoize(r.second, t), r.zipK)));\n        case \"ZipWith\":\n            return y(()=>(s)=>f(s.getOrElseMemoize(r.first, t), _r(s.getOrElseMemoize(r.second, t), r.zipK, {\n                        concurrent: !0\n                    })));\n    }\n}, A$ = ()=>cc(Zf()), P$ = /* @__PURE__ */ l(2, (e, t)=>{\n    const n = Fs(e), r = n ? e : t;\n    return cc(T(n ? t : e, (c)=>rr(r, c)));\n});\nfunction cc(e) {\n    const t = Object.create(an);\n    return t._op_layer = c$, t.effect = e, t;\n}\nconst x$ = /* @__PURE__ */ l(2, (e, t)=>z$(e, t, (n, r)=>fn(n, r))), Cd = function() {\n    for(var _len = arguments.length, e = new Array(_len), _key = 0; _key < _len; _key++){\n        e[_key] = arguments[_key];\n    }\n    let t = e[0];\n    for(let n = 1; n < e.length; n++)t = x$(t, e[n]);\n    return t;\n}, j$ = /* @__PURE__ */ l(2, (e, t)=>{\n    const n = Fs(e), r = n ? e : t;\n    return L$(T(n ? t : e, (c)=>rr(r, c)));\n}), L$ = (e)=>{\n    const t = Object.create(an);\n    return t._op_layer = i$, t.effect = e, t;\n}, D$ = /* @__PURE__ */ l(2, (e, t)=>{\n    const n = Fs(e);\n    return cc(S(rr(n ? e : t, n ? t : e)));\n}), Nd = (e)=>{\n    const t = Object.create(an);\n    return t._op_layer = o$, t.evaluate = e, t;\n}, q$ = /* @__PURE__ */ l(2, (e, t)=>{\n    const n = Fs(e), r = n ? e : t, s = n ? t : e;\n    return cc(y(()=>rr(r, s())));\n}), U$ = /* @__PURE__ */ l(2, (e, t)=>Nd(()=>{\n        const n = Object.create(an);\n        return n._op_layer = a$, n.first = Object.create(an, {\n            _op_layer: {\n                value: u$,\n                enumerable: !0\n            },\n            first: {\n                value: A$(),\n                enumerable: !0\n            },\n            second: {\n                value: Array.isArray(t) ? Cd(...t) : t\n            },\n            zipK: {\n                value: (r, s)=>f(r, fn(s))\n            }\n        }), n.second = e, n;\n    })), z$ = /* @__PURE__ */ l(3, (e, t, n)=>Nd(()=>{\n        const r = Object.create(an);\n        return r._op_layer = l$, r.first = e, r.second = t, r.zipK = n, r;\n    })), Ga = /* @__PURE__ */ l(2, (e, t)=>ld((n)=>m(Md(t, n), (r)=>co(e, r)))), Ya = /* @__PURE__ */ l(2, (e, t)=>{\n    const n = Wn(on.fiberRefs, t.fiberRefs), r = gt(on.runtimeFlags, t.runtimeFlags);\n    return Ee((s)=>L((c)=>{\n            const i = c.getFiberRef(rt), o = c.getFiberRefs(), a = Jn(c.id(), o)(n), h = c.currentRuntimeFlags, d = Dt(r)(h), g = Wn(a, o), p = gt(d, h);\n            return c.setFiberRefs(a), c.currentRuntimeFlags = d, Hn(co(s(e), fn(i, t.context)), L((_)=>(_.setFiberRefs(Jn(_.id(), _.getFiberRefs())(g)), _.currentRuntimeFlags = Dt(p)(_.currentRuntimeFlags), K)));\n        }));\n}), B$ = /* @__PURE__ */ l(2, (e, t)=>Array.isArray(t) ? Ga(e, Cd(...t)) : R$(t) ? Ga(e, t) : Sm(t) ? co(e, t) : r$ in t ? m(t.runtimeEffect, (n)=>Ya(e, n)) : Ya(e, t)), zE = Le, BE = od, VE = cn, KE = L, WE = x, JE = Z, HE = qc, GE = cb, YE = T0, QE = S, ZE = N, XE = y, eI = K, tI = Zr, nI = Pf, rI = F0, sI = O0, cI = x0, iI = Qy, oI = Ji, aI = Ks, uI = Ee, lI = E0, fI = fe, hI = nt, Qa = T, dI = Hi, gI = Vs, mI = Mw, pI = Cf, _I = Hn, yI = fd, bI = ld, SI = fr, kI = $o, vI = QO, wI = B$, OI = Eh, $I = nn, EI = Ye, II = Zy, FI = L0, RI = m, MI = jt, TI = zs, CI = Kw, NI = dd, AI = Gi, PI = P0, xI = JO, jI = $h, LI = jf, DI = Se, qI = y$, UI = YO, zI = S$, BI = k$, VI = v$, KI = w$, WI = Lw, JI = Dw, HI = qw, GI = _r, YI = D0, V$ = (e)=>{\n    const t = /* @__PURE__ */ new Map();\n    return new Proxy(e, {\n        get (n, r, s) {\n            if (r in n) return Reflect.get(n, r, s);\n            if (t.has(r)) return t.get(r);\n            const c = function() {\n                for(var _len = arguments.length, o = new Array(_len), _key = 0; _key < _len; _key++){\n                    o[_key] = arguments[_key];\n                }\n                return jt(n, (a)=>typeof a[r] == \"function\" ? (t.set(r, function() {\n                        for(var _len = arguments.length, h = new Array(_len), _key = 0; _key < _len; _key++){\n                            h[_key] = arguments[_key];\n                        }\n                        return jt(n, (d)=>d[r](...h));\n                    }), a[r](...o)) : (t.set(r, jt(n, (h)=>h[r])), a[r]));\n            }, i = jt(n, (o)=>o[r]);\n            return Object.assign(c, i), Object.setPrototypeOf(c, Object.getPrototypeOf(i)), t.set(r, c), c;\n        }\n    });\n}, QI = function() {\n    return function() {\n        const [e, t] = arguments, n = \"accessors\" in t ? t.accessors : !1, r = Error.stackTraceLimit;\n        Error.stackTraceLimit = 2;\n        const s = new Error();\n        Error.stackTraceLimit = r;\n        let c = \"unchecked\";\n        const i = function(d) {\n            if (c === \"unchecked\") {\n                const g = Object.getPrototypeOf(d);\n                if (g === Object.prototype || g === null) c = \"plain\";\n                else {\n                    const p = Object.getPrototypeOf(this);\n                    Object.setPrototypeOf(p, g), c = \"patched\";\n                }\n            }\n            if (c === \"plain\") Object.assign(this, d);\n            else if (c === \"patched\") return Object.setPrototypeOf(d, Object.getPrototypeOf(this)), d;\n        };\n        i.prototype._tag = e, Object.defineProperty(i, \"make\", {\n            get () {\n                return (d)=>new this(d);\n            }\n        }), Object.defineProperty(i, \"use\", {\n            get () {\n                return (d)=>jt(this, d);\n            }\n        }), i.key = e, Object.assign(i, Is), Object.defineProperty(i, \"stack\", {\n            get () {\n                return s.stack;\n            }\n        });\n        const o = \"dependencies\" in t && t.dependencies.length > 0, a = o ? \"DefaultWithoutDependencies\" : \"Default\";\n        let h;\n        if (\"effect\" in t ? Object.defineProperty(i, a, {\n            get () {\n                return h !== null && h !== void 0 ? h : h = P$(i, Qa(t.effect, (d)=>new this(d)));\n            }\n        }) : \"scoped\" in t ? Object.defineProperty(i, a, {\n            get () {\n                return h !== null && h !== void 0 ? h : h = j$(i, Qa(t.scoped, (d)=>new this(d)));\n            }\n        }) : \"sync\" in t ? Object.defineProperty(i, a, {\n            get () {\n                return h !== null && h !== void 0 ? h : h = q$(i, ()=>new this(t.sync()));\n            }\n        }) : Object.defineProperty(i, a, {\n            get () {\n                return h !== null && h !== void 0 ? h : h = D$(i, new this(t.succeed));\n            }\n        }), o) {\n            let d;\n            Object.defineProperty(i, \"Default\", {\n                get () {\n                    return d !== null && d !== void 0 ? d : d = U$(this.DefaultWithoutDependencies, t.dependencies);\n                }\n            });\n        }\n        return n === !0 ? V$(i) : i;\n    };\n};\n\nvar _c1, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10, _c11, _c12, _c13, _c14;\n$RefreshReg$(_c1, \"No\");\n$RefreshReg$(_c2, \"Qd\");\n$RefreshReg$(_c3, \"Do\");\n$RefreshReg$(_c4, \"Zd\");\n$RefreshReg$(_c5, \"O\");\n$RefreshReg$(_c6, \"Kt\");\n$RefreshReg$(_c7, \"Ul\");\n$RefreshReg$(_c8, \"Lt\");\n$RefreshReg$(_c9, \"Rs\");\n$RefreshReg$(_c10, \"Bl\");\n$RefreshReg$(_c11, \"Qo\");\n$RefreshReg$(_c12, \"Zo\");\n$RefreshReg$(_c13, \"JS\");\n$RefreshReg$(_c14, \"HS\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = __webpack_module__.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = __webpack_module__.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, __webpack_module__.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                __webpack_module__.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                __webpack_module__.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        __webpack_module__.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    __webpack_module__.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/../medfetch/dist/Effect-D4rBamoz.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/../medfetch/dist/Match-CtupVYsT.mjs":
/*!*******************************************!*\
  !*** ../medfetch/dist/Match-CtupVYsT.mjs ***!
  \*******************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   d: () => (/* binding */ R),\n/* harmony export */   e: () => (/* binding */ $),\n/* harmony export */   o: () => (/* binding */ W),\n/* harmony export */   v: () => (/* binding */ k),\n/* harmony export */   w: () => (/* binding */ x)\n/* harmony export */ });\n/* harmony import */ var _Effect_D4rBamoz_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Effect-D4rBamoz.mjs */ \"(app-pages-browser)/../medfetch/dist/Effect-D4rBamoz.mjs\");\n\nconst _ = /* @__PURE__ */ Symbol.for(\"@effect/matcher/Matcher\"), m = {\n    [_]: {\n        _input: _Effect_D4rBamoz_mjs__WEBPACK_IMPORTED_MODULE_0__.q,\n        _filters: _Effect_D4rBamoz_mjs__WEBPACK_IMPORTED_MODULE_0__.q,\n        _result: _Effect_D4rBamoz_mjs__WEBPACK_IMPORTED_MODULE_0__.q,\n        _return: _Effect_D4rBamoz_mjs__WEBPACK_IMPORTED_MODULE_0__.q\n    },\n    _tag: \"ValueMatcher\",\n    add (e) {\n        return this.value._tag === \"Right\" ? this : e._tag === \"When\" && e.guard(this.provided) === !0 ? u(this.provided, (0,_Effect_D4rBamoz_mjs__WEBPACK_IMPORTED_MODULE_0__.u)(e.evaluate(this.provided))) : e._tag === \"Not\" && e.guard(this.provided) === !1 ? u(this.provided, (0,_Effect_D4rBamoz_mjs__WEBPACK_IMPORTED_MODULE_0__.u)(e.evaluate(this.provided))) : this;\n    },\n    pipe () {\n        return (0,_Effect_D4rBamoz_mjs__WEBPACK_IMPORTED_MODULE_0__.v)(this, arguments);\n    }\n};\nfunction u(e, a) {\n    const t = Object.create(m);\n    return t.provided = e, t.value = a, t;\n}\nconst y = (e, a)=>({\n        _tag: \"When\",\n        guard: e,\n        evaluate: a\n    }), c = (e)=>{\n    if (typeof e == \"function\") return e;\n    if (Array.isArray(e)) {\n        const a = e.map(c), t = a.length;\n        return (r)=>{\n            if (!Array.isArray(r)) return !1;\n            for(let s = 0; s < t; s++)if (a[s](r[s]) === !1) return !1;\n            return !0;\n        };\n    } else if (e !== null && typeof e == \"object\") {\n        const a = Object.entries(e).map((param)=>{\n            let [r, s] = param;\n            return [\n                r,\n                c(s)\n            ];\n        }), t = a.length;\n        return (r)=>{\n            if (typeof r != \"object\" || r === null) return !1;\n            for(let s = 0; s < t; s++){\n                const [l, g] = a[s];\n                if (!(l in r) || g(r[l]) === !1) return !1;\n            }\n            return !0;\n        };\n    }\n    return (a)=>a === e;\n}, E = (e)=>u(e, (0,_Effect_D4rBamoz_mjs__WEBPACK_IMPORTED_MODULE_0__.n)(e)), b = (e, a)=>(t)=>t.add(y(c(e), a)), p = (e)=>e != null, w = (e)=>(a)=>{\n        const t = d(a);\n        return (0,_Effect_D4rBamoz_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(t) ? t._tag === \"Right\" ? t.right : e(t.left) : (r)=>{\n            const s = t(r);\n            return s._tag === \"Right\" ? s.right : e(s.left);\n        };\n    }, d = (e)=>{\n    if (e._tag === \"ValueMatcher\") return e.value;\n    const a = e.cases.length;\n    if (a === 1) {\n        const t = e.cases[0];\n        return (r)=>t._tag === \"When\" && t.guard(r) === !0 ? (0,_Effect_D4rBamoz_mjs__WEBPACK_IMPORTED_MODULE_0__.u)(t.evaluate(r)) : t._tag === \"Not\" && t.guard(r) === !1 ? (0,_Effect_D4rBamoz_mjs__WEBPACK_IMPORTED_MODULE_0__.u)(t.evaluate(r)) : (0,_Effect_D4rBamoz_mjs__WEBPACK_IMPORTED_MODULE_0__.n)(r);\n    }\n    return (t)=>{\n        for(let r = 0; r < a; r++){\n            const s = e.cases[r];\n            if (s._tag === \"When\" && s.guard(t) === !0) return (0,_Effect_D4rBamoz_mjs__WEBPACK_IMPORTED_MODULE_0__.u)(s.evaluate(t));\n            if (s._tag === \"Not\" && s.guard(t) === !1) return (0,_Effect_D4rBamoz_mjs__WEBPACK_IMPORTED_MODULE_0__.u)(s.evaluate(t));\n        }\n        return (0,_Effect_D4rBamoz_mjs__WEBPACK_IMPORTED_MODULE_0__.n)(t);\n    };\n}, h = \"effect/Match/exhaustive: absurd\", A = (e)=>{\n    const a = d(e);\n    if ((0,_Effect_D4rBamoz_mjs__WEBPACK_IMPORTED_MODULE_0__.o)(a)) {\n        if (a._tag === \"Right\") return a.right;\n        throw new Error(h);\n    }\n    return (t)=>{\n        const r = a(t);\n        if (r._tag === \"Right\") return r.right;\n        throw new Error(h);\n    };\n}, k = E, x = b, R = p, W = w, $ = A;\n\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = __webpack_module__.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = __webpack_module__.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, __webpack_module__.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                __webpack_module__.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                __webpack_module__.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        __webpack_module__.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    __webpack_module__.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/../medfetch/dist/Match-CtupVYsT.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/../medfetch/dist/sqlite-wasm/worker1.mjs":
/*!************************************************!*\
  !*** ../medfetch/dist/sqlite-wasm/worker1.mjs ***!
  \************************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Effect_D4rBamoz_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Effect-D4rBamoz.mjs */ \"(app-pages-browser)/../medfetch/dist/Effect-D4rBamoz.mjs\");\n/* harmony import */ var _Data_CYZAqtZB_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Data-CYZAqtZB.mjs */ \"(app-pages-browser)/../medfetch/dist/Data-CYZAqtZB.mjs\");\n/* harmony import */ var _sqlite_org_sqlite_wasm__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @sqlite.org/sqlite-wasm */ \"(app-pages-browser)/../node_modules/.pnpm/@sqlite.org+sqlite-wasm@3.49.1-build2/node_modules/@sqlite.org/sqlite-wasm/index.mjs\");\n/* harmony import */ var _Match_CtupVYsT_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../Match-CtupVYsT.mjs */ \"(app-pages-browser)/../medfetch/dist/Match-CtupVYsT.mjs\");\n\n\n\n\nclass t extends (0,_Data_CYZAqtZB_mjs__WEBPACK_IMPORTED_MODULE_1__.T)(\"sqlite-wasm/worker1\") {\n}\nclass m extends (0,_Effect_D4rBamoz_mjs__WEBPACK_IMPORTED_MODULE_0__.T)(\"Sqlite3InitModule\")() {\n}\nfunction S(o) {\n    return (0,_Effect_D4rBamoz_mjs__WEBPACK_IMPORTED_MODULE_0__.e)({\n        try: ()=>o({\n                print: console.log,\n                printErr: console.error\n            }),\n        catch: (e)=>e instanceof Error ? new t({\n                operation: \"bootstrap\",\n                message: e.message,\n                errorName: e.name\n            }) : new t({\n                operation: \"bootstrap\",\n                message: \"Unknown error \".concat(e, \" thrown while loading the wasm module\")\n            })\n    });\n}\n_c = S;\nconst $ = m.pipe((0,_Effect_D4rBamoz_mjs__WEBPACK_IMPORTED_MODULE_0__.c)(S), (0,_Effect_D4rBamoz_mjs__WEBPACK_IMPORTED_MODULE_0__.t)((o)=>o.initWorker1API())), D = (o)=>$.pipe((0,_Effect_D4rBamoz_mjs__WEBPACK_IMPORTED_MODULE_0__.h)(m, o)), I = (o)=>(0,_Effect_D4rBamoz_mjs__WEBPACK_IMPORTED_MODULE_0__.e)({\n        try: async ()=>await import(// so esbuild, rollup, and webpack static\n            // analyzers do not fail at runtime\n            /* @vite-ignore */ /* webpackIgnore: true */ o),\n        catch: (e)=>e instanceof Error ? new t({\n                operation: \"load-module\",\n                message: \"That path doesn't exist \".concat(o),\n                errorName: \"NO_SUCH_PATH\"\n            }) : new t({\n                operation: \"load-module\",\n                message: \"Unknown error occurred while loading dynamic import\",\n                errorName: \"UNKNOWN\"\n            })\n    });\nfunction R(o) {\n    return I(o).pipe((0,_Effect_D4rBamoz_mjs__WEBPACK_IMPORTED_MODULE_0__.c)((e)=>(0,_Effect_D4rBamoz_mjs__WEBPACK_IMPORTED_MODULE_0__.l)(e.default, (s)=>typeof s < \"u\", ()=>new t({\n                operation: \"load-module\",\n                message: \"No default export found\",\n                errorName: \"NO_DEFAULT_EXPORT\"\n            })))).pipe((0,_Effect_D4rBamoz_mjs__WEBPACK_IMPORTED_MODULE_0__.c)((0,_Effect_D4rBamoz_mjs__WEBPACK_IMPORTED_MODULE_0__.l)((e)=>typeof e == \"function\" && e.length > 0, (e)=>new t({\n            operation: \"load-module\",\n            message: \"Expected a function with 2 args as the default export but got \".concat(typeof e, \" with \").concat(e.length, \" args\"),\n            errorName: \"TYPE_MISMATCH_DEFAULT_EXPORT\"\n        }))));\n}\n_c1 = R;\nfunction W(o, e, s) {\n    return R(e).pipe((0,_Effect_D4rBamoz_mjs__WEBPACK_IMPORTED_MODULE_0__.c)((r)=>(0,_Effect_D4rBamoz_mjs__WEBPACK_IMPORTED_MODULE_0__.e)({\n            try: ()=>r(o, s),\n            catch: (l)=>new t({\n                    operation: \"load-module\",\n                    message: \"Unknown error while wrapping user vtable module (\".concat((r.name, l), \")\"),\n                    errorName: \"UNKNOWN\"\n                })\n        })));\n}\n_c2 = W;\nfunction H(o, e) {\n    return (0,_Match_CtupVYsT_mjs__WEBPACK_IMPORTED_MODULE_3__.v)(o).pipe((0,_Match_CtupVYsT_mjs__WEBPACK_IMPORTED_MODULE_3__.w)({\n        type: \"open\"\n    }, e.onOpen), (0,_Match_CtupVYsT_mjs__WEBPACK_IMPORTED_MODULE_3__.w)({\n        type: \"close\"\n    }, e.onClose), (0,_Match_CtupVYsT_mjs__WEBPACK_IMPORTED_MODULE_3__.w)({\n        type: \"exec\"\n    }, e.onExec), (0,_Match_CtupVYsT_mjs__WEBPACK_IMPORTED_MODULE_3__.w)({\n        type: \"export\"\n    }, e.onExport), (0,_Match_CtupVYsT_mjs__WEBPACK_IMPORTED_MODULE_3__.w)({\n        type: \"config-get\"\n    }, e.onConfigGet), (0,_Match_CtupVYsT_mjs__WEBPACK_IMPORTED_MODULE_3__.w)({\n        type: \"load-module\"\n    }, e.onLoadModule), _Match_CtupVYsT_mjs__WEBPACK_IMPORTED_MODULE_3__.e);\n}\n_c3 = H;\nfunction K(o) {\n    return (0,_Effect_D4rBamoz_mjs__WEBPACK_IMPORTED_MODULE_0__.m)(postMessage(o));\n}\n_c4 = K;\nfunction j(o, e, s) {\n    let r = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : \"load-module\";\n    return (0,_Effect_D4rBamoz_mjs__WEBPACK_IMPORTED_MODULE_0__.k)({\n        try: ()=>o.oo1.DB.checkRc(e, s),\n        catch: (l)=>l instanceof o.SQLite3Error ? l : new t({\n                operation: r,\n                errorName: \"UNKNOWN\",\n                message: \"better-worker1.main.checkRc: (rc=\".concat(s, \") unknown error thrown injecting the module:\")\n            })\n    });\n}\nfunction F(o) {\n    return (0,_Effect_D4rBamoz_mjs__WEBPACK_IMPORTED_MODULE_0__.p)(o.split(\"@\"), (e)=>e[e.length - 1], Number);\n}\n_c5 = F;\nconst G = (0,_Effect_D4rBamoz_mjs__WEBPACK_IMPORTED_MODULE_0__.g)(function*() {\n    const o = yield* m, e = yield* D(o), s = yield* (0,_Effect_D4rBamoz_mjs__WEBPACK_IMPORTED_MODULE_0__.f)(self.onmessage), r = (a)=>s.call(self, a);\n    return {\n        onMessage: (a)=>H(a.data, {\n                onOpen: ()=>r(a),\n                onClose: ()=>r(a),\n                onExec: ()=>r(a),\n                onConfigGet: ()=>r(a),\n                onExport: ()=>r(a),\n                /* custom event handlers starts here */ onLoadModule: async (param)=>{\n                    let { dbId: d, args: n, messageId: M } = param;\n                    return await (0,_Effect_D4rBamoz_mjs__WEBPACK_IMPORTED_MODULE_0__.g)(function*() {\n                        var y;\n                        if (!d) return yield* new t({\n                            operation: \"load-module\",\n                            message: \"you have no database opened lol\",\n                            errorName: \"BAD_CALL\"\n                        });\n                        if (n === void 0) return yield* new t({\n                            operation: \"load-module\",\n                            message: '\"message.args\" can\\'t be undefined when invoking load-module',\n                            errorName: \"BAD_CALL\"\n                        });\n                        const w = F(d);\n                        e.wasm.allocPtr(1);\n                        const E = yield* W(e, n.moduleURL, {\n                            aux: n.aux,\n                            transfer: a.ports\n                        }), b = e.vtab.setupModule({\n                            methods: E\n                        });\n                        let u = 0, p = 0;\n                        try {\n                            if (n.pAuxBytes) {\n                                const k = n.pAuxBytes.byteLength;\n                                if (p = e.wasm.alloc(k), p === 0) throw u = -1, new Error();\n                                new DataView(e.wasm.heap8u().buffer, p, 4).setInt32(0, n.pAuxBytes.byteLength, !0), e.wasm.heap8u().set(n.pAuxBytes, p + 4);\n                            }\n                            u = e.capi.sqlite3_create_module(w, n.moduleName, b.pointer, p);\n                        } finally{\n                            if (u === -1) return yield* new t({\n                                message: \"better-worker1.worker1: stack can't handle \".concat((y = n.pAuxBytes) == null ? void 0 : y.byteLength, \" more bytes\"),\n                                errorName: \"NO_MEM\",\n                                operation: \"load-module\"\n                            });\n                        }\n                        return yield* j(e, w, u), yield* K({\n                            type: \"exec\",\n                            dbId: d,\n                            messageId: M,\n                            result: {\n                                operation: \"load-module\",\n                                rc: u,\n                                moduleName: n.moduleName\n                            }\n                        });\n                    }).pipe(_Effect_D4rBamoz_mjs__WEBPACK_IMPORTED_MODULE_0__.r);\n                }\n            })\n    };\n}), X = G.pipe((0,_Effect_D4rBamoz_mjs__WEBPACK_IMPORTED_MODULE_0__.t)((param)=>{\n    let { onMessage: o } = param;\n    self.onmessage = o;\n})), z = _sqlite_org_sqlite_wasm__WEBPACK_IMPORTED_MODULE_2__[\"default\"];\n(0,_Effect_D4rBamoz_mjs__WEBPACK_IMPORTED_MODULE_0__.h)(X, m, z).pipe(_Effect_D4rBamoz_mjs__WEBPACK_IMPORTED_MODULE_0__.j);\nvar _c, _c1, _c2, _c3, _c4, _c5;\n$RefreshReg$(_c, \"S\");\n$RefreshReg$(_c1, \"R\");\n$RefreshReg$(_c2, \"W\");\n$RefreshReg$(_c3, \"H\");\n$RefreshReg$(_c4, \"K\");\n$RefreshReg$(_c5, \"F\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = __webpack_module__.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = __webpack_module__.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, __webpack_module__.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                __webpack_module__.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                __webpack_module__.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        __webpack_module__.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    __webpack_module__.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/../medfetch/dist/sqlite-wasm/worker1.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/../node_modules/.pnpm/@sqlite.org+sqlite-wasm@3.49.1-build2/node_modules/@sqlite.org/sqlite-wasm/index.mjs":
/*!******************************************************************************************************************!*\
  !*** ../node_modules/.pnpm/@sqlite.org+sqlite-wasm@3.49.1-build2/node_modules/@sqlite.org/sqlite-wasm/index.mjs ***!
  \******************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   sqlite3Worker1Promiser: () => (/* binding */ sqlite3Worker1Promiser)\n/* harmony export */ });\n/* harmony import */ var _sqlite_wasm_jswasm_sqlite3_bundler_friendly_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./sqlite-wasm/jswasm/sqlite3-bundler-friendly.mjs */ \"(app-pages-browser)/../node_modules/.pnpm/@sqlite.org+sqlite-wasm@3.49.1-build2/node_modules/@sqlite.org/sqlite-wasm/sqlite-wasm/jswasm/sqlite3-bundler-friendly.mjs\");\n/* harmony import */ var _sqlite_wasm_jswasm_sqlite3_worker1_promiser_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./sqlite-wasm/jswasm/sqlite3-worker1-promiser.mjs */ \"(app-pages-browser)/../node_modules/.pnpm/@sqlite.org+sqlite-wasm@3.49.1-build2/node_modules/@sqlite.org/sqlite-wasm/sqlite-wasm/jswasm/sqlite3-worker1-promiser.mjs\");\n\n\n\nconst sqlite3Worker1Promiser = globalThis.sqlite3Worker1Promiser;\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_sqlite_wasm_jswasm_sqlite3_bundler_friendly_mjs__WEBPACK_IMPORTED_MODULE_0__[\"default\"]);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi9ub2RlX21vZHVsZXMvLnBucG0vQHNxbGl0ZS5vcmcrc3FsaXRlLXdhc21AMy40OS4xLWJ1aWxkMi9ub2RlX21vZHVsZXMvQHNxbGl0ZS5vcmcvc3FsaXRlLXdhc20vaW5kZXgubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBaUc7QUFDdEM7O0FBRTNEOztBQUVBLGlFQUFlLHdGQUFpQixFQUFDO0FBQ0MiLCJzb3VyY2VzIjpbIi9Vc2Vycy9ldGhhbmtpbS9OZXN0b3IvbWVkZmV0Y2guanMvbm9kZV9tb2R1bGVzLy5wbnBtL0BzcWxpdGUub3JnK3NxbGl0ZS13YXNtQDMuNDkuMS1idWlsZDIvbm9kZV9tb2R1bGVzL0BzcWxpdGUub3JnL3NxbGl0ZS13YXNtL2luZGV4Lm1qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBkZWZhdWx0IGFzIHNxbGl0ZTNJbml0TW9kdWxlIH0gZnJvbSAnLi9zcWxpdGUtd2FzbS9qc3dhc20vc3FsaXRlMy1idW5kbGVyLWZyaWVuZGx5Lm1qcyc7XG5pbXBvcnQgJy4vc3FsaXRlLXdhc20vanN3YXNtL3NxbGl0ZTMtd29ya2VyMS1wcm9taXNlci5tanMnO1xuXG5jb25zdCBzcWxpdGUzV29ya2VyMVByb21pc2VyID0gZ2xvYmFsVGhpcy5zcWxpdGUzV29ya2VyMVByb21pc2VyO1xuXG5leHBvcnQgZGVmYXVsdCBzcWxpdGUzSW5pdE1vZHVsZTtcbmV4cG9ydCB7IHNxbGl0ZTNXb3JrZXIxUHJvbWlzZXIgfTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/../node_modules/.pnpm/@sqlite.org+sqlite-wasm@3.49.1-build2/node_modules/@sqlite.org/sqlite-wasm/index.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/../node_modules/.pnpm/@sqlite.org+sqlite-wasm@3.49.1-build2/node_modules/@sqlite.org/sqlite-wasm/sqlite-wasm/jswasm/sqlite3-bundler-friendly.mjs":
/*!********************************************************************************************************************************************************!*\
  !*** ../node_modules/.pnpm/@sqlite.org+sqlite-wasm@3.49.1-build2/node_modules/@sqlite.org/sqlite-wasm/sqlite-wasm/jswasm/sqlite3-bundler-friendly.mjs ***!
  \********************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"(app-pages-browser)/../node_modules/.pnpm/next@15.3.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/build/polyfills/process.js\");\n/*\n ** LICENSE for the sqlite3 WebAssembly/JavaScript APIs.\n **\n ** This bundle (typically released as sqlite3.js or sqlite3.mjs)\n ** is an amalgamation of JavaScript source code from two projects:\n **\n ** 1) https://emscripten.org: the Emscripten \"glue code\" is covered by\n **    the terms of the MIT license and University of Illinois/NCSA\n **    Open Source License, as described at:\n **\n **    https://emscripten.org/docs/introducing_emscripten/emscripten_license.html\n **\n ** 2) https://sqlite.org: all code and documentation labeled as being\n **    from this source are released under the same terms as the sqlite3\n **    C library:\n **\n ** 2022-10-16\n **\n ** The author disclaims copyright to this source code.  In place of a\n ** legal notice, here is a blessing:\n **\n ** *   May you do good and not evil.\n ** *   May you find forgiveness for yourself and forgive others.\n ** *   May you share freely, never taking more than you give.\n */\n/*\n ** This code was built from sqlite3 version...\n **\n ** SQLITE_VERSION \"3.49.1\"\n ** SQLITE_VERSION_NUMBER 3049001\n ** SQLITE_SOURCE_ID \"2025-02-18 13:38:58 873d4e274b4988d260ba8354a9718324a1c26187a4ab4c1cc0227c03d0f10e70\"\n **\n ** Using the Emscripten SDK version 3.1.70.\n */\n\nvar sqlite3InitModule = (() => {\n  var _scriptName = \"file:///Users/ethankim/Nestor/medfetch.js/node_modules/.pnpm/@sqlite.org+sqlite-wasm@3.49.1-build2/node_modules/@sqlite.org/sqlite-wasm/sqlite-wasm/jswasm/sqlite3-bundler-friendly.mjs\";\n\n  return function (moduleArg = {}) {\n    var moduleRtn;\n\n    var Module = moduleArg;\n\n    var readyPromiseResolve, readyPromiseReject;\n    var readyPromise = new Promise((resolve, reject) => {\n      readyPromiseResolve = resolve;\n      readyPromiseReject = reject;\n    });\n\n    var ENVIRONMENT_IS_WEB = typeof window == 'object';\n    var ENVIRONMENT_IS_WORKER = typeof importScripts == 'function';\n\n    var ENVIRONMENT_IS_NODE =\n      typeof process == 'object' &&\n      typeof process.versions == 'object' &&\n      typeof process.versions.node == 'string' &&\n      process.type != 'renderer';\n    var ENVIRONMENT_IS_SHELL =\n      !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;\n\n    const sqlite3InitModuleState =\n      globalThis.sqlite3InitModuleState ||\n      Object.assign(Object.create(null), {\n        debugModule: () => {},\n      });\n    delete globalThis.sqlite3InitModuleState;\n    sqlite3InitModuleState.debugModule(\n      'globalThis.location =',\n      globalThis.location,\n    );\n\n    var moduleOverrides = Object.assign({}, Module);\n\n    var arguments_ = [];\n    var thisProgram = './this.program';\n    var quit_ = (status, toThrow) => {\n      throw toThrow;\n    };\n\n    var scriptDirectory = '';\n    function locateFile(path) {\n      if (Module['locateFile']) {\n        return Module['locateFile'](path, scriptDirectory);\n      }\n      return scriptDirectory + path;\n    }\n\n    var readAsync, readBinary;\n\n    if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {\n      if (ENVIRONMENT_IS_WORKER) {\n        scriptDirectory = self.location.href;\n      } else if (typeof document != 'undefined' && document.currentScript) {\n        scriptDirectory = document.currentScript.src;\n      }\n\n      if (_scriptName) {\n        scriptDirectory = _scriptName;\n      }\n\n      if (scriptDirectory.startsWith('blob:')) {\n        scriptDirectory = '';\n      } else {\n        scriptDirectory = scriptDirectory.substr(\n          0,\n          scriptDirectory.replace(/[?#].*/, '').lastIndexOf('/') + 1,\n        );\n      }\n\n      {\n        if (ENVIRONMENT_IS_WORKER) {\n          readBinary = (url) => {\n            var xhr = new XMLHttpRequest();\n            xhr.open('GET', url, false);\n            xhr.responseType = 'arraybuffer';\n            xhr.send(null);\n            return new Uint8Array(xhr.response);\n          };\n        }\n\n        readAsync = (url) => {\n          return fetch(url, { credentials: 'same-origin' }).then((response) => {\n            if (response.ok) {\n              return response.arrayBuffer();\n            }\n            return Promise.reject(\n              new Error(response.status + ' : ' + response.url),\n            );\n          });\n        };\n      }\n    } else {\n    }\n\n    var out = Module['print'] || console.log.bind(console);\n    var err = Module['printErr'] || console.error.bind(console);\n\n    Object.assign(Module, moduleOverrides);\n\n    moduleOverrides = null;\n\n    if (Module['arguments']) arguments_ = Module['arguments'];\n\n    if (Module['thisProgram']) thisProgram = Module['thisProgram'];\n\n    var wasmBinary = Module['wasmBinary'];\n\n    var wasmMemory;\n\n    var ABORT = false;\n\n    var EXITSTATUS;\n\n    function assert(condition, text) {\n      if (!condition) {\n        abort(text);\n      }\n    }\n\n    var HEAP,\n      HEAP8,\n      HEAPU8,\n      HEAP16,\n      HEAPU16,\n      HEAP32,\n      HEAPU32,\n      HEAPF32,\n      HEAP64,\n      HEAPU64,\n      HEAPF64;\n\n    function updateMemoryViews() {\n      var b = wasmMemory.buffer;\n      Module['HEAP8'] = HEAP8 = new Int8Array(b);\n      Module['HEAP16'] = HEAP16 = new Int16Array(b);\n      Module['HEAPU8'] = HEAPU8 = new Uint8Array(b);\n      Module['HEAPU16'] = HEAPU16 = new Uint16Array(b);\n      Module['HEAP32'] = HEAP32 = new Int32Array(b);\n      Module['HEAPU32'] = HEAPU32 = new Uint32Array(b);\n      Module['HEAPF32'] = HEAPF32 = new Float32Array(b);\n      Module['HEAPF64'] = HEAPF64 = new Float64Array(b);\n      Module['HEAP64'] = HEAP64 = new BigInt64Array(b);\n      Module['HEAPU64'] = HEAPU64 = new BigUint64Array(b);\n    }\n\n    if (Module['wasmMemory']) {\n      wasmMemory = Module['wasmMemory'];\n    } else {\n      var INITIAL_MEMORY = Module['INITIAL_MEMORY'] || 16777216;\n\n      wasmMemory = new WebAssembly.Memory({\n        initial: INITIAL_MEMORY / 65536,\n\n        maximum: 32768,\n      });\n    }\n\n    updateMemoryViews();\n\n    var __ATPRERUN__ = [];\n    var __ATINIT__ = [];\n    var __ATEXIT__ = [];\n    var __ATPOSTRUN__ = [];\n\n    var runtimeInitialized = false;\n\n    function preRun() {\n      var preRuns = Module['preRun'];\n      if (preRuns) {\n        if (typeof preRuns == 'function') preRuns = [preRuns];\n        preRuns.forEach(addOnPreRun);\n      }\n      callRuntimeCallbacks(__ATPRERUN__);\n    }\n\n    function initRuntime() {\n      runtimeInitialized = true;\n\n      if (!Module['noFSInit'] && !FS.initialized) FS.init();\n      FS.ignorePermissions = false;\n\n      TTY.init();\n      callRuntimeCallbacks(__ATINIT__);\n    }\n\n    function postRun() {\n      var postRuns = Module['postRun'];\n      if (postRuns) {\n        if (typeof postRuns == 'function') postRuns = [postRuns];\n        postRuns.forEach(addOnPostRun);\n      }\n\n      callRuntimeCallbacks(__ATPOSTRUN__);\n    }\n\n    function addOnPreRun(cb) {\n      __ATPRERUN__.unshift(cb);\n    }\n\n    function addOnInit(cb) {\n      __ATINIT__.unshift(cb);\n    }\n\n    function addOnExit(cb) {}\n\n    function addOnPostRun(cb) {\n      __ATPOSTRUN__.unshift(cb);\n    }\n\n    var runDependencies = 0;\n    var runDependencyWatcher = null;\n    var dependenciesFulfilled = null;\n\n    function getUniqueRunDependency(id) {\n      return id;\n    }\n\n    function addRunDependency(id) {\n      runDependencies++;\n\n      Module['monitorRunDependencies']?.(runDependencies);\n    }\n\n    function removeRunDependency(id) {\n      runDependencies--;\n\n      Module['monitorRunDependencies']?.(runDependencies);\n\n      if (runDependencies == 0) {\n        if (runDependencyWatcher !== null) {\n          clearInterval(runDependencyWatcher);\n          runDependencyWatcher = null;\n        }\n        if (dependenciesFulfilled) {\n          var callback = dependenciesFulfilled;\n          dependenciesFulfilled = null;\n          callback();\n        }\n      }\n    }\n\n    function abort(what) {\n      Module['onAbort']?.(what);\n\n      what = 'Aborted(' + what + ')';\n\n      err(what);\n\n      ABORT = true;\n\n      what += '. Build with -sASSERTIONS for more info.';\n\n      var e = new WebAssembly.RuntimeError(what);\n\n      readyPromiseReject(e);\n\n      throw e;\n    }\n\n    var dataURIPrefix = 'data:application/octet-stream;base64,';\n\n    var isDataURI = (filename) => filename.startsWith(dataURIPrefix);\n\n    var isFileURI = (filename) => filename.startsWith('file://');\n\n    function findWasmBinary() {\n      if (Module['locateFile']) {\n        var f = 'sqlite3.wasm';\n        if (!isDataURI(f)) {\n          return locateFile(f);\n        }\n        return f;\n      }\n\n      return /* asset import */ new __webpack_require__.U(__webpack_require__(/*! sqlite3.wasm */ \"(app-pages-browser)/../node_modules/.pnpm/@sqlite.org+sqlite-wasm@3.49.1-build2/node_modules/@sqlite.org/sqlite-wasm/sqlite-wasm/jswasm/sqlite3.wasm\")).href;\n    }\n\n    var wasmBinaryFile;\n\n    function getBinarySync(file) {\n      if (file == wasmBinaryFile && wasmBinary) {\n        return new Uint8Array(wasmBinary);\n      }\n      if (readBinary) {\n        return readBinary(file);\n      }\n      throw 'both async and sync fetching of the wasm failed';\n    }\n\n    function getBinaryPromise(binaryFile) {\n      if (!wasmBinary) {\n        return readAsync(binaryFile).then(\n          (response) => new Uint8Array(response),\n\n          () => getBinarySync(binaryFile),\n        );\n      }\n\n      return Promise.resolve().then(() => getBinarySync(binaryFile));\n    }\n\n    function instantiateArrayBuffer(binaryFile, imports, receiver) {\n      return getBinaryPromise(binaryFile)\n        .then((binary) => {\n          return WebAssembly.instantiate(binary, imports);\n        })\n        .then(receiver, (reason) => {\n          err(`failed to asynchronously prepare wasm: ${reason}`);\n\n          abort(reason);\n        });\n    }\n\n    function instantiateAsync(binary, binaryFile, imports, callback) {\n      if (\n        !binary &&\n        typeof WebAssembly.instantiateStreaming == 'function' &&\n        !isDataURI(binaryFile) &&\n        typeof fetch == 'function'\n      ) {\n        return fetch(binaryFile, { credentials: 'same-origin' }).then(\n          (response) => {\n            var result = WebAssembly.instantiateStreaming(response, imports);\n\n            return result.then(callback, function (reason) {\n              err(`wasm streaming compile failed: ${reason}`);\n              err('falling back to ArrayBuffer instantiation');\n              return instantiateArrayBuffer(binaryFile, imports, callback);\n            });\n          },\n        );\n      }\n      return instantiateArrayBuffer(binaryFile, imports, callback);\n    }\n\n    function getWasmImports() {\n      return {\n        env: wasmImports,\n        wasi_snapshot_preview1: wasmImports,\n      };\n    }\n\n    function createWasm() {\n      var info = getWasmImports();\n\n      function receiveInstance(instance, module) {\n        wasmExports = instance.exports;\n\n        addOnInit(wasmExports['__wasm_call_ctors']);\n\n        removeRunDependency('wasm-instantiate');\n        return wasmExports;\n      }\n\n      addRunDependency('wasm-instantiate');\n\n      function receiveInstantiationResult(result) {\n        receiveInstance(result['instance']);\n      }\n\n      if (Module['instantiateWasm']) {\n        try {\n          return Module['instantiateWasm'](info, receiveInstance);\n        } catch (e) {\n          err(`Module.instantiateWasm callback failed with error: ${e}`);\n\n          readyPromiseReject(e);\n        }\n      }\n\n      wasmBinaryFile ??= findWasmBinary();\n\n      instantiateAsync(\n        wasmBinary,\n        wasmBinaryFile,\n        info,\n        receiveInstantiationResult,\n      ).catch(readyPromiseReject);\n      return {};\n    }\n\n    function ExitStatus(status) {\n      this.name = 'ExitStatus';\n      this.message = `Program terminated with exit(${status})`;\n      this.status = status;\n    }\n\n    var callRuntimeCallbacks = (callbacks) => {\n      callbacks.forEach((f) => f(Module));\n    };\n\n    function getValue(ptr, type = 'i8') {\n      if (type.endsWith('*')) type = '*';\n      switch (type) {\n        case 'i1':\n          return HEAP8[ptr];\n        case 'i8':\n          return HEAP8[ptr];\n        case 'i16':\n          return HEAP16[ptr >> 1];\n        case 'i32':\n          return HEAP32[ptr >> 2];\n        case 'i64':\n          return HEAP64[ptr >> 3];\n        case 'float':\n          return HEAPF32[ptr >> 2];\n        case 'double':\n          return HEAPF64[ptr >> 3];\n        case '*':\n          return HEAPU32[ptr >> 2];\n        default:\n          abort(`invalid type for getValue: ${type}`);\n      }\n    }\n\n    var noExitRuntime = Module['noExitRuntime'] || true;\n\n    function setValue(ptr, value, type = 'i8') {\n      if (type.endsWith('*')) type = '*';\n      switch (type) {\n        case 'i1':\n          HEAP8[ptr] = value;\n          break;\n        case 'i8':\n          HEAP8[ptr] = value;\n          break;\n        case 'i16':\n          HEAP16[ptr >> 1] = value;\n          break;\n        case 'i32':\n          HEAP32[ptr >> 2] = value;\n          break;\n        case 'i64':\n          HEAP64[ptr >> 3] = BigInt(value);\n          break;\n        case 'float':\n          HEAPF32[ptr >> 2] = value;\n          break;\n        case 'double':\n          HEAPF64[ptr >> 3] = value;\n          break;\n        case '*':\n          HEAPU32[ptr >> 2] = value;\n          break;\n        default:\n          abort(`invalid type for setValue: ${type}`);\n      }\n    }\n\n    var stackRestore = (val) => __emscripten_stack_restore(val);\n\n    var stackSave = () => _emscripten_stack_get_current();\n\n    var PATH = {\n      isAbs: (path) => path.charAt(0) === '/',\n      splitPath: (filename) => {\n        var splitPathRe =\n          /^(\\/?|)([\\s\\S]*?)((?:\\.{1,2}|[^\\/]+?|)(\\.[^.\\/]*|))(?:[\\/]*)$/;\n        return splitPathRe.exec(filename).slice(1);\n      },\n      normalizeArray: (parts, allowAboveRoot) => {\n        var up = 0;\n        for (var i = parts.length - 1; i >= 0; i--) {\n          var last = parts[i];\n          if (last === '.') {\n            parts.splice(i, 1);\n          } else if (last === '..') {\n            parts.splice(i, 1);\n            up++;\n          } else if (up) {\n            parts.splice(i, 1);\n            up--;\n          }\n        }\n\n        if (allowAboveRoot) {\n          for (; up; up--) {\n            parts.unshift('..');\n          }\n        }\n        return parts;\n      },\n      normalize: (path) => {\n        var isAbsolute = PATH.isAbs(path),\n          trailingSlash = path.substr(-1) === '/';\n\n        path = PATH.normalizeArray(\n          path.split('/').filter((p) => !!p),\n          !isAbsolute,\n        ).join('/');\n        if (!path && !isAbsolute) {\n          path = '.';\n        }\n        if (path && trailingSlash) {\n          path += '/';\n        }\n        return (isAbsolute ? '/' : '') + path;\n      },\n      dirname: (path) => {\n        var result = PATH.splitPath(path),\n          root = result[0],\n          dir = result[1];\n        if (!root && !dir) {\n          return '.';\n        }\n        if (dir) {\n          dir = dir.substr(0, dir.length - 1);\n        }\n        return root + dir;\n      },\n      basename: (path) => {\n        if (path === '/') return '/';\n        path = PATH.normalize(path);\n        path = path.replace(/\\/$/, '');\n        var lastSlash = path.lastIndexOf('/');\n        if (lastSlash === -1) return path;\n        return path.substr(lastSlash + 1);\n      },\n      join: (...paths) => PATH.normalize(paths.join('/')),\n      join2: (l, r) => PATH.normalize(l + '/' + r),\n    };\n\n    var initRandomFill = () => {\n      if (\n        typeof crypto == 'object' &&\n        typeof crypto['getRandomValues'] == 'function'\n      ) {\n        return (view) => crypto.getRandomValues(view);\n      } else abort('initRandomDevice');\n    };\n    var randomFill = (view) => {\n      return (randomFill = initRandomFill())(view);\n    };\n\n    var PATH_FS = {\n      resolve: (...args) => {\n        var resolvedPath = '',\n          resolvedAbsolute = false;\n        for (var i = args.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n          var path = i >= 0 ? args[i] : FS.cwd();\n\n          if (typeof path != 'string') {\n            throw new TypeError('Arguments to path.resolve must be strings');\n          } else if (!path) {\n            return '';\n          }\n          resolvedPath = path + '/' + resolvedPath;\n          resolvedAbsolute = PATH.isAbs(path);\n        }\n\n        resolvedPath = PATH.normalizeArray(\n          resolvedPath.split('/').filter((p) => !!p),\n          !resolvedAbsolute,\n        ).join('/');\n        return (resolvedAbsolute ? '/' : '') + resolvedPath || '.';\n      },\n      relative: (from, to) => {\n        from = PATH_FS.resolve(from).substr(1);\n        to = PATH_FS.resolve(to).substr(1);\n        function trim(arr) {\n          var start = 0;\n          for (; start < arr.length; start++) {\n            if (arr[start] !== '') break;\n          }\n          var end = arr.length - 1;\n          for (; end >= 0; end--) {\n            if (arr[end] !== '') break;\n          }\n          if (start > end) return [];\n          return arr.slice(start, end - start + 1);\n        }\n        var fromParts = trim(from.split('/'));\n        var toParts = trim(to.split('/'));\n        var length = Math.min(fromParts.length, toParts.length);\n        var samePartsLength = length;\n        for (var i = 0; i < length; i++) {\n          if (fromParts[i] !== toParts[i]) {\n            samePartsLength = i;\n            break;\n          }\n        }\n        var outputParts = [];\n        for (var i = samePartsLength; i < fromParts.length; i++) {\n          outputParts.push('..');\n        }\n        outputParts = outputParts.concat(toParts.slice(samePartsLength));\n        return outputParts.join('/');\n      },\n    };\n\n    var UTF8Decoder =\n      typeof TextDecoder != 'undefined' ? new TextDecoder() : undefined;\n\n    var UTF8ArrayToString = (heapOrArray, idx = 0, maxBytesToRead = NaN) => {\n      var endIdx = idx + maxBytesToRead;\n      var endPtr = idx;\n\n      while (heapOrArray[endPtr] && !(endPtr >= endIdx)) ++endPtr;\n\n      if (endPtr - idx > 16 && heapOrArray.buffer && UTF8Decoder) {\n        return UTF8Decoder.decode(heapOrArray.subarray(idx, endPtr));\n      }\n      var str = '';\n\n      while (idx < endPtr) {\n        var u0 = heapOrArray[idx++];\n        if (!(u0 & 0x80)) {\n          str += String.fromCharCode(u0);\n          continue;\n        }\n        var u1 = heapOrArray[idx++] & 63;\n        if ((u0 & 0xe0) == 0xc0) {\n          str += String.fromCharCode(((u0 & 31) << 6) | u1);\n          continue;\n        }\n        var u2 = heapOrArray[idx++] & 63;\n        if ((u0 & 0xf0) == 0xe0) {\n          u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;\n        } else {\n          u0 =\n            ((u0 & 7) << 18) |\n            (u1 << 12) |\n            (u2 << 6) |\n            (heapOrArray[idx++] & 63);\n        }\n\n        if (u0 < 0x10000) {\n          str += String.fromCharCode(u0);\n        } else {\n          var ch = u0 - 0x10000;\n          str += String.fromCharCode(\n            0xd800 | (ch >> 10),\n            0xdc00 | (ch & 0x3ff),\n          );\n        }\n      }\n      return str;\n    };\n\n    var FS_stdin_getChar_buffer = [];\n\n    var lengthBytesUTF8 = (str) => {\n      var len = 0;\n      for (var i = 0; i < str.length; ++i) {\n        var c = str.charCodeAt(i);\n        if (c <= 0x7f) {\n          len++;\n        } else if (c <= 0x7ff) {\n          len += 2;\n        } else if (c >= 0xd800 && c <= 0xdfff) {\n          len += 4;\n          ++i;\n        } else {\n          len += 3;\n        }\n      }\n      return len;\n    };\n\n    var stringToUTF8Array = (str, heap, outIdx, maxBytesToWrite) => {\n      if (!(maxBytesToWrite > 0)) return 0;\n\n      var startIdx = outIdx;\n      var endIdx = outIdx + maxBytesToWrite - 1;\n      for (var i = 0; i < str.length; ++i) {\n        var u = str.charCodeAt(i);\n        if (u >= 0xd800 && u <= 0xdfff) {\n          var u1 = str.charCodeAt(++i);\n          u = (0x10000 + ((u & 0x3ff) << 10)) | (u1 & 0x3ff);\n        }\n        if (u <= 0x7f) {\n          if (outIdx >= endIdx) break;\n          heap[outIdx++] = u;\n        } else if (u <= 0x7ff) {\n          if (outIdx + 1 >= endIdx) break;\n          heap[outIdx++] = 0xc0 | (u >> 6);\n          heap[outIdx++] = 0x80 | (u & 63);\n        } else if (u <= 0xffff) {\n          if (outIdx + 2 >= endIdx) break;\n          heap[outIdx++] = 0xe0 | (u >> 12);\n          heap[outIdx++] = 0x80 | ((u >> 6) & 63);\n          heap[outIdx++] = 0x80 | (u & 63);\n        } else {\n          if (outIdx + 3 >= endIdx) break;\n          heap[outIdx++] = 0xf0 | (u >> 18);\n          heap[outIdx++] = 0x80 | ((u >> 12) & 63);\n          heap[outIdx++] = 0x80 | ((u >> 6) & 63);\n          heap[outIdx++] = 0x80 | (u & 63);\n        }\n      }\n\n      heap[outIdx] = 0;\n      return outIdx - startIdx;\n    };\n\n    function intArrayFromString(stringy, dontAddNull, length) {\n      var len = length > 0 ? length : lengthBytesUTF8(stringy) + 1;\n      var u8array = new Array(len);\n      var numBytesWritten = stringToUTF8Array(\n        stringy,\n        u8array,\n        0,\n        u8array.length,\n      );\n      if (dontAddNull) u8array.length = numBytesWritten;\n      return u8array;\n    }\n    var FS_stdin_getChar = () => {\n      if (!FS_stdin_getChar_buffer.length) {\n        var result = null;\n        if (\n          typeof window != 'undefined' &&\n          typeof window.prompt == 'function'\n        ) {\n          result = window.prompt('Input: ');\n          if (result !== null) {\n            result += '\\n';\n          }\n        } else {\n        }\n        if (!result) {\n          return null;\n        }\n        FS_stdin_getChar_buffer = intArrayFromString(result, true);\n      }\n      return FS_stdin_getChar_buffer.shift();\n    };\n    var TTY = {\n      ttys: [],\n      init() {},\n      shutdown() {},\n      register(dev, ops) {\n        TTY.ttys[dev] = { input: [], output: [], ops: ops };\n        FS.registerDevice(dev, TTY.stream_ops);\n      },\n      stream_ops: {\n        open(stream) {\n          var tty = TTY.ttys[stream.node.rdev];\n          if (!tty) {\n            throw new FS.ErrnoError(43);\n          }\n          stream.tty = tty;\n          stream.seekable = false;\n        },\n        close(stream) {\n          stream.tty.ops.fsync(stream.tty);\n        },\n        fsync(stream) {\n          stream.tty.ops.fsync(stream.tty);\n        },\n        read(stream, buffer, offset, length, pos) {\n          if (!stream.tty || !stream.tty.ops.get_char) {\n            throw new FS.ErrnoError(60);\n          }\n          var bytesRead = 0;\n          for (var i = 0; i < length; i++) {\n            var result;\n            try {\n              result = stream.tty.ops.get_char(stream.tty);\n            } catch (e) {\n              throw new FS.ErrnoError(29);\n            }\n            if (result === undefined && bytesRead === 0) {\n              throw new FS.ErrnoError(6);\n            }\n            if (result === null || result === undefined) break;\n            bytesRead++;\n            buffer[offset + i] = result;\n          }\n          if (bytesRead) {\n            stream.node.timestamp = Date.now();\n          }\n          return bytesRead;\n        },\n        write(stream, buffer, offset, length, pos) {\n          if (!stream.tty || !stream.tty.ops.put_char) {\n            throw new FS.ErrnoError(60);\n          }\n          try {\n            for (var i = 0; i < length; i++) {\n              stream.tty.ops.put_char(stream.tty, buffer[offset + i]);\n            }\n          } catch (e) {\n            throw new FS.ErrnoError(29);\n          }\n          if (length) {\n            stream.node.timestamp = Date.now();\n          }\n          return i;\n        },\n      },\n      default_tty_ops: {\n        get_char(tty) {\n          return FS_stdin_getChar();\n        },\n        put_char(tty, val) {\n          if (val === null || val === 10) {\n            out(UTF8ArrayToString(tty.output));\n            tty.output = [];\n          } else {\n            if (val != 0) tty.output.push(val);\n          }\n        },\n        fsync(tty) {\n          if (tty.output && tty.output.length > 0) {\n            out(UTF8ArrayToString(tty.output));\n            tty.output = [];\n          }\n        },\n        ioctl_tcgets(tty) {\n          return {\n            c_iflag: 25856,\n            c_oflag: 5,\n            c_cflag: 191,\n            c_lflag: 35387,\n            c_cc: [\n              0x03, 0x1c, 0x7f, 0x15, 0x04, 0x00, 0x01, 0x00, 0x11, 0x13, 0x1a,\n              0x00, 0x12, 0x0f, 0x17, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n              0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            ],\n          };\n        },\n        ioctl_tcsets(tty, optional_actions, data) {\n          return 0;\n        },\n        ioctl_tiocgwinsz(tty) {\n          return [24, 80];\n        },\n      },\n      default_tty1_ops: {\n        put_char(tty, val) {\n          if (val === null || val === 10) {\n            err(UTF8ArrayToString(tty.output));\n            tty.output = [];\n          } else {\n            if (val != 0) tty.output.push(val);\n          }\n        },\n        fsync(tty) {\n          if (tty.output && tty.output.length > 0) {\n            err(UTF8ArrayToString(tty.output));\n            tty.output = [];\n          }\n        },\n      },\n    };\n\n    var zeroMemory = (address, size) => {\n      HEAPU8.fill(0, address, address + size);\n    };\n\n    var alignMemory = (size, alignment) => {\n      return Math.ceil(size / alignment) * alignment;\n    };\n    var mmapAlloc = (size) => {\n      size = alignMemory(size, 65536);\n      var ptr = _emscripten_builtin_memalign(65536, size);\n      if (ptr) zeroMemory(ptr, size);\n      return ptr;\n    };\n    var MEMFS = {\n      ops_table: null,\n      mount(mount) {\n        return MEMFS.createNode(null, '/', 16384 | 511, 0);\n      },\n      createNode(parent, name, mode, dev) {\n        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {\n          throw new FS.ErrnoError(63);\n        }\n        MEMFS.ops_table ||= {\n          dir: {\n            node: {\n              getattr: MEMFS.node_ops.getattr,\n              setattr: MEMFS.node_ops.setattr,\n              lookup: MEMFS.node_ops.lookup,\n              mknod: MEMFS.node_ops.mknod,\n              rename: MEMFS.node_ops.rename,\n              unlink: MEMFS.node_ops.unlink,\n              rmdir: MEMFS.node_ops.rmdir,\n              readdir: MEMFS.node_ops.readdir,\n              symlink: MEMFS.node_ops.symlink,\n            },\n            stream: {\n              llseek: MEMFS.stream_ops.llseek,\n            },\n          },\n          file: {\n            node: {\n              getattr: MEMFS.node_ops.getattr,\n              setattr: MEMFS.node_ops.setattr,\n            },\n            stream: {\n              llseek: MEMFS.stream_ops.llseek,\n              read: MEMFS.stream_ops.read,\n              write: MEMFS.stream_ops.write,\n              allocate: MEMFS.stream_ops.allocate,\n              mmap: MEMFS.stream_ops.mmap,\n              msync: MEMFS.stream_ops.msync,\n            },\n          },\n          link: {\n            node: {\n              getattr: MEMFS.node_ops.getattr,\n              setattr: MEMFS.node_ops.setattr,\n              readlink: MEMFS.node_ops.readlink,\n            },\n            stream: {},\n          },\n          chrdev: {\n            node: {\n              getattr: MEMFS.node_ops.getattr,\n              setattr: MEMFS.node_ops.setattr,\n            },\n            stream: FS.chrdev_stream_ops,\n          },\n        };\n        var node = FS.createNode(parent, name, mode, dev);\n        if (FS.isDir(node.mode)) {\n          node.node_ops = MEMFS.ops_table.dir.node;\n          node.stream_ops = MEMFS.ops_table.dir.stream;\n          node.contents = {};\n        } else if (FS.isFile(node.mode)) {\n          node.node_ops = MEMFS.ops_table.file.node;\n          node.stream_ops = MEMFS.ops_table.file.stream;\n          node.usedBytes = 0;\n\n          node.contents = null;\n        } else if (FS.isLink(node.mode)) {\n          node.node_ops = MEMFS.ops_table.link.node;\n          node.stream_ops = MEMFS.ops_table.link.stream;\n        } else if (FS.isChrdev(node.mode)) {\n          node.node_ops = MEMFS.ops_table.chrdev.node;\n          node.stream_ops = MEMFS.ops_table.chrdev.stream;\n        }\n        node.timestamp = Date.now();\n\n        if (parent) {\n          parent.contents[name] = node;\n          parent.timestamp = node.timestamp;\n        }\n        return node;\n      },\n      getFileDataAsTypedArray(node) {\n        if (!node.contents) return new Uint8Array(0);\n        if (node.contents.subarray)\n          return node.contents.subarray(0, node.usedBytes);\n        return new Uint8Array(node.contents);\n      },\n      expandFileStorage(node, newCapacity) {\n        var prevCapacity = node.contents ? node.contents.length : 0;\n        if (prevCapacity >= newCapacity) return;\n\n        var CAPACITY_DOUBLING_MAX = 1024 * 1024;\n        newCapacity = Math.max(\n          newCapacity,\n          (prevCapacity *\n            (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) >>>\n            0,\n        );\n        if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256);\n        var oldContents = node.contents;\n        node.contents = new Uint8Array(newCapacity);\n        if (node.usedBytes > 0)\n          node.contents.set(oldContents.subarray(0, node.usedBytes), 0);\n      },\n      resizeFileStorage(node, newSize) {\n        if (node.usedBytes == newSize) return;\n        if (newSize == 0) {\n          node.contents = null;\n          node.usedBytes = 0;\n        } else {\n          var oldContents = node.contents;\n          node.contents = new Uint8Array(newSize);\n          if (oldContents) {\n            node.contents.set(\n              oldContents.subarray(0, Math.min(newSize, node.usedBytes)),\n            );\n          }\n          node.usedBytes = newSize;\n        }\n      },\n      node_ops: {\n        getattr(node) {\n          var attr = {};\n\n          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;\n          attr.ino = node.id;\n          attr.mode = node.mode;\n          attr.nlink = 1;\n          attr.uid = 0;\n          attr.gid = 0;\n          attr.rdev = node.rdev;\n          if (FS.isDir(node.mode)) {\n            attr.size = 4096;\n          } else if (FS.isFile(node.mode)) {\n            attr.size = node.usedBytes;\n          } else if (FS.isLink(node.mode)) {\n            attr.size = node.link.length;\n          } else {\n            attr.size = 0;\n          }\n          attr.atime = new Date(node.timestamp);\n          attr.mtime = new Date(node.timestamp);\n          attr.ctime = new Date(node.timestamp);\n\n          attr.blksize = 4096;\n          attr.blocks = Math.ceil(attr.size / attr.blksize);\n          return attr;\n        },\n        setattr(node, attr) {\n          if (attr.mode !== undefined) {\n            node.mode = attr.mode;\n          }\n          if (attr.timestamp !== undefined) {\n            node.timestamp = attr.timestamp;\n          }\n          if (attr.size !== undefined) {\n            MEMFS.resizeFileStorage(node, attr.size);\n          }\n        },\n        lookup(parent, name) {\n          throw FS.genericErrors[44];\n        },\n        mknod(parent, name, mode, dev) {\n          return MEMFS.createNode(parent, name, mode, dev);\n        },\n        rename(old_node, new_dir, new_name) {\n          if (FS.isDir(old_node.mode)) {\n            var new_node;\n            try {\n              new_node = FS.lookupNode(new_dir, new_name);\n            } catch (e) {}\n            if (new_node) {\n              for (var i in new_node.contents) {\n                throw new FS.ErrnoError(55);\n              }\n            }\n          }\n\n          delete old_node.parent.contents[old_node.name];\n          old_node.parent.timestamp = Date.now();\n          old_node.name = new_name;\n          new_dir.contents[new_name] = old_node;\n          new_dir.timestamp = old_node.parent.timestamp;\n        },\n        unlink(parent, name) {\n          delete parent.contents[name];\n          parent.timestamp = Date.now();\n        },\n        rmdir(parent, name) {\n          var node = FS.lookupNode(parent, name);\n          for (var i in node.contents) {\n            throw new FS.ErrnoError(55);\n          }\n          delete parent.contents[name];\n          parent.timestamp = Date.now();\n        },\n        readdir(node) {\n          var entries = ['.', '..'];\n          for (var key of Object.keys(node.contents)) {\n            entries.push(key);\n          }\n          return entries;\n        },\n        symlink(parent, newname, oldpath) {\n          var node = MEMFS.createNode(parent, newname, 511 | 40960, 0);\n          node.link = oldpath;\n          return node;\n        },\n        readlink(node) {\n          if (!FS.isLink(node.mode)) {\n            throw new FS.ErrnoError(28);\n          }\n          return node.link;\n        },\n      },\n      stream_ops: {\n        read(stream, buffer, offset, length, position) {\n          var contents = stream.node.contents;\n          if (position >= stream.node.usedBytes) return 0;\n          var size = Math.min(stream.node.usedBytes - position, length);\n          if (size > 8 && contents.subarray) {\n            buffer.set(contents.subarray(position, position + size), offset);\n          } else {\n            for (var i = 0; i < size; i++)\n              buffer[offset + i] = contents[position + i];\n          }\n          return size;\n        },\n        write(stream, buffer, offset, length, position, canOwn) {\n          if (buffer.buffer === HEAP8.buffer) {\n            canOwn = false;\n          }\n\n          if (!length) return 0;\n          var node = stream.node;\n          node.timestamp = Date.now();\n\n          if (buffer.subarray && (!node.contents || node.contents.subarray)) {\n            if (canOwn) {\n              node.contents = buffer.subarray(offset, offset + length);\n              node.usedBytes = length;\n              return length;\n            } else if (node.usedBytes === 0 && position === 0) {\n              node.contents = buffer.slice(offset, offset + length);\n              node.usedBytes = length;\n              return length;\n            } else if (position + length <= node.usedBytes) {\n              node.contents.set(\n                buffer.subarray(offset, offset + length),\n                position,\n              );\n              return length;\n            }\n          }\n\n          MEMFS.expandFileStorage(node, position + length);\n          if (node.contents.subarray && buffer.subarray) {\n            node.contents.set(\n              buffer.subarray(offset, offset + length),\n              position,\n            );\n          } else {\n            for (var i = 0; i < length; i++) {\n              node.contents[position + i] = buffer[offset + i];\n            }\n          }\n          node.usedBytes = Math.max(node.usedBytes, position + length);\n          return length;\n        },\n        llseek(stream, offset, whence) {\n          var position = offset;\n          if (whence === 1) {\n            position += stream.position;\n          } else if (whence === 2) {\n            if (FS.isFile(stream.node.mode)) {\n              position += stream.node.usedBytes;\n            }\n          }\n          if (position < 0) {\n            throw new FS.ErrnoError(28);\n          }\n          return position;\n        },\n        allocate(stream, offset, length) {\n          MEMFS.expandFileStorage(stream.node, offset + length);\n          stream.node.usedBytes = Math.max(\n            stream.node.usedBytes,\n            offset + length,\n          );\n        },\n        mmap(stream, length, position, prot, flags) {\n          if (!FS.isFile(stream.node.mode)) {\n            throw new FS.ErrnoError(43);\n          }\n          var ptr;\n          var allocated;\n          var contents = stream.node.contents;\n\n          if (!(flags & 2) && contents && contents.buffer === HEAP8.buffer) {\n            allocated = false;\n            ptr = contents.byteOffset;\n          } else {\n            allocated = true;\n            ptr = mmapAlloc(length);\n            if (!ptr) {\n              throw new FS.ErrnoError(48);\n            }\n            if (contents) {\n              if (position > 0 || position + length < contents.length) {\n                if (contents.subarray) {\n                  contents = contents.subarray(position, position + length);\n                } else {\n                  contents = Array.prototype.slice.call(\n                    contents,\n                    position,\n                    position + length,\n                  );\n                }\n              }\n              HEAP8.set(contents, ptr);\n            }\n          }\n          return { ptr, allocated };\n        },\n        msync(stream, buffer, offset, length, mmapFlags) {\n          MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);\n\n          return 0;\n        },\n      },\n    };\n\n    var asyncLoad = (url, onload, onerror, noRunDep) => {\n      var dep = !noRunDep ? getUniqueRunDependency(`al ${url}`) : '';\n      readAsync(url).then(\n        (arrayBuffer) => {\n          onload(new Uint8Array(arrayBuffer));\n          if (dep) removeRunDependency(dep);\n        },\n        (err) => {\n          if (onerror) {\n            onerror();\n          } else {\n            throw `Loading data file \"${url}\" failed.`;\n          }\n        },\n      );\n      if (dep) addRunDependency(dep);\n    };\n\n    var FS_createDataFile = (\n      parent,\n      name,\n      fileData,\n      canRead,\n      canWrite,\n      canOwn,\n    ) => {\n      FS.createDataFile(parent, name, fileData, canRead, canWrite, canOwn);\n    };\n\n    var preloadPlugins = Module['preloadPlugins'] || [];\n    var FS_handledByPreloadPlugin = (byteArray, fullname, finish, onerror) => {\n      if (typeof Browser != 'undefined') Browser.init();\n\n      var handled = false;\n      preloadPlugins.forEach((plugin) => {\n        if (handled) return;\n        if (plugin['canHandle'](fullname)) {\n          plugin['handle'](byteArray, fullname, finish, onerror);\n          handled = true;\n        }\n      });\n      return handled;\n    };\n    var FS_createPreloadedFile = (\n      parent,\n      name,\n      url,\n      canRead,\n      canWrite,\n      onload,\n      onerror,\n      dontCreateFile,\n      canOwn,\n      preFinish,\n    ) => {\n      var fullname = name ? PATH_FS.resolve(PATH.join2(parent, name)) : parent;\n      var dep = getUniqueRunDependency(`cp ${fullname}`);\n      function processData(byteArray) {\n        function finish(byteArray) {\n          preFinish?.();\n          if (!dontCreateFile) {\n            FS_createDataFile(\n              parent,\n              name,\n              byteArray,\n              canRead,\n              canWrite,\n              canOwn,\n            );\n          }\n          onload?.();\n          removeRunDependency(dep);\n        }\n        if (\n          FS_handledByPreloadPlugin(byteArray, fullname, finish, () => {\n            onerror?.();\n            removeRunDependency(dep);\n          })\n        ) {\n          return;\n        }\n        finish(byteArray);\n      }\n      addRunDependency(dep);\n      if (typeof url == 'string') {\n        asyncLoad(url, processData, onerror);\n      } else {\n        processData(url);\n      }\n    };\n\n    var FS_modeStringToFlags = (str) => {\n      var flagModes = {\n        r: 0,\n        'r+': 2,\n        w: 512 | 64 | 1,\n        'w+': 512 | 64 | 2,\n        a: 1024 | 64 | 1,\n        'a+': 1024 | 64 | 2,\n      };\n      var flags = flagModes[str];\n      if (typeof flags == 'undefined') {\n        throw new Error(`Unknown file open mode: ${str}`);\n      }\n      return flags;\n    };\n\n    var FS_getMode = (canRead, canWrite) => {\n      var mode = 0;\n      if (canRead) mode |= 292 | 73;\n      if (canWrite) mode |= 146;\n      return mode;\n    };\n\n    var FS = {\n      root: null,\n      mounts: [],\n      devices: {},\n      streams: [],\n      nextInode: 1,\n      nameTable: null,\n      currentPath: '/',\n      initialized: false,\n      ignorePermissions: true,\n      ErrnoError: class {\n        constructor(errno) {\n          this.name = 'ErrnoError';\n          this.errno = errno;\n        }\n      },\n      genericErrors: {},\n      filesystems: null,\n      syncFSRequests: 0,\n      readFiles: {},\n      FSStream: class {\n        constructor() {\n          this.shared = {};\n        }\n        get object() {\n          return this.node;\n        }\n        set object(val) {\n          this.node = val;\n        }\n        get isRead() {\n          return (this.flags & 2097155) !== 1;\n        }\n        get isWrite() {\n          return (this.flags & 2097155) !== 0;\n        }\n        get isAppend() {\n          return this.flags & 1024;\n        }\n        get flags() {\n          return this.shared.flags;\n        }\n        set flags(val) {\n          this.shared.flags = val;\n        }\n        get position() {\n          return this.shared.position;\n        }\n        set position(val) {\n          this.shared.position = val;\n        }\n      },\n      FSNode: class {\n        constructor(parent, name, mode, rdev) {\n          if (!parent) {\n            parent = this;\n          }\n          this.parent = parent;\n          this.mount = parent.mount;\n          this.mounted = null;\n          this.id = FS.nextInode++;\n          this.name = name;\n          this.mode = mode;\n          this.node_ops = {};\n          this.stream_ops = {};\n          this.rdev = rdev;\n          this.readMode = 292 | 73;\n          this.writeMode = 146;\n        }\n        get read() {\n          return (this.mode & this.readMode) === this.readMode;\n        }\n        set read(val) {\n          val ? (this.mode |= this.readMode) : (this.mode &= ~this.readMode);\n        }\n        get write() {\n          return (this.mode & this.writeMode) === this.writeMode;\n        }\n        set write(val) {\n          val ? (this.mode |= this.writeMode) : (this.mode &= ~this.writeMode);\n        }\n        get isFolder() {\n          return FS.isDir(this.mode);\n        }\n        get isDevice() {\n          return FS.isChrdev(this.mode);\n        }\n      },\n      lookupPath(path, opts = {}) {\n        path = PATH_FS.resolve(path);\n\n        if (!path) return { path: '', node: null };\n\n        var defaults = {\n          follow_mount: true,\n          recurse_count: 0,\n        };\n        opts = Object.assign(defaults, opts);\n\n        if (opts.recurse_count > 8) {\n          throw new FS.ErrnoError(32);\n        }\n\n        var parts = path.split('/').filter((p) => !!p);\n\n        var current = FS.root;\n        var current_path = '/';\n\n        for (var i = 0; i < parts.length; i++) {\n          var islast = i === parts.length - 1;\n          if (islast && opts.parent) {\n            break;\n          }\n\n          current = FS.lookupNode(current, parts[i]);\n          current_path = PATH.join2(current_path, parts[i]);\n\n          if (FS.isMountpoint(current)) {\n            if (!islast || (islast && opts.follow_mount)) {\n              current = current.mounted.root;\n            }\n          }\n\n          if (!islast || opts.follow) {\n            var count = 0;\n            while (FS.isLink(current.mode)) {\n              var link = FS.readlink(current_path);\n              current_path = PATH_FS.resolve(PATH.dirname(current_path), link);\n\n              var lookup = FS.lookupPath(current_path, {\n                recurse_count: opts.recurse_count + 1,\n              });\n              current = lookup.node;\n\n              if (count++ > 40) {\n                throw new FS.ErrnoError(32);\n              }\n            }\n          }\n        }\n\n        return { path: current_path, node: current };\n      },\n      getPath(node) {\n        var path;\n        while (true) {\n          if (FS.isRoot(node)) {\n            var mount = node.mount.mountpoint;\n            if (!path) return mount;\n            return mount[mount.length - 1] !== '/'\n              ? `${mount}/${path}`\n              : mount + path;\n          }\n          path = path ? `${node.name}/${path}` : node.name;\n          node = node.parent;\n        }\n      },\n      hashName(parentid, name) {\n        var hash = 0;\n\n        for (var i = 0; i < name.length; i++) {\n          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;\n        }\n        return ((parentid + hash) >>> 0) % FS.nameTable.length;\n      },\n      hashAddNode(node) {\n        var hash = FS.hashName(node.parent.id, node.name);\n        node.name_next = FS.nameTable[hash];\n        FS.nameTable[hash] = node;\n      },\n      hashRemoveNode(node) {\n        var hash = FS.hashName(node.parent.id, node.name);\n        if (FS.nameTable[hash] === node) {\n          FS.nameTable[hash] = node.name_next;\n        } else {\n          var current = FS.nameTable[hash];\n          while (current) {\n            if (current.name_next === node) {\n              current.name_next = node.name_next;\n              break;\n            }\n            current = current.name_next;\n          }\n        }\n      },\n      lookupNode(parent, name) {\n        var errCode = FS.mayLookup(parent);\n        if (errCode) {\n          throw new FS.ErrnoError(errCode);\n        }\n        var hash = FS.hashName(parent.id, name);\n        for (var node = FS.nameTable[hash]; node; node = node.name_next) {\n          var nodeName = node.name;\n          if (node.parent.id === parent.id && nodeName === name) {\n            return node;\n          }\n        }\n\n        return FS.lookup(parent, name);\n      },\n      createNode(parent, name, mode, rdev) {\n        var node = new FS.FSNode(parent, name, mode, rdev);\n\n        FS.hashAddNode(node);\n\n        return node;\n      },\n      destroyNode(node) {\n        FS.hashRemoveNode(node);\n      },\n      isRoot(node) {\n        return node === node.parent;\n      },\n      isMountpoint(node) {\n        return !!node.mounted;\n      },\n      isFile(mode) {\n        return (mode & 61440) === 32768;\n      },\n      isDir(mode) {\n        return (mode & 61440) === 16384;\n      },\n      isLink(mode) {\n        return (mode & 61440) === 40960;\n      },\n      isChrdev(mode) {\n        return (mode & 61440) === 8192;\n      },\n      isBlkdev(mode) {\n        return (mode & 61440) === 24576;\n      },\n      isFIFO(mode) {\n        return (mode & 61440) === 4096;\n      },\n      isSocket(mode) {\n        return (mode & 49152) === 49152;\n      },\n      flagsToPermissionString(flag) {\n        var perms = ['r', 'w', 'rw'][flag & 3];\n        if (flag & 512) {\n          perms += 'w';\n        }\n        return perms;\n      },\n      nodePermissions(node, perms) {\n        if (FS.ignorePermissions) {\n          return 0;\n        }\n\n        if (perms.includes('r') && !(node.mode & 292)) {\n          return 2;\n        } else if (perms.includes('w') && !(node.mode & 146)) {\n          return 2;\n        } else if (perms.includes('x') && !(node.mode & 73)) {\n          return 2;\n        }\n        return 0;\n      },\n      mayLookup(dir) {\n        if (!FS.isDir(dir.mode)) return 54;\n        var errCode = FS.nodePermissions(dir, 'x');\n        if (errCode) return errCode;\n        if (!dir.node_ops.lookup) return 2;\n        return 0;\n      },\n      mayCreate(dir, name) {\n        try {\n          var node = FS.lookupNode(dir, name);\n          return 20;\n        } catch (e) {}\n        return FS.nodePermissions(dir, 'wx');\n      },\n      mayDelete(dir, name, isdir) {\n        var node;\n        try {\n          node = FS.lookupNode(dir, name);\n        } catch (e) {\n          return e.errno;\n        }\n        var errCode = FS.nodePermissions(dir, 'wx');\n        if (errCode) {\n          return errCode;\n        }\n        if (isdir) {\n          if (!FS.isDir(node.mode)) {\n            return 54;\n          }\n          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {\n            return 10;\n          }\n        } else {\n          if (FS.isDir(node.mode)) {\n            return 31;\n          }\n        }\n        return 0;\n      },\n      mayOpen(node, flags) {\n        if (!node) {\n          return 44;\n        }\n        if (FS.isLink(node.mode)) {\n          return 32;\n        } else if (FS.isDir(node.mode)) {\n          if (FS.flagsToPermissionString(flags) !== 'r' || flags & 512) {\n            return 31;\n          }\n        }\n        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));\n      },\n      MAX_OPEN_FDS: 4096,\n      nextfd() {\n        for (var fd = 0; fd <= FS.MAX_OPEN_FDS; fd++) {\n          if (!FS.streams[fd]) {\n            return fd;\n          }\n        }\n        throw new FS.ErrnoError(33);\n      },\n      getStreamChecked(fd) {\n        var stream = FS.getStream(fd);\n        if (!stream) {\n          throw new FS.ErrnoError(8);\n        }\n        return stream;\n      },\n      getStream: (fd) => FS.streams[fd],\n      createStream(stream, fd = -1) {\n        stream = Object.assign(new FS.FSStream(), stream);\n        if (fd == -1) {\n          fd = FS.nextfd();\n        }\n        stream.fd = fd;\n        FS.streams[fd] = stream;\n        return stream;\n      },\n      closeStream(fd) {\n        FS.streams[fd] = null;\n      },\n      dupStream(origStream, fd = -1) {\n        var stream = FS.createStream(origStream, fd);\n        stream.stream_ops?.dup?.(stream);\n        return stream;\n      },\n      chrdev_stream_ops: {\n        open(stream) {\n          var device = FS.getDevice(stream.node.rdev);\n\n          stream.stream_ops = device.stream_ops;\n\n          stream.stream_ops.open?.(stream);\n        },\n        llseek() {\n          throw new FS.ErrnoError(70);\n        },\n      },\n      major: (dev) => dev >> 8,\n      minor: (dev) => dev & 0xff,\n      makedev: (ma, mi) => (ma << 8) | mi,\n      registerDevice(dev, ops) {\n        FS.devices[dev] = { stream_ops: ops };\n      },\n      getDevice: (dev) => FS.devices[dev],\n      getMounts(mount) {\n        var mounts = [];\n        var check = [mount];\n\n        while (check.length) {\n          var m = check.pop();\n\n          mounts.push(m);\n\n          check.push(...m.mounts);\n        }\n\n        return mounts;\n      },\n      syncfs(populate, callback) {\n        if (typeof populate == 'function') {\n          callback = populate;\n          populate = false;\n        }\n\n        FS.syncFSRequests++;\n\n        if (FS.syncFSRequests > 1) {\n          err(\n            `warning: ${FS.syncFSRequests} FS.syncfs operations in flight at once, probably just doing extra work`,\n          );\n        }\n\n        var mounts = FS.getMounts(FS.root.mount);\n        var completed = 0;\n\n        function doCallback(errCode) {\n          FS.syncFSRequests--;\n          return callback(errCode);\n        }\n\n        function done(errCode) {\n          if (errCode) {\n            if (!done.errored) {\n              done.errored = true;\n              return doCallback(errCode);\n            }\n            return;\n          }\n          if (++completed >= mounts.length) {\n            doCallback(null);\n          }\n        }\n\n        mounts.forEach((mount) => {\n          if (!mount.type.syncfs) {\n            return done(null);\n          }\n          mount.type.syncfs(mount, populate, done);\n        });\n      },\n      mount(type, opts, mountpoint) {\n        var root = mountpoint === '/';\n        var pseudo = !mountpoint;\n        var node;\n\n        if (root && FS.root) {\n          throw new FS.ErrnoError(10);\n        } else if (!root && !pseudo) {\n          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });\n\n          mountpoint = lookup.path;\n          node = lookup.node;\n\n          if (FS.isMountpoint(node)) {\n            throw new FS.ErrnoError(10);\n          }\n\n          if (!FS.isDir(node.mode)) {\n            throw new FS.ErrnoError(54);\n          }\n        }\n\n        var mount = {\n          type,\n          opts,\n          mountpoint,\n          mounts: [],\n        };\n\n        var mountRoot = type.mount(mount);\n        mountRoot.mount = mount;\n        mount.root = mountRoot;\n\n        if (root) {\n          FS.root = mountRoot;\n        } else if (node) {\n          node.mounted = mount;\n\n          if (node.mount) {\n            node.mount.mounts.push(mount);\n          }\n        }\n\n        return mountRoot;\n      },\n      unmount(mountpoint) {\n        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });\n\n        if (!FS.isMountpoint(lookup.node)) {\n          throw new FS.ErrnoError(28);\n        }\n\n        var node = lookup.node;\n        var mount = node.mounted;\n        var mounts = FS.getMounts(mount);\n\n        Object.keys(FS.nameTable).forEach((hash) => {\n          var current = FS.nameTable[hash];\n\n          while (current) {\n            var next = current.name_next;\n\n            if (mounts.includes(current.mount)) {\n              FS.destroyNode(current);\n            }\n\n            current = next;\n          }\n        });\n\n        node.mounted = null;\n\n        var idx = node.mount.mounts.indexOf(mount);\n        node.mount.mounts.splice(idx, 1);\n      },\n      lookup(parent, name) {\n        return parent.node_ops.lookup(parent, name);\n      },\n      mknod(path, mode, dev) {\n        var lookup = FS.lookupPath(path, { parent: true });\n        var parent = lookup.node;\n        var name = PATH.basename(path);\n        if (!name || name === '.' || name === '..') {\n          throw new FS.ErrnoError(28);\n        }\n        var errCode = FS.mayCreate(parent, name);\n        if (errCode) {\n          throw new FS.ErrnoError(errCode);\n        }\n        if (!parent.node_ops.mknod) {\n          throw new FS.ErrnoError(63);\n        }\n        return parent.node_ops.mknod(parent, name, mode, dev);\n      },\n      create(path, mode) {\n        mode = mode !== undefined ? mode : 438;\n        mode &= 4095;\n        mode |= 32768;\n        return FS.mknod(path, mode, 0);\n      },\n      mkdir(path, mode) {\n        mode = mode !== undefined ? mode : 511;\n        mode &= 511 | 512;\n        mode |= 16384;\n        return FS.mknod(path, mode, 0);\n      },\n      mkdirTree(path, mode) {\n        var dirs = path.split('/');\n        var d = '';\n        for (var i = 0; i < dirs.length; ++i) {\n          if (!dirs[i]) continue;\n          d += '/' + dirs[i];\n          try {\n            FS.mkdir(d, mode);\n          } catch (e) {\n            if (e.errno != 20) throw e;\n          }\n        }\n      },\n      mkdev(path, mode, dev) {\n        if (typeof dev == 'undefined') {\n          dev = mode;\n          mode = 438;\n        }\n        mode |= 8192;\n        return FS.mknod(path, mode, dev);\n      },\n      symlink(oldpath, newpath) {\n        if (!PATH_FS.resolve(oldpath)) {\n          throw new FS.ErrnoError(44);\n        }\n        var lookup = FS.lookupPath(newpath, { parent: true });\n        var parent = lookup.node;\n        if (!parent) {\n          throw new FS.ErrnoError(44);\n        }\n        var newname = PATH.basename(newpath);\n        var errCode = FS.mayCreate(parent, newname);\n        if (errCode) {\n          throw new FS.ErrnoError(errCode);\n        }\n        if (!parent.node_ops.symlink) {\n          throw new FS.ErrnoError(63);\n        }\n        return parent.node_ops.symlink(parent, newname, oldpath);\n      },\n      rename(old_path, new_path) {\n        var old_dirname = PATH.dirname(old_path);\n        var new_dirname = PATH.dirname(new_path);\n        var old_name = PATH.basename(old_path);\n        var new_name = PATH.basename(new_path);\n\n        var lookup, old_dir, new_dir;\n\n        lookup = FS.lookupPath(old_path, { parent: true });\n        old_dir = lookup.node;\n        lookup = FS.lookupPath(new_path, { parent: true });\n        new_dir = lookup.node;\n\n        if (!old_dir || !new_dir) throw new FS.ErrnoError(44);\n\n        if (old_dir.mount !== new_dir.mount) {\n          throw new FS.ErrnoError(75);\n        }\n\n        var old_node = FS.lookupNode(old_dir, old_name);\n\n        var relative = PATH_FS.relative(old_path, new_dirname);\n        if (relative.charAt(0) !== '.') {\n          throw new FS.ErrnoError(28);\n        }\n\n        relative = PATH_FS.relative(new_path, old_dirname);\n        if (relative.charAt(0) !== '.') {\n          throw new FS.ErrnoError(55);\n        }\n\n        var new_node;\n        try {\n          new_node = FS.lookupNode(new_dir, new_name);\n        } catch (e) {}\n\n        if (old_node === new_node) {\n          return;\n        }\n\n        var isdir = FS.isDir(old_node.mode);\n        var errCode = FS.mayDelete(old_dir, old_name, isdir);\n        if (errCode) {\n          throw new FS.ErrnoError(errCode);\n        }\n\n        errCode = new_node\n          ? FS.mayDelete(new_dir, new_name, isdir)\n          : FS.mayCreate(new_dir, new_name);\n        if (errCode) {\n          throw new FS.ErrnoError(errCode);\n        }\n        if (!old_dir.node_ops.rename) {\n          throw new FS.ErrnoError(63);\n        }\n        if (\n          FS.isMountpoint(old_node) ||\n          (new_node && FS.isMountpoint(new_node))\n        ) {\n          throw new FS.ErrnoError(10);\n        }\n\n        if (new_dir !== old_dir) {\n          errCode = FS.nodePermissions(old_dir, 'w');\n          if (errCode) {\n            throw new FS.ErrnoError(errCode);\n          }\n        }\n\n        FS.hashRemoveNode(old_node);\n\n        try {\n          old_dir.node_ops.rename(old_node, new_dir, new_name);\n\n          old_node.parent = new_dir;\n        } catch (e) {\n          throw e;\n        } finally {\n          FS.hashAddNode(old_node);\n        }\n      },\n      rmdir(path) {\n        var lookup = FS.lookupPath(path, { parent: true });\n        var parent = lookup.node;\n        var name = PATH.basename(path);\n        var node = FS.lookupNode(parent, name);\n        var errCode = FS.mayDelete(parent, name, true);\n        if (errCode) {\n          throw new FS.ErrnoError(errCode);\n        }\n        if (!parent.node_ops.rmdir) {\n          throw new FS.ErrnoError(63);\n        }\n        if (FS.isMountpoint(node)) {\n          throw new FS.ErrnoError(10);\n        }\n        parent.node_ops.rmdir(parent, name);\n        FS.destroyNode(node);\n      },\n      readdir(path) {\n        var lookup = FS.lookupPath(path, { follow: true });\n        var node = lookup.node;\n        if (!node.node_ops.readdir) {\n          throw new FS.ErrnoError(54);\n        }\n        return node.node_ops.readdir(node);\n      },\n      unlink(path) {\n        var lookup = FS.lookupPath(path, { parent: true });\n        var parent = lookup.node;\n        if (!parent) {\n          throw new FS.ErrnoError(44);\n        }\n        var name = PATH.basename(path);\n        var node = FS.lookupNode(parent, name);\n        var errCode = FS.mayDelete(parent, name, false);\n        if (errCode) {\n          throw new FS.ErrnoError(errCode);\n        }\n        if (!parent.node_ops.unlink) {\n          throw new FS.ErrnoError(63);\n        }\n        if (FS.isMountpoint(node)) {\n          throw new FS.ErrnoError(10);\n        }\n        parent.node_ops.unlink(parent, name);\n        FS.destroyNode(node);\n      },\n      readlink(path) {\n        var lookup = FS.lookupPath(path);\n        var link = lookup.node;\n        if (!link) {\n          throw new FS.ErrnoError(44);\n        }\n        if (!link.node_ops.readlink) {\n          throw new FS.ErrnoError(28);\n        }\n        return PATH_FS.resolve(\n          FS.getPath(link.parent),\n          link.node_ops.readlink(link),\n        );\n      },\n      stat(path, dontFollow) {\n        var lookup = FS.lookupPath(path, { follow: !dontFollow });\n        var node = lookup.node;\n        if (!node) {\n          throw new FS.ErrnoError(44);\n        }\n        if (!node.node_ops.getattr) {\n          throw new FS.ErrnoError(63);\n        }\n        return node.node_ops.getattr(node);\n      },\n      lstat(path) {\n        return FS.stat(path, true);\n      },\n      chmod(path, mode, dontFollow) {\n        var node;\n        if (typeof path == 'string') {\n          var lookup = FS.lookupPath(path, { follow: !dontFollow });\n          node = lookup.node;\n        } else {\n          node = path;\n        }\n        if (!node.node_ops.setattr) {\n          throw new FS.ErrnoError(63);\n        }\n        node.node_ops.setattr(node, {\n          mode: (mode & 4095) | (node.mode & ~4095),\n          timestamp: Date.now(),\n        });\n      },\n      lchmod(path, mode) {\n        FS.chmod(path, mode, true);\n      },\n      fchmod(fd, mode) {\n        var stream = FS.getStreamChecked(fd);\n        FS.chmod(stream.node, mode);\n      },\n      chown(path, uid, gid, dontFollow) {\n        var node;\n        if (typeof path == 'string') {\n          var lookup = FS.lookupPath(path, { follow: !dontFollow });\n          node = lookup.node;\n        } else {\n          node = path;\n        }\n        if (!node.node_ops.setattr) {\n          throw new FS.ErrnoError(63);\n        }\n        node.node_ops.setattr(node, {\n          timestamp: Date.now(),\n        });\n      },\n      lchown(path, uid, gid) {\n        FS.chown(path, uid, gid, true);\n      },\n      fchown(fd, uid, gid) {\n        var stream = FS.getStreamChecked(fd);\n        FS.chown(stream.node, uid, gid);\n      },\n      truncate(path, len) {\n        if (len < 0) {\n          throw new FS.ErrnoError(28);\n        }\n        var node;\n        if (typeof path == 'string') {\n          var lookup = FS.lookupPath(path, { follow: true });\n          node = lookup.node;\n        } else {\n          node = path;\n        }\n        if (!node.node_ops.setattr) {\n          throw new FS.ErrnoError(63);\n        }\n        if (FS.isDir(node.mode)) {\n          throw new FS.ErrnoError(31);\n        }\n        if (!FS.isFile(node.mode)) {\n          throw new FS.ErrnoError(28);\n        }\n        var errCode = FS.nodePermissions(node, 'w');\n        if (errCode) {\n          throw new FS.ErrnoError(errCode);\n        }\n        node.node_ops.setattr(node, {\n          size: len,\n          timestamp: Date.now(),\n        });\n      },\n      ftruncate(fd, len) {\n        var stream = FS.getStreamChecked(fd);\n        if ((stream.flags & 2097155) === 0) {\n          throw new FS.ErrnoError(28);\n        }\n        FS.truncate(stream.node, len);\n      },\n      utime(path, atime, mtime) {\n        var lookup = FS.lookupPath(path, { follow: true });\n        var node = lookup.node;\n        node.node_ops.setattr(node, {\n          timestamp: Math.max(atime, mtime),\n        });\n      },\n      open(path, flags, mode) {\n        if (path === '') {\n          throw new FS.ErrnoError(44);\n        }\n        flags = typeof flags == 'string' ? FS_modeStringToFlags(flags) : flags;\n        if (flags & 64) {\n          mode = typeof mode == 'undefined' ? 438 : mode;\n          mode = (mode & 4095) | 32768;\n        } else {\n          mode = 0;\n        }\n        var node;\n        if (typeof path == 'object') {\n          node = path;\n        } else {\n          path = PATH.normalize(path);\n          try {\n            var lookup = FS.lookupPath(path, {\n              follow: !(flags & 131072),\n            });\n            node = lookup.node;\n          } catch (e) {}\n        }\n\n        var created = false;\n        if (flags & 64) {\n          if (node) {\n            if (flags & 128) {\n              throw new FS.ErrnoError(20);\n            }\n          } else {\n            node = FS.mknod(path, mode, 0);\n            created = true;\n          }\n        }\n        if (!node) {\n          throw new FS.ErrnoError(44);\n        }\n\n        if (FS.isChrdev(node.mode)) {\n          flags &= ~512;\n        }\n\n        if (flags & 65536 && !FS.isDir(node.mode)) {\n          throw new FS.ErrnoError(54);\n        }\n\n        if (!created) {\n          var errCode = FS.mayOpen(node, flags);\n          if (errCode) {\n            throw new FS.ErrnoError(errCode);\n          }\n        }\n\n        if (flags & 512 && !created) {\n          FS.truncate(node, 0);\n        }\n\n        flags &= ~(128 | 512 | 131072);\n\n        var stream = FS.createStream({\n          node,\n          path: FS.getPath(node),\n          flags,\n          seekable: true,\n          position: 0,\n          stream_ops: node.stream_ops,\n\n          ungotten: [],\n          error: false,\n        });\n\n        if (stream.stream_ops.open) {\n          stream.stream_ops.open(stream);\n        }\n        if (Module['logReadFiles'] && !(flags & 1)) {\n          if (!(path in FS.readFiles)) {\n            FS.readFiles[path] = 1;\n          }\n        }\n        return stream;\n      },\n      close(stream) {\n        if (FS.isClosed(stream)) {\n          throw new FS.ErrnoError(8);\n        }\n        if (stream.getdents) stream.getdents = null;\n        try {\n          if (stream.stream_ops.close) {\n            stream.stream_ops.close(stream);\n          }\n        } catch (e) {\n          throw e;\n        } finally {\n          FS.closeStream(stream.fd);\n        }\n        stream.fd = null;\n      },\n      isClosed(stream) {\n        return stream.fd === null;\n      },\n      llseek(stream, offset, whence) {\n        if (FS.isClosed(stream)) {\n          throw new FS.ErrnoError(8);\n        }\n        if (!stream.seekable || !stream.stream_ops.llseek) {\n          throw new FS.ErrnoError(70);\n        }\n        if (whence != 0 && whence != 1 && whence != 2) {\n          throw new FS.ErrnoError(28);\n        }\n        stream.position = stream.stream_ops.llseek(stream, offset, whence);\n        stream.ungotten = [];\n        return stream.position;\n      },\n      read(stream, buffer, offset, length, position) {\n        if (length < 0 || position < 0) {\n          throw new FS.ErrnoError(28);\n        }\n        if (FS.isClosed(stream)) {\n          throw new FS.ErrnoError(8);\n        }\n        if ((stream.flags & 2097155) === 1) {\n          throw new FS.ErrnoError(8);\n        }\n        if (FS.isDir(stream.node.mode)) {\n          throw new FS.ErrnoError(31);\n        }\n        if (!stream.stream_ops.read) {\n          throw new FS.ErrnoError(28);\n        }\n        var seeking = typeof position != 'undefined';\n        if (!seeking) {\n          position = stream.position;\n        } else if (!stream.seekable) {\n          throw new FS.ErrnoError(70);\n        }\n        var bytesRead = stream.stream_ops.read(\n          stream,\n          buffer,\n          offset,\n          length,\n          position,\n        );\n        if (!seeking) stream.position += bytesRead;\n        return bytesRead;\n      },\n      write(stream, buffer, offset, length, position, canOwn) {\n        if (length < 0 || position < 0) {\n          throw new FS.ErrnoError(28);\n        }\n        if (FS.isClosed(stream)) {\n          throw new FS.ErrnoError(8);\n        }\n        if ((stream.flags & 2097155) === 0) {\n          throw new FS.ErrnoError(8);\n        }\n        if (FS.isDir(stream.node.mode)) {\n          throw new FS.ErrnoError(31);\n        }\n        if (!stream.stream_ops.write) {\n          throw new FS.ErrnoError(28);\n        }\n        if (stream.seekable && stream.flags & 1024) {\n          FS.llseek(stream, 0, 2);\n        }\n        var seeking = typeof position != 'undefined';\n        if (!seeking) {\n          position = stream.position;\n        } else if (!stream.seekable) {\n          throw new FS.ErrnoError(70);\n        }\n        var bytesWritten = stream.stream_ops.write(\n          stream,\n          buffer,\n          offset,\n          length,\n          position,\n          canOwn,\n        );\n        if (!seeking) stream.position += bytesWritten;\n        return bytesWritten;\n      },\n      allocate(stream, offset, length) {\n        if (FS.isClosed(stream)) {\n          throw new FS.ErrnoError(8);\n        }\n        if (offset < 0 || length <= 0) {\n          throw new FS.ErrnoError(28);\n        }\n        if ((stream.flags & 2097155) === 0) {\n          throw new FS.ErrnoError(8);\n        }\n        if (!FS.isFile(stream.node.mode) && !FS.isDir(stream.node.mode)) {\n          throw new FS.ErrnoError(43);\n        }\n        if (!stream.stream_ops.allocate) {\n          throw new FS.ErrnoError(138);\n        }\n        stream.stream_ops.allocate(stream, offset, length);\n      },\n      mmap(stream, length, position, prot, flags) {\n        if (\n          (prot & 2) !== 0 &&\n          (flags & 2) === 0 &&\n          (stream.flags & 2097155) !== 2\n        ) {\n          throw new FS.ErrnoError(2);\n        }\n        if ((stream.flags & 2097155) === 1) {\n          throw new FS.ErrnoError(2);\n        }\n        if (!stream.stream_ops.mmap) {\n          throw new FS.ErrnoError(43);\n        }\n        if (!length) {\n          throw new FS.ErrnoError(28);\n        }\n        return stream.stream_ops.mmap(stream, length, position, prot, flags);\n      },\n      msync(stream, buffer, offset, length, mmapFlags) {\n        if (!stream.stream_ops.msync) {\n          return 0;\n        }\n        return stream.stream_ops.msync(\n          stream,\n          buffer,\n          offset,\n          length,\n          mmapFlags,\n        );\n      },\n      ioctl(stream, cmd, arg) {\n        if (!stream.stream_ops.ioctl) {\n          throw new FS.ErrnoError(59);\n        }\n        return stream.stream_ops.ioctl(stream, cmd, arg);\n      },\n      readFile(path, opts = {}) {\n        opts.flags = opts.flags || 0;\n        opts.encoding = opts.encoding || 'binary';\n        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {\n          throw new Error(`Invalid encoding type \"${opts.encoding}\"`);\n        }\n        var ret;\n        var stream = FS.open(path, opts.flags);\n        var stat = FS.stat(path);\n        var length = stat.size;\n        var buf = new Uint8Array(length);\n        FS.read(stream, buf, 0, length, 0);\n        if (opts.encoding === 'utf8') {\n          ret = UTF8ArrayToString(buf);\n        } else if (opts.encoding === 'binary') {\n          ret = buf;\n        }\n        FS.close(stream);\n        return ret;\n      },\n      writeFile(path, data, opts = {}) {\n        opts.flags = opts.flags || 577;\n        var stream = FS.open(path, opts.flags, opts.mode);\n        if (typeof data == 'string') {\n          var buf = new Uint8Array(lengthBytesUTF8(data) + 1);\n          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);\n          FS.write(stream, buf, 0, actualNumBytes, undefined, opts.canOwn);\n        } else if (ArrayBuffer.isView(data)) {\n          FS.write(stream, data, 0, data.byteLength, undefined, opts.canOwn);\n        } else {\n          throw new Error('Unsupported data type');\n        }\n        FS.close(stream);\n      },\n      cwd: () => FS.currentPath,\n      chdir(path) {\n        var lookup = FS.lookupPath(path, { follow: true });\n        if (lookup.node === null) {\n          throw new FS.ErrnoError(44);\n        }\n        if (!FS.isDir(lookup.node.mode)) {\n          throw new FS.ErrnoError(54);\n        }\n        var errCode = FS.nodePermissions(lookup.node, 'x');\n        if (errCode) {\n          throw new FS.ErrnoError(errCode);\n        }\n        FS.currentPath = lookup.path;\n      },\n      createDefaultDirectories() {\n        FS.mkdir('/tmp');\n        FS.mkdir('/home');\n        FS.mkdir('/home/web_user');\n      },\n      createDefaultDevices() {\n        FS.mkdir('/dev');\n\n        FS.registerDevice(FS.makedev(1, 3), {\n          read: () => 0,\n          write: (stream, buffer, offset, length, pos) => length,\n        });\n        FS.mkdev('/dev/null', FS.makedev(1, 3));\n\n        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);\n        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);\n        FS.mkdev('/dev/tty', FS.makedev(5, 0));\n        FS.mkdev('/dev/tty1', FS.makedev(6, 0));\n\n        var randomBuffer = new Uint8Array(1024),\n          randomLeft = 0;\n        var randomByte = () => {\n          if (randomLeft === 0) {\n            randomLeft = randomFill(randomBuffer).byteLength;\n          }\n          return randomBuffer[--randomLeft];\n        };\n        FS.createDevice('/dev', 'random', randomByte);\n        FS.createDevice('/dev', 'urandom', randomByte);\n\n        FS.mkdir('/dev/shm');\n        FS.mkdir('/dev/shm/tmp');\n      },\n      createSpecialDirectories() {\n        FS.mkdir('/proc');\n        var proc_self = FS.mkdir('/proc/self');\n        FS.mkdir('/proc/self/fd');\n        FS.mount(\n          {\n            mount() {\n              var node = FS.createNode(proc_self, 'fd', 16384 | 511, 73);\n              node.node_ops = {\n                lookup(parent, name) {\n                  var fd = +name;\n                  var stream = FS.getStreamChecked(fd);\n                  var ret = {\n                    parent: null,\n                    mount: { mountpoint: 'fake' },\n                    node_ops: { readlink: () => stream.path },\n                  };\n                  ret.parent = ret;\n                  return ret;\n                },\n              };\n              return node;\n            },\n          },\n          {},\n          '/proc/self/fd',\n        );\n      },\n      createStandardStreams(input, output, error) {\n        if (input) {\n          FS.createDevice('/dev', 'stdin', input);\n        } else {\n          FS.symlink('/dev/tty', '/dev/stdin');\n        }\n        if (output) {\n          FS.createDevice('/dev', 'stdout', null, output);\n        } else {\n          FS.symlink('/dev/tty', '/dev/stdout');\n        }\n        if (error) {\n          FS.createDevice('/dev', 'stderr', null, error);\n        } else {\n          FS.symlink('/dev/tty1', '/dev/stderr');\n        }\n\n        var stdin = FS.open('/dev/stdin', 0);\n        var stdout = FS.open('/dev/stdout', 1);\n        var stderr = FS.open('/dev/stderr', 1);\n      },\n      staticInit() {\n        [44].forEach((code) => {\n          FS.genericErrors[code] = new FS.ErrnoError(code);\n          FS.genericErrors[code].stack = '<generic error, no stack>';\n        });\n\n        FS.nameTable = new Array(4096);\n\n        FS.mount(MEMFS, {}, '/');\n\n        FS.createDefaultDirectories();\n        FS.createDefaultDevices();\n        FS.createSpecialDirectories();\n\n        FS.filesystems = {\n          MEMFS: MEMFS,\n        };\n      },\n      init(input, output, error) {\n        FS.initialized = true;\n\n        input ??= Module['stdin'];\n        output ??= Module['stdout'];\n        error ??= Module['stderr'];\n\n        FS.createStandardStreams(input, output, error);\n      },\n      quit() {\n        FS.initialized = false;\n\n        for (var i = 0; i < FS.streams.length; i++) {\n          var stream = FS.streams[i];\n          if (!stream) {\n            continue;\n          }\n          FS.close(stream);\n        }\n      },\n      findObject(path, dontResolveLastLink) {\n        var ret = FS.analyzePath(path, dontResolveLastLink);\n        if (!ret.exists) {\n          return null;\n        }\n        return ret.object;\n      },\n      analyzePath(path, dontResolveLastLink) {\n        try {\n          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });\n          path = lookup.path;\n        } catch (e) {}\n        var ret = {\n          isRoot: false,\n          exists: false,\n          error: 0,\n          name: null,\n          path: null,\n          object: null,\n          parentExists: false,\n          parentPath: null,\n          parentObject: null,\n        };\n        try {\n          var lookup = FS.lookupPath(path, { parent: true });\n          ret.parentExists = true;\n          ret.parentPath = lookup.path;\n          ret.parentObject = lookup.node;\n          ret.name = PATH.basename(path);\n          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });\n          ret.exists = true;\n          ret.path = lookup.path;\n          ret.object = lookup.node;\n          ret.name = lookup.node.name;\n          ret.isRoot = lookup.path === '/';\n        } catch (e) {\n          ret.error = e.errno;\n        }\n        return ret;\n      },\n      createPath(parent, path, canRead, canWrite) {\n        parent = typeof parent == 'string' ? parent : FS.getPath(parent);\n        var parts = path.split('/').reverse();\n        while (parts.length) {\n          var part = parts.pop();\n          if (!part) continue;\n          var current = PATH.join2(parent, part);\n          try {\n            FS.mkdir(current);\n          } catch (e) {}\n          parent = current;\n        }\n        return current;\n      },\n      createFile(parent, name, properties, canRead, canWrite) {\n        var path = PATH.join2(\n          typeof parent == 'string' ? parent : FS.getPath(parent),\n          name,\n        );\n        var mode = FS_getMode(canRead, canWrite);\n        return FS.create(path, mode);\n      },\n      createDataFile(parent, name, data, canRead, canWrite, canOwn) {\n        var path = name;\n        if (parent) {\n          parent = typeof parent == 'string' ? parent : FS.getPath(parent);\n          path = name ? PATH.join2(parent, name) : parent;\n        }\n        var mode = FS_getMode(canRead, canWrite);\n        var node = FS.create(path, mode);\n        if (data) {\n          if (typeof data == 'string') {\n            var arr = new Array(data.length);\n            for (var i = 0, len = data.length; i < len; ++i)\n              arr[i] = data.charCodeAt(i);\n            data = arr;\n          }\n\n          FS.chmod(node, mode | 146);\n          var stream = FS.open(node, 577);\n          FS.write(stream, data, 0, data.length, 0, canOwn);\n          FS.close(stream);\n          FS.chmod(node, mode);\n        }\n      },\n      createDevice(parent, name, input, output) {\n        var path = PATH.join2(\n          typeof parent == 'string' ? parent : FS.getPath(parent),\n          name,\n        );\n        var mode = FS_getMode(!!input, !!output);\n        FS.createDevice.major ??= 64;\n        var dev = FS.makedev(FS.createDevice.major++, 0);\n\n        FS.registerDevice(dev, {\n          open(stream) {\n            stream.seekable = false;\n          },\n          close(stream) {\n            if (output?.buffer?.length) {\n              output(10);\n            }\n          },\n          read(stream, buffer, offset, length, pos) {\n            var bytesRead = 0;\n            for (var i = 0; i < length; i++) {\n              var result;\n              try {\n                result = input();\n              } catch (e) {\n                throw new FS.ErrnoError(29);\n              }\n              if (result === undefined && bytesRead === 0) {\n                throw new FS.ErrnoError(6);\n              }\n              if (result === null || result === undefined) break;\n              bytesRead++;\n              buffer[offset + i] = result;\n            }\n            if (bytesRead) {\n              stream.node.timestamp = Date.now();\n            }\n            return bytesRead;\n          },\n          write(stream, buffer, offset, length, pos) {\n            for (var i = 0; i < length; i++) {\n              try {\n                output(buffer[offset + i]);\n              } catch (e) {\n                throw new FS.ErrnoError(29);\n              }\n            }\n            if (length) {\n              stream.node.timestamp = Date.now();\n            }\n            return i;\n          },\n        });\n        return FS.mkdev(path, mode, dev);\n      },\n      forceLoadFile(obj) {\n        if (obj.isDevice || obj.isFolder || obj.link || obj.contents)\n          return true;\n        if (typeof XMLHttpRequest != 'undefined') {\n          throw new Error(\n            'Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.',\n          );\n        } else {\n          try {\n            obj.contents = readBinary(obj.url);\n            obj.usedBytes = obj.contents.length;\n          } catch (e) {\n            throw new FS.ErrnoError(29);\n          }\n        }\n      },\n      createLazyFile(parent, name, url, canRead, canWrite) {\n        class LazyUint8Array {\n          constructor() {\n            this.lengthKnown = false;\n            this.chunks = [];\n          }\n          get(idx) {\n            if (idx > this.length - 1 || idx < 0) {\n              return undefined;\n            }\n            var chunkOffset = idx % this.chunkSize;\n            var chunkNum = (idx / this.chunkSize) | 0;\n            return this.getter(chunkNum)[chunkOffset];\n          }\n          setDataGetter(getter) {\n            this.getter = getter;\n          }\n          cacheLength() {\n            var xhr = new XMLHttpRequest();\n            xhr.open('HEAD', url, false);\n            xhr.send(null);\n            if (\n              !((xhr.status >= 200 && xhr.status < 300) || xhr.status === 304)\n            )\n              throw new Error(\n                \"Couldn't load \" + url + '. Status: ' + xhr.status,\n              );\n            var datalength = Number(xhr.getResponseHeader('Content-length'));\n            var header;\n            var hasByteServing =\n              (header = xhr.getResponseHeader('Accept-Ranges')) &&\n              header === 'bytes';\n            var usesGzip =\n              (header = xhr.getResponseHeader('Content-Encoding')) &&\n              header === 'gzip';\n\n            var chunkSize = 1024 * 1024;\n\n            if (!hasByteServing) chunkSize = datalength;\n\n            var doXHR = (from, to) => {\n              if (from > to)\n                throw new Error(\n                  'invalid range (' +\n                    from +\n                    ', ' +\n                    to +\n                    ') or no bytes requested!',\n                );\n              if (to > datalength - 1)\n                throw new Error(\n                  'only ' + datalength + ' bytes available! programmer error!',\n                );\n\n              var xhr = new XMLHttpRequest();\n              xhr.open('GET', url, false);\n              if (datalength !== chunkSize)\n                xhr.setRequestHeader('Range', 'bytes=' + from + '-' + to);\n\n              xhr.responseType = 'arraybuffer';\n              if (xhr.overrideMimeType) {\n                xhr.overrideMimeType('text/plain; charset=x-user-defined');\n              }\n\n              xhr.send(null);\n              if (\n                !((xhr.status >= 200 && xhr.status < 300) || xhr.status === 304)\n              )\n                throw new Error(\n                  \"Couldn't load \" + url + '. Status: ' + xhr.status,\n                );\n              if (xhr.response !== undefined) {\n                return new Uint8Array(xhr.response || []);\n              }\n              return intArrayFromString(xhr.responseText || '', true);\n            };\n            var lazyArray = this;\n            lazyArray.setDataGetter((chunkNum) => {\n              var start = chunkNum * chunkSize;\n              var end = (chunkNum + 1) * chunkSize - 1;\n              end = Math.min(end, datalength - 1);\n              if (typeof lazyArray.chunks[chunkNum] == 'undefined') {\n                lazyArray.chunks[chunkNum] = doXHR(start, end);\n              }\n              if (typeof lazyArray.chunks[chunkNum] == 'undefined')\n                throw new Error('doXHR failed!');\n              return lazyArray.chunks[chunkNum];\n            });\n\n            if (usesGzip || !datalength) {\n              chunkSize = datalength = 1;\n              datalength = this.getter(0).length;\n              chunkSize = datalength;\n              out(\n                'LazyFiles on gzip forces download of the whole file when length is accessed',\n              );\n            }\n\n            this._length = datalength;\n            this._chunkSize = chunkSize;\n            this.lengthKnown = true;\n          }\n          get length() {\n            if (!this.lengthKnown) {\n              this.cacheLength();\n            }\n            return this._length;\n          }\n          get chunkSize() {\n            if (!this.lengthKnown) {\n              this.cacheLength();\n            }\n            return this._chunkSize;\n          }\n        }\n\n        if (typeof XMLHttpRequest != 'undefined') {\n          if (!ENVIRONMENT_IS_WORKER)\n            throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';\n          var lazyArray = new LazyUint8Array();\n          var properties = { isDevice: false, contents: lazyArray };\n        } else {\n          var properties = { isDevice: false, url: url };\n        }\n\n        var node = FS.createFile(parent, name, properties, canRead, canWrite);\n\n        if (properties.contents) {\n          node.contents = properties.contents;\n        } else if (properties.url) {\n          node.contents = null;\n          node.url = properties.url;\n        }\n\n        Object.defineProperties(node, {\n          usedBytes: {\n            get: function () {\n              return this.contents.length;\n            },\n          },\n        });\n\n        var stream_ops = {};\n        var keys = Object.keys(node.stream_ops);\n        keys.forEach((key) => {\n          var fn = node.stream_ops[key];\n          stream_ops[key] = (...args) => {\n            FS.forceLoadFile(node);\n            return fn(...args);\n          };\n        });\n        function writeChunks(stream, buffer, offset, length, position) {\n          var contents = stream.node.contents;\n          if (position >= contents.length) return 0;\n          var size = Math.min(contents.length - position, length);\n          if (contents.slice) {\n            for (var i = 0; i < size; i++) {\n              buffer[offset + i] = contents[position + i];\n            }\n          } else {\n            for (var i = 0; i < size; i++) {\n              buffer[offset + i] = contents.get(position + i);\n            }\n          }\n          return size;\n        }\n\n        stream_ops.read = (stream, buffer, offset, length, position) => {\n          FS.forceLoadFile(node);\n          return writeChunks(stream, buffer, offset, length, position);\n        };\n\n        stream_ops.mmap = (stream, length, position, prot, flags) => {\n          FS.forceLoadFile(node);\n          var ptr = mmapAlloc(length);\n          if (!ptr) {\n            throw new FS.ErrnoError(48);\n          }\n          writeChunks(stream, HEAP8, ptr, length, position);\n          return { ptr, allocated: true };\n        };\n        node.stream_ops = stream_ops;\n        return node;\n      },\n    };\n\n    var UTF8ToString = (ptr, maxBytesToRead) => {\n      return ptr ? UTF8ArrayToString(HEAPU8, ptr, maxBytesToRead) : '';\n    };\n    var SYSCALLS = {\n      DEFAULT_POLLMASK: 5,\n      calculateAt(dirfd, path, allowEmpty) {\n        if (PATH.isAbs(path)) {\n          return path;\n        }\n\n        var dir;\n        if (dirfd === -100) {\n          dir = FS.cwd();\n        } else {\n          var dirstream = SYSCALLS.getStreamFromFD(dirfd);\n          dir = dirstream.path;\n        }\n        if (path.length == 0) {\n          if (!allowEmpty) {\n            throw new FS.ErrnoError(44);\n          }\n          return dir;\n        }\n        return PATH.join2(dir, path);\n      },\n      doStat(func, path, buf) {\n        var stat = func(path);\n        HEAP32[buf >> 2] = stat.dev;\n        HEAP32[(buf + 4) >> 2] = stat.mode;\n        HEAPU32[(buf + 8) >> 2] = stat.nlink;\n        HEAP32[(buf + 12) >> 2] = stat.uid;\n        HEAP32[(buf + 16) >> 2] = stat.gid;\n        HEAP32[(buf + 20) >> 2] = stat.rdev;\n        HEAP64[(buf + 24) >> 3] = BigInt(stat.size);\n        HEAP32[(buf + 32) >> 2] = 4096;\n        HEAP32[(buf + 36) >> 2] = stat.blocks;\n        var atime = stat.atime.getTime();\n        var mtime = stat.mtime.getTime();\n        var ctime = stat.ctime.getTime();\n        HEAP64[(buf + 40) >> 3] = BigInt(Math.floor(atime / 1000));\n        HEAPU32[(buf + 48) >> 2] = (atime % 1000) * 1000 * 1000;\n        HEAP64[(buf + 56) >> 3] = BigInt(Math.floor(mtime / 1000));\n        HEAPU32[(buf + 64) >> 2] = (mtime % 1000) * 1000 * 1000;\n        HEAP64[(buf + 72) >> 3] = BigInt(Math.floor(ctime / 1000));\n        HEAPU32[(buf + 80) >> 2] = (ctime % 1000) * 1000 * 1000;\n        HEAP64[(buf + 88) >> 3] = BigInt(stat.ino);\n        return 0;\n      },\n      doMsync(addr, stream, len, flags, offset) {\n        if (!FS.isFile(stream.node.mode)) {\n          throw new FS.ErrnoError(43);\n        }\n        if (flags & 2) {\n          return 0;\n        }\n        var buffer = HEAPU8.slice(addr, addr + len);\n        FS.msync(stream, buffer, offset, len, flags);\n      },\n      getStreamFromFD(fd) {\n        var stream = FS.getStreamChecked(fd);\n        return stream;\n      },\n      varargs: undefined,\n      getStr(ptr) {\n        var ret = UTF8ToString(ptr);\n        return ret;\n      },\n    };\n    function ___syscall_chmod(path, mode) {\n      try {\n        path = SYSCALLS.getStr(path);\n        FS.chmod(path, mode);\n        return 0;\n      } catch (e) {\n        if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;\n        return -e.errno;\n      }\n    }\n\n    function ___syscall_faccessat(dirfd, path, amode, flags) {\n      try {\n        path = SYSCALLS.getStr(path);\n        path = SYSCALLS.calculateAt(dirfd, path);\n        if (amode & ~7) {\n          return -28;\n        }\n        var lookup = FS.lookupPath(path, { follow: true });\n        var node = lookup.node;\n        if (!node) {\n          return -44;\n        }\n        var perms = '';\n        if (amode & 4) perms += 'r';\n        if (amode & 2) perms += 'w';\n        if (amode & 1) perms += 'x';\n        if (perms && FS.nodePermissions(node, perms)) {\n          return -2;\n        }\n        return 0;\n      } catch (e) {\n        if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;\n        return -e.errno;\n      }\n    }\n\n    function ___syscall_fchmod(fd, mode) {\n      try {\n        FS.fchmod(fd, mode);\n        return 0;\n      } catch (e) {\n        if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;\n        return -e.errno;\n      }\n    }\n\n    function ___syscall_fchown32(fd, owner, group) {\n      try {\n        FS.fchown(fd, owner, group);\n        return 0;\n      } catch (e) {\n        if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;\n        return -e.errno;\n      }\n    }\n\n    function syscallGetVarargI() {\n      var ret = HEAP32[+SYSCALLS.varargs >> 2];\n      SYSCALLS.varargs += 4;\n      return ret;\n    }\n    var syscallGetVarargP = syscallGetVarargI;\n\n    function ___syscall_fcntl64(fd, cmd, varargs) {\n      SYSCALLS.varargs = varargs;\n      try {\n        var stream = SYSCALLS.getStreamFromFD(fd);\n        switch (cmd) {\n          case 0: {\n            var arg = syscallGetVarargI();\n            if (arg < 0) {\n              return -28;\n            }\n            while (FS.streams[arg]) {\n              arg++;\n            }\n            var newStream;\n            newStream = FS.dupStream(stream, arg);\n            return newStream.fd;\n          }\n          case 1:\n          case 2:\n            return 0;\n          case 3:\n            return stream.flags;\n          case 4: {\n            var arg = syscallGetVarargI();\n            stream.flags |= arg;\n            return 0;\n          }\n          case 12: {\n            var arg = syscallGetVarargP();\n            var offset = 0;\n\n            HEAP16[(arg + offset) >> 1] = 2;\n            return 0;\n          }\n          case 13:\n          case 14:\n            return 0;\n        }\n        return -28;\n      } catch (e) {\n        if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;\n        return -e.errno;\n      }\n    }\n\n    function ___syscall_fstat64(fd, buf) {\n      try {\n        var stream = SYSCALLS.getStreamFromFD(fd);\n        return SYSCALLS.doStat(FS.stat, stream.path, buf);\n      } catch (e) {\n        if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;\n        return -e.errno;\n      }\n    }\n\n    var INT53_MAX = 9007199254740992;\n\n    var INT53_MIN = -9007199254740992;\n    var bigintToI53Checked = (num) =>\n      num < INT53_MIN || num > INT53_MAX ? NaN : Number(num);\n    function ___syscall_ftruncate64(fd, length) {\n      length = bigintToI53Checked(length);\n\n      try {\n        if (isNaN(length)) return 61;\n        FS.ftruncate(fd, length);\n        return 0;\n      } catch (e) {\n        if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;\n        return -e.errno;\n      }\n    }\n\n    var stringToUTF8 = (str, outPtr, maxBytesToWrite) => {\n      return stringToUTF8Array(str, HEAPU8, outPtr, maxBytesToWrite);\n    };\n    function ___syscall_getcwd(buf, size) {\n      try {\n        if (size === 0) return -28;\n        var cwd = FS.cwd();\n        var cwdLengthInBytes = lengthBytesUTF8(cwd) + 1;\n        if (size < cwdLengthInBytes) return -68;\n        stringToUTF8(cwd, buf, size);\n        return cwdLengthInBytes;\n      } catch (e) {\n        if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;\n        return -e.errno;\n      }\n    }\n\n    function ___syscall_ioctl(fd, op, varargs) {\n      SYSCALLS.varargs = varargs;\n      try {\n        var stream = SYSCALLS.getStreamFromFD(fd);\n        switch (op) {\n          case 21509: {\n            if (!stream.tty) return -59;\n            return 0;\n          }\n          case 21505: {\n            if (!stream.tty) return -59;\n            if (stream.tty.ops.ioctl_tcgets) {\n              var termios = stream.tty.ops.ioctl_tcgets(stream);\n              var argp = syscallGetVarargP();\n              HEAP32[argp >> 2] = termios.c_iflag || 0;\n              HEAP32[(argp + 4) >> 2] = termios.c_oflag || 0;\n              HEAP32[(argp + 8) >> 2] = termios.c_cflag || 0;\n              HEAP32[(argp + 12) >> 2] = termios.c_lflag || 0;\n              for (var i = 0; i < 32; i++) {\n                HEAP8[argp + i + 17] = termios.c_cc[i] || 0;\n              }\n              return 0;\n            }\n            return 0;\n          }\n          case 21510:\n          case 21511:\n          case 21512: {\n            if (!stream.tty) return -59;\n            return 0;\n          }\n          case 21506:\n          case 21507:\n          case 21508: {\n            if (!stream.tty) return -59;\n            if (stream.tty.ops.ioctl_tcsets) {\n              var argp = syscallGetVarargP();\n              var c_iflag = HEAP32[argp >> 2];\n              var c_oflag = HEAP32[(argp + 4) >> 2];\n              var c_cflag = HEAP32[(argp + 8) >> 2];\n              var c_lflag = HEAP32[(argp + 12) >> 2];\n              var c_cc = [];\n              for (var i = 0; i < 32; i++) {\n                c_cc.push(HEAP8[argp + i + 17]);\n              }\n              return stream.tty.ops.ioctl_tcsets(stream.tty, op, {\n                c_iflag,\n                c_oflag,\n                c_cflag,\n                c_lflag,\n                c_cc,\n              });\n            }\n            return 0;\n          }\n          case 21519: {\n            if (!stream.tty) return -59;\n            var argp = syscallGetVarargP();\n            HEAP32[argp >> 2] = 0;\n            return 0;\n          }\n          case 21520: {\n            if (!stream.tty) return -59;\n            return -28;\n          }\n          case 21531: {\n            var argp = syscallGetVarargP();\n            return FS.ioctl(stream, op, argp);\n          }\n          case 21523: {\n            if (!stream.tty) return -59;\n            if (stream.tty.ops.ioctl_tiocgwinsz) {\n              var winsize = stream.tty.ops.ioctl_tiocgwinsz(stream.tty);\n              var argp = syscallGetVarargP();\n              HEAP16[argp >> 1] = winsize[0];\n              HEAP16[(argp + 2) >> 1] = winsize[1];\n            }\n            return 0;\n          }\n          case 21524: {\n            if (!stream.tty) return -59;\n            return 0;\n          }\n          case 21515: {\n            if (!stream.tty) return -59;\n            return 0;\n          }\n          default:\n            return -28;\n        }\n      } catch (e) {\n        if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;\n        return -e.errno;\n      }\n    }\n\n    function ___syscall_lstat64(path, buf) {\n      try {\n        path = SYSCALLS.getStr(path);\n        return SYSCALLS.doStat(FS.lstat, path, buf);\n      } catch (e) {\n        if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;\n        return -e.errno;\n      }\n    }\n\n    function ___syscall_mkdirat(dirfd, path, mode) {\n      try {\n        path = SYSCALLS.getStr(path);\n        path = SYSCALLS.calculateAt(dirfd, path);\n\n        path = PATH.normalize(path);\n        if (path[path.length - 1] === '/')\n          path = path.substr(0, path.length - 1);\n        FS.mkdir(path, mode, 0);\n        return 0;\n      } catch (e) {\n        if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;\n        return -e.errno;\n      }\n    }\n\n    function ___syscall_newfstatat(dirfd, path, buf, flags) {\n      try {\n        path = SYSCALLS.getStr(path);\n        var nofollow = flags & 256;\n        var allowEmpty = flags & 4096;\n        flags = flags & ~6400;\n        path = SYSCALLS.calculateAt(dirfd, path, allowEmpty);\n        return SYSCALLS.doStat(nofollow ? FS.lstat : FS.stat, path, buf);\n      } catch (e) {\n        if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;\n        return -e.errno;\n      }\n    }\n\n    function ___syscall_openat(dirfd, path, flags, varargs) {\n      SYSCALLS.varargs = varargs;\n      try {\n        path = SYSCALLS.getStr(path);\n        path = SYSCALLS.calculateAt(dirfd, path);\n        var mode = varargs ? syscallGetVarargI() : 0;\n        return FS.open(path, flags, mode).fd;\n      } catch (e) {\n        if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;\n        return -e.errno;\n      }\n    }\n\n    function ___syscall_readlinkat(dirfd, path, buf, bufsize) {\n      try {\n        path = SYSCALLS.getStr(path);\n        path = SYSCALLS.calculateAt(dirfd, path);\n        if (bufsize <= 0) return -28;\n        var ret = FS.readlink(path);\n\n        var len = Math.min(bufsize, lengthBytesUTF8(ret));\n        var endChar = HEAP8[buf + len];\n        stringToUTF8(ret, buf, bufsize + 1);\n\n        HEAP8[buf + len] = endChar;\n        return len;\n      } catch (e) {\n        if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;\n        return -e.errno;\n      }\n    }\n\n    function ___syscall_rmdir(path) {\n      try {\n        path = SYSCALLS.getStr(path);\n        FS.rmdir(path);\n        return 0;\n      } catch (e) {\n        if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;\n        return -e.errno;\n      }\n    }\n\n    function ___syscall_stat64(path, buf) {\n      try {\n        path = SYSCALLS.getStr(path);\n        return SYSCALLS.doStat(FS.stat, path, buf);\n      } catch (e) {\n        if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;\n        return -e.errno;\n      }\n    }\n\n    function ___syscall_unlinkat(dirfd, path, flags) {\n      try {\n        path = SYSCALLS.getStr(path);\n        path = SYSCALLS.calculateAt(dirfd, path);\n        if (flags === 0) {\n          FS.unlink(path);\n        } else if (flags === 512) {\n          FS.rmdir(path);\n        } else {\n          abort('Invalid flags passed to unlinkat');\n        }\n        return 0;\n      } catch (e) {\n        if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;\n        return -e.errno;\n      }\n    }\n\n    var readI53FromI64 = (ptr) => {\n      return HEAPU32[ptr >> 2] + HEAP32[(ptr + 4) >> 2] * 4294967296;\n    };\n\n    function ___syscall_utimensat(dirfd, path, times, flags) {\n      try {\n        path = SYSCALLS.getStr(path);\n        path = SYSCALLS.calculateAt(dirfd, path, true);\n        var now = Date.now(),\n          atime,\n          mtime;\n        if (!times) {\n          atime = now;\n          mtime = now;\n        } else {\n          var seconds = readI53FromI64(times);\n          var nanoseconds = HEAP32[(times + 8) >> 2];\n          if (nanoseconds == 1073741823) {\n            atime = now;\n          } else if (nanoseconds == 1073741822) {\n            atime = -1;\n          } else {\n            atime = seconds * 1000 + nanoseconds / (1000 * 1000);\n          }\n          times += 16;\n          seconds = readI53FromI64(times);\n          nanoseconds = HEAP32[(times + 8) >> 2];\n          if (nanoseconds == 1073741823) {\n            mtime = now;\n          } else if (nanoseconds == 1073741822) {\n            mtime = -1;\n          } else {\n            mtime = seconds * 1000 + nanoseconds / (1000 * 1000);\n          }\n        }\n\n        if (mtime != -1 || atime != -1) {\n          FS.utime(path, atime, mtime);\n        }\n        return 0;\n      } catch (e) {\n        if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;\n        return -e.errno;\n      }\n    }\n\n    var nowIsMonotonic = 1;\n    var __emscripten_get_now_is_monotonic = () => nowIsMonotonic;\n\n    var isLeapYear = (year) =>\n      year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);\n\n    var MONTH_DAYS_LEAP_CUMULATIVE = [\n      0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335,\n    ];\n\n    var MONTH_DAYS_REGULAR_CUMULATIVE = [\n      0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334,\n    ];\n    var ydayFromDate = (date) => {\n      var leap = isLeapYear(date.getFullYear());\n      var monthDaysCumulative = leap\n        ? MONTH_DAYS_LEAP_CUMULATIVE\n        : MONTH_DAYS_REGULAR_CUMULATIVE;\n      var yday = monthDaysCumulative[date.getMonth()] + date.getDate() - 1;\n\n      return yday;\n    };\n\n    function __localtime_js(time, tmPtr) {\n      time = bigintToI53Checked(time);\n\n      var date = new Date(time * 1000);\n      HEAP32[tmPtr >> 2] = date.getSeconds();\n      HEAP32[(tmPtr + 4) >> 2] = date.getMinutes();\n      HEAP32[(tmPtr + 8) >> 2] = date.getHours();\n      HEAP32[(tmPtr + 12) >> 2] = date.getDate();\n      HEAP32[(tmPtr + 16) >> 2] = date.getMonth();\n      HEAP32[(tmPtr + 20) >> 2] = date.getFullYear() - 1900;\n      HEAP32[(tmPtr + 24) >> 2] = date.getDay();\n\n      var yday = ydayFromDate(date) | 0;\n      HEAP32[(tmPtr + 28) >> 2] = yday;\n      HEAP32[(tmPtr + 36) >> 2] = -(date.getTimezoneOffset() * 60);\n\n      var start = new Date(date.getFullYear(), 0, 1);\n      var summerOffset = new Date(date.getFullYear(), 6, 1).getTimezoneOffset();\n      var winterOffset = start.getTimezoneOffset();\n      var dst =\n        (summerOffset != winterOffset &&\n          date.getTimezoneOffset() == Math.min(winterOffset, summerOffset)) | 0;\n      HEAP32[(tmPtr + 32) >> 2] = dst;\n    }\n\n    function __mmap_js(len, prot, flags, fd, offset, allocated, addr) {\n      offset = bigintToI53Checked(offset);\n\n      try {\n        if (isNaN(offset)) return 61;\n        var stream = SYSCALLS.getStreamFromFD(fd);\n        var res = FS.mmap(stream, len, offset, prot, flags);\n        var ptr = res.ptr;\n        HEAP32[allocated >> 2] = res.allocated;\n        HEAPU32[addr >> 2] = ptr;\n        return 0;\n      } catch (e) {\n        if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;\n        return -e.errno;\n      }\n    }\n\n    function __munmap_js(addr, len, prot, flags, fd, offset) {\n      offset = bigintToI53Checked(offset);\n\n      try {\n        var stream = SYSCALLS.getStreamFromFD(fd);\n        if (prot & 2) {\n          SYSCALLS.doMsync(addr, stream, len, flags, offset);\n        }\n      } catch (e) {\n        if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;\n        return -e.errno;\n      }\n    }\n\n    var __tzset_js = (timezone, daylight, std_name, dst_name) => {\n      var currentYear = new Date().getFullYear();\n      var winter = new Date(currentYear, 0, 1);\n      var summer = new Date(currentYear, 6, 1);\n      var winterOffset = winter.getTimezoneOffset();\n      var summerOffset = summer.getTimezoneOffset();\n\n      var stdTimezoneOffset = Math.max(winterOffset, summerOffset);\n\n      HEAPU32[timezone >> 2] = stdTimezoneOffset * 60;\n\n      HEAP32[daylight >> 2] = Number(winterOffset != summerOffset);\n\n      var extractZone = (timezoneOffset) => {\n        var sign = timezoneOffset >= 0 ? '-' : '+';\n\n        var absOffset = Math.abs(timezoneOffset);\n        var hours = String(Math.floor(absOffset / 60)).padStart(2, '0');\n        var minutes = String(absOffset % 60).padStart(2, '0');\n\n        return `UTC${sign}${hours}${minutes}`;\n      };\n\n      var winterName = extractZone(winterOffset);\n      var summerName = extractZone(summerOffset);\n      if (summerOffset < winterOffset) {\n        stringToUTF8(winterName, std_name, 17);\n        stringToUTF8(summerName, dst_name, 17);\n      } else {\n        stringToUTF8(winterName, dst_name, 17);\n        stringToUTF8(summerName, std_name, 17);\n      }\n    };\n\n    var _emscripten_date_now = () => Date.now();\n\n    var _emscripten_get_now = () => performance.now();\n\n    var getHeapMax = () => 2147483648;\n\n    var growMemory = (size) => {\n      var b = wasmMemory.buffer;\n      var pages = ((size - b.byteLength + 65535) / 65536) | 0;\n      try {\n        wasmMemory.grow(pages);\n        updateMemoryViews();\n        return 1;\n      } catch (e) {}\n    };\n    var _emscripten_resize_heap = (requestedSize) => {\n      var oldSize = HEAPU8.length;\n\n      requestedSize >>>= 0;\n\n      var maxHeapSize = getHeapMax();\n      if (requestedSize > maxHeapSize) {\n        return false;\n      }\n\n      for (var cutDown = 1; cutDown <= 4; cutDown *= 2) {\n        var overGrownHeapSize = oldSize * (1 + 0.2 / cutDown);\n\n        overGrownHeapSize = Math.min(\n          overGrownHeapSize,\n          requestedSize + 100663296,\n        );\n\n        var newSize = Math.min(\n          maxHeapSize,\n          alignMemory(Math.max(requestedSize, overGrownHeapSize), 65536),\n        );\n\n        var replacement = growMemory(newSize);\n        if (replacement) {\n          return true;\n        }\n      }\n      return false;\n    };\n\n    var ENV = {};\n\n    var getExecutableName = () => {\n      return thisProgram || './this.program';\n    };\n    var getEnvStrings = () => {\n      if (!getEnvStrings.strings) {\n        var lang =\n          (\n            (typeof navigator == 'object' &&\n              navigator.languages &&\n              navigator.languages[0]) ||\n            'C'\n          ).replace('-', '_') + '.UTF-8';\n        var env = {\n          USER: 'web_user',\n          LOGNAME: 'web_user',\n          PATH: '/',\n          PWD: '/',\n          HOME: '/home/web_user',\n          LANG: lang,\n          _: getExecutableName(),\n        };\n\n        for (var x in ENV) {\n          if (ENV[x] === undefined) delete env[x];\n          else env[x] = ENV[x];\n        }\n        var strings = [];\n        for (var x in env) {\n          strings.push(`${x}=${env[x]}`);\n        }\n        getEnvStrings.strings = strings;\n      }\n      return getEnvStrings.strings;\n    };\n\n    var stringToAscii = (str, buffer) => {\n      for (var i = 0; i < str.length; ++i) {\n        HEAP8[buffer++] = str.charCodeAt(i);\n      }\n\n      HEAP8[buffer] = 0;\n    };\n    var _environ_get = (__environ, environ_buf) => {\n      var bufSize = 0;\n      getEnvStrings().forEach((string, i) => {\n        var ptr = environ_buf + bufSize;\n        HEAPU32[(__environ + i * 4) >> 2] = ptr;\n        stringToAscii(string, ptr);\n        bufSize += string.length + 1;\n      });\n      return 0;\n    };\n\n    var _environ_sizes_get = (penviron_count, penviron_buf_size) => {\n      var strings = getEnvStrings();\n      HEAPU32[penviron_count >> 2] = strings.length;\n      var bufSize = 0;\n      strings.forEach((string) => (bufSize += string.length + 1));\n      HEAPU32[penviron_buf_size >> 2] = bufSize;\n      return 0;\n    };\n\n    function _fd_close(fd) {\n      try {\n        var stream = SYSCALLS.getStreamFromFD(fd);\n        FS.close(stream);\n        return 0;\n      } catch (e) {\n        if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;\n        return e.errno;\n      }\n    }\n\n    function _fd_fdstat_get(fd, pbuf) {\n      try {\n        var rightsBase = 0;\n        var rightsInheriting = 0;\n        var flags = 0;\n        {\n          var stream = SYSCALLS.getStreamFromFD(fd);\n\n          var type = stream.tty\n            ? 2\n            : FS.isDir(stream.mode)\n              ? 3\n              : FS.isLink(stream.mode)\n                ? 7\n                : 4;\n        }\n        HEAP8[pbuf] = type;\n        HEAP16[(pbuf + 2) >> 1] = flags;\n        HEAP64[(pbuf + 8) >> 3] = BigInt(rightsBase);\n        HEAP64[(pbuf + 16) >> 3] = BigInt(rightsInheriting);\n        return 0;\n      } catch (e) {\n        if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;\n        return e.errno;\n      }\n    }\n\n    var doReadv = (stream, iov, iovcnt, offset) => {\n      var ret = 0;\n      for (var i = 0; i < iovcnt; i++) {\n        var ptr = HEAPU32[iov >> 2];\n        var len = HEAPU32[(iov + 4) >> 2];\n        iov += 8;\n        var curr = FS.read(stream, HEAP8, ptr, len, offset);\n        if (curr < 0) return -1;\n        ret += curr;\n        if (curr < len) break;\n        if (typeof offset != 'undefined') {\n          offset += curr;\n        }\n      }\n      return ret;\n    };\n\n    function _fd_read(fd, iov, iovcnt, pnum) {\n      try {\n        var stream = SYSCALLS.getStreamFromFD(fd);\n        var num = doReadv(stream, iov, iovcnt);\n        HEAPU32[pnum >> 2] = num;\n        return 0;\n      } catch (e) {\n        if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;\n        return e.errno;\n      }\n    }\n\n    function _fd_seek(fd, offset, whence, newOffset) {\n      offset = bigintToI53Checked(offset);\n\n      try {\n        if (isNaN(offset)) return 61;\n        var stream = SYSCALLS.getStreamFromFD(fd);\n        FS.llseek(stream, offset, whence);\n        HEAP64[newOffset >> 3] = BigInt(stream.position);\n        if (stream.getdents && offset === 0 && whence === 0)\n          stream.getdents = null;\n        return 0;\n      } catch (e) {\n        if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;\n        return e.errno;\n      }\n    }\n\n    function _fd_sync(fd) {\n      try {\n        var stream = SYSCALLS.getStreamFromFD(fd);\n        if (stream.stream_ops?.fsync) {\n          return stream.stream_ops.fsync(stream);\n        }\n        return 0;\n      } catch (e) {\n        if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;\n        return e.errno;\n      }\n    }\n\n    var doWritev = (stream, iov, iovcnt, offset) => {\n      var ret = 0;\n      for (var i = 0; i < iovcnt; i++) {\n        var ptr = HEAPU32[iov >> 2];\n        var len = HEAPU32[(iov + 4) >> 2];\n        iov += 8;\n        var curr = FS.write(stream, HEAP8, ptr, len, offset);\n        if (curr < 0) return -1;\n        ret += curr;\n        if (curr < len) {\n          break;\n        }\n        if (typeof offset != 'undefined') {\n          offset += curr;\n        }\n      }\n      return ret;\n    };\n\n    function _fd_write(fd, iov, iovcnt, pnum) {\n      try {\n        var stream = SYSCALLS.getStreamFromFD(fd);\n        var num = doWritev(stream, iov, iovcnt);\n        HEAPU32[pnum >> 2] = num;\n        return 0;\n      } catch (e) {\n        if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;\n        return e.errno;\n      }\n    }\n\n    FS.createPreloadedFile = FS_createPreloadedFile;\n    FS.staticInit();\n\n    var wasmImports = {\n      __syscall_chmod: ___syscall_chmod,\n\n      __syscall_faccessat: ___syscall_faccessat,\n\n      __syscall_fchmod: ___syscall_fchmod,\n\n      __syscall_fchown32: ___syscall_fchown32,\n\n      __syscall_fcntl64: ___syscall_fcntl64,\n\n      __syscall_fstat64: ___syscall_fstat64,\n\n      __syscall_ftruncate64: ___syscall_ftruncate64,\n\n      __syscall_getcwd: ___syscall_getcwd,\n\n      __syscall_ioctl: ___syscall_ioctl,\n\n      __syscall_lstat64: ___syscall_lstat64,\n\n      __syscall_mkdirat: ___syscall_mkdirat,\n\n      __syscall_newfstatat: ___syscall_newfstatat,\n\n      __syscall_openat: ___syscall_openat,\n\n      __syscall_readlinkat: ___syscall_readlinkat,\n\n      __syscall_rmdir: ___syscall_rmdir,\n\n      __syscall_stat64: ___syscall_stat64,\n\n      __syscall_unlinkat: ___syscall_unlinkat,\n\n      __syscall_utimensat: ___syscall_utimensat,\n\n      _emscripten_get_now_is_monotonic: __emscripten_get_now_is_monotonic,\n\n      _localtime_js: __localtime_js,\n\n      _mmap_js: __mmap_js,\n\n      _munmap_js: __munmap_js,\n\n      _tzset_js: __tzset_js,\n\n      emscripten_date_now: _emscripten_date_now,\n\n      emscripten_get_now: _emscripten_get_now,\n\n      emscripten_resize_heap: _emscripten_resize_heap,\n\n      environ_get: _environ_get,\n\n      environ_sizes_get: _environ_sizes_get,\n\n      fd_close: _fd_close,\n\n      fd_fdstat_get: _fd_fdstat_get,\n\n      fd_read: _fd_read,\n\n      fd_seek: _fd_seek,\n\n      fd_sync: _fd_sync,\n\n      fd_write: _fd_write,\n\n      memory: wasmMemory,\n    };\n    var wasmExports = createWasm();\n    var ___wasm_call_ctors = () =>\n      (___wasm_call_ctors = wasmExports['__wasm_call_ctors'])();\n    var _sqlite3_status64 = (Module['_sqlite3_status64'] = (a0, a1, a2, a3) =>\n      (_sqlite3_status64 = Module['_sqlite3_status64'] =\n        wasmExports['sqlite3_status64'])(a0, a1, a2, a3));\n    var _sqlite3_status = (Module['_sqlite3_status'] = (a0, a1, a2, a3) =>\n      (_sqlite3_status = Module['_sqlite3_status'] =\n        wasmExports['sqlite3_status'])(a0, a1, a2, a3));\n    var _sqlite3_db_status = (Module['_sqlite3_db_status'] = (\n      a0,\n      a1,\n      a2,\n      a3,\n      a4,\n    ) =>\n      (_sqlite3_db_status = Module['_sqlite3_db_status'] =\n        wasmExports['sqlite3_db_status'])(a0, a1, a2, a3, a4));\n    var _sqlite3_msize = (Module['_sqlite3_msize'] = (a0) =>\n      (_sqlite3_msize = Module['_sqlite3_msize'] =\n        wasmExports['sqlite3_msize'])(a0));\n    var _sqlite3_vfs_find = (Module['_sqlite3_vfs_find'] = (a0) =>\n      (_sqlite3_vfs_find = Module['_sqlite3_vfs_find'] =\n        wasmExports['sqlite3_vfs_find'])(a0));\n    var _sqlite3_initialize = (Module['_sqlite3_initialize'] = () =>\n      (_sqlite3_initialize = Module['_sqlite3_initialize'] =\n        wasmExports['sqlite3_initialize'])());\n    var _sqlite3_malloc = (Module['_sqlite3_malloc'] = (a0) =>\n      (_sqlite3_malloc = Module['_sqlite3_malloc'] =\n        wasmExports['sqlite3_malloc'])(a0));\n    var _sqlite3_free = (Module['_sqlite3_free'] = (a0) =>\n      (_sqlite3_free = Module['_sqlite3_free'] = wasmExports['sqlite3_free'])(\n        a0,\n      ));\n    var _sqlite3_vfs_register = (Module['_sqlite3_vfs_register'] = (a0, a1) =>\n      (_sqlite3_vfs_register = Module['_sqlite3_vfs_register'] =\n        wasmExports['sqlite3_vfs_register'])(a0, a1));\n    var _sqlite3_vfs_unregister = (Module['_sqlite3_vfs_unregister'] = (a0) =>\n      (_sqlite3_vfs_unregister = Module['_sqlite3_vfs_unregister'] =\n        wasmExports['sqlite3_vfs_unregister'])(a0));\n    var _sqlite3_malloc64 = (Module['_sqlite3_malloc64'] = (a0) =>\n      (_sqlite3_malloc64 = Module['_sqlite3_malloc64'] =\n        wasmExports['sqlite3_malloc64'])(a0));\n    var _sqlite3_realloc = (Module['_sqlite3_realloc'] = (a0, a1) =>\n      (_sqlite3_realloc = Module['_sqlite3_realloc'] =\n        wasmExports['sqlite3_realloc'])(a0, a1));\n    var _sqlite3_realloc64 = (Module['_sqlite3_realloc64'] = (a0, a1) =>\n      (_sqlite3_realloc64 = Module['_sqlite3_realloc64'] =\n        wasmExports['sqlite3_realloc64'])(a0, a1));\n    var _sqlite3_value_text = (Module['_sqlite3_value_text'] = (a0) =>\n      (_sqlite3_value_text = Module['_sqlite3_value_text'] =\n        wasmExports['sqlite3_value_text'])(a0));\n    var _sqlite3_randomness = (Module['_sqlite3_randomness'] = (a0, a1) =>\n      (_sqlite3_randomness = Module['_sqlite3_randomness'] =\n        wasmExports['sqlite3_randomness'])(a0, a1));\n    var _sqlite3_stricmp = (Module['_sqlite3_stricmp'] = (a0, a1) =>\n      (_sqlite3_stricmp = Module['_sqlite3_stricmp'] =\n        wasmExports['sqlite3_stricmp'])(a0, a1));\n    var _sqlite3_strnicmp = (Module['_sqlite3_strnicmp'] = (a0, a1, a2) =>\n      (_sqlite3_strnicmp = Module['_sqlite3_strnicmp'] =\n        wasmExports['sqlite3_strnicmp'])(a0, a1, a2));\n    var _sqlite3_uri_parameter = (Module['_sqlite3_uri_parameter'] = (a0, a1) =>\n      (_sqlite3_uri_parameter = Module['_sqlite3_uri_parameter'] =\n        wasmExports['sqlite3_uri_parameter'])(a0, a1));\n    var _sqlite3_uri_boolean = (Module['_sqlite3_uri_boolean'] = (a0, a1, a2) =>\n      (_sqlite3_uri_boolean = Module['_sqlite3_uri_boolean'] =\n        wasmExports['sqlite3_uri_boolean'])(a0, a1, a2));\n    var _sqlite3_serialize = (Module['_sqlite3_serialize'] = (a0, a1, a2, a3) =>\n      (_sqlite3_serialize = Module['_sqlite3_serialize'] =\n        wasmExports['sqlite3_serialize'])(a0, a1, a2, a3));\n    var _sqlite3_prepare_v2 = (Module['_sqlite3_prepare_v2'] = (\n      a0,\n      a1,\n      a2,\n      a3,\n      a4,\n    ) =>\n      (_sqlite3_prepare_v2 = Module['_sqlite3_prepare_v2'] =\n        wasmExports['sqlite3_prepare_v2'])(a0, a1, a2, a3, a4));\n    var _sqlite3_step = (Module['_sqlite3_step'] = (a0) =>\n      (_sqlite3_step = Module['_sqlite3_step'] = wasmExports['sqlite3_step'])(\n        a0,\n      ));\n    var _sqlite3_column_int64 = (Module['_sqlite3_column_int64'] = (a0, a1) =>\n      (_sqlite3_column_int64 = Module['_sqlite3_column_int64'] =\n        wasmExports['sqlite3_column_int64'])(a0, a1));\n    var _sqlite3_reset = (Module['_sqlite3_reset'] = (a0) =>\n      (_sqlite3_reset = Module['_sqlite3_reset'] =\n        wasmExports['sqlite3_reset'])(a0));\n    var _sqlite3_exec = (Module['_sqlite3_exec'] = (a0, a1, a2, a3, a4) =>\n      (_sqlite3_exec = Module['_sqlite3_exec'] = wasmExports['sqlite3_exec'])(\n        a0,\n        a1,\n        a2,\n        a3,\n        a4,\n      ));\n    var _sqlite3_column_int = (Module['_sqlite3_column_int'] = (a0, a1) =>\n      (_sqlite3_column_int = Module['_sqlite3_column_int'] =\n        wasmExports['sqlite3_column_int'])(a0, a1));\n    var _sqlite3_finalize = (Module['_sqlite3_finalize'] = (a0) =>\n      (_sqlite3_finalize = Module['_sqlite3_finalize'] =\n        wasmExports['sqlite3_finalize'])(a0));\n    var _sqlite3_file_control = (Module['_sqlite3_file_control'] = (\n      a0,\n      a1,\n      a2,\n      a3,\n    ) =>\n      (_sqlite3_file_control = Module['_sqlite3_file_control'] =\n        wasmExports['sqlite3_file_control'])(a0, a1, a2, a3));\n    var _sqlite3_column_name = (Module['_sqlite3_column_name'] = (a0, a1) =>\n      (_sqlite3_column_name = Module['_sqlite3_column_name'] =\n        wasmExports['sqlite3_column_name'])(a0, a1));\n    var _sqlite3_column_text = (Module['_sqlite3_column_text'] = (a0, a1) =>\n      (_sqlite3_column_text = Module['_sqlite3_column_text'] =\n        wasmExports['sqlite3_column_text'])(a0, a1));\n    var _sqlite3_column_type = (Module['_sqlite3_column_type'] = (a0, a1) =>\n      (_sqlite3_column_type = Module['_sqlite3_column_type'] =\n        wasmExports['sqlite3_column_type'])(a0, a1));\n    var _sqlite3_errmsg = (Module['_sqlite3_errmsg'] = (a0) =>\n      (_sqlite3_errmsg = Module['_sqlite3_errmsg'] =\n        wasmExports['sqlite3_errmsg'])(a0));\n    var _sqlite3_deserialize = (Module['_sqlite3_deserialize'] = (\n      a0,\n      a1,\n      a2,\n      a3,\n      a4,\n      a5,\n    ) =>\n      (_sqlite3_deserialize = Module['_sqlite3_deserialize'] =\n        wasmExports['sqlite3_deserialize'])(a0, a1, a2, a3, a4, a5));\n    var _sqlite3_clear_bindings = (Module['_sqlite3_clear_bindings'] = (a0) =>\n      (_sqlite3_clear_bindings = Module['_sqlite3_clear_bindings'] =\n        wasmExports['sqlite3_clear_bindings'])(a0));\n    var _sqlite3_value_blob = (Module['_sqlite3_value_blob'] = (a0) =>\n      (_sqlite3_value_blob = Module['_sqlite3_value_blob'] =\n        wasmExports['sqlite3_value_blob'])(a0));\n    var _sqlite3_value_bytes = (Module['_sqlite3_value_bytes'] = (a0) =>\n      (_sqlite3_value_bytes = Module['_sqlite3_value_bytes'] =\n        wasmExports['sqlite3_value_bytes'])(a0));\n    var _sqlite3_value_double = (Module['_sqlite3_value_double'] = (a0) =>\n      (_sqlite3_value_double = Module['_sqlite3_value_double'] =\n        wasmExports['sqlite3_value_double'])(a0));\n    var _sqlite3_value_int = (Module['_sqlite3_value_int'] = (a0) =>\n      (_sqlite3_value_int = Module['_sqlite3_value_int'] =\n        wasmExports['sqlite3_value_int'])(a0));\n    var _sqlite3_value_int64 = (Module['_sqlite3_value_int64'] = (a0) =>\n      (_sqlite3_value_int64 = Module['_sqlite3_value_int64'] =\n        wasmExports['sqlite3_value_int64'])(a0));\n    var _sqlite3_value_subtype = (Module['_sqlite3_value_subtype'] = (a0) =>\n      (_sqlite3_value_subtype = Module['_sqlite3_value_subtype'] =\n        wasmExports['sqlite3_value_subtype'])(a0));\n    var _sqlite3_value_pointer = (Module['_sqlite3_value_pointer'] = (a0, a1) =>\n      (_sqlite3_value_pointer = Module['_sqlite3_value_pointer'] =\n        wasmExports['sqlite3_value_pointer'])(a0, a1));\n    var _sqlite3_value_type = (Module['_sqlite3_value_type'] = (a0) =>\n      (_sqlite3_value_type = Module['_sqlite3_value_type'] =\n        wasmExports['sqlite3_value_type'])(a0));\n    var _sqlite3_value_nochange = (Module['_sqlite3_value_nochange'] = (a0) =>\n      (_sqlite3_value_nochange = Module['_sqlite3_value_nochange'] =\n        wasmExports['sqlite3_value_nochange'])(a0));\n    var _sqlite3_value_frombind = (Module['_sqlite3_value_frombind'] = (a0) =>\n      (_sqlite3_value_frombind = Module['_sqlite3_value_frombind'] =\n        wasmExports['sqlite3_value_frombind'])(a0));\n    var _sqlite3_value_dup = (Module['_sqlite3_value_dup'] = (a0) =>\n      (_sqlite3_value_dup = Module['_sqlite3_value_dup'] =\n        wasmExports['sqlite3_value_dup'])(a0));\n    var _sqlite3_value_free = (Module['_sqlite3_value_free'] = (a0) =>\n      (_sqlite3_value_free = Module['_sqlite3_value_free'] =\n        wasmExports['sqlite3_value_free'])(a0));\n    var _sqlite3_result_blob = (Module['_sqlite3_result_blob'] = (\n      a0,\n      a1,\n      a2,\n      a3,\n    ) =>\n      (_sqlite3_result_blob = Module['_sqlite3_result_blob'] =\n        wasmExports['sqlite3_result_blob'])(a0, a1, a2, a3));\n    var _sqlite3_result_error_toobig = (Module['_sqlite3_result_error_toobig'] =\n      (a0) =>\n        (_sqlite3_result_error_toobig = Module['_sqlite3_result_error_toobig'] =\n          wasmExports['sqlite3_result_error_toobig'])(a0));\n    var _sqlite3_result_error_nomem = (Module['_sqlite3_result_error_nomem'] = (\n      a0,\n    ) =>\n      (_sqlite3_result_error_nomem = Module['_sqlite3_result_error_nomem'] =\n        wasmExports['sqlite3_result_error_nomem'])(a0));\n    var _sqlite3_result_double = (Module['_sqlite3_result_double'] = (a0, a1) =>\n      (_sqlite3_result_double = Module['_sqlite3_result_double'] =\n        wasmExports['sqlite3_result_double'])(a0, a1));\n    var _sqlite3_result_error = (Module['_sqlite3_result_error'] = (\n      a0,\n      a1,\n      a2,\n    ) =>\n      (_sqlite3_result_error = Module['_sqlite3_result_error'] =\n        wasmExports['sqlite3_result_error'])(a0, a1, a2));\n    var _sqlite3_result_int = (Module['_sqlite3_result_int'] = (a0, a1) =>\n      (_sqlite3_result_int = Module['_sqlite3_result_int'] =\n        wasmExports['sqlite3_result_int'])(a0, a1));\n    var _sqlite3_result_int64 = (Module['_sqlite3_result_int64'] = (a0, a1) =>\n      (_sqlite3_result_int64 = Module['_sqlite3_result_int64'] =\n        wasmExports['sqlite3_result_int64'])(a0, a1));\n    var _sqlite3_result_null = (Module['_sqlite3_result_null'] = (a0) =>\n      (_sqlite3_result_null = Module['_sqlite3_result_null'] =\n        wasmExports['sqlite3_result_null'])(a0));\n    var _sqlite3_result_pointer = (Module['_sqlite3_result_pointer'] = (\n      a0,\n      a1,\n      a2,\n      a3,\n    ) =>\n      (_sqlite3_result_pointer = Module['_sqlite3_result_pointer'] =\n        wasmExports['sqlite3_result_pointer'])(a0, a1, a2, a3));\n    var _sqlite3_result_subtype = (Module['_sqlite3_result_subtype'] = (\n      a0,\n      a1,\n    ) =>\n      (_sqlite3_result_subtype = Module['_sqlite3_result_subtype'] =\n        wasmExports['sqlite3_result_subtype'])(a0, a1));\n    var _sqlite3_result_text = (Module['_sqlite3_result_text'] = (\n      a0,\n      a1,\n      a2,\n      a3,\n    ) =>\n      (_sqlite3_result_text = Module['_sqlite3_result_text'] =\n        wasmExports['sqlite3_result_text'])(a0, a1, a2, a3));\n    var _sqlite3_result_zeroblob = (Module['_sqlite3_result_zeroblob'] = (\n      a0,\n      a1,\n    ) =>\n      (_sqlite3_result_zeroblob = Module['_sqlite3_result_zeroblob'] =\n        wasmExports['sqlite3_result_zeroblob'])(a0, a1));\n    var _sqlite3_result_zeroblob64 = (Module['_sqlite3_result_zeroblob64'] = (\n      a0,\n      a1,\n    ) =>\n      (_sqlite3_result_zeroblob64 = Module['_sqlite3_result_zeroblob64'] =\n        wasmExports['sqlite3_result_zeroblob64'])(a0, a1));\n    var _sqlite3_result_error_code = (Module['_sqlite3_result_error_code'] = (\n      a0,\n      a1,\n    ) =>\n      (_sqlite3_result_error_code = Module['_sqlite3_result_error_code'] =\n        wasmExports['sqlite3_result_error_code'])(a0, a1));\n    var _sqlite3_user_data = (Module['_sqlite3_user_data'] = (a0) =>\n      (_sqlite3_user_data = Module['_sqlite3_user_data'] =\n        wasmExports['sqlite3_user_data'])(a0));\n    var _sqlite3_context_db_handle = (Module['_sqlite3_context_db_handle'] = (\n      a0,\n    ) =>\n      (_sqlite3_context_db_handle = Module['_sqlite3_context_db_handle'] =\n        wasmExports['sqlite3_context_db_handle'])(a0));\n    var _sqlite3_vtab_nochange = (Module['_sqlite3_vtab_nochange'] = (a0) =>\n      (_sqlite3_vtab_nochange = Module['_sqlite3_vtab_nochange'] =\n        wasmExports['sqlite3_vtab_nochange'])(a0));\n    var _sqlite3_vtab_in_first = (Module['_sqlite3_vtab_in_first'] = (a0, a1) =>\n      (_sqlite3_vtab_in_first = Module['_sqlite3_vtab_in_first'] =\n        wasmExports['sqlite3_vtab_in_first'])(a0, a1));\n    var _sqlite3_vtab_in_next = (Module['_sqlite3_vtab_in_next'] = (a0, a1) =>\n      (_sqlite3_vtab_in_next = Module['_sqlite3_vtab_in_next'] =\n        wasmExports['sqlite3_vtab_in_next'])(a0, a1));\n    var _sqlite3_aggregate_context = (Module['_sqlite3_aggregate_context'] = (\n      a0,\n      a1,\n    ) =>\n      (_sqlite3_aggregate_context = Module['_sqlite3_aggregate_context'] =\n        wasmExports['sqlite3_aggregate_context'])(a0, a1));\n    var _sqlite3_get_auxdata = (Module['_sqlite3_get_auxdata'] = (a0, a1) =>\n      (_sqlite3_get_auxdata = Module['_sqlite3_get_auxdata'] =\n        wasmExports['sqlite3_get_auxdata'])(a0, a1));\n    var _sqlite3_set_auxdata = (Module['_sqlite3_set_auxdata'] = (\n      a0,\n      a1,\n      a2,\n      a3,\n    ) =>\n      (_sqlite3_set_auxdata = Module['_sqlite3_set_auxdata'] =\n        wasmExports['sqlite3_set_auxdata'])(a0, a1, a2, a3));\n    var _sqlite3_column_count = (Module['_sqlite3_column_count'] = (a0) =>\n      (_sqlite3_column_count = Module['_sqlite3_column_count'] =\n        wasmExports['sqlite3_column_count'])(a0));\n    var _sqlite3_data_count = (Module['_sqlite3_data_count'] = (a0) =>\n      (_sqlite3_data_count = Module['_sqlite3_data_count'] =\n        wasmExports['sqlite3_data_count'])(a0));\n    var _sqlite3_column_blob = (Module['_sqlite3_column_blob'] = (a0, a1) =>\n      (_sqlite3_column_blob = Module['_sqlite3_column_blob'] =\n        wasmExports['sqlite3_column_blob'])(a0, a1));\n    var _sqlite3_column_bytes = (Module['_sqlite3_column_bytes'] = (a0, a1) =>\n      (_sqlite3_column_bytes = Module['_sqlite3_column_bytes'] =\n        wasmExports['sqlite3_column_bytes'])(a0, a1));\n    var _sqlite3_column_double = (Module['_sqlite3_column_double'] = (a0, a1) =>\n      (_sqlite3_column_double = Module['_sqlite3_column_double'] =\n        wasmExports['sqlite3_column_double'])(a0, a1));\n    var _sqlite3_column_value = (Module['_sqlite3_column_value'] = (a0, a1) =>\n      (_sqlite3_column_value = Module['_sqlite3_column_value'] =\n        wasmExports['sqlite3_column_value'])(a0, a1));\n    var _sqlite3_column_decltype = (Module['_sqlite3_column_decltype'] = (\n      a0,\n      a1,\n    ) =>\n      (_sqlite3_column_decltype = Module['_sqlite3_column_decltype'] =\n        wasmExports['sqlite3_column_decltype'])(a0, a1));\n    var _sqlite3_bind_blob = (Module['_sqlite3_bind_blob'] = (\n      a0,\n      a1,\n      a2,\n      a3,\n      a4,\n    ) =>\n      (_sqlite3_bind_blob = Module['_sqlite3_bind_blob'] =\n        wasmExports['sqlite3_bind_blob'])(a0, a1, a2, a3, a4));\n    var _sqlite3_bind_double = (Module['_sqlite3_bind_double'] = (a0, a1, a2) =>\n      (_sqlite3_bind_double = Module['_sqlite3_bind_double'] =\n        wasmExports['sqlite3_bind_double'])(a0, a1, a2));\n    var _sqlite3_bind_int = (Module['_sqlite3_bind_int'] = (a0, a1, a2) =>\n      (_sqlite3_bind_int = Module['_sqlite3_bind_int'] =\n        wasmExports['sqlite3_bind_int'])(a0, a1, a2));\n    var _sqlite3_bind_int64 = (Module['_sqlite3_bind_int64'] = (a0, a1, a2) =>\n      (_sqlite3_bind_int64 = Module['_sqlite3_bind_int64'] =\n        wasmExports['sqlite3_bind_int64'])(a0, a1, a2));\n    var _sqlite3_bind_null = (Module['_sqlite3_bind_null'] = (a0, a1) =>\n      (_sqlite3_bind_null = Module['_sqlite3_bind_null'] =\n        wasmExports['sqlite3_bind_null'])(a0, a1));\n    var _sqlite3_bind_pointer = (Module['_sqlite3_bind_pointer'] = (\n      a0,\n      a1,\n      a2,\n      a3,\n      a4,\n    ) =>\n      (_sqlite3_bind_pointer = Module['_sqlite3_bind_pointer'] =\n        wasmExports['sqlite3_bind_pointer'])(a0, a1, a2, a3, a4));\n    var _sqlite3_bind_text = (Module['_sqlite3_bind_text'] = (\n      a0,\n      a1,\n      a2,\n      a3,\n      a4,\n    ) =>\n      (_sqlite3_bind_text = Module['_sqlite3_bind_text'] =\n        wasmExports['sqlite3_bind_text'])(a0, a1, a2, a3, a4));\n    var _sqlite3_bind_parameter_count = (Module[\n      '_sqlite3_bind_parameter_count'\n    ] = (a0) =>\n      (_sqlite3_bind_parameter_count = Module['_sqlite3_bind_parameter_count'] =\n        wasmExports['sqlite3_bind_parameter_count'])(a0));\n    var _sqlite3_bind_parameter_name = (Module['_sqlite3_bind_parameter_name'] =\n      (a0, a1) =>\n        (_sqlite3_bind_parameter_name = Module['_sqlite3_bind_parameter_name'] =\n          wasmExports['sqlite3_bind_parameter_name'])(a0, a1));\n    var _sqlite3_bind_parameter_index = (Module[\n      '_sqlite3_bind_parameter_index'\n    ] = (a0, a1) =>\n      (_sqlite3_bind_parameter_index = Module['_sqlite3_bind_parameter_index'] =\n        wasmExports['sqlite3_bind_parameter_index'])(a0, a1));\n    var _sqlite3_db_handle = (Module['_sqlite3_db_handle'] = (a0) =>\n      (_sqlite3_db_handle = Module['_sqlite3_db_handle'] =\n        wasmExports['sqlite3_db_handle'])(a0));\n    var _sqlite3_stmt_readonly = (Module['_sqlite3_stmt_readonly'] = (a0) =>\n      (_sqlite3_stmt_readonly = Module['_sqlite3_stmt_readonly'] =\n        wasmExports['sqlite3_stmt_readonly'])(a0));\n    var _sqlite3_stmt_isexplain = (Module['_sqlite3_stmt_isexplain'] = (a0) =>\n      (_sqlite3_stmt_isexplain = Module['_sqlite3_stmt_isexplain'] =\n        wasmExports['sqlite3_stmt_isexplain'])(a0));\n    var _sqlite3_stmt_explain = (Module['_sqlite3_stmt_explain'] = (a0, a1) =>\n      (_sqlite3_stmt_explain = Module['_sqlite3_stmt_explain'] =\n        wasmExports['sqlite3_stmt_explain'])(a0, a1));\n    var _sqlite3_stmt_busy = (Module['_sqlite3_stmt_busy'] = (a0) =>\n      (_sqlite3_stmt_busy = Module['_sqlite3_stmt_busy'] =\n        wasmExports['sqlite3_stmt_busy'])(a0));\n    var _sqlite3_stmt_status = (Module['_sqlite3_stmt_status'] = (a0, a1, a2) =>\n      (_sqlite3_stmt_status = Module['_sqlite3_stmt_status'] =\n        wasmExports['sqlite3_stmt_status'])(a0, a1, a2));\n    var _sqlite3_sql = (Module['_sqlite3_sql'] = (a0) =>\n      (_sqlite3_sql = Module['_sqlite3_sql'] = wasmExports['sqlite3_sql'])(a0));\n    var _sqlite3_expanded_sql = (Module['_sqlite3_expanded_sql'] = (a0) =>\n      (_sqlite3_expanded_sql = Module['_sqlite3_expanded_sql'] =\n        wasmExports['sqlite3_expanded_sql'])(a0));\n    var _sqlite3_preupdate_old = (Module['_sqlite3_preupdate_old'] = (\n      a0,\n      a1,\n      a2,\n    ) =>\n      (_sqlite3_preupdate_old = Module['_sqlite3_preupdate_old'] =\n        wasmExports['sqlite3_preupdate_old'])(a0, a1, a2));\n    var _sqlite3_preupdate_count = (Module['_sqlite3_preupdate_count'] = (a0) =>\n      (_sqlite3_preupdate_count = Module['_sqlite3_preupdate_count'] =\n        wasmExports['sqlite3_preupdate_count'])(a0));\n    var _sqlite3_preupdate_depth = (Module['_sqlite3_preupdate_depth'] = (a0) =>\n      (_sqlite3_preupdate_depth = Module['_sqlite3_preupdate_depth'] =\n        wasmExports['sqlite3_preupdate_depth'])(a0));\n    var _sqlite3_preupdate_blobwrite = (Module['_sqlite3_preupdate_blobwrite'] =\n      (a0) =>\n        (_sqlite3_preupdate_blobwrite = Module['_sqlite3_preupdate_blobwrite'] =\n          wasmExports['sqlite3_preupdate_blobwrite'])(a0));\n    var _sqlite3_preupdate_new = (Module['_sqlite3_preupdate_new'] = (\n      a0,\n      a1,\n      a2,\n    ) =>\n      (_sqlite3_preupdate_new = Module['_sqlite3_preupdate_new'] =\n        wasmExports['sqlite3_preupdate_new'])(a0, a1, a2));\n    var _sqlite3_value_numeric_type = (Module['_sqlite3_value_numeric_type'] = (\n      a0,\n    ) =>\n      (_sqlite3_value_numeric_type = Module['_sqlite3_value_numeric_type'] =\n        wasmExports['sqlite3_value_numeric_type'])(a0));\n    var _sqlite3_set_authorizer = (Module['_sqlite3_set_authorizer'] = (\n      a0,\n      a1,\n      a2,\n    ) =>\n      (_sqlite3_set_authorizer = Module['_sqlite3_set_authorizer'] =\n        wasmExports['sqlite3_set_authorizer'])(a0, a1, a2));\n    var _sqlite3_strglob = (Module['_sqlite3_strglob'] = (a0, a1) =>\n      (_sqlite3_strglob = Module['_sqlite3_strglob'] =\n        wasmExports['sqlite3_strglob'])(a0, a1));\n    var _sqlite3_strlike = (Module['_sqlite3_strlike'] = (a0, a1, a2) =>\n      (_sqlite3_strlike = Module['_sqlite3_strlike'] =\n        wasmExports['sqlite3_strlike'])(a0, a1, a2));\n    var _sqlite3_auto_extension = (Module['_sqlite3_auto_extension'] = (a0) =>\n      (_sqlite3_auto_extension = Module['_sqlite3_auto_extension'] =\n        wasmExports['sqlite3_auto_extension'])(a0));\n    var _sqlite3_cancel_auto_extension = (Module[\n      '_sqlite3_cancel_auto_extension'\n    ] = (a0) =>\n      (_sqlite3_cancel_auto_extension = Module[\n        '_sqlite3_cancel_auto_extension'\n      ] =\n        wasmExports['sqlite3_cancel_auto_extension'])(a0));\n    var _sqlite3_reset_auto_extension = (Module[\n      '_sqlite3_reset_auto_extension'\n    ] = () =>\n      (_sqlite3_reset_auto_extension = Module['_sqlite3_reset_auto_extension'] =\n        wasmExports['sqlite3_reset_auto_extension'])());\n    var _sqlite3_prepare_v3 = (Module['_sqlite3_prepare_v3'] = (\n      a0,\n      a1,\n      a2,\n      a3,\n      a4,\n      a5,\n    ) =>\n      (_sqlite3_prepare_v3 = Module['_sqlite3_prepare_v3'] =\n        wasmExports['sqlite3_prepare_v3'])(a0, a1, a2, a3, a4, a5));\n    var _sqlite3_create_module = (Module['_sqlite3_create_module'] = (\n      a0,\n      a1,\n      a2,\n      a3,\n    ) =>\n      (_sqlite3_create_module = Module['_sqlite3_create_module'] =\n        wasmExports['sqlite3_create_module'])(a0, a1, a2, a3));\n    var _sqlite3_create_module_v2 = (Module['_sqlite3_create_module_v2'] = (\n      a0,\n      a1,\n      a2,\n      a3,\n      a4,\n    ) =>\n      (_sqlite3_create_module_v2 = Module['_sqlite3_create_module_v2'] =\n        wasmExports['sqlite3_create_module_v2'])(a0, a1, a2, a3, a4));\n    var _sqlite3_drop_modules = (Module['_sqlite3_drop_modules'] = (a0, a1) =>\n      (_sqlite3_drop_modules = Module['_sqlite3_drop_modules'] =\n        wasmExports['sqlite3_drop_modules'])(a0, a1));\n    var _sqlite3_declare_vtab = (Module['_sqlite3_declare_vtab'] = (a0, a1) =>\n      (_sqlite3_declare_vtab = Module['_sqlite3_declare_vtab'] =\n        wasmExports['sqlite3_declare_vtab'])(a0, a1));\n    var _sqlite3_vtab_on_conflict = (Module['_sqlite3_vtab_on_conflict'] = (\n      a0,\n    ) =>\n      (_sqlite3_vtab_on_conflict = Module['_sqlite3_vtab_on_conflict'] =\n        wasmExports['sqlite3_vtab_on_conflict'])(a0));\n    var _sqlite3_vtab_collation = (Module['_sqlite3_vtab_collation'] = (\n      a0,\n      a1,\n    ) =>\n      (_sqlite3_vtab_collation = Module['_sqlite3_vtab_collation'] =\n        wasmExports['sqlite3_vtab_collation'])(a0, a1));\n    var _sqlite3_vtab_in = (Module['_sqlite3_vtab_in'] = (a0, a1, a2) =>\n      (_sqlite3_vtab_in = Module['_sqlite3_vtab_in'] =\n        wasmExports['sqlite3_vtab_in'])(a0, a1, a2));\n    var _sqlite3_vtab_rhs_value = (Module['_sqlite3_vtab_rhs_value'] = (\n      a0,\n      a1,\n      a2,\n    ) =>\n      (_sqlite3_vtab_rhs_value = Module['_sqlite3_vtab_rhs_value'] =\n        wasmExports['sqlite3_vtab_rhs_value'])(a0, a1, a2));\n    var _sqlite3_vtab_distinct = (Module['_sqlite3_vtab_distinct'] = (a0) =>\n      (_sqlite3_vtab_distinct = Module['_sqlite3_vtab_distinct'] =\n        wasmExports['sqlite3_vtab_distinct'])(a0));\n    var _sqlite3_keyword_name = (Module['_sqlite3_keyword_name'] = (\n      a0,\n      a1,\n      a2,\n    ) =>\n      (_sqlite3_keyword_name = Module['_sqlite3_keyword_name'] =\n        wasmExports['sqlite3_keyword_name'])(a0, a1, a2));\n    var _sqlite3_keyword_count = (Module['_sqlite3_keyword_count'] = () =>\n      (_sqlite3_keyword_count = Module['_sqlite3_keyword_count'] =\n        wasmExports['sqlite3_keyword_count'])());\n    var _sqlite3_keyword_check = (Module['_sqlite3_keyword_check'] = (a0, a1) =>\n      (_sqlite3_keyword_check = Module['_sqlite3_keyword_check'] =\n        wasmExports['sqlite3_keyword_check'])(a0, a1));\n    var _sqlite3_complete = (Module['_sqlite3_complete'] = (a0) =>\n      (_sqlite3_complete = Module['_sqlite3_complete'] =\n        wasmExports['sqlite3_complete'])(a0));\n    var _sqlite3_libversion = (Module['_sqlite3_libversion'] = () =>\n      (_sqlite3_libversion = Module['_sqlite3_libversion'] =\n        wasmExports['sqlite3_libversion'])());\n    var _sqlite3_libversion_number = (Module['_sqlite3_libversion_number'] =\n      () =>\n        (_sqlite3_libversion_number = Module['_sqlite3_libversion_number'] =\n          wasmExports['sqlite3_libversion_number'])());\n    var _sqlite3_shutdown = (Module['_sqlite3_shutdown'] = () =>\n      (_sqlite3_shutdown = Module['_sqlite3_shutdown'] =\n        wasmExports['sqlite3_shutdown'])());\n    var _sqlite3_last_insert_rowid = (Module['_sqlite3_last_insert_rowid'] = (\n      a0,\n    ) =>\n      (_sqlite3_last_insert_rowid = Module['_sqlite3_last_insert_rowid'] =\n        wasmExports['sqlite3_last_insert_rowid'])(a0));\n    var _sqlite3_set_last_insert_rowid = (Module[\n      '_sqlite3_set_last_insert_rowid'\n    ] = (a0, a1) =>\n      (_sqlite3_set_last_insert_rowid = Module[\n        '_sqlite3_set_last_insert_rowid'\n      ] =\n        wasmExports['sqlite3_set_last_insert_rowid'])(a0, a1));\n    var _sqlite3_changes64 = (Module['_sqlite3_changes64'] = (a0) =>\n      (_sqlite3_changes64 = Module['_sqlite3_changes64'] =\n        wasmExports['sqlite3_changes64'])(a0));\n    var _sqlite3_changes = (Module['_sqlite3_changes'] = (a0) =>\n      (_sqlite3_changes = Module['_sqlite3_changes'] =\n        wasmExports['sqlite3_changes'])(a0));\n    var _sqlite3_total_changes64 = (Module['_sqlite3_total_changes64'] = (a0) =>\n      (_sqlite3_total_changes64 = Module['_sqlite3_total_changes64'] =\n        wasmExports['sqlite3_total_changes64'])(a0));\n    var _sqlite3_total_changes = (Module['_sqlite3_total_changes'] = (a0) =>\n      (_sqlite3_total_changes = Module['_sqlite3_total_changes'] =\n        wasmExports['sqlite3_total_changes'])(a0));\n    var _sqlite3_txn_state = (Module['_sqlite3_txn_state'] = (a0, a1) =>\n      (_sqlite3_txn_state = Module['_sqlite3_txn_state'] =\n        wasmExports['sqlite3_txn_state'])(a0, a1));\n    var _sqlite3_close_v2 = (Module['_sqlite3_close_v2'] = (a0) =>\n      (_sqlite3_close_v2 = Module['_sqlite3_close_v2'] =\n        wasmExports['sqlite3_close_v2'])(a0));\n    var _sqlite3_busy_handler = (Module['_sqlite3_busy_handler'] = (\n      a0,\n      a1,\n      a2,\n    ) =>\n      (_sqlite3_busy_handler = Module['_sqlite3_busy_handler'] =\n        wasmExports['sqlite3_busy_handler'])(a0, a1, a2));\n    var _sqlite3_progress_handler = (Module['_sqlite3_progress_handler'] = (\n      a0,\n      a1,\n      a2,\n      a3,\n    ) =>\n      (_sqlite3_progress_handler = Module['_sqlite3_progress_handler'] =\n        wasmExports['sqlite3_progress_handler'])(a0, a1, a2, a3));\n    var _sqlite3_busy_timeout = (Module['_sqlite3_busy_timeout'] = (a0, a1) =>\n      (_sqlite3_busy_timeout = Module['_sqlite3_busy_timeout'] =\n        wasmExports['sqlite3_busy_timeout'])(a0, a1));\n    var _sqlite3_interrupt = (Module['_sqlite3_interrupt'] = (a0) =>\n      (_sqlite3_interrupt = Module['_sqlite3_interrupt'] =\n        wasmExports['sqlite3_interrupt'])(a0));\n    var _sqlite3_is_interrupted = (Module['_sqlite3_is_interrupted'] = (a0) =>\n      (_sqlite3_is_interrupted = Module['_sqlite3_is_interrupted'] =\n        wasmExports['sqlite3_is_interrupted'])(a0));\n    var _sqlite3_create_function = (Module['_sqlite3_create_function'] = (\n      a0,\n      a1,\n      a2,\n      a3,\n      a4,\n      a5,\n      a6,\n      a7,\n    ) =>\n      (_sqlite3_create_function = Module['_sqlite3_create_function'] =\n        wasmExports['sqlite3_create_function'])(\n        a0,\n        a1,\n        a2,\n        a3,\n        a4,\n        a5,\n        a6,\n        a7,\n      ));\n    var _sqlite3_create_function_v2 = (Module['_sqlite3_create_function_v2'] = (\n      a0,\n      a1,\n      a2,\n      a3,\n      a4,\n      a5,\n      a6,\n      a7,\n      a8,\n    ) =>\n      (_sqlite3_create_function_v2 = Module['_sqlite3_create_function_v2'] =\n        wasmExports['sqlite3_create_function_v2'])(\n        a0,\n        a1,\n        a2,\n        a3,\n        a4,\n        a5,\n        a6,\n        a7,\n        a8,\n      ));\n    var _sqlite3_create_window_function = (Module[\n      '_sqlite3_create_window_function'\n    ] = (a0, a1, a2, a3, a4, a5, a6, a7, a8, a9) =>\n      (_sqlite3_create_window_function = Module[\n        '_sqlite3_create_window_function'\n      ] =\n        wasmExports['sqlite3_create_window_function'])(\n        a0,\n        a1,\n        a2,\n        a3,\n        a4,\n        a5,\n        a6,\n        a7,\n        a8,\n        a9,\n      ));\n    var _sqlite3_overload_function = (Module['_sqlite3_overload_function'] = (\n      a0,\n      a1,\n      a2,\n    ) =>\n      (_sqlite3_overload_function = Module['_sqlite3_overload_function'] =\n        wasmExports['sqlite3_overload_function'])(a0, a1, a2));\n    var _sqlite3_trace_v2 = (Module['_sqlite3_trace_v2'] = (a0, a1, a2, a3) =>\n      (_sqlite3_trace_v2 = Module['_sqlite3_trace_v2'] =\n        wasmExports['sqlite3_trace_v2'])(a0, a1, a2, a3));\n    var _sqlite3_commit_hook = (Module['_sqlite3_commit_hook'] = (a0, a1, a2) =>\n      (_sqlite3_commit_hook = Module['_sqlite3_commit_hook'] =\n        wasmExports['sqlite3_commit_hook'])(a0, a1, a2));\n    var _sqlite3_update_hook = (Module['_sqlite3_update_hook'] = (a0, a1, a2) =>\n      (_sqlite3_update_hook = Module['_sqlite3_update_hook'] =\n        wasmExports['sqlite3_update_hook'])(a0, a1, a2));\n    var _sqlite3_rollback_hook = (Module['_sqlite3_rollback_hook'] = (\n      a0,\n      a1,\n      a2,\n    ) =>\n      (_sqlite3_rollback_hook = Module['_sqlite3_rollback_hook'] =\n        wasmExports['sqlite3_rollback_hook'])(a0, a1, a2));\n    var _sqlite3_preupdate_hook = (Module['_sqlite3_preupdate_hook'] = (\n      a0,\n      a1,\n      a2,\n    ) =>\n      (_sqlite3_preupdate_hook = Module['_sqlite3_preupdate_hook'] =\n        wasmExports['sqlite3_preupdate_hook'])(a0, a1, a2));\n    var _sqlite3_error_offset = (Module['_sqlite3_error_offset'] = (a0) =>\n      (_sqlite3_error_offset = Module['_sqlite3_error_offset'] =\n        wasmExports['sqlite3_error_offset'])(a0));\n    var _sqlite3_errcode = (Module['_sqlite3_errcode'] = (a0) =>\n      (_sqlite3_errcode = Module['_sqlite3_errcode'] =\n        wasmExports['sqlite3_errcode'])(a0));\n    var _sqlite3_extended_errcode = (Module['_sqlite3_extended_errcode'] = (\n      a0,\n    ) =>\n      (_sqlite3_extended_errcode = Module['_sqlite3_extended_errcode'] =\n        wasmExports['sqlite3_extended_errcode'])(a0));\n    var _sqlite3_errstr = (Module['_sqlite3_errstr'] = (a0) =>\n      (_sqlite3_errstr = Module['_sqlite3_errstr'] =\n        wasmExports['sqlite3_errstr'])(a0));\n    var _sqlite3_limit = (Module['_sqlite3_limit'] = (a0, a1, a2) =>\n      (_sqlite3_limit = Module['_sqlite3_limit'] =\n        wasmExports['sqlite3_limit'])(a0, a1, a2));\n    var _sqlite3_open = (Module['_sqlite3_open'] = (a0, a1) =>\n      (_sqlite3_open = Module['_sqlite3_open'] = wasmExports['sqlite3_open'])(\n        a0,\n        a1,\n      ));\n    var _sqlite3_open_v2 = (Module['_sqlite3_open_v2'] = (a0, a1, a2, a3) =>\n      (_sqlite3_open_v2 = Module['_sqlite3_open_v2'] =\n        wasmExports['sqlite3_open_v2'])(a0, a1, a2, a3));\n    var _sqlite3_create_collation = (Module['_sqlite3_create_collation'] = (\n      a0,\n      a1,\n      a2,\n      a3,\n      a4,\n    ) =>\n      (_sqlite3_create_collation = Module['_sqlite3_create_collation'] =\n        wasmExports['sqlite3_create_collation'])(a0, a1, a2, a3, a4));\n    var _sqlite3_create_collation_v2 = (Module['_sqlite3_create_collation_v2'] =\n      (a0, a1, a2, a3, a4, a5) =>\n        (_sqlite3_create_collation_v2 = Module['_sqlite3_create_collation_v2'] =\n          wasmExports['sqlite3_create_collation_v2'])(a0, a1, a2, a3, a4, a5));\n    var _sqlite3_collation_needed = (Module['_sqlite3_collation_needed'] = (\n      a0,\n      a1,\n      a2,\n    ) =>\n      (_sqlite3_collation_needed = Module['_sqlite3_collation_needed'] =\n        wasmExports['sqlite3_collation_needed'])(a0, a1, a2));\n    var _sqlite3_get_autocommit = (Module['_sqlite3_get_autocommit'] = (a0) =>\n      (_sqlite3_get_autocommit = Module['_sqlite3_get_autocommit'] =\n        wasmExports['sqlite3_get_autocommit'])(a0));\n    var _sqlite3_table_column_metadata = (Module[\n      '_sqlite3_table_column_metadata'\n    ] = (a0, a1, a2, a3, a4, a5, a6, a7, a8) =>\n      (_sqlite3_table_column_metadata = Module[\n        '_sqlite3_table_column_metadata'\n      ] =\n        wasmExports['sqlite3_table_column_metadata'])(\n        a0,\n        a1,\n        a2,\n        a3,\n        a4,\n        a5,\n        a6,\n        a7,\n        a8,\n      ));\n    var _sqlite3_extended_result_codes = (Module[\n      '_sqlite3_extended_result_codes'\n    ] = (a0, a1) =>\n      (_sqlite3_extended_result_codes = Module[\n        '_sqlite3_extended_result_codes'\n      ] =\n        wasmExports['sqlite3_extended_result_codes'])(a0, a1));\n    var _sqlite3_uri_key = (Module['_sqlite3_uri_key'] = (a0, a1) =>\n      (_sqlite3_uri_key = Module['_sqlite3_uri_key'] =\n        wasmExports['sqlite3_uri_key'])(a0, a1));\n    var _sqlite3_uri_int64 = (Module['_sqlite3_uri_int64'] = (a0, a1, a2) =>\n      (_sqlite3_uri_int64 = Module['_sqlite3_uri_int64'] =\n        wasmExports['sqlite3_uri_int64'])(a0, a1, a2));\n    var _sqlite3_db_name = (Module['_sqlite3_db_name'] = (a0, a1) =>\n      (_sqlite3_db_name = Module['_sqlite3_db_name'] =\n        wasmExports['sqlite3_db_name'])(a0, a1));\n    var _sqlite3_db_filename = (Module['_sqlite3_db_filename'] = (a0, a1) =>\n      (_sqlite3_db_filename = Module['_sqlite3_db_filename'] =\n        wasmExports['sqlite3_db_filename'])(a0, a1));\n    var _sqlite3_db_readonly = (Module['_sqlite3_db_readonly'] = (a0, a1) =>\n      (_sqlite3_db_readonly = Module['_sqlite3_db_readonly'] =\n        wasmExports['sqlite3_db_readonly'])(a0, a1));\n    var _sqlite3_compileoption_used = (Module['_sqlite3_compileoption_used'] = (\n      a0,\n    ) =>\n      (_sqlite3_compileoption_used = Module['_sqlite3_compileoption_used'] =\n        wasmExports['sqlite3_compileoption_used'])(a0));\n    var _sqlite3_compileoption_get = (Module['_sqlite3_compileoption_get'] = (\n      a0,\n    ) =>\n      (_sqlite3_compileoption_get = Module['_sqlite3_compileoption_get'] =\n        wasmExports['sqlite3_compileoption_get'])(a0));\n    var _sqlite3session_diff = (Module['_sqlite3session_diff'] = (\n      a0,\n      a1,\n      a2,\n      a3,\n    ) =>\n      (_sqlite3session_diff = Module['_sqlite3session_diff'] =\n        wasmExports['sqlite3session_diff'])(a0, a1, a2, a3));\n    var _sqlite3session_attach = (Module['_sqlite3session_attach'] = (a0, a1) =>\n      (_sqlite3session_attach = Module['_sqlite3session_attach'] =\n        wasmExports['sqlite3session_attach'])(a0, a1));\n    var _sqlite3session_create = (Module['_sqlite3session_create'] = (\n      a0,\n      a1,\n      a2,\n    ) =>\n      (_sqlite3session_create = Module['_sqlite3session_create'] =\n        wasmExports['sqlite3session_create'])(a0, a1, a2));\n    var _sqlite3session_delete = (Module['_sqlite3session_delete'] = (a0) =>\n      (_sqlite3session_delete = Module['_sqlite3session_delete'] =\n        wasmExports['sqlite3session_delete'])(a0));\n    var _sqlite3session_table_filter = (Module['_sqlite3session_table_filter'] =\n      (a0, a1, a2) =>\n        (_sqlite3session_table_filter = Module['_sqlite3session_table_filter'] =\n          wasmExports['sqlite3session_table_filter'])(a0, a1, a2));\n    var _sqlite3session_changeset = (Module['_sqlite3session_changeset'] = (\n      a0,\n      a1,\n      a2,\n    ) =>\n      (_sqlite3session_changeset = Module['_sqlite3session_changeset'] =\n        wasmExports['sqlite3session_changeset'])(a0, a1, a2));\n    var _sqlite3session_changeset_strm = (Module[\n      '_sqlite3session_changeset_strm'\n    ] = (a0, a1, a2) =>\n      (_sqlite3session_changeset_strm = Module[\n        '_sqlite3session_changeset_strm'\n      ] =\n        wasmExports['sqlite3session_changeset_strm'])(a0, a1, a2));\n    var _sqlite3session_patchset_strm = (Module[\n      '_sqlite3session_patchset_strm'\n    ] = (a0, a1, a2) =>\n      (_sqlite3session_patchset_strm = Module['_sqlite3session_patchset_strm'] =\n        wasmExports['sqlite3session_patchset_strm'])(a0, a1, a2));\n    var _sqlite3session_patchset = (Module['_sqlite3session_patchset'] = (\n      a0,\n      a1,\n      a2,\n    ) =>\n      (_sqlite3session_patchset = Module['_sqlite3session_patchset'] =\n        wasmExports['sqlite3session_patchset'])(a0, a1, a2));\n    var _sqlite3session_enable = (Module['_sqlite3session_enable'] = (a0, a1) =>\n      (_sqlite3session_enable = Module['_sqlite3session_enable'] =\n        wasmExports['sqlite3session_enable'])(a0, a1));\n    var _sqlite3session_indirect = (Module['_sqlite3session_indirect'] = (\n      a0,\n      a1,\n    ) =>\n      (_sqlite3session_indirect = Module['_sqlite3session_indirect'] =\n        wasmExports['sqlite3session_indirect'])(a0, a1));\n    var _sqlite3session_isempty = (Module['_sqlite3session_isempty'] = (a0) =>\n      (_sqlite3session_isempty = Module['_sqlite3session_isempty'] =\n        wasmExports['sqlite3session_isempty'])(a0));\n    var _sqlite3session_memory_used = (Module['_sqlite3session_memory_used'] = (\n      a0,\n    ) =>\n      (_sqlite3session_memory_used = Module['_sqlite3session_memory_used'] =\n        wasmExports['sqlite3session_memory_used'])(a0));\n    var _sqlite3session_object_config = (Module[\n      '_sqlite3session_object_config'\n    ] = (a0, a1, a2) =>\n      (_sqlite3session_object_config = Module['_sqlite3session_object_config'] =\n        wasmExports['sqlite3session_object_config'])(a0, a1, a2));\n    var _sqlite3session_changeset_size = (Module[\n      '_sqlite3session_changeset_size'\n    ] = (a0) =>\n      (_sqlite3session_changeset_size = Module[\n        '_sqlite3session_changeset_size'\n      ] =\n        wasmExports['sqlite3session_changeset_size'])(a0));\n    var _sqlite3changeset_start = (Module['_sqlite3changeset_start'] = (\n      a0,\n      a1,\n      a2,\n    ) =>\n      (_sqlite3changeset_start = Module['_sqlite3changeset_start'] =\n        wasmExports['sqlite3changeset_start'])(a0, a1, a2));\n    var _sqlite3changeset_start_v2 = (Module['_sqlite3changeset_start_v2'] = (\n      a0,\n      a1,\n      a2,\n      a3,\n    ) =>\n      (_sqlite3changeset_start_v2 = Module['_sqlite3changeset_start_v2'] =\n        wasmExports['sqlite3changeset_start_v2'])(a0, a1, a2, a3));\n    var _sqlite3changeset_start_strm = (Module['_sqlite3changeset_start_strm'] =\n      (a0, a1, a2) =>\n        (_sqlite3changeset_start_strm = Module['_sqlite3changeset_start_strm'] =\n          wasmExports['sqlite3changeset_start_strm'])(a0, a1, a2));\n    var _sqlite3changeset_start_v2_strm = (Module[\n      '_sqlite3changeset_start_v2_strm'\n    ] = (a0, a1, a2, a3) =>\n      (_sqlite3changeset_start_v2_strm = Module[\n        '_sqlite3changeset_start_v2_strm'\n      ] =\n        wasmExports['sqlite3changeset_start_v2_strm'])(a0, a1, a2, a3));\n    var _sqlite3changeset_next = (Module['_sqlite3changeset_next'] = (a0) =>\n      (_sqlite3changeset_next = Module['_sqlite3changeset_next'] =\n        wasmExports['sqlite3changeset_next'])(a0));\n    var _sqlite3changeset_op = (Module['_sqlite3changeset_op'] = (\n      a0,\n      a1,\n      a2,\n      a3,\n      a4,\n    ) =>\n      (_sqlite3changeset_op = Module['_sqlite3changeset_op'] =\n        wasmExports['sqlite3changeset_op'])(a0, a1, a2, a3, a4));\n    var _sqlite3changeset_pk = (Module['_sqlite3changeset_pk'] = (a0, a1, a2) =>\n      (_sqlite3changeset_pk = Module['_sqlite3changeset_pk'] =\n        wasmExports['sqlite3changeset_pk'])(a0, a1, a2));\n    var _sqlite3changeset_old = (Module['_sqlite3changeset_old'] = (\n      a0,\n      a1,\n      a2,\n    ) =>\n      (_sqlite3changeset_old = Module['_sqlite3changeset_old'] =\n        wasmExports['sqlite3changeset_old'])(a0, a1, a2));\n    var _sqlite3changeset_new = (Module['_sqlite3changeset_new'] = (\n      a0,\n      a1,\n      a2,\n    ) =>\n      (_sqlite3changeset_new = Module['_sqlite3changeset_new'] =\n        wasmExports['sqlite3changeset_new'])(a0, a1, a2));\n    var _sqlite3changeset_conflict = (Module['_sqlite3changeset_conflict'] = (\n      a0,\n      a1,\n      a2,\n    ) =>\n      (_sqlite3changeset_conflict = Module['_sqlite3changeset_conflict'] =\n        wasmExports['sqlite3changeset_conflict'])(a0, a1, a2));\n    var _sqlite3changeset_fk_conflicts = (Module[\n      '_sqlite3changeset_fk_conflicts'\n    ] = (a0, a1) =>\n      (_sqlite3changeset_fk_conflicts = Module[\n        '_sqlite3changeset_fk_conflicts'\n      ] =\n        wasmExports['sqlite3changeset_fk_conflicts'])(a0, a1));\n    var _sqlite3changeset_finalize = (Module['_sqlite3changeset_finalize'] = (\n      a0,\n    ) =>\n      (_sqlite3changeset_finalize = Module['_sqlite3changeset_finalize'] =\n        wasmExports['sqlite3changeset_finalize'])(a0));\n    var _sqlite3changeset_invert = (Module['_sqlite3changeset_invert'] = (\n      a0,\n      a1,\n      a2,\n      a3,\n    ) =>\n      (_sqlite3changeset_invert = Module['_sqlite3changeset_invert'] =\n        wasmExports['sqlite3changeset_invert'])(a0, a1, a2, a3));\n    var _sqlite3changeset_invert_strm = (Module[\n      '_sqlite3changeset_invert_strm'\n    ] = (a0, a1, a2, a3) =>\n      (_sqlite3changeset_invert_strm = Module['_sqlite3changeset_invert_strm'] =\n        wasmExports['sqlite3changeset_invert_strm'])(a0, a1, a2, a3));\n    var _sqlite3changeset_apply_v2 = (Module['_sqlite3changeset_apply_v2'] = (\n      a0,\n      a1,\n      a2,\n      a3,\n      a4,\n      a5,\n      a6,\n      a7,\n      a8,\n    ) =>\n      (_sqlite3changeset_apply_v2 = Module['_sqlite3changeset_apply_v2'] =\n        wasmExports['sqlite3changeset_apply_v2'])(\n        a0,\n        a1,\n        a2,\n        a3,\n        a4,\n        a5,\n        a6,\n        a7,\n        a8,\n      ));\n    var _sqlite3changeset_apply = (Module['_sqlite3changeset_apply'] = (\n      a0,\n      a1,\n      a2,\n      a3,\n      a4,\n      a5,\n    ) =>\n      (_sqlite3changeset_apply = Module['_sqlite3changeset_apply'] =\n        wasmExports['sqlite3changeset_apply'])(a0, a1, a2, a3, a4, a5));\n    var _sqlite3changeset_apply_v2_strm = (Module[\n      '_sqlite3changeset_apply_v2_strm'\n    ] = (a0, a1, a2, a3, a4, a5, a6, a7, a8) =>\n      (_sqlite3changeset_apply_v2_strm = Module[\n        '_sqlite3changeset_apply_v2_strm'\n      ] =\n        wasmExports['sqlite3changeset_apply_v2_strm'])(\n        a0,\n        a1,\n        a2,\n        a3,\n        a4,\n        a5,\n        a6,\n        a7,\n        a8,\n      ));\n    var _sqlite3changeset_apply_strm = (Module['_sqlite3changeset_apply_strm'] =\n      (a0, a1, a2, a3, a4, a5) =>\n        (_sqlite3changeset_apply_strm = Module['_sqlite3changeset_apply_strm'] =\n          wasmExports['sqlite3changeset_apply_strm'])(a0, a1, a2, a3, a4, a5));\n    var _sqlite3changegroup_new = (Module['_sqlite3changegroup_new'] = (a0) =>\n      (_sqlite3changegroup_new = Module['_sqlite3changegroup_new'] =\n        wasmExports['sqlite3changegroup_new'])(a0));\n    var _sqlite3changegroup_add = (Module['_sqlite3changegroup_add'] = (\n      a0,\n      a1,\n      a2,\n    ) =>\n      (_sqlite3changegroup_add = Module['_sqlite3changegroup_add'] =\n        wasmExports['sqlite3changegroup_add'])(a0, a1, a2));\n    var _sqlite3changegroup_output = (Module['_sqlite3changegroup_output'] = (\n      a0,\n      a1,\n      a2,\n    ) =>\n      (_sqlite3changegroup_output = Module['_sqlite3changegroup_output'] =\n        wasmExports['sqlite3changegroup_output'])(a0, a1, a2));\n    var _sqlite3changegroup_add_strm = (Module['_sqlite3changegroup_add_strm'] =\n      (a0, a1, a2) =>\n        (_sqlite3changegroup_add_strm = Module['_sqlite3changegroup_add_strm'] =\n          wasmExports['sqlite3changegroup_add_strm'])(a0, a1, a2));\n    var _sqlite3changegroup_output_strm = (Module[\n      '_sqlite3changegroup_output_strm'\n    ] = (a0, a1, a2) =>\n      (_sqlite3changegroup_output_strm = Module[\n        '_sqlite3changegroup_output_strm'\n      ] =\n        wasmExports['sqlite3changegroup_output_strm'])(a0, a1, a2));\n    var _sqlite3changegroup_delete = (Module['_sqlite3changegroup_delete'] = (\n      a0,\n    ) =>\n      (_sqlite3changegroup_delete = Module['_sqlite3changegroup_delete'] =\n        wasmExports['sqlite3changegroup_delete'])(a0));\n    var _sqlite3changeset_concat = (Module['_sqlite3changeset_concat'] = (\n      a0,\n      a1,\n      a2,\n      a3,\n      a4,\n      a5,\n    ) =>\n      (_sqlite3changeset_concat = Module['_sqlite3changeset_concat'] =\n        wasmExports['sqlite3changeset_concat'])(a0, a1, a2, a3, a4, a5));\n    var _sqlite3changeset_concat_strm = (Module[\n      '_sqlite3changeset_concat_strm'\n    ] = (a0, a1, a2, a3, a4, a5) =>\n      (_sqlite3changeset_concat_strm = Module['_sqlite3changeset_concat_strm'] =\n        wasmExports['sqlite3changeset_concat_strm'])(a0, a1, a2, a3, a4, a5));\n    var _sqlite3session_config = (Module['_sqlite3session_config'] = (a0, a1) =>\n      (_sqlite3session_config = Module['_sqlite3session_config'] =\n        wasmExports['sqlite3session_config'])(a0, a1));\n    var _sqlite3_sourceid = (Module['_sqlite3_sourceid'] = () =>\n      (_sqlite3_sourceid = Module['_sqlite3_sourceid'] =\n        wasmExports['sqlite3_sourceid'])());\n    var _sqlite3__wasm_pstack_ptr = (Module['_sqlite3__wasm_pstack_ptr'] = () =>\n      (_sqlite3__wasm_pstack_ptr = Module['_sqlite3__wasm_pstack_ptr'] =\n        wasmExports['sqlite3__wasm_pstack_ptr'])());\n    var _sqlite3__wasm_pstack_restore = (Module[\n      '_sqlite3__wasm_pstack_restore'\n    ] = (a0) =>\n      (_sqlite3__wasm_pstack_restore = Module['_sqlite3__wasm_pstack_restore'] =\n        wasmExports['sqlite3__wasm_pstack_restore'])(a0));\n    var _sqlite3__wasm_pstack_alloc = (Module['_sqlite3__wasm_pstack_alloc'] = (\n      a0,\n    ) =>\n      (_sqlite3__wasm_pstack_alloc = Module['_sqlite3__wasm_pstack_alloc'] =\n        wasmExports['sqlite3__wasm_pstack_alloc'])(a0));\n    var _sqlite3__wasm_pstack_remaining = (Module[\n      '_sqlite3__wasm_pstack_remaining'\n    ] = () =>\n      (_sqlite3__wasm_pstack_remaining = Module[\n        '_sqlite3__wasm_pstack_remaining'\n      ] =\n        wasmExports['sqlite3__wasm_pstack_remaining'])());\n    var _sqlite3__wasm_pstack_quota = (Module['_sqlite3__wasm_pstack_quota'] =\n      () =>\n        (_sqlite3__wasm_pstack_quota = Module['_sqlite3__wasm_pstack_quota'] =\n          wasmExports['sqlite3__wasm_pstack_quota'])());\n    var _sqlite3__wasm_db_error = (Module['_sqlite3__wasm_db_error'] = (\n      a0,\n      a1,\n      a2,\n    ) =>\n      (_sqlite3__wasm_db_error = Module['_sqlite3__wasm_db_error'] =\n        wasmExports['sqlite3__wasm_db_error'])(a0, a1, a2));\n    var _sqlite3__wasm_test_struct = (Module['_sqlite3__wasm_test_struct'] = (\n      a0,\n    ) =>\n      (_sqlite3__wasm_test_struct = Module['_sqlite3__wasm_test_struct'] =\n        wasmExports['sqlite3__wasm_test_struct'])(a0));\n    var _sqlite3__wasm_enum_json = (Module['_sqlite3__wasm_enum_json'] = () =>\n      (_sqlite3__wasm_enum_json = Module['_sqlite3__wasm_enum_json'] =\n        wasmExports['sqlite3__wasm_enum_json'])());\n    var _sqlite3__wasm_vfs_unlink = (Module['_sqlite3__wasm_vfs_unlink'] = (\n      a0,\n      a1,\n    ) =>\n      (_sqlite3__wasm_vfs_unlink = Module['_sqlite3__wasm_vfs_unlink'] =\n        wasmExports['sqlite3__wasm_vfs_unlink'])(a0, a1));\n    var _sqlite3__wasm_db_vfs = (Module['_sqlite3__wasm_db_vfs'] = (a0, a1) =>\n      (_sqlite3__wasm_db_vfs = Module['_sqlite3__wasm_db_vfs'] =\n        wasmExports['sqlite3__wasm_db_vfs'])(a0, a1));\n    var _sqlite3__wasm_db_reset = (Module['_sqlite3__wasm_db_reset'] = (a0) =>\n      (_sqlite3__wasm_db_reset = Module['_sqlite3__wasm_db_reset'] =\n        wasmExports['sqlite3__wasm_db_reset'])(a0));\n    var _sqlite3__wasm_db_export_chunked = (Module[\n      '_sqlite3__wasm_db_export_chunked'\n    ] = (a0, a1) =>\n      (_sqlite3__wasm_db_export_chunked = Module[\n        '_sqlite3__wasm_db_export_chunked'\n      ] =\n        wasmExports['sqlite3__wasm_db_export_chunked'])(a0, a1));\n    var _sqlite3__wasm_db_serialize = (Module['_sqlite3__wasm_db_serialize'] = (\n      a0,\n      a1,\n      a2,\n      a3,\n      a4,\n    ) =>\n      (_sqlite3__wasm_db_serialize = Module['_sqlite3__wasm_db_serialize'] =\n        wasmExports['sqlite3__wasm_db_serialize'])(a0, a1, a2, a3, a4));\n    var _sqlite3__wasm_vfs_create_file = (Module[\n      '_sqlite3__wasm_vfs_create_file'\n    ] = (a0, a1, a2, a3) =>\n      (_sqlite3__wasm_vfs_create_file = Module[\n        '_sqlite3__wasm_vfs_create_file'\n      ] =\n        wasmExports['sqlite3__wasm_vfs_create_file'])(a0, a1, a2, a3));\n    var _sqlite3__wasm_posix_create_file = (Module[\n      '_sqlite3__wasm_posix_create_file'\n    ] = (a0, a1, a2) =>\n      (_sqlite3__wasm_posix_create_file = Module[\n        '_sqlite3__wasm_posix_create_file'\n      ] =\n        wasmExports['sqlite3__wasm_posix_create_file'])(a0, a1, a2));\n    var _sqlite3__wasm_kvvfsMakeKeyOnPstack = (Module[\n      '_sqlite3__wasm_kvvfsMakeKeyOnPstack'\n    ] = (a0, a1) =>\n      (_sqlite3__wasm_kvvfsMakeKeyOnPstack = Module[\n        '_sqlite3__wasm_kvvfsMakeKeyOnPstack'\n      ] =\n        wasmExports['sqlite3__wasm_kvvfsMakeKeyOnPstack'])(a0, a1));\n    var _sqlite3__wasm_kvvfs_methods = (Module['_sqlite3__wasm_kvvfs_methods'] =\n      () =>\n        (_sqlite3__wasm_kvvfs_methods = Module['_sqlite3__wasm_kvvfs_methods'] =\n          wasmExports['sqlite3__wasm_kvvfs_methods'])());\n    var _sqlite3__wasm_vtab_config = (Module['_sqlite3__wasm_vtab_config'] = (\n      a0,\n      a1,\n      a2,\n    ) =>\n      (_sqlite3__wasm_vtab_config = Module['_sqlite3__wasm_vtab_config'] =\n        wasmExports['sqlite3__wasm_vtab_config'])(a0, a1, a2));\n    var _sqlite3__wasm_db_config_ip = (Module['_sqlite3__wasm_db_config_ip'] = (\n      a0,\n      a1,\n      a2,\n      a3,\n    ) =>\n      (_sqlite3__wasm_db_config_ip = Module['_sqlite3__wasm_db_config_ip'] =\n        wasmExports['sqlite3__wasm_db_config_ip'])(a0, a1, a2, a3));\n    var _sqlite3__wasm_db_config_pii = (Module['_sqlite3__wasm_db_config_pii'] =\n      (a0, a1, a2, a3, a4) =>\n        (_sqlite3__wasm_db_config_pii = Module['_sqlite3__wasm_db_config_pii'] =\n          wasmExports['sqlite3__wasm_db_config_pii'])(a0, a1, a2, a3, a4));\n    var _sqlite3__wasm_db_config_s = (Module['_sqlite3__wasm_db_config_s'] = (\n      a0,\n      a1,\n      a2,\n    ) =>\n      (_sqlite3__wasm_db_config_s = Module['_sqlite3__wasm_db_config_s'] =\n        wasmExports['sqlite3__wasm_db_config_s'])(a0, a1, a2));\n    var _sqlite3__wasm_config_i = (Module['_sqlite3__wasm_config_i'] = (\n      a0,\n      a1,\n    ) =>\n      (_sqlite3__wasm_config_i = Module['_sqlite3__wasm_config_i'] =\n        wasmExports['sqlite3__wasm_config_i'])(a0, a1));\n    var _sqlite3__wasm_config_ii = (Module['_sqlite3__wasm_config_ii'] = (\n      a0,\n      a1,\n      a2,\n    ) =>\n      (_sqlite3__wasm_config_ii = Module['_sqlite3__wasm_config_ii'] =\n        wasmExports['sqlite3__wasm_config_ii'])(a0, a1, a2));\n    var _sqlite3__wasm_config_j = (Module['_sqlite3__wasm_config_j'] = (\n      a0,\n      a1,\n    ) =>\n      (_sqlite3__wasm_config_j = Module['_sqlite3__wasm_config_j'] =\n        wasmExports['sqlite3__wasm_config_j'])(a0, a1));\n    var _sqlite3__wasm_qfmt_token = (Module['_sqlite3__wasm_qfmt_token'] = (\n      a0,\n      a1,\n    ) =>\n      (_sqlite3__wasm_qfmt_token = Module['_sqlite3__wasm_qfmt_token'] =\n        wasmExports['sqlite3__wasm_qfmt_token'])(a0, a1));\n    var _sqlite3__wasm_init_wasmfs = (Module['_sqlite3__wasm_init_wasmfs'] = (\n      a0,\n    ) =>\n      (_sqlite3__wasm_init_wasmfs = Module['_sqlite3__wasm_init_wasmfs'] =\n        wasmExports['sqlite3__wasm_init_wasmfs'])(a0));\n    var _sqlite3__wasm_test_intptr = (Module['_sqlite3__wasm_test_intptr'] = (\n      a0,\n    ) =>\n      (_sqlite3__wasm_test_intptr = Module['_sqlite3__wasm_test_intptr'] =\n        wasmExports['sqlite3__wasm_test_intptr'])(a0));\n    var _sqlite3__wasm_test_voidptr = (Module['_sqlite3__wasm_test_voidptr'] = (\n      a0,\n    ) =>\n      (_sqlite3__wasm_test_voidptr = Module['_sqlite3__wasm_test_voidptr'] =\n        wasmExports['sqlite3__wasm_test_voidptr'])(a0));\n    var _sqlite3__wasm_test_int64_max = (Module[\n      '_sqlite3__wasm_test_int64_max'\n    ] = () =>\n      (_sqlite3__wasm_test_int64_max = Module['_sqlite3__wasm_test_int64_max'] =\n        wasmExports['sqlite3__wasm_test_int64_max'])());\n    var _sqlite3__wasm_test_int64_min = (Module[\n      '_sqlite3__wasm_test_int64_min'\n    ] = () =>\n      (_sqlite3__wasm_test_int64_min = Module['_sqlite3__wasm_test_int64_min'] =\n        wasmExports['sqlite3__wasm_test_int64_min'])());\n    var _sqlite3__wasm_test_int64_times2 = (Module[\n      '_sqlite3__wasm_test_int64_times2'\n    ] = (a0) =>\n      (_sqlite3__wasm_test_int64_times2 = Module[\n        '_sqlite3__wasm_test_int64_times2'\n      ] =\n        wasmExports['sqlite3__wasm_test_int64_times2'])(a0));\n    var _sqlite3__wasm_test_int64_minmax = (Module[\n      '_sqlite3__wasm_test_int64_minmax'\n    ] = (a0, a1) =>\n      (_sqlite3__wasm_test_int64_minmax = Module[\n        '_sqlite3__wasm_test_int64_minmax'\n      ] =\n        wasmExports['sqlite3__wasm_test_int64_minmax'])(a0, a1));\n    var _sqlite3__wasm_test_int64ptr = (Module['_sqlite3__wasm_test_int64ptr'] =\n      (a0) =>\n        (_sqlite3__wasm_test_int64ptr = Module['_sqlite3__wasm_test_int64ptr'] =\n          wasmExports['sqlite3__wasm_test_int64ptr'])(a0));\n    var _sqlite3__wasm_test_stack_overflow = (Module[\n      '_sqlite3__wasm_test_stack_overflow'\n    ] = (a0) =>\n      (_sqlite3__wasm_test_stack_overflow = Module[\n        '_sqlite3__wasm_test_stack_overflow'\n      ] =\n        wasmExports['sqlite3__wasm_test_stack_overflow'])(a0));\n    var _sqlite3__wasm_test_str_hello = (Module[\n      '_sqlite3__wasm_test_str_hello'\n    ] = (a0) =>\n      (_sqlite3__wasm_test_str_hello = Module['_sqlite3__wasm_test_str_hello'] =\n        wasmExports['sqlite3__wasm_test_str_hello'])(a0));\n    var _sqlite3__wasm_SQLTester_strglob = (Module[\n      '_sqlite3__wasm_SQLTester_strglob'\n    ] = (a0, a1) =>\n      (_sqlite3__wasm_SQLTester_strglob = Module[\n        '_sqlite3__wasm_SQLTester_strglob'\n      ] =\n        wasmExports['sqlite3__wasm_SQLTester_strglob'])(a0, a1));\n    var _malloc = (Module['_malloc'] = (a0) =>\n      (_malloc = Module['_malloc'] = wasmExports['malloc'])(a0));\n    var _free = (Module['_free'] = (a0) =>\n      (_free = Module['_free'] = wasmExports['free'])(a0));\n    var _realloc = (Module['_realloc'] = (a0, a1) =>\n      (_realloc = Module['_realloc'] = wasmExports['realloc'])(a0, a1));\n    var _emscripten_builtin_memalign = (a0, a1) =>\n      (_emscripten_builtin_memalign =\n        wasmExports['emscripten_builtin_memalign'])(a0, a1);\n    var __emscripten_stack_restore = (a0) =>\n      (__emscripten_stack_restore = wasmExports['_emscripten_stack_restore'])(\n        a0,\n      );\n    var __emscripten_stack_alloc = (a0) =>\n      (__emscripten_stack_alloc = wasmExports['_emscripten_stack_alloc'])(a0);\n    var _emscripten_stack_get_current = () =>\n      (_emscripten_stack_get_current =\n        wasmExports['emscripten_stack_get_current'])();\n\n    Module['wasmMemory'] = wasmMemory;\n\n    var calledRun;\n    var calledPrerun;\n\n    dependenciesFulfilled = function runCaller() {\n      if (!calledRun) run();\n      if (!calledRun) dependenciesFulfilled = runCaller;\n    };\n\n    function run() {\n      if (runDependencies > 0) {\n        return;\n      }\n\n      if (!calledPrerun) {\n        calledPrerun = 1;\n        preRun();\n\n        if (runDependencies > 0) {\n          return;\n        }\n      }\n\n      function doRun() {\n        if (calledRun) return;\n        calledRun = 1;\n        Module['calledRun'] = 1;\n\n        if (ABORT) return;\n\n        initRuntime();\n\n        readyPromiseResolve(Module);\n        Module['onRuntimeInitialized']?.();\n\n        postRun();\n      }\n\n      if (Module['setStatus']) {\n        Module['setStatus']('Running...');\n        setTimeout(() => {\n          setTimeout(() => Module['setStatus'](''), 1);\n          doRun();\n        }, 1);\n      } else {\n        doRun();\n      }\n    }\n\n    if (Module['preInit']) {\n      if (typeof Module['preInit'] == 'function')\n        Module['preInit'] = [Module['preInit']];\n      while (Module['preInit'].length > 0) {\n        Module['preInit'].pop()();\n      }\n    }\n\n    run();\n\n    Module.runSQLite3PostLoadInit = function (EmscriptenModule) {\n      'use strict';\n\n      'use strict';\n      globalThis.sqlite3ApiBootstrap = function sqlite3ApiBootstrap(\n        apiConfig = globalThis.sqlite3ApiConfig ||\n          sqlite3ApiBootstrap.defaultConfig,\n      ) {\n        if (sqlite3ApiBootstrap.sqlite3) {\n          (sqlite3ApiBootstrap.sqlite3.config || console).warn(\n            'sqlite3ApiBootstrap() called multiple times.',\n            'Config and external initializers are ignored on calls after the first.',\n          );\n          return sqlite3ApiBootstrap.sqlite3;\n        }\n        const config = Object.assign(\n          Object.create(null),\n          {\n            exports: undefined,\n            memory: undefined,\n            bigIntEnabled: (() => {\n              if ('undefined' !== typeof Module) {\n                if (!!Module.HEAPU64) return true;\n              }\n              return !!globalThis.BigInt64Array;\n            })(),\n            debug: console.debug.bind(console),\n            warn: console.warn.bind(console),\n            error: console.error.bind(console),\n            log: console.log.bind(console),\n            wasmfsOpfsDir: '/opfs',\n\n            useStdAlloc: false,\n          },\n          apiConfig || {},\n        );\n\n        Object.assign(\n          config,\n          {\n            allocExportName: config.useStdAlloc ? 'malloc' : 'sqlite3_malloc',\n            deallocExportName: config.useStdAlloc ? 'free' : 'sqlite3_free',\n            reallocExportName: config.useStdAlloc\n              ? 'realloc'\n              : 'sqlite3_realloc',\n          },\n          config,\n        );\n\n        ['exports', 'memory', 'wasmfsOpfsDir'].forEach((k) => {\n          if ('function' === typeof config[k]) {\n            config[k] = config[k]();\n          }\n        });\n\n        delete globalThis.sqlite3ApiConfig;\n        delete sqlite3ApiBootstrap.defaultConfig;\n\n        const capi = Object.create(null);\n\n        const wasm = Object.create(null);\n\n        const __rcStr = (rc) => {\n          return (\n            (capi.sqlite3_js_rc_str && capi.sqlite3_js_rc_str(rc)) ||\n            'Unknown result code #' + rc\n          );\n        };\n\n        const __isInt = (n) => 'number' === typeof n && n === (n | 0);\n\n        class SQLite3Error extends Error {\n          constructor(...args) {\n            let rc;\n            if (args.length) {\n              if (__isInt(args[0])) {\n                rc = args[0];\n                if (1 === args.length) {\n                  super(__rcStr(args[0]));\n                } else {\n                  const rcStr = __rcStr(rc);\n                  if ('object' === typeof args[1]) {\n                    super(rcStr, args[1]);\n                  } else {\n                    args[0] = rcStr + ':';\n                    super(args.join(' '));\n                  }\n                }\n              } else {\n                if (2 === args.length && 'object' === typeof args[1]) {\n                  super(...args);\n                } else {\n                  super(args.join(' '));\n                }\n              }\n            }\n            this.resultCode = rc || capi.SQLITE_ERROR;\n            this.name = 'SQLite3Error';\n          }\n        }\n\n        SQLite3Error.toss = (...args) => {\n          throw new SQLite3Error(...args);\n        };\n        const toss3 = SQLite3Error.toss;\n\n        if (config.wasmfsOpfsDir && !/^\\/[^/]+$/.test(config.wasmfsOpfsDir)) {\n          toss3(\n            \"config.wasmfsOpfsDir must be falsy or in the form '/dir-name'.\",\n          );\n        }\n\n        const isInt32 = (n) => {\n          return (\n            'bigint' !== typeof n &&\n            !!(n === (n | 0) && n <= 2147483647 && n >= -2147483648)\n          );\n        };\n\n        const bigIntFits64 = function f(b) {\n          if (!f._max) {\n            f._max = BigInt('0x7fffffffffffffff');\n            f._min = ~f._max;\n          }\n          return b >= f._min && b <= f._max;\n        };\n\n        const bigIntFits32 = (b) => b >= -0x7fffffffn - 1n && b <= 0x7fffffffn;\n\n        const bigIntFitsDouble = function f(b) {\n          if (!f._min) {\n            f._min = Number.MIN_SAFE_INTEGER;\n            f._max = Number.MAX_SAFE_INTEGER;\n          }\n          return b >= f._min && b <= f._max;\n        };\n\n        const isTypedArray = (v) => {\n          return v && v.constructor && isInt32(v.constructor.BYTES_PER_ELEMENT)\n            ? v\n            : false;\n        };\n\n        const __SAB =\n          'undefined' === typeof SharedArrayBuffer\n            ? function () {}\n            : SharedArrayBuffer;\n\n        const isSharedTypedArray = (aTypedArray) =>\n          aTypedArray.buffer instanceof __SAB;\n\n        const typedArrayPart = (aTypedArray, begin, end) => {\n          return isSharedTypedArray(aTypedArray)\n            ? aTypedArray.slice(begin, end)\n            : aTypedArray.subarray(begin, end);\n        };\n\n        const isBindableTypedArray = (v) => {\n          return (\n            v &&\n            (v instanceof Uint8Array ||\n              v instanceof Int8Array ||\n              v instanceof ArrayBuffer)\n          );\n        };\n\n        const isSQLableTypedArray = (v) => {\n          return (\n            v &&\n            (v instanceof Uint8Array ||\n              v instanceof Int8Array ||\n              v instanceof ArrayBuffer)\n          );\n        };\n\n        const affirmBindableTypedArray = (v) => {\n          return (\n            isBindableTypedArray(v) ||\n            toss3('Value is not of a supported TypedArray type.')\n          );\n        };\n\n        const utf8Decoder = new TextDecoder('utf-8');\n\n        const typedArrayToString = function (typedArray, begin, end) {\n          return utf8Decoder.decode(typedArrayPart(typedArray, begin, end));\n        };\n\n        const flexibleString = function (v) {\n          if (isSQLableTypedArray(v)) {\n            return typedArrayToString(\n              v instanceof ArrayBuffer ? new Uint8Array(v) : v,\n            );\n          } else if (Array.isArray(v)) return v.join('');\n          else if (wasm.isPtr(v)) v = wasm.cstrToJs(v);\n          return v;\n        };\n\n        class WasmAllocError extends Error {\n          constructor(...args) {\n            if (2 === args.length && 'object' === typeof args[1]) {\n              super(...args);\n            } else if (args.length) {\n              super(args.join(' '));\n            } else {\n              super('Allocation failed.');\n            }\n            this.resultCode = capi.SQLITE_NOMEM;\n            this.name = 'WasmAllocError';\n          }\n        }\n\n        WasmAllocError.toss = (...args) => {\n          throw new WasmAllocError(...args);\n        };\n\n        Object.assign(capi, {\n          sqlite3_bind_blob: undefined,\n\n          sqlite3_bind_text: undefined,\n\n          sqlite3_create_function_v2: (\n            pDb,\n            funcName,\n            nArg,\n            eTextRep,\n            pApp,\n            xFunc,\n            xStep,\n            xFinal,\n            xDestroy,\n          ) => {},\n\n          sqlite3_create_function: (\n            pDb,\n            funcName,\n            nArg,\n            eTextRep,\n            pApp,\n            xFunc,\n            xStep,\n            xFinal,\n          ) => {},\n\n          sqlite3_create_window_function: (\n            pDb,\n            funcName,\n            nArg,\n            eTextRep,\n            pApp,\n            xStep,\n            xFinal,\n            xValue,\n            xInverse,\n            xDestroy,\n          ) => {},\n\n          sqlite3_prepare_v3: (\n            dbPtr,\n            sql,\n            sqlByteLen,\n            prepFlags,\n            stmtPtrPtr,\n            strPtrPtr,\n          ) => {},\n\n          sqlite3_prepare_v2: (\n            dbPtr,\n            sql,\n            sqlByteLen,\n            stmtPtrPtr,\n            strPtrPtr,\n          ) => {},\n\n          sqlite3_exec: (pDb, sql, callback, pVoid, pErrMsg) => {},\n\n          sqlite3_randomness: (n, outPtr) => {},\n        });\n\n        const util = {\n          affirmBindableTypedArray,\n          flexibleString,\n          bigIntFits32,\n          bigIntFits64,\n          bigIntFitsDouble,\n          isBindableTypedArray,\n          isInt32,\n          isSQLableTypedArray,\n          isTypedArray,\n          typedArrayToString,\n          isUIThread: () =>\n            globalThis.window === globalThis && !!globalThis.document,\n\n          isSharedTypedArray,\n          toss: function (...args) {\n            throw new Error(args.join(' '));\n          },\n          toss3,\n          typedArrayPart,\n\n          affirmDbHeader: function (bytes) {\n            if (bytes instanceof ArrayBuffer) bytes = new Uint8Array(bytes);\n            const header = 'SQLite format 3';\n            if (header.length > bytes.byteLength) {\n              toss3('Input does not contain an SQLite3 database header.');\n            }\n            for (let i = 0; i < header.length; ++i) {\n              if (header.charCodeAt(i) !== bytes[i]) {\n                toss3('Input does not contain an SQLite3 database header.');\n              }\n            }\n          },\n\n          affirmIsDb: function (bytes) {\n            if (bytes instanceof ArrayBuffer) bytes = new Uint8Array(bytes);\n            const n = bytes.byteLength;\n            if (n < 512 || n % 512 !== 0) {\n              toss3('Byte array size', n, 'is invalid for an SQLite3 db.');\n            }\n            util.affirmDbHeader(bytes);\n          },\n        };\n\n        Object.assign(wasm, {\n          ptrSizeof: config.wasmPtrSizeof || 4,\n\n          ptrIR: config.wasmPtrIR || 'i32',\n\n          bigIntEnabled: !!config.bigIntEnabled,\n\n          exports:\n            config.exports ||\n            toss3('Missing API config.exports (WASM module exports).'),\n\n          memory:\n            config.memory ||\n            config.exports['memory'] ||\n            toss3(\n              'API config object requires a WebAssembly.Memory object',\n              'in either config.exports.memory (exported)',\n              'or config.memory (imported).',\n            ),\n\n          alloc: undefined,\n\n          realloc: undefined,\n\n          dealloc: undefined,\n        });\n\n        wasm.allocFromTypedArray = function (srcTypedArray) {\n          if (srcTypedArray instanceof ArrayBuffer) {\n            srcTypedArray = new Uint8Array(srcTypedArray);\n          }\n          affirmBindableTypedArray(srcTypedArray);\n          const pRet = wasm.alloc(srcTypedArray.byteLength || 1);\n          wasm\n            .heapForSize(srcTypedArray.constructor)\n            .set(srcTypedArray.byteLength ? srcTypedArray : [0], pRet);\n          return pRet;\n        };\n\n        {\n          const keyAlloc = config.allocExportName,\n            keyDealloc = config.deallocExportName,\n            keyRealloc = config.reallocExportName;\n          for (const key of [keyAlloc, keyDealloc, keyRealloc]) {\n            const f = wasm.exports[key];\n            if (!(f instanceof Function))\n              toss3('Missing required exports[', key, '] function.');\n          }\n\n          wasm.alloc = function f(n) {\n            return (\n              f.impl(n) ||\n              WasmAllocError.toss('Failed to allocate', n, ' bytes.')\n            );\n          };\n          wasm.alloc.impl = wasm.exports[keyAlloc];\n          wasm.realloc = function f(m, n) {\n            const m2 = f.impl(m, n);\n            return n\n              ? m2 || WasmAllocError.toss('Failed to reallocate', n, ' bytes.')\n              : 0;\n          };\n          wasm.realloc.impl = wasm.exports[keyRealloc];\n          wasm.dealloc = wasm.exports[keyDealloc];\n        }\n\n        wasm.compileOptionUsed = function f(optName) {\n          if (!arguments.length) {\n            if (f._result) return f._result;\n            else if (!f._opt) {\n              f._rx = /^([^=]+)=(.+)/;\n              f._rxInt = /^-?\\d+$/;\n              f._opt = function (opt, rv) {\n                const m = f._rx.exec(opt);\n                rv[0] = m ? m[1] : opt;\n                rv[1] = m ? (f._rxInt.test(m[2]) ? +m[2] : m[2]) : true;\n              };\n            }\n            const rc = {},\n              ov = [0, 0];\n            let i = 0,\n              k;\n            while ((k = capi.sqlite3_compileoption_get(i++))) {\n              f._opt(k, ov);\n              rc[ov[0]] = ov[1];\n            }\n            return (f._result = rc);\n          } else if (Array.isArray(optName)) {\n            const rc = {};\n            optName.forEach((v) => {\n              rc[v] = capi.sqlite3_compileoption_used(v);\n            });\n            return rc;\n          } else if ('object' === typeof optName) {\n            Object.keys(optName).forEach((k) => {\n              optName[k] = capi.sqlite3_compileoption_used(k);\n            });\n            return optName;\n          }\n          return 'string' === typeof optName\n            ? !!capi.sqlite3_compileoption_used(optName)\n            : false;\n        };\n\n        wasm.pstack = Object.assign(Object.create(null), {\n          restore: wasm.exports.sqlite3__wasm_pstack_restore,\n\n          alloc: function (n) {\n            if ('string' === typeof n && !(n = wasm.sizeofIR(n))) {\n              WasmAllocError.toss(\n                'Invalid value for pstack.alloc(',\n                arguments[0],\n                ')',\n              );\n            }\n            return (\n              wasm.exports.sqlite3__wasm_pstack_alloc(n) ||\n              WasmAllocError.toss(\n                'Could not allocate',\n                n,\n                'bytes from the pstack.',\n              )\n            );\n          },\n\n          allocChunks: function (n, sz) {\n            if ('string' === typeof sz && !(sz = wasm.sizeofIR(sz))) {\n              WasmAllocError.toss(\n                'Invalid size value for allocChunks(',\n                arguments[1],\n                ')',\n              );\n            }\n            const mem = wasm.pstack.alloc(n * sz);\n            const rc = [];\n            let i = 0,\n              offset = 0;\n            for (; i < n; ++i, offset += sz) rc.push(mem + offset);\n            return rc;\n          },\n\n          allocPtr: (n = 1, safePtrSize = true) => {\n            return 1 === n\n              ? wasm.pstack.alloc(safePtrSize ? 8 : wasm.ptrSizeof)\n              : wasm.pstack.allocChunks(n, safePtrSize ? 8 : wasm.ptrSizeof);\n          },\n\n          call: function (f) {\n            const stackPos = wasm.pstack.pointer;\n            try {\n              return f(sqlite3);\n            } finally {\n              wasm.pstack.restore(stackPos);\n            }\n          },\n        });\n        Object.defineProperties(wasm.pstack, {\n          pointer: {\n            configurable: false,\n            iterable: true,\n            writeable: false,\n            get: wasm.exports.sqlite3__wasm_pstack_ptr,\n          },\n\n          quota: {\n            configurable: false,\n            iterable: true,\n            writeable: false,\n            get: wasm.exports.sqlite3__wasm_pstack_quota,\n          },\n\n          remaining: {\n            configurable: false,\n            iterable: true,\n            writeable: false,\n            get: wasm.exports.sqlite3__wasm_pstack_remaining,\n          },\n        });\n\n        capi.sqlite3_randomness = (...args) => {\n          if (\n            1 === args.length &&\n            util.isTypedArray(args[0]) &&\n            1 === args[0].BYTES_PER_ELEMENT\n          ) {\n            const ta = args[0];\n            if (0 === ta.byteLength) {\n              wasm.exports.sqlite3_randomness(0, 0);\n              return ta;\n            }\n            const stack = wasm.pstack.pointer;\n            try {\n              let n = ta.byteLength,\n                offset = 0;\n              const r = wasm.exports.sqlite3_randomness;\n              const heap = wasm.heap8u();\n              const nAlloc = n < 512 ? n : 512;\n              const ptr = wasm.pstack.alloc(nAlloc);\n              do {\n                const j = n > nAlloc ? nAlloc : n;\n                r(j, ptr);\n                ta.set(typedArrayPart(heap, ptr, ptr + j), offset);\n                n -= j;\n                offset += j;\n              } while (n > 0);\n            } catch (e) {\n              console.error(\n                'Highly unexpected (and ignored!) ' +\n                  'exception in sqlite3_randomness():',\n                e,\n              );\n            } finally {\n              wasm.pstack.restore(stack);\n            }\n            return ta;\n          }\n          wasm.exports.sqlite3_randomness(...args);\n        };\n\n        let __wasmfsOpfsDir = undefined;\n\n        capi.sqlite3_wasmfs_opfs_dir = function () {\n          if (undefined !== __wasmfsOpfsDir) return __wasmfsOpfsDir;\n\n          const pdir = config.wasmfsOpfsDir;\n          if (\n            !pdir ||\n            !globalThis.FileSystemHandle ||\n            !globalThis.FileSystemDirectoryHandle ||\n            !globalThis.FileSystemFileHandle\n          ) {\n            return (__wasmfsOpfsDir = '');\n          }\n          try {\n            if (\n              pdir &&\n              0 ===\n                wasm.xCallWrapped(\n                  'sqlite3__wasm_init_wasmfs',\n                  'i32',\n                  ['string'],\n                  pdir,\n                )\n            ) {\n              return (__wasmfsOpfsDir = pdir);\n            } else {\n              return (__wasmfsOpfsDir = '');\n            }\n          } catch (e) {\n            return (__wasmfsOpfsDir = '');\n          }\n        };\n\n        capi.sqlite3_wasmfs_filename_is_persistent = function (name) {\n          const p = capi.sqlite3_wasmfs_opfs_dir();\n          return p && name ? name.startsWith(p + '/') : false;\n        };\n\n        capi.sqlite3_js_db_uses_vfs = function (pDb, vfsName, dbName = 0) {\n          try {\n            const pK = capi.sqlite3_vfs_find(vfsName);\n            if (!pK) return false;\n            else if (!pDb) {\n              return pK === capi.sqlite3_vfs_find(0) ? pK : false;\n            } else {\n              return pK === capi.sqlite3_js_db_vfs(pDb, dbName) ? pK : false;\n            }\n          } catch (e) {\n            return false;\n          }\n        };\n\n        capi.sqlite3_js_vfs_list = function () {\n          const rc = [];\n          let pVfs = capi.sqlite3_vfs_find(0);\n          while (pVfs) {\n            const oVfs = new capi.sqlite3_vfs(pVfs);\n            rc.push(wasm.cstrToJs(oVfs.$zName));\n            pVfs = oVfs.$pNext;\n            oVfs.dispose();\n          }\n          return rc;\n        };\n\n        capi.sqlite3_js_db_export = function (pDb, schema = 0) {\n          pDb = wasm.xWrap.testConvertArg('sqlite3*', pDb);\n          if (!pDb) toss3('Invalid sqlite3* argument.');\n          if (!wasm.bigIntEnabled) toss3('BigInt64 support is not enabled.');\n          const scope = wasm.scopedAllocPush();\n          let pOut;\n          try {\n            const pSize = wasm.scopedAlloc(8 + wasm.ptrSizeof);\n            const ppOut = pSize + 8;\n\n            const zSchema = schema\n              ? wasm.isPtr(schema)\n                ? schema\n                : wasm.scopedAllocCString('' + schema)\n              : 0;\n            let rc = wasm.exports.sqlite3__wasm_db_serialize(\n              pDb,\n              zSchema,\n              ppOut,\n              pSize,\n              0,\n            );\n            if (rc) {\n              toss3(\n                'Database serialization failed with code',\n                sqlite3.capi.sqlite3_js_rc_str(rc),\n              );\n            }\n            pOut = wasm.peekPtr(ppOut);\n            const nOut = wasm.peek(pSize, 'i64');\n            rc = nOut\n              ? wasm.heap8u().slice(pOut, pOut + Number(nOut))\n              : new Uint8Array();\n            return rc;\n          } finally {\n            if (pOut) wasm.exports.sqlite3_free(pOut);\n            wasm.scopedAllocPop(scope);\n          }\n        };\n\n        capi.sqlite3_js_db_vfs = (dbPointer, dbName = 0) =>\n          util.sqlite3__wasm_db_vfs(dbPointer, dbName);\n\n        capi.sqlite3_js_aggregate_context = (pCtx, n) => {\n          return (\n            capi.sqlite3_aggregate_context(pCtx, n) ||\n            (n\n              ? WasmAllocError.toss(\n                  'Cannot allocate',\n                  n,\n                  'bytes for sqlite3_aggregate_context()',\n                )\n              : 0)\n          );\n        };\n\n        capi.sqlite3_js_posix_create_file = function (filename, data, dataLen) {\n          let pData;\n          if (data && wasm.isPtr(data)) {\n            pData = data;\n          } else if (\n            data instanceof ArrayBuffer ||\n            data instanceof Uint8Array\n          ) {\n            pData = wasm.allocFromTypedArray(data);\n            if (arguments.length < 3 || !util.isInt32(dataLen) || dataLen < 0) {\n              dataLen = data.byteLength;\n            }\n          } else {\n            SQLite3Error.toss(\n              'Invalid 2nd argument for sqlite3_js_posix_create_file().',\n            );\n          }\n          try {\n            if (!util.isInt32(dataLen) || dataLen < 0) {\n              SQLite3Error.toss(\n                'Invalid 3rd argument for sqlite3_js_posix_create_file().',\n              );\n            }\n            const rc = util.sqlite3__wasm_posix_create_file(\n              filename,\n              pData,\n              dataLen,\n            );\n            if (rc)\n              SQLite3Error.toss(\n                'Creation of file failed with sqlite3 result code',\n                capi.sqlite3_js_rc_str(rc),\n              );\n          } finally {\n            wasm.dealloc(pData);\n          }\n        };\n\n        capi.sqlite3_js_vfs_create_file = function (\n          vfs,\n          filename,\n          data,\n          dataLen,\n        ) {\n          config.warn(\n            'sqlite3_js_vfs_create_file() is deprecated and',\n            'should be avoided because it can lead to C-level crashes.',\n            'See its documentation for alternative options.',\n          );\n          let pData;\n          if (data) {\n            if (wasm.isPtr(data)) {\n              pData = data;\n            } else if (data instanceof ArrayBuffer) {\n              data = new Uint8Array(data);\n            }\n            if (data instanceof Uint8Array) {\n              pData = wasm.allocFromTypedArray(data);\n              if (\n                arguments.length < 4 ||\n                !util.isInt32(dataLen) ||\n                dataLen < 0\n              ) {\n                dataLen = data.byteLength;\n              }\n            } else {\n              SQLite3Error.toss(\n                'Invalid 3rd argument type for sqlite3_js_vfs_create_file().',\n              );\n            }\n          } else {\n            pData = 0;\n          }\n          if (!util.isInt32(dataLen) || dataLen < 0) {\n            wasm.dealloc(pData);\n            SQLite3Error.toss(\n              'Invalid 4th argument for sqlite3_js_vfs_create_file().',\n            );\n          }\n          try {\n            const rc = util.sqlite3__wasm_vfs_create_file(\n              vfs,\n              filename,\n              pData,\n              dataLen,\n            );\n            if (rc)\n              SQLite3Error.toss(\n                'Creation of file failed with sqlite3 result code',\n                capi.sqlite3_js_rc_str(rc),\n              );\n          } finally {\n            wasm.dealloc(pData);\n          }\n        };\n\n        capi.sqlite3_js_sql_to_string = (sql) => {\n          if ('string' === typeof sql) {\n            return sql;\n          }\n          const x = flexibleString(v);\n          return x === v ? undefined : x;\n        };\n\n        if (util.isUIThread()) {\n          const __kvvfsInfo = function (which) {\n            const rc = Object.create(null);\n            rc.prefix = 'kvvfs-' + which;\n            rc.stores = [];\n            if ('session' === which || '' === which)\n              rc.stores.push(globalThis.sessionStorage);\n            if ('local' === which || '' === which)\n              rc.stores.push(globalThis.localStorage);\n            return rc;\n          };\n\n          capi.sqlite3_js_kvvfs_clear = function (which = '') {\n            let rc = 0;\n            const kvinfo = __kvvfsInfo(which);\n            kvinfo.stores.forEach((s) => {\n              const toRm = [];\n              let i;\n              for (i = 0; i < s.length; ++i) {\n                const k = s.key(i);\n                if (k.startsWith(kvinfo.prefix)) toRm.push(k);\n              }\n              toRm.forEach((kk) => s.removeItem(kk));\n              rc += toRm.length;\n            });\n            return rc;\n          };\n\n          capi.sqlite3_js_kvvfs_size = function (which = '') {\n            let sz = 0;\n            const kvinfo = __kvvfsInfo(which);\n            kvinfo.stores.forEach((s) => {\n              let i;\n              for (i = 0; i < s.length; ++i) {\n                const k = s.key(i);\n                if (k.startsWith(kvinfo.prefix)) {\n                  sz += k.length;\n                  sz += s.getItem(k).length;\n                }\n              }\n            });\n            return sz * 2;\n          };\n        }\n\n        capi.sqlite3_db_config = function (pDb, op, ...args) {\n          switch (op) {\n            case capi.SQLITE_DBCONFIG_ENABLE_FKEY:\n            case capi.SQLITE_DBCONFIG_ENABLE_TRIGGER:\n            case capi.SQLITE_DBCONFIG_ENABLE_FTS3_TOKENIZER:\n            case capi.SQLITE_DBCONFIG_ENABLE_LOAD_EXTENSION:\n            case capi.SQLITE_DBCONFIG_NO_CKPT_ON_CLOSE:\n            case capi.SQLITE_DBCONFIG_ENABLE_QPSG:\n            case capi.SQLITE_DBCONFIG_TRIGGER_EQP:\n            case capi.SQLITE_DBCONFIG_RESET_DATABASE:\n            case capi.SQLITE_DBCONFIG_DEFENSIVE:\n            case capi.SQLITE_DBCONFIG_WRITABLE_SCHEMA:\n            case capi.SQLITE_DBCONFIG_LEGACY_ALTER_TABLE:\n            case capi.SQLITE_DBCONFIG_DQS_DML:\n            case capi.SQLITE_DBCONFIG_DQS_DDL:\n            case capi.SQLITE_DBCONFIG_ENABLE_VIEW:\n            case capi.SQLITE_DBCONFIG_LEGACY_FILE_FORMAT:\n            case capi.SQLITE_DBCONFIG_TRUSTED_SCHEMA:\n            case capi.SQLITE_DBCONFIG_STMT_SCANSTATUS:\n            case capi.SQLITE_DBCONFIG_REVERSE_SCANORDER:\n            case capi.SQLITE_DBCONFIG_ENABLE_ATTACH_CREATE:\n            case capi.SQLITE_DBCONFIG_ENABLE_ATTACH_WRITE:\n            case capi.SQLITE_DBCONFIG_ENABLE_COMMENTS:\n              if (!this.ip) {\n                this.ip = wasm.xWrap('sqlite3__wasm_db_config_ip', 'int', [\n                  'sqlite3*',\n                  'int',\n                  'int',\n                  '*',\n                ]);\n              }\n              return this.ip(pDb, op, args[0], args[1] || 0);\n            case capi.SQLITE_DBCONFIG_LOOKASIDE:\n              if (!this.pii) {\n                this.pii = wasm.xWrap('sqlite3__wasm_db_config_pii', 'int', [\n                  'sqlite3*',\n                  'int',\n                  '*',\n                  'int',\n                  'int',\n                ]);\n              }\n              return this.pii(pDb, op, args[0], args[1], args[2]);\n            case capi.SQLITE_DBCONFIG_MAINDBNAME:\n              if (!this.s) {\n                this.s = wasm.xWrap('sqlite3__wasm_db_config_s', 'int', [\n                  'sqlite3*',\n                  'int',\n                  'string:static',\n                ]);\n              }\n              return this.s(pDb, op, args[0]);\n            default:\n              return capi.SQLITE_MISUSE;\n          }\n        }.bind(Object.create(null));\n\n        capi.sqlite3_value_to_js = function (\n          pVal,\n          throwIfCannotConvert = true,\n        ) {\n          let arg;\n          const valType = capi.sqlite3_value_type(pVal);\n          switch (valType) {\n            case capi.SQLITE_INTEGER:\n              if (wasm.bigIntEnabled) {\n                arg = capi.sqlite3_value_int64(pVal);\n                if (util.bigIntFitsDouble(arg)) arg = Number(arg);\n              } else arg = capi.sqlite3_value_double(pVal);\n              break;\n            case capi.SQLITE_FLOAT:\n              arg = capi.sqlite3_value_double(pVal);\n              break;\n            case capi.SQLITE_TEXT:\n              arg = capi.sqlite3_value_text(pVal);\n              break;\n            case capi.SQLITE_BLOB: {\n              const n = capi.sqlite3_value_bytes(pVal);\n              const pBlob = capi.sqlite3_value_blob(pVal);\n              if (n && !pBlob)\n                sqlite3.WasmAllocError.toss(\n                  'Cannot allocate memory for blob argument of',\n                  n,\n                  'byte(s)',\n                );\n              arg = n ? wasm.heap8u().slice(pBlob, pBlob + Number(n)) : null;\n              break;\n            }\n            case capi.SQLITE_NULL:\n              arg = null;\n              break;\n            default:\n              if (throwIfCannotConvert) {\n                toss3(\n                  capi.SQLITE_MISMATCH,\n                  'Unhandled sqlite3_value_type():',\n                  valType,\n                );\n              }\n              arg = undefined;\n          }\n          return arg;\n        };\n\n        capi.sqlite3_values_to_js = function (\n          argc,\n          pArgv,\n          throwIfCannotConvert = true,\n        ) {\n          let i;\n          const tgt = [];\n          for (i = 0; i < argc; ++i) {\n            tgt.push(\n              capi.sqlite3_value_to_js(\n                wasm.peekPtr(pArgv + wasm.ptrSizeof * i),\n                throwIfCannotConvert,\n              ),\n            );\n          }\n          return tgt;\n        };\n\n        capi.sqlite3_result_error_js = function (pCtx, e) {\n          if (e instanceof WasmAllocError) {\n            capi.sqlite3_result_error_nomem(pCtx);\n          } else {\n            capi.sqlite3_result_error(pCtx, '' + e, -1);\n          }\n        };\n\n        capi.sqlite3_result_js = function (pCtx, val) {\n          if (val instanceof Error) {\n            capi.sqlite3_result_error_js(pCtx, val);\n            return;\n          }\n          try {\n            switch (typeof val) {\n              case 'undefined':\n                break;\n              case 'boolean':\n                capi.sqlite3_result_int(pCtx, val ? 1 : 0);\n                break;\n              case 'bigint':\n                if (util.bigIntFits32(val)) {\n                  capi.sqlite3_result_int(pCtx, Number(val));\n                } else if (util.bigIntFitsDouble(val)) {\n                  capi.sqlite3_result_double(pCtx, Number(val));\n                } else if (wasm.bigIntEnabled) {\n                  if (util.bigIntFits64(val))\n                    capi.sqlite3_result_int64(pCtx, val);\n                  else\n                    toss3(\n                      'BigInt value',\n                      val.toString(),\n                      'is too BigInt for int64.',\n                    );\n                } else {\n                  toss3('BigInt value', val.toString(), 'is too BigInt.');\n                }\n                break;\n              case 'number': {\n                let f;\n                if (util.isInt32(val)) {\n                  f = capi.sqlite3_result_int;\n                } else if (\n                  wasm.bigIntEnabled &&\n                  Number.isInteger(val) &&\n                  util.bigIntFits64(BigInt(val))\n                ) {\n                  f = capi.sqlite3_result_int64;\n                } else {\n                  f = capi.sqlite3_result_double;\n                }\n                f(pCtx, val);\n                break;\n              }\n              case 'string': {\n                const [p, n] = wasm.allocCString(val, true);\n                capi.sqlite3_result_text(pCtx, p, n, capi.SQLITE_WASM_DEALLOC);\n                break;\n              }\n              case 'object':\n                if (null === val) {\n                  capi.sqlite3_result_null(pCtx);\n                  break;\n                } else if (util.isBindableTypedArray(val)) {\n                  const pBlob = wasm.allocFromTypedArray(val);\n                  capi.sqlite3_result_blob(\n                    pCtx,\n                    pBlob,\n                    val.byteLength,\n                    capi.SQLITE_WASM_DEALLOC,\n                  );\n                  break;\n                }\n\n              default:\n                toss3(\n                  \"Don't not how to handle this UDF result value:\",\n                  typeof val,\n                  val,\n                );\n            }\n          } catch (e) {\n            capi.sqlite3_result_error_js(pCtx, e);\n          }\n        };\n\n        capi.sqlite3_column_js = function (\n          pStmt,\n          iCol,\n          throwIfCannotConvert = true,\n        ) {\n          const v = capi.sqlite3_column_value(pStmt, iCol);\n          return 0 === v\n            ? undefined\n            : capi.sqlite3_value_to_js(v, throwIfCannotConvert);\n        };\n\n        const __newOldValue = function (pObj, iCol, impl) {\n          impl = capi[impl];\n          if (!this.ptr) this.ptr = wasm.allocPtr();\n          else wasm.pokePtr(this.ptr, 0);\n          const rc = impl(pObj, iCol, this.ptr);\n          if (rc)\n            return SQLite3Error.toss(\n              rc,\n              arguments[2] + '() failed with code ' + rc,\n            );\n          const pv = wasm.peekPtr(this.ptr);\n          return pv ? capi.sqlite3_value_to_js(pv, true) : undefined;\n        }.bind(Object.create(null));\n\n        capi.sqlite3_preupdate_new_js = (pDb, iCol) =>\n          __newOldValue(pDb, iCol, 'sqlite3_preupdate_new');\n\n        capi.sqlite3_preupdate_old_js = (pDb, iCol) =>\n          __newOldValue(pDb, iCol, 'sqlite3_preupdate_old');\n\n        capi.sqlite3changeset_new_js = (pChangesetIter, iCol) =>\n          __newOldValue(pChangesetIter, iCol, 'sqlite3changeset_new');\n\n        capi.sqlite3changeset_old_js = (pChangesetIter, iCol) =>\n          __newOldValue(pChangesetIter, iCol, 'sqlite3changeset_old');\n\n        const sqlite3 = {\n          WasmAllocError: WasmAllocError,\n          SQLite3Error: SQLite3Error,\n          capi,\n          util,\n          wasm,\n          config,\n\n          version: Object.create(null),\n\n          client: undefined,\n\n          asyncPostInit: async function ff() {\n            if (ff.isReady instanceof Promise) return ff.isReady;\n            let lia = sqlite3ApiBootstrap.initializersAsync;\n            delete sqlite3ApiBootstrap.initializersAsync;\n            const postInit = async () => {\n              if (!sqlite3.__isUnderTest) {\n                delete sqlite3.util;\n\n                delete sqlite3.StructBinder;\n              }\n              return sqlite3;\n            };\n            const catcher = (e) => {\n              config.error('an async sqlite3 initializer failed:', e);\n              throw e;\n            };\n            if (!lia || !lia.length) {\n              return (ff.isReady = postInit().catch(catcher));\n            }\n            lia = lia.map((f) => {\n              return f instanceof Function ? async (x) => f(sqlite3) : f;\n            });\n            lia.push(postInit);\n            let p = Promise.resolve(sqlite3);\n            while (lia.length) p = p.then(lia.shift());\n            return (ff.isReady = p.catch(catcher));\n          },\n\n          scriptInfo: undefined,\n        };\n        try {\n          sqlite3ApiBootstrap.initializers.forEach((f) => {\n            f(sqlite3);\n          });\n        } catch (e) {\n          console.error('sqlite3 bootstrap initializer threw:', e);\n          throw e;\n        }\n        delete sqlite3ApiBootstrap.initializers;\n        sqlite3ApiBootstrap.sqlite3 = sqlite3;\n        return sqlite3;\n      };\n\n      globalThis.sqlite3ApiBootstrap.initializers = [];\n\n      globalThis.sqlite3ApiBootstrap.initializersAsync = [];\n\n      globalThis.sqlite3ApiBootstrap.defaultConfig = Object.create(null);\n\n      globalThis.sqlite3ApiBootstrap.sqlite3 = undefined;\n\n      globalThis.WhWasmUtilInstaller = function (target) {\n        'use strict';\n        if (undefined === target.bigIntEnabled) {\n          target.bigIntEnabled = !!globalThis['BigInt64Array'];\n        }\n\n        const toss = (...args) => {\n          throw new Error(args.join(' '));\n        };\n\n        if (!target.exports) {\n          Object.defineProperty(target, 'exports', {\n            enumerable: true,\n            configurable: true,\n            get: () => target.instance && target.instance.exports,\n          });\n        }\n\n        const ptrIR = target.pointerIR || 'i32';\n        const ptrSizeof = (target.ptrSizeof =\n          'i32' === ptrIR\n            ? 4\n            : 'i64' === ptrIR\n              ? 8\n              : toss('Unhandled ptrSizeof:', ptrIR));\n\n        const cache = Object.create(null);\n\n        cache.heapSize = 0;\n\n        cache.memory = null;\n\n        cache.freeFuncIndexes = [];\n\n        cache.scopedAlloc = [];\n\n        cache.utf8Decoder = new TextDecoder();\n        cache.utf8Encoder = new TextEncoder('utf-8');\n\n        target.sizeofIR = (n) => {\n          switch (n) {\n            case 'i8':\n              return 1;\n            case 'i16':\n              return 2;\n            case 'i32':\n            case 'f32':\n            case 'float':\n              return 4;\n            case 'i64':\n            case 'f64':\n            case 'double':\n              return 8;\n            case '*':\n              return ptrSizeof;\n            default:\n              return ('' + n).endsWith('*') ? ptrSizeof : undefined;\n          }\n        };\n\n        const heapWrappers = function () {\n          if (!cache.memory) {\n            cache.memory =\n              target.memory instanceof WebAssembly.Memory\n                ? target.memory\n                : target.exports.memory;\n          } else if (cache.heapSize === cache.memory.buffer.byteLength) {\n            return cache;\n          }\n\n          const b = cache.memory.buffer;\n          cache.HEAP8 = new Int8Array(b);\n          cache.HEAP8U = new Uint8Array(b);\n          cache.HEAP16 = new Int16Array(b);\n          cache.HEAP16U = new Uint16Array(b);\n          cache.HEAP32 = new Int32Array(b);\n          cache.HEAP32U = new Uint32Array(b);\n          if (target.bigIntEnabled) {\n            cache.HEAP64 = new BigInt64Array(b);\n            cache.HEAP64U = new BigUint64Array(b);\n          }\n          cache.HEAP32F = new Float32Array(b);\n          cache.HEAP64F = new Float64Array(b);\n          cache.heapSize = b.byteLength;\n          return cache;\n        };\n\n        target.heap8 = () => heapWrappers().HEAP8;\n\n        target.heap8u = () => heapWrappers().HEAP8U;\n\n        target.heap16 = () => heapWrappers().HEAP16;\n\n        target.heap16u = () => heapWrappers().HEAP16U;\n\n        target.heap32 = () => heapWrappers().HEAP32;\n\n        target.heap32u = () => heapWrappers().HEAP32U;\n\n        target.heapForSize = function (n, unsigned = true) {\n          let ctor;\n          const c =\n            cache.memory && cache.heapSize === cache.memory.buffer.byteLength\n              ? cache\n              : heapWrappers();\n          switch (n) {\n            case Int8Array:\n              return c.HEAP8;\n            case Uint8Array:\n              return c.HEAP8U;\n            case Int16Array:\n              return c.HEAP16;\n            case Uint16Array:\n              return c.HEAP16U;\n            case Int32Array:\n              return c.HEAP32;\n            case Uint32Array:\n              return c.HEAP32U;\n            case 8:\n              return unsigned ? c.HEAP8U : c.HEAP8;\n            case 16:\n              return unsigned ? c.HEAP16U : c.HEAP16;\n            case 32:\n              return unsigned ? c.HEAP32U : c.HEAP32;\n            case 64:\n              if (c.HEAP64) return unsigned ? c.HEAP64U : c.HEAP64;\n              break;\n            default:\n              if (target.bigIntEnabled) {\n                if (n === globalThis['BigUint64Array']) return c.HEAP64U;\n                else if (n === globalThis['BigInt64Array']) return c.HEAP64;\n                break;\n              }\n          }\n          toss(\n            'Invalid heapForSize() size: expecting 8, 16, 32,',\n            'or (if BigInt is enabled) 64.',\n          );\n        };\n\n        target.functionTable = function () {\n          return target.exports.__indirect_function_table;\n        };\n\n        target.functionEntry = function (fptr) {\n          const ft = target.functionTable();\n          return fptr < ft.length ? ft.get(fptr) : undefined;\n        };\n\n        target.jsFuncToWasm = function f(func, sig) {\n          if (!f._) {\n            f._ = {\n              sigTypes: Object.assign(Object.create(null), {\n                i: 'i32',\n                p: 'i32',\n                P: 'i32',\n                s: 'i32',\n                j: 'i64',\n                f: 'f32',\n                d: 'f64',\n              }),\n\n              typeCodes: Object.assign(Object.create(null), {\n                f64: 0x7c,\n                f32: 0x7d,\n                i64: 0x7e,\n                i32: 0x7f,\n              }),\n\n              uleb128Encode: function (tgt, method, n) {\n                if (n < 128) tgt[method](n);\n                else tgt[method](n % 128 | 128, n >> 7);\n              },\n\n              rxJSig: /^(\\w)\\((\\w*)\\)$/,\n\n              sigParams: function (sig) {\n                const m = f._.rxJSig.exec(sig);\n                return m ? m[2] : sig.substr(1);\n              },\n\n              letterType: (x) =>\n                f._.sigTypes[x] || toss('Invalid signature letter:', x),\n\n              pushSigType: (dest, letter) =>\n                dest.push(f._.typeCodes[f._.letterType(letter)]),\n            };\n          }\n          if ('string' === typeof func) {\n            const x = sig;\n            sig = func;\n            func = x;\n          }\n          const sigParams = f._.sigParams(sig);\n          const wasmCode = [0x01, 0x60];\n          f._.uleb128Encode(wasmCode, 'push', sigParams.length);\n          for (const x of sigParams) f._.pushSigType(wasmCode, x);\n          if ('v' === sig[0]) wasmCode.push(0);\n          else {\n            wasmCode.push(1);\n            f._.pushSigType(wasmCode, sig[0]);\n          }\n          f._.uleb128Encode(wasmCode, 'unshift', wasmCode.length);\n          wasmCode.unshift(\n            0x00,\n            0x61,\n            0x73,\n            0x6d,\n            0x01,\n            0x00,\n            0x00,\n            0x00,\n            0x01,\n          );\n          wasmCode.push(\n            0x02,\n            0x07,\n\n            0x01,\n            0x01,\n            0x65,\n            0x01,\n            0x66,\n            0x00,\n            0x00,\n            0x07,\n            0x05,\n\n            0x01,\n            0x01,\n            0x66,\n            0x00,\n            0x00,\n          );\n          return new WebAssembly.Instance(\n            new WebAssembly.Module(new Uint8Array(wasmCode)),\n            {\n              e: { f: func },\n            },\n          ).exports['f'];\n        };\n\n        const __installFunction = function f(func, sig, scoped) {\n          if (scoped && !cache.scopedAlloc.length) {\n            toss('No scopedAllocPush() scope is active.');\n          }\n          if ('string' === typeof func) {\n            const x = sig;\n            sig = func;\n            func = x;\n          }\n          if ('string' !== typeof sig || !(func instanceof Function)) {\n            toss(\n              'Invalid arguments: expecting (function,signature) ' +\n                'or (signature,function).',\n            );\n          }\n          const ft = target.functionTable();\n          const oldLen = ft.length;\n          let ptr;\n          while (cache.freeFuncIndexes.length) {\n            ptr = cache.freeFuncIndexes.pop();\n            if (ft.get(ptr)) {\n              ptr = null;\n              continue;\n            } else {\n              break;\n            }\n          }\n          if (!ptr) {\n            ptr = oldLen;\n            ft.grow(1);\n          }\n          try {\n            ft.set(ptr, func);\n            if (scoped) {\n              cache.scopedAlloc[cache.scopedAlloc.length - 1].push(ptr);\n            }\n            return ptr;\n          } catch (e) {\n            if (!(e instanceof TypeError)) {\n              if (ptr === oldLen) cache.freeFuncIndexes.push(oldLen);\n              throw e;\n            }\n          }\n\n          try {\n            const fptr = target.jsFuncToWasm(func, sig);\n            ft.set(ptr, fptr);\n            if (scoped) {\n              cache.scopedAlloc[cache.scopedAlloc.length - 1].push(ptr);\n            }\n          } catch (e) {\n            if (ptr === oldLen) cache.freeFuncIndexes.push(oldLen);\n            throw e;\n          }\n          return ptr;\n        };\n\n        target.installFunction = (func, sig) =>\n          __installFunction(func, sig, false);\n\n        target.scopedInstallFunction = (func, sig) =>\n          __installFunction(func, sig, true);\n\n        target.uninstallFunction = function (ptr) {\n          if (!ptr && 0 !== ptr) return undefined;\n          const fi = cache.freeFuncIndexes;\n          const ft = target.functionTable();\n          fi.push(ptr);\n          const rc = ft.get(ptr);\n          ft.set(ptr, null);\n          return rc;\n        };\n\n        target.peek = function f(ptr, type = 'i8') {\n          if (type.endsWith('*')) type = ptrIR;\n          const c =\n            cache.memory && cache.heapSize === cache.memory.buffer.byteLength\n              ? cache\n              : heapWrappers();\n          const list = Array.isArray(ptr) ? [] : undefined;\n          let rc;\n          do {\n            if (list) ptr = arguments[0].shift();\n            switch (type) {\n              case 'i1':\n              case 'i8':\n                rc = c.HEAP8[ptr >> 0];\n                break;\n              case 'i16':\n                rc = c.HEAP16[ptr >> 1];\n                break;\n              case 'i32':\n                rc = c.HEAP32[ptr >> 2];\n                break;\n              case 'float':\n              case 'f32':\n                rc = c.HEAP32F[ptr >> 2];\n                break;\n              case 'double':\n              case 'f64':\n                rc = Number(c.HEAP64F[ptr >> 3]);\n                break;\n              case 'i64':\n                if (target.bigIntEnabled) {\n                  rc = BigInt(c.HEAP64[ptr >> 3]);\n                  break;\n                }\n\n              default:\n                toss('Invalid type for peek():', type);\n            }\n            if (list) list.push(rc);\n          } while (list && arguments[0].length);\n          return list || rc;\n        };\n\n        target.poke = function (ptr, value, type = 'i8') {\n          if (type.endsWith('*')) type = ptrIR;\n          const c =\n            cache.memory && cache.heapSize === cache.memory.buffer.byteLength\n              ? cache\n              : heapWrappers();\n          for (const p of Array.isArray(ptr) ? ptr : [ptr]) {\n            switch (type) {\n              case 'i1':\n              case 'i8':\n                c.HEAP8[p >> 0] = value;\n                continue;\n              case 'i16':\n                c.HEAP16[p >> 1] = value;\n                continue;\n              case 'i32':\n                c.HEAP32[p >> 2] = value;\n                continue;\n              case 'float':\n              case 'f32':\n                c.HEAP32F[p >> 2] = value;\n                continue;\n              case 'double':\n              case 'f64':\n                c.HEAP64F[p >> 3] = value;\n                continue;\n              case 'i64':\n                if (c.HEAP64) {\n                  c.HEAP64[p >> 3] = BigInt(value);\n                  continue;\n                }\n\n              default:\n                toss('Invalid type for poke(): ' + type);\n            }\n          }\n          return this;\n        };\n\n        target.peekPtr = (...ptr) =>\n          target.peek(1 === ptr.length ? ptr[0] : ptr, ptrIR);\n\n        target.pokePtr = (ptr, value = 0) => target.poke(ptr, value, ptrIR);\n\n        target.peek8 = (...ptr) =>\n          target.peek(1 === ptr.length ? ptr[0] : ptr, 'i8');\n\n        target.poke8 = (ptr, value) => target.poke(ptr, value, 'i8');\n\n        target.peek16 = (...ptr) =>\n          target.peek(1 === ptr.length ? ptr[0] : ptr, 'i16');\n\n        target.poke16 = (ptr, value) => target.poke(ptr, value, 'i16');\n\n        target.peek32 = (...ptr) =>\n          target.peek(1 === ptr.length ? ptr[0] : ptr, 'i32');\n\n        target.poke32 = (ptr, value) => target.poke(ptr, value, 'i32');\n\n        target.peek64 = (...ptr) =>\n          target.peek(1 === ptr.length ? ptr[0] : ptr, 'i64');\n\n        target.poke64 = (ptr, value) => target.poke(ptr, value, 'i64');\n\n        target.peek32f = (...ptr) =>\n          target.peek(1 === ptr.length ? ptr[0] : ptr, 'f32');\n\n        target.poke32f = (ptr, value) => target.poke(ptr, value, 'f32');\n\n        target.peek64f = (...ptr) =>\n          target.peek(1 === ptr.length ? ptr[0] : ptr, 'f64');\n\n        target.poke64f = (ptr, value) => target.poke(ptr, value, 'f64');\n\n        target.getMemValue = target.peek;\n\n        target.getPtrValue = target.peekPtr;\n\n        target.setMemValue = target.poke;\n\n        target.setPtrValue = target.pokePtr;\n\n        target.isPtr32 = (ptr) =>\n          'number' === typeof ptr && ptr === (ptr | 0) && ptr >= 0;\n\n        target.isPtr = target.isPtr32;\n\n        target.cstrlen = function (ptr) {\n          if (!ptr || !target.isPtr(ptr)) return null;\n          const h = heapWrappers().HEAP8U;\n          let pos = ptr;\n          for (; h[pos] !== 0; ++pos) {}\n          return pos - ptr;\n        };\n\n        const __SAB =\n          'undefined' === typeof SharedArrayBuffer\n            ? function () {}\n            : SharedArrayBuffer;\n        const __utf8Decode = function (arrayBuffer, begin, end) {\n          return cache.utf8Decoder.decode(\n            arrayBuffer.buffer instanceof __SAB\n              ? arrayBuffer.slice(begin, end)\n              : arrayBuffer.subarray(begin, end),\n          );\n        };\n\n        target.cstrToJs = function (ptr) {\n          const n = target.cstrlen(ptr);\n          return n\n            ? __utf8Decode(heapWrappers().HEAP8U, ptr, ptr + n)\n            : null === n\n              ? n\n              : '';\n        };\n\n        target.jstrlen = function (str) {\n          if ('string' !== typeof str) return null;\n          const n = str.length;\n          let len = 0;\n          for (let i = 0; i < n; ++i) {\n            let u = str.charCodeAt(i);\n            if (u >= 0xd800 && u <= 0xdfff) {\n              u =\n                (0x10000 + ((u & 0x3ff) << 10)) | (str.charCodeAt(++i) & 0x3ff);\n            }\n            if (u <= 0x7f) ++len;\n            else if (u <= 0x7ff) len += 2;\n            else if (u <= 0xffff) len += 3;\n            else len += 4;\n          }\n          return len;\n        };\n\n        target.jstrcpy = function (\n          jstr,\n          tgt,\n          offset = 0,\n          maxBytes = -1,\n          addNul = true,\n        ) {\n          if (\n            !tgt ||\n            (!(tgt instanceof Int8Array) && !(tgt instanceof Uint8Array))\n          ) {\n            toss('jstrcpy() target must be an Int8Array or Uint8Array.');\n          }\n          if (maxBytes < 0) maxBytes = tgt.length - offset;\n          if (!(maxBytes > 0) || !(offset >= 0)) return 0;\n          let i = 0,\n            max = jstr.length;\n          const begin = offset,\n            end = offset + maxBytes - (addNul ? 1 : 0);\n          for (; i < max && offset < end; ++i) {\n            let u = jstr.charCodeAt(i);\n            if (u >= 0xd800 && u <= 0xdfff) {\n              u =\n                (0x10000 + ((u & 0x3ff) << 10)) |\n                (jstr.charCodeAt(++i) & 0x3ff);\n            }\n            if (u <= 0x7f) {\n              if (offset >= end) break;\n              tgt[offset++] = u;\n            } else if (u <= 0x7ff) {\n              if (offset + 1 >= end) break;\n              tgt[offset++] = 0xc0 | (u >> 6);\n              tgt[offset++] = 0x80 | (u & 0x3f);\n            } else if (u <= 0xffff) {\n              if (offset + 2 >= end) break;\n              tgt[offset++] = 0xe0 | (u >> 12);\n              tgt[offset++] = 0x80 | ((u >> 6) & 0x3f);\n              tgt[offset++] = 0x80 | (u & 0x3f);\n            } else {\n              if (offset + 3 >= end) break;\n              tgt[offset++] = 0xf0 | (u >> 18);\n              tgt[offset++] = 0x80 | ((u >> 12) & 0x3f);\n              tgt[offset++] = 0x80 | ((u >> 6) & 0x3f);\n              tgt[offset++] = 0x80 | (u & 0x3f);\n            }\n          }\n          if (addNul) tgt[offset++] = 0;\n          return offset - begin;\n        };\n\n        target.cstrncpy = function (tgtPtr, srcPtr, n) {\n          if (!tgtPtr || !srcPtr)\n            toss('cstrncpy() does not accept NULL strings.');\n          if (n < 0) n = target.cstrlen(strPtr) + 1;\n          else if (!(n > 0)) return 0;\n          const heap = target.heap8u();\n          let i = 0,\n            ch;\n          for (; i < n && (ch = heap[srcPtr + i]); ++i) {\n            heap[tgtPtr + i] = ch;\n          }\n          if (i < n) heap[tgtPtr + i++] = 0;\n          return i;\n        };\n\n        target.jstrToUintArray = (str, addNul = false) => {\n          return cache.utf8Encoder.encode(addNul ? str + '\\0' : str);\n        };\n\n        const __affirmAlloc = (obj, funcName) => {\n          if (\n            !(obj.alloc instanceof Function) ||\n            !(obj.dealloc instanceof Function)\n          ) {\n            toss(\n              'Object is missing alloc() and/or dealloc() function(s)',\n              'required by',\n              funcName + '().',\n            );\n          }\n        };\n\n        const __allocCStr = function (\n          jstr,\n          returnWithLength,\n          allocator,\n          funcName,\n        ) {\n          __affirmAlloc(target, funcName);\n          if ('string' !== typeof jstr) return null;\n          if (false) {} else {\n            const u = cache.utf8Encoder.encode(jstr),\n              ptr = allocator(u.length + 1),\n              heap = heapWrappers().HEAP8U;\n            heap.set(u, ptr);\n            heap[ptr + u.length] = 0;\n            return returnWithLength ? [ptr, u.length] : ptr;\n          }\n        };\n\n        target.allocCString = (jstr, returnWithLength = false) =>\n          __allocCStr(jstr, returnWithLength, target.alloc, 'allocCString()');\n\n        target.scopedAllocPush = function () {\n          __affirmAlloc(target, 'scopedAllocPush');\n          const a = [];\n          cache.scopedAlloc.push(a);\n          return a;\n        };\n\n        target.scopedAllocPop = function (state) {\n          __affirmAlloc(target, 'scopedAllocPop');\n          const n = arguments.length\n            ? cache.scopedAlloc.indexOf(state)\n            : cache.scopedAlloc.length - 1;\n          if (n < 0) toss('Invalid state object for scopedAllocPop().');\n          if (0 === arguments.length) state = cache.scopedAlloc[n];\n          cache.scopedAlloc.splice(n, 1);\n          for (let p; (p = state.pop()); ) {\n            if (target.functionEntry(p)) {\n              target.uninstallFunction(p);\n            } else target.dealloc(p);\n          }\n        };\n\n        target.scopedAlloc = function (n) {\n          if (!cache.scopedAlloc.length) {\n            toss('No scopedAllocPush() scope is active.');\n          }\n          const p = target.alloc(n);\n          cache.scopedAlloc[cache.scopedAlloc.length - 1].push(p);\n          return p;\n        };\n\n        Object.defineProperty(target.scopedAlloc, 'level', {\n          configurable: false,\n          enumerable: false,\n          get: () => cache.scopedAlloc.length,\n          set: () => toss(\"The 'active' property is read-only.\"),\n        });\n\n        target.scopedAllocCString = (jstr, returnWithLength = false) =>\n          __allocCStr(\n            jstr,\n            returnWithLength,\n            target.scopedAlloc,\n            'scopedAllocCString()',\n          );\n\n        const __allocMainArgv = function (isScoped, list) {\n          const pList = target[isScoped ? 'scopedAlloc' : 'alloc'](\n            (list.length + 1) * target.ptrSizeof,\n          );\n          let i = 0;\n          list.forEach((e) => {\n            target.pokePtr(\n              pList + target.ptrSizeof * i++,\n              target[isScoped ? 'scopedAllocCString' : 'allocCString']('' + e),\n            );\n          });\n          target.pokePtr(pList + target.ptrSizeof * i, 0);\n          return pList;\n        };\n\n        target.scopedAllocMainArgv = (list) => __allocMainArgv(true, list);\n\n        target.allocMainArgv = (list) => __allocMainArgv(false, list);\n\n        target.cArgvToJs = (argc, pArgv) => {\n          const list = [];\n          for (let i = 0; i < argc; ++i) {\n            const arg = target.peekPtr(pArgv + target.ptrSizeof * i);\n            list.push(arg ? target.cstrToJs(arg) : null);\n          }\n          return list;\n        };\n\n        target.scopedAllocCall = function (func) {\n          target.scopedAllocPush();\n          try {\n            return func();\n          } finally {\n            target.scopedAllocPop();\n          }\n        };\n\n        const __allocPtr = function (howMany, safePtrSize, method) {\n          __affirmAlloc(target, method);\n          const pIr = safePtrSize ? 'i64' : ptrIR;\n          let m = target[method](howMany * (safePtrSize ? 8 : ptrSizeof));\n          target.poke(m, 0, pIr);\n          if (1 === howMany) {\n            return m;\n          }\n          const a = [m];\n          for (let i = 1; i < howMany; ++i) {\n            m += safePtrSize ? 8 : ptrSizeof;\n            a[i] = m;\n            target.poke(m, 0, pIr);\n          }\n          return a;\n        };\n\n        target.allocPtr = (howMany = 1, safePtrSize = true) =>\n          __allocPtr(howMany, safePtrSize, 'alloc');\n\n        target.scopedAllocPtr = (howMany = 1, safePtrSize = true) =>\n          __allocPtr(howMany, safePtrSize, 'scopedAlloc');\n\n        target.xGet = function (name) {\n          return (\n            target.exports[name] || toss('Cannot find exported symbol:', name)\n          );\n        };\n\n        const __argcMismatch = (f, n) =>\n          toss(f + '() requires', n, 'argument(s).');\n\n        target.xCall = function (fname, ...args) {\n          const f = fname instanceof Function ? fname : target.xGet(fname);\n          if (!(f instanceof Function))\n            toss('Exported symbol', fname, 'is not a function.');\n          if (f.length !== args.length)\n            __argcMismatch(f === fname ? f.name : fname, f.length);\n          return 2 === arguments.length && Array.isArray(arguments[1])\n            ? f.apply(null, arguments[1])\n            : f.apply(null, args);\n        };\n\n        cache.xWrap = Object.create(null);\n        cache.xWrap.convert = Object.create(null);\n\n        cache.xWrap.convert.arg = new Map();\n\n        cache.xWrap.convert.result = new Map();\n        const xArg = cache.xWrap.convert.arg,\n          xResult = cache.xWrap.convert.result;\n\n        if (target.bigIntEnabled) {\n          xArg.set('i64', (i) => BigInt(i));\n        }\n        const __xArgPtr =\n          'i32' === ptrIR ? (i) => i | 0 : (i) => BigInt(i) | BigInt(0);\n        xArg\n          .set('i32', __xArgPtr)\n          .set('i16', (i) => (i | 0) & 0xffff)\n          .set('i8', (i) => (i | 0) & 0xff)\n          .set('f32', (i) => Number(i).valueOf())\n          .set('float', xArg.get('f32'))\n          .set('f64', xArg.get('f32'))\n          .set('double', xArg.get('f64'))\n          .set('int', xArg.get('i32'))\n          .set('null', (i) => i)\n          .set(null, xArg.get('null'))\n          .set('**', __xArgPtr)\n          .set('*', __xArgPtr);\n        xResult\n          .set('*', __xArgPtr)\n          .set('pointer', __xArgPtr)\n          .set('number', (v) => Number(v))\n          .set('void', (v) => undefined)\n          .set('null', (v) => v)\n          .set(null, xResult.get('null'));\n\n        {\n          const copyToResult = [\n            'i8',\n            'i16',\n            'i32',\n            'int',\n            'f32',\n            'float',\n            'f64',\n            'double',\n          ];\n          if (target.bigIntEnabled) copyToResult.push('i64');\n          const adaptPtr = xArg.get(ptrIR);\n          for (const t of copyToResult) {\n            xArg.set(t + '*', adaptPtr);\n            xResult.set(t + '*', adaptPtr);\n            xResult.set(t, xArg.get(t) || toss('Missing arg converter:', t));\n          }\n        }\n\n        const __xArgString = function (v) {\n          if ('string' === typeof v) return target.scopedAllocCString(v);\n          return v ? __xArgPtr(v) : null;\n        };\n        xArg\n          .set('string', __xArgString)\n          .set('utf8', __xArgString)\n          .set('pointer', __xArgString);\n\n        xResult\n          .set('string', (i) => target.cstrToJs(i))\n          .set('utf8', xResult.get('string'))\n          .set('string:dealloc', (i) => {\n            try {\n              return i ? target.cstrToJs(i) : null;\n            } finally {\n              target.dealloc(i);\n            }\n          })\n          .set('utf8:dealloc', xResult.get('string:dealloc'))\n          .set('json', (i) => JSON.parse(target.cstrToJs(i)))\n          .set('json:dealloc', (i) => {\n            try {\n              return i ? JSON.parse(target.cstrToJs(i)) : null;\n            } finally {\n              target.dealloc(i);\n            }\n          });\n\n        const AbstractArgAdapter = class {\n          constructor(opt) {\n            this.name = opt.name || 'unnamed adapter';\n          }\n\n          convertArg(v, argv, argIndex) {\n            toss('AbstractArgAdapter must be subclassed.');\n          }\n        };\n\n        xArg.FuncPtrAdapter = class FuncPtrAdapter extends AbstractArgAdapter {\n          constructor(opt) {\n            super(opt);\n            if (xArg.FuncPtrAdapter.warnOnUse) {\n              console.warn(\n                'xArg.FuncPtrAdapter is an internal-only API',\n                'and is not intended to be invoked from',\n                'client-level code. Invoked with:',\n                opt,\n              );\n            }\n            this.name = opt.name || 'unnamed';\n            this.signature = opt.signature;\n            if (opt.contextKey instanceof Function) {\n              this.contextKey = opt.contextKey;\n              if (!opt.bindScope) opt.bindScope = 'context';\n            }\n            this.bindScope =\n              opt.bindScope ||\n              toss(\n                'FuncPtrAdapter options requires a bindScope (explicit or implied).',\n              );\n            if (FuncPtrAdapter.bindScopes.indexOf(opt.bindScope) < 0) {\n              toss(\n                'Invalid options.bindScope (' +\n                  opt.bindMod +\n                  ') for FuncPtrAdapter. ' +\n                  'Expecting one of: (' +\n                  FuncPtrAdapter.bindScopes.join(', ') +\n                  ')',\n              );\n            }\n            this.isTransient = 'transient' === this.bindScope;\n            this.isContext = 'context' === this.bindScope;\n            this.isPermanent = 'permanent' === this.bindScope;\n            this.singleton = 'singleton' === this.bindScope ? [] : undefined;\n\n            this.callProxy =\n              opt.callProxy instanceof Function ? opt.callProxy : undefined;\n          }\n\n          contextKey(argv, argIndex) {\n            return this;\n          }\n\n          contextMap(key) {\n            const cm = this.__cmap || (this.__cmap = new Map());\n            let rc = cm.get(key);\n            if (undefined === rc) cm.set(key, (rc = []));\n            return rc;\n          }\n\n          convertArg(v, argv, argIndex) {\n            let pair = this.singleton;\n            if (!pair && this.isContext) {\n              pair = this.contextMap(this.contextKey(argv, argIndex));\n            }\n            if (pair && pair[0] === v) return pair[1];\n            if (v instanceof Function) {\n              if (this.callProxy) v = this.callProxy(v);\n              const fp = __installFunction(v, this.signature, this.isTransient);\n              if (FuncPtrAdapter.debugFuncInstall) {\n                FuncPtrAdapter.debugOut(\n                  'FuncPtrAdapter installed',\n                  this,\n                  this.contextKey(argv, argIndex),\n                  '@' + fp,\n                  v,\n                );\n              }\n              if (pair) {\n                if (pair[1]) {\n                  if (FuncPtrAdapter.debugFuncInstall) {\n                    FuncPtrAdapter.debugOut(\n                      'FuncPtrAdapter uninstalling',\n                      this,\n                      this.contextKey(argv, argIndex),\n                      '@' + pair[1],\n                      v,\n                    );\n                  }\n                  try {\n                    cache.scopedAlloc[cache.scopedAlloc.length - 1].push(\n                      pair[1],\n                    );\n                  } catch (e) {}\n                }\n                pair[0] = v;\n                pair[1] = fp;\n              }\n              return fp;\n            } else if (target.isPtr(v) || null === v || undefined === v) {\n              if (pair && pair[1] && pair[1] !== v) {\n                if (FuncPtrAdapter.debugFuncInstall) {\n                  FuncPtrAdapter.debugOut(\n                    'FuncPtrAdapter uninstalling',\n                    this,\n                    this.contextKey(argv, argIndex),\n                    '@' + pair[1],\n                    v,\n                  );\n                }\n                try {\n                  cache.scopedAlloc[cache.scopedAlloc.length - 1].push(pair[1]);\n                } catch (e) {}\n                pair[0] = pair[1] = v | 0;\n              }\n              return v || 0;\n            } else {\n              throw new TypeError(\n                'Invalid FuncPtrAdapter argument type. ' +\n                  'Expecting a function pointer or a ' +\n                  (this.name ? this.name + ' ' : '') +\n                  'function matching signature ' +\n                  this.signature +\n                  '.',\n              );\n            }\n          }\n        };\n\n        xArg.FuncPtrAdapter.warnOnUse = false;\n\n        xArg.FuncPtrAdapter.debugFuncInstall = false;\n\n        xArg.FuncPtrAdapter.debugOut = console.debug.bind(console);\n\n        xArg.FuncPtrAdapter.bindScopes = [\n          'transient',\n          'context',\n          'singleton',\n          'permanent',\n        ];\n\n        const __xArgAdapterCheck = (t) =>\n          xArg.get(t) || toss('Argument adapter not found:', t);\n\n        const __xResultAdapterCheck = (t) =>\n          xResult.get(t) || toss('Result adapter not found:', t);\n\n        cache.xWrap.convertArg = (t, ...args) => __xArgAdapterCheck(t)(...args);\n\n        cache.xWrap.convertArgNoCheck = (t, ...args) => xArg.get(t)(...args);\n\n        cache.xWrap.convertResult = (t, v) =>\n          null === t ? v : t ? __xResultAdapterCheck(t)(v) : undefined;\n\n        cache.xWrap.convertResultNoCheck = (t, v) =>\n          null === t ? v : t ? xResult.get(t)(v) : undefined;\n\n        target.xWrap = function (fArg, resultType, ...argTypes) {\n          if (3 === arguments.length && Array.isArray(arguments[2])) {\n            argTypes = arguments[2];\n          }\n          if (target.isPtr(fArg)) {\n            fArg =\n              target.functionEntry(fArg) ||\n              toss('Function pointer not found in WASM function table.');\n          }\n          const fIsFunc = fArg instanceof Function;\n          const xf = fIsFunc ? fArg : target.xGet(fArg);\n          if (fIsFunc) fArg = xf.name || 'unnamed function';\n          if (argTypes.length !== xf.length) __argcMismatch(fArg, xf.length);\n          if (null === resultType && 0 === xf.length) {\n            return xf;\n          }\n          if (undefined !== resultType && null !== resultType)\n            __xResultAdapterCheck(resultType);\n          for (const t of argTypes) {\n            if (t instanceof AbstractArgAdapter)\n              xArg.set(t, (...args) => t.convertArg(...args));\n            else __xArgAdapterCheck(t);\n          }\n          const cxw = cache.xWrap;\n          if (0 === xf.length) {\n            return (...args) =>\n              args.length\n                ? __argcMismatch(fArg, xf.length)\n                : cxw.convertResult(resultType, xf.call(null));\n          }\n          return function (...args) {\n            if (args.length !== xf.length) __argcMismatch(fArg, xf.length);\n            const scope = target.scopedAllocPush();\n            try {\n              let i = 0;\n              for (; i < args.length; ++i)\n                args[i] = cxw.convertArgNoCheck(argTypes[i], args[i], args, i);\n              return cxw.convertResultNoCheck(resultType, xf.apply(null, args));\n            } finally {\n              target.scopedAllocPop(scope);\n            }\n          };\n        };\n\n        const __xAdapter = function (\n          func,\n          argc,\n          typeName,\n          adapter,\n          modeName,\n          xcvPart,\n        ) {\n          if ('string' === typeof typeName) {\n            if (1 === argc) return xcvPart.get(typeName);\n            else if (2 === argc) {\n              if (!adapter) {\n                xcvPart.delete(typeName);\n                return func;\n              } else if (!(adapter instanceof Function)) {\n                toss(modeName, 'requires a function argument.');\n              }\n              xcvPart.set(typeName, adapter);\n              return func;\n            }\n          }\n          toss('Invalid arguments to', modeName);\n        };\n\n        target.xWrap.resultAdapter = function f(typeName, adapter) {\n          return __xAdapter(\n            f,\n            arguments.length,\n            typeName,\n            adapter,\n            'resultAdapter()',\n            xResult,\n          );\n        };\n\n        target.xWrap.argAdapter = function f(typeName, adapter) {\n          return __xAdapter(\n            f,\n            arguments.length,\n            typeName,\n            adapter,\n            'argAdapter()',\n            xArg,\n          );\n        };\n\n        target.xWrap.FuncPtrAdapter = xArg.FuncPtrAdapter;\n\n        target.xCallWrapped = function (fArg, resultType, argTypes, ...args) {\n          if (Array.isArray(arguments[3])) args = arguments[3];\n          return target\n            .xWrap(fArg, resultType, argTypes || [])\n            .apply(null, args || []);\n        };\n\n        target.xWrap.testConvertArg = cache.xWrap.convertArg;\n\n        target.xWrap.testConvertResult = cache.xWrap.convertResult;\n\n        return target;\n      };\n\n      globalThis.WhWasmUtilInstaller.yawl = function (config) {\n        const wfetch = () => fetch(config.uri, { credentials: 'same-origin' });\n        const wui = this;\n        const finalThen = function (arg) {\n          if (config.wasmUtilTarget) {\n            const toss = (...args) => {\n              throw new Error(args.join(' '));\n            };\n            const tgt = config.wasmUtilTarget;\n            tgt.module = arg.module;\n            tgt.instance = arg.instance;\n\n            if (!tgt.instance.exports.memory) {\n              tgt.memory =\n                (config.imports &&\n                  config.imports.env &&\n                  config.imports.env.memory) ||\n                toss(\"Missing 'memory' object!\");\n            }\n            if (!tgt.alloc && arg.instance.exports.malloc) {\n              const exports = arg.instance.exports;\n              tgt.alloc = function (n) {\n                return (\n                  exports.malloc(n) || toss('Allocation of', n, 'bytes failed.')\n                );\n              };\n              tgt.dealloc = function (m) {\n                exports.free(m);\n              };\n            }\n            wui(tgt);\n          }\n          if (config.onload) config.onload(arg, config);\n          return arg;\n        };\n        const loadWasm = WebAssembly.instantiateStreaming\n          ? function loadWasmStreaming() {\n              return WebAssembly.instantiateStreaming(\n                wfetch(),\n                config.imports || {},\n              ).then(finalThen);\n            }\n          : function loadWasmOldSchool() {\n              return wfetch()\n                .then((response) => response.arrayBuffer())\n                .then((bytes) =>\n                  WebAssembly.instantiate(bytes, config.imports || {}),\n                )\n                .then(finalThen);\n            };\n        return loadWasm;\n      }.bind(globalThis.WhWasmUtilInstaller);\n\n      ('use strict');\n      globalThis.Jaccwabyt = function StructBinderFactory(config) {\n        const toss = (...args) => {\n          throw new Error(args.join(' '));\n        };\n\n        if (\n          !(config.heap instanceof WebAssembly.Memory) &&\n          !(config.heap instanceof Function)\n        ) {\n          toss(\n            'config.heap must be WebAssembly.Memory instance or a function.',\n          );\n        }\n        ['alloc', 'dealloc'].forEach(function (k) {\n          config[k] instanceof Function ||\n            toss(\"Config option '\" + k + \"' must be a function.\");\n        });\n        const SBF = StructBinderFactory;\n        const heap =\n            config.heap instanceof Function\n              ? config.heap\n              : () => new Uint8Array(config.heap.buffer),\n          alloc = config.alloc,\n          dealloc = config.dealloc,\n          log = config.log || console.log.bind(console),\n          memberPrefix = config.memberPrefix || '',\n          memberSuffix = config.memberSuffix || '',\n          bigIntEnabled =\n            undefined === config.bigIntEnabled\n              ? !!globalThis['BigInt64Array']\n              : !!config.bigIntEnabled,\n          BigInt = globalThis['BigInt'],\n          BigInt64Array = globalThis['BigInt64Array'],\n          ptrSizeof = config.ptrSizeof || 4,\n          ptrIR = config.ptrIR || 'i32';\n        if (!SBF.debugFlags) {\n          SBF.__makeDebugFlags = function (deriveFrom = null) {\n            if (deriveFrom && deriveFrom.__flags)\n              deriveFrom = deriveFrom.__flags;\n            const f = function f(flags) {\n              if (0 === arguments.length) {\n                return f.__flags;\n              }\n              if (flags < 0) {\n                delete f.__flags.getter;\n                delete f.__flags.setter;\n                delete f.__flags.alloc;\n                delete f.__flags.dealloc;\n              } else {\n                f.__flags.getter = 0 !== (0x01 & flags);\n                f.__flags.setter = 0 !== (0x02 & flags);\n                f.__flags.alloc = 0 !== (0x04 & flags);\n                f.__flags.dealloc = 0 !== (0x08 & flags);\n              }\n              return f._flags;\n            };\n            Object.defineProperty(f, '__flags', {\n              iterable: false,\n              writable: false,\n              value: Object.create(deriveFrom),\n            });\n            if (!deriveFrom) f(0);\n            return f;\n          };\n          SBF.debugFlags = SBF.__makeDebugFlags();\n        }\n\n        const isLittleEndian = (function () {\n          const buffer = new ArrayBuffer(2);\n          new DataView(buffer).setInt16(0, 256, true);\n\n          return new Int16Array(buffer)[0] === 256;\n        })();\n\n        const isFuncSig = (s) => '(' === s[1];\n\n        const isPtrSig = (s) => 'p' === s || 'P' === s;\n        const isAutoPtrSig = (s) => 'P' === s;\n        const sigLetter = (s) => (isFuncSig(s) ? 'p' : s[0]);\n\n        const sigIR = function (s) {\n          switch (sigLetter(s)) {\n            case 'c':\n            case 'C':\n              return 'i8';\n            case 'i':\n              return 'i32';\n            case 'p':\n            case 'P':\n            case 's':\n              return ptrIR;\n            case 'j':\n              return 'i64';\n            case 'f':\n              return 'float';\n            case 'd':\n              return 'double';\n          }\n          toss('Unhandled signature IR:', s);\n        };\n\n        const affirmBigIntArray = BigInt64Array\n          ? () => true\n          : () => toss('BigInt64Array is not available.');\n\n        const sigDVGetter = function (s) {\n          switch (sigLetter(s)) {\n            case 'p':\n            case 'P':\n            case 's': {\n              switch (ptrSizeof) {\n                case 4:\n                  return 'getInt32';\n                case 8:\n                  return affirmBigIntArray() && 'getBigInt64';\n              }\n              break;\n            }\n            case 'i':\n              return 'getInt32';\n            case 'c':\n              return 'getInt8';\n            case 'C':\n              return 'getUint8';\n            case 'j':\n              return affirmBigIntArray() && 'getBigInt64';\n            case 'f':\n              return 'getFloat32';\n            case 'd':\n              return 'getFloat64';\n          }\n          toss('Unhandled DataView getter for signature:', s);\n        };\n\n        const sigDVSetter = function (s) {\n          switch (sigLetter(s)) {\n            case 'p':\n            case 'P':\n            case 's': {\n              switch (ptrSizeof) {\n                case 4:\n                  return 'setInt32';\n                case 8:\n                  return affirmBigIntArray() && 'setBigInt64';\n              }\n              break;\n            }\n            case 'i':\n              return 'setInt32';\n            case 'c':\n              return 'setInt8';\n            case 'C':\n              return 'setUint8';\n            case 'j':\n              return affirmBigIntArray() && 'setBigInt64';\n            case 'f':\n              return 'setFloat32';\n            case 'd':\n              return 'setFloat64';\n          }\n          toss('Unhandled DataView setter for signature:', s);\n        };\n\n        const sigDVSetWrapper = function (s) {\n          switch (sigLetter(s)) {\n            case 'i':\n            case 'f':\n            case 'c':\n            case 'C':\n            case 'd':\n              return Number;\n            case 'j':\n              return affirmBigIntArray() && BigInt;\n            case 'p':\n            case 'P':\n            case 's':\n              switch (ptrSizeof) {\n                case 4:\n                  return Number;\n                case 8:\n                  return affirmBigIntArray() && BigInt;\n              }\n              break;\n          }\n          toss('Unhandled DataView set wrapper for signature:', s);\n        };\n\n        const sPropName = (s, k) => s + '::' + k;\n\n        const __propThrowOnSet = function (structName, propName) {\n          return () => toss(sPropName(structName, propName), 'is read-only.');\n        };\n\n        const __instancePointerMap = new WeakMap();\n\n        const xPtrPropName = '(pointer-is-external)';\n\n        const __freeStruct = function (ctor, obj, m) {\n          if (!m) m = __instancePointerMap.get(obj);\n          if (m) {\n            __instancePointerMap.delete(obj);\n            if (Array.isArray(obj.ondispose)) {\n              let x;\n              while ((x = obj.ondispose.shift())) {\n                try {\n                  if (x instanceof Function) x.call(obj);\n                  else if (x instanceof StructType) x.dispose();\n                  else if ('number' === typeof x) dealloc(x);\n                } catch (e) {\n                  console.warn(\n                    'ondispose() for',\n                    ctor.structName,\n                    '@',\n                    m,\n                    'threw. NOT propagating it.',\n                    e,\n                  );\n                }\n              }\n            } else if (obj.ondispose instanceof Function) {\n              try {\n                obj.ondispose();\n              } catch (e) {\n                console.warn(\n                  'ondispose() for',\n                  ctor.structName,\n                  '@',\n                  m,\n                  'threw. NOT propagating it.',\n                  e,\n                );\n              }\n            }\n            delete obj.ondispose;\n            if (ctor.debugFlags.__flags.dealloc) {\n              log(\n                'debug.dealloc:',\n                obj[xPtrPropName] ? 'EXTERNAL' : '',\n                ctor.structName,\n                'instance:',\n                ctor.structInfo.sizeof,\n                'bytes @' + m,\n              );\n            }\n            if (!obj[xPtrPropName]) dealloc(m);\n          }\n        };\n\n        const rop = (v) => {\n          return {\n            configurable: false,\n            writable: false,\n            iterable: false,\n            value: v,\n          };\n        };\n\n        const __allocStruct = function (ctor, obj, m) {\n          let fill = !m;\n          if (m) Object.defineProperty(obj, xPtrPropName, rop(m));\n          else {\n            m = alloc(ctor.structInfo.sizeof);\n            if (!m) toss('Allocation of', ctor.structName, 'structure failed.');\n          }\n          try {\n            if (ctor.debugFlags.__flags.alloc) {\n              log(\n                'debug.alloc:',\n                fill ? '' : 'EXTERNAL',\n                ctor.structName,\n                'instance:',\n                ctor.structInfo.sizeof,\n                'bytes @' + m,\n              );\n            }\n            if (fill) heap().fill(0, m, m + ctor.structInfo.sizeof);\n            __instancePointerMap.set(obj, m);\n          } catch (e) {\n            __freeStruct(ctor, obj, m);\n            throw e;\n          }\n        };\n\n        const __memoryDump = function () {\n          const p = this.pointer;\n          return p\n            ? new Uint8Array(heap().slice(p, p + this.structInfo.sizeof))\n            : null;\n        };\n\n        const __memberKey = (k) => memberPrefix + k + memberSuffix;\n        const __memberKeyProp = rop(__memberKey);\n\n        const __lookupMember = function (\n          structInfo,\n          memberName,\n          tossIfNotFound = true,\n        ) {\n          let m = structInfo.members[memberName];\n          if (!m && (memberPrefix || memberSuffix)) {\n            for (const v of Object.values(structInfo.members)) {\n              if (v.key === memberName) {\n                m = v;\n                break;\n              }\n            }\n            if (!m && tossIfNotFound) {\n              toss(\n                sPropName(structInfo.name, memberName),\n                'is not a mapped struct member.',\n              );\n            }\n          }\n          return m;\n        };\n\n        const __memberSignature = function f(\n          obj,\n          memberName,\n          emscriptenFormat = false,\n        ) {\n          if (!f._)\n            f._ = (x) =>\n              x.replace(/[^vipPsjrdcC]/g, '').replace(/[pPscC]/g, 'i');\n          const m = __lookupMember(obj.structInfo, memberName, true);\n          return emscriptenFormat ? f._(m.signature) : m.signature;\n        };\n\n        const __ptrPropDescriptor = {\n          configurable: false,\n          enumerable: false,\n          get: function () {\n            return __instancePointerMap.get(this);\n          },\n          set: () => toss(\"Cannot assign the 'pointer' property of a struct.\"),\n        };\n\n        const __structMemberKeys = rop(function () {\n          const a = [];\n          for (const k of Object.keys(this.structInfo.members)) {\n            a.push(this.memberKey(k));\n          }\n          return a;\n        });\n\n        const __utf8Decoder = new TextDecoder('utf-8');\n        const __utf8Encoder = new TextEncoder();\n\n        const __SAB =\n          'undefined' === typeof SharedArrayBuffer\n            ? function () {}\n            : SharedArrayBuffer;\n        const __utf8Decode = function (arrayBuffer, begin, end) {\n          return __utf8Decoder.decode(\n            arrayBuffer.buffer instanceof __SAB\n              ? arrayBuffer.slice(begin, end)\n              : arrayBuffer.subarray(begin, end),\n          );\n        };\n\n        const __memberIsString = function (\n          obj,\n          memberName,\n          tossIfNotFound = false,\n        ) {\n          const m = __lookupMember(obj.structInfo, memberName, tossIfNotFound);\n          return m && 1 === m.signature.length && 's' === m.signature[0]\n            ? m\n            : false;\n        };\n\n        const __affirmCStringSignature = function (member) {\n          if ('s' === member.signature) return;\n          toss(\n            'Invalid member type signature for C-string value:',\n            JSON.stringify(member),\n          );\n        };\n\n        const __memberToJsString = function f(obj, memberName) {\n          const m = __lookupMember(obj.structInfo, memberName, true);\n          __affirmCStringSignature(m);\n          const addr = obj[m.key];\n\n          if (!addr) return null;\n          let pos = addr;\n          const mem = heap();\n          for (; mem[pos] !== 0; ++pos) {}\n\n          return addr === pos ? '' : __utf8Decode(mem, addr, pos);\n        };\n\n        const __addOnDispose = function (obj, ...v) {\n          if (obj.ondispose) {\n            if (!Array.isArray(obj.ondispose)) {\n              obj.ondispose = [obj.ondispose];\n            }\n          } else {\n            obj.ondispose = [];\n          }\n          obj.ondispose.push(...v);\n        };\n\n        const __allocCString = function (str) {\n          const u = __utf8Encoder.encode(str);\n          const mem = alloc(u.length + 1);\n          if (!mem) toss('Allocation error while duplicating string:', str);\n          const h = heap();\n\n          h.set(u, mem);\n          h[mem + u.length] = 0;\n\n          return mem;\n        };\n\n        const __setMemberCString = function (obj, memberName, str) {\n          const m = __lookupMember(obj.structInfo, memberName, true);\n          __affirmCStringSignature(m);\n\n          const mem = __allocCString(str);\n          obj[m.key] = mem;\n          __addOnDispose(obj, mem);\n          return obj;\n        };\n\n        const StructType = function ctor(structName, structInfo) {\n          if (arguments[2] !== rop) {\n            toss(\n              'Do not call the StructType constructor',\n              'from client-level code.',\n            );\n          }\n          Object.defineProperties(this, {\n            structName: rop(structName),\n            structInfo: rop(structInfo),\n          });\n        };\n\n        StructType.prototype = Object.create(null, {\n          dispose: rop(function () {\n            __freeStruct(this.constructor, this);\n          }),\n          lookupMember: rop(function (memberName, tossIfNotFound = true) {\n            return __lookupMember(this.structInfo, memberName, tossIfNotFound);\n          }),\n          memberToJsString: rop(function (memberName) {\n            return __memberToJsString(this, memberName);\n          }),\n          memberIsString: rop(function (memberName, tossIfNotFound = true) {\n            return __memberIsString(this, memberName, tossIfNotFound);\n          }),\n          memberKey: __memberKeyProp,\n          memberKeys: __structMemberKeys,\n          memberSignature: rop(function (memberName, emscriptenFormat = false) {\n            return __memberSignature(this, memberName, emscriptenFormat);\n          }),\n          memoryDump: rop(__memoryDump),\n          pointer: __ptrPropDescriptor,\n          setMemberCString: rop(function (memberName, str) {\n            return __setMemberCString(this, memberName, str);\n          }),\n        });\n\n        Object.assign(StructType.prototype, {\n          addOnDispose: function (...v) {\n            __addOnDispose(this, ...v);\n            return this;\n          },\n        });\n\n        Object.defineProperties(StructType, {\n          allocCString: rop(__allocCString),\n          isA: rop((v) => v instanceof StructType),\n          hasExternalPointer: rop(\n            (v) => v instanceof StructType && !!v[xPtrPropName],\n          ),\n          memberKey: __memberKeyProp,\n        });\n\n        const isNumericValue = (v) =>\n          Number.isFinite(v) || v instanceof (BigInt || Number);\n\n        const makeMemberWrapper = function f(ctor, name, descr) {\n          if (!f._) {\n            f._ = { getters: {}, setters: {}, sw: {} };\n            const a = ['i', 'c', 'C', 'p', 'P', 's', 'f', 'd', 'v()'];\n            if (bigIntEnabled) a.push('j');\n            a.forEach(function (v) {\n              f._.getters[v] = sigDVGetter(v);\n              f._.setters[v] = sigDVSetter(v);\n              f._.sw[v] = sigDVSetWrapper(v);\n            });\n            const rxSig1 = /^[ipPsjfdcC]$/,\n              rxSig2 = /^[vipPsjfdcC]\\([ipPsjfdcC]*\\)$/;\n            f.sigCheck = function (obj, name, key, sig) {\n              if (Object.prototype.hasOwnProperty.call(obj, key)) {\n                toss(obj.structName, 'already has a property named', key + '.');\n              }\n              rxSig1.test(sig) ||\n                rxSig2.test(sig) ||\n                toss(\n                  'Malformed signature for',\n                  sPropName(obj.structName, name) + ':',\n                  sig,\n                );\n            };\n          }\n          const key = ctor.memberKey(name);\n          f.sigCheck(ctor.prototype, name, key, descr.signature);\n          descr.key = key;\n          descr.name = name;\n          const sigGlyph = sigLetter(descr.signature);\n          const xPropName = sPropName(ctor.prototype.structName, key);\n          const dbg = ctor.prototype.debugFlags.__flags;\n\n          const prop = Object.create(null);\n          prop.configurable = false;\n          prop.enumerable = false;\n          prop.get = function () {\n            if (dbg.getter) {\n              log(\n                'debug.getter:',\n                f._.getters[sigGlyph],\n                'for',\n                sigIR(sigGlyph),\n                xPropName,\n                '@',\n                this.pointer,\n                '+',\n                descr.offset,\n                'sz',\n                descr.sizeof,\n              );\n            }\n            let rc = new DataView(\n              heap().buffer,\n              this.pointer + descr.offset,\n              descr.sizeof,\n            )[f._.getters[sigGlyph]](0, isLittleEndian);\n            if (dbg.getter) log('debug.getter:', xPropName, 'result =', rc);\n            return rc;\n          };\n          if (descr.readOnly) {\n            prop.set = __propThrowOnSet(ctor.prototype.structName, key);\n          } else {\n            prop.set = function (v) {\n              if (dbg.setter) {\n                log(\n                  'debug.setter:',\n                  f._.setters[sigGlyph],\n                  'for',\n                  sigIR(sigGlyph),\n                  xPropName,\n                  '@',\n                  this.pointer,\n                  '+',\n                  descr.offset,\n                  'sz',\n                  descr.sizeof,\n                  v,\n                );\n              }\n              if (!this.pointer) {\n                toss('Cannot set struct property on disposed instance.');\n              }\n              if (null === v) v = 0;\n              else\n                while (!isNumericValue(v)) {\n                  if (\n                    isAutoPtrSig(descr.signature) &&\n                    v instanceof StructType\n                  ) {\n                    v = v.pointer || 0;\n                    if (dbg.setter)\n                      log('debug.setter:', xPropName, 'resolved to', v);\n                    break;\n                  }\n                  toss('Invalid value for pointer-type', xPropName + '.');\n                }\n              new DataView(\n                heap().buffer,\n                this.pointer + descr.offset,\n                descr.sizeof,\n              )[f._.setters[sigGlyph]](0, f._.sw[sigGlyph](v), isLittleEndian);\n            };\n          }\n          Object.defineProperty(ctor.prototype, key, prop);\n        };\n\n        const StructBinder = function StructBinder(structName, structInfo) {\n          if (1 === arguments.length) {\n            structInfo = structName;\n            structName = structInfo.name;\n          } else if (!structInfo.name) {\n            structInfo.name = structName;\n          }\n          if (!structName) toss('Struct name is required.');\n          let lastMember = false;\n          Object.keys(structInfo.members).forEach((k) => {\n            const m = structInfo.members[k];\n            if (!m.sizeof) toss(structName, 'member', k, 'is missing sizeof.');\n            else if (m.sizeof === 1) {\n              m.signature === 'c' ||\n                m.signature === 'C' ||\n                toss(\n                  'Unexpected sizeof==1 member',\n                  sPropName(structInfo.name, k),\n                  'with signature',\n                  m.signature,\n                );\n            } else {\n              if (0 !== m.sizeof % 4) {\n                console.warn(\n                  'Invalid struct member description =',\n                  m,\n                  'from',\n                  structInfo,\n                );\n                toss(\n                  structName,\n                  'member',\n                  k,\n                  'sizeof is not aligned. sizeof=' + m.sizeof,\n                );\n              }\n              if (0 !== m.offset % 4) {\n                console.warn(\n                  'Invalid struct member description =',\n                  m,\n                  'from',\n                  structInfo,\n                );\n                toss(\n                  structName,\n                  'member',\n                  k,\n                  'offset is not aligned. offset=' + m.offset,\n                );\n              }\n            }\n            if (!lastMember || lastMember.offset < m.offset) lastMember = m;\n          });\n          if (!lastMember) toss('No member property descriptions found.');\n          else if (structInfo.sizeof < lastMember.offset + lastMember.sizeof) {\n            toss(\n              'Invalid struct config:',\n              structName,\n              'max member offset (' + lastMember.offset + ') ',\n              'extends past end of struct (sizeof=' + structInfo.sizeof + ').',\n            );\n          }\n          const debugFlags = rop(SBF.__makeDebugFlags(StructBinder.debugFlags));\n\n          const StructCtor = function StructCtor(externalMemory) {\n            if (!(this instanceof StructCtor)) {\n              toss(\n                'The',\n                structName,\n                \"constructor may only be called via 'new'.\",\n              );\n            } else if (arguments.length) {\n              if (\n                externalMemory !== (externalMemory | 0) ||\n                externalMemory <= 0\n              ) {\n                toss('Invalid pointer value for', structName, 'constructor.');\n              }\n              __allocStruct(StructCtor, this, externalMemory);\n            } else {\n              __allocStruct(StructCtor, this);\n            }\n          };\n          Object.defineProperties(StructCtor, {\n            debugFlags: debugFlags,\n            isA: rop((v) => v instanceof StructCtor),\n            memberKey: __memberKeyProp,\n            memberKeys: __structMemberKeys,\n            methodInfoForKey: rop(function (mKey) {}),\n            structInfo: rop(structInfo),\n            structName: rop(structName),\n          });\n          StructCtor.prototype = new StructType(structName, structInfo, rop);\n          Object.defineProperties(StructCtor.prototype, {\n            debugFlags: debugFlags,\n            constructor: rop(StructCtor),\n          });\n          Object.keys(structInfo.members).forEach((name) =>\n            makeMemberWrapper(StructCtor, name, structInfo.members[name]),\n          );\n          return StructCtor;\n        };\n        StructBinder.StructType = StructType;\n        StructBinder.config = config;\n        StructBinder.allocCString = __allocCString;\n        if (!StructBinder.debugFlags) {\n          StructBinder.debugFlags = SBF.__makeDebugFlags(SBF.debugFlags);\n        }\n        return StructBinder;\n      };\n\n      globalThis.sqlite3ApiBootstrap.initializers.push(function (sqlite3) {\n        'use strict';\n        const toss = (...args) => {\n          throw new Error(args.join(' '));\n        };\n        const toss3 = sqlite3.SQLite3Error.toss;\n        const capi = sqlite3.capi,\n          wasm = sqlite3.wasm,\n          util = sqlite3.util;\n        globalThis.WhWasmUtilInstaller(wasm);\n        delete globalThis.WhWasmUtilInstaller;\n\n        if (false) {}\n\n        wasm.bindingSignatures = [\n          ['sqlite3_aggregate_context', 'void*', 'sqlite3_context*', 'int'],\n\n          ['sqlite3_bind_double', 'int', 'sqlite3_stmt*', 'int', 'f64'],\n          ['sqlite3_bind_int', 'int', 'sqlite3_stmt*', 'int', 'int'],\n          ['sqlite3_bind_null', undefined, 'sqlite3_stmt*', 'int'],\n          ['sqlite3_bind_parameter_count', 'int', 'sqlite3_stmt*'],\n          ['sqlite3_bind_parameter_index', 'int', 'sqlite3_stmt*', 'string'],\n          ['sqlite3_bind_parameter_name', 'string', 'sqlite3_stmt*', 'int'],\n          [\n            'sqlite3_bind_pointer',\n            'int',\n            'sqlite3_stmt*',\n            'int',\n            '*',\n            'string:static',\n            '*',\n          ],\n          [\n            'sqlite3_busy_handler',\n            'int',\n            [\n              'sqlite3*',\n              new wasm.xWrap.FuncPtrAdapter({\n                signature: 'i(pi)',\n                contextKey: (argv, argIndex) => argv[0],\n              }),\n              '*',\n            ],\n          ],\n          ['sqlite3_busy_timeout', 'int', 'sqlite3*', 'int'],\n\n          ['sqlite3_changes', 'int', 'sqlite3*'],\n          ['sqlite3_clear_bindings', 'int', 'sqlite3_stmt*'],\n          ['sqlite3_collation_needed', 'int', 'sqlite3*', '*', '*'],\n          ['sqlite3_column_blob', '*', 'sqlite3_stmt*', 'int'],\n          ['sqlite3_column_bytes', 'int', 'sqlite3_stmt*', 'int'],\n          ['sqlite3_column_count', 'int', 'sqlite3_stmt*'],\n          ['sqlite3_column_decltype', 'string', 'sqlite3_stmt*', 'int'],\n          ['sqlite3_column_double', 'f64', 'sqlite3_stmt*', 'int'],\n          ['sqlite3_column_int', 'int', 'sqlite3_stmt*', 'int'],\n          ['sqlite3_column_name', 'string', 'sqlite3_stmt*', 'int'],\n          ['sqlite3_column_text', 'string', 'sqlite3_stmt*', 'int'],\n          ['sqlite3_column_type', 'int', 'sqlite3_stmt*', 'int'],\n          ['sqlite3_column_value', 'sqlite3_value*', 'sqlite3_stmt*', 'int'],\n          [\n            'sqlite3_commit_hook',\n            'void*',\n            [\n              'sqlite3*',\n              new wasm.xWrap.FuncPtrAdapter({\n                name: 'sqlite3_commit_hook',\n                signature: 'i(p)',\n                contextKey: (argv) => argv[0],\n              }),\n              '*',\n            ],\n          ],\n          ['sqlite3_compileoption_get', 'string', 'int'],\n          ['sqlite3_compileoption_used', 'int', 'string'],\n          ['sqlite3_complete', 'int', 'string:flexible'],\n          ['sqlite3_context_db_handle', 'sqlite3*', 'sqlite3_context*'],\n\n          ['sqlite3_data_count', 'int', 'sqlite3_stmt*'],\n          ['sqlite3_db_filename', 'string', 'sqlite3*', 'string'],\n          ['sqlite3_db_handle', 'sqlite3*', 'sqlite3_stmt*'],\n          ['sqlite3_db_name', 'string', 'sqlite3*', 'int'],\n          ['sqlite3_db_readonly', 'int', 'sqlite3*', 'string'],\n          ['sqlite3_db_status', 'int', 'sqlite3*', 'int', '*', '*', 'int'],\n          ['sqlite3_errcode', 'int', 'sqlite3*'],\n          ['sqlite3_errmsg', 'string', 'sqlite3*'],\n          ['sqlite3_error_offset', 'int', 'sqlite3*'],\n          ['sqlite3_errstr', 'string', 'int'],\n          [\n            'sqlite3_exec',\n            'int',\n            [\n              'sqlite3*',\n              'string:flexible',\n              new wasm.xWrap.FuncPtrAdapter({\n                signature: 'i(pipp)',\n                bindScope: 'transient',\n                callProxy: (callback) => {\n                  let aNames;\n                  return (pVoid, nCols, pColVals, pColNames) => {\n                    try {\n                      const aVals = wasm.cArgvToJs(nCols, pColVals);\n                      if (!aNames) aNames = wasm.cArgvToJs(nCols, pColNames);\n                      return callback(aVals, aNames) | 0;\n                    } catch (e) {\n                      return e.resultCode || capi.SQLITE_ERROR;\n                    }\n                  };\n                },\n              }),\n              '*',\n              '**',\n            ],\n          ],\n          ['sqlite3_expanded_sql', 'string', 'sqlite3_stmt*'],\n          ['sqlite3_extended_errcode', 'int', 'sqlite3*'],\n          ['sqlite3_extended_result_codes', 'int', 'sqlite3*', 'int'],\n          ['sqlite3_file_control', 'int', 'sqlite3*', 'string', 'int', '*'],\n          ['sqlite3_finalize', 'int', 'sqlite3_stmt*'],\n          ['sqlite3_free', undefined, '*'],\n          ['sqlite3_get_autocommit', 'int', 'sqlite3*'],\n          ['sqlite3_get_auxdata', '*', 'sqlite3_context*', 'int'],\n          ['sqlite3_initialize', undefined],\n          ['sqlite3_interrupt', undefined, 'sqlite3*'],\n          ['sqlite3_is_interrupted', 'int', 'sqlite3*'],\n          ['sqlite3_keyword_count', 'int'],\n          ['sqlite3_keyword_name', 'int', ['int', '**', '*']],\n          ['sqlite3_keyword_check', 'int', ['string', 'int']],\n          ['sqlite3_libversion', 'string'],\n          ['sqlite3_libversion_number', 'int'],\n          ['sqlite3_limit', 'int', ['sqlite3*', 'int', 'int']],\n          ['sqlite3_malloc', '*', 'int'],\n          ['sqlite3_open', 'int', 'string', '*'],\n          ['sqlite3_open_v2', 'int', 'string', '*', 'int', 'string'],\n\n          ['sqlite3_realloc', '*', '*', 'int'],\n          ['sqlite3_reset', 'int', 'sqlite3_stmt*'],\n\n          [\n            'sqlite3_result_blob',\n            undefined,\n            'sqlite3_context*',\n            '*',\n            'int',\n            '*',\n          ],\n          ['sqlite3_result_double', undefined, 'sqlite3_context*', 'f64'],\n          [\n            'sqlite3_result_error',\n            undefined,\n            'sqlite3_context*',\n            'string',\n            'int',\n          ],\n          ['sqlite3_result_error_code', undefined, 'sqlite3_context*', 'int'],\n          ['sqlite3_result_error_nomem', undefined, 'sqlite3_context*'],\n          ['sqlite3_result_error_toobig', undefined, 'sqlite3_context*'],\n          ['sqlite3_result_int', undefined, 'sqlite3_context*', 'int'],\n          ['sqlite3_result_null', undefined, 'sqlite3_context*'],\n          [\n            'sqlite3_result_pointer',\n            undefined,\n            'sqlite3_context*',\n            '*',\n            'string:static',\n            '*',\n          ],\n          ['sqlite3_result_subtype', undefined, 'sqlite3_value*', 'int'],\n          [\n            'sqlite3_result_text',\n            undefined,\n            'sqlite3_context*',\n            'string',\n            'int',\n            '*',\n          ],\n          ['sqlite3_result_zeroblob', undefined, 'sqlite3_context*', 'int'],\n          [\n            'sqlite3_rollback_hook',\n            'void*',\n            [\n              'sqlite3*',\n              new wasm.xWrap.FuncPtrAdapter({\n                name: 'sqlite3_rollback_hook',\n                signature: 'v(p)',\n                contextKey: (argv) => argv[0],\n              }),\n              '*',\n            ],\n          ],\n\n          [\n            'sqlite3_set_auxdata',\n            undefined,\n            [\n              'sqlite3_context*',\n              'int',\n              '*',\n               true\n                ? '*'\n                : 0,\n            ],\n          ],\n          ['sqlite3_shutdown', undefined],\n          ['sqlite3_sourceid', 'string'],\n          ['sqlite3_sql', 'string', 'sqlite3_stmt*'],\n          ['sqlite3_status', 'int', 'int', '*', '*', 'int'],\n          ['sqlite3_step', 'int', 'sqlite3_stmt*'],\n          ['sqlite3_stmt_busy', 'int', 'sqlite3_stmt*'],\n          ['sqlite3_stmt_readonly', 'int', 'sqlite3_stmt*'],\n          ['sqlite3_stmt_status', 'int', 'sqlite3_stmt*', 'int', 'int'],\n          ['sqlite3_strglob', 'int', 'string', 'string'],\n          ['sqlite3_stricmp', 'int', 'string', 'string'],\n          ['sqlite3_strlike', 'int', 'string', 'string', 'int'],\n          ['sqlite3_strnicmp', 'int', 'string', 'string', 'int'],\n          [\n            'sqlite3_table_column_metadata',\n            'int',\n            'sqlite3*',\n            'string',\n            'string',\n            'string',\n            '**',\n            '**',\n            '*',\n            '*',\n            '*',\n          ],\n          ['sqlite3_total_changes', 'int', 'sqlite3*'],\n          [\n            'sqlite3_trace_v2',\n            'int',\n            [\n              'sqlite3*',\n              'int',\n              new wasm.xWrap.FuncPtrAdapter({\n                name: 'sqlite3_trace_v2::callback',\n                signature: 'i(ippp)',\n                contextKey: (argv, argIndex) => argv[0],\n              }),\n              '*',\n            ],\n          ],\n          ['sqlite3_txn_state', 'int', ['sqlite3*', 'string']],\n\n          ['sqlite3_uri_boolean', 'int', 'sqlite3_filename', 'string', 'int'],\n          ['sqlite3_uri_key', 'string', 'sqlite3_filename', 'int'],\n          ['sqlite3_uri_parameter', 'string', 'sqlite3_filename', 'string'],\n          ['sqlite3_user_data', 'void*', 'sqlite3_context*'],\n          ['sqlite3_value_blob', '*', 'sqlite3_value*'],\n          ['sqlite3_value_bytes', 'int', 'sqlite3_value*'],\n          ['sqlite3_value_double', 'f64', 'sqlite3_value*'],\n          ['sqlite3_value_dup', 'sqlite3_value*', 'sqlite3_value*'],\n          ['sqlite3_value_free', undefined, 'sqlite3_value*'],\n          ['sqlite3_value_frombind', 'int', 'sqlite3_value*'],\n          ['sqlite3_value_int', 'int', 'sqlite3_value*'],\n          ['sqlite3_value_nochange', 'int', 'sqlite3_value*'],\n          ['sqlite3_value_numeric_type', 'int', 'sqlite3_value*'],\n          ['sqlite3_value_pointer', '*', 'sqlite3_value*', 'string:static'],\n          ['sqlite3_value_subtype', 'int', 'sqlite3_value*'],\n          ['sqlite3_value_text', 'string', 'sqlite3_value*'],\n          ['sqlite3_value_type', 'int', 'sqlite3_value*'],\n          ['sqlite3_vfs_find', '*', 'string'],\n          ['sqlite3_vfs_register', 'int', 'sqlite3_vfs*', 'int'],\n          ['sqlite3_vfs_unregister', 'int', 'sqlite3_vfs*'],\n        ];\n\n        if (!!wasm.exports.sqlite3_progress_handler) {\n          wasm.bindingSignatures.push([\n            'sqlite3_progress_handler',\n            undefined,\n            [\n              'sqlite3*',\n              'int',\n              new wasm.xWrap.FuncPtrAdapter({\n                name: 'xProgressHandler',\n                signature: 'i(p)',\n                bindScope: 'context',\n                contextKey: (argv, argIndex) => argv[0],\n              }),\n              '*',\n            ],\n          ]);\n        }\n\n        if (!!wasm.exports.sqlite3_stmt_explain) {\n          wasm.bindingSignatures.push(\n            ['sqlite3_stmt_explain', 'int', 'sqlite3_stmt*', 'int'],\n            ['sqlite3_stmt_isexplain', 'int', 'sqlite3_stmt*'],\n          );\n        }\n\n        if (!!wasm.exports.sqlite3_set_authorizer) {\n          wasm.bindingSignatures.push([\n            'sqlite3_set_authorizer',\n            'int',\n            [\n              'sqlite3*',\n              new wasm.xWrap.FuncPtrAdapter({\n                name: 'sqlite3_set_authorizer::xAuth',\n                signature: 'i(pi' + 'ssss)',\n                contextKey: (argv, argIndex) => argv[0],\n                callProxy: (callback) => {\n                  return (pV, iCode, s0, s1, s2, s3) => {\n                    try {\n                      s0 = s0 && wasm.cstrToJs(s0);\n                      s1 = s1 && wasm.cstrToJs(s1);\n                      s2 = s2 && wasm.cstrToJs(s2);\n                      s3 = s3 && wasm.cstrToJs(s3);\n                      return callback(pV, iCode, s0, s1, s2, s3) || 0;\n                    } catch (e) {\n                      return e.resultCode || capi.SQLITE_ERROR;\n                    }\n                  };\n                },\n              }),\n              '*',\n            ],\n          ]);\n        }\n\n        if (false) {}\n\n        wasm.bindingSignatures.int64 = [\n          ['sqlite3_bind_int64', 'int', ['sqlite3_stmt*', 'int', 'i64']],\n          ['sqlite3_changes64', 'i64', ['sqlite3*']],\n          ['sqlite3_column_int64', 'i64', ['sqlite3_stmt*', 'int']],\n          [\n            'sqlite3_deserialize',\n            'int',\n            'sqlite3*',\n            'string',\n            '*',\n            'i64',\n            'i64',\n            'int',\n          ],\n          ['sqlite3_last_insert_rowid', 'i64', ['sqlite3*']],\n          ['sqlite3_malloc64', '*', 'i64'],\n          ['sqlite3_msize', 'i64', '*'],\n          ['sqlite3_overload_function', 'int', ['sqlite3*', 'string', 'int']],\n          ['sqlite3_realloc64', '*', '*', 'i64'],\n          ['sqlite3_result_int64', undefined, '*', 'i64'],\n          ['sqlite3_result_zeroblob64', 'int', '*', 'i64'],\n          ['sqlite3_serialize', '*', 'sqlite3*', 'string', '*', 'int'],\n          ['sqlite3_set_last_insert_rowid', undefined, ['sqlite3*', 'i64']],\n          ['sqlite3_status64', 'int', 'int', '*', '*', 'int'],\n          ['sqlite3_total_changes64', 'i64', ['sqlite3*']],\n          [\n            'sqlite3_update_hook',\n            '*',\n            [\n              'sqlite3*',\n              new wasm.xWrap.FuncPtrAdapter({\n                name: 'sqlite3_update_hook',\n                signature: 'v(iippj)',\n                contextKey: (argv) => argv[0],\n                callProxy: (callback) => {\n                  return (p, op, z0, z1, rowid) => {\n                    callback(\n                      p,\n                      op,\n                      wasm.cstrToJs(z0),\n                      wasm.cstrToJs(z1),\n                      rowid,\n                    );\n                  };\n                },\n              }),\n              '*',\n            ],\n          ],\n          ['sqlite3_uri_int64', 'i64', ['sqlite3_filename', 'string', 'i64']],\n          ['sqlite3_value_int64', 'i64', 'sqlite3_value*'],\n        ];\n\n        if (wasm.bigIntEnabled && !!wasm.exports.sqlite3_declare_vtab) {\n          wasm.bindingSignatures.int64.push(\n            [\n              'sqlite3_create_module',\n              'int',\n              ['sqlite3*', 'string', 'sqlite3_module*', '*'],\n            ],\n            [\n              'sqlite3_create_module_v2',\n              'int',\n              ['sqlite3*', 'string', 'sqlite3_module*', '*', '*'],\n            ],\n            ['sqlite3_declare_vtab', 'int', ['sqlite3*', 'string:flexible']],\n            ['sqlite3_drop_modules', 'int', ['sqlite3*', '**']],\n            ['sqlite3_vtab_collation', 'string', 'sqlite3_index_info*', 'int'],\n            ['sqlite3_vtab_distinct', 'int', 'sqlite3_index_info*'],\n            ['sqlite3_vtab_in', 'int', 'sqlite3_index_info*', 'int', 'int'],\n            ['sqlite3_vtab_in_first', 'int', 'sqlite3_value*', '**'],\n            ['sqlite3_vtab_in_next', 'int', 'sqlite3_value*', '**'],\n\n            ['sqlite3_vtab_nochange', 'int', 'sqlite3_context*'],\n            ['sqlite3_vtab_on_conflict', 'int', 'sqlite3*'],\n            [\n              'sqlite3_vtab_rhs_value',\n              'int',\n              'sqlite3_index_info*',\n              'int',\n              '**',\n            ],\n          );\n        }\n\n        if (wasm.bigIntEnabled && !!wasm.exports.sqlite3_preupdate_hook) {\n          wasm.bindingSignatures.int64.push(\n            ['sqlite3_preupdate_blobwrite', 'int', 'sqlite3*'],\n            ['sqlite3_preupdate_count', 'int', 'sqlite3*'],\n            ['sqlite3_preupdate_depth', 'int', 'sqlite3*'],\n            [\n              'sqlite3_preupdate_hook',\n              '*',\n              [\n                'sqlite3*',\n                new wasm.xWrap.FuncPtrAdapter({\n                  name: 'sqlite3_preupdate_hook',\n                  signature: 'v(ppippjj)',\n                  contextKey: (argv) => argv[0],\n                  callProxy: (callback) => {\n                    return (p, db, op, zDb, zTbl, iKey1, iKey2) => {\n                      callback(\n                        p,\n                        db,\n                        op,\n                        wasm.cstrToJs(zDb),\n                        wasm.cstrToJs(zTbl),\n                        iKey1,\n                        iKey2,\n                      );\n                    };\n                  },\n                }),\n                '*',\n              ],\n            ],\n            ['sqlite3_preupdate_new', 'int', ['sqlite3*', 'int', '**']],\n            ['sqlite3_preupdate_old', 'int', ['sqlite3*', 'int', '**']],\n          );\n        }\n\n        if (\n          wasm.bigIntEnabled &&\n          !!wasm.exports.sqlite3changegroup_add &&\n          !!wasm.exports.sqlite3session_create &&\n          !!wasm.exports.sqlite3_preupdate_hook\n        ) {\n          const __ipsProxy = {\n            signature: 'i(ps)',\n            callProxy: (callback) => {\n              return (p, s) => {\n                try {\n                  return callback(p, wasm.cstrToJs(s)) | 0;\n                } catch (e) {\n                  return e.resultCode || capi.SQLITE_ERROR;\n                }\n              };\n            },\n          };\n\n          wasm.bindingSignatures.int64.push(\n            ...[\n              [\n                'sqlite3changegroup_add',\n                'int',\n                ['sqlite3_changegroup*', 'int', 'void*'],\n              ],\n              [\n                'sqlite3changegroup_add_strm',\n                'int',\n                [\n                  'sqlite3_changegroup*',\n                  new wasm.xWrap.FuncPtrAdapter({\n                    name: 'xInput',\n                    signature: 'i(ppp)',\n                    bindScope: 'transient',\n                  }),\n                  'void*',\n                ],\n              ],\n              [\n                'sqlite3changegroup_delete',\n                undefined,\n                ['sqlite3_changegroup*'],\n              ],\n              ['sqlite3changegroup_new', 'int', ['**']],\n              [\n                'sqlite3changegroup_output',\n                'int',\n                ['sqlite3_changegroup*', 'int*', '**'],\n              ],\n              [\n                'sqlite3changegroup_output_strm',\n                'int',\n                [\n                  'sqlite3_changegroup*',\n                  new wasm.xWrap.FuncPtrAdapter({\n                    name: 'xOutput',\n                    signature: 'i(ppi)',\n                    bindScope: 'transient',\n                  }),\n                  'void*',\n                ],\n              ],\n              [\n                'sqlite3changeset_apply',\n                'int',\n                [\n                  'sqlite3*',\n                  'int',\n                  'void*',\n                  new wasm.xWrap.FuncPtrAdapter({\n                    name: 'xFilter',\n                    bindScope: 'transient',\n                    ...__ipsProxy,\n                  }),\n                  new wasm.xWrap.FuncPtrAdapter({\n                    name: 'xConflict',\n                    signature: 'i(pip)',\n                    bindScope: 'transient',\n                  }),\n                  'void*',\n                ],\n              ],\n              [\n                'sqlite3changeset_apply_strm',\n                'int',\n                [\n                  'sqlite3*',\n                  new wasm.xWrap.FuncPtrAdapter({\n                    name: 'xInput',\n                    signature: 'i(ppp)',\n                    bindScope: 'transient',\n                  }),\n                  'void*',\n                  new wasm.xWrap.FuncPtrAdapter({\n                    name: 'xFilter',\n                    bindScope: 'transient',\n                    ...__ipsProxy,\n                  }),\n                  new wasm.xWrap.FuncPtrAdapter({\n                    name: 'xConflict',\n                    signature: 'i(pip)',\n                    bindScope: 'transient',\n                  }),\n                  'void*',\n                ],\n              ],\n              [\n                'sqlite3changeset_apply_v2',\n                'int',\n                [\n                  'sqlite3*',\n                  'int',\n                  'void*',\n                  new wasm.xWrap.FuncPtrAdapter({\n                    name: 'xFilter',\n                    bindScope: 'transient',\n                    ...__ipsProxy,\n                  }),\n                  new wasm.xWrap.FuncPtrAdapter({\n                    name: 'xConflict',\n                    signature: 'i(pip)',\n                    bindScope: 'transient',\n                  }),\n                  'void*',\n                  '**',\n                  'int*',\n                  'int',\n                ],\n              ],\n              [\n                'sqlite3changeset_apply_v2_strm',\n                'int',\n                [\n                  'sqlite3*',\n                  new wasm.xWrap.FuncPtrAdapter({\n                    name: 'xInput',\n                    signature: 'i(ppp)',\n                    bindScope: 'transient',\n                  }),\n                  'void*',\n                  new wasm.xWrap.FuncPtrAdapter({\n                    name: 'xFilter',\n                    bindScope: 'transient',\n                    ...__ipsProxy,\n                  }),\n                  new wasm.xWrap.FuncPtrAdapter({\n                    name: 'xConflict',\n                    signature: 'i(pip)',\n                    bindScope: 'transient',\n                  }),\n                  'void*',\n                  '**',\n                  'int*',\n                  'int',\n                ],\n              ],\n              [\n                'sqlite3changeset_concat',\n                'int',\n                ['int', 'void*', 'int', 'void*', 'int*', '**'],\n              ],\n              [\n                'sqlite3changeset_concat_strm',\n                'int',\n                [\n                  new wasm.xWrap.FuncPtrAdapter({\n                    name: 'xInputA',\n                    signature: 'i(ppp)',\n                    bindScope: 'transient',\n                  }),\n                  'void*',\n                  new wasm.xWrap.FuncPtrAdapter({\n                    name: 'xInputB',\n                    signature: 'i(ppp)',\n                    bindScope: 'transient',\n                  }),\n                  'void*',\n                  new wasm.xWrap.FuncPtrAdapter({\n                    name: 'xOutput',\n                    signature: 'i(ppi)',\n                    bindScope: 'transient',\n                  }),\n                  'void*',\n                ],\n              ],\n              [\n                'sqlite3changeset_conflict',\n                'int',\n                ['sqlite3_changeset_iter*', 'int', '**'],\n              ],\n              ['sqlite3changeset_finalize', 'int', ['sqlite3_changeset_iter*']],\n              [\n                'sqlite3changeset_fk_conflicts',\n                'int',\n                ['sqlite3_changeset_iter*', 'int*'],\n              ],\n              [\n                'sqlite3changeset_invert',\n                'int',\n                ['int', 'void*', 'int*', '**'],\n              ],\n              [\n                'sqlite3changeset_invert_strm',\n                'int',\n                [\n                  new wasm.xWrap.FuncPtrAdapter({\n                    name: 'xInput',\n                    signature: 'i(ppp)',\n                    bindScope: 'transient',\n                  }),\n                  'void*',\n                  new wasm.xWrap.FuncPtrAdapter({\n                    name: 'xOutput',\n                    signature: 'i(ppi)',\n                    bindScope: 'transient',\n                  }),\n                  'void*',\n                ],\n              ],\n              [\n                'sqlite3changeset_new',\n                'int',\n                ['sqlite3_changeset_iter*', 'int', '**'],\n              ],\n              ['sqlite3changeset_next', 'int', ['sqlite3_changeset_iter*']],\n              [\n                'sqlite3changeset_old',\n                'int',\n                ['sqlite3_changeset_iter*', 'int', '**'],\n              ],\n              [\n                'sqlite3changeset_op',\n                'int',\n                ['sqlite3_changeset_iter*', '**', 'int*', 'int*', 'int*'],\n              ],\n              [\n                'sqlite3changeset_pk',\n                'int',\n                ['sqlite3_changeset_iter*', '**', 'int*'],\n              ],\n              ['sqlite3changeset_start', 'int', ['**', 'int', '*']],\n              [\n                'sqlite3changeset_start_strm',\n                'int',\n                [\n                  '**',\n                  new wasm.xWrap.FuncPtrAdapter({\n                    name: 'xInput',\n                    signature: 'i(ppp)',\n                    bindScope: 'transient',\n                  }),\n                  'void*',\n                ],\n              ],\n              ['sqlite3changeset_start_v2', 'int', ['**', 'int', '*', 'int']],\n              [\n                'sqlite3changeset_start_v2_strm',\n                'int',\n                [\n                  '**',\n                  new wasm.xWrap.FuncPtrAdapter({\n                    name: 'xInput',\n                    signature: 'i(ppp)',\n                    bindScope: 'transient',\n                  }),\n                  'void*',\n                  'int',\n                ],\n              ],\n              ['sqlite3session_attach', 'int', ['sqlite3_session*', 'string']],\n              [\n                'sqlite3session_changeset',\n                'int',\n                ['sqlite3_session*', 'int*', '**'],\n              ],\n              ['sqlite3session_changeset_size', 'i64', ['sqlite3_session*']],\n              [\n                'sqlite3session_changeset_strm',\n                'int',\n                [\n                  'sqlite3_session*',\n                  new wasm.xWrap.FuncPtrAdapter({\n                    name: 'xOutput',\n                    signature: 'i(ppp)',\n                    bindScope: 'transient',\n                  }),\n                  'void*',\n                ],\n              ],\n              ['sqlite3session_config', 'int', ['int', 'void*']],\n              ['sqlite3session_create', 'int', ['sqlite3*', 'string', '**']],\n\n              [\n                'sqlite3session_diff',\n                'int',\n                ['sqlite3_session*', 'string', 'string', '**'],\n              ],\n              ['sqlite3session_enable', 'int', ['sqlite3_session*', 'int']],\n              ['sqlite3session_indirect', 'int', ['sqlite3_session*', 'int']],\n              ['sqlite3session_isempty', 'int', ['sqlite3_session*']],\n              ['sqlite3session_memory_used', 'i64', ['sqlite3_session*']],\n              [\n                'sqlite3session_object_config',\n                'int',\n                ['sqlite3_session*', 'int', 'void*'],\n              ],\n              [\n                'sqlite3session_patchset',\n                'int',\n                ['sqlite3_session*', '*', '**'],\n              ],\n              [\n                'sqlite3session_patchset_strm',\n                'int',\n                [\n                  'sqlite3_session*',\n                  new wasm.xWrap.FuncPtrAdapter({\n                    name: 'xOutput',\n                    signature: 'i(ppp)',\n                    bindScope: 'transient',\n                  }),\n                  'void*',\n                ],\n              ],\n              [\n                'sqlite3session_table_filter',\n                undefined,\n                [\n                  'sqlite3_session*',\n                  new wasm.xWrap.FuncPtrAdapter({\n                    name: 'xFilter',\n                    ...__ipsProxy,\n                    contextKey: (argv, argIndex) => argv[0],\n                  }),\n                  '*',\n                ],\n              ],\n            ],\n          );\n        }\n\n        wasm.bindingSignatures.wasmInternal = [\n          ['sqlite3__wasm_db_reset', 'int', 'sqlite3*'],\n          ['sqlite3__wasm_db_vfs', 'sqlite3_vfs*', 'sqlite3*', 'string'],\n          [\n            'sqlite3__wasm_vfs_create_file',\n            'int',\n            'sqlite3_vfs*',\n            'string',\n            '*',\n            'int',\n          ],\n          ['sqlite3__wasm_posix_create_file', 'int', 'string', '*', 'int'],\n          ['sqlite3__wasm_vfs_unlink', 'int', 'sqlite3_vfs*', 'string'],\n          ['sqlite3__wasm_qfmt_token', 'string:dealloc', 'string', 'int'],\n        ];\n\n        sqlite3.StructBinder = globalThis.Jaccwabyt({\n          heap:  false ? 0 : wasm.heap8u,\n          alloc: wasm.alloc,\n          dealloc: wasm.dealloc,\n          bigIntEnabled: wasm.bigIntEnabled,\n          memberPrefix: '$',\n        });\n        delete globalThis.Jaccwabyt;\n\n        {\n          const __xString = wasm.xWrap.argAdapter('string');\n          wasm.xWrap.argAdapter('string:flexible', (v) =>\n            __xString(util.flexibleString(v)),\n          );\n\n          wasm.xWrap.argAdapter(\n            'string:static',\n            function (v) {\n              if (wasm.isPtr(v)) return v;\n              v = '' + v;\n              let rc = this[v];\n              return rc || (this[v] = wasm.allocCString(v));\n            }.bind(Object.create(null)),\n          );\n\n          const __xArgPtr = wasm.xWrap.argAdapter('*');\n          const nilType = function () {};\n          wasm.xWrap.argAdapter('sqlite3_filename', __xArgPtr)(\n            'sqlite3_context*',\n            __xArgPtr,\n          )('sqlite3_value*', __xArgPtr)('void*', __xArgPtr)(\n            'sqlite3_changegroup*',\n            __xArgPtr,\n          )('sqlite3_changeset_iter*', __xArgPtr)(\n            'sqlite3_session*',\n            __xArgPtr,\n          )('sqlite3_stmt*', (v) =>\n            __xArgPtr(\n              v instanceof (sqlite3?.oo1?.Stmt || nilType) ? v.pointer : v,\n            ),\n          )('sqlite3*', (v) =>\n            __xArgPtr(\n              v instanceof (sqlite3?.oo1?.DB || nilType) ? v.pointer : v,\n            ),\n          )('sqlite3_vfs*', (v) => {\n            if ('string' === typeof v) {\n              return (\n                capi.sqlite3_vfs_find(v) ||\n                sqlite3.SQLite3Error.toss(\n                  capi.SQLITE_NOTFOUND,\n                  'Unknown sqlite3_vfs name:',\n                  v,\n                )\n              );\n            }\n            return __xArgPtr(\n              v instanceof (capi.sqlite3_vfs || nilType) ? v.pointer : v,\n            );\n          });\n          if (wasm.exports.sqlite3_declare_vtab) {\n            wasm.xWrap.argAdapter('sqlite3_index_info*', (v) =>\n              __xArgPtr(\n                v instanceof (capi.sqlite3_index_info || nilType)\n                  ? v.pointer\n                  : v,\n              ),\n            )('sqlite3_module*', (v) =>\n              __xArgPtr(\n                v instanceof (capi.sqlite3_module || nilType) ? v.pointer : v,\n              ),\n            );\n          }\n\n          const __xRcPtr = wasm.xWrap.resultAdapter('*');\n          wasm.xWrap.resultAdapter('sqlite3*', __xRcPtr)(\n            'sqlite3_context*',\n            __xRcPtr,\n          )('sqlite3_stmt*', __xRcPtr)('sqlite3_value*', __xRcPtr)(\n            'sqlite3_vfs*',\n            __xRcPtr,\n          )('void*', __xRcPtr);\n\n          if (0 === wasm.exports.sqlite3_step.length) {\n            wasm.xWrap.doArgcCheck = false;\n            sqlite3.config.warn(\n              'Disabling sqlite3.wasm.xWrap.doArgcCheck due to environmental quirks.',\n            );\n          }\n          for (const e of wasm.bindingSignatures) {\n            capi[e[0]] = wasm.xWrap.apply(null, e);\n          }\n          for (const e of wasm.bindingSignatures.wasmInternal) {\n            util[e[0]] = wasm.xWrap.apply(null, e);\n          }\n\n          const fI64Disabled = function (fname) {\n            return () =>\n              toss(\n                fname + '() is unavailable due to lack',\n                'of BigInt support in this build.',\n              );\n          };\n          for (const e of wasm.bindingSignatures.int64) {\n            capi[e[0]] = wasm.bigIntEnabled\n              ? wasm.xWrap.apply(null, e)\n              : fI64Disabled(e[0]);\n          }\n\n          delete wasm.bindingSignatures;\n\n          if (wasm.exports.sqlite3__wasm_db_error) {\n            const __db_err = wasm.xWrap(\n              'sqlite3__wasm_db_error',\n              'int',\n              'sqlite3*',\n              'int',\n              'string',\n            );\n\n            util.sqlite3__wasm_db_error = function (pDb, resultCode, message) {\n              if (resultCode instanceof sqlite3.WasmAllocError) {\n                resultCode = capi.SQLITE_NOMEM;\n                message = 0;\n              } else if (resultCode instanceof Error) {\n                message = message || '' + resultCode;\n                resultCode = resultCode.resultCode || capi.SQLITE_ERROR;\n              }\n              return pDb ? __db_err(pDb, resultCode, message) : resultCode;\n            };\n          } else {\n            util.sqlite3__wasm_db_error = function (pDb, errCode, msg) {\n              console.warn(\n                'sqlite3__wasm_db_error() is not exported.',\n                arguments,\n              );\n              return errCode;\n            };\n          }\n        }\n\n        {\n          const cJson = wasm.xCall('sqlite3__wasm_enum_json');\n          if (!cJson) {\n            toss(\n              \"Maintenance required: increase sqlite3__wasm_enum_json()'s\",\n              'static buffer size!',\n            );\n          }\n\n          wasm.ctype = JSON.parse(wasm.cstrToJs(cJson));\n\n          const defineGroups = [\n            'access',\n            'authorizer',\n            'blobFinalizers',\n            'changeset',\n            'config',\n            'dataTypes',\n            'dbConfig',\n            'dbStatus',\n            'encodings',\n            'fcntl',\n            'flock',\n            'ioCap',\n            'limits',\n            'openFlags',\n            'prepareFlags',\n            'resultCodes',\n            'sqlite3Status',\n            'stmtStatus',\n            'syncFlags',\n            'trace',\n            'txnState',\n            'udfFlags',\n            'version',\n          ];\n          if (wasm.bigIntEnabled) {\n            defineGroups.push('serialize', 'session', 'vtab');\n          }\n          for (const t of defineGroups) {\n            for (const e of Object.entries(wasm.ctype[t])) {\n              capi[e[0]] = e[1];\n            }\n          }\n          if (!wasm.functionEntry(capi.SQLITE_WASM_DEALLOC)) {\n            toss(\n              'Internal error: cannot resolve exported function',\n              'entry SQLITE_WASM_DEALLOC (==' + capi.SQLITE_WASM_DEALLOC + ').',\n            );\n          }\n          const __rcMap = Object.create(null);\n          for (const t of ['resultCodes']) {\n            for (const e of Object.entries(wasm.ctype[t])) {\n              __rcMap[e[1]] = e[0];\n            }\n          }\n\n          capi.sqlite3_js_rc_str = (rc) => __rcMap[rc];\n\n          const notThese = Object.assign(Object.create(null), {\n            WasmTestStruct: true,\n\n            sqlite3_kvvfs_methods: !util.isUIThread(),\n\n            sqlite3_index_info: !wasm.bigIntEnabled,\n            sqlite3_index_constraint: !wasm.bigIntEnabled,\n            sqlite3_index_orderby: !wasm.bigIntEnabled,\n            sqlite3_index_constraint_usage: !wasm.bigIntEnabled,\n          });\n          for (const s of wasm.ctype.structs) {\n            if (!notThese[s.name]) {\n              capi[s.name] = sqlite3.StructBinder(s);\n            }\n          }\n          if (capi.sqlite3_index_info) {\n            for (const k of [\n              'sqlite3_index_constraint',\n              'sqlite3_index_orderby',\n              'sqlite3_index_constraint_usage',\n            ]) {\n              capi.sqlite3_index_info[k] = capi[k];\n              delete capi[k];\n            }\n            capi.sqlite3_vtab_config = wasm.xWrap(\n              'sqlite3__wasm_vtab_config',\n              'int',\n              ['sqlite3*', 'int', 'int'],\n            );\n          }\n        }\n\n        const __dbArgcMismatch = (pDb, f, n) => {\n          return util.sqlite3__wasm_db_error(\n            pDb,\n            capi.SQLITE_MISUSE,\n            f + '() requires ' + n + ' argument' + (1 === n ? '' : 's') + '.',\n          );\n        };\n\n        const __errEncoding = (pDb) => {\n          return util.sqlite3__wasm_db_error(\n            pDb,\n            capi.SQLITE_FORMAT,\n            'SQLITE_UTF8 is the only supported encoding.',\n          );\n        };\n\n        const __argPDb = (pDb) => wasm.xWrap.argAdapter('sqlite3*')(pDb);\n        const __argStr = (str) => (wasm.isPtr(str) ? wasm.cstrToJs(str) : str);\n        const __dbCleanupMap = function (pDb, mode) {\n          pDb = __argPDb(pDb);\n          let m = this.dbMap.get(pDb);\n          if (!mode) {\n            this.dbMap.delete(pDb);\n            return m;\n          } else if (!m && mode > 0) {\n            this.dbMap.set(pDb, (m = Object.create(null)));\n          }\n          return m;\n        }.bind(\n          Object.assign(Object.create(null), {\n            dbMap: new Map(),\n          }),\n        );\n\n        __dbCleanupMap.addCollation = function (pDb, name) {\n          const m = __dbCleanupMap(pDb, 1);\n          if (!m.collation) m.collation = new Set();\n          m.collation.add(__argStr(name).toLowerCase());\n        };\n\n        __dbCleanupMap._addUDF = function (pDb, name, arity, map) {\n          name = __argStr(name).toLowerCase();\n          let u = map.get(name);\n          if (!u) map.set(name, (u = new Set()));\n          u.add(arity < 0 ? -1 : arity);\n        };\n\n        __dbCleanupMap.addFunction = function (pDb, name, arity) {\n          const m = __dbCleanupMap(pDb, 1);\n          if (!m.udf) m.udf = new Map();\n          this._addUDF(pDb, name, arity, m.udf);\n        };\n\n        if (wasm.exports.sqlite3_create_window_function) {\n          __dbCleanupMap.addWindowFunc = function (pDb, name, arity) {\n            const m = __dbCleanupMap(pDb, 1);\n            if (!m.wudf) m.wudf = new Map();\n            this._addUDF(pDb, name, arity, m.wudf);\n          };\n        }\n\n        __dbCleanupMap.cleanup = function (pDb) {\n          pDb = __argPDb(pDb);\n\n          const closeArgs = [pDb];\n          for (const name of [\n            'sqlite3_busy_handler',\n            'sqlite3_commit_hook',\n            'sqlite3_preupdate_hook',\n            'sqlite3_progress_handler',\n            'sqlite3_rollback_hook',\n            'sqlite3_set_authorizer',\n            'sqlite3_trace_v2',\n            'sqlite3_update_hook',\n          ]) {\n            const x = wasm.exports[name];\n            if (!x) {\n              continue;\n            }\n            closeArgs.length = x.length;\n            try {\n              capi[name](...closeArgs);\n            } catch (e) {\n              sqlite3.config.warn(\n                'close-time call of',\n                name + '(',\n                closeArgs,\n                ') threw:',\n                e,\n              );\n            }\n          }\n          const m = __dbCleanupMap(pDb, 0);\n          if (!m) return;\n          if (m.collation) {\n            for (const name of m.collation) {\n              try {\n                capi.sqlite3_create_collation_v2(\n                  pDb,\n                  name,\n                  capi.SQLITE_UTF8,\n                  0,\n                  0,\n                  0,\n                );\n              } catch (e) {}\n            }\n            delete m.collation;\n          }\n          let i;\n          for (i = 0; i < 2; ++i) {\n            const fmap = i ? m.wudf : m.udf;\n            if (!fmap) continue;\n            const func = i\n              ? capi.sqlite3_create_window_function\n              : capi.sqlite3_create_function_v2;\n            for (const e of fmap) {\n              const name = e[0],\n                arities = e[1];\n              const fargs = [pDb, name, 0, capi.SQLITE_UTF8, 0, 0, 0, 0, 0];\n              if (i) fargs.push(0);\n              for (const arity of arities) {\n                try {\n                  fargs[2] = arity;\n                  func.apply(null, fargs);\n                } catch (e) {}\n              }\n              arities.clear();\n            }\n            fmap.clear();\n          }\n          delete m.udf;\n          delete m.wudf;\n        };\n\n        {\n          const __sqlite3CloseV2 = wasm.xWrap(\n            'sqlite3_close_v2',\n            'int',\n            'sqlite3*',\n          );\n          capi.sqlite3_close_v2 = function (pDb) {\n            if (1 !== arguments.length)\n              return __dbArgcMismatch(pDb, 'sqlite3_close_v2', 1);\n            if (pDb) {\n              try {\n                __dbCleanupMap.cleanup(pDb);\n              } catch (e) {}\n            }\n            return __sqlite3CloseV2(pDb);\n          };\n        }\n\n        if (capi.sqlite3session_create) {\n          const __sqlite3SessionDelete = wasm.xWrap(\n            'sqlite3session_delete',\n            undefined,\n            ['sqlite3_session*'],\n          );\n          capi.sqlite3session_delete = function (pSession) {\n            if (1 !== arguments.length) {\n              return __dbArgcMismatch(pDb, 'sqlite3session_delete', 1);\n            } else if (pSession) {\n              capi.sqlite3session_table_filter(pSession, 0, 0);\n            }\n            __sqlite3SessionDelete(pSession);\n          };\n        }\n\n        {\n          const contextKey = (argv, argIndex) => {\n            return (\n              'argv[' +\n              argIndex +\n              ']:' +\n              argv[0] +\n              ':' +\n              wasm.cstrToJs(argv[1]).toLowerCase()\n            );\n          };\n          const __sqlite3CreateCollationV2 = wasm.xWrap(\n            'sqlite3_create_collation_v2',\n            'int',\n            [\n              'sqlite3*',\n              'string',\n              'int',\n              '*',\n              new wasm.xWrap.FuncPtrAdapter({\n                name: 'xCompare',\n                signature: 'i(pipip)',\n                contextKey,\n              }),\n              new wasm.xWrap.FuncPtrAdapter({\n                name: 'xDestroy',\n                signature: 'v(p)',\n                contextKey,\n              }),\n            ],\n          );\n\n          capi.sqlite3_create_collation_v2 = function (\n            pDb,\n            zName,\n            eTextRep,\n            pArg,\n            xCompare,\n            xDestroy,\n          ) {\n            if (6 !== arguments.length)\n              return __dbArgcMismatch(pDb, 'sqlite3_create_collation_v2', 6);\n            else if (0 === (eTextRep & 0xf)) {\n              eTextRep |= capi.SQLITE_UTF8;\n            } else if (capi.SQLITE_UTF8 !== (eTextRep & 0xf)) {\n              return __errEncoding(pDb);\n            }\n            try {\n              const rc = __sqlite3CreateCollationV2(\n                pDb,\n                zName,\n                eTextRep,\n                pArg,\n                xCompare,\n                xDestroy,\n              );\n              if (0 === rc && xCompare instanceof Function) {\n                __dbCleanupMap.addCollation(pDb, zName);\n              }\n              return rc;\n            } catch (e) {\n              return util.sqlite3__wasm_db_error(pDb, e);\n            }\n          };\n\n          capi.sqlite3_create_collation = (\n            pDb,\n            zName,\n            eTextRep,\n            pArg,\n            xCompare,\n          ) => {\n            return 5 === arguments.length\n              ? capi.sqlite3_create_collation_v2(\n                  pDb,\n                  zName,\n                  eTextRep,\n                  pArg,\n                  xCompare,\n                  0,\n                )\n              : __dbArgcMismatch(pDb, 'sqlite3_create_collation', 5);\n          };\n        }\n\n        {\n          const contextKey = function (argv, argIndex) {\n            return (\n              argv[0] +\n              ':' +\n              (argv[2] < 0 ? -1 : argv[2]) +\n              ':' +\n              argIndex +\n              ':' +\n              wasm.cstrToJs(argv[1]).toLowerCase()\n            );\n          };\n\n          const __cfProxy = Object.assign(Object.create(null), {\n            xInverseAndStep: {\n              signature: 'v(pip)',\n              contextKey,\n              callProxy: (callback) => {\n                return (pCtx, argc, pArgv) => {\n                  try {\n                    callback(pCtx, ...capi.sqlite3_values_to_js(argc, pArgv));\n                  } catch (e) {\n                    capi.sqlite3_result_error_js(pCtx, e);\n                  }\n                };\n              },\n            },\n            xFinalAndValue: {\n              signature: 'v(p)',\n              contextKey,\n              callProxy: (callback) => {\n                return (pCtx) => {\n                  try {\n                    capi.sqlite3_result_js(pCtx, callback(pCtx));\n                  } catch (e) {\n                    capi.sqlite3_result_error_js(pCtx, e);\n                  }\n                };\n              },\n            },\n            xFunc: {\n              signature: 'v(pip)',\n              contextKey,\n              callProxy: (callback) => {\n                return (pCtx, argc, pArgv) => {\n                  try {\n                    capi.sqlite3_result_js(\n                      pCtx,\n                      callback(pCtx, ...capi.sqlite3_values_to_js(argc, pArgv)),\n                    );\n                  } catch (e) {\n                    capi.sqlite3_result_error_js(pCtx, e);\n                  }\n                };\n              },\n            },\n            xDestroy: {\n              signature: 'v(p)',\n              contextKey,\n\n              callProxy: (callback) => {\n                return (pVoid) => {\n                  try {\n                    callback(pVoid);\n                  } catch (e) {\n                    console.error('UDF xDestroy method threw:', e);\n                  }\n                };\n              },\n            },\n          });\n\n          const __sqlite3CreateFunction = wasm.xWrap(\n            'sqlite3_create_function_v2',\n            'int',\n            [\n              'sqlite3*',\n              'string',\n              'int',\n              'int',\n              '*',\n              new wasm.xWrap.FuncPtrAdapter({\n                name: 'xFunc',\n                ...__cfProxy.xFunc,\n              }),\n              new wasm.xWrap.FuncPtrAdapter({\n                name: 'xStep',\n                ...__cfProxy.xInverseAndStep,\n              }),\n              new wasm.xWrap.FuncPtrAdapter({\n                name: 'xFinal',\n                ...__cfProxy.xFinalAndValue,\n              }),\n              new wasm.xWrap.FuncPtrAdapter({\n                name: 'xDestroy',\n                ...__cfProxy.xDestroy,\n              }),\n            ],\n          );\n\n          const __sqlite3CreateWindowFunction = wasm.exports\n            .sqlite3_create_window_function\n            ? wasm.xWrap('sqlite3_create_window_function', 'int', [\n                'sqlite3*',\n                'string',\n                'int',\n                'int',\n                '*',\n                new wasm.xWrap.FuncPtrAdapter({\n                  name: 'xStep',\n                  ...__cfProxy.xInverseAndStep,\n                }),\n                new wasm.xWrap.FuncPtrAdapter({\n                  name: 'xFinal',\n                  ...__cfProxy.xFinalAndValue,\n                }),\n                new wasm.xWrap.FuncPtrAdapter({\n                  name: 'xValue',\n                  ...__cfProxy.xFinalAndValue,\n                }),\n                new wasm.xWrap.FuncPtrAdapter({\n                  name: 'xInverse',\n                  ...__cfProxy.xInverseAndStep,\n                }),\n                new wasm.xWrap.FuncPtrAdapter({\n                  name: 'xDestroy',\n                  ...__cfProxy.xDestroy,\n                }),\n              ])\n            : undefined;\n\n          capi.sqlite3_create_function_v2 = function f(\n            pDb,\n            funcName,\n            nArg,\n            eTextRep,\n            pApp,\n            xFunc,\n            xStep,\n            xFinal,\n            xDestroy,\n          ) {\n            if (f.length !== arguments.length) {\n              return __dbArgcMismatch(\n                pDb,\n                'sqlite3_create_function_v2',\n                f.length,\n              );\n            } else if (0 === (eTextRep & 0xf)) {\n              eTextRep |= capi.SQLITE_UTF8;\n            } else if (capi.SQLITE_UTF8 !== (eTextRep & 0xf)) {\n              return __errEncoding(pDb);\n            }\n            try {\n              const rc = __sqlite3CreateFunction(\n                pDb,\n                funcName,\n                nArg,\n                eTextRep,\n                pApp,\n                xFunc,\n                xStep,\n                xFinal,\n                xDestroy,\n              );\n              if (\n                0 === rc &&\n                (xFunc instanceof Function ||\n                  xStep instanceof Function ||\n                  xFinal instanceof Function ||\n                  xDestroy instanceof Function)\n              ) {\n                __dbCleanupMap.addFunction(pDb, funcName, nArg);\n              }\n              return rc;\n            } catch (e) {\n              console.error('sqlite3_create_function_v2() setup threw:', e);\n              return util.sqlite3__wasm_db_error(\n                pDb,\n                e,\n                'Creation of UDF threw: ' + e,\n              );\n            }\n          };\n\n          capi.sqlite3_create_function = function f(\n            pDb,\n            funcName,\n            nArg,\n            eTextRep,\n            pApp,\n            xFunc,\n            xStep,\n            xFinal,\n          ) {\n            return f.length === arguments.length\n              ? capi.sqlite3_create_function_v2(\n                  pDb,\n                  funcName,\n                  nArg,\n                  eTextRep,\n                  pApp,\n                  xFunc,\n                  xStep,\n                  xFinal,\n                  0,\n                )\n              : __dbArgcMismatch(pDb, 'sqlite3_create_function', f.length);\n          };\n\n          if (__sqlite3CreateWindowFunction) {\n            capi.sqlite3_create_window_function = function f(\n              pDb,\n              funcName,\n              nArg,\n              eTextRep,\n              pApp,\n              xStep,\n              xFinal,\n              xValue,\n              xInverse,\n              xDestroy,\n            ) {\n              if (f.length !== arguments.length) {\n                return __dbArgcMismatch(\n                  pDb,\n                  'sqlite3_create_window_function',\n                  f.length,\n                );\n              } else if (0 === (eTextRep & 0xf)) {\n                eTextRep |= capi.SQLITE_UTF8;\n              } else if (capi.SQLITE_UTF8 !== (eTextRep & 0xf)) {\n                return __errEncoding(pDb);\n              }\n              try {\n                const rc = __sqlite3CreateWindowFunction(\n                  pDb,\n                  funcName,\n                  nArg,\n                  eTextRep,\n                  pApp,\n                  xStep,\n                  xFinal,\n                  xValue,\n                  xInverse,\n                  xDestroy,\n                );\n                if (\n                  0 === rc &&\n                  (xStep instanceof Function ||\n                    xFinal instanceof Function ||\n                    xValue instanceof Function ||\n                    xInverse instanceof Function ||\n                    xDestroy instanceof Function)\n                ) {\n                  __dbCleanupMap.addWindowFunc(pDb, funcName, nArg);\n                }\n                return rc;\n              } catch (e) {\n                console.error(\n                  'sqlite3_create_window_function() setup threw:',\n                  e,\n                );\n                return util.sqlite3__wasm_db_error(\n                  pDb,\n                  e,\n                  'Creation of UDF threw: ' + e,\n                );\n              }\n            };\n          } else {\n            delete capi.sqlite3_create_window_function;\n          }\n\n          capi.sqlite3_create_function_v2.udfSetResult =\n            capi.sqlite3_create_function.udfSetResult = capi.sqlite3_result_js;\n          if (capi.sqlite3_create_window_function) {\n            capi.sqlite3_create_window_function.udfSetResult =\n              capi.sqlite3_result_js;\n          }\n\n          capi.sqlite3_create_function_v2.udfConvertArgs =\n            capi.sqlite3_create_function.udfConvertArgs =\n              capi.sqlite3_values_to_js;\n          if (capi.sqlite3_create_window_function) {\n            capi.sqlite3_create_window_function.udfConvertArgs =\n              capi.sqlite3_values_to_js;\n          }\n\n          capi.sqlite3_create_function_v2.udfSetError =\n            capi.sqlite3_create_function.udfSetError =\n              capi.sqlite3_result_error_js;\n          if (capi.sqlite3_create_window_function) {\n            capi.sqlite3_create_window_function.udfSetError =\n              capi.sqlite3_result_error_js;\n          }\n        }\n\n        {\n          const __flexiString = (v, n) => {\n            if ('string' === typeof v) {\n              n = -1;\n            } else if (util.isSQLableTypedArray(v)) {\n              n = v.byteLength;\n              v = util.typedArrayToString(\n                v instanceof ArrayBuffer ? new Uint8Array(v) : v,\n              );\n            } else if (Array.isArray(v)) {\n              v = v.join('');\n              n = -1;\n            }\n            return [v, n];\n          };\n\n          const __prepare = {\n            basic: wasm.xWrap('sqlite3_prepare_v3', 'int', [\n              'sqlite3*',\n              'string',\n              'int',\n              'int',\n              '**',\n              '**',\n            ]),\n\n            full: wasm.xWrap('sqlite3_prepare_v3', 'int', [\n              'sqlite3*',\n              '*',\n              'int',\n              'int',\n              '**',\n              '**',\n            ]),\n          };\n\n          capi.sqlite3_prepare_v3 = function f(\n            pDb,\n            sql,\n            sqlLen,\n            prepFlags,\n            ppStmt,\n            pzTail,\n          ) {\n            if (f.length !== arguments.length) {\n              return __dbArgcMismatch(pDb, 'sqlite3_prepare_v3', f.length);\n            }\n            const [xSql, xSqlLen] = __flexiString(sql, sqlLen);\n            switch (typeof xSql) {\n              case 'string':\n                return __prepare.basic(\n                  pDb,\n                  xSql,\n                  xSqlLen,\n                  prepFlags,\n                  ppStmt,\n                  null,\n                );\n              case 'number':\n                return __prepare.full(\n                  pDb,\n                  xSql,\n                  xSqlLen,\n                  prepFlags,\n                  ppStmt,\n                  pzTail,\n                );\n              default:\n                return util.sqlite3__wasm_db_error(\n                  pDb,\n                  capi.SQLITE_MISUSE,\n                  'Invalid SQL argument type for sqlite3_prepare_v2/v3().',\n                );\n            }\n          };\n\n          capi.sqlite3_prepare_v2 = function f(\n            pDb,\n            sql,\n            sqlLen,\n            ppStmt,\n            pzTail,\n          ) {\n            return f.length === arguments.length\n              ? capi.sqlite3_prepare_v3(pDb, sql, sqlLen, 0, ppStmt, pzTail)\n              : __dbArgcMismatch(pDb, 'sqlite3_prepare_v2', f.length);\n          };\n        }\n\n        {\n          const __bindText = wasm.xWrap('sqlite3_bind_text', 'int', [\n            'sqlite3_stmt*',\n            'int',\n            'string',\n            'int',\n            '*',\n          ]);\n          const __bindBlob = wasm.xWrap('sqlite3_bind_blob', 'int', [\n            'sqlite3_stmt*',\n            'int',\n            '*',\n            'int',\n            '*',\n          ]);\n\n          capi.sqlite3_bind_text = function f(\n            pStmt,\n            iCol,\n            text,\n            nText,\n            xDestroy,\n          ) {\n            if (f.length !== arguments.length) {\n              return __dbArgcMismatch(\n                capi.sqlite3_db_handle(pStmt),\n                'sqlite3_bind_text',\n                f.length,\n              );\n            } else if (wasm.isPtr(text) || null === text) {\n              return __bindText(pStmt, iCol, text, nText, xDestroy);\n            } else if (text instanceof ArrayBuffer) {\n              text = new Uint8Array(text);\n            } else if (Array.isArray(pMem)) {\n              text = pMem.join('');\n            }\n            let p, n;\n            try {\n              if (util.isSQLableTypedArray(text)) {\n                p = wasm.allocFromTypedArray(text);\n                n = text.byteLength;\n              } else if ('string' === typeof text) {\n                [p, n] = wasm.allocCString(text);\n              } else {\n                return util.sqlite3__wasm_db_error(\n                  capi.sqlite3_db_handle(pStmt),\n                  capi.SQLITE_MISUSE,\n                  'Invalid 3rd argument type for sqlite3_bind_text().',\n                );\n              }\n              return __bindText(pStmt, iCol, p, n, capi.SQLITE_WASM_DEALLOC);\n            } catch (e) {\n              wasm.dealloc(p);\n              return util.sqlite3__wasm_db_error(\n                capi.sqlite3_db_handle(pStmt),\n                e,\n              );\n            }\n          };\n\n          capi.sqlite3_bind_blob = function f(\n            pStmt,\n            iCol,\n            pMem,\n            nMem,\n            xDestroy,\n          ) {\n            if (f.length !== arguments.length) {\n              return __dbArgcMismatch(\n                capi.sqlite3_db_handle(pStmt),\n                'sqlite3_bind_blob',\n                f.length,\n              );\n            } else if (wasm.isPtr(pMem) || null === pMem) {\n              return __bindBlob(pStmt, iCol, pMem, nMem, xDestroy);\n            } else if (pMem instanceof ArrayBuffer) {\n              pMem = new Uint8Array(pMem);\n            } else if (Array.isArray(pMem)) {\n              pMem = pMem.join('');\n            }\n            let p, n;\n            try {\n              if (util.isBindableTypedArray(pMem)) {\n                p = wasm.allocFromTypedArray(pMem);\n                n = nMem >= 0 ? nMem : pMem.byteLength;\n              } else if ('string' === typeof pMem) {\n                [p, n] = wasm.allocCString(pMem);\n              } else {\n                return util.sqlite3__wasm_db_error(\n                  capi.sqlite3_db_handle(pStmt),\n                  capi.SQLITE_MISUSE,\n                  'Invalid 3rd argument type for sqlite3_bind_blob().',\n                );\n              }\n              return __bindBlob(pStmt, iCol, p, n, capi.SQLITE_WASM_DEALLOC);\n            } catch (e) {\n              wasm.dealloc(p);\n              return util.sqlite3__wasm_db_error(\n                capi.sqlite3_db_handle(pStmt),\n                e,\n              );\n            }\n          };\n        }\n\n        {\n          capi.sqlite3_config = function (op, ...args) {\n            if (arguments.length < 2) return capi.SQLITE_MISUSE;\n            switch (op) {\n              case capi.SQLITE_CONFIG_COVERING_INDEX_SCAN:\n              case capi.SQLITE_CONFIG_MEMSTATUS:\n              case capi.SQLITE_CONFIG_SMALL_MALLOC:\n              case capi.SQLITE_CONFIG_SORTERREF_SIZE:\n              case capi.SQLITE_CONFIG_STMTJRNL_SPILL:\n              case capi.SQLITE_CONFIG_URI:\n                return wasm.exports.sqlite3__wasm_config_i(op, args[0]);\n              case capi.SQLITE_CONFIG_LOOKASIDE:\n                return wasm.exports.sqlite3__wasm_config_ii(\n                  op,\n                  args[0],\n                  args[1],\n                );\n              case capi.SQLITE_CONFIG_MEMDB_MAXSIZE:\n                return wasm.exports.sqlite3__wasm_config_j(op, args[0]);\n              case capi.SQLITE_CONFIG_GETMALLOC:\n              case capi.SQLITE_CONFIG_GETMUTEX:\n              case capi.SQLITE_CONFIG_GETPCACHE2:\n              case capi.SQLITE_CONFIG_GETPCACHE:\n              case capi.SQLITE_CONFIG_HEAP:\n              case capi.SQLITE_CONFIG_LOG:\n              case capi.SQLITE_CONFIG_MALLOC:\n              case capi.SQLITE_CONFIG_MMAP_SIZE:\n              case capi.SQLITE_CONFIG_MULTITHREAD:\n              case capi.SQLITE_CONFIG_MUTEX:\n              case capi.SQLITE_CONFIG_PAGECACHE:\n              case capi.SQLITE_CONFIG_PCACHE2:\n              case capi.SQLITE_CONFIG_PCACHE:\n              case capi.SQLITE_CONFIG_PCACHE_HDRSZ:\n              case capi.SQLITE_CONFIG_PMASZ:\n              case capi.SQLITE_CONFIG_SERIALIZED:\n              case capi.SQLITE_CONFIG_SINGLETHREAD:\n              case capi.SQLITE_CONFIG_SQLLOG:\n              case capi.SQLITE_CONFIG_WIN32_HEAPSIZE:\n              default:\n                return capi.SQLITE_NOTFOUND;\n            }\n          };\n        }\n\n        {\n          const __autoExtFptr = new Set();\n\n          capi.sqlite3_auto_extension = function (fPtr) {\n            if (fPtr instanceof Function) {\n              fPtr = wasm.installFunction('i(ppp)', fPtr);\n            } else if (1 !== arguments.length || !wasm.isPtr(fPtr)) {\n              return capi.SQLITE_MISUSE;\n            }\n            const rc = wasm.exports.sqlite3_auto_extension(fPtr);\n            if (fPtr !== arguments[0]) {\n              if (0 === rc) __autoExtFptr.add(fPtr);\n              else wasm.uninstallFunction(fPtr);\n            }\n            return rc;\n          };\n\n          capi.sqlite3_cancel_auto_extension = function (fPtr) {\n            if (!fPtr || 1 !== arguments.length || !wasm.isPtr(fPtr)) return 0;\n            return wasm.exports.sqlite3_cancel_auto_extension(fPtr);\n          };\n\n          capi.sqlite3_reset_auto_extension = function () {\n            wasm.exports.sqlite3_reset_auto_extension();\n            for (const fp of __autoExtFptr) wasm.uninstallFunction(fp);\n            __autoExtFptr.clear();\n          };\n        }\n\n        const pKvvfs = capi.sqlite3_vfs_find('kvvfs');\n        if (pKvvfs) {\n          if (util.isUIThread()) {\n            const kvvfsMethods = new capi.sqlite3_kvvfs_methods(\n              wasm.exports.sqlite3__wasm_kvvfs_methods(),\n            );\n            delete capi.sqlite3_kvvfs_methods;\n\n            const kvvfsMakeKey =\n                wasm.exports.sqlite3__wasm_kvvfsMakeKeyOnPstack,\n              pstack = wasm.pstack;\n\n            const kvvfsStorage = (zClass) =>\n              115 === wasm.peek(zClass) ? sessionStorage : localStorage;\n\n            const kvvfsImpls = {\n              xRead: (zClass, zKey, zBuf, nBuf) => {\n                const stack = pstack.pointer,\n                  astack = wasm.scopedAllocPush();\n                try {\n                  const zXKey = kvvfsMakeKey(zClass, zKey);\n                  if (!zXKey) return -3;\n                  const jKey = wasm.cstrToJs(zXKey);\n                  const jV = kvvfsStorage(zClass).getItem(jKey);\n                  if (!jV) return -1;\n                  const nV = jV.length;\n                  if (nBuf <= 0) return nV;\n                  else if (1 === nBuf) {\n                    wasm.poke(zBuf, 0);\n                    return nV;\n                  }\n                  const zV = wasm.scopedAllocCString(jV);\n                  if (nBuf > nV + 1) nBuf = nV + 1;\n                  wasm.heap8u().copyWithin(zBuf, zV, zV + nBuf - 1);\n                  wasm.poke(zBuf + nBuf - 1, 0);\n                  return nBuf - 1;\n                } catch (e) {\n                  console.error('kvstorageRead()', e);\n                  return -2;\n                } finally {\n                  pstack.restore(stack);\n                  wasm.scopedAllocPop(astack);\n                }\n              },\n              xWrite: (zClass, zKey, zData) => {\n                const stack = pstack.pointer;\n                try {\n                  const zXKey = kvvfsMakeKey(zClass, zKey);\n                  if (!zXKey) return 1;\n                  const jKey = wasm.cstrToJs(zXKey);\n                  kvvfsStorage(zClass).setItem(jKey, wasm.cstrToJs(zData));\n                  return 0;\n                } catch (e) {\n                  console.error('kvstorageWrite()', e);\n                  return capi.SQLITE_IOERR;\n                } finally {\n                  pstack.restore(stack);\n                }\n              },\n              xDelete: (zClass, zKey) => {\n                const stack = pstack.pointer;\n                try {\n                  const zXKey = kvvfsMakeKey(zClass, zKey);\n                  if (!zXKey) return 1;\n                  kvvfsStorage(zClass).removeItem(wasm.cstrToJs(zXKey));\n                  return 0;\n                } catch (e) {\n                  console.error('kvstorageDelete()', e);\n                  return capi.SQLITE_IOERR;\n                } finally {\n                  pstack.restore(stack);\n                }\n              },\n            };\n            for (const k of Object.keys(kvvfsImpls)) {\n              kvvfsMethods[kvvfsMethods.memberKey(k)] = wasm.installFunction(\n                kvvfsMethods.memberSignature(k),\n                kvvfsImpls[k],\n              );\n            }\n          } else {\n            capi.sqlite3_vfs_unregister(pKvvfs);\n          }\n        }\n\n        wasm.xWrap.FuncPtrAdapter.warnOnUse = true;\n\n        const StructBinder = sqlite3.StructBinder;\n        const installMethod = function callee(\n          tgt,\n          name,\n          func,\n          applyArgcCheck = callee.installMethodArgcCheck,\n        ) {\n          if (!(tgt instanceof StructBinder.StructType)) {\n            toss('Usage error: target object is-not-a StructType.');\n          } else if (!(func instanceof Function) && !wasm.isPtr(func)) {\n            toss('Usage errror: expecting a Function or WASM pointer to one.');\n          }\n          if (1 === arguments.length) {\n            return (n, f) => callee(tgt, n, f, applyArgcCheck);\n          }\n          if (!callee.argcProxy) {\n            callee.argcProxy = function (tgt, funcName, func, sig) {\n              return function (...args) {\n                if (func.length !== arguments.length) {\n                  toss(\n                    'Argument mismatch for',\n                    tgt.structInfo.name +\n                      '::' +\n                      funcName +\n                      ': Native signature is:',\n                    sig,\n                  );\n                }\n                return func.apply(this, args);\n              };\n            };\n\n            callee.removeFuncList = function () {\n              if (this.ondispose.__removeFuncList) {\n                this.ondispose.__removeFuncList.forEach((v, ndx) => {\n                  if ('number' === typeof v) {\n                    try {\n                      wasm.uninstallFunction(v);\n                    } catch (e) {}\n                  }\n                });\n                delete this.ondispose.__removeFuncList;\n              }\n            };\n          }\n          const sigN = tgt.memberSignature(name);\n          if (sigN.length < 2) {\n            toss(\n              'Member',\n              name,\n              'does not have a function pointer signature:',\n              sigN,\n            );\n          }\n          const memKey = tgt.memberKey(name);\n          const fProxy =\n            applyArgcCheck && !wasm.isPtr(func)\n              ? callee.argcProxy(tgt, memKey, func, sigN)\n              : func;\n          if (wasm.isPtr(fProxy)) {\n            if (fProxy && !wasm.functionEntry(fProxy)) {\n              toss('Pointer', fProxy, 'is not a WASM function table entry.');\n            }\n            tgt[memKey] = fProxy;\n          } else {\n            const pFunc = wasm.installFunction(\n              fProxy,\n              tgt.memberSignature(name, true),\n            );\n            tgt[memKey] = pFunc;\n            if (!tgt.ondispose || !tgt.ondispose.__removeFuncList) {\n              tgt.addOnDispose(\n                'ondispose.__removeFuncList handler',\n                callee.removeFuncList,\n              );\n              tgt.ondispose.__removeFuncList = [];\n            }\n            tgt.ondispose.__removeFuncList.push(memKey, pFunc);\n          }\n          return (n, f) => callee(tgt, n, f, applyArgcCheck);\n        };\n        installMethod.installMethodArgcCheck = false;\n\n        const installMethods = function (\n          structInstance,\n          methods,\n          applyArgcCheck = installMethod.installMethodArgcCheck,\n        ) {\n          const seen = new Map();\n          for (const k of Object.keys(methods)) {\n            const m = methods[k];\n            const prior = seen.get(m);\n            if (prior) {\n              const mkey = structInstance.memberKey(k);\n              structInstance[mkey] =\n                structInstance[structInstance.memberKey(prior)];\n            } else {\n              installMethod(structInstance, k, m, applyArgcCheck);\n              seen.set(m, k);\n            }\n          }\n          return structInstance;\n        };\n\n        StructBinder.StructType.prototype.installMethod = function callee(\n          name,\n          func,\n          applyArgcCheck = installMethod.installMethodArgcCheck,\n        ) {\n          return arguments.length < 3 && name && 'object' === typeof name\n            ? installMethods(this, ...arguments)\n            : installMethod(this, ...arguments);\n        };\n\n        StructBinder.StructType.prototype.installMethods = function (\n          methods,\n          applyArgcCheck = installMethod.installMethodArgcCheck,\n        ) {\n          return installMethods(this, methods, applyArgcCheck);\n        };\n      });\n\n      globalThis.sqlite3ApiBootstrap.initializers.push(function (sqlite3) {\n        sqlite3.version = {\n          libVersion: '3.49.1',\n          libVersionNumber: 3049001,\n          sourceId:\n            '2025-02-18 13:38:58 873d4e274b4988d260ba8354a9718324a1c26187a4ab4c1cc0227c03d0f10e70',\n          downloadVersion: 3490100,\n        };\n      });\n\n      globalThis.sqlite3ApiBootstrap.initializers.push(function (sqlite3) {\n        const toss = (...args) => {\n          throw new Error(args.join(' '));\n        };\n        const toss3 = (...args) => {\n          throw new sqlite3.SQLite3Error(...args);\n        };\n\n        const capi = sqlite3.capi,\n          wasm = sqlite3.wasm,\n          util = sqlite3.util;\n\n        const __ptrMap = new WeakMap();\n\n        const __stmtMap = new WeakMap();\n\n        const getOwnOption = (opts, p, dflt) => {\n          const d = Object.getOwnPropertyDescriptor(opts, p);\n          return d ? d.value : dflt;\n        };\n\n        const checkSqlite3Rc = function (dbPtr, sqliteResultCode) {\n          if (sqliteResultCode) {\n            if (dbPtr instanceof DB) dbPtr = dbPtr.pointer;\n            toss3(\n              sqliteResultCode,\n              'sqlite3 result code',\n              sqliteResultCode + ':',\n              dbPtr\n                ? capi.sqlite3_errmsg(dbPtr)\n                : capi.sqlite3_errstr(sqliteResultCode),\n            );\n          }\n          return arguments[0];\n        };\n\n        const __dbTraceToConsole = wasm.installFunction(\n          'i(ippp)',\n          function (t, c, p, x) {\n            if (capi.SQLITE_TRACE_STMT === t) {\n              console.log(\n                'SQL TRACE #' + ++this.counter + ' via sqlite3@' + c + ':',\n                wasm.cstrToJs(x),\n              );\n            }\n          }.bind({ counter: 0 }),\n        );\n\n        const __vfsPostOpenCallback = Object.create(null);\n\n        const dbCtorHelper = function ctor(...args) {\n          if (!ctor._name2vfs) {\n            ctor._name2vfs = Object.create(null);\n            const isWorkerThread =\n              'function' === typeof importScripts\n                ? (n) =>\n                    toss3(\n                      'The VFS for',\n                      n,\n                      'is only available in the main window thread.',\n                    )\n                : false;\n            ctor._name2vfs[':localStorage:'] = {\n              vfs: 'kvvfs',\n              filename: isWorkerThread || (() => 'local'),\n            };\n            ctor._name2vfs[':sessionStorage:'] = {\n              vfs: 'kvvfs',\n              filename: isWorkerThread || (() => 'session'),\n            };\n          }\n          const opt = ctor.normalizeArgs(...args);\n          let fn = opt.filename,\n            vfsName = opt.vfs,\n            flagsStr = opt.flags;\n          if (\n            ('string' !== typeof fn && 'number' !== typeof fn) ||\n            'string' !== typeof flagsStr ||\n            (vfsName &&\n              'string' !== typeof vfsName &&\n              'number' !== typeof vfsName)\n          ) {\n            sqlite3.config.error('Invalid DB ctor args', opt, arguments);\n            toss3('Invalid arguments for DB constructor.');\n          }\n          let fnJs = 'number' === typeof fn ? wasm.cstrToJs(fn) : fn;\n          const vfsCheck = ctor._name2vfs[fnJs];\n          if (vfsCheck) {\n            vfsName = vfsCheck.vfs;\n            fn = fnJs = vfsCheck.filename(fnJs);\n          }\n          let pDb,\n            oflags = 0;\n          if (flagsStr.indexOf('c') >= 0) {\n            oflags |= capi.SQLITE_OPEN_CREATE | capi.SQLITE_OPEN_READWRITE;\n          }\n          if (flagsStr.indexOf('w') >= 0) oflags |= capi.SQLITE_OPEN_READWRITE;\n          if (0 === oflags) oflags |= capi.SQLITE_OPEN_READONLY;\n          oflags |= capi.SQLITE_OPEN_EXRESCODE;\n          const stack = wasm.pstack.pointer;\n          try {\n            const pPtr = wasm.pstack.allocPtr();\n            let rc = capi.sqlite3_open_v2(fn, pPtr, oflags, vfsName || 0);\n            pDb = wasm.peekPtr(pPtr);\n            checkSqlite3Rc(pDb, rc);\n            capi.sqlite3_extended_result_codes(pDb, 1);\n            if (flagsStr.indexOf('t') >= 0) {\n              capi.sqlite3_trace_v2(\n                pDb,\n                capi.SQLITE_TRACE_STMT,\n                __dbTraceToConsole,\n                pDb,\n              );\n            }\n          } catch (e) {\n            if (pDb) capi.sqlite3_close_v2(pDb);\n            throw e;\n          } finally {\n            wasm.pstack.restore(stack);\n          }\n          this.filename = fnJs;\n          __ptrMap.set(this, pDb);\n          __stmtMap.set(this, Object.create(null));\n          try {\n            const pVfs =\n              capi.sqlite3_js_db_vfs(pDb) ||\n              toss3('Internal error: cannot get VFS for new db handle.');\n            const postInitSql = __vfsPostOpenCallback[pVfs];\n            if (postInitSql) {\n              if (postInitSql instanceof Function) {\n                postInitSql(this, sqlite3);\n              } else {\n                checkSqlite3Rc(\n                  pDb,\n                  capi.sqlite3_exec(pDb, postInitSql, 0, 0, 0),\n                );\n              }\n            }\n          } catch (e) {\n            this.close();\n            throw e;\n          }\n        };\n\n        dbCtorHelper.setVfsPostOpenCallback = function (pVfs, callback) {\n          if (!(callback instanceof Function)) {\n            toss3(\n              'dbCtorHelper.setVfsPostOpenCallback() should not be used with ' +\n                'a non-function argument.',\n              arguments,\n            );\n          }\n          __vfsPostOpenCallback[pVfs] = callback;\n        };\n\n        dbCtorHelper.normalizeArgs = function (\n          filename = ':memory:',\n          flags = 'c',\n          vfs = null,\n        ) {\n          const arg = {};\n          if (\n            1 === arguments.length &&\n            arguments[0] &&\n            'object' === typeof arguments[0]\n          ) {\n            Object.assign(arg, arguments[0]);\n            if (undefined === arg.flags) arg.flags = 'c';\n            if (undefined === arg.vfs) arg.vfs = null;\n            if (undefined === arg.filename) arg.filename = ':memory:';\n          } else {\n            arg.filename = filename;\n            arg.flags = flags;\n            arg.vfs = vfs;\n          }\n          return arg;\n        };\n\n        const DB = function (...args) {\n          dbCtorHelper.apply(this, args);\n        };\n        DB.dbCtorHelper = dbCtorHelper;\n\n        const BindTypes = {\n          null: 1,\n          number: 2,\n          string: 3,\n          boolean: 4,\n          blob: 5,\n        };\n        BindTypes['undefined'] == BindTypes.null;\n        if (wasm.bigIntEnabled) {\n          BindTypes.bigint = BindTypes.number;\n        }\n\n        const Stmt = function () {\n          if (BindTypes !== arguments[2]) {\n            toss3(\n              capi.SQLITE_MISUSE,\n              'Do not call the Stmt constructor directly. Use DB.prepare().',\n            );\n          }\n          this.db = arguments[0];\n          __ptrMap.set(this, arguments[1]);\n          this.parameterCount = capi.sqlite3_bind_parameter_count(this.pointer);\n        };\n\n        const affirmDbOpen = function (db) {\n          if (!db.pointer) toss3('DB has been closed.');\n          return db;\n        };\n\n        const affirmColIndex = function (stmt, ndx) {\n          if (ndx !== (ndx | 0) || ndx < 0 || ndx >= stmt.columnCount) {\n            toss3('Column index', ndx, 'is out of range.');\n          }\n          return stmt;\n        };\n\n        const parseExecArgs = function (db, args) {\n          const out = Object.create(null);\n          out.opt = Object.create(null);\n          switch (args.length) {\n            case 1:\n              if (\n                'string' === typeof args[0] ||\n                util.isSQLableTypedArray(args[0])\n              ) {\n                out.sql = args[0];\n              } else if (Array.isArray(args[0])) {\n                out.sql = args[0];\n              } else if (args[0] && 'object' === typeof args[0]) {\n                out.opt = args[0];\n                out.sql = out.opt.sql;\n              }\n              break;\n            case 2:\n              out.sql = args[0];\n              out.opt = args[1];\n              break;\n            default:\n              toss3('Invalid argument count for exec().');\n          }\n          out.sql = util.flexibleString(out.sql);\n          if ('string' !== typeof out.sql) {\n            toss3('Missing SQL argument or unsupported SQL value type.');\n          }\n          const opt = out.opt;\n          switch (opt.returnValue) {\n            case 'resultRows':\n              if (!opt.resultRows) opt.resultRows = [];\n              out.returnVal = () => opt.resultRows;\n              break;\n            case 'saveSql':\n              if (!opt.saveSql) opt.saveSql = [];\n              out.returnVal = () => opt.saveSql;\n              break;\n            case undefined:\n            case 'this':\n              out.returnVal = () => db;\n              break;\n            default:\n              toss3('Invalid returnValue value:', opt.returnValue);\n          }\n          if (!opt.callback && !opt.returnValue && undefined !== opt.rowMode) {\n            if (!opt.resultRows) opt.resultRows = [];\n            out.returnVal = () => opt.resultRows;\n          }\n          if (opt.callback || opt.resultRows) {\n            switch (undefined === opt.rowMode ? 'array' : opt.rowMode) {\n              case 'object':\n                out.cbArg = (stmt, cache) => {\n                  if (!cache.columnNames)\n                    cache.columnNames = stmt.getColumnNames([]);\n\n                  const row = stmt.get([]);\n                  const rv = Object.create(null);\n                  for (const i in cache.columnNames)\n                    rv[cache.columnNames[i]] = row[i];\n                  return rv;\n                };\n                break;\n              case 'array':\n                out.cbArg = (stmt) => stmt.get([]);\n                break;\n              case 'stmt':\n                if (Array.isArray(opt.resultRows)) {\n                  toss3(\n                    'exec(): invalid rowMode for a resultRows array: must',\n                    \"be one of 'array', 'object',\",\n                    'a result column number, or column name reference.',\n                  );\n                }\n                out.cbArg = (stmt) => stmt;\n                break;\n              default:\n                if (util.isInt32(opt.rowMode)) {\n                  out.cbArg = (stmt) => stmt.get(opt.rowMode);\n                  break;\n                } else if (\n                  'string' === typeof opt.rowMode &&\n                  opt.rowMode.length > 1 &&\n                  '$' === opt.rowMode[0]\n                ) {\n                  const $colName = opt.rowMode.substr(1);\n                  out.cbArg = (stmt) => {\n                    const rc = stmt.get(Object.create(null))[$colName];\n                    return undefined === rc\n                      ? toss3(\n                          capi.SQLITE_NOTFOUND,\n                          'exec(): unknown result column:',\n                          $colName,\n                        )\n                      : rc;\n                  };\n                  break;\n                }\n                toss3('Invalid rowMode:', opt.rowMode);\n            }\n          }\n          return out;\n        };\n\n        const __selectFirstRow = (db, sql, bind, ...getArgs) => {\n          const stmt = db.prepare(sql);\n          try {\n            const rc = stmt.bind(bind).step()\n              ? stmt.get(...getArgs)\n              : undefined;\n            stmt.reset();\n            return rc;\n          } finally {\n            stmt.finalize();\n          }\n        };\n\n        const __selectAll = (db, sql, bind, rowMode) =>\n          db.exec({\n            sql,\n            bind,\n            rowMode,\n            returnValue: 'resultRows',\n          });\n\n        DB.checkRc = (db, resultCode) => checkSqlite3Rc(db, resultCode);\n\n        DB.prototype = {\n          isOpen: function () {\n            return !!this.pointer;\n          },\n\n          affirmOpen: function () {\n            return affirmDbOpen(this);\n          },\n\n          close: function () {\n            if (this.pointer) {\n              if (this.onclose && this.onclose.before instanceof Function) {\n                try {\n                  this.onclose.before(this);\n                } catch (e) {}\n              }\n              const pDb = this.pointer;\n              Object.keys(__stmtMap.get(this)).forEach((k, s) => {\n                if (s && s.pointer) {\n                  try {\n                    s.finalize();\n                  } catch (e) {}\n                }\n              });\n              __ptrMap.delete(this);\n              __stmtMap.delete(this);\n              capi.sqlite3_close_v2(pDb);\n              if (this.onclose && this.onclose.after instanceof Function) {\n                try {\n                  this.onclose.after(this);\n                } catch (e) {}\n              }\n              delete this.filename;\n            }\n          },\n\n          changes: function (total = false, sixtyFour = false) {\n            const p = affirmDbOpen(this).pointer;\n            if (total) {\n              return sixtyFour\n                ? capi.sqlite3_total_changes64(p)\n                : capi.sqlite3_total_changes(p);\n            } else {\n              return sixtyFour\n                ? capi.sqlite3_changes64(p)\n                : capi.sqlite3_changes(p);\n            }\n          },\n\n          dbFilename: function (dbName = 'main') {\n            return capi.sqlite3_db_filename(affirmDbOpen(this).pointer, dbName);\n          },\n\n          dbName: function (dbNumber = 0) {\n            return capi.sqlite3_db_name(affirmDbOpen(this).pointer, dbNumber);\n          },\n\n          dbVfsName: function (dbName = 0) {\n            let rc;\n            const pVfs = capi.sqlite3_js_db_vfs(\n              affirmDbOpen(this).pointer,\n              dbName,\n            );\n            if (pVfs) {\n              const v = new capi.sqlite3_vfs(pVfs);\n              try {\n                rc = wasm.cstrToJs(v.$zName);\n              } finally {\n                v.dispose();\n              }\n            }\n            return rc;\n          },\n\n          prepare: function (sql) {\n            affirmDbOpen(this);\n            const stack = wasm.pstack.pointer;\n            let ppStmt, pStmt;\n            try {\n              ppStmt = wasm.pstack.alloc(8);\n              DB.checkRc(\n                this,\n                capi.sqlite3_prepare_v2(this.pointer, sql, -1, ppStmt, null),\n              );\n              pStmt = wasm.peekPtr(ppStmt);\n            } finally {\n              wasm.pstack.restore(stack);\n            }\n            if (!pStmt) toss3('Cannot prepare empty SQL.');\n            const stmt = new Stmt(this, pStmt, BindTypes);\n            __stmtMap.get(this)[pStmt] = stmt;\n            return stmt;\n          },\n\n          exec: function () {\n            affirmDbOpen(this);\n            const arg = parseExecArgs(this, arguments);\n            if (!arg.sql) {\n              return toss3('exec() requires an SQL string.');\n            }\n            const opt = arg.opt;\n            const callback = opt.callback;\n            const resultRows = Array.isArray(opt.resultRows)\n              ? opt.resultRows\n              : undefined;\n            let stmt;\n            let bind = opt.bind;\n            let evalFirstResult = !!(\n              arg.cbArg ||\n              opt.columnNames ||\n              resultRows\n            );\n            const stack = wasm.scopedAllocPush();\n            const saveSql = Array.isArray(opt.saveSql)\n              ? opt.saveSql\n              : undefined;\n            try {\n              const isTA = util.isSQLableTypedArray(arg.sql);\n              let sqlByteLen = isTA\n                ? arg.sql.byteLength\n                : wasm.jstrlen(arg.sql);\n              const ppStmt = wasm.scopedAlloc(\n                2 * wasm.ptrSizeof + (sqlByteLen + 1),\n              );\n              const pzTail = ppStmt + wasm.ptrSizeof;\n              let pSql = pzTail + wasm.ptrSizeof;\n              const pSqlEnd = pSql + sqlByteLen;\n              if (isTA) wasm.heap8().set(arg.sql, pSql);\n              else wasm.jstrcpy(arg.sql, wasm.heap8(), pSql, sqlByteLen, false);\n              wasm.poke(pSql + sqlByteLen, 0);\n              while (pSql && wasm.peek(pSql, 'i8')) {\n                wasm.pokePtr([ppStmt, pzTail], 0);\n                DB.checkRc(\n                  this,\n                  capi.sqlite3_prepare_v3(\n                    this.pointer,\n                    pSql,\n                    sqlByteLen,\n                    0,\n                    ppStmt,\n                    pzTail,\n                  ),\n                );\n                const pStmt = wasm.peekPtr(ppStmt);\n                pSql = wasm.peekPtr(pzTail);\n                sqlByteLen = pSqlEnd - pSql;\n                if (!pStmt) continue;\n                if (saveSql) saveSql.push(capi.sqlite3_sql(pStmt).trim());\n                stmt = new Stmt(this, pStmt, BindTypes);\n                if (bind && stmt.parameterCount) {\n                  stmt.bind(bind);\n                  bind = null;\n                }\n                if (evalFirstResult && stmt.columnCount) {\n                  let gotColNames = Array.isArray(opt.columnNames) ? 0 : 1;\n                  evalFirstResult = false;\n                  if (arg.cbArg || resultRows) {\n                    const cbArgCache = Object.create(null);\n                    for (; stmt.step(); stmt._lockedByExec = false) {\n                      if (0 === gotColNames++) {\n                        stmt.getColumnNames(\n                          (cbArgCache.columnNames = opt.columnNames || []),\n                        );\n                      }\n                      stmt._lockedByExec = true;\n                      const row = arg.cbArg(stmt, cbArgCache);\n                      if (resultRows) resultRows.push(row);\n                      if (callback && false === callback.call(opt, row, stmt)) {\n                        break;\n                      }\n                    }\n                    stmt._lockedByExec = false;\n                  }\n                  if (0 === gotColNames) {\n                    stmt.getColumnNames(opt.columnNames);\n                  }\n                } else {\n                  stmt.step();\n                }\n                stmt.reset().finalize();\n                stmt = null;\n              }\n            } finally {\n              wasm.scopedAllocPop(stack);\n              if (stmt) {\n                delete stmt._lockedByExec;\n                stmt.finalize();\n              }\n            }\n            return arg.returnVal();\n          },\n\n          createFunction: function f(name, xFunc, opt) {\n            const isFunc = (f) => f instanceof Function;\n            switch (arguments.length) {\n              case 1:\n                opt = name;\n                name = opt.name;\n                xFunc = opt.xFunc || 0;\n                break;\n              case 2:\n                if (!isFunc(xFunc)) {\n                  opt = xFunc;\n                  xFunc = opt.xFunc || 0;\n                }\n                break;\n              case 3:\n                break;\n              default:\n                break;\n            }\n            if (!opt) opt = {};\n            if ('string' !== typeof name) {\n              toss3('Invalid arguments: missing function name.');\n            }\n            let xStep = opt.xStep || 0;\n            let xFinal = opt.xFinal || 0;\n            const xValue = opt.xValue || 0;\n            const xInverse = opt.xInverse || 0;\n            let isWindow = undefined;\n            if (isFunc(xFunc)) {\n              isWindow = false;\n              if (isFunc(xStep) || isFunc(xFinal)) {\n                toss3('Ambiguous arguments: scalar or aggregate?');\n              }\n              xStep = xFinal = null;\n            } else if (isFunc(xStep)) {\n              if (!isFunc(xFinal)) {\n                toss3('Missing xFinal() callback for aggregate or window UDF.');\n              }\n              xFunc = null;\n            } else if (isFunc(xFinal)) {\n              toss3('Missing xStep() callback for aggregate or window UDF.');\n            } else {\n              toss3('Missing function-type properties.');\n            }\n            if (false === isWindow) {\n              if (isFunc(xValue) || isFunc(xInverse)) {\n                toss3(\n                  'xValue and xInverse are not permitted for non-window UDFs.',\n                );\n              }\n            } else if (isFunc(xValue)) {\n              if (!isFunc(xInverse)) {\n                toss3('xInverse must be provided if xValue is.');\n              }\n              isWindow = true;\n            } else if (isFunc(xInverse)) {\n              toss3('xValue must be provided if xInverse is.');\n            }\n            const pApp = opt.pApp;\n            if (\n              undefined !== pApp &&\n              null !== pApp &&\n              ('number' !== typeof pApp || !util.isInt32(pApp))\n            ) {\n              toss3(\n                'Invalid value for pApp property. Must be a legal WASM pointer value.',\n              );\n            }\n            const xDestroy = opt.xDestroy || 0;\n            if (xDestroy && !isFunc(xDestroy)) {\n              toss3('xDestroy property must be a function.');\n            }\n            let fFlags = 0;\n            if (getOwnOption(opt, 'deterministic'))\n              fFlags |= capi.SQLITE_DETERMINISTIC;\n            if (getOwnOption(opt, 'directOnly'))\n              fFlags |= capi.SQLITE_DIRECTONLY;\n            if (getOwnOption(opt, 'innocuous')) fFlags |= capi.SQLITE_INNOCUOUS;\n            name = name.toLowerCase();\n            const xArity = xFunc || xStep;\n            const arity = getOwnOption(opt, 'arity');\n            const arityArg =\n              'number' === typeof arity\n                ? arity\n                : xArity.length\n                  ? xArity.length - 1\n                  : 0;\n            let rc;\n            if (isWindow) {\n              rc = capi.sqlite3_create_window_function(\n                this.pointer,\n                name,\n                arityArg,\n                capi.SQLITE_UTF8 | fFlags,\n                pApp || 0,\n                xStep,\n                xFinal,\n                xValue,\n                xInverse,\n                xDestroy,\n              );\n            } else {\n              rc = capi.sqlite3_create_function_v2(\n                this.pointer,\n                name,\n                arityArg,\n                capi.SQLITE_UTF8 | fFlags,\n                pApp || 0,\n                xFunc,\n                xStep,\n                xFinal,\n                xDestroy,\n              );\n            }\n            DB.checkRc(this, rc);\n            return this;\n          },\n\n          selectValue: function (sql, bind, asType) {\n            return __selectFirstRow(this, sql, bind, 0, asType);\n          },\n\n          selectValues: function (sql, bind, asType) {\n            const stmt = this.prepare(sql),\n              rc = [];\n            try {\n              stmt.bind(bind);\n              while (stmt.step()) rc.push(stmt.get(0, asType));\n              stmt.reset();\n            } finally {\n              stmt.finalize();\n            }\n            return rc;\n          },\n\n          selectArray: function (sql, bind) {\n            return __selectFirstRow(this, sql, bind, []);\n          },\n\n          selectObject: function (sql, bind) {\n            return __selectFirstRow(this, sql, bind, {});\n          },\n\n          selectArrays: function (sql, bind) {\n            return __selectAll(this, sql, bind, 'array');\n          },\n\n          selectObjects: function (sql, bind) {\n            return __selectAll(this, sql, bind, 'object');\n          },\n\n          openStatementCount: function () {\n            return this.pointer ? Object.keys(__stmtMap.get(this)).length : 0;\n          },\n\n          transaction: function (callback) {\n            let opener = 'BEGIN';\n            if (arguments.length > 1) {\n              if (/[^a-zA-Z]/.test(arguments[0])) {\n                toss3(\n                  capi.SQLITE_MISUSE,\n                  'Invalid argument for BEGIN qualifier.',\n                );\n              }\n              opener += ' ' + arguments[0];\n              callback = arguments[1];\n            }\n            affirmDbOpen(this).exec(opener);\n            try {\n              const rc = callback(this);\n              this.exec('COMMIT');\n              return rc;\n            } catch (e) {\n              this.exec('ROLLBACK');\n              throw e;\n            }\n          },\n\n          savepoint: function (callback) {\n            affirmDbOpen(this).exec('SAVEPOINT oo1');\n            try {\n              const rc = callback(this);\n              this.exec('RELEASE oo1');\n              return rc;\n            } catch (e) {\n              this.exec('ROLLBACK to SAVEPOINT oo1; RELEASE SAVEPOINT oo1');\n              throw e;\n            }\n          },\n\n          checkRc: function (resultCode) {\n            return checkSqlite3Rc(this, resultCode);\n          },\n        };\n\n        const affirmStmtOpen = function (stmt) {\n          if (!stmt.pointer) toss3('Stmt has been closed.');\n          return stmt;\n        };\n\n        const isSupportedBindType = function (v) {\n          let t = BindTypes[null === v || undefined === v ? 'null' : typeof v];\n          switch (t) {\n            case BindTypes.boolean:\n            case BindTypes.null:\n            case BindTypes.number:\n            case BindTypes.string:\n              return t;\n            case BindTypes.bigint:\n              if (wasm.bigIntEnabled) return t;\n\n            default:\n              return util.isBindableTypedArray(v) ? BindTypes.blob : undefined;\n          }\n        };\n\n        const affirmSupportedBindType = function (v) {\n          return (\n            isSupportedBindType(v) ||\n            toss3('Unsupported bind() argument type:', typeof v)\n          );\n        };\n\n        const affirmParamIndex = function (stmt, key) {\n          const n =\n            'number' === typeof key\n              ? key\n              : capi.sqlite3_bind_parameter_index(stmt.pointer, key);\n          if (0 === n || !util.isInt32(n)) {\n            toss3('Invalid bind() parameter name: ' + key);\n          } else if (n < 1 || n > stmt.parameterCount)\n            toss3('Bind index', key, 'is out of range.');\n          return n;\n        };\n\n        const affirmNotLockedByExec = function (stmt, currentOpName) {\n          if (stmt._lockedByExec) {\n            toss3(\n              'Operation is illegal when statement is locked:',\n              currentOpName,\n            );\n          }\n          return stmt;\n        };\n\n        const bindOne = function f(stmt, ndx, bindType, val) {\n          affirmNotLockedByExec(affirmStmtOpen(stmt), 'bind()');\n          if (!f._) {\n            f._tooBigInt = (v) =>\n              toss3(\n                'BigInt value is too big to store without precision loss:',\n                v,\n              );\n            f._ = {\n              string: function (stmt, ndx, val, asBlob) {\n                const [pStr, n] = wasm.allocCString(val, true);\n                const f = asBlob\n                  ? capi.sqlite3_bind_blob\n                  : capi.sqlite3_bind_text;\n                return f(stmt.pointer, ndx, pStr, n, capi.SQLITE_WASM_DEALLOC);\n              },\n            };\n          }\n          affirmSupportedBindType(val);\n          ndx = affirmParamIndex(stmt, ndx);\n          let rc = 0;\n          switch (\n            null === val || undefined === val ? BindTypes.null : bindType\n          ) {\n            case BindTypes.null:\n              rc = capi.sqlite3_bind_null(stmt.pointer, ndx);\n              break;\n            case BindTypes.string:\n              rc = f._.string(stmt, ndx, val, false);\n              break;\n            case BindTypes.number: {\n              let m;\n              if (util.isInt32(val)) m = capi.sqlite3_bind_int;\n              else if ('bigint' === typeof val) {\n                if (!util.bigIntFits64(val)) {\n                  f._tooBigInt(val);\n                } else if (wasm.bigIntEnabled) {\n                  m = capi.sqlite3_bind_int64;\n                } else if (util.bigIntFitsDouble(val)) {\n                  val = Number(val);\n                  m = capi.sqlite3_bind_double;\n                } else {\n                  f._tooBigInt(val);\n                }\n              } else {\n                val = Number(val);\n                if (wasm.bigIntEnabled && Number.isInteger(val)) {\n                  m = capi.sqlite3_bind_int64;\n                } else {\n                  m = capi.sqlite3_bind_double;\n                }\n              }\n              rc = m(stmt.pointer, ndx, val);\n              break;\n            }\n            case BindTypes.boolean:\n              rc = capi.sqlite3_bind_int(stmt.pointer, ndx, val ? 1 : 0);\n              break;\n            case BindTypes.blob: {\n              if ('string' === typeof val) {\n                rc = f._.string(stmt, ndx, val, true);\n                break;\n              } else if (val instanceof ArrayBuffer) {\n                val = new Uint8Array(val);\n              } else if (!util.isBindableTypedArray(val)) {\n                toss3(\n                  'Binding a value as a blob requires',\n                  'that it be a string, Uint8Array, Int8Array, or ArrayBuffer.',\n                );\n              }\n              const pBlob = wasm.alloc(val.byteLength || 1);\n              wasm.heap8().set(val.byteLength ? val : [0], pBlob);\n              rc = capi.sqlite3_bind_blob(\n                stmt.pointer,\n                ndx,\n                pBlob,\n                val.byteLength,\n                capi.SQLITE_WASM_DEALLOC,\n              );\n              break;\n            }\n            default:\n              sqlite3.config.warn('Unsupported bind() argument type:', val);\n              toss3('Unsupported bind() argument type: ' + typeof val);\n          }\n          if (rc) DB.checkRc(stmt.db.pointer, rc);\n          stmt._mayGet = false;\n          return stmt;\n        };\n\n        Stmt.prototype = {\n          finalize: function () {\n            if (this.pointer) {\n              affirmNotLockedByExec(this, 'finalize()');\n              const rc = capi.sqlite3_finalize(this.pointer);\n              delete __stmtMap.get(this.db)[this.pointer];\n              __ptrMap.delete(this);\n              delete this._mayGet;\n              delete this.parameterCount;\n              delete this._lockedByExec;\n              delete this.db;\n              return rc;\n            }\n          },\n\n          clearBindings: function () {\n            affirmNotLockedByExec(affirmStmtOpen(this), 'clearBindings()');\n            capi.sqlite3_clear_bindings(this.pointer);\n            this._mayGet = false;\n            return this;\n          },\n\n          reset: function (alsoClearBinds) {\n            affirmNotLockedByExec(this, 'reset()');\n            if (alsoClearBinds) this.clearBindings();\n            const rc = capi.sqlite3_reset(affirmStmtOpen(this).pointer);\n            this._mayGet = false;\n            checkSqlite3Rc(this.db, rc);\n            return this;\n          },\n\n          bind: function () {\n            affirmStmtOpen(this);\n            let ndx, arg;\n            switch (arguments.length) {\n              case 1:\n                ndx = 1;\n                arg = arguments[0];\n                break;\n              case 2:\n                ndx = arguments[0];\n                arg = arguments[1];\n                break;\n              default:\n                toss3('Invalid bind() arguments.');\n            }\n            if (undefined === arg) {\n              return this;\n            } else if (!this.parameterCount) {\n              toss3('This statement has no bindable parameters.');\n            }\n            this._mayGet = false;\n            if (null === arg) {\n              return bindOne(this, ndx, BindTypes.null, arg);\n            } else if (Array.isArray(arg)) {\n              if (1 !== arguments.length) {\n                toss3(\n                  'When binding an array, an index argument is not permitted.',\n                );\n              }\n              arg.forEach((v, i) =>\n                bindOne(this, i + 1, affirmSupportedBindType(v), v),\n              );\n              return this;\n            } else if (arg instanceof ArrayBuffer) {\n              arg = new Uint8Array(arg);\n            }\n            if ('object' === typeof arg && !util.isBindableTypedArray(arg)) {\n              if (1 !== arguments.length) {\n                toss3(\n                  'When binding an object, an index argument is not permitted.',\n                );\n              }\n              Object.keys(arg).forEach((k) =>\n                bindOne(this, k, affirmSupportedBindType(arg[k]), arg[k]),\n              );\n              return this;\n            } else {\n              return bindOne(this, ndx, affirmSupportedBindType(arg), arg);\n            }\n            toss3('Should not reach this point.');\n          },\n\n          bindAsBlob: function (ndx, arg) {\n            affirmStmtOpen(this);\n            if (1 === arguments.length) {\n              arg = ndx;\n              ndx = 1;\n            }\n            const t = affirmSupportedBindType(arg);\n            if (\n              BindTypes.string !== t &&\n              BindTypes.blob !== t &&\n              BindTypes.null !== t\n            ) {\n              toss3('Invalid value type for bindAsBlob()');\n            }\n            return bindOne(this, ndx, BindTypes.blob, arg);\n          },\n\n          step: function () {\n            affirmNotLockedByExec(this, 'step()');\n            const rc = capi.sqlite3_step(affirmStmtOpen(this).pointer);\n            switch (rc) {\n              case capi.SQLITE_DONE:\n                return (this._mayGet = false);\n              case capi.SQLITE_ROW:\n                return (this._mayGet = true);\n              default:\n                this._mayGet = false;\n                sqlite3.config.warn(\n                  'sqlite3_step() rc=',\n                  rc,\n                  capi.sqlite3_js_rc_str(rc),\n                  'SQL =',\n                  capi.sqlite3_sql(this.pointer),\n                );\n                DB.checkRc(this.db.pointer, rc);\n            }\n          },\n\n          stepReset: function () {\n            this.step();\n            return this.reset();\n          },\n\n          stepFinalize: function () {\n            try {\n              const rc = this.step();\n              this.reset();\n              return rc;\n            } finally {\n              try {\n                this.finalize();\n              } catch (e) {}\n            }\n          },\n\n          get: function (ndx, asType) {\n            if (!affirmStmtOpen(this)._mayGet) {\n              toss3('Stmt.step() has not (recently) returned true.');\n            }\n            if (Array.isArray(ndx)) {\n              let i = 0;\n              const n = this.columnCount;\n              while (i < n) {\n                ndx[i] = this.get(i++);\n              }\n              return ndx;\n            } else if (ndx && 'object' === typeof ndx) {\n              let i = 0;\n              const n = this.columnCount;\n              while (i < n) {\n                ndx[capi.sqlite3_column_name(this.pointer, i)] = this.get(i++);\n              }\n              return ndx;\n            }\n            affirmColIndex(this, ndx);\n            switch (\n              undefined === asType\n                ? capi.sqlite3_column_type(this.pointer, ndx)\n                : asType\n            ) {\n              case capi.SQLITE_NULL:\n                return null;\n              case capi.SQLITE_INTEGER: {\n                if (wasm.bigIntEnabled) {\n                  const rc = capi.sqlite3_column_int64(this.pointer, ndx);\n                  if (\n                    rc >= Number.MIN_SAFE_INTEGER &&\n                    rc <= Number.MAX_SAFE_INTEGER\n                  ) {\n                    return Number(rc).valueOf();\n                  }\n                  return rc;\n                } else {\n                  const rc = capi.sqlite3_column_double(this.pointer, ndx);\n                  if (\n                    rc > Number.MAX_SAFE_INTEGER ||\n                    rc < Number.MIN_SAFE_INTEGER\n                  ) {\n                    toss3(\n                      'Integer is out of range for JS integer range: ' + rc,\n                    );\n                  }\n\n                  return util.isInt32(rc) ? rc | 0 : rc;\n                }\n              }\n              case capi.SQLITE_FLOAT:\n                return capi.sqlite3_column_double(this.pointer, ndx);\n              case capi.SQLITE_TEXT:\n                return capi.sqlite3_column_text(this.pointer, ndx);\n              case capi.SQLITE_BLOB: {\n                const n = capi.sqlite3_column_bytes(this.pointer, ndx),\n                  ptr = capi.sqlite3_column_blob(this.pointer, ndx),\n                  rc = new Uint8Array(n);\n\n                if (n) rc.set(wasm.heap8u().slice(ptr, ptr + n), 0);\n\n                if (n && this.db._blobXfer instanceof Array) {\n                  this.db._blobXfer.push(rc.buffer);\n                }\n                return rc;\n              }\n              default:\n                toss3(\n                  \"Don't know how to translate\",\n                  'type of result column #' + ndx + '.',\n                );\n            }\n            toss3('Not reached.');\n          },\n\n          getInt: function (ndx) {\n            return this.get(ndx, capi.SQLITE_INTEGER);\n          },\n\n          getFloat: function (ndx) {\n            return this.get(ndx, capi.SQLITE_FLOAT);\n          },\n\n          getString: function (ndx) {\n            return this.get(ndx, capi.SQLITE_TEXT);\n          },\n\n          getBlob: function (ndx) {\n            return this.get(ndx, capi.SQLITE_BLOB);\n          },\n\n          getJSON: function (ndx) {\n            const s = this.get(ndx, capi.SQLITE_STRING);\n            return null === s ? s : JSON.parse(s);\n          },\n\n          getColumnName: function (ndx) {\n            return capi.sqlite3_column_name(\n              affirmColIndex(affirmStmtOpen(this), ndx).pointer,\n              ndx,\n            );\n          },\n\n          getColumnNames: function (tgt = []) {\n            affirmColIndex(affirmStmtOpen(this), 0);\n            const n = this.columnCount;\n            for (let i = 0; i < n; ++i) {\n              tgt.push(capi.sqlite3_column_name(this.pointer, i));\n            }\n            return tgt;\n          },\n\n          getParamIndex: function (name) {\n            return affirmStmtOpen(this).parameterCount\n              ? capi.sqlite3_bind_parameter_index(this.pointer, name)\n              : undefined;\n          },\n\n          getParamName: function (ndx) {\n            return affirmStmtOpen(this).parameterCount\n              ? capi.sqlite3_bind_parameter_name(this.pointer, ndx)\n              : undefined;\n          },\n\n          isBusy: function () {\n            return 0 !== capi.sqlite3_stmt_busy(affirmStmtOpen(this));\n          },\n\n          isReadOnly: function () {\n            return 0 !== capi.sqlite3_stmt_readonly(affirmStmtOpen(this));\n          },\n        };\n\n        {\n          const prop = {\n            enumerable: true,\n            get: function () {\n              return __ptrMap.get(this);\n            },\n            set: () => toss3('The pointer property is read-only.'),\n          };\n          Object.defineProperty(Stmt.prototype, 'pointer', prop);\n          Object.defineProperty(DB.prototype, 'pointer', prop);\n        }\n\n        Object.defineProperty(Stmt.prototype, 'columnCount', {\n          enumerable: false,\n          get: function () {\n            return capi.sqlite3_column_count(this.pointer);\n          },\n          set: () => toss3('The columnCount property is read-only.'),\n        });\n\n        sqlite3.oo1 = {\n          DB,\n          Stmt,\n        };\n\n        if (util.isUIThread()) {\n          sqlite3.oo1.JsStorageDb = function (storageName = 'session') {\n            const opt = dbCtorHelper.normalizeArgs(...arguments);\n            storageName = opt.filename;\n            if ('session' !== storageName && 'local' !== storageName) {\n              toss3(\"JsStorageDb db name must be one of 'session' or 'local'.\");\n            }\n            opt.vfs = 'kvvfs';\n            dbCtorHelper.call(this, opt);\n          };\n          const jdb = sqlite3.oo1.JsStorageDb;\n          jdb.prototype = Object.create(DB.prototype);\n\n          jdb.clearStorage = capi.sqlite3_js_kvvfs_clear;\n\n          jdb.prototype.clearStorage = function () {\n            return jdb.clearStorage(affirmDbOpen(this).filename);\n          };\n\n          jdb.storageSize = capi.sqlite3_js_kvvfs_size;\n\n          jdb.prototype.storageSize = function () {\n            return jdb.storageSize(affirmDbOpen(this).filename);\n          };\n        }\n      });\n\n      globalThis.sqlite3ApiBootstrap.initializers.push(function (sqlite3) {\n        const util = sqlite3.util;\n        sqlite3.initWorker1API = function () {\n          'use strict';\n          const toss = (...args) => {\n            throw new Error(args.join(' '));\n          };\n          if (!(globalThis.WorkerGlobalScope instanceof Function)) {\n            toss('initWorker1API() must be run from a Worker thread.');\n          }\n          const sqlite3 = this.sqlite3 || toss('Missing this.sqlite3 object.');\n          const DB = sqlite3.oo1.DB;\n\n          const getDbId = function (db) {\n            let id = wState.idMap.get(db);\n            if (id) return id;\n            id = 'db#' + ++wState.idSeq + '@' + db.pointer;\n\n            wState.idMap.set(db, id);\n            return id;\n          };\n\n          const wState = {\n            dbList: [],\n\n            idSeq: 0,\n\n            idMap: new WeakMap(),\n\n            xfer: [],\n            open: function (opt) {\n              const db = new DB(opt);\n              this.dbs[getDbId(db)] = db;\n              if (this.dbList.indexOf(db) < 0) this.dbList.push(db);\n              return db;\n            },\n            close: function (db, alsoUnlink) {\n              if (db) {\n                delete this.dbs[getDbId(db)];\n                const filename = db.filename;\n                const pVfs = util.sqlite3__wasm_db_vfs(db.pointer, 0);\n                db.close();\n                const ddNdx = this.dbList.indexOf(db);\n                if (ddNdx >= 0) this.dbList.splice(ddNdx, 1);\n                if (alsoUnlink && filename && pVfs) {\n                  util.sqlite3__wasm_vfs_unlink(pVfs, filename);\n                }\n              }\n            },\n\n            post: function (msg, xferList) {\n              if (xferList && xferList.length) {\n                globalThis.postMessage(msg, Array.from(xferList));\n                xferList.length = 0;\n              } else {\n                globalThis.postMessage(msg);\n              }\n            },\n\n            dbs: Object.create(null),\n\n            getDb: function (id, require = true) {\n              return (\n                this.dbs[id] ||\n                (require ? toss('Unknown (or closed) DB ID:', id) : undefined)\n              );\n            },\n          };\n\n          const affirmDbOpen = function (db = wState.dbList[0]) {\n            return db && db.pointer ? db : toss('DB is not opened.');\n          };\n\n          const getMsgDb = function (msgData, affirmExists = true) {\n            const db = wState.getDb(msgData.dbId, false) || wState.dbList[0];\n            return affirmExists ? affirmDbOpen(db) : db;\n          };\n\n          const getDefaultDbId = function () {\n            return wState.dbList[0] && getDbId(wState.dbList[0]);\n          };\n\n          const isSpecialDbFilename = (n) => {\n            return '' === n || ':' === n[0];\n          };\n\n          const wMsgHandler = {\n            open: function (ev) {\n              const oargs = Object.create(null),\n                args = ev.args || Object.create(null);\n              if (args.simulateError) {\n                toss('Throwing because of simulateError flag.');\n              }\n              const rc = Object.create(null);\n              oargs.vfs = args.vfs;\n              oargs.filename = args.filename || '';\n              const db = wState.open(oargs);\n              rc.filename = db.filename;\n              rc.persistent = !!sqlite3.capi.sqlite3_js_db_uses_vfs(\n                db.pointer,\n                'opfs',\n              );\n              rc.dbId = getDbId(db);\n              rc.vfs = db.dbVfsName();\n              return rc;\n            },\n\n            close: function (ev) {\n              const db = getMsgDb(ev, false);\n              const response = {\n                filename: db && db.filename,\n              };\n              if (db) {\n                const doUnlink =\n                  ev.args && 'object' === typeof ev.args\n                    ? !!ev.args.unlink\n                    : false;\n                wState.close(db, doUnlink);\n              }\n              return response;\n            },\n\n            exec: function (ev) {\n              const rc =\n                'string' === typeof ev.args\n                  ? { sql: ev.args }\n                  : ev.args || Object.create(null);\n              if ('stmt' === rc.rowMode) {\n                toss(\n                  \"Invalid rowMode for 'exec': stmt mode\",\n                  'does not work in the Worker API.',\n                );\n              } else if (!rc.sql) {\n                toss(\"'exec' requires input SQL.\");\n              }\n              const db = getMsgDb(ev);\n              if (rc.callback || Array.isArray(rc.resultRows)) {\n                db._blobXfer = wState.xfer;\n              }\n              const theCallback = rc.callback;\n              let rowNumber = 0;\n              const hadColNames = !!rc.columnNames;\n              if ('string' === typeof theCallback) {\n                if (!hadColNames) rc.columnNames = [];\n\n                rc.callback = function (row, stmt) {\n                  wState.post(\n                    {\n                      type: theCallback,\n                      columnNames: rc.columnNames,\n                      rowNumber: ++rowNumber,\n                      row: row,\n                    },\n                    wState.xfer,\n                  );\n                };\n              }\n              try {\n                const changeCount = !!rc.countChanges\n                  ? db.changes(true, 64 === rc.countChanges)\n                  : undefined;\n                db.exec(rc);\n                if (undefined !== changeCount) {\n                  rc.changeCount =\n                    db.changes(true, 64 === rc.countChanges) - changeCount;\n                }\n                if (rc.callback instanceof Function) {\n                  rc.callback = theCallback;\n\n                  wState.post({\n                    type: theCallback,\n                    columnNames: rc.columnNames,\n                    rowNumber: null,\n                    row: undefined,\n                  });\n                }\n              } finally {\n                delete db._blobXfer;\n                if (rc.callback) rc.callback = theCallback;\n              }\n              return rc;\n            },\n\n            'config-get': function () {\n              const rc = Object.create(null),\n                src = sqlite3.config;\n              ['bigIntEnabled'].forEach(function (k) {\n                if (Object.getOwnPropertyDescriptor(src, k)) rc[k] = src[k];\n              });\n              rc.version = sqlite3.version;\n              rc.vfsList = sqlite3.capi.sqlite3_js_vfs_list();\n              return rc;\n            },\n\n            export: function (ev) {\n              const db = getMsgDb(ev);\n              const response = {\n                byteArray: sqlite3.capi.sqlite3_js_db_export(db.pointer),\n                filename: db.filename,\n                mimetype: 'application/x-sqlite3',\n              };\n              wState.xfer.push(response.byteArray.buffer);\n              return response;\n            },\n\n            toss: function (ev) {\n              toss('Testing worker exception');\n            },\n          };\n\n          globalThis.onmessage = async function (ev) {\n            ev = ev.data;\n            let result,\n              dbId = ev.dbId,\n              evType = ev.type;\n            const arrivalTime = performance.now();\n            try {\n              if (\n                wMsgHandler.hasOwnProperty(evType) &&\n                wMsgHandler[evType] instanceof Function\n              ) {\n                result = await wMsgHandler[evType](ev);\n              } else {\n                toss('Unknown db worker message type:', ev.type);\n              }\n            } catch (err) {\n              evType = 'error';\n              result = {\n                operation: ev.type,\n                message: err.message,\n                errorClass: err.name,\n                input: ev,\n              };\n              if (err.stack) {\n                result.stack =\n                  'string' === typeof err.stack\n                    ? err.stack.split(/\\n\\s*/)\n                    : err.stack;\n              }\n              if (false)\n                {}\n            }\n            if (!dbId) {\n              dbId = result.dbId || getDefaultDbId();\n            }\n\n            wState.post(\n              {\n                type: evType,\n                dbId: dbId,\n                messageId: ev.messageId,\n                workerReceivedTime: arrivalTime,\n                workerRespondTime: performance.now(),\n                departureTime: ev.departureTime,\n\n                result: result,\n              },\n              wState.xfer,\n            );\n          };\n          globalThis.postMessage({\n            type: 'sqlite3-api',\n            result: 'worker1-ready',\n          });\n        }.bind({ sqlite3 });\n      });\n\n      ('use strict');\n      globalThis.sqlite3ApiBootstrap.initializers.push(function (sqlite3) {\n        const wasm = sqlite3.wasm,\n          capi = sqlite3.capi,\n          toss = sqlite3.util.toss3;\n        const vfs = Object.create(null);\n        sqlite3.vfs = vfs;\n\n        capi.sqlite3_vfs.prototype.registerVfs = function (asDefault = false) {\n          if (!(this instanceof sqlite3.capi.sqlite3_vfs)) {\n            toss('Expecting a sqlite3_vfs-type argument.');\n          }\n          const rc = capi.sqlite3_vfs_register(this, asDefault ? 1 : 0);\n          if (rc) {\n            toss('sqlite3_vfs_register(', this, ') failed with rc', rc);\n          }\n          if (this.pointer !== capi.sqlite3_vfs_find(this.$zName)) {\n            toss(\n              'BUG: sqlite3_vfs_find(vfs.$zName) failed for just-installed VFS',\n              this,\n            );\n          }\n          return this;\n        };\n\n        vfs.installVfs = function (opt) {\n          let count = 0;\n          const propList = ['io', 'vfs'];\n          for (const key of propList) {\n            const o = opt[key];\n            if (o) {\n              ++count;\n              o.struct.installMethods(o.methods, !!o.applyArgcCheck);\n              if ('vfs' === key) {\n                if (!o.struct.$zName && 'string' === typeof o.name) {\n                  o.struct.addOnDispose(\n                    (o.struct.$zName = wasm.allocCString(o.name)),\n                  );\n                }\n                o.struct.registerVfs(!!o.asDefault);\n              }\n            }\n          }\n          if (!count)\n            toss(\n              'Misuse: installVfs() options object requires at least',\n              'one of:',\n              propList,\n            );\n          return this;\n        };\n      });\n\n      ('use strict');\n      globalThis.sqlite3ApiBootstrap.initializers.push(function (sqlite3) {\n        if (!sqlite3.wasm.exports.sqlite3_declare_vtab) {\n          return;\n        }\n        const wasm = sqlite3.wasm,\n          capi = sqlite3.capi,\n          toss = sqlite3.util.toss3;\n        const vtab = Object.create(null);\n        sqlite3.vtab = vtab;\n\n        const sii = capi.sqlite3_index_info;\n\n        sii.prototype.nthConstraint = function (n, asPtr = false) {\n          if (n < 0 || n >= this.$nConstraint) return false;\n          const ptr =\n            this.$aConstraint +\n            sii.sqlite3_index_constraint.structInfo.sizeof * n;\n          return asPtr ? ptr : new sii.sqlite3_index_constraint(ptr);\n        };\n\n        sii.prototype.nthConstraintUsage = function (n, asPtr = false) {\n          if (n < 0 || n >= this.$nConstraint) return false;\n          const ptr =\n            this.$aConstraintUsage +\n            sii.sqlite3_index_constraint_usage.structInfo.sizeof * n;\n          return asPtr ? ptr : new sii.sqlite3_index_constraint_usage(ptr);\n        };\n\n        sii.prototype.nthOrderBy = function (n, asPtr = false) {\n          if (n < 0 || n >= this.$nOrderBy) return false;\n          const ptr =\n            this.$aOrderBy + sii.sqlite3_index_orderby.structInfo.sizeof * n;\n          return asPtr ? ptr : new sii.sqlite3_index_orderby(ptr);\n        };\n\n        const __xWrapFactory = function (methodName, StructType) {\n          return function (ptr, removeMapping = false) {\n            if (0 === arguments.length) ptr = new StructType();\n            if (ptr instanceof StructType) {\n              this.set(ptr.pointer, ptr);\n              return ptr;\n            } else if (!wasm.isPtr(ptr)) {\n              sqlite3.SQLite3Error.toss(\n                'Invalid argument to',\n                methodName + '()',\n              );\n            }\n            let rc = this.get(ptr);\n            if (removeMapping) this.delete(ptr);\n            return rc;\n          }.bind(new Map());\n        };\n\n        const StructPtrMapper = function (name, StructType) {\n          const __xWrap = __xWrapFactory(name, StructType);\n\n          return Object.assign(Object.create(null), {\n            StructType,\n\n            create: (ppOut) => {\n              const rc = __xWrap();\n              wasm.pokePtr(ppOut, rc.pointer);\n              return rc;\n            },\n\n            get: (pCObj) => __xWrap(pCObj),\n\n            unget: (pCObj) => __xWrap(pCObj, true),\n\n            dispose: (pCObj) => {\n              const o = __xWrap(pCObj, true);\n              if (o) o.dispose();\n            },\n          });\n        };\n\n        vtab.xVtab = StructPtrMapper('xVtab', capi.sqlite3_vtab);\n\n        vtab.xCursor = StructPtrMapper('xCursor', capi.sqlite3_vtab_cursor);\n\n        vtab.xIndexInfo = (pIdxInfo) => new capi.sqlite3_index_info(pIdxInfo);\n\n        vtab.xError = function f(methodName, err, defaultRc) {\n          if (f.errorReporter instanceof Function) {\n            try {\n              f.errorReporter(\n                'sqlite3_module::' + methodName + '(): ' + err.message,\n              );\n            } catch (e) {}\n          }\n          let rc;\n          if (err instanceof sqlite3.WasmAllocError) rc = capi.SQLITE_NOMEM;\n          else if (arguments.length > 2) rc = defaultRc;\n          else if (err instanceof sqlite3.SQLite3Error) rc = err.resultCode;\n          return rc || capi.SQLITE_ERROR;\n        };\n        vtab.xError.errorReporter =  true ? console.error.bind(console) : 0;\n\n        vtab.xRowid = (ppRowid64, value) => wasm.poke(ppRowid64, value, 'i64');\n\n        vtab.setupModule = function (opt) {\n          let createdMod = false;\n          const mod =\n            this instanceof capi.sqlite3_module\n              ? this\n              : opt.struct || (createdMod = new capi.sqlite3_module());\n          try {\n            const methods = opt.methods || toss(\"Missing 'methods' object.\");\n            for (const e of Object.entries({\n              xConnect: 'xCreate',\n              xDisconnect: 'xDestroy',\n            })) {\n              const k = e[0],\n                v = e[1];\n              if (true === methods[k]) methods[k] = methods[v];\n              else if (true === methods[v]) methods[v] = methods[k];\n            }\n            if (opt.catchExceptions) {\n              const fwrap = function (methodName, func) {\n                if (['xConnect', 'xCreate'].indexOf(methodName) >= 0) {\n                  return function (pDb, pAux, argc, argv, ppVtab, pzErr) {\n                    try {\n                      return func(...arguments) || 0;\n                    } catch (e) {\n                      if (!(e instanceof sqlite3.WasmAllocError)) {\n                        wasm.dealloc(wasm.peekPtr(pzErr));\n                        wasm.pokePtr(pzErr, wasm.allocCString(e.message));\n                      }\n                      return vtab.xError(methodName, e);\n                    }\n                  };\n                } else {\n                  return function (...args) {\n                    try {\n                      return func(...args) || 0;\n                    } catch (e) {\n                      return vtab.xError(methodName, e);\n                    }\n                  };\n                }\n              };\n              const mnames = [\n                'xCreate',\n                'xConnect',\n                'xBestIndex',\n                'xDisconnect',\n                'xDestroy',\n                'xOpen',\n                'xClose',\n                'xFilter',\n                'xNext',\n                'xEof',\n                'xColumn',\n                'xRowid',\n                'xUpdate',\n                'xBegin',\n                'xSync',\n                'xCommit',\n                'xRollback',\n                'xFindFunction',\n                'xRename',\n                'xSavepoint',\n                'xRelease',\n                'xRollbackTo',\n                'xShadowName',\n              ];\n              const remethods = Object.create(null);\n              for (const k of mnames) {\n                const m = methods[k];\n                if (!(m instanceof Function)) continue;\n                else if ('xConnect' === k && methods.xCreate === m) {\n                  remethods[k] = methods.xCreate;\n                } else if ('xCreate' === k && methods.xConnect === m) {\n                  remethods[k] = methods.xConnect;\n                } else {\n                  remethods[k] = fwrap(k, m);\n                }\n              }\n              mod.installMethods(remethods, false);\n            } else {\n              mod.installMethods(methods, !!opt.applyArgcCheck);\n            }\n            if (0 === mod.$iVersion) {\n              let v;\n              if ('number' === typeof opt.iVersion) v = opt.iVersion;\n              else if (mod.$xShadowName) v = 3;\n              else if (mod.$xSavePoint || mod.$xRelease || mod.$xRollbackTo)\n                v = 2;\n              else v = 1;\n              mod.$iVersion = v;\n            }\n          } catch (e) {\n            if (createdMod) createdMod.dispose();\n            throw e;\n          }\n          return mod;\n        };\n\n        capi.sqlite3_module.prototype.setupModule = function (opt) {\n          return vtab.setupModule.call(this, opt);\n        };\n      });\n\n      ('use strict');\n      globalThis.sqlite3ApiBootstrap.initializers.push(function (sqlite3) {\n        const installOpfsVfs = function callee(options) {\n          if (!globalThis.SharedArrayBuffer || !globalThis.Atomics) {\n            return Promise.reject(\n              new Error(\n                'Cannot install OPFS: Missing SharedArrayBuffer and/or Atomics. ' +\n                  'The server must emit the COOP/COEP response headers to enable those. ' +\n                  'See https://sqlite.org/wasm/doc/trunk/persistence.md#coop-coep',\n              ),\n            );\n          } else if ('undefined' === typeof WorkerGlobalScope) {\n            return Promise.reject(\n              new Error(\n                'The OPFS sqlite3_vfs cannot run in the main thread ' +\n                  'because it requires Atomics.wait().',\n              ),\n            );\n          } else if (\n            !globalThis.FileSystemHandle ||\n            !globalThis.FileSystemDirectoryHandle ||\n            !globalThis.FileSystemFileHandle ||\n            !globalThis.FileSystemFileHandle.prototype.createSyncAccessHandle ||\n            !navigator?.storage?.getDirectory\n          ) {\n            return Promise.reject(new Error('Missing required OPFS APIs.'));\n          }\n          if (!options || 'object' !== typeof options) {\n            options = Object.create(null);\n          }\n          const urlParams = new URL(globalThis.location.href).searchParams;\n          if (urlParams.has('opfs-disable')) {\n            return Promise.resolve(sqlite3);\n          }\n          if (undefined === options.verbose) {\n            options.verbose = urlParams.has('opfs-verbose')\n              ? +urlParams.get('opfs-verbose') || 2\n              : 1;\n          }\n          if (undefined === options.sanityChecks) {\n            options.sanityChecks = urlParams.has('opfs-sanity-check');\n          }\n          if (undefined === options.proxyUri) {\n            options.proxyUri = callee.defaultProxyUri;\n          }\n\n          if ('function' === typeof options.proxyUri) {\n            options.proxyUri = options.proxyUri();\n          }\n          const thePromise = new Promise(function (\n            promiseResolve_,\n            promiseReject_,\n          ) {\n            const loggers = [\n              sqlite3.config.error,\n              sqlite3.config.warn,\n              sqlite3.config.log,\n            ];\n            const logImpl = (level, ...args) => {\n              if (options.verbose > level)\n                loggers[level]('OPFS syncer:', ...args);\n            };\n            const log = (...args) => logImpl(2, ...args);\n            const warn = (...args) => logImpl(1, ...args);\n            const error = (...args) => logImpl(0, ...args);\n            const toss = sqlite3.util.toss;\n            const capi = sqlite3.capi;\n            const util = sqlite3.util;\n            const wasm = sqlite3.wasm;\n            const sqlite3_vfs = capi.sqlite3_vfs;\n            const sqlite3_file = capi.sqlite3_file;\n            const sqlite3_io_methods = capi.sqlite3_io_methods;\n\n            const opfsUtil = Object.create(null);\n\n            const thisThreadHasOPFS = () => {\n              return (\n                globalThis.FileSystemHandle &&\n                globalThis.FileSystemDirectoryHandle &&\n                globalThis.FileSystemFileHandle &&\n                globalThis.FileSystemFileHandle.prototype\n                  .createSyncAccessHandle &&\n                navigator?.storage?.getDirectory\n              );\n            };\n\n            opfsUtil.metrics = {\n              dump: function () {\n                let k,\n                  n = 0,\n                  t = 0,\n                  w = 0;\n                for (k in state.opIds) {\n                  const m = metrics[k];\n                  n += m.count;\n                  t += m.time;\n                  w += m.wait;\n                  m.avgTime = m.count && m.time ? m.time / m.count : 0;\n                  m.avgWait = m.count && m.wait ? m.wait / m.count : 0;\n                }\n                sqlite3.config.log(\n                  globalThis.location.href,\n                  'metrics for',\n                  globalThis.location.href,\n                  ':',\n                  metrics,\n                  '\\nTotal of',\n                  n,\n                  'op(s) for',\n                  t,\n                  'ms (incl. ' + w + ' ms of waiting on the async side)',\n                );\n                sqlite3.config.log('Serialization metrics:', metrics.s11n);\n                W.postMessage({ type: 'opfs-async-metrics' });\n              },\n              reset: function () {\n                let k;\n                const r = (m) => (m.count = m.time = m.wait = 0);\n                for (k in state.opIds) {\n                  r((metrics[k] = Object.create(null)));\n                }\n                let s = (metrics.s11n = Object.create(null));\n                s = s.serialize = Object.create(null);\n                s.count = s.time = 0;\n                s = metrics.s11n.deserialize = Object.create(null);\n                s.count = s.time = 0;\n              },\n            };\n            const opfsIoMethods = new sqlite3_io_methods();\n            const opfsVfs = new sqlite3_vfs().addOnDispose(() =>\n              opfsIoMethods.dispose(),\n            );\n            let promiseWasRejected = undefined;\n            const promiseReject = (err) => {\n              promiseWasRejected = true;\n              opfsVfs.dispose();\n              return promiseReject_(err);\n            };\n            const promiseResolve = () => {\n              promiseWasRejected = false;\n              return promiseResolve_(sqlite3);\n            };\n            const W = new Worker(\n              __webpack_require__.tu(new URL(/* worker import */ __webpack_require__.p + __webpack_require__.u(\"_app-pages-browser_node_modules_pnpm_sqlite_org_sqlite-wasm_3_49_1-build2_node_modules_sqlite-84e6ae\"), __webpack_require__.b)),\n            );\n            setTimeout(() => {\n              if (undefined === promiseWasRejected) {\n                promiseReject(\n                  new Error(\n                    'Timeout while waiting for OPFS async proxy worker.',\n                  ),\n                );\n              }\n            }, 4000);\n            W._originalOnError = W.onerror;\n            W.onerror = function (err) {\n              error('Error initializing OPFS asyncer:', err);\n              promiseReject(\n                new Error(\n                  'Loading OPFS async Worker failed for unknown reasons.',\n                ),\n              );\n            };\n            const pDVfs = capi.sqlite3_vfs_find(null);\n            const dVfs = pDVfs ? new sqlite3_vfs(pDVfs) : null;\n            opfsIoMethods.$iVersion = 1;\n            opfsVfs.$iVersion = 2;\n            opfsVfs.$szOsFile = capi.sqlite3_file.structInfo.sizeof;\n            opfsVfs.$mxPathname = 1024;\n            opfsVfs.$zName = wasm.allocCString('opfs');\n\n            opfsVfs.$xDlOpen =\n              opfsVfs.$xDlError =\n              opfsVfs.$xDlSym =\n              opfsVfs.$xDlClose =\n                null;\n            opfsVfs.addOnDispose(\n              '$zName',\n              opfsVfs.$zName,\n              'cleanup default VFS wrapper',\n              () => (dVfs ? dVfs.dispose() : null),\n            );\n\n            const state = Object.create(null);\n            state.verbose = options.verbose;\n            state.littleEndian = (() => {\n              const buffer = new ArrayBuffer(2);\n              new DataView(buffer).setInt16(0, 256, true);\n\n              return new Int16Array(buffer)[0] === 256;\n            })();\n\n            state.asyncIdleWaitTime = 150;\n\n            state.asyncS11nExceptions = 1;\n\n            state.fileBufferSize = 1024 * 64;\n            state.sabS11nOffset = state.fileBufferSize;\n\n            state.sabS11nSize = opfsVfs.$mxPathname * 2;\n\n            state.sabIO = new SharedArrayBuffer(\n              state.fileBufferSize + state.sabS11nSize,\n            );\n            state.opIds = Object.create(null);\n            const metrics = Object.create(null);\n            {\n              let i = 0;\n\n              state.opIds.whichOp = i++;\n\n              state.opIds.rc = i++;\n\n              state.opIds.xAccess = i++;\n              state.opIds.xClose = i++;\n              state.opIds.xDelete = i++;\n              state.opIds.xDeleteNoWait = i++;\n              state.opIds.xFileSize = i++;\n              state.opIds.xLock = i++;\n              state.opIds.xOpen = i++;\n              state.opIds.xRead = i++;\n              state.opIds.xSleep = i++;\n              state.opIds.xSync = i++;\n              state.opIds.xTruncate = i++;\n              state.opIds.xUnlock = i++;\n              state.opIds.xWrite = i++;\n              state.opIds.mkdir = i++;\n              state.opIds['opfs-async-metrics'] = i++;\n              state.opIds['opfs-async-shutdown'] = i++;\n\n              state.opIds.retry = i++;\n              state.sabOP = new SharedArrayBuffer(i * 4);\n              opfsUtil.metrics.reset();\n            }\n\n            state.sq3Codes = Object.create(null);\n            [\n              'SQLITE_ACCESS_EXISTS',\n              'SQLITE_ACCESS_READWRITE',\n              'SQLITE_BUSY',\n              'SQLITE_CANTOPEN',\n              'SQLITE_ERROR',\n              'SQLITE_IOERR',\n              'SQLITE_IOERR_ACCESS',\n              'SQLITE_IOERR_CLOSE',\n              'SQLITE_IOERR_DELETE',\n              'SQLITE_IOERR_FSYNC',\n              'SQLITE_IOERR_LOCK',\n              'SQLITE_IOERR_READ',\n              'SQLITE_IOERR_SHORT_READ',\n              'SQLITE_IOERR_TRUNCATE',\n              'SQLITE_IOERR_UNLOCK',\n              'SQLITE_IOERR_WRITE',\n              'SQLITE_LOCK_EXCLUSIVE',\n              'SQLITE_LOCK_NONE',\n              'SQLITE_LOCK_PENDING',\n              'SQLITE_LOCK_RESERVED',\n              'SQLITE_LOCK_SHARED',\n              'SQLITE_LOCKED',\n              'SQLITE_MISUSE',\n              'SQLITE_NOTFOUND',\n              'SQLITE_OPEN_CREATE',\n              'SQLITE_OPEN_DELETEONCLOSE',\n              'SQLITE_OPEN_MAIN_DB',\n              'SQLITE_OPEN_READONLY',\n            ].forEach((k) => {\n              if (undefined === (state.sq3Codes[k] = capi[k])) {\n                toss('Maintenance required: not found:', k);\n              }\n            });\n            state.opfsFlags = Object.assign(Object.create(null), {\n              OPFS_UNLOCK_ASAP: 0x01,\n\n              OPFS_UNLINK_BEFORE_OPEN: 0x02,\n\n              defaultUnlockAsap: false,\n            });\n\n            const opRun = (op, ...args) => {\n              const opNdx = state.opIds[op] || toss('Invalid op ID:', op);\n              state.s11n.serialize(...args);\n              Atomics.store(state.sabOPView, state.opIds.rc, -1);\n              Atomics.store(state.sabOPView, state.opIds.whichOp, opNdx);\n              Atomics.notify(state.sabOPView, state.opIds.whichOp);\n              const t = performance.now();\n              while (\n                'not-equal' !==\n                Atomics.wait(state.sabOPView, state.opIds.rc, -1)\n              ) {}\n\n              const rc = Atomics.load(state.sabOPView, state.opIds.rc);\n              metrics[op].wait += performance.now() - t;\n              if (rc && state.asyncS11nExceptions) {\n                const err = state.s11n.deserialize();\n                if (err) error(op + '() async error:', ...err);\n              }\n              return rc;\n            };\n\n            opfsUtil.debug = {\n              asyncShutdown: () => {\n                warn(\n                  'Shutting down OPFS async listener. The OPFS VFS will no longer work.',\n                );\n                opRun('opfs-async-shutdown');\n              },\n              asyncRestart: () => {\n                warn(\n                  'Attempting to restart OPFS VFS async listener. Might work, might not.',\n                );\n                W.postMessage({ type: 'opfs-async-restart' });\n              },\n            };\n\n            const initS11n = () => {\n              if (state.s11n) return state.s11n;\n              const textDecoder = new TextDecoder(),\n                textEncoder = new TextEncoder('utf-8'),\n                viewU8 = new Uint8Array(\n                  state.sabIO,\n                  state.sabS11nOffset,\n                  state.sabS11nSize,\n                ),\n                viewDV = new DataView(\n                  state.sabIO,\n                  state.sabS11nOffset,\n                  state.sabS11nSize,\n                );\n              state.s11n = Object.create(null);\n\n              const TypeIds = Object.create(null);\n              TypeIds.number = {\n                id: 1,\n                size: 8,\n                getter: 'getFloat64',\n                setter: 'setFloat64',\n              };\n              TypeIds.bigint = {\n                id: 2,\n                size: 8,\n                getter: 'getBigInt64',\n                setter: 'setBigInt64',\n              };\n              TypeIds.boolean = {\n                id: 3,\n                size: 4,\n                getter: 'getInt32',\n                setter: 'setInt32',\n              };\n              TypeIds.string = { id: 4 };\n\n              const getTypeId = (v) =>\n                TypeIds[typeof v] ||\n                toss(\n                  'Maintenance required: this value type cannot be serialized.',\n                  v,\n                );\n              const getTypeIdById = (tid) => {\n                switch (tid) {\n                  case TypeIds.number.id:\n                    return TypeIds.number;\n                  case TypeIds.bigint.id:\n                    return TypeIds.bigint;\n                  case TypeIds.boolean.id:\n                    return TypeIds.boolean;\n                  case TypeIds.string.id:\n                    return TypeIds.string;\n                  default:\n                    toss('Invalid type ID:', tid);\n                }\n              };\n\n              state.s11n.deserialize = function (clear = false) {\n                ++metrics.s11n.deserialize.count;\n                const t = performance.now();\n                const argc = viewU8[0];\n                const rc = argc ? [] : null;\n                if (argc) {\n                  const typeIds = [];\n                  let offset = 1,\n                    i,\n                    n,\n                    v;\n                  for (i = 0; i < argc; ++i, ++offset) {\n                    typeIds.push(getTypeIdById(viewU8[offset]));\n                  }\n                  for (i = 0; i < argc; ++i) {\n                    const t = typeIds[i];\n                    if (t.getter) {\n                      v = viewDV[t.getter](offset, state.littleEndian);\n                      offset += t.size;\n                    } else {\n                      n = viewDV.getInt32(offset, state.littleEndian);\n                      offset += 4;\n                      v = textDecoder.decode(viewU8.slice(offset, offset + n));\n                      offset += n;\n                    }\n                    rc.push(v);\n                  }\n                }\n                if (clear) viewU8[0] = 0;\n\n                metrics.s11n.deserialize.time += performance.now() - t;\n                return rc;\n              };\n\n              state.s11n.serialize = function (...args) {\n                const t = performance.now();\n                ++metrics.s11n.serialize.count;\n                if (args.length) {\n                  const typeIds = [];\n                  let i = 0,\n                    offset = 1;\n                  viewU8[0] = args.length & 0xff;\n                  for (; i < args.length; ++i, ++offset) {\n                    typeIds.push(getTypeId(args[i]));\n                    viewU8[offset] = typeIds[i].id;\n                  }\n                  for (i = 0; i < args.length; ++i) {\n                    const t = typeIds[i];\n                    if (t.setter) {\n                      viewDV[t.setter](offset, args[i], state.littleEndian);\n                      offset += t.size;\n                    } else {\n                      const s = textEncoder.encode(args[i]);\n                      viewDV.setInt32(offset, s.byteLength, state.littleEndian);\n                      offset += 4;\n                      viewU8.set(s, offset);\n                      offset += s.byteLength;\n                    }\n                  }\n                } else {\n                  viewU8[0] = 0;\n                }\n                metrics.s11n.serialize.time += performance.now() - t;\n              };\n              return state.s11n;\n            };\n\n            const randomFilename = function f(len = 16) {\n              if (!f._chars) {\n                f._chars =\n                  'abcdefghijklmnopqrstuvwxyz' +\n                  'ABCDEFGHIJKLMNOPQRSTUVWXYZ' +\n                  '012346789';\n                f._n = f._chars.length;\n              }\n              const a = [];\n              let i = 0;\n              for (; i < len; ++i) {\n                const ndx = (Math.random() * (f._n * 64)) % f._n | 0;\n                a[i] = f._chars[ndx];\n              }\n              return a.join('');\n            };\n\n            const __openFiles = Object.create(null);\n\n            const opTimer = Object.create(null);\n            opTimer.op = undefined;\n            opTimer.start = undefined;\n            const mTimeStart = (op) => {\n              opTimer.start = performance.now();\n              opTimer.op = op;\n              ++metrics[op].count;\n            };\n            const mTimeEnd = () =>\n              (metrics[opTimer.op].time += performance.now() - opTimer.start);\n\n            const ioSyncWrappers = {\n              xCheckReservedLock: function (pFile, pOut) {\n                wasm.poke(pOut, 0, 'i32');\n                return 0;\n              },\n              xClose: function (pFile) {\n                mTimeStart('xClose');\n                let rc = 0;\n                const f = __openFiles[pFile];\n                if (f) {\n                  delete __openFiles[pFile];\n                  rc = opRun('xClose', pFile);\n                  if (f.sq3File) f.sq3File.dispose();\n                }\n                mTimeEnd();\n                return rc;\n              },\n              xDeviceCharacteristics: function (pFile) {\n                return capi.SQLITE_IOCAP_UNDELETABLE_WHEN_OPEN;\n              },\n              xFileControl: function (pFile, opId, pArg) {\n                return capi.SQLITE_NOTFOUND;\n              },\n              xFileSize: function (pFile, pSz64) {\n                mTimeStart('xFileSize');\n                let rc = opRun('xFileSize', pFile);\n                if (0 == rc) {\n                  try {\n                    const sz = state.s11n.deserialize()[0];\n                    wasm.poke(pSz64, sz, 'i64');\n                  } catch (e) {\n                    error('Unexpected error reading xFileSize() result:', e);\n                    rc = state.sq3Codes.SQLITE_IOERR;\n                  }\n                }\n                mTimeEnd();\n                return rc;\n              },\n              xLock: function (pFile, lockType) {\n                mTimeStart('xLock');\n                const f = __openFiles[pFile];\n                let rc = 0;\n\n                if (!f.lockType) {\n                  rc = opRun('xLock', pFile, lockType);\n                  if (0 === rc) f.lockType = lockType;\n                } else {\n                  f.lockType = lockType;\n                }\n                mTimeEnd();\n                return rc;\n              },\n              xRead: function (pFile, pDest, n, offset64) {\n                mTimeStart('xRead');\n                const f = __openFiles[pFile];\n                let rc;\n                try {\n                  rc = opRun('xRead', pFile, n, Number(offset64));\n                  if (0 === rc || capi.SQLITE_IOERR_SHORT_READ === rc) {\n                    wasm.heap8u().set(f.sabView.subarray(0, n), pDest);\n                  }\n                } catch (e) {\n                  error('xRead(', arguments, ') failed:', e, f);\n                  rc = capi.SQLITE_IOERR_READ;\n                }\n                mTimeEnd();\n                return rc;\n              },\n              xSync: function (pFile, flags) {\n                mTimeStart('xSync');\n                ++metrics.xSync.count;\n                const rc = opRun('xSync', pFile, flags);\n                mTimeEnd();\n                return rc;\n              },\n              xTruncate: function (pFile, sz64) {\n                mTimeStart('xTruncate');\n                const rc = opRun('xTruncate', pFile, Number(sz64));\n                mTimeEnd();\n                return rc;\n              },\n              xUnlock: function (pFile, lockType) {\n                mTimeStart('xUnlock');\n                const f = __openFiles[pFile];\n                let rc = 0;\n                if (capi.SQLITE_LOCK_NONE === lockType && f.lockType) {\n                  rc = opRun('xUnlock', pFile, lockType);\n                }\n                if (0 === rc) f.lockType = lockType;\n                mTimeEnd();\n                return rc;\n              },\n              xWrite: function (pFile, pSrc, n, offset64) {\n                mTimeStart('xWrite');\n                const f = __openFiles[pFile];\n                let rc;\n                try {\n                  f.sabView.set(wasm.heap8u().subarray(pSrc, pSrc + n));\n                  rc = opRun('xWrite', pFile, n, Number(offset64));\n                } catch (e) {\n                  error('xWrite(', arguments, ') failed:', e, f);\n                  rc = capi.SQLITE_IOERR_WRITE;\n                }\n                mTimeEnd();\n                return rc;\n              },\n            };\n\n            const vfsSyncWrappers = {\n              xAccess: function (pVfs, zName, flags, pOut) {\n                mTimeStart('xAccess');\n                const rc = opRun('xAccess', wasm.cstrToJs(zName));\n                wasm.poke(pOut, rc ? 0 : 1, 'i32');\n                mTimeEnd();\n                return 0;\n              },\n              xCurrentTime: function (pVfs, pOut) {\n                wasm.poke(\n                  pOut,\n                  2440587.5 + new Date().getTime() / 86400000,\n                  'double',\n                );\n                return 0;\n              },\n              xCurrentTimeInt64: function (pVfs, pOut) {\n                wasm.poke(\n                  pOut,\n                  2440587.5 * 86400000 + new Date().getTime(),\n                  'i64',\n                );\n                return 0;\n              },\n              xDelete: function (pVfs, zName, doSyncDir) {\n                mTimeStart('xDelete');\n                const rc = opRun(\n                  'xDelete',\n                  wasm.cstrToJs(zName),\n                  doSyncDir,\n                  false,\n                );\n                mTimeEnd();\n                return rc;\n              },\n              xFullPathname: function (pVfs, zName, nOut, pOut) {\n                const i = wasm.cstrncpy(pOut, zName, nOut);\n                return i < nOut ? 0 : capi.SQLITE_CANTOPEN;\n              },\n              xGetLastError: function (pVfs, nOut, pOut) {\n                warn('OPFS xGetLastError() has nothing sensible to return.');\n                return 0;\n              },\n\n              xOpen: function f(pVfs, zName, pFile, flags, pOutFlags) {\n                mTimeStart('xOpen');\n                let opfsFlags = 0;\n                if (0 === zName) {\n                  zName = randomFilename();\n                } else if (wasm.isPtr(zName)) {\n                  if (capi.sqlite3_uri_boolean(zName, 'opfs-unlock-asap', 0)) {\n                    opfsFlags |= state.opfsFlags.OPFS_UNLOCK_ASAP;\n                  }\n                  if (\n                    capi.sqlite3_uri_boolean(zName, 'delete-before-open', 0)\n                  ) {\n                    opfsFlags |= state.opfsFlags.OPFS_UNLINK_BEFORE_OPEN;\n                  }\n                  zName = wasm.cstrToJs(zName);\n                }\n                const fh = Object.create(null);\n                fh.fid = pFile;\n                fh.filename = zName;\n                fh.sab = new SharedArrayBuffer(state.fileBufferSize);\n                fh.flags = flags;\n                fh.readOnly =\n                  !(sqlite3.SQLITE_OPEN_CREATE & flags) &&\n                  !!(flags & capi.SQLITE_OPEN_READONLY);\n                const rc = opRun('xOpen', pFile, zName, flags, opfsFlags);\n                if (!rc) {\n                  if (fh.readOnly) {\n                    wasm.poke(pOutFlags, capi.SQLITE_OPEN_READONLY, 'i32');\n                  }\n                  __openFiles[pFile] = fh;\n                  fh.sabView = state.sabFileBufView;\n                  fh.sq3File = new sqlite3_file(pFile);\n                  fh.sq3File.$pMethods = opfsIoMethods.pointer;\n                  fh.lockType = capi.SQLITE_LOCK_NONE;\n                }\n                mTimeEnd();\n                return rc;\n              },\n            };\n\n            if (dVfs) {\n              opfsVfs.$xRandomness = dVfs.$xRandomness;\n              opfsVfs.$xSleep = dVfs.$xSleep;\n            }\n            if (!opfsVfs.$xRandomness) {\n              vfsSyncWrappers.xRandomness = function (pVfs, nOut, pOut) {\n                const heap = wasm.heap8u();\n                let i = 0;\n                for (; i < nOut; ++i)\n                  heap[pOut + i] = (Math.random() * 255000) & 0xff;\n                return i;\n              };\n            }\n            if (!opfsVfs.$xSleep) {\n              vfsSyncWrappers.xSleep = function (pVfs, ms) {\n                Atomics.wait(state.sabOPView, state.opIds.xSleep, 0, ms);\n                return 0;\n              };\n            }\n\n            opfsUtil.getResolvedPath = function (filename, splitIt) {\n              const p = new URL(filename, 'file://irrelevant').pathname;\n              return splitIt ? p.split('/').filter((v) => !!v) : p;\n            };\n\n            opfsUtil.getDirForFilename = async function f(\n              absFilename,\n              createDirs = false,\n            ) {\n              const path = opfsUtil.getResolvedPath(absFilename, true);\n              const filename = path.pop();\n              let dh = opfsUtil.rootDirectory;\n              for (const dirName of path) {\n                if (dirName) {\n                  dh = await dh.getDirectoryHandle(dirName, {\n                    create: !!createDirs,\n                  });\n                }\n              }\n              return [dh, filename];\n            };\n\n            opfsUtil.mkdir = async function (absDirName) {\n              try {\n                await opfsUtil.getDirForFilename(\n                  absDirName + '/filepart',\n                  true,\n                );\n                return true;\n              } catch (e) {\n                return false;\n              }\n            };\n\n            opfsUtil.entryExists = async function (fsEntryName) {\n              try {\n                const [dh, fn] = await opfsUtil.getDirForFilename(fsEntryName);\n                await dh.getFileHandle(fn);\n                return true;\n              } catch (e) {\n                return false;\n              }\n            };\n\n            opfsUtil.randomFilename = randomFilename;\n\n            opfsUtil.treeList = async function () {\n              const doDir = async function callee(dirHandle, tgt) {\n                tgt.name = dirHandle.name;\n                tgt.dirs = [];\n                tgt.files = [];\n                for await (const handle of dirHandle.values()) {\n                  if ('directory' === handle.kind) {\n                    const subDir = Object.create(null);\n                    tgt.dirs.push(subDir);\n                    await callee(handle, subDir);\n                  } else {\n                    tgt.files.push(handle.name);\n                  }\n                }\n              };\n              const root = Object.create(null);\n              await doDir(opfsUtil.rootDirectory, root);\n              return root;\n            };\n\n            opfsUtil.rmfr = async function () {\n              const dir = opfsUtil.rootDirectory,\n                opt = { recurse: true };\n              for await (const handle of dir.values()) {\n                dir.removeEntry(handle.name, opt);\n              }\n            };\n\n            opfsUtil.unlink = async function (\n              fsEntryName,\n              recursive = false,\n              throwOnError = false,\n            ) {\n              try {\n                const [hDir, filenamePart] = await opfsUtil.getDirForFilename(\n                  fsEntryName,\n                  false,\n                );\n                await hDir.removeEntry(filenamePart, { recursive });\n                return true;\n              } catch (e) {\n                if (throwOnError) {\n                  throw new Error(\n                    'unlink(',\n                    arguments[0],\n                    ') failed: ' + e.message,\n                    {\n                      cause: e,\n                    },\n                  );\n                }\n                return false;\n              }\n            };\n\n            opfsUtil.traverse = async function (opt) {\n              const defaultOpt = {\n                recursive: true,\n                directory: opfsUtil.rootDirectory,\n              };\n              if ('function' === typeof opt) {\n                opt = { callback: opt };\n              }\n              opt = Object.assign(defaultOpt, opt || {});\n              const doDir = async function callee(dirHandle, depth) {\n                for await (const handle of dirHandle.values()) {\n                  if (false === opt.callback(handle, dirHandle, depth))\n                    return false;\n                  else if (opt.recursive && 'directory' === handle.kind) {\n                    if (false === (await callee(handle, depth + 1))) break;\n                  }\n                }\n              };\n              doDir(opt.directory, 0);\n            };\n\n            const importDbChunked = async function (filename, callback) {\n              const [hDir, fnamePart] = await opfsUtil.getDirForFilename(\n                filename,\n                true,\n              );\n              const hFile = await hDir.getFileHandle(fnamePart, {\n                create: true,\n              });\n              let sah = await hFile.createSyncAccessHandle();\n              let nWrote = 0,\n                chunk,\n                checkedHeader = false,\n                err = false;\n              try {\n                sah.truncate(0);\n                while (undefined !== (chunk = await callback())) {\n                  if (chunk instanceof ArrayBuffer)\n                    chunk = new Uint8Array(chunk);\n                  if (0 === nWrote && chunk.byteLength >= 15) {\n                    util.affirmDbHeader(chunk);\n                    checkedHeader = true;\n                  }\n                  sah.write(chunk, { at: nWrote });\n                  nWrote += chunk.byteLength;\n                }\n                if (nWrote < 512 || 0 !== nWrote % 512) {\n                  toss(\n                    'Input size',\n                    nWrote,\n                    'is not correct for an SQLite database.',\n                  );\n                }\n                if (!checkedHeader) {\n                  const header = new Uint8Array(20);\n                  sah.read(header, { at: 0 });\n                  util.affirmDbHeader(header);\n                }\n                sah.write(new Uint8Array([1, 1]), { at: 18 });\n                return nWrote;\n              } catch (e) {\n                await sah.close();\n                sah = undefined;\n                await hDir.removeEntry(fnamePart).catch(() => {});\n                throw e;\n              } finally {\n                if (sah) await sah.close();\n              }\n            };\n\n            opfsUtil.importDb = async function (filename, bytes) {\n              if (bytes instanceof Function) {\n                return importDbChunked(filename, bytes);\n              }\n              if (bytes instanceof ArrayBuffer) bytes = new Uint8Array(bytes);\n              util.affirmIsDb(bytes);\n              const n = bytes.byteLength;\n              const [hDir, fnamePart] = await opfsUtil.getDirForFilename(\n                filename,\n                true,\n              );\n              let sah,\n                err,\n                nWrote = 0;\n              try {\n                const hFile = await hDir.getFileHandle(fnamePart, {\n                  create: true,\n                });\n                sah = await hFile.createSyncAccessHandle();\n                sah.truncate(0);\n                nWrote = sah.write(bytes, { at: 0 });\n                if (nWrote != n) {\n                  toss(\n                    'Expected to write ' +\n                      n +\n                      ' bytes but wrote ' +\n                      nWrote +\n                      '.',\n                  );\n                }\n                sah.write(new Uint8Array([1, 1]), { at: 18 });\n                return nWrote;\n              } catch (e) {\n                if (sah) {\n                  await sah.close();\n                  sah = undefined;\n                }\n                await hDir.removeEntry(fnamePart).catch(() => {});\n                throw e;\n              } finally {\n                if (sah) await sah.close();\n              }\n            };\n\n            if (sqlite3.oo1) {\n              const OpfsDb = function (...args) {\n                const opt = sqlite3.oo1.DB.dbCtorHelper.normalizeArgs(...args);\n                opt.vfs = opfsVfs.$zName;\n                sqlite3.oo1.DB.dbCtorHelper.call(this, opt);\n              };\n              OpfsDb.prototype = Object.create(sqlite3.oo1.DB.prototype);\n              sqlite3.oo1.OpfsDb = OpfsDb;\n              OpfsDb.importDb = opfsUtil.importDb;\n              sqlite3.oo1.DB.dbCtorHelper.setVfsPostOpenCallback(\n                opfsVfs.pointer,\n                function (oo1Db, sqlite3) {\n                  sqlite3.capi.sqlite3_busy_timeout(oo1Db, 10000);\n                },\n              );\n            }\n\n            const sanityCheck = function () {\n              const scope = wasm.scopedAllocPush();\n              const sq3File = new sqlite3_file();\n              try {\n                const fid = sq3File.pointer;\n                const openFlags =\n                  capi.SQLITE_OPEN_CREATE |\n                  capi.SQLITE_OPEN_READWRITE |\n                  capi.SQLITE_OPEN_MAIN_DB;\n                const pOut = wasm.scopedAlloc(8);\n                const dbFile = '/sanity/check/file' + randomFilename(8);\n                const zDbFile = wasm.scopedAllocCString(dbFile);\n                let rc;\n                state.s11n.serialize('This is ä string.');\n                rc = state.s11n.deserialize();\n                log('deserialize() says:', rc);\n                if ('This is ä string.' !== rc[0]) toss('String d13n error.');\n                vfsSyncWrappers.xAccess(opfsVfs.pointer, zDbFile, 0, pOut);\n                rc = wasm.peek(pOut, 'i32');\n                log('xAccess(', dbFile, ') exists ?=', rc);\n                rc = vfsSyncWrappers.xOpen(\n                  opfsVfs.pointer,\n                  zDbFile,\n                  fid,\n                  openFlags,\n                  pOut,\n                );\n                log(\n                  'open rc =',\n                  rc,\n                  'state.sabOPView[xOpen] =',\n                  state.sabOPView[state.opIds.xOpen],\n                );\n                if (0 !== rc) {\n                  error('open failed with code', rc);\n                  return;\n                }\n                vfsSyncWrappers.xAccess(opfsVfs.pointer, zDbFile, 0, pOut);\n                rc = wasm.peek(pOut, 'i32');\n                if (!rc) toss('xAccess() failed to detect file.');\n                rc = ioSyncWrappers.xSync(sq3File.pointer, 0);\n                if (rc) toss('sync failed w/ rc', rc);\n                rc = ioSyncWrappers.xTruncate(sq3File.pointer, 1024);\n                if (rc) toss('truncate failed w/ rc', rc);\n                wasm.poke(pOut, 0, 'i64');\n                rc = ioSyncWrappers.xFileSize(sq3File.pointer, pOut);\n                if (rc) toss('xFileSize failed w/ rc', rc);\n                log('xFileSize says:', wasm.peek(pOut, 'i64'));\n                rc = ioSyncWrappers.xWrite(sq3File.pointer, zDbFile, 10, 1);\n                if (rc) toss('xWrite() failed!');\n                const readBuf = wasm.scopedAlloc(16);\n                rc = ioSyncWrappers.xRead(sq3File.pointer, readBuf, 6, 2);\n                wasm.poke(readBuf + 6, 0);\n                let jRead = wasm.cstrToJs(readBuf);\n                log('xRead() got:', jRead);\n                if ('sanity' !== jRead) toss('Unexpected xRead() value.');\n                if (vfsSyncWrappers.xSleep) {\n                  log('xSleep()ing before close()ing...');\n                  vfsSyncWrappers.xSleep(opfsVfs.pointer, 2000);\n                  log('waking up from xSleep()');\n                }\n                rc = ioSyncWrappers.xClose(fid);\n                log('xClose rc =', rc, 'sabOPView =', state.sabOPView);\n                log('Deleting file:', dbFile);\n                vfsSyncWrappers.xDelete(opfsVfs.pointer, zDbFile, 0x1234);\n                vfsSyncWrappers.xAccess(opfsVfs.pointer, zDbFile, 0, pOut);\n                rc = wasm.peek(pOut, 'i32');\n                if (rc)\n                  toss(\n                    'Expecting 0 from xAccess(',\n                    dbFile,\n                    ') after xDelete().',\n                  );\n                warn('End of OPFS sanity checks.');\n              } finally {\n                sq3File.dispose();\n                wasm.scopedAllocPop(scope);\n              }\n            };\n\n            W.onmessage = function ({ data }) {\n              switch (data.type) {\n                case 'opfs-unavailable':\n                  promiseReject(new Error(data.payload.join(' ')));\n                  break;\n                case 'opfs-async-loaded':\n                  W.postMessage({ type: 'opfs-async-init', args: state });\n                  break;\n                case 'opfs-async-inited': {\n                  if (true === promiseWasRejected) {\n                    break;\n                  }\n                  try {\n                    sqlite3.vfs.installVfs({\n                      io: { struct: opfsIoMethods, methods: ioSyncWrappers },\n                      vfs: { struct: opfsVfs, methods: vfsSyncWrappers },\n                    });\n                    state.sabOPView = new Int32Array(state.sabOP);\n                    state.sabFileBufView = new Uint8Array(\n                      state.sabIO,\n                      0,\n                      state.fileBufferSize,\n                    );\n                    state.sabS11nView = new Uint8Array(\n                      state.sabIO,\n                      state.sabS11nOffset,\n                      state.sabS11nSize,\n                    );\n                    initS11n();\n                    if (options.sanityChecks) {\n                      warn(\n                        'Running sanity checks because of opfs-sanity-check URL arg...',\n                      );\n                      sanityCheck();\n                    }\n                    if (thisThreadHasOPFS()) {\n                      navigator.storage\n                        .getDirectory()\n                        .then((d) => {\n                          W.onerror = W._originalOnError;\n                          delete W._originalOnError;\n                          sqlite3.opfs = opfsUtil;\n                          opfsUtil.rootDirectory = d;\n                          log('End of OPFS sqlite3_vfs setup.', opfsVfs);\n                          promiseResolve();\n                        })\n                        .catch(promiseReject);\n                    } else {\n                      promiseResolve();\n                    }\n                  } catch (e) {\n                    error(e);\n                    promiseReject(e);\n                  }\n                  break;\n                }\n                default: {\n                  const errMsg =\n                    'Unexpected message from the OPFS async worker: ' +\n                    JSON.stringify(data);\n                  error(errMsg);\n                  promiseReject(new Error(errMsg));\n                  break;\n                }\n              }\n            };\n          });\n          return thePromise;\n        };\n        installOpfsVfs.defaultProxyUri = 'sqlite3-opfs-async-proxy.js';\n        globalThis.sqlite3ApiBootstrap.initializersAsync.push(\n          async (sqlite3) => {\n            try {\n              let proxyJs = installOpfsVfs.defaultProxyUri;\n              if (sqlite3.scriptInfo.sqlite3Dir) {\n                installOpfsVfs.defaultProxyUri =\n                  sqlite3.scriptInfo.sqlite3Dir + proxyJs;\n              }\n              return installOpfsVfs().catch((e) => {\n                sqlite3.config.warn(\n                  'Ignoring inability to install OPFS sqlite3_vfs:',\n                  e.message,\n                );\n              });\n            } catch (e) {\n              sqlite3.config.error('installOpfsVfs() exception:', e);\n              return Promise.reject(e);\n            }\n          },\n        );\n      });\n\n      globalThis.sqlite3ApiBootstrap.initializers.push(function (sqlite3) {\n        'use strict';\n        const toss = sqlite3.util.toss;\n        const toss3 = sqlite3.util.toss3;\n        const initPromises = Object.create(null);\n        const capi = sqlite3.capi;\n        const util = sqlite3.util;\n        const wasm = sqlite3.wasm;\n\n        const SECTOR_SIZE = 4096;\n        const HEADER_MAX_PATH_SIZE = 512;\n        const HEADER_FLAGS_SIZE = 4;\n        const HEADER_DIGEST_SIZE = 8;\n        const HEADER_CORPUS_SIZE = HEADER_MAX_PATH_SIZE + HEADER_FLAGS_SIZE;\n        const HEADER_OFFSET_FLAGS = HEADER_MAX_PATH_SIZE;\n        const HEADER_OFFSET_DIGEST = HEADER_CORPUS_SIZE;\n        const HEADER_OFFSET_DATA = SECTOR_SIZE;\n\n        const PERSISTENT_FILE_TYPES =\n          capi.SQLITE_OPEN_MAIN_DB |\n          capi.SQLITE_OPEN_MAIN_JOURNAL |\n          capi.SQLITE_OPEN_SUPER_JOURNAL |\n          capi.SQLITE_OPEN_WAL;\n\n        const OPAQUE_DIR_NAME = '.opaque';\n\n        const getRandomName = () => Math.random().toString(36).slice(2);\n\n        const textDecoder = new TextDecoder();\n        const textEncoder = new TextEncoder();\n\n        const optionDefaults = Object.assign(Object.create(null), {\n          name: 'opfs-sahpool',\n          directory: undefined,\n          initialCapacity: 6,\n          clearOnInit: false,\n\n          verbosity: 2,\n          forceReinitIfPreviouslyFailed: false,\n        });\n\n        const loggers = [\n          sqlite3.config.error,\n          sqlite3.config.warn,\n          sqlite3.config.log,\n        ];\n        const log = sqlite3.config.log;\n        const warn = sqlite3.config.warn;\n        const error = sqlite3.config.error;\n\n        const __mapVfsToPool = new Map();\n        const getPoolForVfs = (pVfs) => __mapVfsToPool.get(pVfs);\n        const setPoolForVfs = (pVfs, pool) => {\n          if (pool) __mapVfsToPool.set(pVfs, pool);\n          else __mapVfsToPool.delete(pVfs);\n        };\n\n        const __mapSqlite3File = new Map();\n        const getPoolForPFile = (pFile) => __mapSqlite3File.get(pFile);\n        const setPoolForPFile = (pFile, pool) => {\n          if (pool) __mapSqlite3File.set(pFile, pool);\n          else __mapSqlite3File.delete(pFile);\n        };\n\n        const ioMethods = {\n          xCheckReservedLock: function (pFile, pOut) {\n            const pool = getPoolForPFile(pFile);\n            pool.log('xCheckReservedLock');\n            pool.storeErr();\n            wasm.poke32(pOut, 1);\n            return 0;\n          },\n          xClose: function (pFile) {\n            const pool = getPoolForPFile(pFile);\n            pool.storeErr();\n            const file = pool.getOFileForS3File(pFile);\n            if (file) {\n              try {\n                pool.log(`xClose ${file.path}`);\n                pool.mapS3FileToOFile(pFile, false);\n                file.sah.flush();\n                if (file.flags & capi.SQLITE_OPEN_DELETEONCLOSE) {\n                  pool.deletePath(file.path);\n                }\n              } catch (e) {\n                return pool.storeErr(e, capi.SQLITE_IOERR);\n              }\n            }\n            return 0;\n          },\n          xDeviceCharacteristics: function (pFile) {\n            return capi.SQLITE_IOCAP_UNDELETABLE_WHEN_OPEN;\n          },\n          xFileControl: function (pFile, opId, pArg) {\n            return capi.SQLITE_NOTFOUND;\n          },\n          xFileSize: function (pFile, pSz64) {\n            const pool = getPoolForPFile(pFile);\n            pool.log(`xFileSize`);\n            const file = pool.getOFileForS3File(pFile);\n            const size = file.sah.getSize() - HEADER_OFFSET_DATA;\n\n            wasm.poke64(pSz64, BigInt(size));\n            return 0;\n          },\n          xLock: function (pFile, lockType) {\n            const pool = getPoolForPFile(pFile);\n            pool.log(`xLock ${lockType}`);\n            pool.storeErr();\n            const file = pool.getOFileForS3File(pFile);\n            file.lockType = lockType;\n            return 0;\n          },\n          xRead: function (pFile, pDest, n, offset64) {\n            const pool = getPoolForPFile(pFile);\n            pool.storeErr();\n            const file = pool.getOFileForS3File(pFile);\n            pool.log(`xRead ${file.path} ${n} @ ${offset64}`);\n            try {\n              const nRead = file.sah.read(\n                wasm.heap8u().subarray(pDest, pDest + n),\n                { at: HEADER_OFFSET_DATA + Number(offset64) },\n              );\n              if (nRead < n) {\n                wasm.heap8u().fill(0, pDest + nRead, pDest + n);\n                return capi.SQLITE_IOERR_SHORT_READ;\n              }\n              return 0;\n            } catch (e) {\n              return pool.storeErr(e, capi.SQLITE_IOERR);\n            }\n          },\n          xSectorSize: function (pFile) {\n            return SECTOR_SIZE;\n          },\n          xSync: function (pFile, flags) {\n            const pool = getPoolForPFile(pFile);\n            pool.log(`xSync ${flags}`);\n            pool.storeErr();\n            const file = pool.getOFileForS3File(pFile);\n\n            try {\n              file.sah.flush();\n              return 0;\n            } catch (e) {\n              return pool.storeErr(e, capi.SQLITE_IOERR);\n            }\n          },\n          xTruncate: function (pFile, sz64) {\n            const pool = getPoolForPFile(pFile);\n            pool.log(`xTruncate ${sz64}`);\n            pool.storeErr();\n            const file = pool.getOFileForS3File(pFile);\n\n            try {\n              file.sah.truncate(HEADER_OFFSET_DATA + Number(sz64));\n              return 0;\n            } catch (e) {\n              return pool.storeErr(e, capi.SQLITE_IOERR);\n            }\n          },\n          xUnlock: function (pFile, lockType) {\n            const pool = getPoolForPFile(pFile);\n            pool.log('xUnlock');\n            const file = pool.getOFileForS3File(pFile);\n            file.lockType = lockType;\n            return 0;\n          },\n          xWrite: function (pFile, pSrc, n, offset64) {\n            const pool = getPoolForPFile(pFile);\n            pool.storeErr();\n            const file = pool.getOFileForS3File(pFile);\n            pool.log(`xWrite ${file.path} ${n} ${offset64}`);\n            try {\n              const nBytes = file.sah.write(\n                wasm.heap8u().subarray(pSrc, pSrc + n),\n                { at: HEADER_OFFSET_DATA + Number(offset64) },\n              );\n              return n === nBytes ? 0 : toss('Unknown write() failure.');\n            } catch (e) {\n              return pool.storeErr(e, capi.SQLITE_IOERR);\n            }\n          },\n        };\n\n        const opfsIoMethods = new capi.sqlite3_io_methods();\n        opfsIoMethods.$iVersion = 1;\n        sqlite3.vfs.installVfs({\n          io: { struct: opfsIoMethods, methods: ioMethods },\n        });\n\n        const vfsMethods = {\n          xAccess: function (pVfs, zName, flags, pOut) {\n            const pool = getPoolForVfs(pVfs);\n            pool.storeErr();\n            try {\n              const name = pool.getPath(zName);\n              wasm.poke32(pOut, pool.hasFilename(name) ? 1 : 0);\n            } catch (e) {\n              wasm.poke32(pOut, 0);\n            }\n            return 0;\n          },\n          xCurrentTime: function (pVfs, pOut) {\n            wasm.poke(\n              pOut,\n              2440587.5 + new Date().getTime() / 86400000,\n              'double',\n            );\n            return 0;\n          },\n          xCurrentTimeInt64: function (pVfs, pOut) {\n            wasm.poke(pOut, 2440587.5 * 86400000 + new Date().getTime(), 'i64');\n            return 0;\n          },\n          xDelete: function (pVfs, zName, doSyncDir) {\n            const pool = getPoolForVfs(pVfs);\n            pool.log(`xDelete ${wasm.cstrToJs(zName)}`);\n            pool.storeErr();\n            try {\n              pool.deletePath(pool.getPath(zName));\n              return 0;\n            } catch (e) {\n              pool.storeErr(e);\n              return capi.SQLITE_IOERR_DELETE;\n            }\n          },\n          xFullPathname: function (pVfs, zName, nOut, pOut) {\n            const i = wasm.cstrncpy(pOut, zName, nOut);\n            return i < nOut ? 0 : capi.SQLITE_CANTOPEN;\n          },\n          xGetLastError: function (pVfs, nOut, pOut) {\n            const pool = getPoolForVfs(pVfs);\n            const e = pool.popErr();\n            pool.log(`xGetLastError ${nOut} e =`, e);\n            if (e) {\n              const scope = wasm.scopedAllocPush();\n              try {\n                const [cMsg, n] = wasm.scopedAllocCString(e.message, true);\n                wasm.cstrncpy(pOut, cMsg, nOut);\n                if (n > nOut) wasm.poke8(pOut + nOut - 1, 0);\n              } catch (e) {\n                return capi.SQLITE_NOMEM;\n              } finally {\n                wasm.scopedAllocPop(scope);\n              }\n            }\n            return e ? e.sqlite3Rc || capi.SQLITE_IOERR : 0;\n          },\n\n          xOpen: function f(pVfs, zName, pFile, flags, pOutFlags) {\n            const pool = getPoolForVfs(pVfs);\n            try {\n              pool.log(`xOpen ${wasm.cstrToJs(zName)} ${flags}`);\n\n              const path =\n                zName && wasm.peek8(zName)\n                  ? pool.getPath(zName)\n                  : getRandomName();\n              let sah = pool.getSAHForPath(path);\n              if (!sah && flags & capi.SQLITE_OPEN_CREATE) {\n                if (pool.getFileCount() < pool.getCapacity()) {\n                  sah = pool.nextAvailableSAH();\n                  pool.setAssociatedPath(sah, path, flags);\n                } else {\n                  toss('SAH pool is full. Cannot create file', path);\n                }\n              }\n              if (!sah) {\n                toss('file not found:', path);\n              }\n\n              const file = { path, flags, sah };\n              pool.mapS3FileToOFile(pFile, file);\n              file.lockType = capi.SQLITE_LOCK_NONE;\n              const sq3File = new capi.sqlite3_file(pFile);\n              sq3File.$pMethods = opfsIoMethods.pointer;\n              sq3File.dispose();\n              wasm.poke32(pOutFlags, flags);\n              return 0;\n            } catch (e) {\n              pool.storeErr(e);\n              return capi.SQLITE_CANTOPEN;\n            }\n          },\n        };\n\n        const createOpfsVfs = function (vfsName) {\n          if (sqlite3.capi.sqlite3_vfs_find(vfsName)) {\n            toss3('VFS name is already registered:', vfsName);\n          }\n          const opfsVfs = new capi.sqlite3_vfs();\n\n          const pDVfs = capi.sqlite3_vfs_find(null);\n          const dVfs = pDVfs ? new capi.sqlite3_vfs(pDVfs) : null;\n          opfsVfs.$iVersion = 2;\n          opfsVfs.$szOsFile = capi.sqlite3_file.structInfo.sizeof;\n          opfsVfs.$mxPathname = HEADER_MAX_PATH_SIZE;\n          opfsVfs.addOnDispose(\n            (opfsVfs.$zName = wasm.allocCString(vfsName)),\n            () => setPoolForVfs(opfsVfs.pointer, 0),\n          );\n\n          if (dVfs) {\n            opfsVfs.$xRandomness = dVfs.$xRandomness;\n            opfsVfs.$xSleep = dVfs.$xSleep;\n            dVfs.dispose();\n          }\n          if (!opfsVfs.$xRandomness && !vfsMethods.xRandomness) {\n            vfsMethods.xRandomness = function (pVfs, nOut, pOut) {\n              const heap = wasm.heap8u();\n              let i = 0;\n              for (; i < nOut; ++i)\n                heap[pOut + i] = (Math.random() * 255000) & 0xff;\n              return i;\n            };\n          }\n          if (!opfsVfs.$xSleep && !vfsMethods.xSleep) {\n            vfsMethods.xSleep = (pVfs, ms) => 0;\n          }\n          sqlite3.vfs.installVfs({\n            vfs: { struct: opfsVfs, methods: vfsMethods },\n          });\n          return opfsVfs;\n        };\n\n        class OpfsSAHPool {\n          vfsDir;\n\n          #dhVfsRoot;\n\n          #dhOpaque;\n\n          #dhVfsParent;\n\n          #mapSAHToName = new Map();\n\n          #mapFilenameToSAH = new Map();\n\n          #availableSAH = new Set();\n\n          #mapS3FileToOFile_ = new Map();\n\n          #apBody = new Uint8Array(HEADER_CORPUS_SIZE);\n\n          #dvBody;\n\n          #cVfs;\n\n          #verbosity;\n\n          constructor(options = Object.create(null)) {\n            this.#verbosity = options.verbosity ?? optionDefaults.verbosity;\n            this.vfsName = options.name || optionDefaults.name;\n            this.#cVfs = createOpfsVfs(this.vfsName);\n            setPoolForVfs(this.#cVfs.pointer, this);\n            this.vfsDir = options.directory || '.' + this.vfsName;\n            this.#dvBody = new DataView(\n              this.#apBody.buffer,\n              this.#apBody.byteOffset,\n            );\n            this.isReady = this.reset(\n              !!(options.clearOnInit ?? optionDefaults.clearOnInit),\n            ).then(() => {\n              if (this.$error) throw this.$error;\n              return this.getCapacity()\n                ? Promise.resolve(undefined)\n                : this.addCapacity(\n                    options.initialCapacity || optionDefaults.initialCapacity,\n                  );\n            });\n          }\n\n          #logImpl(level, ...args) {\n            if (this.#verbosity > level)\n              loggers[level](this.vfsName + ':', ...args);\n          }\n          log(...args) {\n            this.#logImpl(2, ...args);\n          }\n          warn(...args) {\n            this.#logImpl(1, ...args);\n          }\n          error(...args) {\n            this.#logImpl(0, ...args);\n          }\n\n          getVfs() {\n            return this.#cVfs;\n          }\n\n          getCapacity() {\n            return this.#mapSAHToName.size;\n          }\n\n          getFileCount() {\n            return this.#mapFilenameToSAH.size;\n          }\n\n          getFileNames() {\n            const rc = [];\n            const iter = this.#mapFilenameToSAH.keys();\n            for (const n of iter) rc.push(n);\n            return rc;\n          }\n\n          async addCapacity(n) {\n            for (let i = 0; i < n; ++i) {\n              const name = getRandomName();\n              const h = await this.#dhOpaque.getFileHandle(name, {\n                create: true,\n              });\n              const ah = await h.createSyncAccessHandle();\n              this.#mapSAHToName.set(ah, name);\n              this.setAssociatedPath(ah, '', 0);\n            }\n            return this.getCapacity();\n          }\n\n          async reduceCapacity(n) {\n            let nRm = 0;\n            for (const ah of Array.from(this.#availableSAH)) {\n              if (nRm === n || this.getFileCount() === this.getCapacity()) {\n                break;\n              }\n              const name = this.#mapSAHToName.get(ah);\n\n              ah.close();\n              await this.#dhOpaque.removeEntry(name);\n              this.#mapSAHToName.delete(ah);\n              this.#availableSAH.delete(ah);\n              ++nRm;\n            }\n            return nRm;\n          }\n\n          releaseAccessHandles() {\n            for (const ah of this.#mapSAHToName.keys()) ah.close();\n            this.#mapSAHToName.clear();\n            this.#mapFilenameToSAH.clear();\n            this.#availableSAH.clear();\n          }\n\n          async acquireAccessHandles(clearFiles) {\n            const files = [];\n            for await (const [name, h] of this.#dhOpaque) {\n              if ('file' === h.kind) {\n                files.push([name, h]);\n              }\n            }\n            return Promise.all(\n              files.map(async ([name, h]) => {\n                try {\n                  const ah = await h.createSyncAccessHandle();\n                  this.#mapSAHToName.set(ah, name);\n                  if (clearFiles) {\n                    ah.truncate(HEADER_OFFSET_DATA);\n                    this.setAssociatedPath(ah, '', 0);\n                  } else {\n                    const path = this.getAssociatedPath(ah);\n                    if (path) {\n                      this.#mapFilenameToSAH.set(path, ah);\n                    } else {\n                      this.#availableSAH.add(ah);\n                    }\n                  }\n                } catch (e) {\n                  this.storeErr(e);\n                  this.releaseAccessHandles();\n                  throw e;\n                }\n              }),\n            );\n          }\n\n          getAssociatedPath(sah) {\n            sah.read(this.#apBody, { at: 0 });\n\n            const flags = this.#dvBody.getUint32(HEADER_OFFSET_FLAGS);\n            if (\n              this.#apBody[0] &&\n              (flags & capi.SQLITE_OPEN_DELETEONCLOSE ||\n                (flags & PERSISTENT_FILE_TYPES) === 0)\n            ) {\n              warn(\n                `Removing file with unexpected flags ${flags.toString(16)}`,\n                this.#apBody,\n              );\n              this.setAssociatedPath(sah, '', 0);\n              return '';\n            }\n\n            const fileDigest = new Uint32Array(HEADER_DIGEST_SIZE / 4);\n            sah.read(fileDigest, { at: HEADER_OFFSET_DIGEST });\n            const compDigest = this.computeDigest(this.#apBody);\n            if (fileDigest.every((v, i) => v === compDigest[i])) {\n              const pathBytes = this.#apBody.findIndex((v) => 0 === v);\n              if (0 === pathBytes) {\n                sah.truncate(HEADER_OFFSET_DATA);\n              }\n              return pathBytes\n                ? textDecoder.decode(this.#apBody.subarray(0, pathBytes))\n                : '';\n            } else {\n              warn('Disassociating file with bad digest.');\n              this.setAssociatedPath(sah, '', 0);\n              return '';\n            }\n          }\n\n          setAssociatedPath(sah, path, flags) {\n            const enc = textEncoder.encodeInto(path, this.#apBody);\n            if (HEADER_MAX_PATH_SIZE <= enc.written + 1) {\n              toss('Path too long:', path);\n            }\n            this.#apBody.fill(0, enc.written, HEADER_MAX_PATH_SIZE);\n            this.#dvBody.setUint32(HEADER_OFFSET_FLAGS, flags);\n\n            const digest = this.computeDigest(this.#apBody);\n            sah.write(this.#apBody, { at: 0 });\n            sah.write(digest, { at: HEADER_OFFSET_DIGEST });\n            sah.flush();\n\n            if (path) {\n              this.#mapFilenameToSAH.set(path, sah);\n              this.#availableSAH.delete(sah);\n            } else {\n              sah.truncate(HEADER_OFFSET_DATA);\n              this.#availableSAH.add(sah);\n            }\n          }\n\n          computeDigest(byteArray) {\n            let h1 = 0xdeadbeef;\n            let h2 = 0x41c6ce57;\n            for (const v of byteArray) {\n              h1 = 31 * h1 + v * 307;\n              h2 = 31 * h2 + v * 307;\n            }\n            return new Uint32Array([h1 >>> 0, h2 >>> 0]);\n          }\n\n          async reset(clearFiles) {\n            await this.isReady;\n            let h = await navigator.storage.getDirectory();\n            let prev, prevName;\n            for (const d of this.vfsDir.split('/')) {\n              if (d) {\n                prev = h;\n                h = await h.getDirectoryHandle(d, { create: true });\n              }\n            }\n            this.#dhVfsRoot = h;\n            this.#dhVfsParent = prev;\n            this.#dhOpaque = await this.#dhVfsRoot.getDirectoryHandle(\n              OPAQUE_DIR_NAME,\n              { create: true },\n            );\n            this.releaseAccessHandles();\n            return this.acquireAccessHandles(clearFiles);\n          }\n\n          getPath(arg) {\n            if (wasm.isPtr(arg)) arg = wasm.cstrToJs(arg);\n            return (\n              arg instanceof URL ? arg : new URL(arg, 'file://localhost/')\n            ).pathname;\n          }\n\n          deletePath(path) {\n            const sah = this.#mapFilenameToSAH.get(path);\n            if (sah) {\n              this.#mapFilenameToSAH.delete(path);\n              this.setAssociatedPath(sah, '', 0);\n            }\n            return !!sah;\n          }\n\n          storeErr(e, code) {\n            if (e) {\n              e.sqlite3Rc = code || capi.SQLITE_IOERR;\n              this.error(e);\n            }\n            this.$error = e;\n            return code;\n          }\n\n          popErr() {\n            const rc = this.$error;\n            this.$error = undefined;\n            return rc;\n          }\n\n          nextAvailableSAH() {\n            const [rc] = this.#availableSAH.keys();\n            return rc;\n          }\n\n          getOFileForS3File(pFile) {\n            return this.#mapS3FileToOFile_.get(pFile);\n          }\n\n          mapS3FileToOFile(pFile, file) {\n            if (file) {\n              this.#mapS3FileToOFile_.set(pFile, file);\n              setPoolForPFile(pFile, this);\n            } else {\n              this.#mapS3FileToOFile_.delete(pFile);\n              setPoolForPFile(pFile, false);\n            }\n          }\n\n          hasFilename(name) {\n            return this.#mapFilenameToSAH.has(name);\n          }\n\n          getSAHForPath(path) {\n            return this.#mapFilenameToSAH.get(path);\n          }\n\n          async removeVfs() {\n            if (!this.#cVfs.pointer || !this.#dhOpaque) return false;\n            capi.sqlite3_vfs_unregister(this.#cVfs.pointer);\n            this.#cVfs.dispose();\n            delete initPromises[this.vfsName];\n            try {\n              this.releaseAccessHandles();\n              await this.#dhVfsRoot.removeEntry(OPAQUE_DIR_NAME, {\n                recursive: true,\n              });\n              this.#dhOpaque = undefined;\n              await this.#dhVfsParent.removeEntry(this.#dhVfsRoot.name, {\n                recursive: true,\n              });\n              this.#dhVfsRoot = this.#dhVfsParent = undefined;\n            } catch (e) {\n              sqlite3.config.error(this.vfsName, 'removeVfs() failed:', e);\n            }\n            return true;\n          }\n\n          exportFile(name) {\n            const sah =\n              this.#mapFilenameToSAH.get(name) || toss('File not found:', name);\n            const n = sah.getSize() - HEADER_OFFSET_DATA;\n            const b = new Uint8Array(n > 0 ? n : 0);\n            if (n > 0) {\n              const nRead = sah.read(b, { at: HEADER_OFFSET_DATA });\n              if (nRead != n) {\n                toss(\n                  'Expected to read ' + n + ' bytes but read ' + nRead + '.',\n                );\n              }\n            }\n            return b;\n          }\n\n          async importDbChunked(name, callback) {\n            const sah =\n              this.#mapFilenameToSAH.get(name) ||\n              this.nextAvailableSAH() ||\n              toss('No available handles to import to.');\n            sah.truncate(0);\n            let nWrote = 0,\n              chunk,\n              checkedHeader = false,\n              err = false;\n            try {\n              while (undefined !== (chunk = await callback())) {\n                if (chunk instanceof ArrayBuffer) chunk = new Uint8Array(chunk);\n                if (0 === nWrote && chunk.byteLength >= 15) {\n                  util.affirmDbHeader(chunk);\n                  checkedHeader = true;\n                }\n                sah.write(chunk, { at: HEADER_OFFSET_DATA + nWrote });\n                nWrote += chunk.byteLength;\n              }\n              if (nWrote < 512 || 0 !== nWrote % 512) {\n                toss(\n                  'Input size',\n                  nWrote,\n                  'is not correct for an SQLite database.',\n                );\n              }\n              if (!checkedHeader) {\n                const header = new Uint8Array(20);\n                sah.read(header, { at: 0 });\n                util.affirmDbHeader(header);\n              }\n              sah.write(new Uint8Array([1, 1]), {\n                at: HEADER_OFFSET_DATA + 18,\n              });\n            } catch (e) {\n              this.setAssociatedPath(sah, '', 0);\n              throw e;\n            }\n            this.setAssociatedPath(sah, name, capi.SQLITE_OPEN_MAIN_DB);\n            return nWrote;\n          }\n\n          importDb(name, bytes) {\n            if (bytes instanceof ArrayBuffer) bytes = new Uint8Array(bytes);\n            else if (bytes instanceof Function)\n              return this.importDbChunked(name, bytes);\n            const sah =\n              this.#mapFilenameToSAH.get(name) ||\n              this.nextAvailableSAH() ||\n              toss('No available handles to import to.');\n            const n = bytes.byteLength;\n            if (n < 512 || n % 512 != 0) {\n              toss('Byte array size is invalid for an SQLite db.');\n            }\n            const header = 'SQLite format 3';\n            for (let i = 0; i < header.length; ++i) {\n              if (header.charCodeAt(i) !== bytes[i]) {\n                toss('Input does not contain an SQLite database header.');\n              }\n            }\n            const nWrote = sah.write(bytes, { at: HEADER_OFFSET_DATA });\n            if (nWrote != n) {\n              this.setAssociatedPath(sah, '', 0);\n              toss(\n                'Expected to write ' + n + ' bytes but wrote ' + nWrote + '.',\n              );\n            } else {\n              sah.write(new Uint8Array([1, 1]), {\n                at: HEADER_OFFSET_DATA + 18,\n              });\n              this.setAssociatedPath(sah, name, capi.SQLITE_OPEN_MAIN_DB);\n            }\n            return nWrote;\n          }\n        }\n\n        class OpfsSAHPoolUtil {\n          #p;\n\n          constructor(sahPool) {\n            this.#p = sahPool;\n            this.vfsName = sahPool.vfsName;\n          }\n\n          async addCapacity(n) {\n            return this.#p.addCapacity(n);\n          }\n\n          async reduceCapacity(n) {\n            return this.#p.reduceCapacity(n);\n          }\n\n          getCapacity() {\n            return this.#p.getCapacity(this.#p);\n          }\n\n          getFileCount() {\n            return this.#p.getFileCount();\n          }\n          getFileNames() {\n            return this.#p.getFileNames();\n          }\n\n          async reserveMinimumCapacity(min) {\n            const c = this.#p.getCapacity();\n            return c < min ? this.#p.addCapacity(min - c) : c;\n          }\n\n          exportFile(name) {\n            return this.#p.exportFile(name);\n          }\n\n          importDb(name, bytes) {\n            return this.#p.importDb(name, bytes);\n          }\n\n          async wipeFiles() {\n            return this.#p.reset(true);\n          }\n\n          unlink(filename) {\n            return this.#p.deletePath(filename);\n          }\n\n          async removeVfs() {\n            return this.#p.removeVfs();\n          }\n        }\n\n        const apiVersionCheck = async () => {\n          const dh = await navigator.storage.getDirectory();\n          const fn = '.opfs-sahpool-sync-check-' + getRandomName();\n          const fh = await dh.getFileHandle(fn, { create: true });\n          const ah = await fh.createSyncAccessHandle();\n          const close = ah.close();\n          await close;\n          await dh.removeEntry(fn);\n          if (close?.then) {\n            toss(\n              'The local OPFS API is too old for opfs-sahpool:',\n              'it has an async FileSystemSyncAccessHandle.close() method.',\n            );\n          }\n          return true;\n        };\n\n        sqlite3.installOpfsSAHPoolVfs = async function (\n          options = Object.create(null),\n        ) {\n          options = Object.assign(\n            Object.create(null),\n            optionDefaults,\n            options || {},\n          );\n          const vfsName = options.name;\n          if (options.$testThrowPhase1) {\n            throw options.$testThrowPhase1;\n          }\n          if (initPromises[vfsName]) {\n            try {\n              const p = await initPromises[vfsName];\n\n              return p;\n            } catch (e) {\n              if (options.forceReinitIfPreviouslyFailed) {\n                delete initPromises[vfsName];\n              } else {\n                throw e;\n              }\n            }\n          }\n          if (\n            !globalThis.FileSystemHandle ||\n            !globalThis.FileSystemDirectoryHandle ||\n            !globalThis.FileSystemFileHandle ||\n            !globalThis.FileSystemFileHandle.prototype.createSyncAccessHandle ||\n            !navigator?.storage?.getDirectory\n          ) {\n            return (initPromises[vfsName] = Promise.reject(\n              new Error('Missing required OPFS APIs.'),\n            ));\n          }\n\n          return (initPromises[vfsName] = apiVersionCheck()\n            .then(async function () {\n              if (options.$testThrowPhase2) {\n                throw options.$testThrowPhase2;\n              }\n              const thePool = new OpfsSAHPool(options);\n              return thePool.isReady\n                .then(async () => {\n                  const poolUtil = new OpfsSAHPoolUtil(thePool);\n                  if (sqlite3.oo1) {\n                    const oo1 = sqlite3.oo1;\n                    const theVfs = thePool.getVfs();\n                    const OpfsSAHPoolDb = function (...args) {\n                      const opt = oo1.DB.dbCtorHelper.normalizeArgs(...args);\n                      opt.vfs = theVfs.$zName;\n                      oo1.DB.dbCtorHelper.call(this, opt);\n                    };\n                    OpfsSAHPoolDb.prototype = Object.create(oo1.DB.prototype);\n                    poolUtil.OpfsSAHPoolDb = OpfsSAHPoolDb;\n                  }\n                  thePool.log('VFS initialized.');\n                  return poolUtil;\n                })\n                .catch(async (e) => {\n                  await thePool.removeVfs().catch(() => {});\n                  throw e;\n                });\n            })\n            .catch((err) => {\n              return (initPromises[vfsName] = Promise.reject(err));\n            }));\n        };\n      });\n\n      ('use strict');\n      if ('undefined' !== typeof Module) {\n        const SABC = Object.assign(\n          Object.create(null),\n          {\n            exports:\n              'undefined' === typeof wasmExports ? Module['asm'] : wasmExports,\n            memory: Module.wasmMemory,\n          },\n          globalThis.sqlite3ApiConfig || {},\n        );\n\n        globalThis.sqlite3ApiConfig = SABC;\n        let sqlite3;\n        try {\n          sqlite3 = globalThis.sqlite3ApiBootstrap();\n        } catch (e) {\n          console.error('sqlite3ApiBootstrap() error:', e);\n          throw e;\n        } finally {\n          delete globalThis.sqlite3ApiBootstrap;\n          delete globalThis.sqlite3ApiConfig;\n        }\n\n        Module.sqlite3 = sqlite3;\n      } else {\n        console.warn(\n          'This is not running in an Emscripten module context, so',\n          'globalThis.sqlite3ApiBootstrap() is _not_ being called due to lack',\n          'of config info for the WASM environment.',\n          'It must be called manually.',\n        );\n      }\n    };\n\n    moduleRtn = readyPromise;\n\n    return moduleRtn;\n  };\n})();\n\nconst toExportForESM = (function () {\n  const originalInit = sqlite3InitModule;\n  if (!originalInit) {\n    throw new Error(\n      'Expecting globalThis.sqlite3InitModule to be defined by the Emscripten build.',\n    );\n  }\n\n  const initModuleState = (globalThis.sqlite3InitModuleState = Object.assign(\n    Object.create(null),\n    {\n      moduleScript: globalThis?.document?.currentScript,\n      isWorker: 'undefined' !== typeof WorkerGlobalScope,\n      location: globalThis.location,\n      urlParams: globalThis?.location?.href\n        ? new URL(globalThis.location.href).searchParams\n        : new URLSearchParams(),\n    },\n  ));\n  initModuleState.debugModule = initModuleState.urlParams.has(\n    'sqlite3.debugModule',\n  )\n    ? (...args) => console.warn('sqlite3.debugModule:', ...args)\n    : () => {};\n\n  if (initModuleState.urlParams.has('sqlite3.dir')) {\n    initModuleState.sqlite3Dir =\n      initModuleState.urlParams.get('sqlite3.dir') + '/';\n  } else if (initModuleState.moduleScript) {\n    const li = initModuleState.moduleScript.src.split('/');\n    li.pop();\n    initModuleState.sqlite3Dir = li.join('/') + '/';\n  }\n\n  globalThis.sqlite3InitModule = function ff(...args) {\n    return originalInit(...args)\n      .then((EmscriptenModule) => {\n        EmscriptenModule.runSQLite3PostLoadInit(EmscriptenModule);\n        const s = EmscriptenModule.sqlite3;\n        s.scriptInfo = initModuleState;\n\n        if (ff.__isUnderTest) s.__isUnderTest = true;\n        const f = s.asyncPostInit;\n        delete s.asyncPostInit;\n        const rv = f();\n        return rv;\n      })\n      .catch((e) => {\n        console.error('Exception loading sqlite3 module:', e);\n        throw e;\n      });\n  };\n  globalThis.sqlite3InitModule.ready = originalInit.ready;\n\n  if (globalThis.sqlite3InitModuleState.moduleScript) {\n    const sim = globalThis.sqlite3InitModuleState;\n    let src = sim.moduleScript.src.split('/');\n    src.pop();\n    sim.scriptDir = src.join('/') + '/';\n  }\n  initModuleState.debugModule('sqlite3InitModuleState =', initModuleState);\n  if (false) {}\n  return globalThis.sqlite3InitModule;\n})();\nsqlite3InitModule = toExportForESM;\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (sqlite3InitModule);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/../node_modules/.pnpm/@sqlite.org+sqlite-wasm@3.49.1-build2/node_modules/@sqlite.org/sqlite-wasm/sqlite-wasm/jswasm/sqlite3-bundler-friendly.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/../node_modules/.pnpm/@sqlite.org+sqlite-wasm@3.49.1-build2/node_modules/@sqlite.org/sqlite-wasm/sqlite-wasm/jswasm/sqlite3-worker1-promiser.mjs":
/*!********************************************************************************************************************************************************!*\
  !*** ../node_modules/.pnpm/@sqlite.org+sqlite-wasm@3.49.1-build2/node_modules/@sqlite.org/sqlite-wasm/sqlite-wasm/jswasm/sqlite3-worker1-promiser.mjs ***!
  \********************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/*\n  2022-08-24\n\n  The author disclaims copyright to this source code.  In place of a\n  legal notice, here is a blessing:\n\n  *   May you do good and not evil.\n  *   May you find forgiveness for yourself and forgive others.\n  *   May you share freely, never taking more than you give.\n\n  ***********************************************************************\n\n  This file implements a Promise-based proxy for the sqlite3 Worker\n  API #1. It is intended to be included either from the main thread or\n  a Worker, but only if (A) the environment supports nested Workers\n  and (B) it's _not_ a Worker which loads the sqlite3 WASM/JS\n  module. This file's features will load that module and provide a\n  slightly simpler client-side interface than the slightly-lower-level\n  Worker API does.\n\n  This script necessarily exposes one global symbol, but clients may\n  freely `delete` that symbol after calling it.\n*/\n\n\nglobalThis.sqlite3Worker1Promiser = function callee(\n  config = callee.defaultConfig,\n) {\n  if (1 === arguments.length && 'function' === typeof arguments[0]) {\n    const f = config;\n    config = Object.assign(Object.create(null), callee.defaultConfig);\n    config.onready = f;\n  } else {\n    config = Object.assign(Object.create(null), callee.defaultConfig, config);\n  }\n  const handlerMap = Object.create(null);\n  const noop = function () {};\n  const err = config.onerror || noop;\n  const debug = config.debug || noop;\n  const idTypeMap = config.generateMessageId ? undefined : Object.create(null);\n  const genMsgId =\n    config.generateMessageId ||\n    function (msg) {\n      return (\n        msg.type + '#' + (idTypeMap[msg.type] = (idTypeMap[msg.type] || 0) + 1)\n      );\n    };\n  const toss = (...args) => {\n    throw new Error(args.join(' '));\n  };\n  if (!config.worker) config.worker = callee.defaultConfig.worker;\n  if ('function' === typeof config.worker) config.worker = config.worker();\n  let dbId;\n  let promiserFunc;\n  config.worker.onmessage = function (ev) {\n    ev = ev.data;\n    debug('worker1.onmessage', ev);\n    let msgHandler = handlerMap[ev.messageId];\n    if (!msgHandler) {\n      if (ev && 'sqlite3-api' === ev.type && 'worker1-ready' === ev.result) {\n        if (config.onready) config.onready(promiserFunc);\n        return;\n      }\n      msgHandler = handlerMap[ev.type];\n      if (msgHandler && msgHandler.onrow) {\n        msgHandler.onrow(ev);\n        return;\n      }\n      if (config.onunhandled) config.onunhandled(arguments[0]);\n      else err('sqlite3Worker1Promiser() unhandled worker message:', ev);\n      return;\n    }\n    delete handlerMap[ev.messageId];\n    switch (ev.type) {\n      case 'error':\n        msgHandler.reject(ev);\n        return;\n      case 'open':\n        if (!dbId) dbId = ev.dbId;\n        break;\n      case 'close':\n        if (ev.dbId === dbId) dbId = undefined;\n        break;\n      default:\n        break;\n    }\n    try {\n      msgHandler.resolve(ev);\n    } catch (e) {\n      msgHandler.reject(e);\n    }\n  };\n  return (promiserFunc = function () {\n    let msg;\n    if (1 === arguments.length) {\n      msg = arguments[0];\n    } else if (2 === arguments.length) {\n      msg = Object.create(null);\n      msg.type = arguments[0];\n      msg.args = arguments[1];\n      msg.dbId = msg.args.dbId;\n    } else {\n      toss('Invalid arguments for sqlite3Worker1Promiser()-created factory.');\n    }\n    if (!msg.dbId && msg.type !== 'open') msg.dbId = dbId;\n    msg.messageId = genMsgId(msg);\n    msg.departureTime = performance.now();\n    const proxy = Object.create(null);\n    proxy.message = msg;\n    let rowCallbackId;\n    if ('exec' === msg.type && msg.args) {\n      if ('function' === typeof msg.args.callback) {\n        rowCallbackId = msg.messageId + ':row';\n        proxy.onrow = msg.args.callback;\n        msg.args.callback = rowCallbackId;\n        handlerMap[rowCallbackId] = proxy;\n      } else if ('string' === typeof msg.args.callback) {\n        toss(\n          'exec callback may not be a string when using the Promise interface.',\n        );\n      }\n    }\n\n    let p = new Promise(function (resolve, reject) {\n      proxy.resolve = resolve;\n      proxy.reject = reject;\n      handlerMap[msg.messageId] = proxy;\n      debug(\n        'Posting',\n        msg.type,\n        'message to Worker dbId=' + (dbId || 'default') + ':',\n        msg,\n      );\n      config.worker.postMessage(msg);\n    });\n    if (rowCallbackId) p = p.finally(() => delete handlerMap[rowCallbackId]);\n    return p;\n  });\n};\n\nglobalThis.sqlite3Worker1Promiser.defaultConfig = {\n  worker: function () {\n    return new Worker(\n      __webpack_require__.tu(new URL(/* worker import */ __webpack_require__.p + __webpack_require__.u(\"_app-pages-browser_node_modules_pnpm_sqlite_org_sqlite-wasm_3_49_1-build2_node_modules_sqlite-d02caa\"), __webpack_require__.b)),\n      {\n        type: undefined,\n      },\n    );\n  },\n  onerror: (...args) => console.error('worker1 promiser error', ...args),\n};\n\nsqlite3Worker1Promiser.v2 = function (config) {\n  let oldFunc;\n  if ('function' == typeof config) {\n    oldFunc = config;\n    config = {};\n  } else if ('function' === typeof config?.onready) {\n    oldFunc = config.onready;\n    delete config.onready;\n  }\n  const promiseProxy = Object.create(null);\n  config = Object.assign(config || Object.create(null), {\n    onready: async function (func) {\n      try {\n        if (oldFunc) await oldFunc(func);\n        promiseProxy.resolve(func);\n      } catch (e) {\n        promiseProxy.reject(e);\n      }\n    },\n  });\n  const p = new Promise(function (resolve, reject) {\n    promiseProxy.resolve = resolve;\n    promiseProxy.reject = reject;\n  });\n  try {\n    this.original(config);\n  } catch (e) {\n    promiseProxy.reject(e);\n  }\n  return p;\n}.bind({\n  original: sqlite3Worker1Promiser,\n});\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (sqlite3Worker1Promiser.v2);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi9ub2RlX21vZHVsZXMvLnBucG0vQHNxbGl0ZS5vcmcrc3FsaXRlLXdhc21AMy40OS4xLWJ1aWxkMi9ub2RlX21vZHVsZXMvQHNxbGl0ZS5vcmcvc3FsaXRlLXdhc20vc3FsaXRlLXdhc20vanN3YXNtL3NxbGl0ZTMtd29ya2VyMS1wcm9taXNlci5tanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ2E7O0FBRWI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNLCtCQUFRLGdNQUF1RCxDQUFDO0FBQ3RFO0FBQ0EsY0FBYyxTQUFRO0FBQ3RCLE9BQU87QUFDUDtBQUNBLEdBQUc7QUFDSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBLENBQUM7O0FBRUQsaUVBQWUseUJBQXlCLEVBQUMiLCJzb3VyY2VzIjpbIi9Vc2Vycy9ldGhhbmtpbS9OZXN0b3IvbWVkZmV0Y2guanMvbm9kZV9tb2R1bGVzLy5wbnBtL0BzcWxpdGUub3JnK3NxbGl0ZS13YXNtQDMuNDkuMS1idWlsZDIvbm9kZV9tb2R1bGVzL0BzcWxpdGUub3JnL3NxbGl0ZS13YXNtL3NxbGl0ZS13YXNtL2pzd2FzbS9zcWxpdGUzLXdvcmtlcjEtcHJvbWlzZXIubWpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qXG4gIDIwMjItMDgtMjRcblxuICBUaGUgYXV0aG9yIGRpc2NsYWltcyBjb3B5cmlnaHQgdG8gdGhpcyBzb3VyY2UgY29kZS4gIEluIHBsYWNlIG9mIGFcbiAgbGVnYWwgbm90aWNlLCBoZXJlIGlzIGEgYmxlc3Npbmc6XG5cbiAgKiAgIE1heSB5b3UgZG8gZ29vZCBhbmQgbm90IGV2aWwuXG4gICogICBNYXkgeW91IGZpbmQgZm9yZ2l2ZW5lc3MgZm9yIHlvdXJzZWxmIGFuZCBmb3JnaXZlIG90aGVycy5cbiAgKiAgIE1heSB5b3Ugc2hhcmUgZnJlZWx5LCBuZXZlciB0YWtpbmcgbW9yZSB0aGFuIHlvdSBnaXZlLlxuXG4gICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG5cbiAgVGhpcyBmaWxlIGltcGxlbWVudHMgYSBQcm9taXNlLWJhc2VkIHByb3h5IGZvciB0aGUgc3FsaXRlMyBXb3JrZXJcbiAgQVBJICMxLiBJdCBpcyBpbnRlbmRlZCB0byBiZSBpbmNsdWRlZCBlaXRoZXIgZnJvbSB0aGUgbWFpbiB0aHJlYWQgb3JcbiAgYSBXb3JrZXIsIGJ1dCBvbmx5IGlmIChBKSB0aGUgZW52aXJvbm1lbnQgc3VwcG9ydHMgbmVzdGVkIFdvcmtlcnNcbiAgYW5kIChCKSBpdCdzIF9ub3RfIGEgV29ya2VyIHdoaWNoIGxvYWRzIHRoZSBzcWxpdGUzIFdBU00vSlNcbiAgbW9kdWxlLiBUaGlzIGZpbGUncyBmZWF0dXJlcyB3aWxsIGxvYWQgdGhhdCBtb2R1bGUgYW5kIHByb3ZpZGUgYVxuICBzbGlnaHRseSBzaW1wbGVyIGNsaWVudC1zaWRlIGludGVyZmFjZSB0aGFuIHRoZSBzbGlnaHRseS1sb3dlci1sZXZlbFxuICBXb3JrZXIgQVBJIGRvZXMuXG5cbiAgVGhpcyBzY3JpcHQgbmVjZXNzYXJpbHkgZXhwb3NlcyBvbmUgZ2xvYmFsIHN5bWJvbCwgYnV0IGNsaWVudHMgbWF5XG4gIGZyZWVseSBgZGVsZXRlYCB0aGF0IHN5bWJvbCBhZnRlciBjYWxsaW5nIGl0LlxuKi9cbid1c2Ugc3RyaWN0JztcblxuZ2xvYmFsVGhpcy5zcWxpdGUzV29ya2VyMVByb21pc2VyID0gZnVuY3Rpb24gY2FsbGVlKFxuICBjb25maWcgPSBjYWxsZWUuZGVmYXVsdENvbmZpZyxcbikge1xuICBpZiAoMSA9PT0gYXJndW1lbnRzLmxlbmd0aCAmJiAnZnVuY3Rpb24nID09PSB0eXBlb2YgYXJndW1lbnRzWzBdKSB7XG4gICAgY29uc3QgZiA9IGNvbmZpZztcbiAgICBjb25maWcgPSBPYmplY3QuYXNzaWduKE9iamVjdC5jcmVhdGUobnVsbCksIGNhbGxlZS5kZWZhdWx0Q29uZmlnKTtcbiAgICBjb25maWcub25yZWFkeSA9IGY7XG4gIH0gZWxzZSB7XG4gICAgY29uZmlnID0gT2JqZWN0LmFzc2lnbihPYmplY3QuY3JlYXRlKG51bGwpLCBjYWxsZWUuZGVmYXVsdENvbmZpZywgY29uZmlnKTtcbiAgfVxuICBjb25zdCBoYW5kbGVyTWFwID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgY29uc3Qgbm9vcCA9IGZ1bmN0aW9uICgpIHt9O1xuICBjb25zdCBlcnIgPSBjb25maWcub25lcnJvciB8fCBub29wO1xuICBjb25zdCBkZWJ1ZyA9IGNvbmZpZy5kZWJ1ZyB8fCBub29wO1xuICBjb25zdCBpZFR5cGVNYXAgPSBjb25maWcuZ2VuZXJhdGVNZXNzYWdlSWQgPyB1bmRlZmluZWQgOiBPYmplY3QuY3JlYXRlKG51bGwpO1xuICBjb25zdCBnZW5Nc2dJZCA9XG4gICAgY29uZmlnLmdlbmVyYXRlTWVzc2FnZUlkIHx8XG4gICAgZnVuY3Rpb24gKG1zZykge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgbXNnLnR5cGUgKyAnIycgKyAoaWRUeXBlTWFwW21zZy50eXBlXSA9IChpZFR5cGVNYXBbbXNnLnR5cGVdIHx8IDApICsgMSlcbiAgICAgICk7XG4gICAgfTtcbiAgY29uc3QgdG9zcyA9ICguLi5hcmdzKSA9PiB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGFyZ3Muam9pbignICcpKTtcbiAgfTtcbiAgaWYgKCFjb25maWcud29ya2VyKSBjb25maWcud29ya2VyID0gY2FsbGVlLmRlZmF1bHRDb25maWcud29ya2VyO1xuICBpZiAoJ2Z1bmN0aW9uJyA9PT0gdHlwZW9mIGNvbmZpZy53b3JrZXIpIGNvbmZpZy53b3JrZXIgPSBjb25maWcud29ya2VyKCk7XG4gIGxldCBkYklkO1xuICBsZXQgcHJvbWlzZXJGdW5jO1xuICBjb25maWcud29ya2VyLm9ubWVzc2FnZSA9IGZ1bmN0aW9uIChldikge1xuICAgIGV2ID0gZXYuZGF0YTtcbiAgICBkZWJ1Zygnd29ya2VyMS5vbm1lc3NhZ2UnLCBldik7XG4gICAgbGV0IG1zZ0hhbmRsZXIgPSBoYW5kbGVyTWFwW2V2Lm1lc3NhZ2VJZF07XG4gICAgaWYgKCFtc2dIYW5kbGVyKSB7XG4gICAgICBpZiAoZXYgJiYgJ3NxbGl0ZTMtYXBpJyA9PT0gZXYudHlwZSAmJiAnd29ya2VyMS1yZWFkeScgPT09IGV2LnJlc3VsdCkge1xuICAgICAgICBpZiAoY29uZmlnLm9ucmVhZHkpIGNvbmZpZy5vbnJlYWR5KHByb21pc2VyRnVuYyk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIG1zZ0hhbmRsZXIgPSBoYW5kbGVyTWFwW2V2LnR5cGVdO1xuICAgICAgaWYgKG1zZ0hhbmRsZXIgJiYgbXNnSGFuZGxlci5vbnJvdykge1xuICAgICAgICBtc2dIYW5kbGVyLm9ucm93KGV2KTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKGNvbmZpZy5vbnVuaGFuZGxlZCkgY29uZmlnLm9udW5oYW5kbGVkKGFyZ3VtZW50c1swXSk7XG4gICAgICBlbHNlIGVycignc3FsaXRlM1dvcmtlcjFQcm9taXNlcigpIHVuaGFuZGxlZCB3b3JrZXIgbWVzc2FnZTonLCBldik7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGRlbGV0ZSBoYW5kbGVyTWFwW2V2Lm1lc3NhZ2VJZF07XG4gICAgc3dpdGNoIChldi50eXBlKSB7XG4gICAgICBjYXNlICdlcnJvcic6XG4gICAgICAgIG1zZ0hhbmRsZXIucmVqZWN0KGV2KTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgY2FzZSAnb3Blbic6XG4gICAgICAgIGlmICghZGJJZCkgZGJJZCA9IGV2LmRiSWQ7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnY2xvc2UnOlxuICAgICAgICBpZiAoZXYuZGJJZCA9PT0gZGJJZCkgZGJJZCA9IHVuZGVmaW5lZDtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBicmVhaztcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgIG1zZ0hhbmRsZXIucmVzb2x2ZShldik7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgbXNnSGFuZGxlci5yZWplY3QoZSk7XG4gICAgfVxuICB9O1xuICByZXR1cm4gKHByb21pc2VyRnVuYyA9IGZ1bmN0aW9uICgpIHtcbiAgICBsZXQgbXNnO1xuICAgIGlmICgxID09PSBhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICBtc2cgPSBhcmd1bWVudHNbMF07XG4gICAgfSBlbHNlIGlmICgyID09PSBhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICBtc2cgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgbXNnLnR5cGUgPSBhcmd1bWVudHNbMF07XG4gICAgICBtc2cuYXJncyA9IGFyZ3VtZW50c1sxXTtcbiAgICAgIG1zZy5kYklkID0gbXNnLmFyZ3MuZGJJZDtcbiAgICB9IGVsc2Uge1xuICAgICAgdG9zcygnSW52YWxpZCBhcmd1bWVudHMgZm9yIHNxbGl0ZTNXb3JrZXIxUHJvbWlzZXIoKS1jcmVhdGVkIGZhY3RvcnkuJyk7XG4gICAgfVxuICAgIGlmICghbXNnLmRiSWQgJiYgbXNnLnR5cGUgIT09ICdvcGVuJykgbXNnLmRiSWQgPSBkYklkO1xuICAgIG1zZy5tZXNzYWdlSWQgPSBnZW5Nc2dJZChtc2cpO1xuICAgIG1zZy5kZXBhcnR1cmVUaW1lID0gcGVyZm9ybWFuY2Uubm93KCk7XG4gICAgY29uc3QgcHJveHkgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHByb3h5Lm1lc3NhZ2UgPSBtc2c7XG4gICAgbGV0IHJvd0NhbGxiYWNrSWQ7XG4gICAgaWYgKCdleGVjJyA9PT0gbXNnLnR5cGUgJiYgbXNnLmFyZ3MpIHtcbiAgICAgIGlmICgnZnVuY3Rpb24nID09PSB0eXBlb2YgbXNnLmFyZ3MuY2FsbGJhY2spIHtcbiAgICAgICAgcm93Q2FsbGJhY2tJZCA9IG1zZy5tZXNzYWdlSWQgKyAnOnJvdyc7XG4gICAgICAgIHByb3h5Lm9ucm93ID0gbXNnLmFyZ3MuY2FsbGJhY2s7XG4gICAgICAgIG1zZy5hcmdzLmNhbGxiYWNrID0gcm93Q2FsbGJhY2tJZDtcbiAgICAgICAgaGFuZGxlck1hcFtyb3dDYWxsYmFja0lkXSA9IHByb3h5O1xuICAgICAgfSBlbHNlIGlmICgnc3RyaW5nJyA9PT0gdHlwZW9mIG1zZy5hcmdzLmNhbGxiYWNrKSB7XG4gICAgICAgIHRvc3MoXG4gICAgICAgICAgJ2V4ZWMgY2FsbGJhY2sgbWF5IG5vdCBiZSBhIHN0cmluZyB3aGVuIHVzaW5nIHRoZSBQcm9taXNlIGludGVyZmFjZS4nLFxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cblxuICAgIGxldCBwID0gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgcHJveHkucmVzb2x2ZSA9IHJlc29sdmU7XG4gICAgICBwcm94eS5yZWplY3QgPSByZWplY3Q7XG4gICAgICBoYW5kbGVyTWFwW21zZy5tZXNzYWdlSWRdID0gcHJveHk7XG4gICAgICBkZWJ1ZyhcbiAgICAgICAgJ1Bvc3RpbmcnLFxuICAgICAgICBtc2cudHlwZSxcbiAgICAgICAgJ21lc3NhZ2UgdG8gV29ya2VyIGRiSWQ9JyArIChkYklkIHx8ICdkZWZhdWx0JykgKyAnOicsXG4gICAgICAgIG1zZyxcbiAgICAgICk7XG4gICAgICBjb25maWcud29ya2VyLnBvc3RNZXNzYWdlKG1zZyk7XG4gICAgfSk7XG4gICAgaWYgKHJvd0NhbGxiYWNrSWQpIHAgPSBwLmZpbmFsbHkoKCkgPT4gZGVsZXRlIGhhbmRsZXJNYXBbcm93Q2FsbGJhY2tJZF0pO1xuICAgIHJldHVybiBwO1xuICB9KTtcbn07XG5cbmdsb2JhbFRoaXMuc3FsaXRlM1dvcmtlcjFQcm9taXNlci5kZWZhdWx0Q29uZmlnID0ge1xuICB3b3JrZXI6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gbmV3IFdvcmtlcihcbiAgICAgIG5ldyBVUkwoJ3NxbGl0ZTMtd29ya2VyMS1idW5kbGVyLWZyaWVuZGx5Lm1qcycsIGltcG9ydC5tZXRhLnVybCksXG4gICAgICB7XG4gICAgICAgIHR5cGU6ICdtb2R1bGUnLFxuICAgICAgfSxcbiAgICApO1xuICB9LFxuICBvbmVycm9yOiAoLi4uYXJncykgPT4gY29uc29sZS5lcnJvcignd29ya2VyMSBwcm9taXNlciBlcnJvcicsIC4uLmFyZ3MpLFxufTtcblxuc3FsaXRlM1dvcmtlcjFQcm9taXNlci52MiA9IGZ1bmN0aW9uIChjb25maWcpIHtcbiAgbGV0IG9sZEZ1bmM7XG4gIGlmICgnZnVuY3Rpb24nID09IHR5cGVvZiBjb25maWcpIHtcbiAgICBvbGRGdW5jID0gY29uZmlnO1xuICAgIGNvbmZpZyA9IHt9O1xuICB9IGVsc2UgaWYgKCdmdW5jdGlvbicgPT09IHR5cGVvZiBjb25maWc/Lm9ucmVhZHkpIHtcbiAgICBvbGRGdW5jID0gY29uZmlnLm9ucmVhZHk7XG4gICAgZGVsZXRlIGNvbmZpZy5vbnJlYWR5O1xuICB9XG4gIGNvbnN0IHByb21pc2VQcm94eSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIGNvbmZpZyA9IE9iamVjdC5hc3NpZ24oY29uZmlnIHx8IE9iamVjdC5jcmVhdGUobnVsbCksIHtcbiAgICBvbnJlYWR5OiBhc3luYyBmdW5jdGlvbiAoZnVuYykge1xuICAgICAgdHJ5IHtcbiAgICAgICAgaWYgKG9sZEZ1bmMpIGF3YWl0IG9sZEZ1bmMoZnVuYyk7XG4gICAgICAgIHByb21pc2VQcm94eS5yZXNvbHZlKGZ1bmMpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBwcm9taXNlUHJveHkucmVqZWN0KGUpO1xuICAgICAgfVxuICAgIH0sXG4gIH0pO1xuICBjb25zdCBwID0gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgIHByb21pc2VQcm94eS5yZXNvbHZlID0gcmVzb2x2ZTtcbiAgICBwcm9taXNlUHJveHkucmVqZWN0ID0gcmVqZWN0O1xuICB9KTtcbiAgdHJ5IHtcbiAgICB0aGlzLm9yaWdpbmFsKGNvbmZpZyk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBwcm9taXNlUHJveHkucmVqZWN0KGUpO1xuICB9XG4gIHJldHVybiBwO1xufS5iaW5kKHtcbiAgb3JpZ2luYWw6IHNxbGl0ZTNXb3JrZXIxUHJvbWlzZXIsXG59KTtcblxuZXhwb3J0IGRlZmF1bHQgc3FsaXRlM1dvcmtlcjFQcm9taXNlci52MjtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/../node_modules/.pnpm/@sqlite.org+sqlite-wasm@3.49.1-build2/node_modules/@sqlite.org/sqlite-wasm/sqlite-wasm/jswasm/sqlite3-worker1-promiser.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/../node_modules/.pnpm/@sqlite.org+sqlite-wasm@3.49.1-build2/node_modules/@sqlite.org/sqlite-wasm/sqlite-wasm/jswasm/sqlite3.wasm":
/*!****************************************************************************************************************************************!*\
  !*** ../node_modules/.pnpm/@sqlite.org+sqlite-wasm@3.49.1-build2/node_modules/@sqlite.org/sqlite-wasm/sqlite-wasm/jswasm/sqlite3.wasm ***!
  \****************************************************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "static/media/sqlite3.9fe1c4d8.wasm";

/***/ }),

/***/ "(app-pages-browser)/../node_modules/.pnpm/next@15.3.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/build/polyfills/process.js":
/*!***************************************************************************************************************************************!*\
  !*** ../node_modules/.pnpm/next@15.3.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/build/polyfills/process.js ***!
  \***************************************************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("\nvar _global_process, _global_process1;\nmodule.exports = ((_global_process = __webpack_require__.g.process) == null ? void 0 : _global_process.env) && typeof ((_global_process1 = __webpack_require__.g.process) == null ? void 0 : _global_process1.env) === 'object' ? __webpack_require__.g.process : __webpack_require__(/*! next/dist/compiled/process */ \"(app-pages-browser)/../node_modules/.pnpm/next@15.3.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/compiled/process/browser.js\");\n\n//# sourceMappingURL=process.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi9ub2RlX21vZHVsZXMvLnBucG0vbmV4dEAxNS4zLjBfcmVhY3QtZG9tQDE5LjEuMF9yZWFjdEAxOS4xLjBfX3JlYWN0QDE5LjEuMC9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3BvbHlmaWxscy9wcm9jZXNzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQSxxQ0FBcUMscUJBQU0saUZBQWlGLHFCQUFNLGtFQUFrRSxxQkFBTSxXQUFXLG1CQUFPLENBQUMsd0xBQTRCOztBQUV6UCIsInNvdXJjZXMiOlsiL1VzZXJzL2V0aGFua2ltL05lc3Rvci9tZWRmZXRjaC5qcy9ub2RlX21vZHVsZXMvLnBucG0vbmV4dEAxNS4zLjBfcmVhY3QtZG9tQDE5LjEuMF9yZWFjdEAxOS4xLjBfX3JlYWN0QDE5LjEuMC9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3BvbHlmaWxscy9wcm9jZXNzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9nbG9iYWxfcHJvY2VzcywgX2dsb2JhbF9wcm9jZXNzMTtcbm1vZHVsZS5leHBvcnRzID0gKChfZ2xvYmFsX3Byb2Nlc3MgPSBnbG9iYWwucHJvY2VzcykgPT0gbnVsbCA/IHZvaWQgMCA6IF9nbG9iYWxfcHJvY2Vzcy5lbnYpICYmIHR5cGVvZiAoKF9nbG9iYWxfcHJvY2VzczEgPSBnbG9iYWwucHJvY2VzcykgPT0gbnVsbCA/IHZvaWQgMCA6IF9nbG9iYWxfcHJvY2VzczEuZW52KSA9PT0gJ29iamVjdCcgPyBnbG9iYWwucHJvY2VzcyA6IHJlcXVpcmUoJ25leHQvZGlzdC9jb21waWxlZC9wcm9jZXNzJyk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXByb2Nlc3MuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/../node_modules/.pnpm/next@15.3.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/build/polyfills/process.js\n"));

/***/ }),

/***/ "(app-pages-browser)/../node_modules/.pnpm/next@15.3.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/compiled/process/browser.js":
/*!****************************************************************************************************************************************!*\
  !*** ../node_modules/.pnpm/next@15.3.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/compiled/process/browser.js ***!
  \****************************************************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval(__webpack_require__.ts("var __dirname = \"/\";\n(function(){var e={229:function(e){var t=e.exports={};var r;var n;function defaultSetTimout(){throw new Error(\"setTimeout has not been defined\")}function defaultClearTimeout(){throw new Error(\"clearTimeout has not been defined\")}(function(){try{if(typeof setTimeout===\"function\"){r=setTimeout}else{r=defaultSetTimout}}catch(e){r=defaultSetTimout}try{if(typeof clearTimeout===\"function\"){n=clearTimeout}else{n=defaultClearTimeout}}catch(e){n=defaultClearTimeout}})();function runTimeout(e){if(r===setTimeout){return setTimeout(e,0)}if((r===defaultSetTimout||!r)&&setTimeout){r=setTimeout;return setTimeout(e,0)}try{return r(e,0)}catch(t){try{return r.call(null,e,0)}catch(t){return r.call(this,e,0)}}}function runClearTimeout(e){if(n===clearTimeout){return clearTimeout(e)}if((n===defaultClearTimeout||!n)&&clearTimeout){n=clearTimeout;return clearTimeout(e)}try{return n(e)}catch(t){try{return n.call(null,e)}catch(t){return n.call(this,e)}}}var i=[];var o=false;var u;var a=-1;function cleanUpNextTick(){if(!o||!u){return}o=false;if(u.length){i=u.concat(i)}else{a=-1}if(i.length){drainQueue()}}function drainQueue(){if(o){return}var e=runTimeout(cleanUpNextTick);o=true;var t=i.length;while(t){u=i;i=[];while(++a<t){if(u){u[a].run()}}a=-1;t=i.length}u=null;o=false;runClearTimeout(e)}t.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1){for(var r=1;r<arguments.length;r++){t[r-1]=arguments[r]}}i.push(new Item(e,t));if(i.length===1&&!o){runTimeout(drainQueue)}};function Item(e,t){this.fun=e;this.array=t}Item.prototype.run=function(){this.fun.apply(null,this.array)};t.title=\"browser\";t.browser=true;t.env={};t.argv=[];t.version=\"\";t.versions={};function noop(){}t.on=noop;t.addListener=noop;t.once=noop;t.off=noop;t.removeListener=noop;t.removeAllListeners=noop;t.emit=noop;t.prependListener=noop;t.prependOnceListener=noop;t.listeners=function(e){return[]};t.binding=function(e){throw new Error(\"process.binding is not supported\")};t.cwd=function(){return\"/\"};t.chdir=function(e){throw new Error(\"process.chdir is not supported\")};t.umask=function(){return 0}}};var t={};function __nccwpck_require__(r){var n=t[r];if(n!==undefined){return n.exports}var i=t[r]={exports:{}};var o=true;try{e[r](i,i.exports,__nccwpck_require__);o=false}finally{if(o)delete t[r]}return i.exports}if(typeof __nccwpck_require__!==\"undefined\")__nccwpck_require__.ab=__dirname+\"/\";var r=__nccwpck_require__(229);module.exports=r})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uLi9ub2RlX21vZHVsZXMvLnBucG0vbmV4dEAxNS4zLjBfcmVhY3QtZG9tQDE5LjEuMF9yZWFjdEAxOS4xLjBfX3JlYWN0QDE5LjEuMC9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NvbXBpbGVkL3Byb2Nlc3MvYnJvd3Nlci5qcyIsIm1hcHBpbmdzIjoiO0FBQUEsWUFBWSxPQUFPLGdCQUFnQixtQkFBbUIsTUFBTSxNQUFNLDRCQUE0QixtREFBbUQsK0JBQStCLHFEQUFxRCxZQUFZLElBQUksbUNBQW1DLGFBQWEsS0FBSyxvQkFBb0IsU0FBUyxtQkFBbUIsSUFBSSxxQ0FBcUMsZUFBZSxLQUFLLHVCQUF1QixTQUFTLHVCQUF1QixJQUFJLHVCQUF1QixtQkFBbUIsdUJBQXVCLDJDQUEyQyxhQUFhLHVCQUF1QixJQUFJLGNBQWMsU0FBUyxJQUFJLHdCQUF3QixTQUFTLDBCQUEwQiw0QkFBNEIscUJBQXFCLHVCQUF1QixnREFBZ0QsZUFBZSx1QkFBdUIsSUFBSSxZQUFZLFNBQVMsSUFBSSxzQkFBc0IsU0FBUyx3QkFBd0IsU0FBUyxZQUFZLE1BQU0sU0FBUywyQkFBMkIsV0FBVyxPQUFPLFFBQVEsYUFBYSxjQUFjLEtBQUssS0FBSyxhQUFhLGNBQWMsc0JBQXNCLE1BQU0sT0FBTyxrQ0FBa0MsT0FBTyxlQUFlLFNBQVMsSUFBSSxLQUFLLGFBQWEsTUFBTSxZQUFZLEtBQUssV0FBVyxPQUFPLFFBQVEsbUJBQW1CLHVCQUF1QixvQ0FBb0MsdUJBQXVCLFlBQVksbUJBQW1CLEtBQUsscUJBQXFCLHNCQUFzQixxQkFBcUIseUJBQXlCLG1CQUFtQixXQUFXLGFBQWEsOEJBQThCLGlDQUFpQyxrQkFBa0IsZUFBZSxTQUFTLFVBQVUsYUFBYSxjQUFjLGlCQUFpQixVQUFVLG1CQUFtQixZQUFZLFdBQVcsc0JBQXNCLDBCQUEwQixZQUFZLHVCQUF1QiwyQkFBMkIsd0JBQXdCLFVBQVUsc0JBQXNCLHFEQUFxRCxpQkFBaUIsV0FBVyxvQkFBb0IsbURBQW1ELG1CQUFtQixZQUFZLFNBQVMsZ0NBQWdDLFdBQVcsa0JBQWtCLGlCQUFpQixZQUFZLFlBQVksV0FBVyxJQUFJLHNDQUFzQyxRQUFRLFFBQVEsaUJBQWlCLGlCQUFpQixtRUFBbUUsU0FBUyxLQUFLLCtCQUErQixpQkFBaUIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9ldGhhbmtpbS9OZXN0b3IvbWVkZmV0Y2guanMvbm9kZV9tb2R1bGVzLy5wbnBtL25leHRAMTUuMy4wX3JlYWN0LWRvbUAxOS4xLjBfcmVhY3RAMTkuMS4wX19yZWFjdEAxOS4xLjAvbm9kZV9tb2R1bGVzL25leHQvZGlzdC9jb21waWxlZC9wcm9jZXNzL2Jyb3dzZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uKCl7dmFyIGU9ezIyOTpmdW5jdGlvbihlKXt2YXIgdD1lLmV4cG9ydHM9e307dmFyIHI7dmFyIG47ZnVuY3Rpb24gZGVmYXVsdFNldFRpbW91dCgpe3Rocm93IG5ldyBFcnJvcihcInNldFRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWRcIil9ZnVuY3Rpb24gZGVmYXVsdENsZWFyVGltZW91dCgpe3Rocm93IG5ldyBFcnJvcihcImNsZWFyVGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZFwiKX0oZnVuY3Rpb24oKXt0cnl7aWYodHlwZW9mIHNldFRpbWVvdXQ9PT1cImZ1bmN0aW9uXCIpe3I9c2V0VGltZW91dH1lbHNle3I9ZGVmYXVsdFNldFRpbW91dH19Y2F0Y2goZSl7cj1kZWZhdWx0U2V0VGltb3V0fXRyeXtpZih0eXBlb2YgY2xlYXJUaW1lb3V0PT09XCJmdW5jdGlvblwiKXtuPWNsZWFyVGltZW91dH1lbHNle249ZGVmYXVsdENsZWFyVGltZW91dH19Y2F0Y2goZSl7bj1kZWZhdWx0Q2xlYXJUaW1lb3V0fX0pKCk7ZnVuY3Rpb24gcnVuVGltZW91dChlKXtpZihyPT09c2V0VGltZW91dCl7cmV0dXJuIHNldFRpbWVvdXQoZSwwKX1pZigocj09PWRlZmF1bHRTZXRUaW1vdXR8fCFyKSYmc2V0VGltZW91dCl7cj1zZXRUaW1lb3V0O3JldHVybiBzZXRUaW1lb3V0KGUsMCl9dHJ5e3JldHVybiByKGUsMCl9Y2F0Y2godCl7dHJ5e3JldHVybiByLmNhbGwobnVsbCxlLDApfWNhdGNoKHQpe3JldHVybiByLmNhbGwodGhpcyxlLDApfX19ZnVuY3Rpb24gcnVuQ2xlYXJUaW1lb3V0KGUpe2lmKG49PT1jbGVhclRpbWVvdXQpe3JldHVybiBjbGVhclRpbWVvdXQoZSl9aWYoKG49PT1kZWZhdWx0Q2xlYXJUaW1lb3V0fHwhbikmJmNsZWFyVGltZW91dCl7bj1jbGVhclRpbWVvdXQ7cmV0dXJuIGNsZWFyVGltZW91dChlKX10cnl7cmV0dXJuIG4oZSl9Y2F0Y2godCl7dHJ5e3JldHVybiBuLmNhbGwobnVsbCxlKX1jYXRjaCh0KXtyZXR1cm4gbi5jYWxsKHRoaXMsZSl9fX12YXIgaT1bXTt2YXIgbz1mYWxzZTt2YXIgdTt2YXIgYT0tMTtmdW5jdGlvbiBjbGVhblVwTmV4dFRpY2soKXtpZighb3x8IXUpe3JldHVybn1vPWZhbHNlO2lmKHUubGVuZ3RoKXtpPXUuY29uY2F0KGkpfWVsc2V7YT0tMX1pZihpLmxlbmd0aCl7ZHJhaW5RdWV1ZSgpfX1mdW5jdGlvbiBkcmFpblF1ZXVlKCl7aWYobyl7cmV0dXJufXZhciBlPXJ1blRpbWVvdXQoY2xlYW5VcE5leHRUaWNrKTtvPXRydWU7dmFyIHQ9aS5sZW5ndGg7d2hpbGUodCl7dT1pO2k9W107d2hpbGUoKythPHQpe2lmKHUpe3VbYV0ucnVuKCl9fWE9LTE7dD1pLmxlbmd0aH11PW51bGw7bz1mYWxzZTtydW5DbGVhclRpbWVvdXQoZSl9dC5uZXh0VGljaz1mdW5jdGlvbihlKXt2YXIgdD1uZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aC0xKTtpZihhcmd1bWVudHMubGVuZ3RoPjEpe2Zvcih2YXIgcj0xO3I8YXJndW1lbnRzLmxlbmd0aDtyKyspe3Rbci0xXT1hcmd1bWVudHNbcl19fWkucHVzaChuZXcgSXRlbShlLHQpKTtpZihpLmxlbmd0aD09PTEmJiFvKXtydW5UaW1lb3V0KGRyYWluUXVldWUpfX07ZnVuY3Rpb24gSXRlbShlLHQpe3RoaXMuZnVuPWU7dGhpcy5hcnJheT10fUl0ZW0ucHJvdG90eXBlLnJ1bj1mdW5jdGlvbigpe3RoaXMuZnVuLmFwcGx5KG51bGwsdGhpcy5hcnJheSl9O3QudGl0bGU9XCJicm93c2VyXCI7dC5icm93c2VyPXRydWU7dC5lbnY9e307dC5hcmd2PVtdO3QudmVyc2lvbj1cIlwiO3QudmVyc2lvbnM9e307ZnVuY3Rpb24gbm9vcCgpe310Lm9uPW5vb3A7dC5hZGRMaXN0ZW5lcj1ub29wO3Qub25jZT1ub29wO3Qub2ZmPW5vb3A7dC5yZW1vdmVMaXN0ZW5lcj1ub29wO3QucmVtb3ZlQWxsTGlzdGVuZXJzPW5vb3A7dC5lbWl0PW5vb3A7dC5wcmVwZW5kTGlzdGVuZXI9bm9vcDt0LnByZXBlbmRPbmNlTGlzdGVuZXI9bm9vcDt0Lmxpc3RlbmVycz1mdW5jdGlvbihlKXtyZXR1cm5bXX07dC5iaW5kaW5nPWZ1bmN0aW9uKGUpe3Rocm93IG5ldyBFcnJvcihcInByb2Nlc3MuYmluZGluZyBpcyBub3Qgc3VwcG9ydGVkXCIpfTt0LmN3ZD1mdW5jdGlvbigpe3JldHVyblwiL1wifTt0LmNoZGlyPWZ1bmN0aW9uKGUpe3Rocm93IG5ldyBFcnJvcihcInByb2Nlc3MuY2hkaXIgaXMgbm90IHN1cHBvcnRlZFwiKX07dC51bWFzaz1mdW5jdGlvbigpe3JldHVybiAwfX19O3ZhciB0PXt9O2Z1bmN0aW9uIF9fbmNjd3Bja19yZXF1aXJlX18ocil7dmFyIG49dFtyXTtpZihuIT09dW5kZWZpbmVkKXtyZXR1cm4gbi5leHBvcnRzfXZhciBpPXRbcl09e2V4cG9ydHM6e319O3ZhciBvPXRydWU7dHJ5e2Vbcl0oaSxpLmV4cG9ydHMsX19uY2N3cGNrX3JlcXVpcmVfXyk7bz1mYWxzZX1maW5hbGx5e2lmKG8pZGVsZXRlIHRbcl19cmV0dXJuIGkuZXhwb3J0c31pZih0eXBlb2YgX19uY2N3cGNrX3JlcXVpcmVfXyE9PVwidW5kZWZpbmVkXCIpX19uY2N3cGNrX3JlcXVpcmVfXy5hYj1fX2Rpcm5hbWUrXCIvXCI7dmFyIHI9X19uY2N3cGNrX3JlcXVpcmVfXygyMjkpO21vZHVsZS5leHBvcnRzPXJ9KSgpOyJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/../node_modules/.pnpm/next@15.3.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/compiled/process/browser.js\n"));

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			if (cachedModule.error !== undefined) throw cachedModule.error;
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		var threw = true;
/******/ 		try {
/******/ 			var execOptions = { id: moduleId, module: module, factory: __webpack_modules__[moduleId], require: __webpack_require__ };
/******/ 			__webpack_require__.i.forEach(function(handler) { handler(execOptions); });
/******/ 			module = execOptions.module;
/******/ 			execOptions.factory.call(module.exports, module, module.exports, execOptions.require);
/******/ 			threw = false;
/******/ 		} finally {
/******/ 			if(threw) delete __webpack_module_cache__[moduleId];
/******/ 		}
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = __webpack_modules__;
/******/ 	
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = __webpack_module_cache__;
/******/ 	
/******/ 	// expose the module execution interceptor
/******/ 	__webpack_require__.i = [];
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/get javascript chunk filename */
/******/ 	(() => {
/******/ 		// This function allow to reference async chunks
/******/ 		__webpack_require__.u = (chunkId) => {
/******/ 			// return url for filenames based on template
/******/ 			return "static/chunks/" + chunkId + ".js";
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/get javascript update chunk filename */
/******/ 	(() => {
/******/ 		// This function allow to reference all chunks
/******/ 		__webpack_require__.hu = (chunkId) => {
/******/ 			// return url for filenames based on template
/******/ 			return "static/webpack/" + chunkId + "." + __webpack_require__.h() + ".hot-update.js";
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/get mini-css chunk filename */
/******/ 	(() => {
/******/ 		// This function allow to reference async chunks
/******/ 		__webpack_require__.miniCssF = (chunkId) => {
/******/ 			// return url for filenames based on template
/******/ 			return undefined;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/get update manifest filename */
/******/ 	(() => {
/******/ 		__webpack_require__.hmrF = () => ("static/webpack/" + __webpack_require__.h() + ".47d18365426a5fb8.hot-update.json");
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/getFullHash */
/******/ 	(() => {
/******/ 		__webpack_require__.h = () => ("bcb6e6710cc2cdd3")
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/relative url */
/******/ 	(() => {
/******/ 		__webpack_require__.U = function RelativeURL(url) {
/******/ 			var realUrl = new URL(url, "x:/");
/******/ 			var values = {};
/******/ 			for (var key in realUrl) values[key] = realUrl[key];
/******/ 			values.href = url;
/******/ 			values.pathname = url.replace(/[?#].*/, "");
/******/ 			values.origin = values.protocol = "";
/******/ 			values.toString = values.toJSON = () => (url);
/******/ 			for (var key in values) Object.defineProperty(this, key, { enumerable: true, configurable: true, value: values[key] });
/******/ 		};
/******/ 		__webpack_require__.U.prototype = URL.prototype;
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/trusted types policy */
/******/ 	(() => {
/******/ 		var policy;
/******/ 		__webpack_require__.tt = () => {
/******/ 			// Create Trusted Type policy if Trusted Types are available and the policy doesn't exist yet.
/******/ 			if (policy === undefined) {
/******/ 				policy = {
/******/ 					createScript: (script) => (script),
/******/ 					createScriptURL: (url) => (url)
/******/ 				};
/******/ 				if (typeof trustedTypes !== "undefined" && trustedTypes.createPolicy) {
/******/ 					policy = trustedTypes.createPolicy("nextjs#bundler", policy);
/******/ 				}
/******/ 			}
/******/ 			return policy;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/trusted types script */
/******/ 	(() => {
/******/ 		__webpack_require__.ts = (script) => (__webpack_require__.tt().createScript(script));
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/trusted types script url */
/******/ 	(() => {
/******/ 		__webpack_require__.tu = (url) => (__webpack_require__.tt().createScriptURL(url));
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hot module replacement */
/******/ 	(() => {
/******/ 		var currentModuleData = {};
/******/ 		var installedModules = __webpack_require__.c;
/******/ 		
/******/ 		// module and require creation
/******/ 		var currentChildModule;
/******/ 		var currentParents = [];
/******/ 		
/******/ 		// status
/******/ 		var registeredStatusHandlers = [];
/******/ 		var currentStatus = "idle";
/******/ 		
/******/ 		// while downloading
/******/ 		var blockingPromises = 0;
/******/ 		var blockingPromisesWaiting = [];
/******/ 		
/******/ 		// The update info
/******/ 		var currentUpdateApplyHandlers;
/******/ 		var queuedInvalidatedModules;
/******/ 		
/******/ 		__webpack_require__.hmrD = currentModuleData;
/******/ 		
/******/ 		__webpack_require__.i.push(function (options) {
/******/ 			var module = options.module;
/******/ 			var require = createRequire(options.require, options.id);
/******/ 			module.hot = createModuleHotObject(options.id, module);
/******/ 			module.parents = currentParents;
/******/ 			module.children = [];
/******/ 			currentParents = [];
/******/ 			options.require = require;
/******/ 		});
/******/ 		
/******/ 		__webpack_require__.hmrC = {};
/******/ 		__webpack_require__.hmrI = {};
/******/ 		
/******/ 		function createRequire(require, moduleId) {
/******/ 			var me = installedModules[moduleId];
/******/ 			if (!me) return require;
/******/ 			var fn = function (request) {
/******/ 				if (me.hot.active) {
/******/ 					if (installedModules[request]) {
/******/ 						var parents = installedModules[request].parents;
/******/ 						if (parents.indexOf(moduleId) === -1) {
/******/ 							parents.push(moduleId);
/******/ 						}
/******/ 					} else {
/******/ 						currentParents = [moduleId];
/******/ 						currentChildModule = request;
/******/ 					}
/******/ 					if (me.children.indexOf(request) === -1) {
/******/ 						me.children.push(request);
/******/ 					}
/******/ 				} else {
/******/ 					console.warn(
/******/ 						"[HMR] unexpected require(" +
/******/ 							request +
/******/ 							") from disposed module " +
/******/ 							moduleId
/******/ 					);
/******/ 					currentParents = [];
/******/ 				}
/******/ 				return require(request);
/******/ 			};
/******/ 			var createPropertyDescriptor = function (name) {
/******/ 				return {
/******/ 					configurable: true,
/******/ 					enumerable: true,
/******/ 					get: function () {
/******/ 						return require[name];
/******/ 					},
/******/ 					set: function (value) {
/******/ 						require[name] = value;
/******/ 					}
/******/ 				};
/******/ 			};
/******/ 			for (var name in require) {
/******/ 				if (Object.prototype.hasOwnProperty.call(require, name) && name !== "e") {
/******/ 					Object.defineProperty(fn, name, createPropertyDescriptor(name));
/******/ 				}
/******/ 			}
/******/ 			fn.e = function (chunkId, fetchPriority) {
/******/ 				return trackBlockingPromise(require.e(chunkId, fetchPriority));
/******/ 			};
/******/ 			return fn;
/******/ 		}
/******/ 		
/******/ 		function createModuleHotObject(moduleId, me) {
/******/ 			var _main = currentChildModule !== moduleId;
/******/ 			var hot = {
/******/ 				// private stuff
/******/ 				_acceptedDependencies: {},
/******/ 				_acceptedErrorHandlers: {},
/******/ 				_declinedDependencies: {},
/******/ 				_selfAccepted: false,
/******/ 				_selfDeclined: false,
/******/ 				_selfInvalidated: false,
/******/ 				_disposeHandlers: [],
/******/ 				_main: _main,
/******/ 				_requireSelf: function () {
/******/ 					currentParents = me.parents.slice();
/******/ 					currentChildModule = _main ? undefined : moduleId;
/******/ 					__webpack_require__(moduleId);
/******/ 				},
/******/ 		
/******/ 				// Module API
/******/ 				active: true,
/******/ 				accept: function (dep, callback, errorHandler) {
/******/ 					if (dep === undefined) hot._selfAccepted = true;
/******/ 					else if (typeof dep === "function") hot._selfAccepted = dep;
/******/ 					else if (typeof dep === "object" && dep !== null) {
/******/ 						for (var i = 0; i < dep.length; i++) {
/******/ 							hot._acceptedDependencies[dep[i]] = callback || function () {};
/******/ 							hot._acceptedErrorHandlers[dep[i]] = errorHandler;
/******/ 						}
/******/ 					} else {
/******/ 						hot._acceptedDependencies[dep] = callback || function () {};
/******/ 						hot._acceptedErrorHandlers[dep] = errorHandler;
/******/ 					}
/******/ 				},
/******/ 				decline: function (dep) {
/******/ 					if (dep === undefined) hot._selfDeclined = true;
/******/ 					else if (typeof dep === "object" && dep !== null)
/******/ 						for (var i = 0; i < dep.length; i++)
/******/ 							hot._declinedDependencies[dep[i]] = true;
/******/ 					else hot._declinedDependencies[dep] = true;
/******/ 				},
/******/ 				dispose: function (callback) {
/******/ 					hot._disposeHandlers.push(callback);
/******/ 				},
/******/ 				addDisposeHandler: function (callback) {
/******/ 					hot._disposeHandlers.push(callback);
/******/ 				},
/******/ 				removeDisposeHandler: function (callback) {
/******/ 					var idx = hot._disposeHandlers.indexOf(callback);
/******/ 					if (idx >= 0) hot._disposeHandlers.splice(idx, 1);
/******/ 				},
/******/ 				invalidate: function () {
/******/ 					this._selfInvalidated = true;
/******/ 					switch (currentStatus) {
/******/ 						case "idle":
/******/ 							currentUpdateApplyHandlers = [];
/******/ 							Object.keys(__webpack_require__.hmrI).forEach(function (key) {
/******/ 								__webpack_require__.hmrI[key](
/******/ 									moduleId,
/******/ 									currentUpdateApplyHandlers
/******/ 								);
/******/ 							});
/******/ 							setStatus("ready");
/******/ 							break;
/******/ 						case "ready":
/******/ 							Object.keys(__webpack_require__.hmrI).forEach(function (key) {
/******/ 								__webpack_require__.hmrI[key](
/******/ 									moduleId,
/******/ 									currentUpdateApplyHandlers
/******/ 								);
/******/ 							});
/******/ 							break;
/******/ 						case "prepare":
/******/ 						case "check":
/******/ 						case "dispose":
/******/ 						case "apply":
/******/ 							(queuedInvalidatedModules = queuedInvalidatedModules || []).push(
/******/ 								moduleId
/******/ 							);
/******/ 							break;
/******/ 						default:
/******/ 							// ignore requests in error states
/******/ 							break;
/******/ 					}
/******/ 				},
/******/ 		
/******/ 				// Management API
/******/ 				check: hotCheck,
/******/ 				apply: hotApply,
/******/ 				status: function (l) {
/******/ 					if (!l) return currentStatus;
/******/ 					registeredStatusHandlers.push(l);
/******/ 				},
/******/ 				addStatusHandler: function (l) {
/******/ 					registeredStatusHandlers.push(l);
/******/ 				},
/******/ 				removeStatusHandler: function (l) {
/******/ 					var idx = registeredStatusHandlers.indexOf(l);
/******/ 					if (idx >= 0) registeredStatusHandlers.splice(idx, 1);
/******/ 				},
/******/ 		
/******/ 				// inherit from previous dispose call
/******/ 				data: currentModuleData[moduleId]
/******/ 			};
/******/ 			currentChildModule = undefined;
/******/ 			return hot;
/******/ 		}
/******/ 		
/******/ 		function setStatus(newStatus) {
/******/ 			currentStatus = newStatus;
/******/ 			var results = [];
/******/ 		
/******/ 			for (var i = 0; i < registeredStatusHandlers.length; i++)
/******/ 				results[i] = registeredStatusHandlers[i].call(null, newStatus);
/******/ 		
/******/ 			return Promise.all(results).then(function () {});
/******/ 		}
/******/ 		
/******/ 		function unblock() {
/******/ 			if (--blockingPromises === 0) {
/******/ 				setStatus("ready").then(function () {
/******/ 					if (blockingPromises === 0) {
/******/ 						var list = blockingPromisesWaiting;
/******/ 						blockingPromisesWaiting = [];
/******/ 						for (var i = 0; i < list.length; i++) {
/******/ 							list[i]();
/******/ 						}
/******/ 					}
/******/ 				});
/******/ 			}
/******/ 		}
/******/ 		
/******/ 		function trackBlockingPromise(promise) {
/******/ 			switch (currentStatus) {
/******/ 				case "ready":
/******/ 					setStatus("prepare");
/******/ 				/* fallthrough */
/******/ 				case "prepare":
/******/ 					blockingPromises++;
/******/ 					promise.then(unblock, unblock);
/******/ 					return promise;
/******/ 				default:
/******/ 					return promise;
/******/ 			}
/******/ 		}
/******/ 		
/******/ 		function waitForBlockingPromises(fn) {
/******/ 			if (blockingPromises === 0) return fn();
/******/ 			return new Promise(function (resolve) {
/******/ 				blockingPromisesWaiting.push(function () {
/******/ 					resolve(fn());
/******/ 				});
/******/ 			});
/******/ 		}
/******/ 		
/******/ 		function hotCheck(applyOnUpdate) {
/******/ 			if (currentStatus !== "idle") {
/******/ 				throw new Error("check() is only allowed in idle status");
/******/ 			}
/******/ 			return setStatus("check")
/******/ 				.then(__webpack_require__.hmrM)
/******/ 				.then(function (update) {
/******/ 					if (!update) {
/******/ 						return setStatus(applyInvalidatedModules() ? "ready" : "idle").then(
/******/ 							function () {
/******/ 								return null;
/******/ 							}
/******/ 						);
/******/ 					}
/******/ 		
/******/ 					return setStatus("prepare").then(function () {
/******/ 						var updatedModules = [];
/******/ 						currentUpdateApplyHandlers = [];
/******/ 		
/******/ 						return Promise.all(
/******/ 							Object.keys(__webpack_require__.hmrC).reduce(function (
/******/ 								promises,
/******/ 								key
/******/ 							) {
/******/ 								__webpack_require__.hmrC[key](
/******/ 									update.c,
/******/ 									update.r,
/******/ 									update.m,
/******/ 									promises,
/******/ 									currentUpdateApplyHandlers,
/******/ 									updatedModules
/******/ 								);
/******/ 								return promises;
/******/ 							}, [])
/******/ 						).then(function () {
/******/ 							return waitForBlockingPromises(function () {
/******/ 								if (applyOnUpdate) {
/******/ 									return internalApply(applyOnUpdate);
/******/ 								}
/******/ 								return setStatus("ready").then(function () {
/******/ 									return updatedModules;
/******/ 								});
/******/ 							});
/******/ 						});
/******/ 					});
/******/ 				});
/******/ 		}
/******/ 		
/******/ 		function hotApply(options) {
/******/ 			if (currentStatus !== "ready") {
/******/ 				return Promise.resolve().then(function () {
/******/ 					throw new Error(
/******/ 						"apply() is only allowed in ready status (state: " +
/******/ 							currentStatus +
/******/ 							")"
/******/ 					);
/******/ 				});
/******/ 			}
/******/ 			return internalApply(options);
/******/ 		}
/******/ 		
/******/ 		function internalApply(options) {
/******/ 			options = options || {};
/******/ 		
/******/ 			applyInvalidatedModules();
/******/ 		
/******/ 			var results = currentUpdateApplyHandlers.map(function (handler) {
/******/ 				return handler(options);
/******/ 			});
/******/ 			currentUpdateApplyHandlers = undefined;
/******/ 		
/******/ 			var errors = results
/******/ 				.map(function (r) {
/******/ 					return r.error;
/******/ 				})
/******/ 				.filter(Boolean);
/******/ 		
/******/ 			if (errors.length > 0) {
/******/ 				return setStatus("abort").then(function () {
/******/ 					throw errors[0];
/******/ 				});
/******/ 			}
/******/ 		
/******/ 			// Now in "dispose" phase
/******/ 			var disposePromise = setStatus("dispose");
/******/ 		
/******/ 			results.forEach(function (result) {
/******/ 				if (result.dispose) result.dispose();
/******/ 			});
/******/ 		
/******/ 			// Now in "apply" phase
/******/ 			var applyPromise = setStatus("apply");
/******/ 		
/******/ 			var error;
/******/ 			var reportError = function (err) {
/******/ 				if (!error) error = err;
/******/ 			};
/******/ 		
/******/ 			var outdatedModules = [];
/******/ 			results.forEach(function (result) {
/******/ 				if (result.apply) {
/******/ 					var modules = result.apply(reportError);
/******/ 					if (modules) {
/******/ 						for (var i = 0; i < modules.length; i++) {
/******/ 							outdatedModules.push(modules[i]);
/******/ 						}
/******/ 					}
/******/ 				}
/******/ 			});
/******/ 		
/******/ 			return Promise.all([disposePromise, applyPromise]).then(function () {
/******/ 				// handle errors in accept handlers and self accepted module load
/******/ 				if (error) {
/******/ 					return setStatus("fail").then(function () {
/******/ 						throw error;
/******/ 					});
/******/ 				}
/******/ 		
/******/ 				if (queuedInvalidatedModules) {
/******/ 					return internalApply(options).then(function (list) {
/******/ 						outdatedModules.forEach(function (moduleId) {
/******/ 							if (list.indexOf(moduleId) < 0) list.push(moduleId);
/******/ 						});
/******/ 						return list;
/******/ 					});
/******/ 				}
/******/ 		
/******/ 				return setStatus("idle").then(function () {
/******/ 					return outdatedModules;
/******/ 				});
/******/ 			});
/******/ 		}
/******/ 		
/******/ 		function applyInvalidatedModules() {
/******/ 			if (queuedInvalidatedModules) {
/******/ 				if (!currentUpdateApplyHandlers) currentUpdateApplyHandlers = [];
/******/ 				Object.keys(__webpack_require__.hmrI).forEach(function (key) {
/******/ 					queuedInvalidatedModules.forEach(function (moduleId) {
/******/ 						__webpack_require__.hmrI[key](
/******/ 							moduleId,
/******/ 							currentUpdateApplyHandlers
/******/ 						);
/******/ 					});
/******/ 				});
/******/ 				queuedInvalidatedModules = undefined;
/******/ 				return true;
/******/ 			}
/******/ 		}
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		__webpack_require__.p = "/_next/";
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/react refresh */
/******/ 	(() => {
/******/ 		if (__webpack_require__.i) {
/******/ 		__webpack_require__.i.push((options) => {
/******/ 			const originalFactory = options.factory;
/******/ 			options.factory = (moduleObject, moduleExports, webpackRequire) => {
/******/ 				const hasRefresh = typeof self !== "undefined" && !!self.$RefreshInterceptModuleExecution$;
/******/ 				const cleanup = hasRefresh ? self.$RefreshInterceptModuleExecution$(moduleObject.id) : () => {};
/******/ 				try {
/******/ 					originalFactory.call(this, moduleObject, moduleExports, webpackRequire);
/******/ 				} finally {
/******/ 					cleanup();
/******/ 				}
/******/ 			}
/******/ 		})
/******/ 		}
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/compat */
/******/ 	
/******/ 	
/******/ 	// noop fns to prevent runtime errors during initialization
/******/ 	if (typeof self !== "undefined") {
/******/ 		self.$RefreshReg$ = function () {};
/******/ 		self.$RefreshSig$ = function () {
/******/ 			return function (type) {
/******/ 				return type;
/******/ 			};
/******/ 		};
/******/ 	}
/******/ 	
/******/ 	/* webpack/runtime/css loading */
/******/ 	(() => {
/******/ 		var createStylesheet = (chunkId, fullhref, resolve, reject) => {
/******/ 			var linkTag = document.createElement("link");
/******/ 		
/******/ 			linkTag.rel = "stylesheet";
/******/ 			linkTag.type = "text/css";
/******/ 			var onLinkComplete = (event) => {
/******/ 				// avoid mem leaks.
/******/ 				linkTag.onerror = linkTag.onload = null;
/******/ 				if (event.type === 'load') {
/******/ 					resolve();
/******/ 				} else {
/******/ 					var errorType = event && (event.type === 'load' ? 'missing' : event.type);
/******/ 					var realHref = event && event.target && event.target.href || fullhref;
/******/ 					var err = new Error("Loading CSS chunk " + chunkId + " failed.\n(" + realHref + ")");
/******/ 					err.code = "CSS_CHUNK_LOAD_FAILED";
/******/ 					err.type = errorType;
/******/ 					err.request = realHref;
/******/ 					linkTag.parentNode.removeChild(linkTag)
/******/ 					reject(err);
/******/ 				}
/******/ 			}
/******/ 			linkTag.onerror = linkTag.onload = onLinkComplete;
/******/ 			linkTag.href = fullhref;
/******/ 		
/******/ 			(function(linkTag) {
/******/ 			                if (typeof _N_E_STYLE_LOAD === 'function') {
/******/ 			                    const { href, onload, onerror } = linkTag;
/******/ 			                    _N_E_STYLE_LOAD(href.indexOf(window.location.origin) === 0 ? new URL(href).pathname : href).then(()=>onload == null ? void 0 : onload.call(linkTag, {
/******/ 			                            type: 'load'
/******/ 			                        }), ()=>onerror == null ? void 0 : onerror.call(linkTag, {}));
/******/ 			                } else {
/******/ 			                    document.head.appendChild(linkTag);
/******/ 			                }
/******/ 			            })(linkTag)
/******/ 			return linkTag;
/******/ 		};
/******/ 		var findStylesheet = (href, fullhref) => {
/******/ 			var existingLinkTags = document.getElementsByTagName("link");
/******/ 			for(var i = 0; i < existingLinkTags.length; i++) {
/******/ 				var tag = existingLinkTags[i];
/******/ 				var dataHref = tag.getAttribute("data-href") || tag.getAttribute("href");
/******/ 				if(tag.rel === "stylesheet" && (dataHref === href || dataHref === fullhref)) return tag;
/******/ 			}
/******/ 			var existingStyleTags = document.getElementsByTagName("style");
/******/ 			for(var i = 0; i < existingStyleTags.length; i++) {
/******/ 				var tag = existingStyleTags[i];
/******/ 				var dataHref = tag.getAttribute("data-href");
/******/ 				if(dataHref === href || dataHref === fullhref) return tag;
/******/ 			}
/******/ 		};
/******/ 		var loadStylesheet = (chunkId) => {
/******/ 			return new Promise((resolve, reject) => {
/******/ 				var href = __webpack_require__.miniCssF(chunkId);
/******/ 				var fullhref = __webpack_require__.p + href;
/******/ 				if(findStylesheet(href, fullhref)) return resolve();
/******/ 				createStylesheet(chunkId, fullhref, resolve, reject);
/******/ 			});
/******/ 		}
/******/ 		// no chunk loading
/******/ 		
/******/ 		var oldTags = [];
/******/ 		var newTags = [];
/******/ 		var applyHandler = (options) => {
/******/ 			return { dispose: () => {
/******/ 				for(var i = 0; i < oldTags.length; i++) {
/******/ 					var oldTag = oldTags[i];
/******/ 					if(oldTag.parentNode) oldTag.parentNode.removeChild(oldTag);
/******/ 				}
/******/ 				oldTags.length = 0;
/******/ 			}, apply: () => {
/******/ 				for(var i = 0; i < newTags.length; i++) newTags[i].rel = "stylesheet";
/******/ 				newTags.length = 0;
/******/ 			} };
/******/ 		}
/******/ 		__webpack_require__.hmrC.miniCss = (chunkIds, removedChunks, removedModules, promises, applyHandlers, updatedModulesList) => {
/******/ 			applyHandlers.push(applyHandler);
/******/ 			chunkIds.forEach((chunkId) => {
/******/ 				var href = __webpack_require__.miniCssF(chunkId);
/******/ 				var fullhref = __webpack_require__.p + href;
/******/ 				var oldTag = findStylesheet(href, fullhref);
/******/ 				if(!oldTag) return;
/******/ 				promises.push(new Promise((resolve, reject) => {
/******/ 					var tag = createStylesheet(chunkId, fullhref, () => {
/******/ 						tag.as = "style";
/******/ 						tag.rel = "preload";
/******/ 						resolve();
/******/ 					}, reject);
/******/ 					oldTags.push(oldTag);
/******/ 					newTags.push(tag);
/******/ 				}));
/******/ 			});
/******/ 		}
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/importScripts chunk loading */
/******/ 	(() => {
/******/ 		__webpack_require__.b = self.location + "/../../../";
/******/ 		
/******/ 		// object to store loaded chunks
/******/ 		// "1" means "already loaded"
/******/ 		var installedChunks = __webpack_require__.hmrS_importScripts = __webpack_require__.hmrS_importScripts || {
/******/ 			"_app-pages-browser_medfetch_dist_sqlite-wasm_worker1_mjs": 1
/******/ 		};
/******/ 		
/******/ 		// no chunk install function needed
/******/ 		// no chunk loading
/******/ 		
/******/ 		function loadUpdateChunk(chunkId, updatedModulesList) {
/******/ 			var success = false;
/******/ 			self["webpackHotUpdate_N_E"] = (_, moreModules, runtime) => {
/******/ 				for(var moduleId in moreModules) {
/******/ 					if(__webpack_require__.o(moreModules, moduleId)) {
/******/ 						currentUpdate[moduleId] = moreModules[moduleId];
/******/ 						if(updatedModulesList) updatedModulesList.push(moduleId);
/******/ 					}
/******/ 				}
/******/ 				if(runtime) currentUpdateRuntime.push(runtime);
/******/ 				success = true;
/******/ 			};
/******/ 			// start update chunk loading
/******/ 			importScripts(__webpack_require__.tu(__webpack_require__.p + __webpack_require__.hu(chunkId)));
/******/ 			if(!success) throw new Error("Loading update chunk failed for unknown reason");
/******/ 		}
/******/ 		
/******/ 		var currentUpdateChunks;
/******/ 		var currentUpdate;
/******/ 		var currentUpdateRemovedChunks;
/******/ 		var currentUpdateRuntime;
/******/ 		function applyHandler(options) {
/******/ 			if (__webpack_require__.f) delete __webpack_require__.f.importScriptsHmr;
/******/ 			currentUpdateChunks = undefined;
/******/ 			function getAffectedModuleEffects(updateModuleId) {
/******/ 				var outdatedModules = [updateModuleId];
/******/ 				var outdatedDependencies = {};
/******/ 		
/******/ 				var queue = outdatedModules.map(function (id) {
/******/ 					return {
/******/ 						chain: [id],
/******/ 						id: id
/******/ 					};
/******/ 				});
/******/ 				while (queue.length > 0) {
/******/ 					var queueItem = queue.pop();
/******/ 					var moduleId = queueItem.id;
/******/ 					var chain = queueItem.chain;
/******/ 					var module = __webpack_require__.c[moduleId];
/******/ 					if (
/******/ 						!module ||
/******/ 						(module.hot._selfAccepted && !module.hot._selfInvalidated)
/******/ 					)
/******/ 						continue;
/******/ 					if (module.hot._selfDeclined) {
/******/ 						return {
/******/ 							type: "self-declined",
/******/ 							chain: chain,
/******/ 							moduleId: moduleId
/******/ 						};
/******/ 					}
/******/ 					if (module.hot._main) {
/******/ 						return {
/******/ 							type: "unaccepted",
/******/ 							chain: chain,
/******/ 							moduleId: moduleId
/******/ 						};
/******/ 					}
/******/ 					for (var i = 0; i < module.parents.length; i++) {
/******/ 						var parentId = module.parents[i];
/******/ 						var parent = __webpack_require__.c[parentId];
/******/ 						if (!parent) continue;
/******/ 						if (parent.hot._declinedDependencies[moduleId]) {
/******/ 							return {
/******/ 								type: "declined",
/******/ 								chain: chain.concat([parentId]),
/******/ 								moduleId: moduleId,
/******/ 								parentId: parentId
/******/ 							};
/******/ 						}
/******/ 						if (outdatedModules.indexOf(parentId) !== -1) continue;
/******/ 						if (parent.hot._acceptedDependencies[moduleId]) {
/******/ 							if (!outdatedDependencies[parentId])
/******/ 								outdatedDependencies[parentId] = [];
/******/ 							addAllToSet(outdatedDependencies[parentId], [moduleId]);
/******/ 							continue;
/******/ 						}
/******/ 						delete outdatedDependencies[parentId];
/******/ 						outdatedModules.push(parentId);
/******/ 						queue.push({
/******/ 							chain: chain.concat([parentId]),
/******/ 							id: parentId
/******/ 						});
/******/ 					}
/******/ 				}
/******/ 		
/******/ 				return {
/******/ 					type: "accepted",
/******/ 					moduleId: updateModuleId,
/******/ 					outdatedModules: outdatedModules,
/******/ 					outdatedDependencies: outdatedDependencies
/******/ 				};
/******/ 			}
/******/ 		
/******/ 			function addAllToSet(a, b) {
/******/ 				for (var i = 0; i < b.length; i++) {
/******/ 					var item = b[i];
/******/ 					if (a.indexOf(item) === -1) a.push(item);
/******/ 				}
/******/ 			}
/******/ 		
/******/ 			// at begin all updates modules are outdated
/******/ 			// the "outdated" status can propagate to parents if they don't accept the children
/******/ 			var outdatedDependencies = {};
/******/ 			var outdatedModules = [];
/******/ 			var appliedUpdate = {};
/******/ 		
/******/ 			var warnUnexpectedRequire = function warnUnexpectedRequire(module) {
/******/ 				console.warn(
/******/ 					"[HMR] unexpected require(" + module.id + ") to disposed module"
/******/ 				);
/******/ 			};
/******/ 		
/******/ 			for (var moduleId in currentUpdate) {
/******/ 				if (__webpack_require__.o(currentUpdate, moduleId)) {
/******/ 					var newModuleFactory = currentUpdate[moduleId];
/******/ 					/** @type {TODO} */
/******/ 					var result = newModuleFactory
/******/ 						? getAffectedModuleEffects(moduleId)
/******/ 						: {
/******/ 								type: "disposed",
/******/ 								moduleId: moduleId
/******/ 							};
/******/ 					/** @type {Error|false} */
/******/ 					var abortError = false;
/******/ 					var doApply = false;
/******/ 					var doDispose = false;
/******/ 					var chainInfo = "";
/******/ 					if (result.chain) {
/******/ 						chainInfo = "\nUpdate propagation: " + result.chain.join(" -> ");
/******/ 					}
/******/ 					switch (result.type) {
/******/ 						case "self-declined":
/******/ 							if (options.onDeclined) options.onDeclined(result);
/******/ 							if (!options.ignoreDeclined)
/******/ 								abortError = new Error(
/******/ 									"Aborted because of self decline: " +
/******/ 										result.moduleId +
/******/ 										chainInfo
/******/ 								);
/******/ 							break;
/******/ 						case "declined":
/******/ 							if (options.onDeclined) options.onDeclined(result);
/******/ 							if (!options.ignoreDeclined)
/******/ 								abortError = new Error(
/******/ 									"Aborted because of declined dependency: " +
/******/ 										result.moduleId +
/******/ 										" in " +
/******/ 										result.parentId +
/******/ 										chainInfo
/******/ 								);
/******/ 							break;
/******/ 						case "unaccepted":
/******/ 							if (options.onUnaccepted) options.onUnaccepted(result);
/******/ 							if (!options.ignoreUnaccepted)
/******/ 								abortError = new Error(
/******/ 									"Aborted because " + moduleId + " is not accepted" + chainInfo
/******/ 								);
/******/ 							break;
/******/ 						case "accepted":
/******/ 							if (options.onAccepted) options.onAccepted(result);
/******/ 							doApply = true;
/******/ 							break;
/******/ 						case "disposed":
/******/ 							if (options.onDisposed) options.onDisposed(result);
/******/ 							doDispose = true;
/******/ 							break;
/******/ 						default:
/******/ 							throw new Error("Unexception type " + result.type);
/******/ 					}
/******/ 					if (abortError) {
/******/ 						return {
/******/ 							error: abortError
/******/ 						};
/******/ 					}
/******/ 					if (doApply) {
/******/ 						appliedUpdate[moduleId] = newModuleFactory;
/******/ 						addAllToSet(outdatedModules, result.outdatedModules);
/******/ 						for (moduleId in result.outdatedDependencies) {
/******/ 							if (__webpack_require__.o(result.outdatedDependencies, moduleId)) {
/******/ 								if (!outdatedDependencies[moduleId])
/******/ 									outdatedDependencies[moduleId] = [];
/******/ 								addAllToSet(
/******/ 									outdatedDependencies[moduleId],
/******/ 									result.outdatedDependencies[moduleId]
/******/ 								);
/******/ 							}
/******/ 						}
/******/ 					}
/******/ 					if (doDispose) {
/******/ 						addAllToSet(outdatedModules, [result.moduleId]);
/******/ 						appliedUpdate[moduleId] = warnUnexpectedRequire;
/******/ 					}
/******/ 				}
/******/ 			}
/******/ 			currentUpdate = undefined;
/******/ 		
/******/ 			// Store self accepted outdated modules to require them later by the module system
/******/ 			var outdatedSelfAcceptedModules = [];
/******/ 			for (var j = 0; j < outdatedModules.length; j++) {
/******/ 				var outdatedModuleId = outdatedModules[j];
/******/ 				var module = __webpack_require__.c[outdatedModuleId];
/******/ 				if (
/******/ 					module &&
/******/ 					(module.hot._selfAccepted || module.hot._main) &&
/******/ 					// removed self-accepted modules should not be required
/******/ 					appliedUpdate[outdatedModuleId] !== warnUnexpectedRequire &&
/******/ 					// when called invalidate self-accepting is not possible
/******/ 					!module.hot._selfInvalidated
/******/ 				) {
/******/ 					outdatedSelfAcceptedModules.push({
/******/ 						module: outdatedModuleId,
/******/ 						require: module.hot._requireSelf,
/******/ 						errorHandler: module.hot._selfAccepted
/******/ 					});
/******/ 				}
/******/ 			}
/******/ 		
/******/ 			var moduleOutdatedDependencies;
/******/ 		
/******/ 			return {
/******/ 				dispose: function () {
/******/ 					currentUpdateRemovedChunks.forEach(function (chunkId) {
/******/ 						delete installedChunks[chunkId];
/******/ 					});
/******/ 					currentUpdateRemovedChunks = undefined;
/******/ 		
/******/ 					var idx;
/******/ 					var queue = outdatedModules.slice();
/******/ 					while (queue.length > 0) {
/******/ 						var moduleId = queue.pop();
/******/ 						var module = __webpack_require__.c[moduleId];
/******/ 						if (!module) continue;
/******/ 		
/******/ 						var data = {};
/******/ 		
/******/ 						// Call dispose handlers
/******/ 						var disposeHandlers = module.hot._disposeHandlers;
/******/ 						for (j = 0; j < disposeHandlers.length; j++) {
/******/ 							disposeHandlers[j].call(null, data);
/******/ 						}
/******/ 						__webpack_require__.hmrD[moduleId] = data;
/******/ 		
/******/ 						// disable module (this disables requires from this module)
/******/ 						module.hot.active = false;
/******/ 		
/******/ 						// remove module from cache
/******/ 						delete __webpack_require__.c[moduleId];
/******/ 		
/******/ 						// when disposing there is no need to call dispose handler
/******/ 						delete outdatedDependencies[moduleId];
/******/ 		
/******/ 						// remove "parents" references from all children
/******/ 						for (j = 0; j < module.children.length; j++) {
/******/ 							var child = __webpack_require__.c[module.children[j]];
/******/ 							if (!child) continue;
/******/ 							idx = child.parents.indexOf(moduleId);
/******/ 							if (idx >= 0) {
/******/ 								child.parents.splice(idx, 1);
/******/ 							}
/******/ 						}
/******/ 					}
/******/ 		
/******/ 					// remove outdated dependency from module children
/******/ 					var dependency;
/******/ 					for (var outdatedModuleId in outdatedDependencies) {
/******/ 						if (__webpack_require__.o(outdatedDependencies, outdatedModuleId)) {
/******/ 							module = __webpack_require__.c[outdatedModuleId];
/******/ 							if (module) {
/******/ 								moduleOutdatedDependencies =
/******/ 									outdatedDependencies[outdatedModuleId];
/******/ 								for (j = 0; j < moduleOutdatedDependencies.length; j++) {
/******/ 									dependency = moduleOutdatedDependencies[j];
/******/ 									idx = module.children.indexOf(dependency);
/******/ 									if (idx >= 0) module.children.splice(idx, 1);
/******/ 								}
/******/ 							}
/******/ 						}
/******/ 					}
/******/ 				},
/******/ 				apply: function (reportError) {
/******/ 					// insert new code
/******/ 					for (var updateModuleId in appliedUpdate) {
/******/ 						if (__webpack_require__.o(appliedUpdate, updateModuleId)) {
/******/ 							__webpack_require__.m[updateModuleId] = appliedUpdate[updateModuleId];
/******/ 						}
/******/ 					}
/******/ 		
/******/ 					// run new runtime modules
/******/ 					for (var i = 0; i < currentUpdateRuntime.length; i++) {
/******/ 						currentUpdateRuntime[i](__webpack_require__);
/******/ 					}
/******/ 		
/******/ 					// call accept handlers
/******/ 					for (var outdatedModuleId in outdatedDependencies) {
/******/ 						if (__webpack_require__.o(outdatedDependencies, outdatedModuleId)) {
/******/ 							var module = __webpack_require__.c[outdatedModuleId];
/******/ 							if (module) {
/******/ 								moduleOutdatedDependencies =
/******/ 									outdatedDependencies[outdatedModuleId];
/******/ 								var callbacks = [];
/******/ 								var errorHandlers = [];
/******/ 								var dependenciesForCallbacks = [];
/******/ 								for (var j = 0; j < moduleOutdatedDependencies.length; j++) {
/******/ 									var dependency = moduleOutdatedDependencies[j];
/******/ 									var acceptCallback =
/******/ 										module.hot._acceptedDependencies[dependency];
/******/ 									var errorHandler =
/******/ 										module.hot._acceptedErrorHandlers[dependency];
/******/ 									if (acceptCallback) {
/******/ 										if (callbacks.indexOf(acceptCallback) !== -1) continue;
/******/ 										callbacks.push(acceptCallback);
/******/ 										errorHandlers.push(errorHandler);
/******/ 										dependenciesForCallbacks.push(dependency);
/******/ 									}
/******/ 								}
/******/ 								for (var k = 0; k < callbacks.length; k++) {
/******/ 									try {
/******/ 										callbacks[k].call(null, moduleOutdatedDependencies);
/******/ 									} catch (err) {
/******/ 										if (typeof errorHandlers[k] === "function") {
/******/ 											try {
/******/ 												errorHandlers[k](err, {
/******/ 													moduleId: outdatedModuleId,
/******/ 													dependencyId: dependenciesForCallbacks[k]
/******/ 												});
/******/ 											} catch (err2) {
/******/ 												if (options.onErrored) {
/******/ 													options.onErrored({
/******/ 														type: "accept-error-handler-errored",
/******/ 														moduleId: outdatedModuleId,
/******/ 														dependencyId: dependenciesForCallbacks[k],
/******/ 														error: err2,
/******/ 														originalError: err
/******/ 													});
/******/ 												}
/******/ 												if (!options.ignoreErrored) {
/******/ 													reportError(err2);
/******/ 													reportError(err);
/******/ 												}
/******/ 											}
/******/ 										} else {
/******/ 											if (options.onErrored) {
/******/ 												options.onErrored({
/******/ 													type: "accept-errored",
/******/ 													moduleId: outdatedModuleId,
/******/ 													dependencyId: dependenciesForCallbacks[k],
/******/ 													error: err
/******/ 												});
/******/ 											}
/******/ 											if (!options.ignoreErrored) {
/******/ 												reportError(err);
/******/ 											}
/******/ 										}
/******/ 									}
/******/ 								}
/******/ 							}
/******/ 						}
/******/ 					}
/******/ 		
/******/ 					// Load self accepted modules
/******/ 					for (var o = 0; o < outdatedSelfAcceptedModules.length; o++) {
/******/ 						var item = outdatedSelfAcceptedModules[o];
/******/ 						var moduleId = item.module;
/******/ 						try {
/******/ 							item.require(moduleId);
/******/ 						} catch (err) {
/******/ 							if (typeof item.errorHandler === "function") {
/******/ 								try {
/******/ 									item.errorHandler(err, {
/******/ 										moduleId: moduleId,
/******/ 										module: __webpack_require__.c[moduleId]
/******/ 									});
/******/ 								} catch (err1) {
/******/ 									if (options.onErrored) {
/******/ 										options.onErrored({
/******/ 											type: "self-accept-error-handler-errored",
/******/ 											moduleId: moduleId,
/******/ 											error: err1,
/******/ 											originalError: err
/******/ 										});
/******/ 									}
/******/ 									if (!options.ignoreErrored) {
/******/ 										reportError(err1);
/******/ 										reportError(err);
/******/ 									}
/******/ 								}
/******/ 							} else {
/******/ 								if (options.onErrored) {
/******/ 									options.onErrored({
/******/ 										type: "self-accept-errored",
/******/ 										moduleId: moduleId,
/******/ 										error: err
/******/ 									});
/******/ 								}
/******/ 								if (!options.ignoreErrored) {
/******/ 									reportError(err);
/******/ 								}
/******/ 							}
/******/ 						}
/******/ 					}
/******/ 		
/******/ 					return outdatedModules;
/******/ 				}
/******/ 			};
/******/ 		}
/******/ 		__webpack_require__.hmrI.importScripts = function (moduleId, applyHandlers) {
/******/ 			if (!currentUpdate) {
/******/ 				currentUpdate = {};
/******/ 				currentUpdateRuntime = [];
/******/ 				currentUpdateRemovedChunks = [];
/******/ 				applyHandlers.push(applyHandler);
/******/ 			}
/******/ 			if (!__webpack_require__.o(currentUpdate, moduleId)) {
/******/ 				currentUpdate[moduleId] = __webpack_require__.m[moduleId];
/******/ 			}
/******/ 		};
/******/ 		__webpack_require__.hmrC.importScripts = function (
/******/ 			chunkIds,
/******/ 			removedChunks,
/******/ 			removedModules,
/******/ 			promises,
/******/ 			applyHandlers,
/******/ 			updatedModulesList
/******/ 		) {
/******/ 			applyHandlers.push(applyHandler);
/******/ 			currentUpdateChunks = {};
/******/ 			currentUpdateRemovedChunks = removedChunks;
/******/ 			currentUpdate = removedModules.reduce(function (obj, key) {
/******/ 				obj[key] = false;
/******/ 				return obj;
/******/ 			}, {});
/******/ 			currentUpdateRuntime = [];
/******/ 			chunkIds.forEach(function (chunkId) {
/******/ 				if (
/******/ 					__webpack_require__.o(installedChunks, chunkId) &&
/******/ 					installedChunks[chunkId] !== undefined
/******/ 				) {
/******/ 					promises.push(loadUpdateChunk(chunkId, updatedModulesList));
/******/ 					currentUpdateChunks[chunkId] = true;
/******/ 				} else {
/******/ 					currentUpdateChunks[chunkId] = false;
/******/ 				}
/******/ 			});
/******/ 			if (__webpack_require__.f) {
/******/ 				__webpack_require__.f.importScriptsHmr = function (chunkId, promises) {
/******/ 					if (
/******/ 						currentUpdateChunks &&
/******/ 						__webpack_require__.o(currentUpdateChunks, chunkId) &&
/******/ 						!currentUpdateChunks[chunkId]
/******/ 					) {
/******/ 						promises.push(loadUpdateChunk(chunkId));
/******/ 						currentUpdateChunks[chunkId] = true;
/******/ 					}
/******/ 				};
/******/ 			}
/******/ 		};
/******/ 		
/******/ 		__webpack_require__.hmrM = () => {
/******/ 			if (typeof fetch === "undefined") throw new Error("No browser support: need fetch API");
/******/ 			return fetch(__webpack_require__.p + __webpack_require__.hmrF()).then((response) => {
/******/ 				if(response.status === 404) return; // no update available
/******/ 				if(!response.ok) throw new Error("Failed to fetch update manifest " + response.statusText);
/******/ 				return response.json();
/******/ 			});
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// module cache are used so entry inlining is disabled
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	var __webpack_exports__ = __webpack_require__("(app-pages-browser)/../medfetch/dist/sqlite-wasm/worker1.mjs");
/******/ 	_N_E = __webpack_exports__;
/******/ 	
/******/ })()
;