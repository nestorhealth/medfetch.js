"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@mdx-js+mdx@3.1.0_acorn@8.14.1";
exports.ids = ["vendor-chunks/@mdx-js+mdx@3.1.0_acorn@8.14.1"];
exports.modules = {

/***/ "(rsc)/../node_modules/.pnpm/@mdx-js+mdx@3.1.0_acorn@8.14.1/node_modules/@mdx-js/mdx/lib/core.js":
/*!*************************************************************************************************!*\
  !*** ../node_modules/.pnpm/@mdx-js+mdx@3.1.0_acorn@8.14.1/node_modules/@mdx-js/mdx/lib/core.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createProcessor: () => (/* binding */ createProcessor)\n/* harmony export */ });\n/* harmony import */ var devlop__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! devlop */ \"(rsc)/../node_modules/.pnpm/devlop@1.1.0/node_modules/devlop/lib/development.js\");\n/* harmony import */ var recma_build_jsx__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! recma-build-jsx */ \"(rsc)/../node_modules/.pnpm/recma-build-jsx@1.0.0/node_modules/recma-build-jsx/lib/index.js\");\n/* harmony import */ var recma_jsx__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! recma-jsx */ \"(rsc)/../node_modules/.pnpm/recma-jsx@1.0.0_acorn@8.14.1/node_modules/recma-jsx/lib/index.js\");\n/* harmony import */ var recma_stringify__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! recma-stringify */ \"(rsc)/../node_modules/.pnpm/recma-stringify@1.0.0/node_modules/recma-stringify/lib/index.js\");\n/* harmony import */ var rehype_recma__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! rehype-recma */ \"(rsc)/../node_modules/.pnpm/rehype-recma@1.0.0/node_modules/rehype-recma/lib/index.js\");\n/* harmony import */ var remark_mdx__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! remark-mdx */ \"(rsc)/../node_modules/.pnpm/remark-mdx@3.1.0/node_modules/remark-mdx/lib/index.js\");\n/* harmony import */ var remark_parse__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! remark-parse */ \"(rsc)/../node_modules/.pnpm/remark-parse@11.0.0/node_modules/remark-parse/lib/index.js\");\n/* harmony import */ var remark_rehype__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! remark-rehype */ \"(rsc)/../node_modules/.pnpm/remark-rehype@11.1.2/node_modules/remark-rehype/lib/index.js\");\n/* harmony import */ var unified__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! unified */ \"(rsc)/../node_modules/.pnpm/unified@11.0.5/node_modules/unified/lib/index.js\");\n/* harmony import */ var _plugin_recma_build_jsx_transform_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./plugin/recma-build-jsx-transform.js */ \"(rsc)/../node_modules/.pnpm/@mdx-js+mdx@3.1.0_acorn@8.14.1/node_modules/@mdx-js/mdx/lib/plugin/recma-build-jsx-transform.js\");\n/* harmony import */ var _plugin_recma_document_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./plugin/recma-document.js */ \"(rsc)/../node_modules/.pnpm/@mdx-js+mdx@3.1.0_acorn@8.14.1/node_modules/@mdx-js/mdx/lib/plugin/recma-document.js\");\n/* harmony import */ var _plugin_recma_jsx_rewrite_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./plugin/recma-jsx-rewrite.js */ \"(rsc)/../node_modules/.pnpm/@mdx-js+mdx@3.1.0_acorn@8.14.1/node_modules/@mdx-js/mdx/lib/plugin/recma-jsx-rewrite.js\");\n/* harmony import */ var _plugin_rehype_remove_raw_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./plugin/rehype-remove-raw.js */ \"(rsc)/../node_modules/.pnpm/@mdx-js+mdx@3.1.0_acorn@8.14.1/node_modules/@mdx-js/mdx/lib/plugin/rehype-remove-raw.js\");\n/* harmony import */ var _plugin_remark_mark_and_unravel_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./plugin/remark-mark-and-unravel.js */ \"(rsc)/../node_modules/.pnpm/@mdx-js+mdx@3.1.0_acorn@8.14.1/node_modules/@mdx-js/mdx/lib/plugin/remark-mark-and-unravel.js\");\n/* harmony import */ var _node_types_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./node-types.js */ \"(rsc)/../node_modules/.pnpm/@mdx-js+mdx@3.1.0_acorn@8.14.1/node_modules/@mdx-js/mdx/lib/node-types.js\");\n/**\n * @import {Program} from 'estree-jsx'\n * @import {Root} from 'mdast'\n * @import {Options as RehypeRecmaOptions} from 'rehype-recma'\n * @import {Options as RemarkRehypeOptions} from 'remark-rehype'\n * @import {SourceMapGenerator} from 'source-map'\n * @import {PluggableList, Processor} from 'unified'\n */\n\n/**\n * @typedef ProcessorOptions\n *   Configuration for `createProcessor`.\n * @property {typeof SourceMapGenerator | null | undefined} [SourceMapGenerator]\n *   Add a source map (object form) as the `map` field on the resulting file\n *   (optional).\n * @property {URL | string | null | undefined} [baseUrl]\n *   Use this URL as `import.meta.url` and resolve `import` and `export … from`\n *   relative to it (optional, example: `import.meta.url`).\n * @property {boolean | null | undefined} [development=false]\n *   Whether to add extra info to error messages in generated code and use the\n *   development automatic JSX runtime (`Fragment` and `jsxDEV` from\n *   `/jsx-dev-runtime`) (default: `false`);\n *   when using the webpack loader (`@mdx-js/loader`) or the Rollup integration\n *   (`@mdx-js/rollup`) through Vite, this is automatically inferred from how\n *   you configure those tools.\n * @property {RehypeRecmaOptions['elementAttributeNameCase']} [elementAttributeNameCase='react']\n *   Casing to use for attribute names (default: `'react'`);\n *   HTML casing is for example `class`, `stroke-linecap`, `xml:lang`;\n *   React casing is for example `className`, `strokeLinecap`, `xmlLang`;\n *   for JSX components written in MDX, the author has to be aware of which\n *   framework they use and write code accordingly;\n *   for AST nodes generated by this project, this option configures it\n * @property {'md' | 'mdx' | null | undefined} [format='mdx']\n *   format of the file (default: `'mdx'`);\n *   `'md'` means treat as markdown and `'mdx'` means treat as MDX.\n * @property {boolean | null | undefined} [jsx=false]\n *   Whether to keep JSX (default: `false`);\n *   the default is to compile JSX away so that the resulting file is\n *   immediately runnable.\n * @property {string | null | undefined} [jsxImportSource='react']\n *   Place to import automatic JSX runtimes from (default: `'react'`);\n *   when in the `automatic` runtime, this is used to define an import for\n *   `Fragment`, `jsx`, `jsxDEV`, and `jsxs`.\n * @property {'automatic' | 'classic' | null | undefined} [jsxRuntime='automatic']\n *   JSX runtime to use (default: `'automatic'`);\n *   the automatic runtime compiles to `import _jsx from\n *   '$importSource/jsx-runtime'\\n_jsx('p')`;\n *   the classic runtime compiles to calls such as `h('p')`.\n *\n *   > 👉 **Note**: support for the classic runtime is deprecated and will\n *   > likely be removed in the next major version.\n * @property {ReadonlyArray<string> | null | undefined} [mdExtensions]\n *   List of markdown extensions, with dot (default: `['.md', '.markdown', …]`);\n *   affects integrations.\n * @property {ReadonlyArray<string> | null | undefined} [mdxExtensions]\n *   List of MDX extensions, with dot (default: `['.mdx']`);\n *   affects integrations.\n * @property {'function-body' | 'program' | null | undefined} [outputFormat='program']\n *   Output format to generate (default: `'program'`);\n *   in most cases `'program'` should be used, it results in a whole program;\n *   internally `evaluate` uses `'function-body'` to compile to\n *   code that can be passed to `run`;\n *   in some cases, you might want what `evaluate` does in separate steps, such\n *   as when compiling on the server and running on the client.\n * @property {string | null | undefined} [pragma='React.createElement']\n *   Pragma for JSX, used in the classic runtime as an identifier for function\n *   calls: `<x />` to `React.createElement('x')` (default:\n *   `'React.createElement'`);\n *   when changing this, you should also define `pragmaFrag` and\n *   `pragmaImportSource` too.\n *\n *   > 👉 **Note**: support for the classic runtime is deprecated and will\n *   > likely be removed in the next major version.\n * @property {string | null | undefined} [pragmaFrag='React.Fragment']\n *   Pragma for fragment symbol, used in the classic runtime as an identifier\n *   for unnamed calls: `<>` to `React.createElement(React.Fragment)` (default:\n *   `'React.Fragment'`);\n *   when changing this, you should also define `pragma` and\n *   `pragmaImportSource` too.\n *\n *   > 👉 **Note**: support for the classic runtime is deprecated and will\n *   > likely be removed in the next major version.\n * @property {string | null | undefined} [pragmaImportSource='react']\n *   Where to import the identifier of `pragma` from, used in the classic\n *   runtime (default: `'react'`);\n *   to illustrate, when `pragma` is `'a.b'` and `pragmaImportSource` is `'c'`\n *   the following will be generated: `import a from 'c'` and things such as\n *   `a.b('h1', {})`.\n *   when changing this, you should also define `pragma` and `pragmaFrag` too.\n *\n *   > 👉 **Note**: support for the classic runtime is deprecated and will\n *   > likely be removed in the next major version.\n * @property {string | null | undefined} [providerImportSource]\n *   Place to import a provider from (optional, example: `'@mdx-js/react'`);\n *   normally it’s used for runtimes that support context (React, Preact), but\n *   it can be used to inject components into the compiled code;\n *   the module must export and identifier `useMDXComponents` which is called\n *   without arguments to get an object of components (`MDXComponents` from\n *   `mdx/types.js`).\n * @property {PluggableList | null | undefined} [recmaPlugins]\n *   List of recma plugins (optional);\n *   this is a new ecosystem, currently in beta, to transform esast trees\n *   (JavaScript)\n * @property {PluggableList | null | undefined} [remarkPlugins]\n *   List of remark plugins (optional).\n * @property {PluggableList | null | undefined} [rehypePlugins]\n *   List of rehype plugins (optional).\n * @property {Readonly<RemarkRehypeOptions> | null | undefined} [remarkRehypeOptions]\n *   Options to pass through to `remark-rehype` (optional);\n *   the option `allowDangerousHtml` will always be set to `true` and the MDX\n *   nodes (see `nodeTypes`) are passed through;\n *   In particular, you might want to pass configuration for footnotes if your\n *   content is not in English.\n * @property {RehypeRecmaOptions['stylePropertyNameCase']} [stylePropertyNameCase='dom']\n *   Casing to use for property names in `style` objects (default: `'dom'`);\n *   CSS casing is for example `background-color` and `-webkit-line-clamp`;\n *   DOM casing is for example `backgroundColor` and `WebkitLineClamp`;\n *   for JSX components written in MDX, the author has to be aware of which\n *   framework they use and write code accordingly;\n *   for AST nodes generated by this project, this option configures it\n * @property {boolean | null | undefined} [tableCellAlignToStyle=true]\n *   Turn obsolete `align` properties on `td` and `th` into CSS `style`\n *   properties (default: `true`).\n */\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst removedOptions = [\n  'compilers',\n  'filepath',\n  'hastPlugins',\n  'mdPlugins',\n  'skipExport',\n  'wrapExport'\n]\n\nlet warned = false\n\n/**\n * Create a processor to compile markdown or MDX to JavaScript.\n *\n * > **Note**: `format: 'detect'` is not allowed in `ProcessorOptions`.\n *\n * @param {Readonly<ProcessorOptions> | null | undefined} [options]\n *   Configuration (optional).\n * @return {Processor<Root, Program, Program, Program, string>}\n *   Processor.\n */\nfunction createProcessor(options) {\n  const settings = options || {}\n  let index = -1\n\n  while (++index < removedOptions.length) {\n    const key = removedOptions[index]\n    if (key in settings) {\n      (0,devlop__WEBPACK_IMPORTED_MODULE_0__.unreachable)(\n        'Unexpected removed option `' +\n          key +\n          '`; see <https://mdxjs.com/migrating/v2/> on how to migrate'\n      )\n    }\n  }\n\n  // @ts-expect-error: throw an error for a runtime value which is not allowed\n  // by the types.\n  if (settings.format === 'detect') {\n    (0,devlop__WEBPACK_IMPORTED_MODULE_0__.unreachable)(\n      \"Unexpected `format: 'detect'`, which is not supported by `createProcessor`, expected `'mdx'` or `'md'`\"\n    )\n  }\n\n  if (\n    (settings.jsxRuntime === 'classic' ||\n      settings.pragma ||\n      settings.pragmaFrag ||\n      settings.pragmaImportSource) &&\n    !warned\n  ) {\n    warned = true\n    console.warn(\n      \"Unexpected deprecated option `jsxRuntime: 'classic'`, `pragma`, `pragmaFrag`, or `pragmaImportSource`; see <https://mdxjs.com/migrating/v3/> on how to migrate\"\n    )\n  }\n\n  const pipeline = (0,unified__WEBPACK_IMPORTED_MODULE_1__.unified)().use(remark_parse__WEBPACK_IMPORTED_MODULE_2__[\"default\"])\n\n  if (settings.format !== 'md') {\n    pipeline.use(remark_mdx__WEBPACK_IMPORTED_MODULE_3__[\"default\"])\n  }\n\n  const remarkRehypeOptions = settings.remarkRehypeOptions || {}\n\n  pipeline\n    .use(_plugin_remark_mark_and_unravel_js__WEBPACK_IMPORTED_MODULE_4__.remarkMarkAndUnravel)\n    .use(settings.remarkPlugins || [])\n    .use(remark_rehype__WEBPACK_IMPORTED_MODULE_5__[\"default\"], {\n      ...remarkRehypeOptions,\n      allowDangerousHtml: true,\n      passThrough: [...(remarkRehypeOptions.passThrough || []), ..._node_types_js__WEBPACK_IMPORTED_MODULE_6__.nodeTypes]\n    })\n    .use(settings.rehypePlugins || [])\n\n  if (settings.format === 'md') {\n    pipeline.use(_plugin_rehype_remove_raw_js__WEBPACK_IMPORTED_MODULE_7__.rehypeRemoveRaw)\n  }\n\n  pipeline\n    // @ts-expect-error: `Program` is close enough to a `Node`,\n    // but type inference has trouble with it and bridges.\n    .use(rehype_recma__WEBPACK_IMPORTED_MODULE_8__[\"default\"], settings)\n    .use(_plugin_recma_document_js__WEBPACK_IMPORTED_MODULE_9__.recmaDocument, settings)\n    .use(_plugin_recma_jsx_rewrite_js__WEBPACK_IMPORTED_MODULE_10__.recmaJsxRewrite, settings)\n\n  if (!settings.jsx) {\n    pipeline.use(recma_build_jsx__WEBPACK_IMPORTED_MODULE_11__[\"default\"], settings).use(_plugin_recma_build_jsx_transform_js__WEBPACK_IMPORTED_MODULE_12__.recmaBuildJsxTransform, settings)\n  }\n\n  pipeline\n    .use(recma_jsx__WEBPACK_IMPORTED_MODULE_13__[\"default\"])\n    .use(recma_stringify__WEBPACK_IMPORTED_MODULE_14__[\"default\"], settings)\n    .use(settings.recmaPlugins || [])\n\n  // @ts-expect-error: TS doesn’t get the plugins we added with if-statements.\n  return pipeline\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/.pnpm/@mdx-js+mdx@3.1.0_acorn@8.14.1/node_modules/@mdx-js/mdx/lib/core.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/.pnpm/@mdx-js+mdx@3.1.0_acorn@8.14.1/node_modules/@mdx-js/mdx/lib/node-types.js":
/*!*******************************************************************************************************!*\
  !*** ../node_modules/.pnpm/@mdx-js+mdx@3.1.0_acorn@8.14.1/node_modules/@mdx-js/mdx/lib/node-types.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   nodeTypes: () => (/* binding */ nodeTypes)\n/* harmony export */ });\n/**\n * List of node types made by `mdast-util-mdx`, which have to be passed\n * through untouched from the mdast tree to the hast tree.\n */\nconst nodeTypes = /** @type {const} */ ([\n  'mdxFlowExpression',\n  'mdxJsxFlowElement',\n  'mdxJsxTextElement',\n  'mdxTextExpression',\n  'mdxjsEsm'\n])\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BtZHgtanMrbWR4QDMuMS4wX2Fjb3JuQDguMTQuMS9ub2RlX21vZHVsZXMvQG1keC1qcy9tZHgvbGliL25vZGUtdHlwZXMuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ08sNkJBQTZCLE9BQU87QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvZXRoYW5raW0vTmVzdG9yL21lZGZldGNoLmpzL25vZGVfbW9kdWxlcy8ucG5wbS9AbWR4LWpzK21keEAzLjEuMF9hY29ybkA4LjE0LjEvbm9kZV9tb2R1bGVzL0BtZHgtanMvbWR4L2xpYi9ub2RlLXR5cGVzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogTGlzdCBvZiBub2RlIHR5cGVzIG1hZGUgYnkgYG1kYXN0LXV0aWwtbWR4YCwgd2hpY2ggaGF2ZSB0byBiZSBwYXNzZWRcbiAqIHRocm91Z2ggdW50b3VjaGVkIGZyb20gdGhlIG1kYXN0IHRyZWUgdG8gdGhlIGhhc3QgdHJlZS5cbiAqL1xuZXhwb3J0IGNvbnN0IG5vZGVUeXBlcyA9IC8qKiBAdHlwZSB7Y29uc3R9ICovIChbXG4gICdtZHhGbG93RXhwcmVzc2lvbicsXG4gICdtZHhKc3hGbG93RWxlbWVudCcsXG4gICdtZHhKc3hUZXh0RWxlbWVudCcsXG4gICdtZHhUZXh0RXhwcmVzc2lvbicsXG4gICdtZHhqc0VzbSdcbl0pXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/.pnpm/@mdx-js+mdx@3.1.0_acorn@8.14.1/node_modules/@mdx-js/mdx/lib/node-types.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/.pnpm/@mdx-js+mdx@3.1.0_acorn@8.14.1/node_modules/@mdx-js/mdx/lib/plugin/recma-build-jsx-transform.js":
/*!*****************************************************************************************************************************!*\
  !*** ../node_modules/.pnpm/@mdx-js+mdx@3.1.0_acorn@8.14.1/node_modules/@mdx-js/mdx/lib/plugin/recma-build-jsx-transform.js ***!
  \*****************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   recmaBuildJsxTransform: () => (/* binding */ recmaBuildJsxTransform)\n/* harmony export */ });\n/* harmony import */ var _util_estree_util_specifiers_to_declarations_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/estree-util-specifiers-to-declarations.js */ \"(rsc)/../node_modules/.pnpm/@mdx-js+mdx@3.1.0_acorn@8.14.1/node_modules/@mdx-js/mdx/lib/util/estree-util-specifiers-to-declarations.js\");\n/* harmony import */ var _util_estree_util_to_id_or_member_expression_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/estree-util-to-id-or-member-expression.js */ \"(rsc)/../node_modules/.pnpm/@mdx-js+mdx@3.1.0_acorn@8.14.1/node_modules/@mdx-js/mdx/lib/util/estree-util-to-id-or-member-expression.js\");\n/**\n * @import {Program} from 'estree-jsx'\n */ /**\n * @typedef Options\n *   Configuration for internal plugin `recma-build-jsx-transform`.\n * @property {'function-body' | 'program' | null | undefined} [outputFormat='program']\n *   Whether to keep the import of the automatic runtime or get it from\n *   `arguments[0]` instead (default: `'program'`).\n */ \n\n/**\n * Plugin to change the tree after compiling JSX away.\n *\n * @param {Readonly<Options> | null | undefined} [options]\n *   Configuration (optional).\n * @returns\n *   Transform.\n */ function recmaBuildJsxTransform(options) {\n    /* c8 ignore next -- always given in `@mdx-js/mdx` */ const { outputFormat } = options || {};\n    /**\n   * @param {Program} tree\n   *   Tree.\n   * @returns {undefined}\n   *   Nothing.\n   */ return function(tree) {\n        // Remove the pragma comment that we injected ourselves as it is no longer\n        // needed.\n        if (tree.comments) {\n            tree.comments = tree.comments.filter(function(d) {\n                return !d.data?._mdxIsPragmaComment;\n            });\n        }\n        // When compiling to a function body, replace the import that was just\n        // generated, and get `jsx`, `jsxs`, and `Fragment` from `arguments[0]`\n        // instead.\n        if (outputFormat === 'function-body') {\n            let index = 0;\n            // Skip directives: JS currently only has `use strict`, but Acorn allows\n            // arbitrary ones.\n            // Practically things like `use client` could be used?\n            while(index < tree.body.length){\n                const child = tree.body[index];\n                if ('directive' in child && child.directive) {\n                    index++;\n                } else {\n                    break;\n                }\n            }\n            const declaration = tree.body[index];\n            if (declaration && declaration.type === 'ImportDeclaration' && typeof declaration.source.value === 'string' && /\\/jsx-(dev-)?runtime$/.test(declaration.source.value)) {\n                tree.body[index] = {\n                    type: 'VariableDeclaration',\n                    kind: 'const',\n                    declarations: (0,_util_estree_util_specifiers_to_declarations_js__WEBPACK_IMPORTED_MODULE_0__.specifiersToDeclarations)(declaration.specifiers, (0,_util_estree_util_to_id_or_member_expression_js__WEBPACK_IMPORTED_MODULE_1__.toIdOrMemberExpression)([\n                        'arguments',\n                        0\n                    ]))\n                };\n            }\n        }\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BtZHgtanMrbWR4QDMuMS4wX2Fjb3JuQDguMTQuMS9ub2RlX21vZHVsZXMvQG1keC1qcy9tZHgvbGliL3BsdWdpbi9yZWNtYS1idWlsZC1qc3gtdHJhbnNmb3JtLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBOztDQUVDLEdBRUQ7Ozs7OztDQU1DLEdBRXlGO0FBQ0Y7QUFFeEY7Ozs7Ozs7Q0FPQyxHQUNNLFNBQVNFLHVCQUF1QkMsT0FBTztJQUM1QyxtREFBbUQsR0FDbkQsTUFBTSxFQUFDQyxZQUFZLEVBQUMsR0FBR0QsV0FBVyxDQUFDO0lBRW5DOzs7OztHQUtDLEdBQ0QsT0FBTyxTQUFVRSxJQUFJO1FBQ25CLDBFQUEwRTtRQUMxRSxVQUFVO1FBQ1YsSUFBSUEsS0FBS0MsUUFBUSxFQUFFO1lBQ2pCRCxLQUFLQyxRQUFRLEdBQUdELEtBQUtDLFFBQVEsQ0FBQ0MsTUFBTSxDQUFDLFNBQVVDLENBQUM7Z0JBQzlDLE9BQU8sQ0FBQ0EsRUFBRUMsSUFBSSxFQUFFQztZQUNsQjtRQUNGO1FBRUEsc0VBQXNFO1FBQ3RFLHVFQUF1RTtRQUN2RSxXQUFXO1FBQ1gsSUFBSU4saUJBQWlCLGlCQUFpQjtZQUNwQyxJQUFJTyxRQUFRO1lBRVosd0VBQXdFO1lBQ3hFLGtCQUFrQjtZQUNsQixzREFBc0Q7WUFDdEQsTUFBT0EsUUFBUU4sS0FBS08sSUFBSSxDQUFDQyxNQUFNLENBQUU7Z0JBQy9CLE1BQU1DLFFBQVFULEtBQUtPLElBQUksQ0FBQ0QsTUFBTTtnQkFDOUIsSUFBSSxlQUFlRyxTQUFTQSxNQUFNQyxTQUFTLEVBQUU7b0JBQzNDSjtnQkFDRixPQUFPO29CQUNMO2dCQUNGO1lBQ0Y7WUFFQSxNQUFNSyxjQUFjWCxLQUFLTyxJQUFJLENBQUNELE1BQU07WUFFcEMsSUFDRUssZUFDQUEsWUFBWUMsSUFBSSxLQUFLLHVCQUNyQixPQUFPRCxZQUFZRSxNQUFNLENBQUNDLEtBQUssS0FBSyxZQUNwQyx3QkFBd0JDLElBQUksQ0FBQ0osWUFBWUUsTUFBTSxDQUFDQyxLQUFLLEdBQ3JEO2dCQUNBZCxLQUFLTyxJQUFJLENBQUNELE1BQU0sR0FBRztvQkFDakJNLE1BQU07b0JBQ05JLE1BQU07b0JBQ05DLGNBQWN0Qix5R0FBd0JBLENBQ3BDZ0IsWUFBWU8sVUFBVSxFQUN0QnRCLHVHQUFzQkEsQ0FBQzt3QkFBQzt3QkFBYTtxQkFBRTtnQkFFM0M7WUFDRjtRQUNGO0lBQ0Y7QUFDRiIsInNvdXJjZXMiOlsiL1VzZXJzL2V0aGFua2ltL05lc3Rvci9tZWRmZXRjaC5qcy9ub2RlX21vZHVsZXMvLnBucG0vQG1keC1qcyttZHhAMy4xLjBfYWNvcm5AOC4xNC4xL25vZGVfbW9kdWxlcy9AbWR4LWpzL21keC9saWIvcGx1Z2luL3JlY21hLWJ1aWxkLWpzeC10cmFuc2Zvcm0uanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAaW1wb3J0IHtQcm9ncmFtfSBmcm9tICdlc3RyZWUtanN4J1xuICovXG5cbi8qKlxuICogQHR5cGVkZWYgT3B0aW9uc1xuICogICBDb25maWd1cmF0aW9uIGZvciBpbnRlcm5hbCBwbHVnaW4gYHJlY21hLWJ1aWxkLWpzeC10cmFuc2Zvcm1gLlxuICogQHByb3BlcnR5IHsnZnVuY3Rpb24tYm9keScgfCAncHJvZ3JhbScgfCBudWxsIHwgdW5kZWZpbmVkfSBbb3V0cHV0Rm9ybWF0PSdwcm9ncmFtJ11cbiAqICAgV2hldGhlciB0byBrZWVwIHRoZSBpbXBvcnQgb2YgdGhlIGF1dG9tYXRpYyBydW50aW1lIG9yIGdldCBpdCBmcm9tXG4gKiAgIGBhcmd1bWVudHNbMF1gIGluc3RlYWQgKGRlZmF1bHQ6IGAncHJvZ3JhbSdgKS5cbiAqL1xuXG5pbXBvcnQge3NwZWNpZmllcnNUb0RlY2xhcmF0aW9uc30gZnJvbSAnLi4vdXRpbC9lc3RyZWUtdXRpbC1zcGVjaWZpZXJzLXRvLWRlY2xhcmF0aW9ucy5qcydcbmltcG9ydCB7dG9JZE9yTWVtYmVyRXhwcmVzc2lvbn0gZnJvbSAnLi4vdXRpbC9lc3RyZWUtdXRpbC10by1pZC1vci1tZW1iZXItZXhwcmVzc2lvbi5qcydcblxuLyoqXG4gKiBQbHVnaW4gdG8gY2hhbmdlIHRoZSB0cmVlIGFmdGVyIGNvbXBpbGluZyBKU1ggYXdheS5cbiAqXG4gKiBAcGFyYW0ge1JlYWRvbmx5PE9wdGlvbnM+IHwgbnVsbCB8IHVuZGVmaW5lZH0gW29wdGlvbnNdXG4gKiAgIENvbmZpZ3VyYXRpb24gKG9wdGlvbmFsKS5cbiAqIEByZXR1cm5zXG4gKiAgIFRyYW5zZm9ybS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlY21hQnVpbGRKc3hUcmFuc2Zvcm0ob3B0aW9ucykge1xuICAvKiBjOCBpZ25vcmUgbmV4dCAtLSBhbHdheXMgZ2l2ZW4gaW4gYEBtZHgtanMvbWR4YCAqL1xuICBjb25zdCB7b3V0cHV0Rm9ybWF0fSA9IG9wdGlvbnMgfHwge31cblxuICAvKipcbiAgICogQHBhcmFtIHtQcm9ncmFtfSB0cmVlXG4gICAqICAgVHJlZS5cbiAgICogQHJldHVybnMge3VuZGVmaW5lZH1cbiAgICogICBOb3RoaW5nLlxuICAgKi9cbiAgcmV0dXJuIGZ1bmN0aW9uICh0cmVlKSB7XG4gICAgLy8gUmVtb3ZlIHRoZSBwcmFnbWEgY29tbWVudCB0aGF0IHdlIGluamVjdGVkIG91cnNlbHZlcyBhcyBpdCBpcyBubyBsb25nZXJcbiAgICAvLyBuZWVkZWQuXG4gICAgaWYgKHRyZWUuY29tbWVudHMpIHtcbiAgICAgIHRyZWUuY29tbWVudHMgPSB0cmVlLmNvbW1lbnRzLmZpbHRlcihmdW5jdGlvbiAoZCkge1xuICAgICAgICByZXR1cm4gIWQuZGF0YT8uX21keElzUHJhZ21hQ29tbWVudFxuICAgICAgfSlcbiAgICB9XG5cbiAgICAvLyBXaGVuIGNvbXBpbGluZyB0byBhIGZ1bmN0aW9uIGJvZHksIHJlcGxhY2UgdGhlIGltcG9ydCB0aGF0IHdhcyBqdXN0XG4gICAgLy8gZ2VuZXJhdGVkLCBhbmQgZ2V0IGBqc3hgLCBganN4c2AsIGFuZCBgRnJhZ21lbnRgIGZyb20gYGFyZ3VtZW50c1swXWBcbiAgICAvLyBpbnN0ZWFkLlxuICAgIGlmIChvdXRwdXRGb3JtYXQgPT09ICdmdW5jdGlvbi1ib2R5Jykge1xuICAgICAgbGV0IGluZGV4ID0gMFxuXG4gICAgICAvLyBTa2lwIGRpcmVjdGl2ZXM6IEpTIGN1cnJlbnRseSBvbmx5IGhhcyBgdXNlIHN0cmljdGAsIGJ1dCBBY29ybiBhbGxvd3NcbiAgICAgIC8vIGFyYml0cmFyeSBvbmVzLlxuICAgICAgLy8gUHJhY3RpY2FsbHkgdGhpbmdzIGxpa2UgYHVzZSBjbGllbnRgIGNvdWxkIGJlIHVzZWQ/XG4gICAgICB3aGlsZSAoaW5kZXggPCB0cmVlLmJvZHkubGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IGNoaWxkID0gdHJlZS5ib2R5W2luZGV4XVxuICAgICAgICBpZiAoJ2RpcmVjdGl2ZScgaW4gY2hpbGQgJiYgY2hpbGQuZGlyZWN0aXZlKSB7XG4gICAgICAgICAgaW5kZXgrK1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGJyZWFrXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgY29uc3QgZGVjbGFyYXRpb24gPSB0cmVlLmJvZHlbaW5kZXhdXG5cbiAgICAgIGlmIChcbiAgICAgICAgZGVjbGFyYXRpb24gJiZcbiAgICAgICAgZGVjbGFyYXRpb24udHlwZSA9PT0gJ0ltcG9ydERlY2xhcmF0aW9uJyAmJlxuICAgICAgICB0eXBlb2YgZGVjbGFyYXRpb24uc291cmNlLnZhbHVlID09PSAnc3RyaW5nJyAmJlxuICAgICAgICAvXFwvanN4LShkZXYtKT9ydW50aW1lJC8udGVzdChkZWNsYXJhdGlvbi5zb3VyY2UudmFsdWUpXG4gICAgICApIHtcbiAgICAgICAgdHJlZS5ib2R5W2luZGV4XSA9IHtcbiAgICAgICAgICB0eXBlOiAnVmFyaWFibGVEZWNsYXJhdGlvbicsXG4gICAgICAgICAga2luZDogJ2NvbnN0JyxcbiAgICAgICAgICBkZWNsYXJhdGlvbnM6IHNwZWNpZmllcnNUb0RlY2xhcmF0aW9ucyhcbiAgICAgICAgICAgIGRlY2xhcmF0aW9uLnNwZWNpZmllcnMsXG4gICAgICAgICAgICB0b0lkT3JNZW1iZXJFeHByZXNzaW9uKFsnYXJndW1lbnRzJywgMF0pXG4gICAgICAgICAgKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59XG4iXSwibmFtZXMiOlsic3BlY2lmaWVyc1RvRGVjbGFyYXRpb25zIiwidG9JZE9yTWVtYmVyRXhwcmVzc2lvbiIsInJlY21hQnVpbGRKc3hUcmFuc2Zvcm0iLCJvcHRpb25zIiwib3V0cHV0Rm9ybWF0IiwidHJlZSIsImNvbW1lbnRzIiwiZmlsdGVyIiwiZCIsImRhdGEiLCJfbWR4SXNQcmFnbWFDb21tZW50IiwiaW5kZXgiLCJib2R5IiwibGVuZ3RoIiwiY2hpbGQiLCJkaXJlY3RpdmUiLCJkZWNsYXJhdGlvbiIsInR5cGUiLCJzb3VyY2UiLCJ2YWx1ZSIsInRlc3QiLCJraW5kIiwiZGVjbGFyYXRpb25zIiwic3BlY2lmaWVycyJdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/.pnpm/@mdx-js+mdx@3.1.0_acorn@8.14.1/node_modules/@mdx-js/mdx/lib/plugin/recma-build-jsx-transform.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/.pnpm/@mdx-js+mdx@3.1.0_acorn@8.14.1/node_modules/@mdx-js/mdx/lib/plugin/recma-document.js":
/*!******************************************************************************************************************!*\
  !*** ../node_modules/.pnpm/@mdx-js+mdx@3.1.0_acorn@8.14.1/node_modules/@mdx-js/mdx/lib/plugin/recma-document.js ***!
  \******************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   recmaDocument: () => (/* binding */ recmaDocument)\n/* harmony export */ });\n/* harmony import */ var devlop__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! devlop */ \"(rsc)/../node_modules/.pnpm/devlop@1.1.0/node_modules/devlop/lib/development.js\");\n/* harmony import */ var estree_util_scope__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! estree-util-scope */ \"(rsc)/../node_modules/.pnpm/estree-util-scope@1.0.0/node_modules/estree-util-scope/lib/index.js\");\n/* harmony import */ var estree_walker__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! estree-walker */ \"(rsc)/../node_modules/.pnpm/estree-walker@3.0.3/node_modules/estree-walker/src/index.js\");\n/* harmony import */ var unist_util_position_from_estree__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! unist-util-position-from-estree */ \"(rsc)/../node_modules/.pnpm/unist-util-position-from-estree@2.0.0/node_modules/unist-util-position-from-estree/lib/index.js\");\n/* harmony import */ var unist_util_stringify_position__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! unist-util-stringify-position */ \"(rsc)/../node_modules/.pnpm/unist-util-stringify-position@4.0.0/node_modules/unist-util-stringify-position/lib/index.js\");\n/* harmony import */ var _util_estree_util_create_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../util/estree-util-create.js */ \"(rsc)/../node_modules/.pnpm/@mdx-js+mdx@3.1.0_acorn@8.14.1/node_modules/@mdx-js/mdx/lib/util/estree-util-create.js\");\n/* harmony import */ var _util_estree_util_declaration_to_expression_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../util/estree-util-declaration-to-expression.js */ \"(rsc)/../node_modules/.pnpm/@mdx-js+mdx@3.1.0_acorn@8.14.1/node_modules/@mdx-js/mdx/lib/util/estree-util-declaration-to-expression.js\");\n/* harmony import */ var _util_estree_util_is_declaration_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util/estree-util-is-declaration.js */ \"(rsc)/../node_modules/.pnpm/@mdx-js+mdx@3.1.0_acorn@8.14.1/node_modules/@mdx-js/mdx/lib/util/estree-util-is-declaration.js\");\n/* harmony import */ var _util_estree_util_specifiers_to_declarations_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../util/estree-util-specifiers-to-declarations.js */ \"(rsc)/../node_modules/.pnpm/@mdx-js+mdx@3.1.0_acorn@8.14.1/node_modules/@mdx-js/mdx/lib/util/estree-util-specifiers-to-declarations.js\");\n/* harmony import */ var _util_estree_util_to_id_or_member_expression_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../util/estree-util-to-id-or-member-expression.js */ \"(rsc)/../node_modules/.pnpm/@mdx-js+mdx@3.1.0_acorn@8.14.1/node_modules/@mdx-js/mdx/lib/util/estree-util-to-id-or-member-expression.js\");\n/**\n * @import {\n      CallExpression,\n      Directive,\n      ExportAllDeclaration,\n      ExportDefaultDeclaration,\n      ExportNamedDeclaration,\n      ExportSpecifier,\n      Expression,\n      FunctionDeclaration,\n      Identifier,\n      ImportDeclaration,\n      ImportDefaultSpecifier,\n      ImportExpression,\n      ImportSpecifier,\n      JSXElement,\n      JSXFragment,\n      Literal,\n      ModuleDeclaration,\n      Node,\n      Program,\n      Property,\n      SimpleLiteral,\n      SpreadElement,\n      Statement,\n      VariableDeclarator\n * } from 'estree-jsx'\n * @import {VFile} from 'vfile'\n * @import {ProcessorOptions} from '../core.js'\n */\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * Wrap the estree in `MDXContent`.\n *\n * @param {Readonly<ProcessorOptions>} options\n *   Configuration.\n * @returns\n *   Transform.\n */\nfunction recmaDocument(options) {\n  const baseUrl = options.baseUrl || undefined\n  const baseHref = typeof baseUrl === 'object' ? baseUrl.href : baseUrl\n  const outputFormat = options.outputFormat || 'program'\n  const pragma =\n    options.pragma === undefined ? 'React.createElement' : options.pragma\n  const pragmaFrag =\n    options.pragmaFrag === undefined ? 'React.Fragment' : options.pragmaFrag\n  const pragmaImportSource = options.pragmaImportSource || 'react'\n  const jsxImportSource = options.jsxImportSource || 'react'\n  const jsxRuntime = options.jsxRuntime || 'automatic'\n\n  /**\n   * @param {Program} tree\n   *   Tree.\n   * @param {VFile} file\n   *   File.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  return function (tree, file) {\n    /** @type {Array<[string, string] | string>} */\n    const exportedValues = []\n    /** @type {Array<Directive | ModuleDeclaration | Statement>} */\n    const replacement = []\n    let exportAllCount = 0\n    /** @type {ExportDefaultDeclaration | ExportSpecifier | undefined} */\n    let layout\n    /** @type {boolean | undefined} */\n    let content\n    /** @type {Node} */\n    let child\n\n    if (jsxRuntime === 'classic' && pragmaFrag) {\n      injectPragma(tree, '@jsxFrag', pragmaFrag)\n    }\n\n    if (jsxRuntime === 'classic' && pragma) {\n      injectPragma(tree, '@jsx', pragma)\n    }\n\n    if (jsxRuntime === 'automatic' && jsxImportSource) {\n      injectPragma(tree, '@jsxImportSource', jsxImportSource)\n    }\n\n    if (jsxRuntime) {\n      injectPragma(tree, '@jsxRuntime', jsxRuntime)\n    }\n\n    if (jsxRuntime === 'classic' && pragmaImportSource) {\n      if (!pragma) {\n        throw new Error(\n          'Missing `pragma` in classic runtime with `pragmaImportSource`'\n        )\n      }\n\n      handleEsm({\n        type: 'ImportDeclaration',\n        specifiers: [\n          {\n            type: 'ImportDefaultSpecifier',\n            local: {type: 'Identifier', name: pragma.split('.')[0]}\n          }\n        ],\n        source: {type: 'Literal', value: pragmaImportSource}\n      })\n    }\n\n    // Find the `export default`, the JSX expression, and leave the rest\n    // (import/exports) as they are.\n    for (child of tree.body) {\n      // ```tsx\n      // export default properties => <>{properties.children}</>\n      // ```\n      //\n      // Treat it as an inline layout declaration.\n      if (child.type === 'ExportDefaultDeclaration') {\n        if (layout) {\n          file.fail(\n            'Unexpected duplicate layout, expected a single layout (previous: ' +\n              (0,unist_util_stringify_position__WEBPACK_IMPORTED_MODULE_1__.stringifyPosition)((0,unist_util_position_from_estree__WEBPACK_IMPORTED_MODULE_2__.positionFromEstree)(layout)) +\n              ')',\n            {\n              ancestors: [tree, child],\n              place: (0,unist_util_position_from_estree__WEBPACK_IMPORTED_MODULE_2__.positionFromEstree)(child),\n              ruleId: 'duplicate-layout',\n              source: 'recma-document'\n            }\n          )\n        }\n\n        layout = child\n        replacement.push({\n          type: 'VariableDeclaration',\n          kind: 'const',\n          declarations: [\n            {\n              type: 'VariableDeclarator',\n              id: {type: 'Identifier', name: 'MDXLayout'},\n              init: (0,_util_estree_util_is_declaration_js__WEBPACK_IMPORTED_MODULE_3__.isDeclaration)(child.declaration)\n                ? (0,_util_estree_util_declaration_to_expression_js__WEBPACK_IMPORTED_MODULE_4__.declarationToExpression)(child.declaration)\n                : child.declaration\n            }\n          ]\n        })\n      }\n      // ```tsx\n      // export {a, b as c} from 'd'\n      // ```\n      else if (child.type === 'ExportNamedDeclaration' && child.source) {\n        // Cast because always simple.\n        const source = /** @type {SimpleLiteral} */ (child.source)\n\n        // Remove `default` or `as default`, but not `default as`, specifier.\n        child.specifiers = child.specifiers.filter(function (specifier) {\n          if (\n            specifier.exported.type === 'Identifier' &&\n            specifier.exported.name === 'default'\n          ) {\n            if (layout) {\n              file.fail(\n                'Unexpected duplicate layout, expected a single layout (previous: ' +\n                  (0,unist_util_stringify_position__WEBPACK_IMPORTED_MODULE_1__.stringifyPosition)((0,unist_util_position_from_estree__WEBPACK_IMPORTED_MODULE_2__.positionFromEstree)(layout)) +\n                  ')',\n                {\n                  ancestors: [tree, child, specifier],\n                  place: (0,unist_util_position_from_estree__WEBPACK_IMPORTED_MODULE_2__.positionFromEstree)(child),\n                  ruleId: 'duplicate-layout',\n                  source: 'recma-document'\n                }\n              )\n            }\n\n            layout = specifier\n\n            // Make it just an import: `import MDXLayout from '…'`.\n            /** @type {Array<ImportDefaultSpecifier | ImportSpecifier>} */\n            const specifiers = []\n\n            // Default as default / something else as default.\n            if (\n              specifier.local.type === 'Identifier' &&\n              specifier.local.name === 'default'\n            ) {\n              specifiers.push({\n                type: 'ImportDefaultSpecifier',\n                local: {type: 'Identifier', name: 'MDXLayout'}\n              })\n            } else {\n              /** @type {ImportSpecifier} */\n              const importSpecifier = {\n                type: 'ImportSpecifier',\n                imported: specifier.local,\n                local: {type: 'Identifier', name: 'MDXLayout'}\n              }\n              ;(0,_util_estree_util_create_js__WEBPACK_IMPORTED_MODULE_5__.create)(specifier.local, importSpecifier)\n              specifiers.push(importSpecifier)\n            }\n\n            /** @type {Literal} */\n            const from = {type: 'Literal', value: source.value}\n            ;(0,_util_estree_util_create_js__WEBPACK_IMPORTED_MODULE_5__.create)(source, from)\n\n            /** @type {ImportDeclaration} */\n            const declaration = {\n              type: 'ImportDeclaration',\n              specifiers,\n              source: from\n            }\n            ;(0,_util_estree_util_create_js__WEBPACK_IMPORTED_MODULE_5__.create)(specifier, declaration)\n            handleEsm(declaration)\n\n            return false\n          }\n\n          return true\n        })\n\n        // If there are other things imported, keep it.\n        if (child.specifiers.length > 0) {\n          handleExport(child)\n        }\n      }\n      // ```tsx\n      // export {a, b as c}\n      // export * from 'a'\n      // ```\n      else if (\n        child.type === 'ExportNamedDeclaration' ||\n        child.type === 'ExportAllDeclaration'\n      ) {\n        handleExport(child)\n      } else if (child.type === 'ImportDeclaration') {\n        handleEsm(child)\n      } else if (\n        child.type === 'ExpressionStatement' &&\n        (child.expression.type === 'JSXElement' ||\n          child.expression.type === 'JSXFragment')\n      ) {\n        content = true\n        replacement.push(\n          ...createMdxContent(child.expression, outputFormat, Boolean(layout))\n        )\n      } else {\n        // This catch-all branch is because plugins might add other things.\n        // Normally, we only have import/export/jsx, but just add whatever’s\n        // there.\n        replacement.push(child)\n      }\n    }\n\n    // If there was no JSX content at all, add an empty function.\n    if (!content) {\n      replacement.push(\n        ...createMdxContent(undefined, outputFormat, Boolean(layout))\n      )\n    }\n\n    exportedValues.push(['MDXContent', 'default'])\n\n    if (outputFormat === 'function-body') {\n      replacement.push({\n        type: 'ReturnStatement',\n        argument: {\n          type: 'ObjectExpression',\n          properties: [\n            ...Array.from({length: exportAllCount}).map(\n              /**\n               * @param {undefined} _\n               *   Nothing.\n               * @param {number} index\n               *   Index.\n               * @returns {SpreadElement}\n               *   Node.\n               */\n              function (_, index) {\n                return {\n                  type: 'SpreadElement',\n                  argument: {\n                    type: 'Identifier',\n                    name: '_exportAll' + (index + 1)\n                  }\n                }\n              }\n            ),\n            ...exportedValues.map(function (d) {\n              /** @type {Property} */\n              const property = {\n                type: 'Property',\n                kind: 'init',\n                method: false,\n                computed: false,\n                shorthand: typeof d === 'string',\n                key: {\n                  type: 'Identifier',\n                  name: typeof d === 'string' ? d : d[1]\n                },\n                value: {\n                  type: 'Identifier',\n                  name: typeof d === 'string' ? d : d[0]\n                }\n              }\n\n              return property\n            })\n          ]\n        }\n      })\n    }\n\n    tree.body = replacement\n\n    let usesImportMetaUrlVariable = false\n    let usesResolveDynamicHelper = false\n\n    if (baseHref || outputFormat === 'function-body') {\n      (0,estree_walker__WEBPACK_IMPORTED_MODULE_0__.walk)(tree, {\n        enter(node) {\n          if (\n            (node.type === 'ExportAllDeclaration' ||\n              node.type === 'ExportNamedDeclaration' ||\n              node.type === 'ImportDeclaration') &&\n            node.source\n          ) {\n            // We never hit this branch when generating function bodies, as\n            // statements are already compiled away into import expressions.\n            (0,devlop__WEBPACK_IMPORTED_MODULE_6__.ok)(baseHref, 'unexpected missing `baseHref` in branch')\n\n            let value = node.source.value\n            // The literal source for statements can only be string.\n            ;(0,devlop__WEBPACK_IMPORTED_MODULE_6__.ok)(typeof value === 'string', 'expected string source')\n\n            // Resolve a specifier.\n            // This is the same as `_resolveDynamicMdxSpecifier`, which has to\n            // be injected to work with expressions at runtime, but as we have\n            // `baseHref` at compile time here and statements are static\n            // strings, we can do it now.\n            try {\n              // To do: next major: use `URL.canParse`.\n              // eslint-disable-next-line no-new\n              new URL(value)\n              // Fine: a full URL.\n            } catch {\n              if (\n                value.startsWith('/') ||\n                value.startsWith('./') ||\n                value.startsWith('../')\n              ) {\n                value = new URL(value, baseHref).href\n              } else {\n                // Fine: are bare specifier.\n              }\n            }\n\n            /** @type {SimpleLiteral} */\n            const replacement = {type: 'Literal', value}\n            ;(0,_util_estree_util_create_js__WEBPACK_IMPORTED_MODULE_5__.create)(node.source, replacement)\n            node.source = replacement\n            return\n          }\n\n          if (node.type === 'ImportExpression') {\n            usesResolveDynamicHelper = true\n            /** @type {CallExpression} */\n            const replacement = {\n              type: 'CallExpression',\n              callee: {type: 'Identifier', name: '_resolveDynamicMdxSpecifier'},\n              arguments: [node.source],\n              optional: false\n            }\n            node.source = replacement\n            return\n          }\n\n          // To do: add support for `import.meta.resolve`.\n\n          if (\n            node.type === 'MemberExpression' &&\n            'object' in node &&\n            node.object.type === 'MetaProperty' &&\n            node.property.type === 'Identifier' &&\n            node.object.meta.name === 'import' &&\n            node.object.property.name === 'meta' &&\n            node.property.name === 'url'\n          ) {\n            usesImportMetaUrlVariable = true\n            /** @type {Identifier} */\n            const replacement = {type: 'Identifier', name: '_importMetaUrl'}\n            ;(0,_util_estree_util_create_js__WEBPACK_IMPORTED_MODULE_5__.create)(node, replacement)\n            this.replace(replacement)\n          }\n        }\n      })\n    }\n\n    if (usesResolveDynamicHelper) {\n      if (!baseHref) {\n        usesImportMetaUrlVariable = true\n      }\n\n      tree.body.push(\n        resolveDynamicMdxSpecifier(\n          baseHref\n            ? {type: 'Literal', value: baseHref}\n            : {type: 'Identifier', name: '_importMetaUrl'}\n        )\n      )\n    }\n\n    if (usesImportMetaUrlVariable) {\n      (0,devlop__WEBPACK_IMPORTED_MODULE_6__.ok)(\n        outputFormat === 'function-body',\n        'expected `function-body` when using dynamic url injection'\n      )\n      tree.body.unshift(...createImportMetaUrlVariable())\n    }\n\n    /**\n     * @param {ExportAllDeclaration | ExportNamedDeclaration} node\n     *   Export node.\n     * @returns {undefined}\n     *   Nothing.\n     */\n    function handleExport(node) {\n      if (node.type === 'ExportNamedDeclaration') {\n        // ```tsx\n        // export function a() {}\n        // export class A {}\n        // export var a = 1\n        // ```\n        if (node.declaration) {\n          const visitors = (0,estree_util_scope__WEBPACK_IMPORTED_MODULE_7__.createVisitors)()\n          // Walk the top-level scope.\n          ;(0,estree_walker__WEBPACK_IMPORTED_MODULE_0__.walk)(node, {\n            enter(node) {\n              visitors.enter(node)\n\n              if (\n                node.type === 'ArrowFunctionExpression' ||\n                node.type === 'FunctionDeclaration' ||\n                node.type === 'FunctionExpression'\n              ) {\n                this.skip()\n                visitors.exit(node)\n              }\n            },\n            leave: visitors.exit\n          })\n          exportedValues.push(...visitors.scopes[0].defined)\n        }\n\n        // ```tsx\n        // export {a, b as c}\n        // export {a, b as c} from 'd'\n        // ```\n        for (child of node.specifiers) {\n          if (child.exported.type === 'Identifier') {\n            exportedValues.push(child.exported.name)\n            /* c8 ignore next 5 -- to do: <https://github.com/mdx-js/mdx/issues/2536> */\n          } else {\n            // Must be string.\n            (0,devlop__WEBPACK_IMPORTED_MODULE_6__.ok)(typeof child.exported.value === 'string')\n            exportedValues.push(child.exported.value)\n          }\n        }\n      }\n\n      handleEsm(node)\n    }\n\n    /**\n     * @param {ExportAllDeclaration | ExportNamedDeclaration | ImportDeclaration} node\n     *   Export or import node.\n     * @returns {undefined}\n     *   Nothing.\n     */\n    function handleEsm(node) {\n      /** @type {ModuleDeclaration | Statement | undefined} */\n      let replace\n      /** @type {Expression} */\n      let init\n\n      if (outputFormat === 'function-body') {\n        if (\n          // Always have a source:\n          node.type === 'ImportDeclaration' ||\n          node.type === 'ExportAllDeclaration' ||\n          // Source optional:\n          (node.type === 'ExportNamedDeclaration' && node.source)\n        ) {\n          // We always have a source, but types say they can be missing.\n          (0,devlop__WEBPACK_IMPORTED_MODULE_6__.ok)(node.source, 'expected `node.source` to be defined')\n\n          // ```\n          // import 'a'\n          // //=> await import('a')\n          // import a from 'b'\n          // //=> const {default: a} = await import('b')\n          // export {a, b as c} from 'd'\n          // //=> const {a, c: b} = await import('d')\n          // export * from 'a'\n          // //=> const _exportAll0 = await import('a')\n          // ```\n          /** @type {ImportExpression} */\n          const argument = {type: 'ImportExpression', source: node.source}\n          ;(0,_util_estree_util_create_js__WEBPACK_IMPORTED_MODULE_5__.create)(node, argument)\n          init = {type: 'AwaitExpression', argument}\n\n          if (\n            (node.type === 'ImportDeclaration' ||\n              node.type === 'ExportNamedDeclaration') &&\n            node.specifiers.length === 0\n          ) {\n            replace = {type: 'ExpressionStatement', expression: init}\n          } else {\n            replace = {\n              type: 'VariableDeclaration',\n              kind: 'const',\n              declarations:\n                node.type === 'ExportAllDeclaration'\n                  ? [\n                      {\n                        type: 'VariableDeclarator',\n                        id: {\n                          type: 'Identifier',\n                          name: '_exportAll' + ++exportAllCount\n                        },\n                        init\n                      }\n                    ]\n                  : (0,_util_estree_util_specifiers_to_declarations_js__WEBPACK_IMPORTED_MODULE_8__.specifiersToDeclarations)(node.specifiers, init)\n            }\n          }\n        } else if (node.declaration) {\n          replace = node.declaration\n        } else {\n          /** @type {Array<VariableDeclarator>} */\n          const declarators = []\n\n          for (const specifier of node.specifiers) {\n            // `id` can only be an identifier,\n            // so we ignore literal.\n            if (\n              specifier.exported.type === 'Identifier' &&\n              specifier.local.type === 'Identifier' &&\n              specifier.local.name !== specifier.exported.name\n            ) {\n              declarators.push({\n                type: 'VariableDeclarator',\n                id: specifier.exported,\n                init: specifier.local\n              })\n            }\n          }\n\n          if (declarators.length > 0) {\n            replace = {\n              type: 'VariableDeclaration',\n              kind: 'const',\n              declarations: declarators\n            }\n          }\n        }\n      } else {\n        replace = node\n      }\n\n      if (replace) {\n        replacement.push(replace)\n      }\n    }\n  }\n\n  /**\n   * @param {Readonly<Expression> | undefined} content\n   *   Content.\n   * @param {'function-body' | 'program'} outputFormat\n   *   Output format.\n   * @param {boolean | undefined} [hasInternalLayout=false]\n   *   Whether there’s an internal layout (default: `false`).\n   * @returns {Array<ExportDefaultDeclaration | FunctionDeclaration>}\n   *   Functions.\n   */\n  function createMdxContent(content, outputFormat, hasInternalLayout) {\n    /** @type {JSXElement} */\n    const element = {\n      type: 'JSXElement',\n      openingElement: {\n        type: 'JSXOpeningElement',\n        name: {type: 'JSXIdentifier', name: 'MDXLayout'},\n        attributes: [\n          {\n            type: 'JSXSpreadAttribute',\n            argument: {type: 'Identifier', name: 'props'}\n          }\n        ],\n        selfClosing: false\n      },\n      closingElement: {\n        type: 'JSXClosingElement',\n        name: {type: 'JSXIdentifier', name: 'MDXLayout'}\n      },\n      children: [\n        {\n          type: 'JSXElement',\n          openingElement: {\n            type: 'JSXOpeningElement',\n            name: {type: 'JSXIdentifier', name: '_createMdxContent'},\n            attributes: [\n              {\n                type: 'JSXSpreadAttribute',\n                argument: {type: 'Identifier', name: 'props'}\n              }\n            ],\n            selfClosing: true\n          },\n          closingElement: null,\n          children: []\n        }\n      ]\n    }\n\n    let result = /** @type {Expression} */ (element)\n\n    if (!hasInternalLayout) {\n      result = {\n        type: 'ConditionalExpression',\n        test: {type: 'Identifier', name: 'MDXLayout'},\n        consequent: result,\n        alternate: {\n          type: 'CallExpression',\n          callee: {type: 'Identifier', name: '_createMdxContent'},\n          arguments: [{type: 'Identifier', name: 'props'}],\n          optional: false\n        }\n      }\n    }\n\n    let argument =\n      // Cast because TS otherwise does not think `JSXFragment`s are expressions.\n      /** @type {Readonly<Expression> | Readonly<JSXFragment>} */ (\n        content || {type: 'Identifier', name: 'undefined'}\n      )\n\n    // Unwrap a fragment of a single element.\n    if (\n      argument.type === 'JSXFragment' &&\n      argument.children.length === 1 &&\n      argument.children[0].type === 'JSXElement'\n    ) {\n      argument = argument.children[0]\n    }\n\n    let awaitExpression = false\n\n    ;(0,estree_walker__WEBPACK_IMPORTED_MODULE_0__.walk)(argument, {\n      enter(node) {\n        if (\n          node.type === 'ArrowFunctionExpression' ||\n          node.type === 'FunctionDeclaration' ||\n          node.type === 'FunctionExpression'\n        ) {\n          return this.skip()\n        }\n\n        if (\n          node.type === 'AwaitExpression' ||\n          /* c8 ignore next 2 -- can only occur in a function (which then can\n           * only be async, so skipped it) */\n          (node.type === 'ForOfStatement' && node.await)\n        ) {\n          awaitExpression = true\n        }\n      }\n    })\n\n    /** @type {FunctionDeclaration} */\n    const declaration = {\n      type: 'FunctionDeclaration',\n      id: {type: 'Identifier', name: 'MDXContent'},\n      params: [\n        {\n          type: 'AssignmentPattern',\n          left: {type: 'Identifier', name: 'props'},\n          right: {type: 'ObjectExpression', properties: []}\n        }\n      ],\n      body: {\n        type: 'BlockStatement',\n        body: [{type: 'ReturnStatement', argument: result}]\n      }\n    }\n\n    return [\n      {\n        type: 'FunctionDeclaration',\n        async: awaitExpression,\n        id: {type: 'Identifier', name: '_createMdxContent'},\n        params: [{type: 'Identifier', name: 'props'}],\n        body: {\n          type: 'BlockStatement',\n          body: [\n            {\n              type: 'ReturnStatement',\n              // Cast because TS doesn’t think `JSXFragment` is an expression.\n              // eslint-disable-next-line object-shorthand\n              argument: /** @type {Expression} */ (argument)\n            }\n          ]\n        }\n      },\n      outputFormat === 'program'\n        ? {type: 'ExportDefaultDeclaration', declaration}\n        : declaration\n    ]\n  }\n}\n\n/**\n * @param {Program} tree\n * @param {string} name\n * @param {string} value\n * @returns {undefined}\n */\nfunction injectPragma(tree, name, value) {\n  tree.comments?.unshift({\n    type: 'Block',\n    value: name + ' ' + value,\n    data: {_mdxIsPragmaComment: true}\n  })\n}\n\n/**\n * @param {Expression} importMetaUrl\n * @returns {FunctionDeclaration}\n */\nfunction resolveDynamicMdxSpecifier(importMetaUrl) {\n  return {\n    type: 'FunctionDeclaration',\n    id: {type: 'Identifier', name: '_resolveDynamicMdxSpecifier'},\n    generator: false,\n    async: false,\n    params: [{type: 'Identifier', name: 'd'}],\n    body: {\n      type: 'BlockStatement',\n      body: [\n        {\n          type: 'IfStatement',\n          test: {\n            type: 'BinaryExpression',\n            left: {\n              type: 'UnaryExpression',\n              operator: 'typeof',\n              prefix: true,\n              argument: {type: 'Identifier', name: 'd'}\n            },\n            operator: '!==',\n            right: {type: 'Literal', value: 'string'}\n          },\n          consequent: {\n            type: 'ReturnStatement',\n            argument: {type: 'Identifier', name: 'd'}\n          },\n          alternate: null\n        },\n        // To do: use `URL.canParse` when widely supported (see commented\n        // out code below).\n        {\n          type: 'TryStatement',\n          block: {\n            type: 'BlockStatement',\n            body: [\n              {\n                type: 'ExpressionStatement',\n                expression: {\n                  type: 'NewExpression',\n                  callee: {type: 'Identifier', name: 'URL'},\n                  arguments: [{type: 'Identifier', name: 'd'}]\n                }\n              },\n              {\n                type: 'ReturnStatement',\n                argument: {type: 'Identifier', name: 'd'}\n              }\n            ]\n          },\n          handler: {\n            type: 'CatchClause',\n            param: null,\n            body: {type: 'BlockStatement', body: []}\n          },\n          finalizer: null\n        },\n        // To do: use `URL.canParse` when widely supported.\n        // {\n        //   type: 'IfStatement',\n        //   test: {\n        //     type: 'CallExpression',\n        //     callee: toIdOrMemberExpression(['URL', 'canParse']),\n        //     arguments: [{type: 'Identifier', name: 'd'}],\n        //     optional: false\n        //   },\n        //   consequent: {\n        //     type: 'ReturnStatement',\n        //     argument: {type: 'Identifier', name: 'd'}\n        //   },\n        //   alternate: null\n        // },\n        {\n          type: 'IfStatement',\n          test: {\n            type: 'LogicalExpression',\n            left: {\n              type: 'LogicalExpression',\n              left: {\n                type: 'CallExpression',\n                callee: (0,_util_estree_util_to_id_or_member_expression_js__WEBPACK_IMPORTED_MODULE_9__.toIdOrMemberExpression)(['d', 'startsWith']),\n                arguments: [{type: 'Literal', value: '/'}],\n                optional: false\n              },\n              operator: '||',\n              right: {\n                type: 'CallExpression',\n                callee: (0,_util_estree_util_to_id_or_member_expression_js__WEBPACK_IMPORTED_MODULE_9__.toIdOrMemberExpression)(['d', 'startsWith']),\n                arguments: [{type: 'Literal', value: './'}],\n                optional: false\n              }\n            },\n            operator: '||',\n            right: {\n              type: 'CallExpression',\n              callee: (0,_util_estree_util_to_id_or_member_expression_js__WEBPACK_IMPORTED_MODULE_9__.toIdOrMemberExpression)(['d', 'startsWith']),\n              arguments: [{type: 'Literal', value: '../'}],\n              optional: false\n            }\n          },\n          consequent: {\n            type: 'ReturnStatement',\n            argument: {\n              type: 'MemberExpression',\n              object: {\n                type: 'NewExpression',\n                callee: {type: 'Identifier', name: 'URL'},\n                arguments: [{type: 'Identifier', name: 'd'}, importMetaUrl]\n              },\n              property: {type: 'Identifier', name: 'href'},\n              computed: false,\n              optional: false\n            }\n          },\n          alternate: null\n        },\n        {\n          type: 'ReturnStatement',\n          argument: {type: 'Identifier', name: 'd'}\n        }\n      ]\n    }\n  }\n}\n\n/**\n * @returns {Array<Statement>}\n */\nfunction createImportMetaUrlVariable() {\n  return [\n    {\n      type: 'VariableDeclaration',\n      declarations: [\n        {\n          type: 'VariableDeclarator',\n          id: {type: 'Identifier', name: '_importMetaUrl'},\n          init: (0,_util_estree_util_to_id_or_member_expression_js__WEBPACK_IMPORTED_MODULE_9__.toIdOrMemberExpression)(['arguments', 0, 'baseUrl'])\n        }\n      ],\n      kind: 'const'\n    },\n    {\n      type: 'IfStatement',\n      test: {\n        type: 'UnaryExpression',\n        operator: '!',\n        prefix: true,\n        argument: {type: 'Identifier', name: '_importMetaUrl'}\n      },\n      consequent: {\n        type: 'ThrowStatement',\n        argument: {\n          type: 'NewExpression',\n          callee: {type: 'Identifier', name: 'Error'},\n          arguments: [\n            {\n              type: 'Literal',\n              value:\n                'Unexpected missing `options.baseUrl` needed to support `export … from`, `import`, or `import.meta.url` when generating `function-body`'\n            }\n          ]\n        }\n      },\n      alternate: null\n    }\n  ]\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/.pnpm/@mdx-js+mdx@3.1.0_acorn@8.14.1/node_modules/@mdx-js/mdx/lib/plugin/recma-document.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/.pnpm/@mdx-js+mdx@3.1.0_acorn@8.14.1/node_modules/@mdx-js/mdx/lib/plugin/recma-jsx-rewrite.js":
/*!*********************************************************************************************************************!*\
  !*** ../node_modules/.pnpm/@mdx-js+mdx@3.1.0_acorn@8.14.1/node_modules/@mdx-js/mdx/lib/plugin/recma-jsx-rewrite.js ***!
  \*********************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   recmaJsxRewrite: () => (/* binding */ recmaJsxRewrite)\n/* harmony export */ });\n/* harmony import */ var estree_util_is_identifier_name__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! estree-util-is-identifier-name */ \"(rsc)/../node_modules/.pnpm/estree-util-is-identifier-name@3.0.0/node_modules/estree-util-is-identifier-name/lib/index.js\");\n/* harmony import */ var estree_util_scope__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! estree-util-scope */ \"(rsc)/../node_modules/.pnpm/estree-util-scope@1.0.0/node_modules/estree-util-scope/lib/index.js\");\n/* harmony import */ var estree_walker__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! estree-walker */ \"(rsc)/../node_modules/.pnpm/estree-walker@3.0.3/node_modules/estree-walker/src/index.js\");\n/* harmony import */ var unist_util_stringify_position__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! unist-util-stringify-position */ \"(rsc)/../node_modules/.pnpm/unist-util-stringify-position@4.0.0/node_modules/unist-util-stringify-position/lib/index.js\");\n/* harmony import */ var unist_util_position_from_estree__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! unist-util-position-from-estree */ \"(rsc)/../node_modules/.pnpm/unist-util-position-from-estree@2.0.0/node_modules/unist-util-position-from-estree/lib/index.js\");\n/* harmony import */ var _util_estree_util_specifiers_to_declarations_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../util/estree-util-specifiers-to-declarations.js */ \"(rsc)/../node_modules/.pnpm/@mdx-js+mdx@3.1.0_acorn@8.14.1/node_modules/@mdx-js/mdx/lib/util/estree-util-specifiers-to-declarations.js\");\n/* harmony import */ var _util_estree_util_to_binary_addition_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../util/estree-util-to-binary-addition.js */ \"(rsc)/../node_modules/.pnpm/@mdx-js+mdx@3.1.0_acorn@8.14.1/node_modules/@mdx-js/mdx/lib/util/estree-util-to-binary-addition.js\");\n/* harmony import */ var _util_estree_util_to_id_or_member_expression_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util/estree-util-to-id-or-member-expression.js */ \"(rsc)/../node_modules/.pnpm/@mdx-js+mdx@3.1.0_acorn@8.14.1/node_modules/@mdx-js/mdx/lib/util/estree-util-to-id-or-member-expression.js\");\n/**\n * @import {\n      Expression,\n      Function as EstreeFunction,\n      Identifier,\n      ImportSpecifier,\n      JSXElement,\n      ModuleDeclaration,\n      ObjectPattern,\n      Program,\n      Property,\n      SpreadElement,\n      Statement,\n      VariableDeclarator\n * } from 'estree-jsx'\n * @import {Scope} from 'estree-util-scope'\n * @import {VFile} from 'vfile'\n * @import {ProcessorOptions} from '../core.js'\n */\n\n/**\n * @typedef StackEntry\n *   Entry.\n * @property {Array<string>} components\n *   Used components.\n * @property {Map<string, string>} idToInvalidComponentName\n *   Map of JSX identifiers which cannot be used as JS identifiers, to valid JS identifiers.\n * @property {Readonly<EstreeFunction>} node\n *   Function.\n * @property {Array<string>} objects\n *   Identifiers of used objects (such as `x` in `x.y`).\n * @property {Record<string, {node: Readonly<JSXElement>, component: boolean}>} references\n *   Map of JSX identifiers for components and objects, to where they were first used.\n * @property {Array<string>} tags\n *   Tag names.\n */\n\n\n\n\n\n\n\n\n\n\n/**\n * A plugin that rewrites JSX in functions to accept components as\n * `props.components` (when the function is called `_createMdxContent`), or from\n * a provider (if there is one).\n * It also makes sure that any undefined components are defined: either from\n * received components or as a function that throws an error.\n *\n * @param {Readonly<ProcessorOptions>} options\n *   Configuration (optional).\n * @returns\n *   Transform.\n */\nfunction recmaJsxRewrite(options) {\n  const {development, outputFormat, providerImportSource} = options\n\n  /**\n   * @param {Program} tree\n   *   Tree.\n   * @param {VFile} file\n   *   File.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  return function (tree, file) {\n    const visitors = (0,estree_util_scope__WEBPACK_IMPORTED_MODULE_1__.createVisitors)()\n    /** @type {Array<StackEntry>} */\n    const functionStack = []\n    let importProvider = false\n    let createErrorHelper = false\n\n    ;(0,estree_walker__WEBPACK_IMPORTED_MODULE_0__.walk)(tree, {\n      enter(node) {\n        visitors.enter(node)\n\n        if (\n          node.type === 'FunctionDeclaration' ||\n          node.type === 'FunctionExpression' ||\n          node.type === 'ArrowFunctionExpression'\n        ) {\n          functionStack.push({\n            components: [],\n            idToInvalidComponentName: new Map(),\n            node,\n            objects: [],\n            references: {},\n            tags: []\n          })\n\n          // `MDXContent` only ever contains `MDXLayout`.\n          if (\n            isNamedFunction(node, 'MDXContent') &&\n            !inScope(visitors.scopes, 'MDXLayout')\n          ) {\n            functionStack[0].components.push('MDXLayout')\n          }\n        }\n\n        const functionInfo = functionStack[0]\n\n        if (\n          !functionInfo ||\n          (!isNamedFunction(functionInfo.node, '_createMdxContent') &&\n            !providerImportSource)\n        ) {\n          return\n        }\n\n        if (node.type === 'JSXElement') {\n          let name = node.openingElement.name\n\n          // `<x.y>`, `<Foo.Bar>`, `<x.y.z>`.\n          if (name.type === 'JSXMemberExpression') {\n            /** @type {Array<string>} */\n            const ids = []\n\n            // Find the left-most identifier.\n            while (name.type === 'JSXMemberExpression') {\n              ids.unshift(name.property.name)\n              name = name.object\n            }\n\n            ids.unshift(name.name)\n            const fullId = ids.join('.')\n            const id = name.name\n            const isInScope = inScope(visitors.scopes, id)\n\n            if (\n              !Object.hasOwn(functionInfo.references, fullId) &&\n              (!isInScope ||\n                // If the parent scope is `_createMdxContent`, then this\n                // references a component we can add a check statement for.\n                (functionStack.length === 1 &&\n                  functionStack[0].node.type === 'FunctionDeclaration' &&\n                  isNamedFunction(functionStack[0].node, '_createMdxContent')))\n            ) {\n              functionInfo.references[fullId] = {component: true, node}\n            }\n\n            if (!functionInfo.objects.includes(id) && !isInScope) {\n              functionInfo.objects.push(id)\n            }\n          }\n          // `<xml:thing>`.\n          else if (name.type === 'JSXNamespacedName') {\n            // Ignore namespaces.\n          }\n          // If the name is a valid ES identifier, and it doesn’t start with a\n          // lowercase letter, it’s a component.\n          // For example, `$foo`, `_bar`, `Baz` are all component names.\n          // But `foo` and `b-ar` are tag names.\n          else if ((0,estree_util_is_identifier_name__WEBPACK_IMPORTED_MODULE_2__.name)(name.name) && !/^[a-z]/.test(name.name)) {\n            const id = name.name\n\n            if (!inScope(visitors.scopes, id)) {\n              // No need to add an error for an undefined layout — we use an\n              // `if` later.\n              if (\n                id !== 'MDXLayout' &&\n                !Object.hasOwn(functionInfo.references, id)\n              ) {\n                functionInfo.references[id] = {component: true, node}\n              }\n\n              if (!functionInfo.components.includes(id)) {\n                functionInfo.components.push(id)\n              }\n            }\n          } else if (node.data && node.data._mdxExplicitJsx) {\n            // Do not turn explicit JSX into components from `_components`.\n            // As in, a given `h1` component is used for `# heading` (next case),\n            // but not for `<h1>heading</h1>`.\n          } else {\n            const id = name.name\n\n            if (!functionInfo.tags.includes(id)) {\n              functionInfo.tags.push(id)\n            }\n\n            /** @type {Array<number | string>} */\n            let jsxIdExpression = ['_components', id]\n            if ((0,estree_util_is_identifier_name__WEBPACK_IMPORTED_MODULE_2__.name)(id) === false) {\n              let invalidComponentName =\n                functionInfo.idToInvalidComponentName.get(id)\n              if (invalidComponentName === undefined) {\n                invalidComponentName = `_component${functionInfo.idToInvalidComponentName.size}`\n                functionInfo.idToInvalidComponentName.set(\n                  id,\n                  invalidComponentName\n                )\n              }\n\n              jsxIdExpression = [invalidComponentName]\n            }\n\n            node.openingElement.name =\n              (0,_util_estree_util_to_id_or_member_expression_js__WEBPACK_IMPORTED_MODULE_3__.toJsxIdOrMemberExpression)(jsxIdExpression)\n\n            if (node.closingElement) {\n              node.closingElement.name =\n                (0,_util_estree_util_to_id_or_member_expression_js__WEBPACK_IMPORTED_MODULE_3__.toJsxIdOrMemberExpression)(jsxIdExpression)\n            }\n          }\n        }\n      },\n      leave(node) {\n        visitors.exit(node)\n\n        /** @type {Array<Property | SpreadElement>} */\n        const defaults = []\n        /** @type {Array<string>} */\n        const actual = []\n        /** @type {Array<Expression>} */\n        const parameters = []\n        /** @type {Array<VariableDeclarator>} */\n        const declarations = []\n\n        if (\n          node.type === 'FunctionDeclaration' ||\n          node.type === 'FunctionExpression' ||\n          node.type === 'ArrowFunctionExpression'\n        ) {\n          const functionInfo = functionStack[functionStack.length - 1]\n\n          /** @type {string} */\n          let name\n\n          for (name of functionInfo.tags.sort()) {\n            defaults.push({\n              type: 'Property',\n              kind: 'init',\n              key: (0,estree_util_is_identifier_name__WEBPACK_IMPORTED_MODULE_2__.name)(name)\n                ? {type: 'Identifier', name}\n                : {type: 'Literal', value: name},\n              value: {type: 'Literal', value: name},\n              method: false,\n              shorthand: false,\n              computed: false\n            })\n          }\n\n          actual.push(...functionInfo.components)\n\n          for (name of functionInfo.objects) {\n            // In some cases, a component is used directly (`<X>`) but it’s also\n            // used as an object (`<X.Y>`).\n            if (!actual.includes(name)) {\n              actual.push(name)\n            }\n          }\n\n          actual.sort()\n\n          /** @type {Array<Statement>} */\n          const statements = []\n\n          if (\n            defaults.length > 0 ||\n            actual.length > 0 ||\n            functionInfo.idToInvalidComponentName.size > 0\n          ) {\n            if (providerImportSource) {\n              importProvider = true\n              parameters.push({\n                type: 'CallExpression',\n                callee: {type: 'Identifier', name: '_provideComponents'},\n                arguments: [],\n                optional: false\n              })\n            }\n\n            // Accept `components` as a prop if this is the `MDXContent` or\n            // `_createMdxContent` function.\n            if (\n              isNamedFunction(functionInfo.node, 'MDXContent') ||\n              isNamedFunction(functionInfo.node, '_createMdxContent')\n            ) {\n              parameters.push((0,_util_estree_util_to_id_or_member_expression_js__WEBPACK_IMPORTED_MODULE_3__.toIdOrMemberExpression)(['props', 'components']))\n            }\n\n            if (defaults.length > 0 || parameters.length > 1) {\n              for (const parameter of parameters) {\n                defaults.push({type: 'SpreadElement', argument: parameter})\n              }\n            }\n\n            // If we’re getting components from several sources, merge them.\n            /** @type {Expression} */\n            let componentsInit =\n              defaults.length > 0\n                ? {type: 'ObjectExpression', properties: defaults}\n                : // If we’re only getting components from `props.components`,\n                  // make sure it’s defined.\n                  {\n                    type: 'LogicalExpression',\n                    operator: '||',\n                    left: parameters[0],\n                    right: {type: 'ObjectExpression', properties: []}\n                  }\n\n            /** @type {ObjectPattern | undefined} */\n            let componentsPattern\n\n            // Add components to scope.\n            // For `['MyComponent', 'MDXLayout']` this generates:\n            // ```tsx\n            // const {MyComponent, wrapper: MDXLayout} = _components\n            // ```\n            // Note that MDXLayout is special as it’s taken from\n            // `_components.wrapper`.\n            if (actual.length > 0) {\n              componentsPattern = {\n                type: 'ObjectPattern',\n                properties: actual.map(function (name) {\n                  return {\n                    type: 'Property',\n                    kind: 'init',\n                    key: {\n                      type: 'Identifier',\n                      name: name === 'MDXLayout' ? 'wrapper' : name\n                    },\n                    value: {type: 'Identifier', name},\n                    method: false,\n                    shorthand: name !== 'MDXLayout',\n                    computed: false\n                  }\n                })\n              }\n            }\n\n            if (functionInfo.tags.length > 0) {\n              declarations.push({\n                type: 'VariableDeclarator',\n                id: {type: 'Identifier', name: '_components'},\n                init: componentsInit\n              })\n              componentsInit = {type: 'Identifier', name: '_components'}\n            }\n\n            if (isNamedFunction(functionInfo.node, '_createMdxContent')) {\n              for (const [id, componentName] of [\n                ...functionInfo.idToInvalidComponentName\n              ].sort(function ([a], [b]) {\n                return a.localeCompare(b)\n              })) {\n                // For JSX IDs that can’t be represented as JavaScript IDs (as in,\n                // those with dashes, such as `custom-element`), generate a\n                // separate variable that is a valid JS ID (such as `_component0`),\n                // and takes it from components:\n                // `const _component0 = _components['custom-element']`\n                declarations.push({\n                  type: 'VariableDeclarator',\n                  id: {\n                    type: 'Identifier',\n                    name: componentName\n                  },\n                  init: {\n                    type: 'MemberExpression',\n                    object: {type: 'Identifier', name: '_components'},\n                    property: {type: 'Literal', value: id},\n                    computed: true,\n                    optional: false\n                  }\n                })\n              }\n            }\n\n            if (componentsPattern) {\n              declarations.push({\n                type: 'VariableDeclarator',\n                id: componentsPattern,\n                init: componentsInit\n              })\n            }\n\n            if (declarations.length > 0) {\n              statements.push({\n                type: 'VariableDeclaration',\n                kind: 'const',\n                declarations\n              })\n            }\n          }\n\n          /** @type {string} */\n          let key\n\n          // Add partials (so for `x.y.z` it’d generate `x` and `x.y` too).\n          for (key in functionInfo.references) {\n            if (Object.hasOwn(functionInfo.references, key)) {\n              const parts = key.split('.')\n              let index = 0\n              while (++index < parts.length) {\n                const partial = parts.slice(0, index).join('.')\n                if (!Object.hasOwn(functionInfo.references, partial)) {\n                  functionInfo.references[partial] = {\n                    component: false,\n                    node: functionInfo.references[key].node\n                  }\n                }\n              }\n            }\n          }\n\n          const references = Object.keys(functionInfo.references).sort()\n\n          let index = -1\n          while (++index < references.length) {\n            const id = references[index]\n            const info = functionInfo.references[id]\n            const place = (0,unist_util_stringify_position__WEBPACK_IMPORTED_MODULE_4__.stringifyPosition)((0,unist_util_position_from_estree__WEBPACK_IMPORTED_MODULE_5__.positionFromEstree)(info.node))\n            /** @type {Array<Expression>} */\n            const parameters = [\n              {type: 'Literal', value: id},\n              {type: 'Literal', value: info.component}\n            ]\n\n            createErrorHelper = true\n\n            if (development && place) {\n              parameters.push({type: 'Literal', value: place})\n            }\n\n            statements.push({\n              type: 'IfStatement',\n              test: {\n                type: 'UnaryExpression',\n                operator: '!',\n                prefix: true,\n                argument: (0,_util_estree_util_to_id_or_member_expression_js__WEBPACK_IMPORTED_MODULE_3__.toIdOrMemberExpression)(id.split('.'))\n              },\n              consequent: {\n                type: 'ExpressionStatement',\n                expression: {\n                  type: 'CallExpression',\n                  callee: {type: 'Identifier', name: '_missingMdxReference'},\n                  arguments: parameters,\n                  optional: false\n                }\n              },\n              alternate: undefined\n            })\n          }\n\n          if (statements.length > 0) {\n            // Arrow functions with an implied return:\n            if (node.body.type !== 'BlockStatement') {\n              node.body = {\n                type: 'BlockStatement',\n                body: [{type: 'ReturnStatement', argument: node.body}]\n              }\n            }\n\n            node.body.body.unshift(...statements)\n          }\n\n          functionStack.pop()\n        }\n      }\n    })\n\n    // If a provider is used (and can be used), import it.\n    if (importProvider && providerImportSource) {\n      tree.body.unshift(\n        createImportProvider(providerImportSource, outputFormat)\n      )\n    }\n\n    // If potentially missing components are used.\n    if (createErrorHelper) {\n      /** @type {Array<Expression>} */\n      const message = [\n        {type: 'Literal', value: 'Expected '},\n        {\n          type: 'ConditionalExpression',\n          test: {type: 'Identifier', name: 'component'},\n          consequent: {type: 'Literal', value: 'component'},\n          alternate: {type: 'Literal', value: 'object'}\n        },\n        {type: 'Literal', value: ' `'},\n        {type: 'Identifier', name: 'id'},\n        {\n          type: 'Literal',\n          value:\n            '` to be defined: you likely forgot to import, pass, or provide it.'\n        }\n      ]\n\n      /** @type {Array<Identifier>} */\n      const parameters = [\n        {type: 'Identifier', name: 'id'},\n        {type: 'Identifier', name: 'component'}\n      ]\n\n      if (development) {\n        message.push({\n          type: 'ConditionalExpression',\n          test: {type: 'Identifier', name: 'place'},\n          consequent: (0,_util_estree_util_to_binary_addition_js__WEBPACK_IMPORTED_MODULE_6__.toBinaryAddition)([\n            {type: 'Literal', value: '\\nIt’s referenced in your code at `'},\n            {type: 'Identifier', name: 'place'},\n            {\n              type: 'Literal',\n              value: (file.path ? '` in `' + file.path : '') + '`'\n            }\n          ]),\n          alternate: {type: 'Literal', value: ''}\n        })\n\n        parameters.push({type: 'Identifier', name: 'place'})\n      }\n\n      tree.body.push({\n        type: 'FunctionDeclaration',\n        id: {type: 'Identifier', name: '_missingMdxReference'},\n        generator: false,\n        async: false,\n        params: parameters,\n        body: {\n          type: 'BlockStatement',\n          body: [\n            {\n              type: 'ThrowStatement',\n              argument: {\n                type: 'NewExpression',\n                callee: {type: 'Identifier', name: 'Error'},\n                arguments: [(0,_util_estree_util_to_binary_addition_js__WEBPACK_IMPORTED_MODULE_6__.toBinaryAddition)(message)]\n              }\n            }\n          ]\n        }\n      })\n    }\n\n    if (outputFormat === 'function-body') {\n      tree.body.unshift({\n        type: 'ExpressionStatement',\n        expression: {type: 'Literal', value: 'use strict'},\n        directive: 'use strict'\n      })\n    }\n  }\n}\n\n/**\n * @param {string} providerImportSource\n *   Provider source.\n * @param {'function-body' | 'program' | null | undefined} outputFormat\n *   Format.\n * @returns {ModuleDeclaration | Statement}\n *   Node.\n */\nfunction createImportProvider(providerImportSource, outputFormat) {\n  /** @type {Array<ImportSpecifier>} */\n  const specifiers = [\n    {\n      type: 'ImportSpecifier',\n      imported: {type: 'Identifier', name: 'useMDXComponents'},\n      local: {type: 'Identifier', name: '_provideComponents'}\n    }\n  ]\n\n  return outputFormat === 'function-body'\n    ? {\n        type: 'VariableDeclaration',\n        kind: 'const',\n        declarations: (0,_util_estree_util_specifiers_to_declarations_js__WEBPACK_IMPORTED_MODULE_7__.specifiersToDeclarations)(\n          specifiers,\n          (0,_util_estree_util_to_id_or_member_expression_js__WEBPACK_IMPORTED_MODULE_3__.toIdOrMemberExpression)(['arguments', 0])\n        )\n      }\n    : {\n        type: 'ImportDeclaration',\n        specifiers,\n        source: {type: 'Literal', value: providerImportSource}\n      }\n}\n\n/**\n * @param {Readonly<EstreeFunction>} node\n *   Node.\n * @param {string} name\n *   Name.\n * @returns {boolean}\n *   Whether `node` is a named function with `name`.\n */\nfunction isNamedFunction(node, name) {\n  return Boolean(node && 'id' in node && node.id && node.id.name === name)\n}\n\n/**\n * @param {Array<Scope>} scopes\n *   Scope.\n * @param {string} id\n *   Identifier.\n * @returns {boolean}\n *   Whether `id` is in `scope`.\n */\nfunction inScope(scopes, id) {\n  let index = scopes.length\n\n  while (index--) {\n    const scope = scopes[index]\n\n    if (scope.defined.includes(id)) {\n      return true\n    }\n  }\n\n  return false\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/.pnpm/@mdx-js+mdx@3.1.0_acorn@8.14.1/node_modules/@mdx-js/mdx/lib/plugin/recma-jsx-rewrite.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/.pnpm/@mdx-js+mdx@3.1.0_acorn@8.14.1/node_modules/@mdx-js/mdx/lib/plugin/rehype-remove-raw.js":
/*!*********************************************************************************************************************!*\
  !*** ../node_modules/.pnpm/@mdx-js+mdx@3.1.0_acorn@8.14.1/node_modules/@mdx-js/mdx/lib/plugin/rehype-remove-raw.js ***!
  \*********************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   rehypeRemoveRaw: () => (/* binding */ rehypeRemoveRaw)\n/* harmony export */ });\n/* harmony import */ var unist_util_visit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! unist-util-visit */ \"(rsc)/../node_modules/.pnpm/unist-util-visit@5.0.0/node_modules/unist-util-visit/lib/index.js\");\n/**\n * @import {Root} from 'hast'\n */\n\n\n\n/**\n * A tiny plugin that removes raw HTML.\n *\n * This is needed if the format is `md` and `rehype-raw` was not used to parse\n * dangerous HTML into nodes.\n *\n * @returns\n *   Transform.\n */\nfunction rehypeRemoveRaw() {\n  /**\n   * @param {Root} tree\n   *   Tree.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  return function (tree) {\n    (0,unist_util_visit__WEBPACK_IMPORTED_MODULE_0__.visit)(tree, 'raw', function (_, index, parent) {\n      if (parent && typeof index === 'number') {\n        parent.children.splice(index, 1)\n        return index\n      }\n    })\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BtZHgtanMrbWR4QDMuMS4wX2Fjb3JuQDguMTQuMS9ub2RlX21vZHVsZXMvQG1keC1qcy9tZHgvbGliL3BsdWdpbi9yZWh5cGUtcmVtb3ZlLXJhdy5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBO0FBQ0EsWUFBWSxNQUFNO0FBQ2xCOztBQUVzQzs7QUFFdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBLGFBQWEsTUFBTTtBQUNuQjtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQSxJQUFJLHVEQUFLO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL2V0aGFua2ltL05lc3Rvci9tZWRmZXRjaC5qcy9ub2RlX21vZHVsZXMvLnBucG0vQG1keC1qcyttZHhAMy4xLjBfYWNvcm5AOC4xNC4xL25vZGVfbW9kdWxlcy9AbWR4LWpzL21keC9saWIvcGx1Z2luL3JlaHlwZS1yZW1vdmUtcmF3LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGltcG9ydCB7Um9vdH0gZnJvbSAnaGFzdCdcbiAqL1xuXG5pbXBvcnQge3Zpc2l0fSBmcm9tICd1bmlzdC11dGlsLXZpc2l0J1xuXG4vKipcbiAqIEEgdGlueSBwbHVnaW4gdGhhdCByZW1vdmVzIHJhdyBIVE1MLlxuICpcbiAqIFRoaXMgaXMgbmVlZGVkIGlmIHRoZSBmb3JtYXQgaXMgYG1kYCBhbmQgYHJlaHlwZS1yYXdgIHdhcyBub3QgdXNlZCB0byBwYXJzZVxuICogZGFuZ2Vyb3VzIEhUTUwgaW50byBub2Rlcy5cbiAqXG4gKiBAcmV0dXJuc1xuICogICBUcmFuc2Zvcm0uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZWh5cGVSZW1vdmVSYXcoKSB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge1Jvb3R9IHRyZWVcbiAgICogICBUcmVlLlxuICAgKiBAcmV0dXJucyB7dW5kZWZpbmVkfVxuICAgKiAgIE5vdGhpbmcuXG4gICAqL1xuICByZXR1cm4gZnVuY3Rpb24gKHRyZWUpIHtcbiAgICB2aXNpdCh0cmVlLCAncmF3JywgZnVuY3Rpb24gKF8sIGluZGV4LCBwYXJlbnQpIHtcbiAgICAgIGlmIChwYXJlbnQgJiYgdHlwZW9mIGluZGV4ID09PSAnbnVtYmVyJykge1xuICAgICAgICBwYXJlbnQuY2hpbGRyZW4uc3BsaWNlKGluZGV4LCAxKVxuICAgICAgICByZXR1cm4gaW5kZXhcbiAgICAgIH1cbiAgICB9KVxuICB9XG59XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/.pnpm/@mdx-js+mdx@3.1.0_acorn@8.14.1/node_modules/@mdx-js/mdx/lib/plugin/rehype-remove-raw.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/.pnpm/@mdx-js+mdx@3.1.0_acorn@8.14.1/node_modules/@mdx-js/mdx/lib/plugin/remark-mark-and-unravel.js":
/*!***************************************************************************************************************************!*\
  !*** ../node_modules/.pnpm/@mdx-js+mdx@3.1.0_acorn@8.14.1/node_modules/@mdx-js/mdx/lib/plugin/remark-mark-and-unravel.js ***!
  \***************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   remarkMarkAndUnravel: () => (/* binding */ remarkMarkAndUnravel)\n/* harmony export */ });\n/* harmony import */ var collapse_white_space__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! collapse-white-space */ \"(rsc)/../node_modules/.pnpm/collapse-white-space@2.1.0/node_modules/collapse-white-space/index.js\");\n/* harmony import */ var estree_walker__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! estree-walker */ \"(rsc)/../node_modules/.pnpm/estree-walker@3.0.3/node_modules/estree-walker/src/index.js\");\n/* harmony import */ var unist_util_visit__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! unist-util-visit */ \"(rsc)/../node_modules/.pnpm/unist-util-visit@5.0.0/node_modules/unist-util-visit/lib/index.js\");\n/**\n * @import {Root, RootContent} from 'mdast'\n */\n\n\n\n\n\n/**\n * A tiny plugin that unravels `<p><h1>x</h1></p>` but also\n * `<p><Component /></p>` (so it has no knowledge of “HTML”).\n *\n * It also marks JSX as being explicitly JSX, so when a user passes a `h1`\n * component, it is used for `# heading` but not for `<h1>heading</h1>`.\n *\n * @returns\n *   Transform.\n */\nfunction remarkMarkAndUnravel() {\n  /**\n   * @param {Root} tree\n   *   Tree.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  return function (tree) {\n    (0,unist_util_visit__WEBPACK_IMPORTED_MODULE_1__.visit)(tree, function (node, index, parent) {\n      let offset = -1\n      let all = true\n      let oneOrMore = false\n\n      if (parent && typeof index === 'number' && node.type === 'paragraph') {\n        const children = node.children\n\n        while (++offset < children.length) {\n          const child = children[offset]\n\n          if (\n            child.type === 'mdxJsxTextElement' ||\n            child.type === 'mdxTextExpression'\n          ) {\n            oneOrMore = true\n          } else if (\n            child.type === 'text' &&\n            (0,collapse_white_space__WEBPACK_IMPORTED_MODULE_2__.collapseWhiteSpace)(child.value, {style: 'html', trim: true}) === ''\n          ) {\n            // Empty.\n          } else {\n            all = false\n            break\n          }\n        }\n\n        if (all && oneOrMore) {\n          offset = -1\n\n          /** @type {Array<RootContent>} */\n          const newChildren = []\n\n          while (++offset < children.length) {\n            const child = children[offset]\n\n            if (child.type === 'mdxJsxTextElement') {\n              // @ts-expect-error: mutate because it is faster; content model is fine.\n              child.type = 'mdxJsxFlowElement'\n            }\n\n            if (child.type === 'mdxTextExpression') {\n              // @ts-expect-error: mutate because it is faster; content model is fine.\n              child.type = 'mdxFlowExpression'\n            }\n\n            if (\n              child.type === 'text' &&\n              /^[\\t\\r\\n ]+$/.test(String(child.value))\n            ) {\n              // Empty.\n            } else {\n              newChildren.push(child)\n            }\n          }\n\n          parent.children.splice(index, 1, ...newChildren)\n          return index\n        }\n      }\n\n      if (\n        node.type === 'mdxJsxFlowElement' ||\n        node.type === 'mdxJsxTextElement'\n      ) {\n        const data = node.data || (node.data = {})\n        data._mdxExplicitJsx = true\n      }\n\n      if (\n        (node.type === 'mdxFlowExpression' ||\n          node.type === 'mdxTextExpression' ||\n          node.type === 'mdxjsEsm') &&\n        node.data &&\n        node.data.estree\n      ) {\n        (0,estree_walker__WEBPACK_IMPORTED_MODULE_0__.walk)(node.data.estree, {\n          enter(node) {\n            if (node.type === 'JSXElement') {\n              const data = node.data || (node.data = {})\n              data._mdxExplicitJsx = true\n            }\n          }\n        })\n      }\n    })\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BtZHgtanMrbWR4QDMuMS4wX2Fjb3JuQDguMTQuMS9ub2RlX21vZHVsZXMvQG1keC1qcy9tZHgvbGliL3BsdWdpbi9yZW1hcmstbWFyay1hbmQtdW5yYXZlbC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7QUFDQSxZQUFZLG1CQUFtQjtBQUMvQjs7QUFFdUQ7QUFDckI7QUFDSTs7QUFFdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0EsYUFBYSxNQUFNO0FBQ25CO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBLElBQUksdURBQUs7QUFDVDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQSxZQUFZLHdFQUFrQixlQUFlLDBCQUEwQjtBQUN2RTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEscUJBQXFCLG9CQUFvQjtBQUN6Qzs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsZ0VBQWdFO0FBQ2hFO0FBQ0E7O0FBRUE7QUFDQSxnRUFBZ0U7QUFDaEU7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlEQUFpRDtBQUNqRDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUSxtREFBSTtBQUNaO0FBQ0E7QUFDQSx1REFBdUQ7QUFDdkQ7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsS0FBSztBQUNMO0FBQ0EiLCJzb3VyY2VzIjpbIi9Vc2Vycy9ldGhhbmtpbS9OZXN0b3IvbWVkZmV0Y2guanMvbm9kZV9tb2R1bGVzLy5wbnBtL0BtZHgtanMrbWR4QDMuMS4wX2Fjb3JuQDguMTQuMS9ub2RlX21vZHVsZXMvQG1keC1qcy9tZHgvbGliL3BsdWdpbi9yZW1hcmstbWFyay1hbmQtdW5yYXZlbC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBpbXBvcnQge1Jvb3QsIFJvb3RDb250ZW50fSBmcm9tICdtZGFzdCdcbiAqL1xuXG5pbXBvcnQge2NvbGxhcHNlV2hpdGVTcGFjZX0gZnJvbSAnY29sbGFwc2Utd2hpdGUtc3BhY2UnXG5pbXBvcnQge3dhbGt9IGZyb20gJ2VzdHJlZS13YWxrZXInXG5pbXBvcnQge3Zpc2l0fSBmcm9tICd1bmlzdC11dGlsLXZpc2l0J1xuXG4vKipcbiAqIEEgdGlueSBwbHVnaW4gdGhhdCB1bnJhdmVscyBgPHA+PGgxPng8L2gxPjwvcD5gIGJ1dCBhbHNvXG4gKiBgPHA+PENvbXBvbmVudCAvPjwvcD5gIChzbyBpdCBoYXMgbm8ga25vd2xlZGdlIG9mIOKAnEhUTUzigJ0pLlxuICpcbiAqIEl0IGFsc28gbWFya3MgSlNYIGFzIGJlaW5nIGV4cGxpY2l0bHkgSlNYLCBzbyB3aGVuIGEgdXNlciBwYXNzZXMgYSBgaDFgXG4gKiBjb21wb25lbnQsIGl0IGlzIHVzZWQgZm9yIGAjIGhlYWRpbmdgIGJ1dCBub3QgZm9yIGA8aDE+aGVhZGluZzwvaDE+YC5cbiAqXG4gKiBAcmV0dXJuc1xuICogICBUcmFuc2Zvcm0uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZW1hcmtNYXJrQW5kVW5yYXZlbCgpIHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7Um9vdH0gdHJlZVxuICAgKiAgIFRyZWUuXG4gICAqIEByZXR1cm5zIHt1bmRlZmluZWR9XG4gICAqICAgTm90aGluZy5cbiAgICovXG4gIHJldHVybiBmdW5jdGlvbiAodHJlZSkge1xuICAgIHZpc2l0KHRyZWUsIGZ1bmN0aW9uIChub2RlLCBpbmRleCwgcGFyZW50KSB7XG4gICAgICBsZXQgb2Zmc2V0ID0gLTFcbiAgICAgIGxldCBhbGwgPSB0cnVlXG4gICAgICBsZXQgb25lT3JNb3JlID0gZmFsc2VcblxuICAgICAgaWYgKHBhcmVudCAmJiB0eXBlb2YgaW5kZXggPT09ICdudW1iZXInICYmIG5vZGUudHlwZSA9PT0gJ3BhcmFncmFwaCcpIHtcbiAgICAgICAgY29uc3QgY2hpbGRyZW4gPSBub2RlLmNoaWxkcmVuXG5cbiAgICAgICAgd2hpbGUgKCsrb2Zmc2V0IDwgY2hpbGRyZW4ubGVuZ3RoKSB7XG4gICAgICAgICAgY29uc3QgY2hpbGQgPSBjaGlsZHJlbltvZmZzZXRdXG5cbiAgICAgICAgICBpZiAoXG4gICAgICAgICAgICBjaGlsZC50eXBlID09PSAnbWR4SnN4VGV4dEVsZW1lbnQnIHx8XG4gICAgICAgICAgICBjaGlsZC50eXBlID09PSAnbWR4VGV4dEV4cHJlc3Npb24nXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICBvbmVPck1vcmUgPSB0cnVlXG4gICAgICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgICAgIGNoaWxkLnR5cGUgPT09ICd0ZXh0JyAmJlxuICAgICAgICAgICAgY29sbGFwc2VXaGl0ZVNwYWNlKGNoaWxkLnZhbHVlLCB7c3R5bGU6ICdodG1sJywgdHJpbTogdHJ1ZX0pID09PSAnJ1xuICAgICAgICAgICkge1xuICAgICAgICAgICAgLy8gRW1wdHkuXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGFsbCA9IGZhbHNlXG4gICAgICAgICAgICBicmVha1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChhbGwgJiYgb25lT3JNb3JlKSB7XG4gICAgICAgICAgb2Zmc2V0ID0gLTFcblxuICAgICAgICAgIC8qKiBAdHlwZSB7QXJyYXk8Um9vdENvbnRlbnQ+fSAqL1xuICAgICAgICAgIGNvbnN0IG5ld0NoaWxkcmVuID0gW11cblxuICAgICAgICAgIHdoaWxlICgrK29mZnNldCA8IGNoaWxkcmVuLmxlbmd0aCkge1xuICAgICAgICAgICAgY29uc3QgY2hpbGQgPSBjaGlsZHJlbltvZmZzZXRdXG5cbiAgICAgICAgICAgIGlmIChjaGlsZC50eXBlID09PSAnbWR4SnN4VGV4dEVsZW1lbnQnKSB7XG4gICAgICAgICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3I6IG11dGF0ZSBiZWNhdXNlIGl0IGlzIGZhc3RlcjsgY29udGVudCBtb2RlbCBpcyBmaW5lLlxuICAgICAgICAgICAgICBjaGlsZC50eXBlID0gJ21keEpzeEZsb3dFbGVtZW50J1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoY2hpbGQudHlwZSA9PT0gJ21keFRleHRFeHByZXNzaW9uJykge1xuICAgICAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yOiBtdXRhdGUgYmVjYXVzZSBpdCBpcyBmYXN0ZXI7IGNvbnRlbnQgbW9kZWwgaXMgZmluZS5cbiAgICAgICAgICAgICAgY2hpbGQudHlwZSA9ICdtZHhGbG93RXhwcmVzc2lvbidcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICBjaGlsZC50eXBlID09PSAndGV4dCcgJiZcbiAgICAgICAgICAgICAgL15bXFx0XFxyXFxuIF0rJC8udGVzdChTdHJpbmcoY2hpbGQudmFsdWUpKVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgIC8vIEVtcHR5LlxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgbmV3Q2hpbGRyZW4ucHVzaChjaGlsZClcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBwYXJlbnQuY2hpbGRyZW4uc3BsaWNlKGluZGV4LCAxLCAuLi5uZXdDaGlsZHJlbilcbiAgICAgICAgICByZXR1cm4gaW5kZXhcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoXG4gICAgICAgIG5vZGUudHlwZSA9PT0gJ21keEpzeEZsb3dFbGVtZW50JyB8fFxuICAgICAgICBub2RlLnR5cGUgPT09ICdtZHhKc3hUZXh0RWxlbWVudCdcbiAgICAgICkge1xuICAgICAgICBjb25zdCBkYXRhID0gbm9kZS5kYXRhIHx8IChub2RlLmRhdGEgPSB7fSlcbiAgICAgICAgZGF0YS5fbWR4RXhwbGljaXRKc3ggPSB0cnVlXG4gICAgICB9XG5cbiAgICAgIGlmIChcbiAgICAgICAgKG5vZGUudHlwZSA9PT0gJ21keEZsb3dFeHByZXNzaW9uJyB8fFxuICAgICAgICAgIG5vZGUudHlwZSA9PT0gJ21keFRleHRFeHByZXNzaW9uJyB8fFxuICAgICAgICAgIG5vZGUudHlwZSA9PT0gJ21keGpzRXNtJykgJiZcbiAgICAgICAgbm9kZS5kYXRhICYmXG4gICAgICAgIG5vZGUuZGF0YS5lc3RyZWVcbiAgICAgICkge1xuICAgICAgICB3YWxrKG5vZGUuZGF0YS5lc3RyZWUsIHtcbiAgICAgICAgICBlbnRlcihub2RlKSB7XG4gICAgICAgICAgICBpZiAobm9kZS50eXBlID09PSAnSlNYRWxlbWVudCcpIHtcbiAgICAgICAgICAgICAgY29uc3QgZGF0YSA9IG5vZGUuZGF0YSB8fCAobm9kZS5kYXRhID0ge30pXG4gICAgICAgICAgICAgIGRhdGEuX21keEV4cGxpY2l0SnN4ID0gdHJ1ZVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICB9KVxuICB9XG59XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/.pnpm/@mdx-js+mdx@3.1.0_acorn@8.14.1/node_modules/@mdx-js/mdx/lib/plugin/remark-mark-and-unravel.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/.pnpm/@mdx-js+mdx@3.1.0_acorn@8.14.1/node_modules/@mdx-js/mdx/lib/util/estree-util-create.js":
/*!********************************************************************************************************************!*\
  !*** ../node_modules/.pnpm/@mdx-js+mdx@3.1.0_acorn@8.14.1/node_modules/@mdx-js/mdx/lib/util/estree-util-create.js ***!
  \********************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   create: () => (/* binding */ create)\n/* harmony export */ });\n/**\n * @import {Node} from 'estree-jsx'\n */\n\n// Fix to show references to above types in VS Code.\n''\n\n/**\n * @param {Readonly<Node>} from\n *   Node to take from.\n * @param {Node} to\n *   Node to add to.\n * @returns {undefined}\n *   Nothing.\n */\nfunction create(from, to) {\n  /** @type {Array<keyof Node>} */\n  const fields = ['start', 'end', 'loc', 'range']\n  let index = -1\n\n  while (++index < fields.length) {\n    const field = fields[index]\n\n    if (field in from) {\n      // @ts-expect-error: assume they’re settable.\n      to[field] = from[field]\n    }\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BtZHgtanMrbWR4QDMuMS4wX2Fjb3JuQDguMTQuMS9ub2RlX21vZHVsZXMvQG1keC1qcy9tZHgvbGliL3V0aWwvZXN0cmVlLXV0aWwtY3JlYXRlLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBLFlBQVksTUFBTTtBQUNsQjs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsV0FBVyxnQkFBZ0I7QUFDM0I7QUFDQSxXQUFXLE1BQU07QUFDakI7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNPO0FBQ1AsYUFBYSxtQkFBbUI7QUFDaEM7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL2V0aGFua2ltL05lc3Rvci9tZWRmZXRjaC5qcy9ub2RlX21vZHVsZXMvLnBucG0vQG1keC1qcyttZHhAMy4xLjBfYWNvcm5AOC4xNC4xL25vZGVfbW9kdWxlcy9AbWR4LWpzL21keC9saWIvdXRpbC9lc3RyZWUtdXRpbC1jcmVhdGUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAaW1wb3J0IHtOb2RlfSBmcm9tICdlc3RyZWUtanN4J1xuICovXG5cbi8vIEZpeCB0byBzaG93IHJlZmVyZW5jZXMgdG8gYWJvdmUgdHlwZXMgaW4gVlMgQ29kZS5cbicnXG5cbi8qKlxuICogQHBhcmFtIHtSZWFkb25seTxOb2RlPn0gZnJvbVxuICogICBOb2RlIHRvIHRha2UgZnJvbS5cbiAqIEBwYXJhbSB7Tm9kZX0gdG9cbiAqICAgTm9kZSB0byBhZGQgdG8uXG4gKiBAcmV0dXJucyB7dW5kZWZpbmVkfVxuICogICBOb3RoaW5nLlxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlKGZyb20sIHRvKSB7XG4gIC8qKiBAdHlwZSB7QXJyYXk8a2V5b2YgTm9kZT59ICovXG4gIGNvbnN0IGZpZWxkcyA9IFsnc3RhcnQnLCAnZW5kJywgJ2xvYycsICdyYW5nZSddXG4gIGxldCBpbmRleCA9IC0xXG5cbiAgd2hpbGUgKCsraW5kZXggPCBmaWVsZHMubGVuZ3RoKSB7XG4gICAgY29uc3QgZmllbGQgPSBmaWVsZHNbaW5kZXhdXG5cbiAgICBpZiAoZmllbGQgaW4gZnJvbSkge1xuICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvcjogYXNzdW1lIHRoZXnigJlyZSBzZXR0YWJsZS5cbiAgICAgIHRvW2ZpZWxkXSA9IGZyb21bZmllbGRdXG4gICAgfVxuICB9XG59XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/.pnpm/@mdx-js+mdx@3.1.0_acorn@8.14.1/node_modules/@mdx-js/mdx/lib/util/estree-util-create.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/.pnpm/@mdx-js+mdx@3.1.0_acorn@8.14.1/node_modules/@mdx-js/mdx/lib/util/estree-util-declaration-to-expression.js":
/*!***************************************************************************************************************************************!*\
  !*** ../node_modules/.pnpm/@mdx-js+mdx@3.1.0_acorn@8.14.1/node_modules/@mdx-js/mdx/lib/util/estree-util-declaration-to-expression.js ***!
  \***************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   declarationToExpression: () => (/* binding */ declarationToExpression)\n/* harmony export */ });\n/* harmony import */ var devlop__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! devlop */ \"(rsc)/../node_modules/.pnpm/devlop@1.1.0/node_modules/devlop/lib/development.js\");\n/**\n * @import {\n      Declaration,\n      Expression,\n      MaybeNamedClassDeclaration,\n      MaybeNamedFunctionDeclaration\n * } from 'estree-jsx'\n */\n\n\n\n/**\n * Turn a declaration into an expression.\n *\n * Doesn’t work for variable declarations, but that’s fine for our use case\n * because currently we’re using this utility for export default declarations,\n * which can’t contain variable declarations.\n *\n * @param {Readonly<Declaration | MaybeNamedClassDeclaration | MaybeNamedFunctionDeclaration>} declaration\n *   Declaration.\n * @returns {Expression}\n *   Expression.\n */\nfunction declarationToExpression(declaration) {\n  if (declaration.type === 'FunctionDeclaration') {\n    return {...declaration, type: 'FunctionExpression'}\n  }\n\n  // This is currently an internal utility so the next shouldn’t happen or a\n  // maintainer is making a mistake.\n  (0,devlop__WEBPACK_IMPORTED_MODULE_0__.ok)(declaration.type === 'ClassDeclaration', 'unexpected node type')\n  return {...declaration, type: 'ClassExpression'}\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BtZHgtanMrbWR4QDMuMS4wX2Fjb3JuQDguMTQuMS9ub2RlX21vZHVsZXMvQG1keC1qcy9tZHgvbGliL3V0aWwvZXN0cmVlLXV0aWwtZGVjbGFyYXRpb24tdG8tZXhwcmVzc2lvbi5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFbUM7O0FBRW5DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxvRkFBb0Y7QUFDL0Y7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNPO0FBQ1A7QUFDQSxZQUFZO0FBQ1o7O0FBRUE7QUFDQTtBQUNBLEVBQUUsMENBQU07QUFDUixVQUFVO0FBQ1YiLCJzb3VyY2VzIjpbIi9Vc2Vycy9ldGhhbmtpbS9OZXN0b3IvbWVkZmV0Y2guanMvbm9kZV9tb2R1bGVzLy5wbnBtL0BtZHgtanMrbWR4QDMuMS4wX2Fjb3JuQDguMTQuMS9ub2RlX21vZHVsZXMvQG1keC1qcy9tZHgvbGliL3V0aWwvZXN0cmVlLXV0aWwtZGVjbGFyYXRpb24tdG8tZXhwcmVzc2lvbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBpbXBvcnQge1xuICAgICAgRGVjbGFyYXRpb24sXG4gICAgICBFeHByZXNzaW9uLFxuICAgICAgTWF5YmVOYW1lZENsYXNzRGVjbGFyYXRpb24sXG4gICAgICBNYXliZU5hbWVkRnVuY3Rpb25EZWNsYXJhdGlvblxuICogfSBmcm9tICdlc3RyZWUtanN4J1xuICovXG5cbmltcG9ydCB7b2sgYXMgYXNzZXJ0fSBmcm9tICdkZXZsb3AnXG5cbi8qKlxuICogVHVybiBhIGRlY2xhcmF0aW9uIGludG8gYW4gZXhwcmVzc2lvbi5cbiAqXG4gKiBEb2VzbuKAmXQgd29yayBmb3IgdmFyaWFibGUgZGVjbGFyYXRpb25zLCBidXQgdGhhdOKAmXMgZmluZSBmb3Igb3VyIHVzZSBjYXNlXG4gKiBiZWNhdXNlIGN1cnJlbnRseSB3ZeKAmXJlIHVzaW5nIHRoaXMgdXRpbGl0eSBmb3IgZXhwb3J0IGRlZmF1bHQgZGVjbGFyYXRpb25zLFxuICogd2hpY2ggY2Fu4oCZdCBjb250YWluIHZhcmlhYmxlIGRlY2xhcmF0aW9ucy5cbiAqXG4gKiBAcGFyYW0ge1JlYWRvbmx5PERlY2xhcmF0aW9uIHwgTWF5YmVOYW1lZENsYXNzRGVjbGFyYXRpb24gfCBNYXliZU5hbWVkRnVuY3Rpb25EZWNsYXJhdGlvbj59IGRlY2xhcmF0aW9uXG4gKiAgIERlY2xhcmF0aW9uLlxuICogQHJldHVybnMge0V4cHJlc3Npb259XG4gKiAgIEV4cHJlc3Npb24uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkZWNsYXJhdGlvblRvRXhwcmVzc2lvbihkZWNsYXJhdGlvbikge1xuICBpZiAoZGVjbGFyYXRpb24udHlwZSA9PT0gJ0Z1bmN0aW9uRGVjbGFyYXRpb24nKSB7XG4gICAgcmV0dXJuIHsuLi5kZWNsYXJhdGlvbiwgdHlwZTogJ0Z1bmN0aW9uRXhwcmVzc2lvbid9XG4gIH1cblxuICAvLyBUaGlzIGlzIGN1cnJlbnRseSBhbiBpbnRlcm5hbCB1dGlsaXR5IHNvIHRoZSBuZXh0IHNob3VsZG7igJl0IGhhcHBlbiBvciBhXG4gIC8vIG1haW50YWluZXIgaXMgbWFraW5nIGEgbWlzdGFrZS5cbiAgYXNzZXJ0KGRlY2xhcmF0aW9uLnR5cGUgPT09ICdDbGFzc0RlY2xhcmF0aW9uJywgJ3VuZXhwZWN0ZWQgbm9kZSB0eXBlJylcbiAgcmV0dXJuIHsuLi5kZWNsYXJhdGlvbiwgdHlwZTogJ0NsYXNzRXhwcmVzc2lvbid9XG59XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/.pnpm/@mdx-js+mdx@3.1.0_acorn@8.14.1/node_modules/@mdx-js/mdx/lib/util/estree-util-declaration-to-expression.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/.pnpm/@mdx-js+mdx@3.1.0_acorn@8.14.1/node_modules/@mdx-js/mdx/lib/util/estree-util-is-declaration.js":
/*!****************************************************************************************************************************!*\
  !*** ../node_modules/.pnpm/@mdx-js+mdx@3.1.0_acorn@8.14.1/node_modules/@mdx-js/mdx/lib/util/estree-util-is-declaration.js ***!
  \****************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isDeclaration: () => (/* binding */ isDeclaration)\n/* harmony export */ });\n/**\n * @import {\n      Declaration,\n      MaybeNamedClassDeclaration,\n      MaybeNamedFunctionDeclaration,\n      Node\n * } from 'estree-jsx'\n */\n\n// Fix to show references to above types in VS Code.\n''\n\n/**\n * Check if `node` is a declaration.\n *\n * @param {Readonly<MaybeNamedClassDeclaration | MaybeNamedFunctionDeclaration | Node>} node\n *   Node to check.\n * @returns {node is Declaration | MaybeNamedClassDeclaration | MaybeNamedFunctionDeclaration}\n *   Whether `node` is a declaration.\n */\nfunction isDeclaration(node) {\n  return Boolean(\n    node.type === 'FunctionDeclaration' ||\n      node.type === 'ClassDeclaration' ||\n      node.type === 'VariableDeclaration'\n  )\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BtZHgtanMrbWR4QDMuMS4wX2Fjb3JuQDguMTQuMS9ub2RlX21vZHVsZXMvQG1keC1qcy9tZHgvbGliL3V0aWwvZXN0cmVlLXV0aWwtaXMtZGVjbGFyYXRpb24uanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsNkVBQTZFO0FBQ3hGO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL2V0aGFua2ltL05lc3Rvci9tZWRmZXRjaC5qcy9ub2RlX21vZHVsZXMvLnBucG0vQG1keC1qcyttZHhAMy4xLjBfYWNvcm5AOC4xNC4xL25vZGVfbW9kdWxlcy9AbWR4LWpzL21keC9saWIvdXRpbC9lc3RyZWUtdXRpbC1pcy1kZWNsYXJhdGlvbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBpbXBvcnQge1xuICAgICAgRGVjbGFyYXRpb24sXG4gICAgICBNYXliZU5hbWVkQ2xhc3NEZWNsYXJhdGlvbixcbiAgICAgIE1heWJlTmFtZWRGdW5jdGlvbkRlY2xhcmF0aW9uLFxuICAgICAgTm9kZVxuICogfSBmcm9tICdlc3RyZWUtanN4J1xuICovXG5cbi8vIEZpeCB0byBzaG93IHJlZmVyZW5jZXMgdG8gYWJvdmUgdHlwZXMgaW4gVlMgQ29kZS5cbicnXG5cbi8qKlxuICogQ2hlY2sgaWYgYG5vZGVgIGlzIGEgZGVjbGFyYXRpb24uXG4gKlxuICogQHBhcmFtIHtSZWFkb25seTxNYXliZU5hbWVkQ2xhc3NEZWNsYXJhdGlvbiB8IE1heWJlTmFtZWRGdW5jdGlvbkRlY2xhcmF0aW9uIHwgTm9kZT59IG5vZGVcbiAqICAgTm9kZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtub2RlIGlzIERlY2xhcmF0aW9uIHwgTWF5YmVOYW1lZENsYXNzRGVjbGFyYXRpb24gfCBNYXliZU5hbWVkRnVuY3Rpb25EZWNsYXJhdGlvbn1cbiAqICAgV2hldGhlciBgbm9kZWAgaXMgYSBkZWNsYXJhdGlvbi5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzRGVjbGFyYXRpb24obm9kZSkge1xuICByZXR1cm4gQm9vbGVhbihcbiAgICBub2RlLnR5cGUgPT09ICdGdW5jdGlvbkRlY2xhcmF0aW9uJyB8fFxuICAgICAgbm9kZS50eXBlID09PSAnQ2xhc3NEZWNsYXJhdGlvbicgfHxcbiAgICAgIG5vZGUudHlwZSA9PT0gJ1ZhcmlhYmxlRGVjbGFyYXRpb24nXG4gIClcbn1cbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/.pnpm/@mdx-js+mdx@3.1.0_acorn@8.14.1/node_modules/@mdx-js/mdx/lib/util/estree-util-is-declaration.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/.pnpm/@mdx-js+mdx@3.1.0_acorn@8.14.1/node_modules/@mdx-js/mdx/lib/util/estree-util-specifiers-to-declarations.js":
/*!****************************************************************************************************************************************!*\
  !*** ../node_modules/.pnpm/@mdx-js+mdx@3.1.0_acorn@8.14.1/node_modules/@mdx-js/mdx/lib/util/estree-util-specifiers-to-declarations.js ***!
  \****************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   specifiersToDeclarations: () => (/* binding */ specifiersToDeclarations)\n/* harmony export */ });\n/* harmony import */ var devlop__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! devlop */ \"(rsc)/../node_modules/.pnpm/devlop@1.1.0/node_modules/devlop/lib/development.js\");\n/* harmony import */ var _estree_util_create_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./estree-util-create.js */ \"(rsc)/../node_modules/.pnpm/@mdx-js+mdx@3.1.0_acorn@8.14.1/node_modules/@mdx-js/mdx/lib/util/estree-util-create.js\");\n/**\n * @import {\n      AssignmentProperty,\n      ExportSpecifier,\n      Expression,\n      Identifier,\n      ImportDefaultSpecifier,\n      ImportNamespaceSpecifier,\n      ImportSpecifier,\n      Literal,\n      VariableDeclarator\n * } from 'estree-jsx'\n */\n\n\n\n\n/**\n * @param {ReadonlyArray<Readonly<ExportSpecifier> | Readonly<ImportDefaultSpecifier> | Readonly<ImportNamespaceSpecifier> | Readonly<ImportSpecifier>>} specifiers\n *   Specifiers.\n * @param {Readonly<Expression>} init\n *   Initializer.\n * @returns {Array<VariableDeclarator>}\n *   Declarations.\n */\nfunction specifiersToDeclarations(specifiers, init) {\n  let index = -1\n  /** @type {Array<VariableDeclarator>} */\n  const declarations = []\n  /** @type {Array<ExportSpecifier | ImportDefaultSpecifier | ImportSpecifier>} */\n  const otherSpecifiers = []\n  // Can only be one according to JS syntax.\n  /** @type {ImportNamespaceSpecifier | undefined} */\n  let importNamespaceSpecifier\n\n  while (++index < specifiers.length) {\n    const specifier = specifiers[index]\n\n    if (specifier.type === 'ImportNamespaceSpecifier') {\n      importNamespaceSpecifier = specifier\n    } else {\n      otherSpecifiers.push(specifier)\n    }\n  }\n\n  if (importNamespaceSpecifier) {\n    /** @type {VariableDeclarator} */\n    const declarator = {\n      type: 'VariableDeclarator',\n      id: importNamespaceSpecifier.local,\n      init\n    }\n    ;(0,_estree_util_create_js__WEBPACK_IMPORTED_MODULE_0__.create)(importNamespaceSpecifier, declarator)\n    declarations.push(declarator)\n  }\n\n  declarations.push({\n    type: 'VariableDeclarator',\n    id: {\n      type: 'ObjectPattern',\n      properties: otherSpecifiers.map(function (specifier) {\n        /** @type {Identifier | Literal} */\n        let key =\n          specifier.type === 'ImportSpecifier'\n            ? specifier.imported\n            : specifier.type === 'ExportSpecifier'\n              ? specifier.exported\n              : {type: 'Identifier', name: 'default'}\n        let value = specifier.local\n\n        // Switch them around if we’re exporting.\n        if (specifier.type === 'ExportSpecifier') {\n          value = key\n          key = specifier.local\n        }\n\n        // To do: what to do about literals?\n        // `const { a: 'b' } = c()` does not work?\n        (0,devlop__WEBPACK_IMPORTED_MODULE_1__.ok)(value.type === 'Identifier')\n\n        /** @type {AssignmentProperty} */\n        const property = {\n          type: 'Property',\n          kind: 'init',\n          shorthand:\n            key.type === 'Identifier' &&\n            value.type === 'Identifier' &&\n            key.name === value.name,\n          method: false,\n          computed: false,\n          key,\n          value\n        }\n        ;(0,_estree_util_create_js__WEBPACK_IMPORTED_MODULE_0__.create)(specifier, property)\n        return property\n      })\n    },\n    init: importNamespaceSpecifier\n      ? {type: 'Identifier', name: importNamespaceSpecifier.local.name}\n      : init\n  })\n\n  return declarations\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BtZHgtanMrbWR4QDMuMS4wX2Fjb3JuQDguMTQuMS9ub2RlX21vZHVsZXMvQG1keC1qcy9tZHgvbGliL3V0aWwvZXN0cmVlLXV0aWwtc3BlY2lmaWVycy10by1kZWNsYXJhdGlvbnMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFbUM7QUFDVzs7QUFFOUM7QUFDQSxXQUFXLDhJQUE4STtBQUN6SjtBQUNBLFdBQVcsc0JBQXNCO0FBQ2pDO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDTztBQUNQO0FBQ0EsYUFBYSwyQkFBMkI7QUFDeEM7QUFDQSxhQUFhLG1FQUFtRTtBQUNoRjtBQUNBO0FBQ0EsYUFBYSxzQ0FBc0M7QUFDbkQ7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGVBQWUsb0JBQW9CO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJLCtEQUFNO0FBQ1Y7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLHNCQUFzQjtBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxvQkFBb0IsU0FBUztBQUM3QixRQUFRLDBDQUFNOztBQUVkLG1CQUFtQixvQkFBb0I7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUSwrREFBTTtBQUNkO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTDtBQUNBLFNBQVM7QUFDVDtBQUNBLEdBQUc7O0FBRUg7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL2V0aGFua2ltL05lc3Rvci9tZWRmZXRjaC5qcy9ub2RlX21vZHVsZXMvLnBucG0vQG1keC1qcyttZHhAMy4xLjBfYWNvcm5AOC4xNC4xL25vZGVfbW9kdWxlcy9AbWR4LWpzL21keC9saWIvdXRpbC9lc3RyZWUtdXRpbC1zcGVjaWZpZXJzLXRvLWRlY2xhcmF0aW9ucy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBpbXBvcnQge1xuICAgICAgQXNzaWdubWVudFByb3BlcnR5LFxuICAgICAgRXhwb3J0U3BlY2lmaWVyLFxuICAgICAgRXhwcmVzc2lvbixcbiAgICAgIElkZW50aWZpZXIsXG4gICAgICBJbXBvcnREZWZhdWx0U3BlY2lmaWVyLFxuICAgICAgSW1wb3J0TmFtZXNwYWNlU3BlY2lmaWVyLFxuICAgICAgSW1wb3J0U3BlY2lmaWVyLFxuICAgICAgTGl0ZXJhbCxcbiAgICAgIFZhcmlhYmxlRGVjbGFyYXRvclxuICogfSBmcm9tICdlc3RyZWUtanN4J1xuICovXG5cbmltcG9ydCB7b2sgYXMgYXNzZXJ0fSBmcm9tICdkZXZsb3AnXG5pbXBvcnQge2NyZWF0ZX0gZnJvbSAnLi9lc3RyZWUtdXRpbC1jcmVhdGUuanMnXG5cbi8qKlxuICogQHBhcmFtIHtSZWFkb25seUFycmF5PFJlYWRvbmx5PEV4cG9ydFNwZWNpZmllcj4gfCBSZWFkb25seTxJbXBvcnREZWZhdWx0U3BlY2lmaWVyPiB8IFJlYWRvbmx5PEltcG9ydE5hbWVzcGFjZVNwZWNpZmllcj4gfCBSZWFkb25seTxJbXBvcnRTcGVjaWZpZXI+Pn0gc3BlY2lmaWVyc1xuICogICBTcGVjaWZpZXJzLlxuICogQHBhcmFtIHtSZWFkb25seTxFeHByZXNzaW9uPn0gaW5pdFxuICogICBJbml0aWFsaXplci5cbiAqIEByZXR1cm5zIHtBcnJheTxWYXJpYWJsZURlY2xhcmF0b3I+fVxuICogICBEZWNsYXJhdGlvbnMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzcGVjaWZpZXJzVG9EZWNsYXJhdGlvbnMoc3BlY2lmaWVycywgaW5pdCkge1xuICBsZXQgaW5kZXggPSAtMVxuICAvKiogQHR5cGUge0FycmF5PFZhcmlhYmxlRGVjbGFyYXRvcj59ICovXG4gIGNvbnN0IGRlY2xhcmF0aW9ucyA9IFtdXG4gIC8qKiBAdHlwZSB7QXJyYXk8RXhwb3J0U3BlY2lmaWVyIHwgSW1wb3J0RGVmYXVsdFNwZWNpZmllciB8IEltcG9ydFNwZWNpZmllcj59ICovXG4gIGNvbnN0IG90aGVyU3BlY2lmaWVycyA9IFtdXG4gIC8vIENhbiBvbmx5IGJlIG9uZSBhY2NvcmRpbmcgdG8gSlMgc3ludGF4LlxuICAvKiogQHR5cGUge0ltcG9ydE5hbWVzcGFjZVNwZWNpZmllciB8IHVuZGVmaW5lZH0gKi9cbiAgbGV0IGltcG9ydE5hbWVzcGFjZVNwZWNpZmllclxuXG4gIHdoaWxlICgrK2luZGV4IDwgc3BlY2lmaWVycy5sZW5ndGgpIHtcbiAgICBjb25zdCBzcGVjaWZpZXIgPSBzcGVjaWZpZXJzW2luZGV4XVxuXG4gICAgaWYgKHNwZWNpZmllci50eXBlID09PSAnSW1wb3J0TmFtZXNwYWNlU3BlY2lmaWVyJykge1xuICAgICAgaW1wb3J0TmFtZXNwYWNlU3BlY2lmaWVyID0gc3BlY2lmaWVyXG4gICAgfSBlbHNlIHtcbiAgICAgIG90aGVyU3BlY2lmaWVycy5wdXNoKHNwZWNpZmllcilcbiAgICB9XG4gIH1cblxuICBpZiAoaW1wb3J0TmFtZXNwYWNlU3BlY2lmaWVyKSB7XG4gICAgLyoqIEB0eXBlIHtWYXJpYWJsZURlY2xhcmF0b3J9ICovXG4gICAgY29uc3QgZGVjbGFyYXRvciA9IHtcbiAgICAgIHR5cGU6ICdWYXJpYWJsZURlY2xhcmF0b3InLFxuICAgICAgaWQ6IGltcG9ydE5hbWVzcGFjZVNwZWNpZmllci5sb2NhbCxcbiAgICAgIGluaXRcbiAgICB9XG4gICAgY3JlYXRlKGltcG9ydE5hbWVzcGFjZVNwZWNpZmllciwgZGVjbGFyYXRvcilcbiAgICBkZWNsYXJhdGlvbnMucHVzaChkZWNsYXJhdG9yKVxuICB9XG5cbiAgZGVjbGFyYXRpb25zLnB1c2goe1xuICAgIHR5cGU6ICdWYXJpYWJsZURlY2xhcmF0b3InLFxuICAgIGlkOiB7XG4gICAgICB0eXBlOiAnT2JqZWN0UGF0dGVybicsXG4gICAgICBwcm9wZXJ0aWVzOiBvdGhlclNwZWNpZmllcnMubWFwKGZ1bmN0aW9uIChzcGVjaWZpZXIpIHtcbiAgICAgICAgLyoqIEB0eXBlIHtJZGVudGlmaWVyIHwgTGl0ZXJhbH0gKi9cbiAgICAgICAgbGV0IGtleSA9XG4gICAgICAgICAgc3BlY2lmaWVyLnR5cGUgPT09ICdJbXBvcnRTcGVjaWZpZXInXG4gICAgICAgICAgICA/IHNwZWNpZmllci5pbXBvcnRlZFxuICAgICAgICAgICAgOiBzcGVjaWZpZXIudHlwZSA9PT0gJ0V4cG9ydFNwZWNpZmllcidcbiAgICAgICAgICAgICAgPyBzcGVjaWZpZXIuZXhwb3J0ZWRcbiAgICAgICAgICAgICAgOiB7dHlwZTogJ0lkZW50aWZpZXInLCBuYW1lOiAnZGVmYXVsdCd9XG4gICAgICAgIGxldCB2YWx1ZSA9IHNwZWNpZmllci5sb2NhbFxuXG4gICAgICAgIC8vIFN3aXRjaCB0aGVtIGFyb3VuZCBpZiB3ZeKAmXJlIGV4cG9ydGluZy5cbiAgICAgICAgaWYgKHNwZWNpZmllci50eXBlID09PSAnRXhwb3J0U3BlY2lmaWVyJykge1xuICAgICAgICAgIHZhbHVlID0ga2V5XG4gICAgICAgICAga2V5ID0gc3BlY2lmaWVyLmxvY2FsXG4gICAgICAgIH1cblxuICAgICAgICAvLyBUbyBkbzogd2hhdCB0byBkbyBhYm91dCBsaXRlcmFscz9cbiAgICAgICAgLy8gYGNvbnN0IHsgYTogJ2InIH0gPSBjKClgIGRvZXMgbm90IHdvcms/XG4gICAgICAgIGFzc2VydCh2YWx1ZS50eXBlID09PSAnSWRlbnRpZmllcicpXG5cbiAgICAgICAgLyoqIEB0eXBlIHtBc3NpZ25tZW50UHJvcGVydHl9ICovXG4gICAgICAgIGNvbnN0IHByb3BlcnR5ID0ge1xuICAgICAgICAgIHR5cGU6ICdQcm9wZXJ0eScsXG4gICAgICAgICAga2luZDogJ2luaXQnLFxuICAgICAgICAgIHNob3J0aGFuZDpcbiAgICAgICAgICAgIGtleS50eXBlID09PSAnSWRlbnRpZmllcicgJiZcbiAgICAgICAgICAgIHZhbHVlLnR5cGUgPT09ICdJZGVudGlmaWVyJyAmJlxuICAgICAgICAgICAga2V5Lm5hbWUgPT09IHZhbHVlLm5hbWUsXG4gICAgICAgICAgbWV0aG9kOiBmYWxzZSxcbiAgICAgICAgICBjb21wdXRlZDogZmFsc2UsXG4gICAgICAgICAga2V5LFxuICAgICAgICAgIHZhbHVlXG4gICAgICAgIH1cbiAgICAgICAgY3JlYXRlKHNwZWNpZmllciwgcHJvcGVydHkpXG4gICAgICAgIHJldHVybiBwcm9wZXJ0eVxuICAgICAgfSlcbiAgICB9LFxuICAgIGluaXQ6IGltcG9ydE5hbWVzcGFjZVNwZWNpZmllclxuICAgICAgPyB7dHlwZTogJ0lkZW50aWZpZXInLCBuYW1lOiBpbXBvcnROYW1lc3BhY2VTcGVjaWZpZXIubG9jYWwubmFtZX1cbiAgICAgIDogaW5pdFxuICB9KVxuXG4gIHJldHVybiBkZWNsYXJhdGlvbnNcbn1cbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/.pnpm/@mdx-js+mdx@3.1.0_acorn@8.14.1/node_modules/@mdx-js/mdx/lib/util/estree-util-specifiers-to-declarations.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/.pnpm/@mdx-js+mdx@3.1.0_acorn@8.14.1/node_modules/@mdx-js/mdx/lib/util/estree-util-to-binary-addition.js":
/*!********************************************************************************************************************************!*\
  !*** ../node_modules/.pnpm/@mdx-js+mdx@3.1.0_acorn@8.14.1/node_modules/@mdx-js/mdx/lib/util/estree-util-to-binary-addition.js ***!
  \********************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   toBinaryAddition: () => (/* binding */ toBinaryAddition)\n/* harmony export */ });\n/* harmony import */ var devlop__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! devlop */ \"(rsc)/../node_modules/.pnpm/devlop@1.1.0/node_modules/devlop/lib/development.js\");\n/**\n * @import {Expression} from 'estree-jsx'\n */\n\n\n\n/**\n * @param {ReadonlyArray<Expression>} expressions\n *   Expressions.\n * @returns {Expression}\n *   Addition.\n */\nfunction toBinaryAddition(expressions) {\n  let index = -1\n  /** @type {Expression | undefined} */\n  let left\n\n  while (++index < expressions.length) {\n    const right = expressions[index]\n    left = left ? {type: 'BinaryExpression', left, operator: '+', right} : right\n  }\n\n  (0,devlop__WEBPACK_IMPORTED_MODULE_0__.ok)(left, 'expected non-empty `expressions` to be passed')\n  return left\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BtZHgtanMrbWR4QDMuMS4wX2Fjb3JuQDguMTQuMS9ub2RlX21vZHVsZXMvQG1keC1qcy9tZHgvbGliL3V0aWwvZXN0cmVlLXV0aWwtdG8tYmluYXJ5LWFkZGl0aW9uLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7QUFDQSxZQUFZLFlBQVk7QUFDeEI7O0FBRW1DOztBQUVuQztBQUNBLFdBQVcsMkJBQTJCO0FBQ3RDO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDTztBQUNQO0FBQ0EsYUFBYSx3QkFBd0I7QUFDckM7O0FBRUE7QUFDQTtBQUNBLG1CQUFtQixzREFBc0Q7QUFDekU7O0FBRUEsRUFBRSwwQ0FBTTtBQUNSO0FBQ0EiLCJzb3VyY2VzIjpbIi9Vc2Vycy9ldGhhbmtpbS9OZXN0b3IvbWVkZmV0Y2guanMvbm9kZV9tb2R1bGVzLy5wbnBtL0BtZHgtanMrbWR4QDMuMS4wX2Fjb3JuQDguMTQuMS9ub2RlX21vZHVsZXMvQG1keC1qcy9tZHgvbGliL3V0aWwvZXN0cmVlLXV0aWwtdG8tYmluYXJ5LWFkZGl0aW9uLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGltcG9ydCB7RXhwcmVzc2lvbn0gZnJvbSAnZXN0cmVlLWpzeCdcbiAqL1xuXG5pbXBvcnQge29rIGFzIGFzc2VydH0gZnJvbSAnZGV2bG9wJ1xuXG4vKipcbiAqIEBwYXJhbSB7UmVhZG9ubHlBcnJheTxFeHByZXNzaW9uPn0gZXhwcmVzc2lvbnNcbiAqICAgRXhwcmVzc2lvbnMuXG4gKiBAcmV0dXJucyB7RXhwcmVzc2lvbn1cbiAqICAgQWRkaXRpb24uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0b0JpbmFyeUFkZGl0aW9uKGV4cHJlc3Npb25zKSB7XG4gIGxldCBpbmRleCA9IC0xXG4gIC8qKiBAdHlwZSB7RXhwcmVzc2lvbiB8IHVuZGVmaW5lZH0gKi9cbiAgbGV0IGxlZnRcblxuICB3aGlsZSAoKytpbmRleCA8IGV4cHJlc3Npb25zLmxlbmd0aCkge1xuICAgIGNvbnN0IHJpZ2h0ID0gZXhwcmVzc2lvbnNbaW5kZXhdXG4gICAgbGVmdCA9IGxlZnQgPyB7dHlwZTogJ0JpbmFyeUV4cHJlc3Npb24nLCBsZWZ0LCBvcGVyYXRvcjogJysnLCByaWdodH0gOiByaWdodFxuICB9XG5cbiAgYXNzZXJ0KGxlZnQsICdleHBlY3RlZCBub24tZW1wdHkgYGV4cHJlc3Npb25zYCB0byBiZSBwYXNzZWQnKVxuICByZXR1cm4gbGVmdFxufVxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/.pnpm/@mdx-js+mdx@3.1.0_acorn@8.14.1/node_modules/@mdx-js/mdx/lib/util/estree-util-to-binary-addition.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/.pnpm/@mdx-js+mdx@3.1.0_acorn@8.14.1/node_modules/@mdx-js/mdx/lib/util/estree-util-to-id-or-member-expression.js":
/*!****************************************************************************************************************************************!*\
  !*** ../node_modules/.pnpm/@mdx-js+mdx@3.1.0_acorn@8.14.1/node_modules/@mdx-js/mdx/lib/util/estree-util-to-id-or-member-expression.js ***!
  \****************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   toIdOrMemberExpression: () => (/* binding */ toIdOrMemberExpression),\n/* harmony export */   toJsxIdOrMemberExpression: () => (/* binding */ toJsxIdOrMemberExpression)\n/* harmony export */ });\n/* harmony import */ var devlop__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! devlop */ \"(rsc)/../node_modules/.pnpm/devlop@1.1.0/node_modules/devlop/lib/development.js\");\n/* harmony import */ var estree_util_is_identifier_name__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! estree-util-is-identifier-name */ \"(rsc)/../node_modules/.pnpm/estree-util-is-identifier-name@3.0.0/node_modules/estree-util-is-identifier-name/lib/index.js\");\n/**\n * @import {\n      Identifier,\n      JSXIdentifier,\n      JSXMemberExpression,\n      Literal,\n      MemberExpression\n * } from 'estree-jsx'\n */\n\n\n\n\n/**\n * @param {ReadonlyArray<number | string>} ids\n *   Identifiers (example: `['list', 0]).\n * @returns {Identifier | MemberExpression}\n *   Identifier or member expression.\n */\nfunction toIdOrMemberExpression(ids) {\n  let index = -1\n  /** @type {Identifier | Literal | MemberExpression | undefined} */\n  let object\n\n  while (++index < ids.length) {\n    const name = ids[index]\n    /** @type {Identifier | Literal} */\n    const id =\n      typeof name === 'string' && (0,estree_util_is_identifier_name__WEBPACK_IMPORTED_MODULE_0__.name)(name)\n        ? {type: 'Identifier', name}\n        : {type: 'Literal', value: name}\n    object = object\n      ? {\n          type: 'MemberExpression',\n          object,\n          property: id,\n          computed: id.type === 'Literal',\n          optional: false\n        }\n      : id\n  }\n\n  (0,devlop__WEBPACK_IMPORTED_MODULE_1__.ok)(object, 'expected non-empty `ids` to be passed')\n  ;(0,devlop__WEBPACK_IMPORTED_MODULE_1__.ok)(object.type !== 'Literal', 'expected identifier as left-most value')\n  return object\n}\n\n/**\n * @param {ReadonlyArray<number | string>} ids\n *   Identifiers (example: `['list', 0]).\n * @returns {JSXIdentifier | JSXMemberExpression}\n *   Identifier or member expression.\n */\nfunction toJsxIdOrMemberExpression(ids) {\n  let index = -1\n  /** @type {JSXIdentifier | JSXMemberExpression | undefined} */\n  let object\n\n  while (++index < ids.length) {\n    const name = ids[index]\n    ;(0,devlop__WEBPACK_IMPORTED_MODULE_1__.ok)(\n      typeof name === 'string' && (0,estree_util_is_identifier_name__WEBPACK_IMPORTED_MODULE_0__.name)(name, {jsx: true}),\n      'expected valid jsx identifier, not `' + name + '`'\n    )\n\n    /** @type {JSXIdentifier} */\n    const id = {type: 'JSXIdentifier', name}\n    object = object ? {type: 'JSXMemberExpression', object, property: id} : id\n  }\n\n  (0,devlop__WEBPACK_IMPORTED_MODULE_1__.ok)(object, 'expected non-empty `ids` to be passed')\n  return object\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0BtZHgtanMrbWR4QDMuMS4wX2Fjb3JuQDguMTQuMS9ub2RlX21vZHVsZXMvQG1keC1qcy9tZHgvbGliL3V0aWwvZXN0cmVlLXV0aWwtdG8taWQtb3ItbWVtYmVyLWV4cHJlc3Npb24uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVtQztBQUNvQzs7QUFFdkU7QUFDQSxXQUFXLGdDQUFnQztBQUMzQztBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ087QUFDUDtBQUNBLGFBQWEscURBQXFEO0FBQ2xFOztBQUVBO0FBQ0E7QUFDQSxlQUFlLHNCQUFzQjtBQUNyQztBQUNBLGtDQUFrQyxvRUFBZ0I7QUFDbEQsV0FBVztBQUNYLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxFQUFFLDBDQUFNO0FBQ1IsRUFBRSwyQ0FBTTtBQUNSO0FBQ0E7O0FBRUE7QUFDQSxXQUFXLGdDQUFnQztBQUMzQztBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ087QUFDUDtBQUNBLGFBQWEsaURBQWlEO0FBQzlEOztBQUVBO0FBQ0E7QUFDQSxJQUFJLDJDQUFNO0FBQ1Ysa0NBQWtDLG9FQUFnQixRQUFRLFVBQVU7QUFDcEU7QUFDQTs7QUFFQSxlQUFlLGVBQWU7QUFDOUIsZ0JBQWdCO0FBQ2hCLHVCQUF1QixtREFBbUQ7QUFDMUU7O0FBRUEsRUFBRSwwQ0FBTTtBQUNSO0FBQ0EiLCJzb3VyY2VzIjpbIi9Vc2Vycy9ldGhhbmtpbS9OZXN0b3IvbWVkZmV0Y2guanMvbm9kZV9tb2R1bGVzLy5wbnBtL0BtZHgtanMrbWR4QDMuMS4wX2Fjb3JuQDguMTQuMS9ub2RlX21vZHVsZXMvQG1keC1qcy9tZHgvbGliL3V0aWwvZXN0cmVlLXV0aWwtdG8taWQtb3ItbWVtYmVyLWV4cHJlc3Npb24uanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAaW1wb3J0IHtcbiAgICAgIElkZW50aWZpZXIsXG4gICAgICBKU1hJZGVudGlmaWVyLFxuICAgICAgSlNYTWVtYmVyRXhwcmVzc2lvbixcbiAgICAgIExpdGVyYWwsXG4gICAgICBNZW1iZXJFeHByZXNzaW9uXG4gKiB9IGZyb20gJ2VzdHJlZS1qc3gnXG4gKi9cblxuaW1wb3J0IHtvayBhcyBhc3NlcnR9IGZyb20gJ2RldmxvcCdcbmltcG9ydCB7bmFtZSBhcyBpc0lkZW50aWZpZXJOYW1lfSBmcm9tICdlc3RyZWUtdXRpbC1pcy1pZGVudGlmaWVyLW5hbWUnXG5cbi8qKlxuICogQHBhcmFtIHtSZWFkb25seUFycmF5PG51bWJlciB8IHN0cmluZz59IGlkc1xuICogICBJZGVudGlmaWVycyAoZXhhbXBsZTogYFsnbGlzdCcsIDBdKS5cbiAqIEByZXR1cm5zIHtJZGVudGlmaWVyIHwgTWVtYmVyRXhwcmVzc2lvbn1cbiAqICAgSWRlbnRpZmllciBvciBtZW1iZXIgZXhwcmVzc2lvbi5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRvSWRPck1lbWJlckV4cHJlc3Npb24oaWRzKSB7XG4gIGxldCBpbmRleCA9IC0xXG4gIC8qKiBAdHlwZSB7SWRlbnRpZmllciB8IExpdGVyYWwgfCBNZW1iZXJFeHByZXNzaW9uIHwgdW5kZWZpbmVkfSAqL1xuICBsZXQgb2JqZWN0XG5cbiAgd2hpbGUgKCsraW5kZXggPCBpZHMubGVuZ3RoKSB7XG4gICAgY29uc3QgbmFtZSA9IGlkc1tpbmRleF1cbiAgICAvKiogQHR5cGUge0lkZW50aWZpZXIgfCBMaXRlcmFsfSAqL1xuICAgIGNvbnN0IGlkID1cbiAgICAgIHR5cGVvZiBuYW1lID09PSAnc3RyaW5nJyAmJiBpc0lkZW50aWZpZXJOYW1lKG5hbWUpXG4gICAgICAgID8ge3R5cGU6ICdJZGVudGlmaWVyJywgbmFtZX1cbiAgICAgICAgOiB7dHlwZTogJ0xpdGVyYWwnLCB2YWx1ZTogbmFtZX1cbiAgICBvYmplY3QgPSBvYmplY3RcbiAgICAgID8ge1xuICAgICAgICAgIHR5cGU6ICdNZW1iZXJFeHByZXNzaW9uJyxcbiAgICAgICAgICBvYmplY3QsXG4gICAgICAgICAgcHJvcGVydHk6IGlkLFxuICAgICAgICAgIGNvbXB1dGVkOiBpZC50eXBlID09PSAnTGl0ZXJhbCcsXG4gICAgICAgICAgb3B0aW9uYWw6IGZhbHNlXG4gICAgICAgIH1cbiAgICAgIDogaWRcbiAgfVxuXG4gIGFzc2VydChvYmplY3QsICdleHBlY3RlZCBub24tZW1wdHkgYGlkc2AgdG8gYmUgcGFzc2VkJylcbiAgYXNzZXJ0KG9iamVjdC50eXBlICE9PSAnTGl0ZXJhbCcsICdleHBlY3RlZCBpZGVudGlmaWVyIGFzIGxlZnQtbW9zdCB2YWx1ZScpXG4gIHJldHVybiBvYmplY3Rcbn1cblxuLyoqXG4gKiBAcGFyYW0ge1JlYWRvbmx5QXJyYXk8bnVtYmVyIHwgc3RyaW5nPn0gaWRzXG4gKiAgIElkZW50aWZpZXJzIChleGFtcGxlOiBgWydsaXN0JywgMF0pLlxuICogQHJldHVybnMge0pTWElkZW50aWZpZXIgfCBKU1hNZW1iZXJFeHByZXNzaW9ufVxuICogICBJZGVudGlmaWVyIG9yIG1lbWJlciBleHByZXNzaW9uLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdG9Kc3hJZE9yTWVtYmVyRXhwcmVzc2lvbihpZHMpIHtcbiAgbGV0IGluZGV4ID0gLTFcbiAgLyoqIEB0eXBlIHtKU1hJZGVudGlmaWVyIHwgSlNYTWVtYmVyRXhwcmVzc2lvbiB8IHVuZGVmaW5lZH0gKi9cbiAgbGV0IG9iamVjdFxuXG4gIHdoaWxlICgrK2luZGV4IDwgaWRzLmxlbmd0aCkge1xuICAgIGNvbnN0IG5hbWUgPSBpZHNbaW5kZXhdXG4gICAgYXNzZXJ0KFxuICAgICAgdHlwZW9mIG5hbWUgPT09ICdzdHJpbmcnICYmIGlzSWRlbnRpZmllck5hbWUobmFtZSwge2pzeDogdHJ1ZX0pLFxuICAgICAgJ2V4cGVjdGVkIHZhbGlkIGpzeCBpZGVudGlmaWVyLCBub3QgYCcgKyBuYW1lICsgJ2AnXG4gICAgKVxuXG4gICAgLyoqIEB0eXBlIHtKU1hJZGVudGlmaWVyfSAqL1xuICAgIGNvbnN0IGlkID0ge3R5cGU6ICdKU1hJZGVudGlmaWVyJywgbmFtZX1cbiAgICBvYmplY3QgPSBvYmplY3QgPyB7dHlwZTogJ0pTWE1lbWJlckV4cHJlc3Npb24nLCBvYmplY3QsIHByb3BlcnR5OiBpZH0gOiBpZFxuICB9XG5cbiAgYXNzZXJ0KG9iamVjdCwgJ2V4cGVjdGVkIG5vbi1lbXB0eSBgaWRzYCB0byBiZSBwYXNzZWQnKVxuICByZXR1cm4gb2JqZWN0XG59XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/.pnpm/@mdx-js+mdx@3.1.0_acorn@8.14.1/node_modules/@mdx-js/mdx/lib/util/estree-util-to-id-or-member-expression.js\n");

/***/ })

};
;