/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/acorn-jsx@5.3.2_acorn@8.14.1";
exports.ids = ["vendor-chunks/acorn-jsx@5.3.2_acorn@8.14.1"];
exports.modules = {

/***/ "(rsc)/../node_modules/.pnpm/acorn-jsx@5.3.2_acorn@8.14.1/node_modules/acorn-jsx/index.js":
/*!******************************************************************************************!*\
  !*** ../node_modules/.pnpm/acorn-jsx@5.3.2_acorn@8.14.1/node_modules/acorn-jsx/index.js ***!
  \******************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nconst XHTMLEntities = __webpack_require__(/*! ./xhtml */ \"(rsc)/../node_modules/.pnpm/acorn-jsx@5.3.2_acorn@8.14.1/node_modules/acorn-jsx/xhtml.js\");\n\nconst hexNumber = /^[\\da-fA-F]+$/;\nconst decimalNumber = /^\\d+$/;\n\n// The map to `acorn-jsx` tokens from `acorn` namespace objects.\nconst acornJsxMap = new WeakMap();\n\n// Get the original tokens for the given `acorn` namespace object.\nfunction getJsxTokens(acorn) {\n  acorn = acorn.Parser.acorn || acorn;\n  let acornJsx = acornJsxMap.get(acorn);\n  if (!acornJsx) {\n    const tt = acorn.tokTypes;\n    const TokContext = acorn.TokContext;\n    const TokenType = acorn.TokenType;\n    const tc_oTag = new TokContext('<tag', false);\n    const tc_cTag = new TokContext('</tag', false);\n    const tc_expr = new TokContext('<tag>...</tag>', true, true);\n    const tokContexts = {\n      tc_oTag: tc_oTag,\n      tc_cTag: tc_cTag,\n      tc_expr: tc_expr\n    };\n    const tokTypes = {\n      jsxName: new TokenType('jsxName'),\n      jsxText: new TokenType('jsxText', {beforeExpr: true}),\n      jsxTagStart: new TokenType('jsxTagStart', {startsExpr: true}),\n      jsxTagEnd: new TokenType('jsxTagEnd')\n    };\n\n    tokTypes.jsxTagStart.updateContext = function() {\n      this.context.push(tc_expr); // treat as beginning of JSX expression\n      this.context.push(tc_oTag); // start opening tag context\n      this.exprAllowed = false;\n    };\n    tokTypes.jsxTagEnd.updateContext = function(prevType) {\n      let out = this.context.pop();\n      if (out === tc_oTag && prevType === tt.slash || out === tc_cTag) {\n        this.context.pop();\n        this.exprAllowed = this.curContext() === tc_expr;\n      } else {\n        this.exprAllowed = true;\n      }\n    };\n\n    acornJsx = { tokContexts: tokContexts, tokTypes: tokTypes };\n    acornJsxMap.set(acorn, acornJsx);\n  }\n\n  return acornJsx;\n}\n\n// Transforms JSX element name to string.\n\nfunction getQualifiedJSXName(object) {\n  if (!object)\n    return object;\n\n  if (object.type === 'JSXIdentifier')\n    return object.name;\n\n  if (object.type === 'JSXNamespacedName')\n    return object.namespace.name + ':' + object.name.name;\n\n  if (object.type === 'JSXMemberExpression')\n    return getQualifiedJSXName(object.object) + '.' +\n    getQualifiedJSXName(object.property);\n}\n\nmodule.exports = function(options) {\n  options = options || {};\n  return function(Parser) {\n    return plugin({\n      allowNamespaces: options.allowNamespaces !== false,\n      allowNamespacedObjects: !!options.allowNamespacedObjects\n    }, Parser);\n  };\n};\n\n// This is `tokTypes` of the peer dep.\n// This can be different instances from the actual `tokTypes` this plugin uses.\nObject.defineProperty(module.exports, \"tokTypes\", ({\n  get: function get_tokTypes() {\n    return getJsxTokens(__webpack_require__(/*! acorn */ \"(rsc)/../node_modules/.pnpm/acorn@8.14.1/node_modules/acorn/dist/acorn.js\")).tokTypes;\n  },\n  configurable: true,\n  enumerable: true\n}));\n\nfunction plugin(options, Parser) {\n  const acorn = Parser.acorn || __webpack_require__(/*! acorn */ \"(rsc)/../node_modules/.pnpm/acorn@8.14.1/node_modules/acorn/dist/acorn.js\");\n  const acornJsx = getJsxTokens(acorn);\n  const tt = acorn.tokTypes;\n  const tok = acornJsx.tokTypes;\n  const tokContexts = acorn.tokContexts;\n  const tc_oTag = acornJsx.tokContexts.tc_oTag;\n  const tc_cTag = acornJsx.tokContexts.tc_cTag;\n  const tc_expr = acornJsx.tokContexts.tc_expr;\n  const isNewLine = acorn.isNewLine;\n  const isIdentifierStart = acorn.isIdentifierStart;\n  const isIdentifierChar = acorn.isIdentifierChar;\n\n  return class extends Parser {\n    // Expose actual `tokTypes` and `tokContexts` to other plugins.\n    static get acornJsx() {\n      return acornJsx;\n    }\n\n    // Reads inline JSX contents token.\n    jsx_readToken() {\n      let out = '', chunkStart = this.pos;\n      for (;;) {\n        if (this.pos >= this.input.length)\n          this.raise(this.start, 'Unterminated JSX contents');\n        let ch = this.input.charCodeAt(this.pos);\n\n        switch (ch) {\n        case 60: // '<'\n        case 123: // '{'\n          if (this.pos === this.start) {\n            if (ch === 60 && this.exprAllowed) {\n              ++this.pos;\n              return this.finishToken(tok.jsxTagStart);\n            }\n            return this.getTokenFromCode(ch);\n          }\n          out += this.input.slice(chunkStart, this.pos);\n          return this.finishToken(tok.jsxText, out);\n\n        case 38: // '&'\n          out += this.input.slice(chunkStart, this.pos);\n          out += this.jsx_readEntity();\n          chunkStart = this.pos;\n          break;\n\n        case 62: // '>'\n        case 125: // '}'\n          this.raise(\n            this.pos,\n            \"Unexpected token `\" + this.input[this.pos] + \"`. Did you mean `\" +\n              (ch === 62 ? \"&gt;\" : \"&rbrace;\") + \"` or \" + \"`{\\\"\" + this.input[this.pos] + \"\\\"}\" + \"`?\"\n          );\n\n        default:\n          if (isNewLine(ch)) {\n            out += this.input.slice(chunkStart, this.pos);\n            out += this.jsx_readNewLine(true);\n            chunkStart = this.pos;\n          } else {\n            ++this.pos;\n          }\n        }\n      }\n    }\n\n    jsx_readNewLine(normalizeCRLF) {\n      let ch = this.input.charCodeAt(this.pos);\n      let out;\n      ++this.pos;\n      if (ch === 13 && this.input.charCodeAt(this.pos) === 10) {\n        ++this.pos;\n        out = normalizeCRLF ? '\\n' : '\\r\\n';\n      } else {\n        out = String.fromCharCode(ch);\n      }\n      if (this.options.locations) {\n        ++this.curLine;\n        this.lineStart = this.pos;\n      }\n\n      return out;\n    }\n\n    jsx_readString(quote) {\n      let out = '', chunkStart = ++this.pos;\n      for (;;) {\n        if (this.pos >= this.input.length)\n          this.raise(this.start, 'Unterminated string constant');\n        let ch = this.input.charCodeAt(this.pos);\n        if (ch === quote) break;\n        if (ch === 38) { // '&'\n          out += this.input.slice(chunkStart, this.pos);\n          out += this.jsx_readEntity();\n          chunkStart = this.pos;\n        } else if (isNewLine(ch)) {\n          out += this.input.slice(chunkStart, this.pos);\n          out += this.jsx_readNewLine(false);\n          chunkStart = this.pos;\n        } else {\n          ++this.pos;\n        }\n      }\n      out += this.input.slice(chunkStart, this.pos++);\n      return this.finishToken(tt.string, out);\n    }\n\n    jsx_readEntity() {\n      let str = '', count = 0, entity;\n      let ch = this.input[this.pos];\n      if (ch !== '&')\n        this.raise(this.pos, 'Entity must start with an ampersand');\n      let startPos = ++this.pos;\n      while (this.pos < this.input.length && count++ < 10) {\n        ch = this.input[this.pos++];\n        if (ch === ';') {\n          if (str[0] === '#') {\n            if (str[1] === 'x') {\n              str = str.substr(2);\n              if (hexNumber.test(str))\n                entity = String.fromCharCode(parseInt(str, 16));\n            } else {\n              str = str.substr(1);\n              if (decimalNumber.test(str))\n                entity = String.fromCharCode(parseInt(str, 10));\n            }\n          } else {\n            entity = XHTMLEntities[str];\n          }\n          break;\n        }\n        str += ch;\n      }\n      if (!entity) {\n        this.pos = startPos;\n        return '&';\n      }\n      return entity;\n    }\n\n    // Read a JSX identifier (valid tag or attribute name).\n    //\n    // Optimized version since JSX identifiers can't contain\n    // escape characters and so can be read as single slice.\n    // Also assumes that first character was already checked\n    // by isIdentifierStart in readToken.\n\n    jsx_readWord() {\n      let ch, start = this.pos;\n      do {\n        ch = this.input.charCodeAt(++this.pos);\n      } while (isIdentifierChar(ch) || ch === 45); // '-'\n      return this.finishToken(tok.jsxName, this.input.slice(start, this.pos));\n    }\n\n    // Parse next token as JSX identifier\n\n    jsx_parseIdentifier() {\n      let node = this.startNode();\n      if (this.type === tok.jsxName)\n        node.name = this.value;\n      else if (this.type.keyword)\n        node.name = this.type.keyword;\n      else\n        this.unexpected();\n      this.next();\n      return this.finishNode(node, 'JSXIdentifier');\n    }\n\n    // Parse namespaced identifier.\n\n    jsx_parseNamespacedName() {\n      let startPos = this.start, startLoc = this.startLoc;\n      let name = this.jsx_parseIdentifier();\n      if (!options.allowNamespaces || !this.eat(tt.colon)) return name;\n      var node = this.startNodeAt(startPos, startLoc);\n      node.namespace = name;\n      node.name = this.jsx_parseIdentifier();\n      return this.finishNode(node, 'JSXNamespacedName');\n    }\n\n    // Parses element name in any form - namespaced, member\n    // or single identifier.\n\n    jsx_parseElementName() {\n      if (this.type === tok.jsxTagEnd) return '';\n      let startPos = this.start, startLoc = this.startLoc;\n      let node = this.jsx_parseNamespacedName();\n      if (this.type === tt.dot && node.type === 'JSXNamespacedName' && !options.allowNamespacedObjects) {\n        this.unexpected();\n      }\n      while (this.eat(tt.dot)) {\n        let newNode = this.startNodeAt(startPos, startLoc);\n        newNode.object = node;\n        newNode.property = this.jsx_parseIdentifier();\n        node = this.finishNode(newNode, 'JSXMemberExpression');\n      }\n      return node;\n    }\n\n    // Parses any type of JSX attribute value.\n\n    jsx_parseAttributeValue() {\n      switch (this.type) {\n      case tt.braceL:\n        let node = this.jsx_parseExpressionContainer();\n        if (node.expression.type === 'JSXEmptyExpression')\n          this.raise(node.start, 'JSX attributes must only be assigned a non-empty expression');\n        return node;\n\n      case tok.jsxTagStart:\n      case tt.string:\n        return this.parseExprAtom();\n\n      default:\n        this.raise(this.start, 'JSX value should be either an expression or a quoted JSX text');\n      }\n    }\n\n    // JSXEmptyExpression is unique type since it doesn't actually parse anything,\n    // and so it should start at the end of last read token (left brace) and finish\n    // at the beginning of the next one (right brace).\n\n    jsx_parseEmptyExpression() {\n      let node = this.startNodeAt(this.lastTokEnd, this.lastTokEndLoc);\n      return this.finishNodeAt(node, 'JSXEmptyExpression', this.start, this.startLoc);\n    }\n\n    // Parses JSX expression enclosed into curly brackets.\n\n    jsx_parseExpressionContainer() {\n      let node = this.startNode();\n      this.next();\n      node.expression = this.type === tt.braceR\n        ? this.jsx_parseEmptyExpression()\n        : this.parseExpression();\n      this.expect(tt.braceR);\n      return this.finishNode(node, 'JSXExpressionContainer');\n    }\n\n    // Parses following JSX attribute name-value pair.\n\n    jsx_parseAttribute() {\n      let node = this.startNode();\n      if (this.eat(tt.braceL)) {\n        this.expect(tt.ellipsis);\n        node.argument = this.parseMaybeAssign();\n        this.expect(tt.braceR);\n        return this.finishNode(node, 'JSXSpreadAttribute');\n      }\n      node.name = this.jsx_parseNamespacedName();\n      node.value = this.eat(tt.eq) ? this.jsx_parseAttributeValue() : null;\n      return this.finishNode(node, 'JSXAttribute');\n    }\n\n    // Parses JSX opening tag starting after '<'.\n\n    jsx_parseOpeningElementAt(startPos, startLoc) {\n      let node = this.startNodeAt(startPos, startLoc);\n      node.attributes = [];\n      let nodeName = this.jsx_parseElementName();\n      if (nodeName) node.name = nodeName;\n      while (this.type !== tt.slash && this.type !== tok.jsxTagEnd)\n        node.attributes.push(this.jsx_parseAttribute());\n      node.selfClosing = this.eat(tt.slash);\n      this.expect(tok.jsxTagEnd);\n      return this.finishNode(node, nodeName ? 'JSXOpeningElement' : 'JSXOpeningFragment');\n    }\n\n    // Parses JSX closing tag starting after '</'.\n\n    jsx_parseClosingElementAt(startPos, startLoc) {\n      let node = this.startNodeAt(startPos, startLoc);\n      let nodeName = this.jsx_parseElementName();\n      if (nodeName) node.name = nodeName;\n      this.expect(tok.jsxTagEnd);\n      return this.finishNode(node, nodeName ? 'JSXClosingElement' : 'JSXClosingFragment');\n    }\n\n    // Parses entire JSX element, including it's opening tag\n    // (starting after '<'), attributes, contents and closing tag.\n\n    jsx_parseElementAt(startPos, startLoc) {\n      let node = this.startNodeAt(startPos, startLoc);\n      let children = [];\n      let openingElement = this.jsx_parseOpeningElementAt(startPos, startLoc);\n      let closingElement = null;\n\n      if (!openingElement.selfClosing) {\n        contents: for (;;) {\n          switch (this.type) {\n          case tok.jsxTagStart:\n            startPos = this.start; startLoc = this.startLoc;\n            this.next();\n            if (this.eat(tt.slash)) {\n              closingElement = this.jsx_parseClosingElementAt(startPos, startLoc);\n              break contents;\n            }\n            children.push(this.jsx_parseElementAt(startPos, startLoc));\n            break;\n\n          case tok.jsxText:\n            children.push(this.parseExprAtom());\n            break;\n\n          case tt.braceL:\n            children.push(this.jsx_parseExpressionContainer());\n            break;\n\n          default:\n            this.unexpected();\n          }\n        }\n        if (getQualifiedJSXName(closingElement.name) !== getQualifiedJSXName(openingElement.name)) {\n          this.raise(\n            closingElement.start,\n            'Expected corresponding JSX closing tag for <' + getQualifiedJSXName(openingElement.name) + '>');\n        }\n      }\n      let fragmentOrElement = openingElement.name ? 'Element' : 'Fragment';\n\n      node['opening' + fragmentOrElement] = openingElement;\n      node['closing' + fragmentOrElement] = closingElement;\n      node.children = children;\n      if (this.type === tt.relational && this.value === \"<\") {\n        this.raise(this.start, \"Adjacent JSX elements must be wrapped in an enclosing tag\");\n      }\n      return this.finishNode(node, 'JSX' + fragmentOrElement);\n    }\n\n    // Parse JSX text\n\n    jsx_parseText() {\n      let node = this.parseLiteral(this.value);\n      node.type = \"JSXText\";\n      return node;\n    }\n\n    // Parses entire JSX element from current position.\n\n    jsx_parseElement() {\n      let startPos = this.start, startLoc = this.startLoc;\n      this.next();\n      return this.jsx_parseElementAt(startPos, startLoc);\n    }\n\n    parseExprAtom(refShortHandDefaultPos) {\n      if (this.type === tok.jsxText)\n        return this.jsx_parseText();\n      else if (this.type === tok.jsxTagStart)\n        return this.jsx_parseElement();\n      else\n        return super.parseExprAtom(refShortHandDefaultPos);\n    }\n\n    readToken(code) {\n      let context = this.curContext();\n\n      if (context === tc_expr) return this.jsx_readToken();\n\n      if (context === tc_oTag || context === tc_cTag) {\n        if (isIdentifierStart(code)) return this.jsx_readWord();\n\n        if (code == 62) {\n          ++this.pos;\n          return this.finishToken(tok.jsxTagEnd);\n        }\n\n        if ((code === 34 || code === 39) && context == tc_oTag)\n          return this.jsx_readString(code);\n      }\n\n      if (code === 60 && this.exprAllowed && this.input.charCodeAt(this.pos + 1) !== 33) {\n        ++this.pos;\n        return this.finishToken(tok.jsxTagStart);\n      }\n      return super.readToken(code);\n    }\n\n    updateContext(prevType) {\n      if (this.type == tt.braceL) {\n        var curContext = this.curContext();\n        if (curContext == tc_oTag) this.context.push(tokContexts.b_expr);\n        else if (curContext == tc_expr) this.context.push(tokContexts.b_tmpl);\n        else super.updateContext(prevType);\n        this.exprAllowed = true;\n      } else if (this.type === tt.slash && prevType === tok.jsxTagStart) {\n        this.context.length -= 2; // do not consider JSX expr -> JSX open tag -> ... anymore\n        this.context.push(tc_cTag); // reconsider as closing tag context\n        this.exprAllowed = false;\n      } else {\n        return super.updateContext(prevType);\n      }\n    }\n  };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2Fjb3JuLWpzeEA1LjMuMl9hY29ybkA4LjE0LjEvbm9kZV9tb2R1bGVzL2Fjb3JuLWpzeC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixzQkFBc0IsbUJBQU8sQ0FBQyx5R0FBUzs7QUFFdkM7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlDQUF5QyxpQkFBaUI7QUFDMUQsaURBQWlELGlCQUFpQjtBQUNsRTtBQUNBOztBQUVBO0FBQ0Esa0NBQWtDO0FBQ2xDLGtDQUFrQztBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7O0FBRUEsaUJBQWlCO0FBQ2pCO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBO0FBQ0E7QUFDQSxtREFBa0Q7QUFDbEQ7QUFDQSx3QkFBd0IsbUJBQU8sQ0FBQyx3RkFBTztBQUN2QyxHQUFHO0FBQ0g7QUFDQTtBQUNBLENBQUMsRUFBQzs7QUFFRjtBQUNBLGdDQUFnQyxtQkFBTyxDQUFDLHdGQUFPO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsdUJBQXVCO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsdUJBQXVCO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQyxhQUFhLGtCQUFrQixpQ0FBaUM7QUFDaEc7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUI7QUFDekI7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRLDJDQUEyQztBQUNuRDtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0EsbUNBQW1DO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSLGtDQUFrQztBQUNsQyxvQ0FBb0M7QUFDcEM7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL2V0aGFua2ltL05lc3Rvci9tZWRmZXRjaC5qcy9ub2RlX21vZHVsZXMvLnBucG0vYWNvcm4tanN4QDUuMy4yX2Fjb3JuQDguMTQuMS9ub2RlX21vZHVsZXMvYWNvcm4tanN4L2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgWEhUTUxFbnRpdGllcyA9IHJlcXVpcmUoJy4veGh0bWwnKTtcblxuY29uc3QgaGV4TnVtYmVyID0gL15bXFxkYS1mQS1GXSskLztcbmNvbnN0IGRlY2ltYWxOdW1iZXIgPSAvXlxcZCskLztcblxuLy8gVGhlIG1hcCB0byBgYWNvcm4tanN4YCB0b2tlbnMgZnJvbSBgYWNvcm5gIG5hbWVzcGFjZSBvYmplY3RzLlxuY29uc3QgYWNvcm5Kc3hNYXAgPSBuZXcgV2Vha01hcCgpO1xuXG4vLyBHZXQgdGhlIG9yaWdpbmFsIHRva2VucyBmb3IgdGhlIGdpdmVuIGBhY29ybmAgbmFtZXNwYWNlIG9iamVjdC5cbmZ1bmN0aW9uIGdldEpzeFRva2VucyhhY29ybikge1xuICBhY29ybiA9IGFjb3JuLlBhcnNlci5hY29ybiB8fCBhY29ybjtcbiAgbGV0IGFjb3JuSnN4ID0gYWNvcm5Kc3hNYXAuZ2V0KGFjb3JuKTtcbiAgaWYgKCFhY29ybkpzeCkge1xuICAgIGNvbnN0IHR0ID0gYWNvcm4udG9rVHlwZXM7XG4gICAgY29uc3QgVG9rQ29udGV4dCA9IGFjb3JuLlRva0NvbnRleHQ7XG4gICAgY29uc3QgVG9rZW5UeXBlID0gYWNvcm4uVG9rZW5UeXBlO1xuICAgIGNvbnN0IHRjX29UYWcgPSBuZXcgVG9rQ29udGV4dCgnPHRhZycsIGZhbHNlKTtcbiAgICBjb25zdCB0Y19jVGFnID0gbmV3IFRva0NvbnRleHQoJzwvdGFnJywgZmFsc2UpO1xuICAgIGNvbnN0IHRjX2V4cHIgPSBuZXcgVG9rQ29udGV4dCgnPHRhZz4uLi48L3RhZz4nLCB0cnVlLCB0cnVlKTtcbiAgICBjb25zdCB0b2tDb250ZXh0cyA9IHtcbiAgICAgIHRjX29UYWc6IHRjX29UYWcsXG4gICAgICB0Y19jVGFnOiB0Y19jVGFnLFxuICAgICAgdGNfZXhwcjogdGNfZXhwclxuICAgIH07XG4gICAgY29uc3QgdG9rVHlwZXMgPSB7XG4gICAgICBqc3hOYW1lOiBuZXcgVG9rZW5UeXBlKCdqc3hOYW1lJyksXG4gICAgICBqc3hUZXh0OiBuZXcgVG9rZW5UeXBlKCdqc3hUZXh0Jywge2JlZm9yZUV4cHI6IHRydWV9KSxcbiAgICAgIGpzeFRhZ1N0YXJ0OiBuZXcgVG9rZW5UeXBlKCdqc3hUYWdTdGFydCcsIHtzdGFydHNFeHByOiB0cnVlfSksXG4gICAgICBqc3hUYWdFbmQ6IG5ldyBUb2tlblR5cGUoJ2pzeFRhZ0VuZCcpXG4gICAgfTtcblxuICAgIHRva1R5cGVzLmpzeFRhZ1N0YXJ0LnVwZGF0ZUNvbnRleHQgPSBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuY29udGV4dC5wdXNoKHRjX2V4cHIpOyAvLyB0cmVhdCBhcyBiZWdpbm5pbmcgb2YgSlNYIGV4cHJlc3Npb25cbiAgICAgIHRoaXMuY29udGV4dC5wdXNoKHRjX29UYWcpOyAvLyBzdGFydCBvcGVuaW5nIHRhZyBjb250ZXh0XG4gICAgICB0aGlzLmV4cHJBbGxvd2VkID0gZmFsc2U7XG4gICAgfTtcbiAgICB0b2tUeXBlcy5qc3hUYWdFbmQudXBkYXRlQ29udGV4dCA9IGZ1bmN0aW9uKHByZXZUeXBlKSB7XG4gICAgICBsZXQgb3V0ID0gdGhpcy5jb250ZXh0LnBvcCgpO1xuICAgICAgaWYgKG91dCA9PT0gdGNfb1RhZyAmJiBwcmV2VHlwZSA9PT0gdHQuc2xhc2ggfHwgb3V0ID09PSB0Y19jVGFnKSB7XG4gICAgICAgIHRoaXMuY29udGV4dC5wb3AoKTtcbiAgICAgICAgdGhpcy5leHByQWxsb3dlZCA9IHRoaXMuY3VyQ29udGV4dCgpID09PSB0Y19leHByO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5leHByQWxsb3dlZCA9IHRydWU7XG4gICAgICB9XG4gICAgfTtcblxuICAgIGFjb3JuSnN4ID0geyB0b2tDb250ZXh0czogdG9rQ29udGV4dHMsIHRva1R5cGVzOiB0b2tUeXBlcyB9O1xuICAgIGFjb3JuSnN4TWFwLnNldChhY29ybiwgYWNvcm5Kc3gpO1xuICB9XG5cbiAgcmV0dXJuIGFjb3JuSnN4O1xufVxuXG4vLyBUcmFuc2Zvcm1zIEpTWCBlbGVtZW50IG5hbWUgdG8gc3RyaW5nLlxuXG5mdW5jdGlvbiBnZXRRdWFsaWZpZWRKU1hOYW1lKG9iamVjdCkge1xuICBpZiAoIW9iamVjdClcbiAgICByZXR1cm4gb2JqZWN0O1xuXG4gIGlmIChvYmplY3QudHlwZSA9PT0gJ0pTWElkZW50aWZpZXInKVxuICAgIHJldHVybiBvYmplY3QubmFtZTtcblxuICBpZiAob2JqZWN0LnR5cGUgPT09ICdKU1hOYW1lc3BhY2VkTmFtZScpXG4gICAgcmV0dXJuIG9iamVjdC5uYW1lc3BhY2UubmFtZSArICc6JyArIG9iamVjdC5uYW1lLm5hbWU7XG5cbiAgaWYgKG9iamVjdC50eXBlID09PSAnSlNYTWVtYmVyRXhwcmVzc2lvbicpXG4gICAgcmV0dXJuIGdldFF1YWxpZmllZEpTWE5hbWUob2JqZWN0Lm9iamVjdCkgKyAnLicgK1xuICAgIGdldFF1YWxpZmllZEpTWE5hbWUob2JqZWN0LnByb3BlcnR5KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICByZXR1cm4gZnVuY3Rpb24oUGFyc2VyKSB7XG4gICAgcmV0dXJuIHBsdWdpbih7XG4gICAgICBhbGxvd05hbWVzcGFjZXM6IG9wdGlvbnMuYWxsb3dOYW1lc3BhY2VzICE9PSBmYWxzZSxcbiAgICAgIGFsbG93TmFtZXNwYWNlZE9iamVjdHM6ICEhb3B0aW9ucy5hbGxvd05hbWVzcGFjZWRPYmplY3RzXG4gICAgfSwgUGFyc2VyKTtcbiAgfTtcbn07XG5cbi8vIFRoaXMgaXMgYHRva1R5cGVzYCBvZiB0aGUgcGVlciBkZXAuXG4vLyBUaGlzIGNhbiBiZSBkaWZmZXJlbnQgaW5zdGFuY2VzIGZyb20gdGhlIGFjdHVhbCBgdG9rVHlwZXNgIHRoaXMgcGx1Z2luIHVzZXMuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLmV4cG9ydHMsIFwidG9rVHlwZXNcIiwge1xuICBnZXQ6IGZ1bmN0aW9uIGdldF90b2tUeXBlcygpIHtcbiAgICByZXR1cm4gZ2V0SnN4VG9rZW5zKHJlcXVpcmUoXCJhY29yblwiKSkudG9rVHlwZXM7XG4gIH0sXG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgZW51bWVyYWJsZTogdHJ1ZVxufSk7XG5cbmZ1bmN0aW9uIHBsdWdpbihvcHRpb25zLCBQYXJzZXIpIHtcbiAgY29uc3QgYWNvcm4gPSBQYXJzZXIuYWNvcm4gfHwgcmVxdWlyZShcImFjb3JuXCIpO1xuICBjb25zdCBhY29ybkpzeCA9IGdldEpzeFRva2VucyhhY29ybik7XG4gIGNvbnN0IHR0ID0gYWNvcm4udG9rVHlwZXM7XG4gIGNvbnN0IHRvayA9IGFjb3JuSnN4LnRva1R5cGVzO1xuICBjb25zdCB0b2tDb250ZXh0cyA9IGFjb3JuLnRva0NvbnRleHRzO1xuICBjb25zdCB0Y19vVGFnID0gYWNvcm5Kc3gudG9rQ29udGV4dHMudGNfb1RhZztcbiAgY29uc3QgdGNfY1RhZyA9IGFjb3JuSnN4LnRva0NvbnRleHRzLnRjX2NUYWc7XG4gIGNvbnN0IHRjX2V4cHIgPSBhY29ybkpzeC50b2tDb250ZXh0cy50Y19leHByO1xuICBjb25zdCBpc05ld0xpbmUgPSBhY29ybi5pc05ld0xpbmU7XG4gIGNvbnN0IGlzSWRlbnRpZmllclN0YXJ0ID0gYWNvcm4uaXNJZGVudGlmaWVyU3RhcnQ7XG4gIGNvbnN0IGlzSWRlbnRpZmllckNoYXIgPSBhY29ybi5pc0lkZW50aWZpZXJDaGFyO1xuXG4gIHJldHVybiBjbGFzcyBleHRlbmRzIFBhcnNlciB7XG4gICAgLy8gRXhwb3NlIGFjdHVhbCBgdG9rVHlwZXNgIGFuZCBgdG9rQ29udGV4dHNgIHRvIG90aGVyIHBsdWdpbnMuXG4gICAgc3RhdGljIGdldCBhY29ybkpzeCgpIHtcbiAgICAgIHJldHVybiBhY29ybkpzeDtcbiAgICB9XG5cbiAgICAvLyBSZWFkcyBpbmxpbmUgSlNYIGNvbnRlbnRzIHRva2VuLlxuICAgIGpzeF9yZWFkVG9rZW4oKSB7XG4gICAgICBsZXQgb3V0ID0gJycsIGNodW5rU3RhcnQgPSB0aGlzLnBvcztcbiAgICAgIGZvciAoOzspIHtcbiAgICAgICAgaWYgKHRoaXMucG9zID49IHRoaXMuaW5wdXQubGVuZ3RoKVxuICAgICAgICAgIHRoaXMucmFpc2UodGhpcy5zdGFydCwgJ1VudGVybWluYXRlZCBKU1ggY29udGVudHMnKTtcbiAgICAgICAgbGV0IGNoID0gdGhpcy5pbnB1dC5jaGFyQ29kZUF0KHRoaXMucG9zKTtcblxuICAgICAgICBzd2l0Y2ggKGNoKSB7XG4gICAgICAgIGNhc2UgNjA6IC8vICc8J1xuICAgICAgICBjYXNlIDEyMzogLy8gJ3snXG4gICAgICAgICAgaWYgKHRoaXMucG9zID09PSB0aGlzLnN0YXJ0KSB7XG4gICAgICAgICAgICBpZiAoY2ggPT09IDYwICYmIHRoaXMuZXhwckFsbG93ZWQpIHtcbiAgICAgICAgICAgICAgKyt0aGlzLnBvcztcbiAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZmluaXNoVG9rZW4odG9rLmpzeFRhZ1N0YXJ0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzLmdldFRva2VuRnJvbUNvZGUoY2gpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBvdXQgKz0gdGhpcy5pbnB1dC5zbGljZShjaHVua1N0YXJ0LCB0aGlzLnBvcyk7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuZmluaXNoVG9rZW4odG9rLmpzeFRleHQsIG91dCk7XG5cbiAgICAgICAgY2FzZSAzODogLy8gJyYnXG4gICAgICAgICAgb3V0ICs9IHRoaXMuaW5wdXQuc2xpY2UoY2h1bmtTdGFydCwgdGhpcy5wb3MpO1xuICAgICAgICAgIG91dCArPSB0aGlzLmpzeF9yZWFkRW50aXR5KCk7XG4gICAgICAgICAgY2h1bmtTdGFydCA9IHRoaXMucG9zO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgNjI6IC8vICc+J1xuICAgICAgICBjYXNlIDEyNTogLy8gJ30nXG4gICAgICAgICAgdGhpcy5yYWlzZShcbiAgICAgICAgICAgIHRoaXMucG9zLFxuICAgICAgICAgICAgXCJVbmV4cGVjdGVkIHRva2VuIGBcIiArIHRoaXMuaW5wdXRbdGhpcy5wb3NdICsgXCJgLiBEaWQgeW91IG1lYW4gYFwiICtcbiAgICAgICAgICAgICAgKGNoID09PSA2MiA/IFwiJmd0O1wiIDogXCImcmJyYWNlO1wiKSArIFwiYCBvciBcIiArIFwiYHtcXFwiXCIgKyB0aGlzLmlucHV0W3RoaXMucG9zXSArIFwiXFxcIn1cIiArIFwiYD9cIlxuICAgICAgICAgICk7XG5cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICBpZiAoaXNOZXdMaW5lKGNoKSkge1xuICAgICAgICAgICAgb3V0ICs9IHRoaXMuaW5wdXQuc2xpY2UoY2h1bmtTdGFydCwgdGhpcy5wb3MpO1xuICAgICAgICAgICAgb3V0ICs9IHRoaXMuanN4X3JlYWROZXdMaW5lKHRydWUpO1xuICAgICAgICAgICAgY2h1bmtTdGFydCA9IHRoaXMucG9zO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICArK3RoaXMucG9zO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGpzeF9yZWFkTmV3TGluZShub3JtYWxpemVDUkxGKSB7XG4gICAgICBsZXQgY2ggPSB0aGlzLmlucHV0LmNoYXJDb2RlQXQodGhpcy5wb3MpO1xuICAgICAgbGV0IG91dDtcbiAgICAgICsrdGhpcy5wb3M7XG4gICAgICBpZiAoY2ggPT09IDEzICYmIHRoaXMuaW5wdXQuY2hhckNvZGVBdCh0aGlzLnBvcykgPT09IDEwKSB7XG4gICAgICAgICsrdGhpcy5wb3M7XG4gICAgICAgIG91dCA9IG5vcm1hbGl6ZUNSTEYgPyAnXFxuJyA6ICdcXHJcXG4nO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb3V0ID0gU3RyaW5nLmZyb21DaGFyQ29kZShjaCk7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5vcHRpb25zLmxvY2F0aW9ucykge1xuICAgICAgICArK3RoaXMuY3VyTGluZTtcbiAgICAgICAgdGhpcy5saW5lU3RhcnQgPSB0aGlzLnBvcztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG91dDtcbiAgICB9XG5cbiAgICBqc3hfcmVhZFN0cmluZyhxdW90ZSkge1xuICAgICAgbGV0IG91dCA9ICcnLCBjaHVua1N0YXJ0ID0gKyt0aGlzLnBvcztcbiAgICAgIGZvciAoOzspIHtcbiAgICAgICAgaWYgKHRoaXMucG9zID49IHRoaXMuaW5wdXQubGVuZ3RoKVxuICAgICAgICAgIHRoaXMucmFpc2UodGhpcy5zdGFydCwgJ1VudGVybWluYXRlZCBzdHJpbmcgY29uc3RhbnQnKTtcbiAgICAgICAgbGV0IGNoID0gdGhpcy5pbnB1dC5jaGFyQ29kZUF0KHRoaXMucG9zKTtcbiAgICAgICAgaWYgKGNoID09PSBxdW90ZSkgYnJlYWs7XG4gICAgICAgIGlmIChjaCA9PT0gMzgpIHsgLy8gJyYnXG4gICAgICAgICAgb3V0ICs9IHRoaXMuaW5wdXQuc2xpY2UoY2h1bmtTdGFydCwgdGhpcy5wb3MpO1xuICAgICAgICAgIG91dCArPSB0aGlzLmpzeF9yZWFkRW50aXR5KCk7XG4gICAgICAgICAgY2h1bmtTdGFydCA9IHRoaXMucG9zO1xuICAgICAgICB9IGVsc2UgaWYgKGlzTmV3TGluZShjaCkpIHtcbiAgICAgICAgICBvdXQgKz0gdGhpcy5pbnB1dC5zbGljZShjaHVua1N0YXJ0LCB0aGlzLnBvcyk7XG4gICAgICAgICAgb3V0ICs9IHRoaXMuanN4X3JlYWROZXdMaW5lKGZhbHNlKTtcbiAgICAgICAgICBjaHVua1N0YXJ0ID0gdGhpcy5wb3M7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgKyt0aGlzLnBvcztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgb3V0ICs9IHRoaXMuaW5wdXQuc2xpY2UoY2h1bmtTdGFydCwgdGhpcy5wb3MrKyk7XG4gICAgICByZXR1cm4gdGhpcy5maW5pc2hUb2tlbih0dC5zdHJpbmcsIG91dCk7XG4gICAgfVxuXG4gICAganN4X3JlYWRFbnRpdHkoKSB7XG4gICAgICBsZXQgc3RyID0gJycsIGNvdW50ID0gMCwgZW50aXR5O1xuICAgICAgbGV0IGNoID0gdGhpcy5pbnB1dFt0aGlzLnBvc107XG4gICAgICBpZiAoY2ggIT09ICcmJylcbiAgICAgICAgdGhpcy5yYWlzZSh0aGlzLnBvcywgJ0VudGl0eSBtdXN0IHN0YXJ0IHdpdGggYW4gYW1wZXJzYW5kJyk7XG4gICAgICBsZXQgc3RhcnRQb3MgPSArK3RoaXMucG9zO1xuICAgICAgd2hpbGUgKHRoaXMucG9zIDwgdGhpcy5pbnB1dC5sZW5ndGggJiYgY291bnQrKyA8IDEwKSB7XG4gICAgICAgIGNoID0gdGhpcy5pbnB1dFt0aGlzLnBvcysrXTtcbiAgICAgICAgaWYgKGNoID09PSAnOycpIHtcbiAgICAgICAgICBpZiAoc3RyWzBdID09PSAnIycpIHtcbiAgICAgICAgICAgIGlmIChzdHJbMV0gPT09ICd4Jykge1xuICAgICAgICAgICAgICBzdHIgPSBzdHIuc3Vic3RyKDIpO1xuICAgICAgICAgICAgICBpZiAoaGV4TnVtYmVyLnRlc3Qoc3RyKSlcbiAgICAgICAgICAgICAgICBlbnRpdHkgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKHBhcnNlSW50KHN0ciwgMTYpKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHN0ciA9IHN0ci5zdWJzdHIoMSk7XG4gICAgICAgICAgICAgIGlmIChkZWNpbWFsTnVtYmVyLnRlc3Qoc3RyKSlcbiAgICAgICAgICAgICAgICBlbnRpdHkgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKHBhcnNlSW50KHN0ciwgMTApKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZW50aXR5ID0gWEhUTUxFbnRpdGllc1tzdHJdO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBzdHIgKz0gY2g7XG4gICAgICB9XG4gICAgICBpZiAoIWVudGl0eSkge1xuICAgICAgICB0aGlzLnBvcyA9IHN0YXJ0UG9zO1xuICAgICAgICByZXR1cm4gJyYnO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGVudGl0eTtcbiAgICB9XG5cbiAgICAvLyBSZWFkIGEgSlNYIGlkZW50aWZpZXIgKHZhbGlkIHRhZyBvciBhdHRyaWJ1dGUgbmFtZSkuXG4gICAgLy9cbiAgICAvLyBPcHRpbWl6ZWQgdmVyc2lvbiBzaW5jZSBKU1ggaWRlbnRpZmllcnMgY2FuJ3QgY29udGFpblxuICAgIC8vIGVzY2FwZSBjaGFyYWN0ZXJzIGFuZCBzbyBjYW4gYmUgcmVhZCBhcyBzaW5nbGUgc2xpY2UuXG4gICAgLy8gQWxzbyBhc3N1bWVzIHRoYXQgZmlyc3QgY2hhcmFjdGVyIHdhcyBhbHJlYWR5IGNoZWNrZWRcbiAgICAvLyBieSBpc0lkZW50aWZpZXJTdGFydCBpbiByZWFkVG9rZW4uXG5cbiAgICBqc3hfcmVhZFdvcmQoKSB7XG4gICAgICBsZXQgY2gsIHN0YXJ0ID0gdGhpcy5wb3M7XG4gICAgICBkbyB7XG4gICAgICAgIGNoID0gdGhpcy5pbnB1dC5jaGFyQ29kZUF0KCsrdGhpcy5wb3MpO1xuICAgICAgfSB3aGlsZSAoaXNJZGVudGlmaWVyQ2hhcihjaCkgfHwgY2ggPT09IDQ1KTsgLy8gJy0nXG4gICAgICByZXR1cm4gdGhpcy5maW5pc2hUb2tlbih0b2suanN4TmFtZSwgdGhpcy5pbnB1dC5zbGljZShzdGFydCwgdGhpcy5wb3MpKTtcbiAgICB9XG5cbiAgICAvLyBQYXJzZSBuZXh0IHRva2VuIGFzIEpTWCBpZGVudGlmaWVyXG5cbiAgICBqc3hfcGFyc2VJZGVudGlmaWVyKCkge1xuICAgICAgbGV0IG5vZGUgPSB0aGlzLnN0YXJ0Tm9kZSgpO1xuICAgICAgaWYgKHRoaXMudHlwZSA9PT0gdG9rLmpzeE5hbWUpXG4gICAgICAgIG5vZGUubmFtZSA9IHRoaXMudmFsdWU7XG4gICAgICBlbHNlIGlmICh0aGlzLnR5cGUua2V5d29yZClcbiAgICAgICAgbm9kZS5uYW1lID0gdGhpcy50eXBlLmtleXdvcmQ7XG4gICAgICBlbHNlXG4gICAgICAgIHRoaXMudW5leHBlY3RlZCgpO1xuICAgICAgdGhpcy5uZXh0KCk7XG4gICAgICByZXR1cm4gdGhpcy5maW5pc2hOb2RlKG5vZGUsICdKU1hJZGVudGlmaWVyJyk7XG4gICAgfVxuXG4gICAgLy8gUGFyc2UgbmFtZXNwYWNlZCBpZGVudGlmaWVyLlxuXG4gICAganN4X3BhcnNlTmFtZXNwYWNlZE5hbWUoKSB7XG4gICAgICBsZXQgc3RhcnRQb3MgPSB0aGlzLnN0YXJ0LCBzdGFydExvYyA9IHRoaXMuc3RhcnRMb2M7XG4gICAgICBsZXQgbmFtZSA9IHRoaXMuanN4X3BhcnNlSWRlbnRpZmllcigpO1xuICAgICAgaWYgKCFvcHRpb25zLmFsbG93TmFtZXNwYWNlcyB8fCAhdGhpcy5lYXQodHQuY29sb24pKSByZXR1cm4gbmFtZTtcbiAgICAgIHZhciBub2RlID0gdGhpcy5zdGFydE5vZGVBdChzdGFydFBvcywgc3RhcnRMb2MpO1xuICAgICAgbm9kZS5uYW1lc3BhY2UgPSBuYW1lO1xuICAgICAgbm9kZS5uYW1lID0gdGhpcy5qc3hfcGFyc2VJZGVudGlmaWVyKCk7XG4gICAgICByZXR1cm4gdGhpcy5maW5pc2hOb2RlKG5vZGUsICdKU1hOYW1lc3BhY2VkTmFtZScpO1xuICAgIH1cblxuICAgIC8vIFBhcnNlcyBlbGVtZW50IG5hbWUgaW4gYW55IGZvcm0gLSBuYW1lc3BhY2VkLCBtZW1iZXJcbiAgICAvLyBvciBzaW5nbGUgaWRlbnRpZmllci5cblxuICAgIGpzeF9wYXJzZUVsZW1lbnROYW1lKCkge1xuICAgICAgaWYgKHRoaXMudHlwZSA9PT0gdG9rLmpzeFRhZ0VuZCkgcmV0dXJuICcnO1xuICAgICAgbGV0IHN0YXJ0UG9zID0gdGhpcy5zdGFydCwgc3RhcnRMb2MgPSB0aGlzLnN0YXJ0TG9jO1xuICAgICAgbGV0IG5vZGUgPSB0aGlzLmpzeF9wYXJzZU5hbWVzcGFjZWROYW1lKCk7XG4gICAgICBpZiAodGhpcy50eXBlID09PSB0dC5kb3QgJiYgbm9kZS50eXBlID09PSAnSlNYTmFtZXNwYWNlZE5hbWUnICYmICFvcHRpb25zLmFsbG93TmFtZXNwYWNlZE9iamVjdHMpIHtcbiAgICAgICAgdGhpcy51bmV4cGVjdGVkKCk7XG4gICAgICB9XG4gICAgICB3aGlsZSAodGhpcy5lYXQodHQuZG90KSkge1xuICAgICAgICBsZXQgbmV3Tm9kZSA9IHRoaXMuc3RhcnROb2RlQXQoc3RhcnRQb3MsIHN0YXJ0TG9jKTtcbiAgICAgICAgbmV3Tm9kZS5vYmplY3QgPSBub2RlO1xuICAgICAgICBuZXdOb2RlLnByb3BlcnR5ID0gdGhpcy5qc3hfcGFyc2VJZGVudGlmaWVyKCk7XG4gICAgICAgIG5vZGUgPSB0aGlzLmZpbmlzaE5vZGUobmV3Tm9kZSwgJ0pTWE1lbWJlckV4cHJlc3Npb24nKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBub2RlO1xuICAgIH1cblxuICAgIC8vIFBhcnNlcyBhbnkgdHlwZSBvZiBKU1ggYXR0cmlidXRlIHZhbHVlLlxuXG4gICAganN4X3BhcnNlQXR0cmlidXRlVmFsdWUoKSB7XG4gICAgICBzd2l0Y2ggKHRoaXMudHlwZSkge1xuICAgICAgY2FzZSB0dC5icmFjZUw6XG4gICAgICAgIGxldCBub2RlID0gdGhpcy5qc3hfcGFyc2VFeHByZXNzaW9uQ29udGFpbmVyKCk7XG4gICAgICAgIGlmIChub2RlLmV4cHJlc3Npb24udHlwZSA9PT0gJ0pTWEVtcHR5RXhwcmVzc2lvbicpXG4gICAgICAgICAgdGhpcy5yYWlzZShub2RlLnN0YXJ0LCAnSlNYIGF0dHJpYnV0ZXMgbXVzdCBvbmx5IGJlIGFzc2lnbmVkIGEgbm9uLWVtcHR5IGV4cHJlc3Npb24nKTtcbiAgICAgICAgcmV0dXJuIG5vZGU7XG5cbiAgICAgIGNhc2UgdG9rLmpzeFRhZ1N0YXJ0OlxuICAgICAgY2FzZSB0dC5zdHJpbmc6XG4gICAgICAgIHJldHVybiB0aGlzLnBhcnNlRXhwckF0b20oKTtcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGhpcy5yYWlzZSh0aGlzLnN0YXJ0LCAnSlNYIHZhbHVlIHNob3VsZCBiZSBlaXRoZXIgYW4gZXhwcmVzc2lvbiBvciBhIHF1b3RlZCBKU1ggdGV4dCcpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEpTWEVtcHR5RXhwcmVzc2lvbiBpcyB1bmlxdWUgdHlwZSBzaW5jZSBpdCBkb2Vzbid0IGFjdHVhbGx5IHBhcnNlIGFueXRoaW5nLFxuICAgIC8vIGFuZCBzbyBpdCBzaG91bGQgc3RhcnQgYXQgdGhlIGVuZCBvZiBsYXN0IHJlYWQgdG9rZW4gKGxlZnQgYnJhY2UpIGFuZCBmaW5pc2hcbiAgICAvLyBhdCB0aGUgYmVnaW5uaW5nIG9mIHRoZSBuZXh0IG9uZSAocmlnaHQgYnJhY2UpLlxuXG4gICAganN4X3BhcnNlRW1wdHlFeHByZXNzaW9uKCkge1xuICAgICAgbGV0IG5vZGUgPSB0aGlzLnN0YXJ0Tm9kZUF0KHRoaXMubGFzdFRva0VuZCwgdGhpcy5sYXN0VG9rRW5kTG9jKTtcbiAgICAgIHJldHVybiB0aGlzLmZpbmlzaE5vZGVBdChub2RlLCAnSlNYRW1wdHlFeHByZXNzaW9uJywgdGhpcy5zdGFydCwgdGhpcy5zdGFydExvYyk7XG4gICAgfVxuXG4gICAgLy8gUGFyc2VzIEpTWCBleHByZXNzaW9uIGVuY2xvc2VkIGludG8gY3VybHkgYnJhY2tldHMuXG5cbiAgICBqc3hfcGFyc2VFeHByZXNzaW9uQ29udGFpbmVyKCkge1xuICAgICAgbGV0IG5vZGUgPSB0aGlzLnN0YXJ0Tm9kZSgpO1xuICAgICAgdGhpcy5uZXh0KCk7XG4gICAgICBub2RlLmV4cHJlc3Npb24gPSB0aGlzLnR5cGUgPT09IHR0LmJyYWNlUlxuICAgICAgICA/IHRoaXMuanN4X3BhcnNlRW1wdHlFeHByZXNzaW9uKClcbiAgICAgICAgOiB0aGlzLnBhcnNlRXhwcmVzc2lvbigpO1xuICAgICAgdGhpcy5leHBlY3QodHQuYnJhY2VSKTtcbiAgICAgIHJldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSwgJ0pTWEV4cHJlc3Npb25Db250YWluZXInKTtcbiAgICB9XG5cbiAgICAvLyBQYXJzZXMgZm9sbG93aW5nIEpTWCBhdHRyaWJ1dGUgbmFtZS12YWx1ZSBwYWlyLlxuXG4gICAganN4X3BhcnNlQXR0cmlidXRlKCkge1xuICAgICAgbGV0IG5vZGUgPSB0aGlzLnN0YXJ0Tm9kZSgpO1xuICAgICAgaWYgKHRoaXMuZWF0KHR0LmJyYWNlTCkpIHtcbiAgICAgICAgdGhpcy5leHBlY3QodHQuZWxsaXBzaXMpO1xuICAgICAgICBub2RlLmFyZ3VtZW50ID0gdGhpcy5wYXJzZU1heWJlQXNzaWduKCk7XG4gICAgICAgIHRoaXMuZXhwZWN0KHR0LmJyYWNlUik7XG4gICAgICAgIHJldHVybiB0aGlzLmZpbmlzaE5vZGUobm9kZSwgJ0pTWFNwcmVhZEF0dHJpYnV0ZScpO1xuICAgICAgfVxuICAgICAgbm9kZS5uYW1lID0gdGhpcy5qc3hfcGFyc2VOYW1lc3BhY2VkTmFtZSgpO1xuICAgICAgbm9kZS52YWx1ZSA9IHRoaXMuZWF0KHR0LmVxKSA/IHRoaXMuanN4X3BhcnNlQXR0cmlidXRlVmFsdWUoKSA6IG51bGw7XG4gICAgICByZXR1cm4gdGhpcy5maW5pc2hOb2RlKG5vZGUsICdKU1hBdHRyaWJ1dGUnKTtcbiAgICB9XG5cbiAgICAvLyBQYXJzZXMgSlNYIG9wZW5pbmcgdGFnIHN0YXJ0aW5nIGFmdGVyICc8Jy5cblxuICAgIGpzeF9wYXJzZU9wZW5pbmdFbGVtZW50QXQoc3RhcnRQb3MsIHN0YXJ0TG9jKSB7XG4gICAgICBsZXQgbm9kZSA9IHRoaXMuc3RhcnROb2RlQXQoc3RhcnRQb3MsIHN0YXJ0TG9jKTtcbiAgICAgIG5vZGUuYXR0cmlidXRlcyA9IFtdO1xuICAgICAgbGV0IG5vZGVOYW1lID0gdGhpcy5qc3hfcGFyc2VFbGVtZW50TmFtZSgpO1xuICAgICAgaWYgKG5vZGVOYW1lKSBub2RlLm5hbWUgPSBub2RlTmFtZTtcbiAgICAgIHdoaWxlICh0aGlzLnR5cGUgIT09IHR0LnNsYXNoICYmIHRoaXMudHlwZSAhPT0gdG9rLmpzeFRhZ0VuZClcbiAgICAgICAgbm9kZS5hdHRyaWJ1dGVzLnB1c2godGhpcy5qc3hfcGFyc2VBdHRyaWJ1dGUoKSk7XG4gICAgICBub2RlLnNlbGZDbG9zaW5nID0gdGhpcy5lYXQodHQuc2xhc2gpO1xuICAgICAgdGhpcy5leHBlY3QodG9rLmpzeFRhZ0VuZCk7XG4gICAgICByZXR1cm4gdGhpcy5maW5pc2hOb2RlKG5vZGUsIG5vZGVOYW1lID8gJ0pTWE9wZW5pbmdFbGVtZW50JyA6ICdKU1hPcGVuaW5nRnJhZ21lbnQnKTtcbiAgICB9XG5cbiAgICAvLyBQYXJzZXMgSlNYIGNsb3NpbmcgdGFnIHN0YXJ0aW5nIGFmdGVyICc8LycuXG5cbiAgICBqc3hfcGFyc2VDbG9zaW5nRWxlbWVudEF0KHN0YXJ0UG9zLCBzdGFydExvYykge1xuICAgICAgbGV0IG5vZGUgPSB0aGlzLnN0YXJ0Tm9kZUF0KHN0YXJ0UG9zLCBzdGFydExvYyk7XG4gICAgICBsZXQgbm9kZU5hbWUgPSB0aGlzLmpzeF9wYXJzZUVsZW1lbnROYW1lKCk7XG4gICAgICBpZiAobm9kZU5hbWUpIG5vZGUubmFtZSA9IG5vZGVOYW1lO1xuICAgICAgdGhpcy5leHBlY3QodG9rLmpzeFRhZ0VuZCk7XG4gICAgICByZXR1cm4gdGhpcy5maW5pc2hOb2RlKG5vZGUsIG5vZGVOYW1lID8gJ0pTWENsb3NpbmdFbGVtZW50JyA6ICdKU1hDbG9zaW5nRnJhZ21lbnQnKTtcbiAgICB9XG5cbiAgICAvLyBQYXJzZXMgZW50aXJlIEpTWCBlbGVtZW50LCBpbmNsdWRpbmcgaXQncyBvcGVuaW5nIHRhZ1xuICAgIC8vIChzdGFydGluZyBhZnRlciAnPCcpLCBhdHRyaWJ1dGVzLCBjb250ZW50cyBhbmQgY2xvc2luZyB0YWcuXG5cbiAgICBqc3hfcGFyc2VFbGVtZW50QXQoc3RhcnRQb3MsIHN0YXJ0TG9jKSB7XG4gICAgICBsZXQgbm9kZSA9IHRoaXMuc3RhcnROb2RlQXQoc3RhcnRQb3MsIHN0YXJ0TG9jKTtcbiAgICAgIGxldCBjaGlsZHJlbiA9IFtdO1xuICAgICAgbGV0IG9wZW5pbmdFbGVtZW50ID0gdGhpcy5qc3hfcGFyc2VPcGVuaW5nRWxlbWVudEF0KHN0YXJ0UG9zLCBzdGFydExvYyk7XG4gICAgICBsZXQgY2xvc2luZ0VsZW1lbnQgPSBudWxsO1xuXG4gICAgICBpZiAoIW9wZW5pbmdFbGVtZW50LnNlbGZDbG9zaW5nKSB7XG4gICAgICAgIGNvbnRlbnRzOiBmb3IgKDs7KSB7XG4gICAgICAgICAgc3dpdGNoICh0aGlzLnR5cGUpIHtcbiAgICAgICAgICBjYXNlIHRvay5qc3hUYWdTdGFydDpcbiAgICAgICAgICAgIHN0YXJ0UG9zID0gdGhpcy5zdGFydDsgc3RhcnRMb2MgPSB0aGlzLnN0YXJ0TG9jO1xuICAgICAgICAgICAgdGhpcy5uZXh0KCk7XG4gICAgICAgICAgICBpZiAodGhpcy5lYXQodHQuc2xhc2gpKSB7XG4gICAgICAgICAgICAgIGNsb3NpbmdFbGVtZW50ID0gdGhpcy5qc3hfcGFyc2VDbG9zaW5nRWxlbWVudEF0KHN0YXJ0UG9zLCBzdGFydExvYyk7XG4gICAgICAgICAgICAgIGJyZWFrIGNvbnRlbnRzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2hpbGRyZW4ucHVzaCh0aGlzLmpzeF9wYXJzZUVsZW1lbnRBdChzdGFydFBvcywgc3RhcnRMb2MpKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSB0b2suanN4VGV4dDpcbiAgICAgICAgICAgIGNoaWxkcmVuLnB1c2godGhpcy5wYXJzZUV4cHJBdG9tKCkpO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlIHR0LmJyYWNlTDpcbiAgICAgICAgICAgIGNoaWxkcmVuLnB1c2godGhpcy5qc3hfcGFyc2VFeHByZXNzaW9uQ29udGFpbmVyKCkpO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgdGhpcy51bmV4cGVjdGVkKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChnZXRRdWFsaWZpZWRKU1hOYW1lKGNsb3NpbmdFbGVtZW50Lm5hbWUpICE9PSBnZXRRdWFsaWZpZWRKU1hOYW1lKG9wZW5pbmdFbGVtZW50Lm5hbWUpKSB7XG4gICAgICAgICAgdGhpcy5yYWlzZShcbiAgICAgICAgICAgIGNsb3NpbmdFbGVtZW50LnN0YXJ0LFxuICAgICAgICAgICAgJ0V4cGVjdGVkIGNvcnJlc3BvbmRpbmcgSlNYIGNsb3NpbmcgdGFnIGZvciA8JyArIGdldFF1YWxpZmllZEpTWE5hbWUob3BlbmluZ0VsZW1lbnQubmFtZSkgKyAnPicpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBsZXQgZnJhZ21lbnRPckVsZW1lbnQgPSBvcGVuaW5nRWxlbWVudC5uYW1lID8gJ0VsZW1lbnQnIDogJ0ZyYWdtZW50JztcblxuICAgICAgbm9kZVsnb3BlbmluZycgKyBmcmFnbWVudE9yRWxlbWVudF0gPSBvcGVuaW5nRWxlbWVudDtcbiAgICAgIG5vZGVbJ2Nsb3NpbmcnICsgZnJhZ21lbnRPckVsZW1lbnRdID0gY2xvc2luZ0VsZW1lbnQ7XG4gICAgICBub2RlLmNoaWxkcmVuID0gY2hpbGRyZW47XG4gICAgICBpZiAodGhpcy50eXBlID09PSB0dC5yZWxhdGlvbmFsICYmIHRoaXMudmFsdWUgPT09IFwiPFwiKSB7XG4gICAgICAgIHRoaXMucmFpc2UodGhpcy5zdGFydCwgXCJBZGphY2VudCBKU1ggZWxlbWVudHMgbXVzdCBiZSB3cmFwcGVkIGluIGFuIGVuY2xvc2luZyB0YWdcIik7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy5maW5pc2hOb2RlKG5vZGUsICdKU1gnICsgZnJhZ21lbnRPckVsZW1lbnQpO1xuICAgIH1cblxuICAgIC8vIFBhcnNlIEpTWCB0ZXh0XG5cbiAgICBqc3hfcGFyc2VUZXh0KCkge1xuICAgICAgbGV0IG5vZGUgPSB0aGlzLnBhcnNlTGl0ZXJhbCh0aGlzLnZhbHVlKTtcbiAgICAgIG5vZGUudHlwZSA9IFwiSlNYVGV4dFwiO1xuICAgICAgcmV0dXJuIG5vZGU7XG4gICAgfVxuXG4gICAgLy8gUGFyc2VzIGVudGlyZSBKU1ggZWxlbWVudCBmcm9tIGN1cnJlbnQgcG9zaXRpb24uXG5cbiAgICBqc3hfcGFyc2VFbGVtZW50KCkge1xuICAgICAgbGV0IHN0YXJ0UG9zID0gdGhpcy5zdGFydCwgc3RhcnRMb2MgPSB0aGlzLnN0YXJ0TG9jO1xuICAgICAgdGhpcy5uZXh0KCk7XG4gICAgICByZXR1cm4gdGhpcy5qc3hfcGFyc2VFbGVtZW50QXQoc3RhcnRQb3MsIHN0YXJ0TG9jKTtcbiAgICB9XG5cbiAgICBwYXJzZUV4cHJBdG9tKHJlZlNob3J0SGFuZERlZmF1bHRQb3MpIHtcbiAgICAgIGlmICh0aGlzLnR5cGUgPT09IHRvay5qc3hUZXh0KVxuICAgICAgICByZXR1cm4gdGhpcy5qc3hfcGFyc2VUZXh0KCk7XG4gICAgICBlbHNlIGlmICh0aGlzLnR5cGUgPT09IHRvay5qc3hUYWdTdGFydClcbiAgICAgICAgcmV0dXJuIHRoaXMuanN4X3BhcnNlRWxlbWVudCgpO1xuICAgICAgZWxzZVxuICAgICAgICByZXR1cm4gc3VwZXIucGFyc2VFeHByQXRvbShyZWZTaG9ydEhhbmREZWZhdWx0UG9zKTtcbiAgICB9XG5cbiAgICByZWFkVG9rZW4oY29kZSkge1xuICAgICAgbGV0IGNvbnRleHQgPSB0aGlzLmN1ckNvbnRleHQoKTtcblxuICAgICAgaWYgKGNvbnRleHQgPT09IHRjX2V4cHIpIHJldHVybiB0aGlzLmpzeF9yZWFkVG9rZW4oKTtcblxuICAgICAgaWYgKGNvbnRleHQgPT09IHRjX29UYWcgfHwgY29udGV4dCA9PT0gdGNfY1RhZykge1xuICAgICAgICBpZiAoaXNJZGVudGlmaWVyU3RhcnQoY29kZSkpIHJldHVybiB0aGlzLmpzeF9yZWFkV29yZCgpO1xuXG4gICAgICAgIGlmIChjb2RlID09IDYyKSB7XG4gICAgICAgICAgKyt0aGlzLnBvcztcbiAgICAgICAgICByZXR1cm4gdGhpcy5maW5pc2hUb2tlbih0b2suanN4VGFnRW5kKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICgoY29kZSA9PT0gMzQgfHwgY29kZSA9PT0gMzkpICYmIGNvbnRleHQgPT0gdGNfb1RhZylcbiAgICAgICAgICByZXR1cm4gdGhpcy5qc3hfcmVhZFN0cmluZyhjb2RlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGNvZGUgPT09IDYwICYmIHRoaXMuZXhwckFsbG93ZWQgJiYgdGhpcy5pbnB1dC5jaGFyQ29kZUF0KHRoaXMucG9zICsgMSkgIT09IDMzKSB7XG4gICAgICAgICsrdGhpcy5wb3M7XG4gICAgICAgIHJldHVybiB0aGlzLmZpbmlzaFRva2VuKHRvay5qc3hUYWdTdGFydCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gc3VwZXIucmVhZFRva2VuKGNvZGUpO1xuICAgIH1cblxuICAgIHVwZGF0ZUNvbnRleHQocHJldlR5cGUpIHtcbiAgICAgIGlmICh0aGlzLnR5cGUgPT0gdHQuYnJhY2VMKSB7XG4gICAgICAgIHZhciBjdXJDb250ZXh0ID0gdGhpcy5jdXJDb250ZXh0KCk7XG4gICAgICAgIGlmIChjdXJDb250ZXh0ID09IHRjX29UYWcpIHRoaXMuY29udGV4dC5wdXNoKHRva0NvbnRleHRzLmJfZXhwcik7XG4gICAgICAgIGVsc2UgaWYgKGN1ckNvbnRleHQgPT0gdGNfZXhwcikgdGhpcy5jb250ZXh0LnB1c2godG9rQ29udGV4dHMuYl90bXBsKTtcbiAgICAgICAgZWxzZSBzdXBlci51cGRhdGVDb250ZXh0KHByZXZUeXBlKTtcbiAgICAgICAgdGhpcy5leHByQWxsb3dlZCA9IHRydWU7XG4gICAgICB9IGVsc2UgaWYgKHRoaXMudHlwZSA9PT0gdHQuc2xhc2ggJiYgcHJldlR5cGUgPT09IHRvay5qc3hUYWdTdGFydCkge1xuICAgICAgICB0aGlzLmNvbnRleHQubGVuZ3RoIC09IDI7IC8vIGRvIG5vdCBjb25zaWRlciBKU1ggZXhwciAtPiBKU1ggb3BlbiB0YWcgLT4gLi4uIGFueW1vcmVcbiAgICAgICAgdGhpcy5jb250ZXh0LnB1c2godGNfY1RhZyk7IC8vIHJlY29uc2lkZXIgYXMgY2xvc2luZyB0YWcgY29udGV4dFxuICAgICAgICB0aGlzLmV4cHJBbGxvd2VkID0gZmFsc2U7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gc3VwZXIudXBkYXRlQ29udGV4dChwcmV2VHlwZSk7XG4gICAgICB9XG4gICAgfVxuICB9O1xufVxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/.pnpm/acorn-jsx@5.3.2_acorn@8.14.1/node_modules/acorn-jsx/index.js\n");

/***/ }),

/***/ "(rsc)/../node_modules/.pnpm/acorn-jsx@5.3.2_acorn@8.14.1/node_modules/acorn-jsx/xhtml.js":
/*!******************************************************************************************!*\
  !*** ../node_modules/.pnpm/acorn-jsx@5.3.2_acorn@8.14.1/node_modules/acorn-jsx/xhtml.js ***!
  \******************************************************************************************/
/***/ ((module) => {

eval("module.exports = {\n  quot: '\\u0022',\n  amp: '&',\n  apos: '\\u0027',\n  lt: '<',\n  gt: '>',\n  nbsp: '\\u00A0',\n  iexcl: '\\u00A1',\n  cent: '\\u00A2',\n  pound: '\\u00A3',\n  curren: '\\u00A4',\n  yen: '\\u00A5',\n  brvbar: '\\u00A6',\n  sect: '\\u00A7',\n  uml: '\\u00A8',\n  copy: '\\u00A9',\n  ordf: '\\u00AA',\n  laquo: '\\u00AB',\n  not: '\\u00AC',\n  shy: '\\u00AD',\n  reg: '\\u00AE',\n  macr: '\\u00AF',\n  deg: '\\u00B0',\n  plusmn: '\\u00B1',\n  sup2: '\\u00B2',\n  sup3: '\\u00B3',\n  acute: '\\u00B4',\n  micro: '\\u00B5',\n  para: '\\u00B6',\n  middot: '\\u00B7',\n  cedil: '\\u00B8',\n  sup1: '\\u00B9',\n  ordm: '\\u00BA',\n  raquo: '\\u00BB',\n  frac14: '\\u00BC',\n  frac12: '\\u00BD',\n  frac34: '\\u00BE',\n  iquest: '\\u00BF',\n  Agrave: '\\u00C0',\n  Aacute: '\\u00C1',\n  Acirc: '\\u00C2',\n  Atilde: '\\u00C3',\n  Auml: '\\u00C4',\n  Aring: '\\u00C5',\n  AElig: '\\u00C6',\n  Ccedil: '\\u00C7',\n  Egrave: '\\u00C8',\n  Eacute: '\\u00C9',\n  Ecirc: '\\u00CA',\n  Euml: '\\u00CB',\n  Igrave: '\\u00CC',\n  Iacute: '\\u00CD',\n  Icirc: '\\u00CE',\n  Iuml: '\\u00CF',\n  ETH: '\\u00D0',\n  Ntilde: '\\u00D1',\n  Ograve: '\\u00D2',\n  Oacute: '\\u00D3',\n  Ocirc: '\\u00D4',\n  Otilde: '\\u00D5',\n  Ouml: '\\u00D6',\n  times: '\\u00D7',\n  Oslash: '\\u00D8',\n  Ugrave: '\\u00D9',\n  Uacute: '\\u00DA',\n  Ucirc: '\\u00DB',\n  Uuml: '\\u00DC',\n  Yacute: '\\u00DD',\n  THORN: '\\u00DE',\n  szlig: '\\u00DF',\n  agrave: '\\u00E0',\n  aacute: '\\u00E1',\n  acirc: '\\u00E2',\n  atilde: '\\u00E3',\n  auml: '\\u00E4',\n  aring: '\\u00E5',\n  aelig: '\\u00E6',\n  ccedil: '\\u00E7',\n  egrave: '\\u00E8',\n  eacute: '\\u00E9',\n  ecirc: '\\u00EA',\n  euml: '\\u00EB',\n  igrave: '\\u00EC',\n  iacute: '\\u00ED',\n  icirc: '\\u00EE',\n  iuml: '\\u00EF',\n  eth: '\\u00F0',\n  ntilde: '\\u00F1',\n  ograve: '\\u00F2',\n  oacute: '\\u00F3',\n  ocirc: '\\u00F4',\n  otilde: '\\u00F5',\n  ouml: '\\u00F6',\n  divide: '\\u00F7',\n  oslash: '\\u00F8',\n  ugrave: '\\u00F9',\n  uacute: '\\u00FA',\n  ucirc: '\\u00FB',\n  uuml: '\\u00FC',\n  yacute: '\\u00FD',\n  thorn: '\\u00FE',\n  yuml: '\\u00FF',\n  OElig: '\\u0152',\n  oelig: '\\u0153',\n  Scaron: '\\u0160',\n  scaron: '\\u0161',\n  Yuml: '\\u0178',\n  fnof: '\\u0192',\n  circ: '\\u02C6',\n  tilde: '\\u02DC',\n  Alpha: '\\u0391',\n  Beta: '\\u0392',\n  Gamma: '\\u0393',\n  Delta: '\\u0394',\n  Epsilon: '\\u0395',\n  Zeta: '\\u0396',\n  Eta: '\\u0397',\n  Theta: '\\u0398',\n  Iota: '\\u0399',\n  Kappa: '\\u039A',\n  Lambda: '\\u039B',\n  Mu: '\\u039C',\n  Nu: '\\u039D',\n  Xi: '\\u039E',\n  Omicron: '\\u039F',\n  Pi: '\\u03A0',\n  Rho: '\\u03A1',\n  Sigma: '\\u03A3',\n  Tau: '\\u03A4',\n  Upsilon: '\\u03A5',\n  Phi: '\\u03A6',\n  Chi: '\\u03A7',\n  Psi: '\\u03A8',\n  Omega: '\\u03A9',\n  alpha: '\\u03B1',\n  beta: '\\u03B2',\n  gamma: '\\u03B3',\n  delta: '\\u03B4',\n  epsilon: '\\u03B5',\n  zeta: '\\u03B6',\n  eta: '\\u03B7',\n  theta: '\\u03B8',\n  iota: '\\u03B9',\n  kappa: '\\u03BA',\n  lambda: '\\u03BB',\n  mu: '\\u03BC',\n  nu: '\\u03BD',\n  xi: '\\u03BE',\n  omicron: '\\u03BF',\n  pi: '\\u03C0',\n  rho: '\\u03C1',\n  sigmaf: '\\u03C2',\n  sigma: '\\u03C3',\n  tau: '\\u03C4',\n  upsilon: '\\u03C5',\n  phi: '\\u03C6',\n  chi: '\\u03C7',\n  psi: '\\u03C8',\n  omega: '\\u03C9',\n  thetasym: '\\u03D1',\n  upsih: '\\u03D2',\n  piv: '\\u03D6',\n  ensp: '\\u2002',\n  emsp: '\\u2003',\n  thinsp: '\\u2009',\n  zwnj: '\\u200C',\n  zwj: '\\u200D',\n  lrm: '\\u200E',\n  rlm: '\\u200F',\n  ndash: '\\u2013',\n  mdash: '\\u2014',\n  lsquo: '\\u2018',\n  rsquo: '\\u2019',\n  sbquo: '\\u201A',\n  ldquo: '\\u201C',\n  rdquo: '\\u201D',\n  bdquo: '\\u201E',\n  dagger: '\\u2020',\n  Dagger: '\\u2021',\n  bull: '\\u2022',\n  hellip: '\\u2026',\n  permil: '\\u2030',\n  prime: '\\u2032',\n  Prime: '\\u2033',\n  lsaquo: '\\u2039',\n  rsaquo: '\\u203A',\n  oline: '\\u203E',\n  frasl: '\\u2044',\n  euro: '\\u20AC',\n  image: '\\u2111',\n  weierp: '\\u2118',\n  real: '\\u211C',\n  trade: '\\u2122',\n  alefsym: '\\u2135',\n  larr: '\\u2190',\n  uarr: '\\u2191',\n  rarr: '\\u2192',\n  darr: '\\u2193',\n  harr: '\\u2194',\n  crarr: '\\u21B5',\n  lArr: '\\u21D0',\n  uArr: '\\u21D1',\n  rArr: '\\u21D2',\n  dArr: '\\u21D3',\n  hArr: '\\u21D4',\n  forall: '\\u2200',\n  part: '\\u2202',\n  exist: '\\u2203',\n  empty: '\\u2205',\n  nabla: '\\u2207',\n  isin: '\\u2208',\n  notin: '\\u2209',\n  ni: '\\u220B',\n  prod: '\\u220F',\n  sum: '\\u2211',\n  minus: '\\u2212',\n  lowast: '\\u2217',\n  radic: '\\u221A',\n  prop: '\\u221D',\n  infin: '\\u221E',\n  ang: '\\u2220',\n  and: '\\u2227',\n  or: '\\u2228',\n  cap: '\\u2229',\n  cup: '\\u222A',\n  'int': '\\u222B',\n  there4: '\\u2234',\n  sim: '\\u223C',\n  cong: '\\u2245',\n  asymp: '\\u2248',\n  ne: '\\u2260',\n  equiv: '\\u2261',\n  le: '\\u2264',\n  ge: '\\u2265',\n  sub: '\\u2282',\n  sup: '\\u2283',\n  nsub: '\\u2284',\n  sube: '\\u2286',\n  supe: '\\u2287',\n  oplus: '\\u2295',\n  otimes: '\\u2297',\n  perp: '\\u22A5',\n  sdot: '\\u22C5',\n  lceil: '\\u2308',\n  rceil: '\\u2309',\n  lfloor: '\\u230A',\n  rfloor: '\\u230B',\n  lang: '\\u2329',\n  rang: '\\u232A',\n  loz: '\\u25CA',\n  spades: '\\u2660',\n  clubs: '\\u2663',\n  hearts: '\\u2665',\n  diams: '\\u2666'\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/.pnpm/acorn-jsx@5.3.2_acorn@8.14.1/node_modules/acorn-jsx/xhtml.js\n");

/***/ })

};
;