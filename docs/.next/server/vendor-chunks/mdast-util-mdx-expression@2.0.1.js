"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/mdast-util-mdx-expression@2.0.1";
exports.ids = ["vendor-chunks/mdast-util-mdx-expression@2.0.1"];
exports.modules = {

/***/ "(rsc)/../node_modules/.pnpm/mdast-util-mdx-expression@2.0.1/node_modules/mdast-util-mdx-expression/lib/index.js":
/*!*****************************************************************************************************************!*\
  !*** ../node_modules/.pnpm/mdast-util-mdx-expression@2.0.1/node_modules/mdast-util-mdx-expression/lib/index.js ***!
  \*****************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   mdxExpressionFromMarkdown: () => (/* binding */ mdxExpressionFromMarkdown),\n/* harmony export */   mdxExpressionToMarkdown: () => (/* binding */ mdxExpressionToMarkdown)\n/* harmony export */ });\n/* harmony import */ var devlop__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! devlop */ \"(rsc)/../node_modules/.pnpm/devlop@1.1.0/node_modules/devlop/lib/development.js\");\n/**\n * @import {CompileContext, Extension as FromMarkdownExtension, Handle as FromMarkdownHandle} from 'mdast-util-from-markdown'\n * @import {MdxFlowExpression, MdxTextExpression} from 'mdast-util-mdx-expression'\n * @import {Handle as ToMarkdownHandle, Options as ToMarkdownExtension, State} from 'mdast-util-to-markdown'\n * @import {Parents} from 'mdast'\n */\n\n\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable MDX expressions\n * in markdown.\n *\n * When using the micromark syntax extension with `addResult`, nodes will have\n * a `data.estree` field set to an ESTree `Program` node.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown` to enable MDX expressions.\n */\nfunction mdxExpressionFromMarkdown() {\n  return {\n    enter: {\n      mdxFlowExpression: enterMdxFlowExpression,\n      mdxTextExpression: enterMdxTextExpression\n    },\n    exit: {\n      mdxFlowExpression: exitMdxExpression,\n      mdxFlowExpressionChunk: exitMdxExpressionData,\n      mdxTextExpression: exitMdxExpression,\n      mdxTextExpressionChunk: exitMdxExpressionData\n    }\n  }\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable MDX expressions\n * in markdown.\n *\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable MDX expressions.\n */\nfunction mdxExpressionToMarkdown() {\n  return {\n    handlers: {\n      mdxFlowExpression: handleMdxExpression,\n      mdxTextExpression: handleMdxExpression\n    },\n    unsafe: [\n      {character: '{', inConstruct: ['phrasing']},\n      {atBreak: true, character: '{'}\n    ]\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterMdxFlowExpression(token) {\n  this.enter({type: 'mdxFlowExpression', value: ''}, token)\n  this.buffer()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterMdxTextExpression(token) {\n  this.enter({type: 'mdxTextExpression', value: ''}, token)\n  this.buffer()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitMdxExpression(token) {\n  const value = this.resume()\n  const estree = token.estree\n  const node = this.stack[this.stack.length - 1]\n  ;(0,devlop__WEBPACK_IMPORTED_MODULE_0__.ok)(node.type === 'mdxFlowExpression' || node.type === 'mdxTextExpression')\n  this.exit(token)\n  node.value = value\n\n  if (estree) {\n    node.data = {estree}\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitMdxExpressionData(token) {\n  this.config.enter.data.call(this, token)\n  this.config.exit.data.call(this, token)\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {MdxFlowExpression | MdxTextExpression} node\n *   Node.\n * @param {Parents | undefined} parent\n *   Parent, if any.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {string}\n *   Serialized markdown.\n */\nfunction handleMdxExpression(node, parent, state) {\n  const value = node.value || ''\n  const result = state.indentLines(value, function (line, index, blank) {\n    // Tab-size to eat has to be the same as what we serialize as.\n    // While in some places in markdown that’s 4, in JS it’s more common as 2.\n    // Which is what’s also in `mdast-util-mdx-jsx`:\n    // <https://github.com/syntax-tree/mdast-util-mdx-jsx/blob/40b951b/lib/index.js#L52>\n    return (index === 0 || blank ? '' : '  ') + line\n  })\n  return '{' + result + '}'\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL21kYXN0LXV0aWwtbWR4LWV4cHJlc3Npb25AMi4wLjEvbm9kZV9tb2R1bGVzL21kYXN0LXV0aWwtbWR4LWV4cHJlc3Npb24vbGliL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBO0FBQ0EsWUFBWSxrRkFBa0Y7QUFDOUYsWUFBWSxzQ0FBc0M7QUFDbEQsWUFBWSxtRUFBbUU7QUFDL0UsWUFBWSxTQUFTO0FBQ3JCOztBQUVtQzs7QUFFbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLE9BQU8sYUFBYSw2QkFBNkI7QUFDakQsT0FBTyw0QkFBNEI7QUFDbkM7QUFDQTtBQUNBOztBQUVBO0FBQ0EsVUFBVTtBQUNWLFVBQVU7QUFDVjtBQUNBO0FBQ0EsY0FBYyxxQ0FBcUM7QUFDbkQ7QUFDQTs7QUFFQTtBQUNBLFVBQVU7QUFDVixVQUFVO0FBQ1Y7QUFDQTtBQUNBLGNBQWMscUNBQXFDO0FBQ25EO0FBQ0E7O0FBRUE7QUFDQSxVQUFVO0FBQ1YsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFLDJDQUFNO0FBQ1I7QUFDQTs7QUFFQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBOztBQUVBO0FBQ0EsVUFBVTtBQUNWLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsVUFBVTtBQUNWLFdBQVcsdUNBQXVDO0FBQ2xEO0FBQ0EsV0FBVyxxQkFBcUI7QUFDaEM7QUFDQSxXQUFXLE9BQU87QUFDbEI7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsV0FBVyxlQUFlO0FBQzFCIiwic291cmNlcyI6WyIvVXNlcnMvZXRoYW5raW0vTmVzdG9yL21lZGZldGNoLmpzL25vZGVfbW9kdWxlcy8ucG5wbS9tZGFzdC11dGlsLW1keC1leHByZXNzaW9uQDIuMC4xL25vZGVfbW9kdWxlcy9tZGFzdC11dGlsLW1keC1leHByZXNzaW9uL2xpYi9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBpbXBvcnQge0NvbXBpbGVDb250ZXh0LCBFeHRlbnNpb24gYXMgRnJvbU1hcmtkb3duRXh0ZW5zaW9uLCBIYW5kbGUgYXMgRnJvbU1hcmtkb3duSGFuZGxlfSBmcm9tICdtZGFzdC11dGlsLWZyb20tbWFya2Rvd24nXG4gKiBAaW1wb3J0IHtNZHhGbG93RXhwcmVzc2lvbiwgTWR4VGV4dEV4cHJlc3Npb259IGZyb20gJ21kYXN0LXV0aWwtbWR4LWV4cHJlc3Npb24nXG4gKiBAaW1wb3J0IHtIYW5kbGUgYXMgVG9NYXJrZG93bkhhbmRsZSwgT3B0aW9ucyBhcyBUb01hcmtkb3duRXh0ZW5zaW9uLCBTdGF0ZX0gZnJvbSAnbWRhc3QtdXRpbC10by1tYXJrZG93bidcbiAqIEBpbXBvcnQge1BhcmVudHN9IGZyb20gJ21kYXN0J1xuICovXG5cbmltcG9ydCB7b2sgYXMgYXNzZXJ0fSBmcm9tICdkZXZsb3AnXG5cbi8qKlxuICogQ3JlYXRlIGFuIGV4dGVuc2lvbiBmb3IgYG1kYXN0LXV0aWwtZnJvbS1tYXJrZG93bmAgdG8gZW5hYmxlIE1EWCBleHByZXNzaW9uc1xuICogaW4gbWFya2Rvd24uXG4gKlxuICogV2hlbiB1c2luZyB0aGUgbWljcm9tYXJrIHN5bnRheCBleHRlbnNpb24gd2l0aCBgYWRkUmVzdWx0YCwgbm9kZXMgd2lsbCBoYXZlXG4gKiBhIGBkYXRhLmVzdHJlZWAgZmllbGQgc2V0IHRvIGFuIEVTVHJlZSBgUHJvZ3JhbWAgbm9kZS5cbiAqXG4gKiBAcmV0dXJucyB7RnJvbU1hcmtkb3duRXh0ZW5zaW9ufVxuICogICBFeHRlbnNpb24gZm9yIGBtZGFzdC11dGlsLWZyb20tbWFya2Rvd25gIHRvIGVuYWJsZSBNRFggZXhwcmVzc2lvbnMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBtZHhFeHByZXNzaW9uRnJvbU1hcmtkb3duKCkge1xuICByZXR1cm4ge1xuICAgIGVudGVyOiB7XG4gICAgICBtZHhGbG93RXhwcmVzc2lvbjogZW50ZXJNZHhGbG93RXhwcmVzc2lvbixcbiAgICAgIG1keFRleHRFeHByZXNzaW9uOiBlbnRlck1keFRleHRFeHByZXNzaW9uXG4gICAgfSxcbiAgICBleGl0OiB7XG4gICAgICBtZHhGbG93RXhwcmVzc2lvbjogZXhpdE1keEV4cHJlc3Npb24sXG4gICAgICBtZHhGbG93RXhwcmVzc2lvbkNodW5rOiBleGl0TWR4RXhwcmVzc2lvbkRhdGEsXG4gICAgICBtZHhUZXh0RXhwcmVzc2lvbjogZXhpdE1keEV4cHJlc3Npb24sXG4gICAgICBtZHhUZXh0RXhwcmVzc2lvbkNodW5rOiBleGl0TWR4RXhwcmVzc2lvbkRhdGFcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBDcmVhdGUgYW4gZXh0ZW5zaW9uIGZvciBgbWRhc3QtdXRpbC10by1tYXJrZG93bmAgdG8gZW5hYmxlIE1EWCBleHByZXNzaW9uc1xuICogaW4gbWFya2Rvd24uXG4gKlxuICogQHJldHVybnMge1RvTWFya2Rvd25FeHRlbnNpb259XG4gKiAgIEV4dGVuc2lvbiBmb3IgYG1kYXN0LXV0aWwtdG8tbWFya2Rvd25gIHRvIGVuYWJsZSBNRFggZXhwcmVzc2lvbnMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBtZHhFeHByZXNzaW9uVG9NYXJrZG93bigpIHtcbiAgcmV0dXJuIHtcbiAgICBoYW5kbGVyczoge1xuICAgICAgbWR4Rmxvd0V4cHJlc3Npb246IGhhbmRsZU1keEV4cHJlc3Npb24sXG4gICAgICBtZHhUZXh0RXhwcmVzc2lvbjogaGFuZGxlTWR4RXhwcmVzc2lvblxuICAgIH0sXG4gICAgdW5zYWZlOiBbXG4gICAgICB7Y2hhcmFjdGVyOiAneycsIGluQ29uc3RydWN0OiBbJ3BocmFzaW5nJ119LFxuICAgICAge2F0QnJlYWs6IHRydWUsIGNoYXJhY3RlcjogJ3snfVxuICAgIF1cbiAgfVxufVxuXG4vKipcbiAqIEB0aGlzIHtDb21waWxlQ29udGV4dH1cbiAqIEB0eXBlIHtGcm9tTWFya2Rvd25IYW5kbGV9XG4gKi9cbmZ1bmN0aW9uIGVudGVyTWR4Rmxvd0V4cHJlc3Npb24odG9rZW4pIHtcbiAgdGhpcy5lbnRlcih7dHlwZTogJ21keEZsb3dFeHByZXNzaW9uJywgdmFsdWU6ICcnfSwgdG9rZW4pXG4gIHRoaXMuYnVmZmVyKClcbn1cblxuLyoqXG4gKiBAdGhpcyB7Q29tcGlsZUNvbnRleHR9XG4gKiBAdHlwZSB7RnJvbU1hcmtkb3duSGFuZGxlfVxuICovXG5mdW5jdGlvbiBlbnRlck1keFRleHRFeHByZXNzaW9uKHRva2VuKSB7XG4gIHRoaXMuZW50ZXIoe3R5cGU6ICdtZHhUZXh0RXhwcmVzc2lvbicsIHZhbHVlOiAnJ30sIHRva2VuKVxuICB0aGlzLmJ1ZmZlcigpXG59XG5cbi8qKlxuICogQHRoaXMge0NvbXBpbGVDb250ZXh0fVxuICogQHR5cGUge0Zyb21NYXJrZG93bkhhbmRsZX1cbiAqL1xuZnVuY3Rpb24gZXhpdE1keEV4cHJlc3Npb24odG9rZW4pIHtcbiAgY29uc3QgdmFsdWUgPSB0aGlzLnJlc3VtZSgpXG4gIGNvbnN0IGVzdHJlZSA9IHRva2VuLmVzdHJlZVxuICBjb25zdCBub2RlID0gdGhpcy5zdGFja1t0aGlzLnN0YWNrLmxlbmd0aCAtIDFdXG4gIGFzc2VydChub2RlLnR5cGUgPT09ICdtZHhGbG93RXhwcmVzc2lvbicgfHwgbm9kZS50eXBlID09PSAnbWR4VGV4dEV4cHJlc3Npb24nKVxuICB0aGlzLmV4aXQodG9rZW4pXG4gIG5vZGUudmFsdWUgPSB2YWx1ZVxuXG4gIGlmIChlc3RyZWUpIHtcbiAgICBub2RlLmRhdGEgPSB7ZXN0cmVlfVxuICB9XG59XG5cbi8qKlxuICogQHRoaXMge0NvbXBpbGVDb250ZXh0fVxuICogQHR5cGUge0Zyb21NYXJrZG93bkhhbmRsZX1cbiAqL1xuZnVuY3Rpb24gZXhpdE1keEV4cHJlc3Npb25EYXRhKHRva2VuKSB7XG4gIHRoaXMuY29uZmlnLmVudGVyLmRhdGEuY2FsbCh0aGlzLCB0b2tlbilcbiAgdGhpcy5jb25maWcuZXhpdC5kYXRhLmNhbGwodGhpcywgdG9rZW4pXG59XG5cbi8qKlxuICogQHR5cGUge1RvTWFya2Rvd25IYW5kbGV9XG4gKiBAcGFyYW0ge01keEZsb3dFeHByZXNzaW9uIHwgTWR4VGV4dEV4cHJlc3Npb259IG5vZGVcbiAqICAgTm9kZS5cbiAqIEBwYXJhbSB7UGFyZW50cyB8IHVuZGVmaW5lZH0gcGFyZW50XG4gKiAgIFBhcmVudCwgaWYgYW55LlxuICogQHBhcmFtIHtTdGF0ZX0gc3RhdGVcbiAqICAgSW5mbyBwYXNzZWQgYXJvdW5kIGFib3V0IHRoZSBjdXJyZW50IHN0YXRlLlxuICogQHJldHVybnMge3N0cmluZ31cbiAqICAgU2VyaWFsaXplZCBtYXJrZG93bi5cbiAqL1xuZnVuY3Rpb24gaGFuZGxlTWR4RXhwcmVzc2lvbihub2RlLCBwYXJlbnQsIHN0YXRlKSB7XG4gIGNvbnN0IHZhbHVlID0gbm9kZS52YWx1ZSB8fCAnJ1xuICBjb25zdCByZXN1bHQgPSBzdGF0ZS5pbmRlbnRMaW5lcyh2YWx1ZSwgZnVuY3Rpb24gKGxpbmUsIGluZGV4LCBibGFuaykge1xuICAgIC8vIFRhYi1zaXplIHRvIGVhdCBoYXMgdG8gYmUgdGhlIHNhbWUgYXMgd2hhdCB3ZSBzZXJpYWxpemUgYXMuXG4gICAgLy8gV2hpbGUgaW4gc29tZSBwbGFjZXMgaW4gbWFya2Rvd24gdGhhdOKAmXMgNCwgaW4gSlMgaXTigJlzIG1vcmUgY29tbW9uIGFzIDIuXG4gICAgLy8gV2hpY2ggaXMgd2hhdOKAmXMgYWxzbyBpbiBgbWRhc3QtdXRpbC1tZHgtanN4YDpcbiAgICAvLyA8aHR0cHM6Ly9naXRodWIuY29tL3N5bnRheC10cmVlL21kYXN0LXV0aWwtbWR4LWpzeC9ibG9iLzQwYjk1MWIvbGliL2luZGV4LmpzI0w1Mj5cbiAgICByZXR1cm4gKGluZGV4ID09PSAwIHx8IGJsYW5rID8gJycgOiAnICAnKSArIGxpbmVcbiAgfSlcbiAgcmV0dXJuICd7JyArIHJlc3VsdCArICd9J1xufVxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../node_modules/.pnpm/mdast-util-mdx-expression@2.0.1/node_modules/mdast-util-mdx-expression/lib/index.js\n");

/***/ })

};
;