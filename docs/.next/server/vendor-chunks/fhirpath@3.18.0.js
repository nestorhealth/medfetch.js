/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/fhirpath@3.18.0";
exports.ids = ["vendor-chunks/fhirpath@3.18.0"];
exports.modules = {

/***/ "(ssr)/../node_modules/.pnpm/fhirpath@3.18.0/node_modules/fhirpath/package.json":
/*!********************************************************************************!*\
  !*** ../node_modules/.pnpm/fhirpath@3.18.0/node_modules/fhirpath/package.json ***!
  \********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('{"name":"fhirpath","version":"3.18.0","description":"A FHIRPath engine","main":"src/fhirpath.js","types":"src/fhirpath.d.ts","dependencies":{"@lhncbc/ucum-lhc":"^5.0.0","antlr4":"~4.9.3","commander":"^2.18.0","date-fns":"^1.30.1","js-yaml":"^3.13.1"},"devDependencies":{"@babel/core":"^7.21.4","@babel/eslint-parser":"^7.17.0","@babel/preset-env":"^7.16.11","babel-loader":"^8.2.3","benny":"github:caderek/benny#0ad058d3c7ef0b488a8fe9ae3519159fc7f36bb6","bestzip":"^2.2.0","copy-webpack-plugin":"^12.0.2","cypress":"^13.7.2","eslint":"^8.10.0","fhir":"^4.10.3","grunt":"^1.5.2","grunt-cli":"^1.4.3","grunt-text-replace":"^0.4.0","jasmine-spec-reporter":"^4.2.1","jest":"^29.7.0","jit-grunt":"^0.10.0","lodash":"^4.17.21","open":"^8.4.0","rimraf":"^3.0.0","tmp":"0.0.33","tsd":"^0.31.1","webpack":"^5.11.1","webpack-bundle-analyzer":"^4.4.2","webpack-cli":"^4.9.1","xml2js":"^0.5.0","yargs":"^15.1.0"},"engines":{"node":">=8.9.0"},"tsd":{"directory":"test/typescript"},"scripts":{"preinstall":"node bin/install-demo.js","postinstall":"echo \\"Building the Benny package based on a pull request which fixes an issue with \'statusShift\'... \\" && (cd node_modules/benny && npm i && npm run build > /dev/null) || echo \\"Building the Benny package is completed.\\"","generateParser":"cd src/parser; rimraf ./generated/*; java -Xmx500M -cp \\"../../antlr-4.9.3-complete.jar:$CLASSPATH\\" org.antlr.v4.Tool -o generated -Dlanguage=JavaScript FHIRPath.g4; grunt updateParserRequirements","build":"cd browser-build && webpack && rimraf fhirpath.zip && bestzip fhirpath.zip LICENSE.md fhirpath.min.js fhirpath.r5.min.js fhirpath.r4.min.js fhirpath.stu3.min.js fhirpath.dstu2.min.js && rimraf  LICENSE.md","test:unit":"node --use_strict node_modules/.bin/jest && TZ=America/New_York node --use_strict node_modules/.bin/jest && TZ=Europe/Paris node --use_strict node_modules/.bin/jest","test:unit:debug":"echo \'open chrome chrome://inspect/\' && node --inspect node_modules/.bin/jest --runInBand","build:demo":"npm run build && cd demo && npm run build","test:e2e":"npm run build:demo && cypress run","test:tsd":"tsd","test":"npm run lint && npm run test:tsd && npm run test:unit && npm run test:e2e && echo \\"For tests specific to IE 11, open browser-build/test/index.html in IE 11, and confirm that the tests on that page pass.\\"","lint":"eslint src/parser/index.js src/*.js converter/","compare-performance":"node ./test/benchmark.js"},"bin":{"fhirpath":"bin/fhirpath"},"files":["CHANGELOG.md","bin","fhir-context","src"],"repository":"github:HL7/fhirpath.js","license":"SEE LICENSE in LICENSE.md"}');

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/fhirpath@3.18.0/node_modules/fhirpath/src/additional.js":
/*!*************************************************************************************!*\
  !*** ../node_modules/.pnpm/fhirpath@3.18.0/node_modules/fhirpath/src/additional.js ***!
  \*************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Contains the additional FHIRPath functions.\n// See https://build.fhir.org/fhirpath.html#functions for details.\nconst util = __webpack_require__(/*! ./utilities */ \"(ssr)/../node_modules/.pnpm/fhirpath@3.18.0/node_modules/fhirpath/src/utilities.js\");\nconst Terminologies = __webpack_require__(/*! ./terminologies */ \"(ssr)/../node_modules/.pnpm/fhirpath@3.18.0/node_modules/fhirpath/src/terminologies.js\");\n\nlet engine = {};\n\n/**\n * Returns true if the code is a member of the given valueset.\n * @param {(string|Object)[]} coll - input collection with a single Coding,\n *  CodeableConcept, or code element.\n * @param {string} valueset - value set URL\n * @return {Promise<boolean>|[]} - promise of a boolean value indicating that\n *  there is one element in the input collection whose code is a member of the\n *  specified value set.\n */\nengine.memberOf = function (coll, valueset ) {\n  if (!this.async) {\n    throw new Error('The asynchronous function \"memberOf\" is not allowed. ' +\n      'To enable asynchronous functions, use the async=true or async=\"always\"' +\n      ' option.');\n  }\n  // If the input is empty or has more than one value, the return value is empty\n  if (coll.length !== 1 || coll[0] == null) {\n    return [];\n  }\n\n  if (typeof valueset === 'string' && /^https?:\\/\\/.*/.test(valueset)) {\n    const terminologies = this.processedVars.terminologies;\n    if (!terminologies) {\n      throw new Error('Option \"terminologyUrl\" is not specified.');\n    }\n    return Terminologies.validateVS.call(this,\n      [terminologies], valueset, util.valData(coll[0]), ''\n    ).then(params => {\n      return params.parameter.find((p) => p.name === \"result\").valueBoolean;\n    }, () => []);\n  }\n\n  // If the valueset cannot be resolved as an uri to a value set,\n  // the return value is empty.\n  return [];\n};\n\nmodule.exports = engine;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2ZoaXJwYXRoQDMuMTguMC9ub2RlX21vZHVsZXMvZmhpcnBhdGgvc3JjL2FkZGl0aW9uYWwuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBLGFBQWEsbUJBQU8sQ0FBQyx1R0FBYTtBQUNsQyxzQkFBc0IsbUJBQU8sQ0FBQywrR0FBaUI7O0FBRS9DOztBQUVBO0FBQ0E7QUFDQSxXQUFXLG1CQUFtQjtBQUM5QjtBQUNBLFdBQVcsUUFBUTtBQUNuQixZQUFZLHFCQUFxQjtBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIi9Vc2Vycy9ldGhhbmtpbS9OZXN0b3IvbWVkZmV0Y2guanMvbm9kZV9tb2R1bGVzLy5wbnBtL2ZoaXJwYXRoQDMuMTguMC9ub2RlX21vZHVsZXMvZmhpcnBhdGgvc3JjL2FkZGl0aW9uYWwuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29udGFpbnMgdGhlIGFkZGl0aW9uYWwgRkhJUlBhdGggZnVuY3Rpb25zLlxuLy8gU2VlIGh0dHBzOi8vYnVpbGQuZmhpci5vcmcvZmhpcnBhdGguaHRtbCNmdW5jdGlvbnMgZm9yIGRldGFpbHMuXG5jb25zdCB1dGlsID0gcmVxdWlyZShcIi4vdXRpbGl0aWVzXCIpO1xuY29uc3QgVGVybWlub2xvZ2llcyA9IHJlcXVpcmUoJy4vdGVybWlub2xvZ2llcycpO1xuXG5sZXQgZW5naW5lID0ge307XG5cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIHRoZSBjb2RlIGlzIGEgbWVtYmVyIG9mIHRoZSBnaXZlbiB2YWx1ZXNldC5cbiAqIEBwYXJhbSB7KHN0cmluZ3xPYmplY3QpW119IGNvbGwgLSBpbnB1dCBjb2xsZWN0aW9uIHdpdGggYSBzaW5nbGUgQ29kaW5nLFxuICogIENvZGVhYmxlQ29uY2VwdCwgb3IgY29kZSBlbGVtZW50LlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlc2V0IC0gdmFsdWUgc2V0IFVSTFxuICogQHJldHVybiB7UHJvbWlzZTxib29sZWFuPnxbXX0gLSBwcm9taXNlIG9mIGEgYm9vbGVhbiB2YWx1ZSBpbmRpY2F0aW5nIHRoYXRcbiAqICB0aGVyZSBpcyBvbmUgZWxlbWVudCBpbiB0aGUgaW5wdXQgY29sbGVjdGlvbiB3aG9zZSBjb2RlIGlzIGEgbWVtYmVyIG9mIHRoZVxuICogIHNwZWNpZmllZCB2YWx1ZSBzZXQuXG4gKi9cbmVuZ2luZS5tZW1iZXJPZiA9IGZ1bmN0aW9uIChjb2xsLCB2YWx1ZXNldCApIHtcbiAgaWYgKCF0aGlzLmFzeW5jKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdUaGUgYXN5bmNocm9ub3VzIGZ1bmN0aW9uIFwibWVtYmVyT2ZcIiBpcyBub3QgYWxsb3dlZC4gJyArXG4gICAgICAnVG8gZW5hYmxlIGFzeW5jaHJvbm91cyBmdW5jdGlvbnMsIHVzZSB0aGUgYXN5bmM9dHJ1ZSBvciBhc3luYz1cImFsd2F5c1wiJyArXG4gICAgICAnIG9wdGlvbi4nKTtcbiAgfVxuICAvLyBJZiB0aGUgaW5wdXQgaXMgZW1wdHkgb3IgaGFzIG1vcmUgdGhhbiBvbmUgdmFsdWUsIHRoZSByZXR1cm4gdmFsdWUgaXMgZW1wdHlcbiAgaWYgKGNvbGwubGVuZ3RoICE9PSAxIHx8IGNvbGxbMF0gPT0gbnVsbCkge1xuICAgIHJldHVybiBbXTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgdmFsdWVzZXQgPT09ICdzdHJpbmcnICYmIC9eaHR0cHM/OlxcL1xcLy4qLy50ZXN0KHZhbHVlc2V0KSkge1xuICAgIGNvbnN0IHRlcm1pbm9sb2dpZXMgPSB0aGlzLnByb2Nlc3NlZFZhcnMudGVybWlub2xvZ2llcztcbiAgICBpZiAoIXRlcm1pbm9sb2dpZXMpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignT3B0aW9uIFwidGVybWlub2xvZ3lVcmxcIiBpcyBub3Qgc3BlY2lmaWVkLicpO1xuICAgIH1cbiAgICByZXR1cm4gVGVybWlub2xvZ2llcy52YWxpZGF0ZVZTLmNhbGwodGhpcyxcbiAgICAgIFt0ZXJtaW5vbG9naWVzXSwgdmFsdWVzZXQsIHV0aWwudmFsRGF0YShjb2xsWzBdKSwgJydcbiAgICApLnRoZW4ocGFyYW1zID0+IHtcbiAgICAgIHJldHVybiBwYXJhbXMucGFyYW1ldGVyLmZpbmQoKHApID0+IHAubmFtZSA9PT0gXCJyZXN1bHRcIikudmFsdWVCb29sZWFuO1xuICAgIH0sICgpID0+IFtdKTtcbiAgfVxuXG4gIC8vIElmIHRoZSB2YWx1ZXNldCBjYW5ub3QgYmUgcmVzb2x2ZWQgYXMgYW4gdXJpIHRvIGEgdmFsdWUgc2V0LFxuICAvLyB0aGUgcmV0dXJuIHZhbHVlIGlzIGVtcHR5LlxuICByZXR1cm4gW107XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGVuZ2luZTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/fhirpath@3.18.0/node_modules/fhirpath/src/additional.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/fhirpath@3.18.0/node_modules/fhirpath/src/aggregate.js":
/*!************************************************************************************!*\
  !*** ../node_modules/.pnpm/fhirpath@3.18.0/node_modules/fhirpath/src/aggregate.js ***!
  \************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Contains the FHIRPath Aggregate functions.\n// (Section 7 of the FHIRPath 2.0.0 (N1) specification).\n\nlet engine = {};\nconst math = __webpack_require__(/*! ./math */ \"(ssr)/../node_modules/.pnpm/fhirpath@3.18.0/node_modules/fhirpath/src/math.js\");\nconst equality  = __webpack_require__(/*! ./equality */ \"(ssr)/../node_modules/.pnpm/fhirpath@3.18.0/node_modules/fhirpath/src/equality.js\");\nconst util = __webpack_require__(/*! ./utilities */ \"(ssr)/../node_modules/.pnpm/fhirpath@3.18.0/node_modules/fhirpath/src/utilities.js\");\n\nengine.aggregateMacro = function(data, expr, initialValue) {\n  return data.reduce((total, x, i) => {\n    if (total instanceof Promise) {\n      return total.then((t) => {\n        this.$index = i;\n        this.$total = t;\n        return this.$total = expr(x);\n      });\n    } else {\n      this.$index = i;\n      return this.$total = expr(x);\n    }\n  }, this.$total = initialValue);\n};\n\nengine.countFn = function(x) {\n  if (x && x.length) {\n    return x.length;\n  } else {\n    return 0;\n  }\n};\n\n// Shortcut for \"value.tail().aggregate($this+$total, value.first())\" `\nengine.sumFn = function(data) {\n  return engine.aggregateMacro.apply(this, [data.slice(1), ($this) => {\n    let x = util.arraify($this).filter(i => util.valData(i) != null);\n    let y = util.arraify(this.$total).filter(i => util.valData(i) != null);\n    if (x.length === 0 || y.length === 0) {\n      return [];\n    }\n    return math.plus(x, y);\n  }, data[0]]);\n};\n\n/**\n * Shortcut for \"[source collection].aggregate(iif($total.empty(), $this, iif($this [operator] $total, $this, $total)))\"\n * Used for functions min() and max().\n * @param {Array} data - source collection\n * @param {Function} fn - operator function\n * @return {Array}\n */\nfunction minMaxShortcutTemplate(data, fn) {\n  let $total;\n  if (data.length === 0 || util.valData(data[0]) == null) {\n    $total = [];\n  } else {\n    $total = [data[0]];\n    for (let i = 1; i < data.length; i++) {\n      if (util.valData(data[i]) == null) {\n        $total = [];\n        break;\n      }\n      const $this = [data[i]];\n      $total = util.isTrue(fn($this, $total)) ? $this : $total;\n    }\n  }\n  return $total;\n}\n\n// Shortcut for \"value.aggregate(iif($total.empty(), $this, iif($this < $total, $this, $total)))\"\nengine.minFn = function (data) {\n  return minMaxShortcutTemplate(data, equality.lt);\n};\n\n// Shortcut for \"value.aggregate(iif($total.empty(), $this, iif($this > $total, $this, $total)))\"\nengine.maxFn = function (data) {\n  return minMaxShortcutTemplate(data, equality.gt);\n};\n\n// Shortcut for \"value.sum()/value.count()\"\nengine.avgFn = function (data) {\n  const x = util.arraify(engine.sumFn(data));\n  const y = util.arraify(engine.countFn(data));\n  if (x.length === 0 || y.length === 0) {\n    return [];\n  }\n  return math.div(x, y);\n};\n\nmodule.exports = engine;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2ZoaXJwYXRoQDMuMTguMC9ub2RlX21vZHVsZXMvZmhpcnBhdGgvc3JjL2FnZ3JlZ2F0ZS5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBOztBQUVBO0FBQ0EsYUFBYSxtQkFBTyxDQUFDLDZGQUFRO0FBQzdCLGtCQUFrQixtQkFBTyxDQUFDLHFHQUFZO0FBQ3RDLGFBQWEsbUJBQU8sQ0FBQyx1R0FBYTs7QUFFbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEIsV0FBVyxVQUFVO0FBQ3JCLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0Esb0JBQW9CLGlCQUFpQjtBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIi9Vc2Vycy9ldGhhbmtpbS9OZXN0b3IvbWVkZmV0Y2guanMvbm9kZV9tb2R1bGVzLy5wbnBtL2ZoaXJwYXRoQDMuMTguMC9ub2RlX21vZHVsZXMvZmhpcnBhdGgvc3JjL2FnZ3JlZ2F0ZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb250YWlucyB0aGUgRkhJUlBhdGggQWdncmVnYXRlIGZ1bmN0aW9ucy5cbi8vIChTZWN0aW9uIDcgb2YgdGhlIEZISVJQYXRoIDIuMC4wIChOMSkgc3BlY2lmaWNhdGlvbikuXG5cbmxldCBlbmdpbmUgPSB7fTtcbmNvbnN0IG1hdGggPSByZXF1aXJlKFwiLi9tYXRoXCIpO1xuY29uc3QgZXF1YWxpdHkgID0gcmVxdWlyZShcIi4vZXF1YWxpdHlcIik7XG5jb25zdCB1dGlsID0gcmVxdWlyZSgnLi91dGlsaXRpZXMnKTtcblxuZW5naW5lLmFnZ3JlZ2F0ZU1hY3JvID0gZnVuY3Rpb24oZGF0YSwgZXhwciwgaW5pdGlhbFZhbHVlKSB7XG4gIHJldHVybiBkYXRhLnJlZHVjZSgodG90YWwsIHgsIGkpID0+IHtcbiAgICBpZiAodG90YWwgaW5zdGFuY2VvZiBQcm9taXNlKSB7XG4gICAgICByZXR1cm4gdG90YWwudGhlbigodCkgPT4ge1xuICAgICAgICB0aGlzLiRpbmRleCA9IGk7XG4gICAgICAgIHRoaXMuJHRvdGFsID0gdDtcbiAgICAgICAgcmV0dXJuIHRoaXMuJHRvdGFsID0gZXhwcih4KTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLiRpbmRleCA9IGk7XG4gICAgICByZXR1cm4gdGhpcy4kdG90YWwgPSBleHByKHgpO1xuICAgIH1cbiAgfSwgdGhpcy4kdG90YWwgPSBpbml0aWFsVmFsdWUpO1xufTtcblxuZW5naW5lLmNvdW50Rm4gPSBmdW5jdGlvbih4KSB7XG4gIGlmICh4ICYmIHgubGVuZ3RoKSB7XG4gICAgcmV0dXJuIHgubGVuZ3RoO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiAwO1xuICB9XG59O1xuXG4vLyBTaG9ydGN1dCBmb3IgXCJ2YWx1ZS50YWlsKCkuYWdncmVnYXRlKCR0aGlzKyR0b3RhbCwgdmFsdWUuZmlyc3QoKSlcIiBgXG5lbmdpbmUuc3VtRm4gPSBmdW5jdGlvbihkYXRhKSB7XG4gIHJldHVybiBlbmdpbmUuYWdncmVnYXRlTWFjcm8uYXBwbHkodGhpcywgW2RhdGEuc2xpY2UoMSksICgkdGhpcykgPT4ge1xuICAgIGxldCB4ID0gdXRpbC5hcnJhaWZ5KCR0aGlzKS5maWx0ZXIoaSA9PiB1dGlsLnZhbERhdGEoaSkgIT0gbnVsbCk7XG4gICAgbGV0IHkgPSB1dGlsLmFycmFpZnkodGhpcy4kdG90YWwpLmZpbHRlcihpID0+IHV0aWwudmFsRGF0YShpKSAhPSBudWxsKTtcbiAgICBpZiAoeC5sZW5ndGggPT09IDAgfHwgeS5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiBbXTtcbiAgICB9XG4gICAgcmV0dXJuIG1hdGgucGx1cyh4LCB5KTtcbiAgfSwgZGF0YVswXV0pO1xufTtcblxuLyoqXG4gKiBTaG9ydGN1dCBmb3IgXCJbc291cmNlIGNvbGxlY3Rpb25dLmFnZ3JlZ2F0ZShpaWYoJHRvdGFsLmVtcHR5KCksICR0aGlzLCBpaWYoJHRoaXMgW29wZXJhdG9yXSAkdG90YWwsICR0aGlzLCAkdG90YWwpKSlcIlxuICogVXNlZCBmb3IgZnVuY3Rpb25zIG1pbigpIGFuZCBtYXgoKS5cbiAqIEBwYXJhbSB7QXJyYXl9IGRhdGEgLSBzb3VyY2UgY29sbGVjdGlvblxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gLSBvcGVyYXRvciBmdW5jdGlvblxuICogQHJldHVybiB7QXJyYXl9XG4gKi9cbmZ1bmN0aW9uIG1pbk1heFNob3J0Y3V0VGVtcGxhdGUoZGF0YSwgZm4pIHtcbiAgbGV0ICR0b3RhbDtcbiAgaWYgKGRhdGEubGVuZ3RoID09PSAwIHx8IHV0aWwudmFsRGF0YShkYXRhWzBdKSA9PSBudWxsKSB7XG4gICAgJHRvdGFsID0gW107XG4gIH0gZWxzZSB7XG4gICAgJHRvdGFsID0gW2RhdGFbMF1dO1xuICAgIGZvciAobGV0IGkgPSAxOyBpIDwgZGF0YS5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKHV0aWwudmFsRGF0YShkYXRhW2ldKSA9PSBudWxsKSB7XG4gICAgICAgICR0b3RhbCA9IFtdO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGNvbnN0ICR0aGlzID0gW2RhdGFbaV1dO1xuICAgICAgJHRvdGFsID0gdXRpbC5pc1RydWUoZm4oJHRoaXMsICR0b3RhbCkpID8gJHRoaXMgOiAkdG90YWw7XG4gICAgfVxuICB9XG4gIHJldHVybiAkdG90YWw7XG59XG5cbi8vIFNob3J0Y3V0IGZvciBcInZhbHVlLmFnZ3JlZ2F0ZShpaWYoJHRvdGFsLmVtcHR5KCksICR0aGlzLCBpaWYoJHRoaXMgPCAkdG90YWwsICR0aGlzLCAkdG90YWwpKSlcIlxuZW5naW5lLm1pbkZuID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgcmV0dXJuIG1pbk1heFNob3J0Y3V0VGVtcGxhdGUoZGF0YSwgZXF1YWxpdHkubHQpO1xufTtcblxuLy8gU2hvcnRjdXQgZm9yIFwidmFsdWUuYWdncmVnYXRlKGlpZigkdG90YWwuZW1wdHkoKSwgJHRoaXMsIGlpZigkdGhpcyA+ICR0b3RhbCwgJHRoaXMsICR0b3RhbCkpKVwiXG5lbmdpbmUubWF4Rm4gPSBmdW5jdGlvbiAoZGF0YSkge1xuICByZXR1cm4gbWluTWF4U2hvcnRjdXRUZW1wbGF0ZShkYXRhLCBlcXVhbGl0eS5ndCk7XG59O1xuXG4vLyBTaG9ydGN1dCBmb3IgXCJ2YWx1ZS5zdW0oKS92YWx1ZS5jb3VudCgpXCJcbmVuZ2luZS5hdmdGbiA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gIGNvbnN0IHggPSB1dGlsLmFycmFpZnkoZW5naW5lLnN1bUZuKGRhdGEpKTtcbiAgY29uc3QgeSA9IHV0aWwuYXJyYWlmeShlbmdpbmUuY291bnRGbihkYXRhKSk7XG4gIGlmICh4Lmxlbmd0aCA9PT0gMCB8fCB5Lmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBbXTtcbiAgfVxuICByZXR1cm4gbWF0aC5kaXYoeCwgeSk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGVuZ2luZTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/fhirpath@3.18.0/node_modules/fhirpath/src/aggregate.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/fhirpath@3.18.0/node_modules/fhirpath/src/collections.js":
/*!**************************************************************************************!*\
  !*** ../node_modules/.pnpm/fhirpath@3.18.0/node_modules/fhirpath/src/collections.js ***!
  \**************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// This file holds code to hande the FHIRPath Math functions.\n\nconst { deepEqual } = __webpack_require__(/*! ./deep-equal */ \"(ssr)/../node_modules/.pnpm/fhirpath@3.18.0/node_modules/fhirpath/src/deep-equal.js\");\n\nconst engine = {};\n\n\n// \"b\" is assumed to have one element and it tests whether \"b[0]\" is in \"a\"\nfunction containsImpl(a,b){\n  for(var i = 0; i < a.length; i++){\n    if(deepEqual(a[i], b[0])) { return true; }\n  }\n  return false;\n}\n\nengine.contains = function(a, b){\n  if(b.length == 0) { return []; }\n  if(a.length == 0) { return false; }\n  if(b.length > 1) {\n    throw new Error(\"Expected singleton on right side of contains, got \" + JSON.stringify(b));\n  }\n  return containsImpl(a,b);\n};\n\nengine.in = function(a, b){\n  if(a.length == 0) { return []; }\n  if(b.length == 0) { return false; }\n  if(a.length > 1) {\n    throw new Error(\"Expected singleton on right side of in, got \" + JSON.stringify(b));\n  }\n  return containsImpl(b,a);\n};\n\nmodule.exports = engine;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2ZoaXJwYXRoQDMuMTguMC9ub2RlX21vZHVsZXMvZmhpcnBhdGgvc3JjL2NvbGxlY3Rpb25zLmpzIiwibWFwcGluZ3MiOiJBQUFBOztBQUVBLFFBQVEsWUFBWSxFQUFFLG1CQUFPLENBQUMseUdBQWM7O0FBRTVDOzs7QUFHQTtBQUNBO0FBQ0EsaUJBQWlCLGNBQWM7QUFDL0IsZ0NBQWdDO0FBQ2hDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLHNCQUFzQjtBQUN0QixzQkFBc0I7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLHNCQUFzQjtBQUN0QixzQkFBc0I7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsiL1VzZXJzL2V0aGFua2ltL05lc3Rvci9tZWRmZXRjaC5qcy9ub2RlX21vZHVsZXMvLnBucG0vZmhpcnBhdGhAMy4xOC4wL25vZGVfbW9kdWxlcy9maGlycGF0aC9zcmMvY29sbGVjdGlvbnMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gVGhpcyBmaWxlIGhvbGRzIGNvZGUgdG8gaGFuZGUgdGhlIEZISVJQYXRoIE1hdGggZnVuY3Rpb25zLlxuXG5jb25zdCB7IGRlZXBFcXVhbCB9ID0gcmVxdWlyZSgnLi9kZWVwLWVxdWFsJyk7XG5cbmNvbnN0IGVuZ2luZSA9IHt9O1xuXG5cbi8vIFwiYlwiIGlzIGFzc3VtZWQgdG8gaGF2ZSBvbmUgZWxlbWVudCBhbmQgaXQgdGVzdHMgd2hldGhlciBcImJbMF1cIiBpcyBpbiBcImFcIlxuZnVuY3Rpb24gY29udGFpbnNJbXBsKGEsYil7XG4gIGZvcih2YXIgaSA9IDA7IGkgPCBhLmxlbmd0aDsgaSsrKXtcbiAgICBpZihkZWVwRXF1YWwoYVtpXSwgYlswXSkpIHsgcmV0dXJuIHRydWU7IH1cbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbmVuZ2luZS5jb250YWlucyA9IGZ1bmN0aW9uKGEsIGIpe1xuICBpZihiLmxlbmd0aCA9PSAwKSB7IHJldHVybiBbXTsgfVxuICBpZihhLmxlbmd0aCA9PSAwKSB7IHJldHVybiBmYWxzZTsgfVxuICBpZihiLmxlbmd0aCA+IDEpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJFeHBlY3RlZCBzaW5nbGV0b24gb24gcmlnaHQgc2lkZSBvZiBjb250YWlucywgZ290IFwiICsgSlNPTi5zdHJpbmdpZnkoYikpO1xuICB9XG4gIHJldHVybiBjb250YWluc0ltcGwoYSxiKTtcbn07XG5cbmVuZ2luZS5pbiA9IGZ1bmN0aW9uKGEsIGIpe1xuICBpZihhLmxlbmd0aCA9PSAwKSB7IHJldHVybiBbXTsgfVxuICBpZihiLmxlbmd0aCA9PSAwKSB7IHJldHVybiBmYWxzZTsgfVxuICBpZihhLmxlbmd0aCA+IDEpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJFeHBlY3RlZCBzaW5nbGV0b24gb24gcmlnaHQgc2lkZSBvZiBpbiwgZ290IFwiICsgSlNPTi5zdHJpbmdpZnkoYikpO1xuICB9XG4gIHJldHVybiBjb250YWluc0ltcGwoYixhKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZW5naW5lO1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/fhirpath@3.18.0/node_modules/fhirpath/src/collections.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/fhirpath@3.18.0/node_modules/fhirpath/src/combining.js":
/*!************************************************************************************!*\
  !*** ../node_modules/.pnpm/fhirpath@3.18.0/node_modules/fhirpath/src/combining.js ***!
  \************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// This file holds code to hande the FHIRPath Combining functions.\n\nconst combineFns = {};\nconst { distinctFn } = __webpack_require__(/*! ./filtering */ \"(ssr)/../node_modules/.pnpm/fhirpath@3.18.0/node_modules/fhirpath/src/filtering.js\");\nconst hashObject = __webpack_require__(/*! ./hash-object */ \"(ssr)/../node_modules/.pnpm/fhirpath@3.18.0/node_modules/fhirpath/src/hash-object.js\");\nconst { deepEqual, maxCollSizeForDeepEqual } = __webpack_require__(/*! ./deep-equal */ \"(ssr)/../node_modules/.pnpm/fhirpath@3.18.0/node_modules/fhirpath/src/deep-equal.js\");\nconst { TypeInfo } = __webpack_require__(/*! ./types */ \"(ssr)/../node_modules/.pnpm/fhirpath@3.18.0/node_modules/fhirpath/src/types.js\");\n\ncombineFns.union = function(coll1, coll2){\n  return distinctFn(coll1.concat(coll2));\n};\n\ncombineFns.combineFn = function(coll1, coll2){\n  return coll1.concat(coll2);\n};\n\ncombineFns.intersect = function(coll1, coll2) {\n  let result = [];\n  const coll1Length = coll1.length;\n  let uncheckedLength = coll2.length;\n\n  if (coll1Length && uncheckedLength) {\n    const hasPrimitive = coll1.some(i => TypeInfo.isPrimitiveValue(i)) ||\n      coll2.some(i => TypeInfo.isPrimitiveValue(i));\n    if (!hasPrimitive && coll1Length + uncheckedLength > maxCollSizeForDeepEqual) {\n      // When we have more than maxCollSizeForDeepEqual items in input collections,\n      // we use a hash table (on JSON strings) for efficiency.\n      let coll2hash = {};\n      coll2.forEach(item => {\n        const hash = hashObject(item);\n        if (coll2hash[hash]) {\n          uncheckedLength--;\n        } else {\n          coll2hash[hash] = true;\n        }\n      });\n\n      for (let i = 0; i < coll1Length && uncheckedLength > 0; ++i) {\n        let item = coll1[i];\n        let hash = hashObject(item);\n        if (coll2hash[hash]) {\n          result.push(item);\n          coll2hash[hash] = false;\n          uncheckedLength--;\n        }\n      }\n    } else {\n      // Otherwise, it is more efficient to perform a deep comparison.\n      result = distinctFn(coll1, hasPrimitive).filter(\n        obj1 => coll2.some(obj2 => deepEqual(obj1, obj2))\n      );\n    }\n  }\n\n  return result;\n};\n\n\ncombineFns.exclude = function(coll1, coll2) {\n  let result = [];\n\n  const coll1Length = coll1.length;\n  const coll2Length = coll2.length;\n\n  if (!coll2Length) {\n    return coll1;\n  }\n  if (coll1Length) {\n    const hasPrimitive = coll1.some(i => TypeInfo.isPrimitiveValue(i)) ||\n      coll2.some(i => TypeInfo.isPrimitiveValue(i));\n\n    if (!hasPrimitive && coll1Length + coll2Length > maxCollSizeForDeepEqual) {\n      // When we have more than maxCollSizeForDeepEqual items in input collections,\n      // we use a hash table (on JSON strings) for efficiency.\n      let coll2hash = {};\n      coll2.forEach(item => {\n        const hash = hashObject(item);\n        coll2hash[hash] = true;\n      });\n\n      result = coll1.filter(item => !coll2hash[hashObject(item)]);\n    } else {\n      // Otherwise, it is more efficient to perform a deep comparison.\n      result = coll1.filter(item => {\n        return !coll2.some(item2 => deepEqual(item, item2));\n      });\n    }\n  }\n\n  return result;\n};\n\n\nmodule.exports = combineFns;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2ZoaXJwYXRoQDMuMTguMC9ub2RlX21vZHVsZXMvZmhpcnBhdGgvc3JjL2NvbWJpbmluZy5qcyIsIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBLFFBQVEsYUFBYSxFQUFFLG1CQUFPLENBQUMsdUdBQWE7QUFDNUMsbUJBQW1CLG1CQUFPLENBQUMsMkdBQWU7QUFDMUMsUUFBUSxxQ0FBcUMsRUFBRSxtQkFBTyxDQUFDLHlHQUFjO0FBQ3JFLFFBQVEsV0FBVyxFQUFFLG1CQUFPLENBQUMsK0ZBQVM7O0FBRXRDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0EsT0FBTzs7QUFFUCxzQkFBc0Isd0NBQXdDO0FBQzlEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7OztBQUdBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPOztBQUVQO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBOztBQUVBO0FBQ0E7OztBQUdBIiwic291cmNlcyI6WyIvVXNlcnMvZXRoYW5raW0vTmVzdG9yL21lZGZldGNoLmpzL25vZGVfbW9kdWxlcy8ucG5wbS9maGlycGF0aEAzLjE4LjAvbm9kZV9tb2R1bGVzL2ZoaXJwYXRoL3NyYy9jb21iaW5pbmcuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gVGhpcyBmaWxlIGhvbGRzIGNvZGUgdG8gaGFuZGUgdGhlIEZISVJQYXRoIENvbWJpbmluZyBmdW5jdGlvbnMuXG5cbmNvbnN0IGNvbWJpbmVGbnMgPSB7fTtcbmNvbnN0IHsgZGlzdGluY3RGbiB9ID0gcmVxdWlyZSgnLi9maWx0ZXJpbmcnKTtcbmNvbnN0IGhhc2hPYmplY3QgPSByZXF1aXJlKCcuL2hhc2gtb2JqZWN0Jyk7XG5jb25zdCB7IGRlZXBFcXVhbCwgbWF4Q29sbFNpemVGb3JEZWVwRXF1YWwgfSA9IHJlcXVpcmUoJy4vZGVlcC1lcXVhbCcpO1xuY29uc3QgeyBUeXBlSW5mbyB9ID0gcmVxdWlyZShcIi4vdHlwZXNcIik7XG5cbmNvbWJpbmVGbnMudW5pb24gPSBmdW5jdGlvbihjb2xsMSwgY29sbDIpe1xuICByZXR1cm4gZGlzdGluY3RGbihjb2xsMS5jb25jYXQoY29sbDIpKTtcbn07XG5cbmNvbWJpbmVGbnMuY29tYmluZUZuID0gZnVuY3Rpb24oY29sbDEsIGNvbGwyKXtcbiAgcmV0dXJuIGNvbGwxLmNvbmNhdChjb2xsMik7XG59O1xuXG5jb21iaW5lRm5zLmludGVyc2VjdCA9IGZ1bmN0aW9uKGNvbGwxLCBjb2xsMikge1xuICBsZXQgcmVzdWx0ID0gW107XG4gIGNvbnN0IGNvbGwxTGVuZ3RoID0gY29sbDEubGVuZ3RoO1xuICBsZXQgdW5jaGVja2VkTGVuZ3RoID0gY29sbDIubGVuZ3RoO1xuXG4gIGlmIChjb2xsMUxlbmd0aCAmJiB1bmNoZWNrZWRMZW5ndGgpIHtcbiAgICBjb25zdCBoYXNQcmltaXRpdmUgPSBjb2xsMS5zb21lKGkgPT4gVHlwZUluZm8uaXNQcmltaXRpdmVWYWx1ZShpKSkgfHxcbiAgICAgIGNvbGwyLnNvbWUoaSA9PiBUeXBlSW5mby5pc1ByaW1pdGl2ZVZhbHVlKGkpKTtcbiAgICBpZiAoIWhhc1ByaW1pdGl2ZSAmJiBjb2xsMUxlbmd0aCArIHVuY2hlY2tlZExlbmd0aCA+IG1heENvbGxTaXplRm9yRGVlcEVxdWFsKSB7XG4gICAgICAvLyBXaGVuIHdlIGhhdmUgbW9yZSB0aGFuIG1heENvbGxTaXplRm9yRGVlcEVxdWFsIGl0ZW1zIGluIGlucHV0IGNvbGxlY3Rpb25zLFxuICAgICAgLy8gd2UgdXNlIGEgaGFzaCB0YWJsZSAob24gSlNPTiBzdHJpbmdzKSBmb3IgZWZmaWNpZW5jeS5cbiAgICAgIGxldCBjb2xsMmhhc2ggPSB7fTtcbiAgICAgIGNvbGwyLmZvckVhY2goaXRlbSA9PiB7XG4gICAgICAgIGNvbnN0IGhhc2ggPSBoYXNoT2JqZWN0KGl0ZW0pO1xuICAgICAgICBpZiAoY29sbDJoYXNoW2hhc2hdKSB7XG4gICAgICAgICAgdW5jaGVja2VkTGVuZ3RoLS07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29sbDJoYXNoW2hhc2hdID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY29sbDFMZW5ndGggJiYgdW5jaGVja2VkTGVuZ3RoID4gMDsgKytpKSB7XG4gICAgICAgIGxldCBpdGVtID0gY29sbDFbaV07XG4gICAgICAgIGxldCBoYXNoID0gaGFzaE9iamVjdChpdGVtKTtcbiAgICAgICAgaWYgKGNvbGwyaGFzaFtoYXNoXSkge1xuICAgICAgICAgIHJlc3VsdC5wdXNoKGl0ZW0pO1xuICAgICAgICAgIGNvbGwyaGFzaFtoYXNoXSA9IGZhbHNlO1xuICAgICAgICAgIHVuY2hlY2tlZExlbmd0aC0tO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIE90aGVyd2lzZSwgaXQgaXMgbW9yZSBlZmZpY2llbnQgdG8gcGVyZm9ybSBhIGRlZXAgY29tcGFyaXNvbi5cbiAgICAgIHJlc3VsdCA9IGRpc3RpbmN0Rm4oY29sbDEsIGhhc1ByaW1pdGl2ZSkuZmlsdGVyKFxuICAgICAgICBvYmoxID0+IGNvbGwyLnNvbWUob2JqMiA9PiBkZWVwRXF1YWwob2JqMSwgb2JqMikpXG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG5cbmNvbWJpbmVGbnMuZXhjbHVkZSA9IGZ1bmN0aW9uKGNvbGwxLCBjb2xsMikge1xuICBsZXQgcmVzdWx0ID0gW107XG5cbiAgY29uc3QgY29sbDFMZW5ndGggPSBjb2xsMS5sZW5ndGg7XG4gIGNvbnN0IGNvbGwyTGVuZ3RoID0gY29sbDIubGVuZ3RoO1xuXG4gIGlmICghY29sbDJMZW5ndGgpIHtcbiAgICByZXR1cm4gY29sbDE7XG4gIH1cbiAgaWYgKGNvbGwxTGVuZ3RoKSB7XG4gICAgY29uc3QgaGFzUHJpbWl0aXZlID0gY29sbDEuc29tZShpID0+IFR5cGVJbmZvLmlzUHJpbWl0aXZlVmFsdWUoaSkpIHx8XG4gICAgICBjb2xsMi5zb21lKGkgPT4gVHlwZUluZm8uaXNQcmltaXRpdmVWYWx1ZShpKSk7XG5cbiAgICBpZiAoIWhhc1ByaW1pdGl2ZSAmJiBjb2xsMUxlbmd0aCArIGNvbGwyTGVuZ3RoID4gbWF4Q29sbFNpemVGb3JEZWVwRXF1YWwpIHtcbiAgICAgIC8vIFdoZW4gd2UgaGF2ZSBtb3JlIHRoYW4gbWF4Q29sbFNpemVGb3JEZWVwRXF1YWwgaXRlbXMgaW4gaW5wdXQgY29sbGVjdGlvbnMsXG4gICAgICAvLyB3ZSB1c2UgYSBoYXNoIHRhYmxlIChvbiBKU09OIHN0cmluZ3MpIGZvciBlZmZpY2llbmN5LlxuICAgICAgbGV0IGNvbGwyaGFzaCA9IHt9O1xuICAgICAgY29sbDIuZm9yRWFjaChpdGVtID0+IHtcbiAgICAgICAgY29uc3QgaGFzaCA9IGhhc2hPYmplY3QoaXRlbSk7XG4gICAgICAgIGNvbGwyaGFzaFtoYXNoXSA9IHRydWU7XG4gICAgICB9KTtcblxuICAgICAgcmVzdWx0ID0gY29sbDEuZmlsdGVyKGl0ZW0gPT4gIWNvbGwyaGFzaFtoYXNoT2JqZWN0KGl0ZW0pXSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIE90aGVyd2lzZSwgaXQgaXMgbW9yZSBlZmZpY2llbnQgdG8gcGVyZm9ybSBhIGRlZXAgY29tcGFyaXNvbi5cbiAgICAgIHJlc3VsdCA9IGNvbGwxLmZpbHRlcihpdGVtID0+IHtcbiAgICAgICAgcmV0dXJuICFjb2xsMi5zb21lKGl0ZW0yID0+IGRlZXBFcXVhbChpdGVtLCBpdGVtMikpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cblxubW9kdWxlLmV4cG9ydHMgPSBjb21iaW5lRm5zO1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/fhirpath@3.18.0/node_modules/fhirpath/src/combining.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/fhirpath@3.18.0/node_modules/fhirpath/src/constants.js":
/*!************************************************************************************!*\
  !*** ../node_modules/.pnpm/fhirpath@3.18.0/node_modules/fhirpath/src/constants.js ***!
  \************************************************************************************/
/***/ ((module) => {

eval("// These are values that should not change during an evaluation of a FHIRPath\n// expression (e.g. the return value of today(), per the spec.)  They are\n// constant during at least one evaluation.\n\nmodule.exports = {\n  /**\n   *  Resets the constants.  Should be called when before the engine starts its\n   *  processing.\n   */\n  reset: function() {\n    this.nowDate = new Date(); // a Date object representing \"now\"\n    this.today = null;\n    this.now = null;\n    this.timeOfDay = null;\n    this.localTimezoneOffset = null;\n  },\n\n  /**\n   *  The cached value of today().\n   */\n  today: null,\n\n  /**\n   *  The cached value of now().\n   */\n  now: null,\n\n  /**\n   *  The cached value of timeOfDay().\n   */\n  timeOfDay: null\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2ZoaXJwYXRoQDMuMTguMC9ub2RlX21vZHVsZXMvZmhpcnBhdGgvc3JjL2NvbnN0YW50cy5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvZXRoYW5raW0vTmVzdG9yL21lZGZldGNoLmpzL25vZGVfbW9kdWxlcy8ucG5wbS9maGlycGF0aEAzLjE4LjAvbm9kZV9tb2R1bGVzL2ZoaXJwYXRoL3NyYy9jb25zdGFudHMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gVGhlc2UgYXJlIHZhbHVlcyB0aGF0IHNob3VsZCBub3QgY2hhbmdlIGR1cmluZyBhbiBldmFsdWF0aW9uIG9mIGEgRkhJUlBhdGhcbi8vIGV4cHJlc3Npb24gKGUuZy4gdGhlIHJldHVybiB2YWx1ZSBvZiB0b2RheSgpLCBwZXIgdGhlIHNwZWMuKSAgVGhleSBhcmVcbi8vIGNvbnN0YW50IGR1cmluZyBhdCBsZWFzdCBvbmUgZXZhbHVhdGlvbi5cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIC8qKlxuICAgKiAgUmVzZXRzIHRoZSBjb25zdGFudHMuICBTaG91bGQgYmUgY2FsbGVkIHdoZW4gYmVmb3JlIHRoZSBlbmdpbmUgc3RhcnRzIGl0c1xuICAgKiAgcHJvY2Vzc2luZy5cbiAgICovXG4gIHJlc2V0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLm5vd0RhdGUgPSBuZXcgRGF0ZSgpOyAvLyBhIERhdGUgb2JqZWN0IHJlcHJlc2VudGluZyBcIm5vd1wiXG4gICAgdGhpcy50b2RheSA9IG51bGw7XG4gICAgdGhpcy5ub3cgPSBudWxsO1xuICAgIHRoaXMudGltZU9mRGF5ID0gbnVsbDtcbiAgICB0aGlzLmxvY2FsVGltZXpvbmVPZmZzZXQgPSBudWxsO1xuICB9LFxuXG4gIC8qKlxuICAgKiAgVGhlIGNhY2hlZCB2YWx1ZSBvZiB0b2RheSgpLlxuICAgKi9cbiAgdG9kYXk6IG51bGwsXG5cbiAgLyoqXG4gICAqICBUaGUgY2FjaGVkIHZhbHVlIG9mIG5vdygpLlxuICAgKi9cbiAgbm93OiBudWxsLFxuXG4gIC8qKlxuICAgKiAgVGhlIGNhY2hlZCB2YWx1ZSBvZiB0aW1lT2ZEYXkoKS5cbiAgICovXG4gIHRpbWVPZkRheTogbnVsbFxufTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/fhirpath@3.18.0/node_modules/fhirpath/src/constants.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/fhirpath@3.18.0/node_modules/fhirpath/src/datetime.js":
/*!***********************************************************************************!*\
  !*** ../node_modules/.pnpm/fhirpath@3.18.0/node_modules/fhirpath/src/datetime.js ***!
  \***********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var engine = {};\nconst types = __webpack_require__(/*! ./types */ \"(ssr)/../node_modules/.pnpm/fhirpath@3.18.0/node_modules/fhirpath/src/types.js\");\nconst constants = __webpack_require__(/*! ./constants */ \"(ssr)/../node_modules/.pnpm/fhirpath@3.18.0/node_modules/fhirpath/src/constants.js\");\nconst FP_Date = types.FP_Date;\nconst FP_DateTime = types.FP_DateTime;\nconst FP_Time = types.FP_Time;\n\n/**\n *  Implements FHIRPath now().\n */\nengine.now = function(){\n  if (!constants.now) {\n    // return new FP_DateTime((new Date()).toISOString());\n    // The above would construct an FP_DateTime with a timezone of \"Z\", which\n    // would not make a difference for computation, but if the end result of an\n    // expression is \"now()\", then it would look different when output to a user.\n    // Construct it ourselves to preserve timezone\n    var now = constants.nowDate; // a JS Date\n    var isoStr = FP_DateTime.isoDateTime(now);\n    constants.now = new FP_DateTime(isoStr);\n  }\n  return constants.now;\n};\n\n\n/**\n *  Implements FHIRPath today().  See comments in now(). This does not\n *  include a timezone offset.\n */\nengine.today = function(){\n  if (!constants.today) {\n    // Construct the string ourselves to preserve timezone\n    var now = constants.nowDate; // a JS Date\n    var isoStr = FP_Date.isoDate(now);\n    constants.today = new FP_Date(isoStr);\n  }\n  return constants.today;\n};\n\n/**\n *  Implements FHIRPath timeOfDay().  See comments in now(). This does not\n *  include a timezone offset.\n */\nengine.timeOfDay = function() {\n  if (!constants.timeOfDay) {\n    // Construct the string ourselves to preserve timezone\n    const now = constants.nowDate; // a JS Date\n    const isoStr = FP_DateTime.isoTime(now);\n    constants.timeOfDay = new FP_Time(isoStr);\n  }\n  return constants.timeOfDay;\n};\n\nmodule.exports = engine;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2ZoaXJwYXRoQDMuMTguMC9ub2RlX21vZHVsZXMvZmhpcnBhdGgvc3JjL2RhdGV0aW1lLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0EsY0FBYyxtQkFBTyxDQUFDLCtGQUFTO0FBQy9CLGtCQUFrQixtQkFBTyxDQUFDLHVHQUFhO0FBQ3ZDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQztBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQztBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUNBQW1DO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIi9Vc2Vycy9ldGhhbmtpbS9OZXN0b3IvbWVkZmV0Y2guanMvbm9kZV9tb2R1bGVzLy5wbnBtL2ZoaXJwYXRoQDMuMTguMC9ub2RlX21vZHVsZXMvZmhpcnBhdGgvc3JjL2RhdGV0aW1lLmpzIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBlbmdpbmUgPSB7fTtcbmNvbnN0IHR5cGVzID0gcmVxdWlyZSgnLi90eXBlcycpO1xuY29uc3QgY29uc3RhbnRzID0gcmVxdWlyZSgnLi9jb25zdGFudHMnKTtcbmNvbnN0IEZQX0RhdGUgPSB0eXBlcy5GUF9EYXRlO1xuY29uc3QgRlBfRGF0ZVRpbWUgPSB0eXBlcy5GUF9EYXRlVGltZTtcbmNvbnN0IEZQX1RpbWUgPSB0eXBlcy5GUF9UaW1lO1xuXG4vKipcbiAqICBJbXBsZW1lbnRzIEZISVJQYXRoIG5vdygpLlxuICovXG5lbmdpbmUubm93ID0gZnVuY3Rpb24oKXtcbiAgaWYgKCFjb25zdGFudHMubm93KSB7XG4gICAgLy8gcmV0dXJuIG5ldyBGUF9EYXRlVGltZSgobmV3IERhdGUoKSkudG9JU09TdHJpbmcoKSk7XG4gICAgLy8gVGhlIGFib3ZlIHdvdWxkIGNvbnN0cnVjdCBhbiBGUF9EYXRlVGltZSB3aXRoIGEgdGltZXpvbmUgb2YgXCJaXCIsIHdoaWNoXG4gICAgLy8gd291bGQgbm90IG1ha2UgYSBkaWZmZXJlbmNlIGZvciBjb21wdXRhdGlvbiwgYnV0IGlmIHRoZSBlbmQgcmVzdWx0IG9mIGFuXG4gICAgLy8gZXhwcmVzc2lvbiBpcyBcIm5vdygpXCIsIHRoZW4gaXQgd291bGQgbG9vayBkaWZmZXJlbnQgd2hlbiBvdXRwdXQgdG8gYSB1c2VyLlxuICAgIC8vIENvbnN0cnVjdCBpdCBvdXJzZWx2ZXMgdG8gcHJlc2VydmUgdGltZXpvbmVcbiAgICB2YXIgbm93ID0gY29uc3RhbnRzLm5vd0RhdGU7IC8vIGEgSlMgRGF0ZVxuICAgIHZhciBpc29TdHIgPSBGUF9EYXRlVGltZS5pc29EYXRlVGltZShub3cpO1xuICAgIGNvbnN0YW50cy5ub3cgPSBuZXcgRlBfRGF0ZVRpbWUoaXNvU3RyKTtcbiAgfVxuICByZXR1cm4gY29uc3RhbnRzLm5vdztcbn07XG5cblxuLyoqXG4gKiAgSW1wbGVtZW50cyBGSElSUGF0aCB0b2RheSgpLiAgU2VlIGNvbW1lbnRzIGluIG5vdygpLiBUaGlzIGRvZXMgbm90XG4gKiAgaW5jbHVkZSBhIHRpbWV6b25lIG9mZnNldC5cbiAqL1xuZW5naW5lLnRvZGF5ID0gZnVuY3Rpb24oKXtcbiAgaWYgKCFjb25zdGFudHMudG9kYXkpIHtcbiAgICAvLyBDb25zdHJ1Y3QgdGhlIHN0cmluZyBvdXJzZWx2ZXMgdG8gcHJlc2VydmUgdGltZXpvbmVcbiAgICB2YXIgbm93ID0gY29uc3RhbnRzLm5vd0RhdGU7IC8vIGEgSlMgRGF0ZVxuICAgIHZhciBpc29TdHIgPSBGUF9EYXRlLmlzb0RhdGUobm93KTtcbiAgICBjb25zdGFudHMudG9kYXkgPSBuZXcgRlBfRGF0ZShpc29TdHIpO1xuICB9XG4gIHJldHVybiBjb25zdGFudHMudG9kYXk7XG59O1xuXG4vKipcbiAqICBJbXBsZW1lbnRzIEZISVJQYXRoIHRpbWVPZkRheSgpLiAgU2VlIGNvbW1lbnRzIGluIG5vdygpLiBUaGlzIGRvZXMgbm90XG4gKiAgaW5jbHVkZSBhIHRpbWV6b25lIG9mZnNldC5cbiAqL1xuZW5naW5lLnRpbWVPZkRheSA9IGZ1bmN0aW9uKCkge1xuICBpZiAoIWNvbnN0YW50cy50aW1lT2ZEYXkpIHtcbiAgICAvLyBDb25zdHJ1Y3QgdGhlIHN0cmluZyBvdXJzZWx2ZXMgdG8gcHJlc2VydmUgdGltZXpvbmVcbiAgICBjb25zdCBub3cgPSBjb25zdGFudHMubm93RGF0ZTsgLy8gYSBKUyBEYXRlXG4gICAgY29uc3QgaXNvU3RyID0gRlBfRGF0ZVRpbWUuaXNvVGltZShub3cpO1xuICAgIGNvbnN0YW50cy50aW1lT2ZEYXkgPSBuZXcgRlBfVGltZShpc29TdHIpO1xuICB9XG4gIHJldHVybiBjb25zdGFudHMudGltZU9mRGF5O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBlbmdpbmU7XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/fhirpath@3.18.0/node_modules/fhirpath/src/datetime.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/fhirpath@3.18.0/node_modules/fhirpath/src/deep-equal.js":
/*!*************************************************************************************!*\
  !*** ../node_modules/.pnpm/fhirpath@3.18.0/node_modules/fhirpath/src/deep-equal.js ***!
  \*************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Originally copied from node-deep-equal\n// (https://github.com/substack/node-deep-equal), with modifications.\n// For the license for node-deep-equal, see the bottom of this file.\n\nconst {FP_Type, FP_Quantity, ResourceNode} = __webpack_require__(/*! ./types */ \"(ssr)/../node_modules/.pnpm/fhirpath@3.18.0/node_modules/fhirpath/src/types.js\");\nvar numbers = __webpack_require__(/*! ./numbers */ \"(ssr)/../node_modules/.pnpm/fhirpath@3.18.0/node_modules/fhirpath/src/numbers.js\");\nvar pSlice = Array.prototype.slice;\nvar objectKeys = Object.keys;\nvar isArguments = function (object) {\n  return Object.prototype.toString.call(object) === '[object Arguments]';\n};\n\nfunction isString(myVar) {\n  return (typeof myVar === 'string' || myVar instanceof String);\n}\n\nfunction isNumber(n) {\n  return !isNaN(parseFloat(n)) && isFinite(n);\n}\n\nfunction normalizeStr(x) {\n  return x.toUpperCase().replace(/\\s+/, ' ');\n}\n\n/**\n * Performs a deep comparison between two values to determine if they are equal.\n * When you need to compare many objects, you can use hashObject instead for\n * optimization (if changes are needed here, they are likely also needed there).\n * @param {any} v1 - one of the comparing objects\n * @param {any} v2 - one of the comparing objects\n * @param {Object} [opts] - comparison options\n * @param {boolean} [opts.fuzzy] - false (by default), if comparing objects for\n *   equality (see https://hl7.org/fhirpath/#equals).\n *   true, if comparing objects for equivalence\n *   (see https://hl7.org/fhirpath/#equivalent).\n * @return {boolean}\n */\nfunction deepEqual(v1, v2, opts) {\n  const v1IsResourceNode = v1 instanceof ResourceNode;\n  const v2IsResourceNode = v2 instanceof ResourceNode;\n  let actual = v1IsResourceNode ? v1.convertData() : v1;\n  let expected =  v2IsResourceNode ? v2.convertData() : v2;\n  if (!opts) opts = {};\n\n  // 7.1. All identical values are equivalent, as determined by ===.\n  if (actual === expected) {\n    return opts.fuzzy || !v1IsResourceNode || !v2IsResourceNode ||\n      deepEqual(v1._data, v2._data);\n  }\n\n  if (opts.fuzzy) {\n    if(isString(actual) && isString(expected)) {\n      return normalizeStr(actual) === normalizeStr(expected);\n    }\n    if(isNumber(actual) && isNumber(expected)) {\n      return numbers.isEquivalent(actual, expected);\n    }\n  }\n  else { // !opts.fuzzy\n    // If these are numbers, they need to be rounded to the maximum supported\n    // precision to remove floating point arithmetic errors (e.g. 0.1+0.1+0.1 should\n    // equal 0.3) before comparing.\n    if (typeof actual === 'number' && typeof expected === 'number') {\n      if(numbers.isEqual(actual, expected)) {\n        return v1IsResourceNode && v2IsResourceNode ?\n          deepEqual(v1._data, v2._data, opts) : true;\n      } else {\n        return false;\n      }\n    }\n  }\n\n  if (actual instanceof Date && expected instanceof Date) {\n    return (actual.getTime() === expected.getTime()) && (\n      opts.fuzzy || !v1IsResourceNode || !v2IsResourceNode ||\n      deepEqual(v1._data, v2._data)\n    );\n  } else if (!actual || !expected || typeof actual != 'object' && typeof expected != 'object') {\n    return (actual === expected) && (\n      opts.fuzzy || !v1IsResourceNode || !v2IsResourceNode ||\n      deepEqual(v1._data, v2._data)\n    );\n  }\n  else {\n    var actualIsFPT = actual instanceof FP_Type;\n    var expectedIsFPT = expected instanceof FP_Type;\n    if (actualIsFPT && expectedIsFPT) { // if both are FP_Type\n      if (opts.fuzzy) {\n        return actual.equivalentTo(expected);\n      } else {\n        let result = actual.equals(expected); // May return undefined\n        if (result) {\n          return !v1IsResourceNode || !v2IsResourceNode ||\n            deepEqual(v1._data, v2._data) &&\n            deepEqual(v1.data?.id, v2.data?.id) &&\n            deepEqual(v1.data?.extension, v2.data?.extension);\n        } else {\n          return result;\n        }\n      }\n    }\n    else if (actualIsFPT || expectedIsFPT) { // if only one is an FP_Type\n      let anotherIsNumber = false;\n      if (typeof actual == 'number') {\n        actual = new FP_Quantity(actual, \"'1'\");\n        anotherIsNumber = true;\n      }\n      if (typeof expected == 'number') {\n        expected = new FP_Quantity(expected, \"'1'\");\n        anotherIsNumber = true;\n      }\n      if (anotherIsNumber) {\n        return opts.fuzzy ? actual.equivalentTo(expected) :\n          actual.equals(expected);\n      }\n      return false;\n    }\n    // 7.4. For all other Object pairs, including Array objects, equivalence is\n    // determined by having the same number of owned properties (as verified\n    // with Object.prototype.hasOwnProperty.call), the same set of keys\n    // (although not necessarily the same order), equivalent values for every\n    // corresponding key, and an identical 'prototype' property. Note: this\n    // accounts for both named and indexed properties on Arrays.\n    return objEquiv(actual, expected, opts);\n  }\n}\n\nfunction isUndefinedOrNull(value) {\n  return value === null || value === undefined;\n}\n\nfunction objEquiv(a, b, opts) {\n  var i, key;\n  if (isUndefinedOrNull(a) || isUndefinedOrNull(b))\n    return false;\n  // an identical 'prototype' property.\n  if (a.prototype !== b.prototype) return false;\n  //~~~I've managed to break Object.keys through screwy arguments passing.\n  //   Converting to array solves the problem.\n  if(isArguments(a) || isArguments(b)) {\n    a = isArguments(a) ? pSlice.call(a) : a;\n    b = isArguments(b) ? pSlice.call(b) : b;\n    return deepEqual(a, b, opts);\n  }\n  try {\n    var ka = objectKeys(a), kb = objectKeys(b);\n  } catch (e) {//happens when one is a string literal and the other isn't\n    return false;\n  }\n  // having the same number of owned properties (keys incorporates\n  // hasOwnProperty)\n  if (ka.length != kb.length)\n    return false;\n  //the same set of keys (although not necessarily the same order),\n  ka.sort();\n  kb.sort();\n  //~~~cheap key test\n  for (i = ka.length - 1; i >= 0; i--) {\n    if (ka[i] != kb[i])\n      return false;\n  }\n  //equivalent values for every corresponding key, and\n  //~~~possibly expensive deep test\n  // If the length of the array is one, return the value of deepEqual (which can\n  // be \"undefined\".\n  if (ka.length === 1) {\n    key = ka[0];\n    return deepEqual(a[key], b[key], opts);\n  }\n  for (i = ka.length - 1; i >= 0; i--) {\n    key = ka[i];\n    if (!deepEqual(a[key], b[key], opts)) return false;\n  }\n  return typeof a === typeof b;\n}\n\nmodule.exports = {\n  deepEqual,\n  // Maximum collection length to use deepEqual(). When comparing a large number\n  // of collection items, it is more efficient to convert the items to strings\n  // using the hashObject() function and compare them.\n  maxCollSizeForDeepEqual: 6\n};\n\n// The license for node-deep-equal, on which the above code is based, is as\n// follows:\n//\n// This software is released under the MIT license:\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy of\n// this software and associated documentation files (the \"Software\"), to deal in\n// the Software without restriction, including without limitation the rights to\n// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\n// the Software, and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n// FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n// IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/fhirpath@3.18.0/node_modules/fhirpath/src/deep-equal.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/fhirpath@3.18.0/node_modules/fhirpath/src/equality.js":
/*!***********************************************************************************!*\
  !*** ../node_modules/.pnpm/fhirpath@3.18.0/node_modules/fhirpath/src/equality.js ***!
  \***********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// This file holds code to handle the FHIRPath Math functions.\n\nconst util = __webpack_require__(/*! ./utilities */ \"(ssr)/../node_modules/.pnpm/fhirpath@3.18.0/node_modules/fhirpath/src/utilities.js\");\nconst { deepEqual } = __webpack_require__(/*! ./deep-equal */ \"(ssr)/../node_modules/.pnpm/fhirpath@3.18.0/node_modules/fhirpath/src/deep-equal.js\");\nconst types = __webpack_require__(/*! ./types */ \"(ssr)/../node_modules/.pnpm/fhirpath@3.18.0/node_modules/fhirpath/src/types.js\");\nconst FP_Type = types.FP_Type;\nconst FP_DateTime = types.FP_DateTime;\n\nvar engine = {};\n\nfunction equality(x,y){\n  if(util.isEmpty(x) || util.isEmpty(y)) { return []; }\n  return deepEqual(x, y);\n}\n\nfunction equivalence(x,y){\n  if(util.isEmpty(x) && util.isEmpty(y)) { return [true]; }\n  if(util.isEmpty(x) || util.isEmpty(y)) { return []; }\n  return deepEqual(x, y, {fuzzy: true});\n}\n\nengine.equal = function(a, b){\n  return equality(a, b);\n};\n\nengine.unequal = function(a, b){\n  var eq = equality(a, b);\n  return eq === undefined ? undefined : !eq;\n};\n\nengine.equival = function(a, b){\n  return equivalence(a, b);\n};\n\nengine.unequival = function(a, b){\n  return !equivalence(a, b);\n};\n\n/**\n *  Checks that the types of a and b are suitable for comparison in an\n *  inequality expression.\n * @param a the left side of the inequality expression (which should be an array of\n *  one value).\n * @param b the right side of the inequality expression (which should be an array of\n *  one value).\n * @return the singleton values of the arrays a, and b.  If one was an FP_Type\n *  and the other was convertible, the converted value will be returned.\n */\nfunction typecheck(a, b){\n  util.assertOnlyOne(a, \"Singleton was expected\");\n  util.assertOnlyOne(b, \"Singleton was expected\");\n  a = util.valDataConverted(a[0]);\n  b = util.valDataConverted(b[0]);\n  if (a != null && b != null) {\n    let lClass = a instanceof FP_DateTime ? FP_DateTime : a.constructor;\n    let rClass = b instanceof FP_DateTime ? FP_DateTime : b.constructor;\n    if (lClass !== rClass) {\n      util.raiseError('Type of \"' + a + '\" (' + lClass.name + ') did not match type of \"' +\n        b + '\" (' + rClass.name + ')', 'InequalityExpression');\n    }\n  }\n  return [a, b];\n}\n\nengine.lt = function(a, b){\n  const [a0, b0] = typecheck(a,b);\n  if (a0 == null || b0 == null) {\n    return [];\n  }\n  if (a0 instanceof FP_Type) {\n    const compare = a0.compare(b0);\n    return compare === null ? [] : compare < 0;\n  }\n  return a0 < b0;\n};\n\nengine.gt = function(a, b){\n  const [a0, b0] = typecheck(a,b);\n  if (a0 == null || b0 == null) {\n    return [];\n  }\n  if (a0 instanceof FP_Type) {\n    const compare = a0.compare(b0);\n    return compare === null ? [] : compare > 0;\n  }\n  return a0 > b0;\n};\n\nengine.lte = function(a, b){\n  const [a0, b0] = typecheck(a,b);\n  if (a0 == null || b0 == null) {\n    return [];\n  }\n  if (a0 instanceof FP_Type) {\n    const compare = a0.compare(b0);\n    return compare === null ? [] : compare <= 0;\n  }\n  return  a0 <= b0;\n};\n\nengine.gte = function(a, b){\n  const [a0, b0] = typecheck(a,b);\n  if (a0 == null || b0 == null) {\n    return [];\n  }\n  if (a0 instanceof FP_Type) {\n    const compare = a0.compare(b0);\n    return compare === null ? [] : compare >= 0;\n  }\n  return a0 >= b0;\n};\n\n\nmodule.exports = engine;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2ZoaXJwYXRoQDMuMTguMC9ub2RlX21vZHVsZXMvZmhpcnBhdGgvc3JjL2VxdWFsaXR5LmpzIiwibWFwcGluZ3MiOiJBQUFBOztBQUVBLGFBQWEsbUJBQU8sQ0FBQyx1R0FBYTtBQUNsQyxRQUFRLFlBQVksRUFBRSxtQkFBTyxDQUFDLHlHQUFjO0FBQzVDLGNBQWMsbUJBQU8sQ0FBQywrRkFBUztBQUMvQjtBQUNBOztBQUVBOztBQUVBO0FBQ0EsMkNBQTJDO0FBQzNDO0FBQ0E7O0FBRUE7QUFDQSwyQ0FBMkM7QUFDM0MsMkNBQTJDO0FBQzNDLDBCQUEwQixZQUFZO0FBQ3RDOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBIiwic291cmNlcyI6WyIvVXNlcnMvZXRoYW5raW0vTmVzdG9yL21lZGZldGNoLmpzL25vZGVfbW9kdWxlcy8ucG5wbS9maGlycGF0aEAzLjE4LjAvbm9kZV9tb2R1bGVzL2ZoaXJwYXRoL3NyYy9lcXVhbGl0eS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBUaGlzIGZpbGUgaG9sZHMgY29kZSB0byBoYW5kbGUgdGhlIEZISVJQYXRoIE1hdGggZnVuY3Rpb25zLlxuXG5jb25zdCB1dGlsID0gcmVxdWlyZShcIi4vdXRpbGl0aWVzXCIpO1xuY29uc3QgeyBkZWVwRXF1YWwgfSA9IHJlcXVpcmUoJy4vZGVlcC1lcXVhbCcpO1xuY29uc3QgdHlwZXMgPSByZXF1aXJlKCcuL3R5cGVzJyk7XG5jb25zdCBGUF9UeXBlID0gdHlwZXMuRlBfVHlwZTtcbmNvbnN0IEZQX0RhdGVUaW1lID0gdHlwZXMuRlBfRGF0ZVRpbWU7XG5cbnZhciBlbmdpbmUgPSB7fTtcblxuZnVuY3Rpb24gZXF1YWxpdHkoeCx5KXtcbiAgaWYodXRpbC5pc0VtcHR5KHgpIHx8IHV0aWwuaXNFbXB0eSh5KSkgeyByZXR1cm4gW107IH1cbiAgcmV0dXJuIGRlZXBFcXVhbCh4LCB5KTtcbn1cblxuZnVuY3Rpb24gZXF1aXZhbGVuY2UoeCx5KXtcbiAgaWYodXRpbC5pc0VtcHR5KHgpICYmIHV0aWwuaXNFbXB0eSh5KSkgeyByZXR1cm4gW3RydWVdOyB9XG4gIGlmKHV0aWwuaXNFbXB0eSh4KSB8fCB1dGlsLmlzRW1wdHkoeSkpIHsgcmV0dXJuIFtdOyB9XG4gIHJldHVybiBkZWVwRXF1YWwoeCwgeSwge2Z1enp5OiB0cnVlfSk7XG59XG5cbmVuZ2luZS5lcXVhbCA9IGZ1bmN0aW9uKGEsIGIpe1xuICByZXR1cm4gZXF1YWxpdHkoYSwgYik7XG59O1xuXG5lbmdpbmUudW5lcXVhbCA9IGZ1bmN0aW9uKGEsIGIpe1xuICB2YXIgZXEgPSBlcXVhbGl0eShhLCBiKTtcbiAgcmV0dXJuIGVxID09PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiAhZXE7XG59O1xuXG5lbmdpbmUuZXF1aXZhbCA9IGZ1bmN0aW9uKGEsIGIpe1xuICByZXR1cm4gZXF1aXZhbGVuY2UoYSwgYik7XG59O1xuXG5lbmdpbmUudW5lcXVpdmFsID0gZnVuY3Rpb24oYSwgYil7XG4gIHJldHVybiAhZXF1aXZhbGVuY2UoYSwgYik7XG59O1xuXG4vKipcbiAqICBDaGVja3MgdGhhdCB0aGUgdHlwZXMgb2YgYSBhbmQgYiBhcmUgc3VpdGFibGUgZm9yIGNvbXBhcmlzb24gaW4gYW5cbiAqICBpbmVxdWFsaXR5IGV4cHJlc3Npb24uXG4gKiBAcGFyYW0gYSB0aGUgbGVmdCBzaWRlIG9mIHRoZSBpbmVxdWFsaXR5IGV4cHJlc3Npb24gKHdoaWNoIHNob3VsZCBiZSBhbiBhcnJheSBvZlxuICogIG9uZSB2YWx1ZSkuXG4gKiBAcGFyYW0gYiB0aGUgcmlnaHQgc2lkZSBvZiB0aGUgaW5lcXVhbGl0eSBleHByZXNzaW9uICh3aGljaCBzaG91bGQgYmUgYW4gYXJyYXkgb2ZcbiAqICBvbmUgdmFsdWUpLlxuICogQHJldHVybiB0aGUgc2luZ2xldG9uIHZhbHVlcyBvZiB0aGUgYXJyYXlzIGEsIGFuZCBiLiAgSWYgb25lIHdhcyBhbiBGUF9UeXBlXG4gKiAgYW5kIHRoZSBvdGhlciB3YXMgY29udmVydGlibGUsIHRoZSBjb252ZXJ0ZWQgdmFsdWUgd2lsbCBiZSByZXR1cm5lZC5cbiAqL1xuZnVuY3Rpb24gdHlwZWNoZWNrKGEsIGIpe1xuICB1dGlsLmFzc2VydE9ubHlPbmUoYSwgXCJTaW5nbGV0b24gd2FzIGV4cGVjdGVkXCIpO1xuICB1dGlsLmFzc2VydE9ubHlPbmUoYiwgXCJTaW5nbGV0b24gd2FzIGV4cGVjdGVkXCIpO1xuICBhID0gdXRpbC52YWxEYXRhQ29udmVydGVkKGFbMF0pO1xuICBiID0gdXRpbC52YWxEYXRhQ29udmVydGVkKGJbMF0pO1xuICBpZiAoYSAhPSBudWxsICYmIGIgIT0gbnVsbCkge1xuICAgIGxldCBsQ2xhc3MgPSBhIGluc3RhbmNlb2YgRlBfRGF0ZVRpbWUgPyBGUF9EYXRlVGltZSA6IGEuY29uc3RydWN0b3I7XG4gICAgbGV0IHJDbGFzcyA9IGIgaW5zdGFuY2VvZiBGUF9EYXRlVGltZSA/IEZQX0RhdGVUaW1lIDogYi5jb25zdHJ1Y3RvcjtcbiAgICBpZiAobENsYXNzICE9PSByQ2xhc3MpIHtcbiAgICAgIHV0aWwucmFpc2VFcnJvcignVHlwZSBvZiBcIicgKyBhICsgJ1wiICgnICsgbENsYXNzLm5hbWUgKyAnKSBkaWQgbm90IG1hdGNoIHR5cGUgb2YgXCInICtcbiAgICAgICAgYiArICdcIiAoJyArIHJDbGFzcy5uYW1lICsgJyknLCAnSW5lcXVhbGl0eUV4cHJlc3Npb24nKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIFthLCBiXTtcbn1cblxuZW5naW5lLmx0ID0gZnVuY3Rpb24oYSwgYil7XG4gIGNvbnN0IFthMCwgYjBdID0gdHlwZWNoZWNrKGEsYik7XG4gIGlmIChhMCA9PSBudWxsIHx8IGIwID09IG51bGwpIHtcbiAgICByZXR1cm4gW107XG4gIH1cbiAgaWYgKGEwIGluc3RhbmNlb2YgRlBfVHlwZSkge1xuICAgIGNvbnN0IGNvbXBhcmUgPSBhMC5jb21wYXJlKGIwKTtcbiAgICByZXR1cm4gY29tcGFyZSA9PT0gbnVsbCA/IFtdIDogY29tcGFyZSA8IDA7XG4gIH1cbiAgcmV0dXJuIGEwIDwgYjA7XG59O1xuXG5lbmdpbmUuZ3QgPSBmdW5jdGlvbihhLCBiKXtcbiAgY29uc3QgW2EwLCBiMF0gPSB0eXBlY2hlY2soYSxiKTtcbiAgaWYgKGEwID09IG51bGwgfHwgYjAgPT0gbnVsbCkge1xuICAgIHJldHVybiBbXTtcbiAgfVxuICBpZiAoYTAgaW5zdGFuY2VvZiBGUF9UeXBlKSB7XG4gICAgY29uc3QgY29tcGFyZSA9IGEwLmNvbXBhcmUoYjApO1xuICAgIHJldHVybiBjb21wYXJlID09PSBudWxsID8gW10gOiBjb21wYXJlID4gMDtcbiAgfVxuICByZXR1cm4gYTAgPiBiMDtcbn07XG5cbmVuZ2luZS5sdGUgPSBmdW5jdGlvbihhLCBiKXtcbiAgY29uc3QgW2EwLCBiMF0gPSB0eXBlY2hlY2soYSxiKTtcbiAgaWYgKGEwID09IG51bGwgfHwgYjAgPT0gbnVsbCkge1xuICAgIHJldHVybiBbXTtcbiAgfVxuICBpZiAoYTAgaW5zdGFuY2VvZiBGUF9UeXBlKSB7XG4gICAgY29uc3QgY29tcGFyZSA9IGEwLmNvbXBhcmUoYjApO1xuICAgIHJldHVybiBjb21wYXJlID09PSBudWxsID8gW10gOiBjb21wYXJlIDw9IDA7XG4gIH1cbiAgcmV0dXJuICBhMCA8PSBiMDtcbn07XG5cbmVuZ2luZS5ndGUgPSBmdW5jdGlvbihhLCBiKXtcbiAgY29uc3QgW2EwLCBiMF0gPSB0eXBlY2hlY2soYSxiKTtcbiAgaWYgKGEwID09IG51bGwgfHwgYjAgPT0gbnVsbCkge1xuICAgIHJldHVybiBbXTtcbiAgfVxuICBpZiAoYTAgaW5zdGFuY2VvZiBGUF9UeXBlKSB7XG4gICAgY29uc3QgY29tcGFyZSA9IGEwLmNvbXBhcmUoYjApO1xuICAgIHJldHVybiBjb21wYXJlID09PSBudWxsID8gW10gOiBjb21wYXJlID49IDA7XG4gIH1cbiAgcmV0dXJuIGEwID49IGIwO1xufTtcblxuXG5tb2R1bGUuZXhwb3J0cyA9IGVuZ2luZTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/fhirpath@3.18.0/node_modules/fhirpath/src/equality.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/fhirpath@3.18.0/node_modules/fhirpath/src/existence.js":
/*!************************************************************************************!*\
  !*** ../node_modules/.pnpm/fhirpath@3.18.0/node_modules/fhirpath/src/existence.js ***!
  \************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// This file holds code to hande the FHIRPath Existence functions (5.1 in the\n// specification).\n\nconst util = __webpack_require__(/*! ./utilities */ \"(ssr)/../node_modules/.pnpm/fhirpath@3.18.0/node_modules/fhirpath/src/utilities.js\");\nconst {whereMacro, distinctFn} = __webpack_require__(/*! ./filtering */ \"(ssr)/../node_modules/.pnpm/fhirpath@3.18.0/node_modules/fhirpath/src/filtering.js\");\nconst misc = __webpack_require__(/*! ./misc */ \"(ssr)/../node_modules/.pnpm/fhirpath@3.18.0/node_modules/fhirpath/src/misc.js\");\nconst hashObject = __webpack_require__(/*! ./hash-object */ \"(ssr)/../node_modules/.pnpm/fhirpath@3.18.0/node_modules/fhirpath/src/hash-object.js\");\nconst { deepEqual, maxCollSizeForDeepEqual } = __webpack_require__(/*! ./deep-equal */ \"(ssr)/../node_modules/.pnpm/fhirpath@3.18.0/node_modules/fhirpath/src/deep-equal.js\");\nconst {TypeInfo} = __webpack_require__(/*! ./types */ \"(ssr)/../node_modules/.pnpm/fhirpath@3.18.0/node_modules/fhirpath/src/types.js\");\n\nconst engine = {};\nengine.emptyFn = util.isEmpty;\n\nengine.notFn = function(coll) {\n  let d = misc.singleton(coll, 'Boolean');\n  return (typeof (d) === 'boolean') ? !d : [];\n};\n\nengine.existsMacro  = function(coll, expr) {\n  if (expr) {\n    const exprRes = whereMacro.call(this, coll, expr);\n    if (exprRes instanceof Promise) {\n      return exprRes.then(r => engine.existsMacro(r));\n    }\n    return engine.existsMacro(exprRes);\n  }\n  return !util.isEmpty(coll);\n};\n\nengine.allMacro = function(coll, expr) {\n  const promises = [];\n  for (let i=0, len=coll.length; i<len; ++i) {\n    this.$index = i;\n    const exprRes = expr(coll[i]);\n    if (exprRes instanceof Promise) {\n      promises.push(exprRes);\n    } else if(!util.isTrue(exprRes)){\n      return [false];\n    }\n  }\n  if (promises.length) {\n    return Promise.all(promises).then(r => r.some(i => !util.isTrue(i)) ? [false] : [true]);\n  }\n  return [true];\n};\n\nengine.allTrueFn  = function(x) {\n  let rtn = true;\n  for (let i=0, len=x.length; i<len && rtn; ++i) {\n    let xi = util.assertType(x[i], [\"boolean\"], \"allTrue\");\n    rtn = xi === true;\n  }\n  return [rtn];\n};\n\nengine.anyTrueFn  = function(x) {\n  let rtn = false;\n  for (let i=0, len=x.length; i<len && !rtn; ++i) {\n    let xi = util.assertType(x[i], [\"boolean\"], \"anyTrue\");\n    rtn = xi === true;\n  }\n  return [rtn];\n};\n\nengine.allFalseFn  = function(x) {\n  let rtn = true;\n  for (let i=0, len=x.length; i<len && rtn; ++i) {\n    let xi = util.assertType(x[i], [\"boolean\"], \"allFalse\");\n    rtn = xi === false;\n  }\n  return [rtn];\n};\n\nengine.anyFalseFn  = function(x) {\n  let rtn = false;\n  for (let i=0, len=x.length; i<len && !rtn; ++i) {\n    let xi = util.assertType(x[i], [\"boolean\"], \"anyFalse\");\n    rtn = xi === false;\n  }\n  return [rtn];\n};\n\n\n/**\n *  Returns true if coll1 is a subset of coll2.\n */\nfunction subsetOf(coll1, coll2) {\n  const coll1Length = coll1.length;\n  const coll2Length = coll2.length;\n  let rtn = coll1Length <= coll2Length;\n  if (rtn) {\n    const hasPrimitive = coll1.some(i => TypeInfo.isPrimitiveValue(i)) ||\n      coll2.some(i => TypeInfo.isPrimitiveValue(i));\n    if (!hasPrimitive && coll1Length + coll2Length > maxCollSizeForDeepEqual) {\n      // When we have more than maxCollSizeForDeepEqual items in input collections,\n      // we use a hash table (on JSON strings) for efficiency.\n      const c2Hash = coll2.reduce((hash, item) => {\n        hash[hashObject(item)] = true;\n        return hash;\n      }, {});\n      rtn = !coll1.some(item => !c2Hash[hashObject(item)]);\n    } else {\n      // Otherwise, it is more efficient to perform a deep comparison.\n      for (let p=0, pLen=coll1.length; p<pLen && rtn; ++p) {\n        let obj1 = util.valData(coll1[p]);\n        rtn = coll2.some(obj2 => deepEqual(obj1, util.valData(obj2)));\n      }\n    }\n  }\n  return rtn;\n}\n\nengine.subsetOfFn = function(coll1, coll2) {\n  return [subsetOf(coll1, coll2)];\n};\n\nengine.supersetOfFn = function(coll1, coll2) {\n  return [subsetOf(coll2, coll1)];\n};\n\nengine.isDistinctFn = function(x) {\n  return [x.length === distinctFn(x).length];\n};\n\nmodule.exports = engine;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2ZoaXJwYXRoQDMuMTguMC9ub2RlX21vZHVsZXMvZmhpcnBhdGgvc3JjL2V4aXN0ZW5jZS5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBOztBQUVBLGFBQWEsbUJBQU8sQ0FBQyx1R0FBYTtBQUNsQyxPQUFPLHdCQUF3QixFQUFFLG1CQUFPLENBQUMsdUdBQWE7QUFDdEQsYUFBYSxtQkFBTyxDQUFDLDZGQUFRO0FBQzdCLG1CQUFtQixtQkFBTyxDQUFDLDJHQUFlO0FBQzFDLFFBQVEscUNBQXFDLEVBQUUsbUJBQU8sQ0FBQyx5R0FBYztBQUNyRSxPQUFPLFVBQVUsRUFBRSxtQkFBTyxDQUFDLCtGQUFTOztBQUVwQztBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxpQ0FBaUMsT0FBTztBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSw4QkFBOEIsY0FBYztBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSw4QkFBOEIsZUFBZTtBQUM3QztBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSw4QkFBOEIsY0FBYztBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSw4QkFBOEIsZUFBZTtBQUM3QztBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU8sSUFBSTtBQUNYO0FBQ0EsTUFBTTtBQUNOO0FBQ0EsdUNBQXVDLGVBQWU7QUFDdEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIi9Vc2Vycy9ldGhhbmtpbS9OZXN0b3IvbWVkZmV0Y2guanMvbm9kZV9tb2R1bGVzLy5wbnBtL2ZoaXJwYXRoQDMuMTguMC9ub2RlX21vZHVsZXMvZmhpcnBhdGgvc3JjL2V4aXN0ZW5jZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBUaGlzIGZpbGUgaG9sZHMgY29kZSB0byBoYW5kZSB0aGUgRkhJUlBhdGggRXhpc3RlbmNlIGZ1bmN0aW9ucyAoNS4xIGluIHRoZVxuLy8gc3BlY2lmaWNhdGlvbikuXG5cbmNvbnN0IHV0aWwgPSByZXF1aXJlKFwiLi91dGlsaXRpZXNcIik7XG5jb25zdCB7d2hlcmVNYWNybywgZGlzdGluY3RGbn0gPSByZXF1aXJlKFwiLi9maWx0ZXJpbmdcIik7XG5jb25zdCBtaXNjID0gcmVxdWlyZShcIi4vbWlzY1wiKTtcbmNvbnN0IGhhc2hPYmplY3QgPSByZXF1aXJlKCcuL2hhc2gtb2JqZWN0Jyk7XG5jb25zdCB7IGRlZXBFcXVhbCwgbWF4Q29sbFNpemVGb3JEZWVwRXF1YWwgfSA9IHJlcXVpcmUoJy4vZGVlcC1lcXVhbCcpO1xuY29uc3Qge1R5cGVJbmZvfSA9IHJlcXVpcmUoJy4vdHlwZXMnKTtcblxuY29uc3QgZW5naW5lID0ge307XG5lbmdpbmUuZW1wdHlGbiA9IHV0aWwuaXNFbXB0eTtcblxuZW5naW5lLm5vdEZuID0gZnVuY3Rpb24oY29sbCkge1xuICBsZXQgZCA9IG1pc2Muc2luZ2xldG9uKGNvbGwsICdCb29sZWFuJyk7XG4gIHJldHVybiAodHlwZW9mIChkKSA9PT0gJ2Jvb2xlYW4nKSA/ICFkIDogW107XG59O1xuXG5lbmdpbmUuZXhpc3RzTWFjcm8gID0gZnVuY3Rpb24oY29sbCwgZXhwcikge1xuICBpZiAoZXhwcikge1xuICAgIGNvbnN0IGV4cHJSZXMgPSB3aGVyZU1hY3JvLmNhbGwodGhpcywgY29sbCwgZXhwcik7XG4gICAgaWYgKGV4cHJSZXMgaW5zdGFuY2VvZiBQcm9taXNlKSB7XG4gICAgICByZXR1cm4gZXhwclJlcy50aGVuKHIgPT4gZW5naW5lLmV4aXN0c01hY3JvKHIpKTtcbiAgICB9XG4gICAgcmV0dXJuIGVuZ2luZS5leGlzdHNNYWNybyhleHByUmVzKTtcbiAgfVxuICByZXR1cm4gIXV0aWwuaXNFbXB0eShjb2xsKTtcbn07XG5cbmVuZ2luZS5hbGxNYWNybyA9IGZ1bmN0aW9uKGNvbGwsIGV4cHIpIHtcbiAgY29uc3QgcHJvbWlzZXMgPSBbXTtcbiAgZm9yIChsZXQgaT0wLCBsZW49Y29sbC5sZW5ndGg7IGk8bGVuOyArK2kpIHtcbiAgICB0aGlzLiRpbmRleCA9IGk7XG4gICAgY29uc3QgZXhwclJlcyA9IGV4cHIoY29sbFtpXSk7XG4gICAgaWYgKGV4cHJSZXMgaW5zdGFuY2VvZiBQcm9taXNlKSB7XG4gICAgICBwcm9taXNlcy5wdXNoKGV4cHJSZXMpO1xuICAgIH0gZWxzZSBpZighdXRpbC5pc1RydWUoZXhwclJlcykpe1xuICAgICAgcmV0dXJuIFtmYWxzZV07XG4gICAgfVxuICB9XG4gIGlmIChwcm9taXNlcy5sZW5ndGgpIHtcbiAgICByZXR1cm4gUHJvbWlzZS5hbGwocHJvbWlzZXMpLnRoZW4ociA9PiByLnNvbWUoaSA9PiAhdXRpbC5pc1RydWUoaSkpID8gW2ZhbHNlXSA6IFt0cnVlXSk7XG4gIH1cbiAgcmV0dXJuIFt0cnVlXTtcbn07XG5cbmVuZ2luZS5hbGxUcnVlRm4gID0gZnVuY3Rpb24oeCkge1xuICBsZXQgcnRuID0gdHJ1ZTtcbiAgZm9yIChsZXQgaT0wLCBsZW49eC5sZW5ndGg7IGk8bGVuICYmIHJ0bjsgKytpKSB7XG4gICAgbGV0IHhpID0gdXRpbC5hc3NlcnRUeXBlKHhbaV0sIFtcImJvb2xlYW5cIl0sIFwiYWxsVHJ1ZVwiKTtcbiAgICBydG4gPSB4aSA9PT0gdHJ1ZTtcbiAgfVxuICByZXR1cm4gW3J0bl07XG59O1xuXG5lbmdpbmUuYW55VHJ1ZUZuICA9IGZ1bmN0aW9uKHgpIHtcbiAgbGV0IHJ0biA9IGZhbHNlO1xuICBmb3IgKGxldCBpPTAsIGxlbj14Lmxlbmd0aDsgaTxsZW4gJiYgIXJ0bjsgKytpKSB7XG4gICAgbGV0IHhpID0gdXRpbC5hc3NlcnRUeXBlKHhbaV0sIFtcImJvb2xlYW5cIl0sIFwiYW55VHJ1ZVwiKTtcbiAgICBydG4gPSB4aSA9PT0gdHJ1ZTtcbiAgfVxuICByZXR1cm4gW3J0bl07XG59O1xuXG5lbmdpbmUuYWxsRmFsc2VGbiAgPSBmdW5jdGlvbih4KSB7XG4gIGxldCBydG4gPSB0cnVlO1xuICBmb3IgKGxldCBpPTAsIGxlbj14Lmxlbmd0aDsgaTxsZW4gJiYgcnRuOyArK2kpIHtcbiAgICBsZXQgeGkgPSB1dGlsLmFzc2VydFR5cGUoeFtpXSwgW1wiYm9vbGVhblwiXSwgXCJhbGxGYWxzZVwiKTtcbiAgICBydG4gPSB4aSA9PT0gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIFtydG5dO1xufTtcblxuZW5naW5lLmFueUZhbHNlRm4gID0gZnVuY3Rpb24oeCkge1xuICBsZXQgcnRuID0gZmFsc2U7XG4gIGZvciAobGV0IGk9MCwgbGVuPXgubGVuZ3RoOyBpPGxlbiAmJiAhcnRuOyArK2kpIHtcbiAgICBsZXQgeGkgPSB1dGlsLmFzc2VydFR5cGUoeFtpXSwgW1wiYm9vbGVhblwiXSwgXCJhbnlGYWxzZVwiKTtcbiAgICBydG4gPSB4aSA9PT0gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIFtydG5dO1xufTtcblxuXG4vKipcbiAqICBSZXR1cm5zIHRydWUgaWYgY29sbDEgaXMgYSBzdWJzZXQgb2YgY29sbDIuXG4gKi9cbmZ1bmN0aW9uIHN1YnNldE9mKGNvbGwxLCBjb2xsMikge1xuICBjb25zdCBjb2xsMUxlbmd0aCA9IGNvbGwxLmxlbmd0aDtcbiAgY29uc3QgY29sbDJMZW5ndGggPSBjb2xsMi5sZW5ndGg7XG4gIGxldCBydG4gPSBjb2xsMUxlbmd0aCA8PSBjb2xsMkxlbmd0aDtcbiAgaWYgKHJ0bikge1xuICAgIGNvbnN0IGhhc1ByaW1pdGl2ZSA9IGNvbGwxLnNvbWUoaSA9PiBUeXBlSW5mby5pc1ByaW1pdGl2ZVZhbHVlKGkpKSB8fFxuICAgICAgY29sbDIuc29tZShpID0+IFR5cGVJbmZvLmlzUHJpbWl0aXZlVmFsdWUoaSkpO1xuICAgIGlmICghaGFzUHJpbWl0aXZlICYmIGNvbGwxTGVuZ3RoICsgY29sbDJMZW5ndGggPiBtYXhDb2xsU2l6ZUZvckRlZXBFcXVhbCkge1xuICAgICAgLy8gV2hlbiB3ZSBoYXZlIG1vcmUgdGhhbiBtYXhDb2xsU2l6ZUZvckRlZXBFcXVhbCBpdGVtcyBpbiBpbnB1dCBjb2xsZWN0aW9ucyxcbiAgICAgIC8vIHdlIHVzZSBhIGhhc2ggdGFibGUgKG9uIEpTT04gc3RyaW5ncykgZm9yIGVmZmljaWVuY3kuXG4gICAgICBjb25zdCBjMkhhc2ggPSBjb2xsMi5yZWR1Y2UoKGhhc2gsIGl0ZW0pID0+IHtcbiAgICAgICAgaGFzaFtoYXNoT2JqZWN0KGl0ZW0pXSA9IHRydWU7XG4gICAgICAgIHJldHVybiBoYXNoO1xuICAgICAgfSwge30pO1xuICAgICAgcnRuID0gIWNvbGwxLnNvbWUoaXRlbSA9PiAhYzJIYXNoW2hhc2hPYmplY3QoaXRlbSldKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gT3RoZXJ3aXNlLCBpdCBpcyBtb3JlIGVmZmljaWVudCB0byBwZXJmb3JtIGEgZGVlcCBjb21wYXJpc29uLlxuICAgICAgZm9yIChsZXQgcD0wLCBwTGVuPWNvbGwxLmxlbmd0aDsgcDxwTGVuICYmIHJ0bjsgKytwKSB7XG4gICAgICAgIGxldCBvYmoxID0gdXRpbC52YWxEYXRhKGNvbGwxW3BdKTtcbiAgICAgICAgcnRuID0gY29sbDIuc29tZShvYmoyID0+IGRlZXBFcXVhbChvYmoxLCB1dGlsLnZhbERhdGEob2JqMikpKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJ0bjtcbn1cblxuZW5naW5lLnN1YnNldE9mRm4gPSBmdW5jdGlvbihjb2xsMSwgY29sbDIpIHtcbiAgcmV0dXJuIFtzdWJzZXRPZihjb2xsMSwgY29sbDIpXTtcbn07XG5cbmVuZ2luZS5zdXBlcnNldE9mRm4gPSBmdW5jdGlvbihjb2xsMSwgY29sbDIpIHtcbiAgcmV0dXJuIFtzdWJzZXRPZihjb2xsMiwgY29sbDEpXTtcbn07XG5cbmVuZ2luZS5pc0Rpc3RpbmN0Rm4gPSBmdW5jdGlvbih4KSB7XG4gIHJldHVybiBbeC5sZW5ndGggPT09IGRpc3RpbmN0Rm4oeCkubGVuZ3RoXTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZW5naW5lO1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/fhirpath@3.18.0/node_modules/fhirpath/src/existence.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/fhirpath@3.18.0/node_modules/fhirpath/src/factory.js":
/*!**********************************************************************************!*\
  !*** ../node_modules/.pnpm/fhirpath@3.18.0/node_modules/fhirpath/src/factory.js ***!
  \**********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// This file contains a class that implements the Type Factory API.\n// See https://hl7.org/fhir/fhirpath.html#factory for details.\nconst util = __webpack_require__(/*! ./utilities */ \"(ssr)/../node_modules/.pnpm/fhirpath@3.18.0/node_modules/fhirpath/src/utilities.js\");\nconst { ResourceNode, TypeInfo, instantRE, timeRE, dateRE, dateTimeRE} = __webpack_require__(/*! ./types */ \"(ssr)/../node_modules/.pnpm/fhirpath@3.18.0/node_modules/fhirpath/src/types.js\");\n\nclass Factory {\n  // Same as fhirpath.invocationTable, but for %factory methods\n  static invocationTable = {\n    Extension: {fn: Factory.Extension, arity: {2: ['String', 'AnyAtRoot']}},\n    Identifier: {\n      fn: Factory.Identifier,\n      arity: {\n        1: ['String'],\n        2: ['String', 'String'],\n        3: ['String', 'String', 'String'],\n        4: ['String', 'String', 'String', 'Any']\n      }\n    },\n    HumanName: {\n      fn: Factory.HumanName,\n      arity: {\n        1: ['String'],\n        2: ['String', 'AnyAtRoot'],\n        3: ['String', 'AnyAtRoot', 'String'],\n        4: ['String', 'AnyAtRoot', 'String', 'String'],\n        5: ['String', 'AnyAtRoot', 'String', 'String', 'String'],\n        6: ['String', 'AnyAtRoot', 'String', 'String', 'String', 'String']\n      },\n    },\n    ContactPoint: {\n      fn: Factory.ContactPoint,\n      arity: {\n        1: ['String'],\n        2: ['String', 'String'],\n        3: ['String', 'String', 'String']\n      },\n    },\n    Address: {\n      fn: Factory.Address,\n      arity: {\n        1: ['AnyAtRoot'],\n        2: ['AnyAtRoot', 'String'],\n        3: ['AnyAtRoot', 'String', 'String'],\n        4: ['AnyAtRoot', 'String', 'String', 'String'],\n        5: ['AnyAtRoot', 'String', 'String', 'String', 'String'],\n        6: ['AnyAtRoot', 'String', 'String', 'String', 'String', 'String'],\n        7: ['AnyAtRoot', 'String', 'String', 'String', 'String', 'String', 'String']\n      },\n    },\n    Quantity: {\n      fn: Factory.Quantity,\n      arity: {\n        1: ['String'],\n        2: ['String', 'String'],\n        3: ['String', 'String', 'StringOrNumber'],\n        4: ['String', 'String', 'StringOrNumber', 'String']\n      }\n    },\n    Coding: {\n      fn: Factory.Coding,\n      arity: {\n        1: ['String'],\n        2: ['String', 'String'],\n        3: ['String', 'String', 'String'],\n        4: ['String', 'String', 'String', 'String']\n      }\n    },\n    CodeableConcept: {\n      fn: Factory.CodeableConcept,\n      arity: {\n        1: ['AnyAtRoot'],\n        2: ['AnyAtRoot', 'String']\n      }\n    },\n    create: {\n      fn: Factory.create,\n      arity: {\n        1: ['TypeSpecifier']\n      }\n    },\n    withExtension: {\n      fn: Factory.withExtension,\n      arity: {\n        3: ['AnyAtRoot', 'String', 'AnyAtRoot']\n      }\n    },\n    withProperty: {\n      fn: Factory.withProperty,\n      arity: {\n        3: ['AnyAtRoot', 'String', 'AnyAtRoot']\n      }\n    }\n  };\n\n  // Create functions to create primitive types and add these functions to the\n  // invocationTable.\n  static {\n    [\n      {\n        type: 'string',\n        getValue: function (v) {\n          if (typeof v  === 'string' && /^[\\s\\S]+$/.test(v)) {\n            return String(v);\n          }\n          throw new Error(`\"${v}\" is not a string.` );\n        }\n      },\n      {\n        type: 'integer',\n        getValue: (v) => {\n          const n = Number(v);\n          if (Number.isInteger(n)) {\n            return n;\n          }\n          throw new Error(`\"${v}\" is not an integer.` );\n        }\n      },\n      {\n        type: 'unsignedInt',\n        getValue: (v) => {\n          const n = Number(v);\n          if (Number.isInteger(n) && n >= 0) {\n            return n;\n          }\n          throw new Error(`\"${v}\" is not an unsignedInt.` );\n        }\n      },\n      {\n        type: 'positiveInt',\n        getValue: (v) => {\n          const n = Number(v);\n          if (Number.isInteger(n) && n > 0) {\n            return n;\n          }\n          throw new Error(`\"${v}\" is not a positiveInt.` );\n        }\n      },\n      {\n        type: 'integer64',\n        getValue: (v) => {\n          const n = Number(v);\n          if (Number.isInteger(n)) {\n            return n;\n          }\n          throw new Error(`\"${v}\" is not an integer.` );\n        }\n      },\n      {\n        type: 'markdown',\n        getValue(v) {\n          if (typeof v  === 'string' && /^[\\s\\S]+$/.test(v)) {\n            return v;\n          }\n          throw new Error(`\"${v}\" is not a markdown.` );\n        }\n      },\n      {\n        type: 'url',\n        getValue(v) {\n          if (typeof v  === 'string' && /^\\S*$/.test(v)) {\n            return v;\n          }\n          throw new Error(`\"${v}\" is not a url.` );\n        }\n      },\n      {\n        type: 'uri',\n        getValue(v) {\n          if (typeof v  === 'string' && /^\\S*$/.test(v)) {\n            return v;\n          }\n          throw new Error(`\"${v}\" is not a uri.` );\n        }\n      },\n      {\n        type: 'instant',\n        getValue(v) {\n          if (typeof v  === 'string' && instantRE.test(v)) {\n            return v;\n          }\n          throw new Error(`\"${v}\" is not an instant.` );\n        }\n      },\n      {\n        type: 'time',\n        getValue(v) {\n          if (typeof v  === 'string' && timeRE.test(v)) {\n            return v;\n          }\n          throw new Error(`\"${v}\" is not a time.` );\n        }\n      },\n      {\n        type: 'date',\n        getValue(v) {\n          if (typeof v  === 'string' && dateRE.test(v)) {\n            return v;\n          }\n          throw new Error(`\"${v}\" is not a date.` );\n        }\n      },\n      {\n        type: 'dateTime',\n        getValue(v) {\n          if (typeof v  === 'string' && dateTimeRE.test(v)) {\n            return v;\n          }\n          throw new Error(`\"${v}\" is not a dateTime.` );\n        }\n      },\n      {\n        type: 'base64Binary',\n        getValue(v) {\n          if (typeof v  === 'string' &&\n            /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/\n              .test(v)) {\n            return v;\n          }\n          throw new Error(`\"${v}\" is not a base64Binary.` );\n        }\n      },\n      {\n        type: 'decimal',\n        getValue(v) {\n          const n = Number(v);\n          if (Number.isNaN(n)) {\n            throw new Error(`\"${v}\" is not an decimal.` );\n          }\n          return n;\n        }\n      },\n      {\n        type: 'boolean',\n        getValue(v) {\n          if (v === true || v === 'true') {\n            return true;\n          } else if (v === false || v === 'false') {\n            return false;\n          } else {\n            throw new Error(`\"${v}\" is not a boolean.` );\n          }\n        }\n      },\n      {\n        type: 'code',\n        getValue(v) {\n          if (typeof v  === 'string' && /^\\S+( \\S+)*$/.test(v)) {\n            return v;\n          }\n          throw new Error(`\"${v}\" is not a code.` );\n        }\n      },\n      {\n        type: 'id',\n        getValue(v) {\n          if (typeof v  === 'string' && /^[A-Za-z0-9\\-.]{1,64}$/.test(v)) {\n            return v;\n          }\n          throw new Error(`\"${v}\" is not an id.` );\n        }\n      },\n      {\n        type: 'oid',\n        getValue(v) {\n          if (typeof v  === 'string' && /^urn:oid:[0-2](\\.(0|[1-9][0-9]*))+$/.test(v)) {\n            return v;\n          }\n          throw new Error(`\"${v}\" is not an oid.` );\n        }\n      },\n      {\n        type: 'uuid',\n        getValue(v) {\n          if (typeof v  === 'string' && /^urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/.test(v)) {\n            return v;\n          }\n          throw new Error(`\"${v}\" is not an uuid.` );\n        }\n      },\n      {\n        type: 'canonical',\n        getValue(v) {\n          if (typeof v  === 'string' && /^\\S*$/.test(v)) {\n            return v;\n          }\n          throw new Error(`\"${v}\" is not an canonical.` );\n        }\n      }\n    ].forEach(({type: primitiveType, getValue}) => {\n      /**\n       * Creates an instance of the type with the value and possibly one or more\n       * extensions.\n       * See primitive type descriptions here:\n       * https://hl7.org/fhir/datatypes.html#primitive\n       * @param {Factory[]} self - an array with one element, which is the\n       *  Factory class.\n       * @param {*} valueColl - a collection that should contain a single value\n       *  of a primitive type.\n       * @param {Extension[]} [extensions] - an optional array of Extensions.\n       * @return {ResourceNode} - a new ResourceNode.\n       */\n      Factory[primitiveType] = function (self, valueColl, extensions) {\n        let data;\n        if (valueColl.length > 1) {\n          throw new Error('Unexpected collection ' + JSON.stringify(valueColl) +\n            ` as a value for %factory.${primitiveType}(value, extensions)`);\n        } else if (valueColl.length === 0) {\n          data = null;\n        } else {\n          const v = util.valData(valueColl[0]);\n          if (v == null) {\n            data = null;\n          } if (typeof v !== 'object') {\n            data = getValue(v);\n          } else {\n            throw new Error(`\"${v}\" is not a ${primitiveType}` );\n          }\n        }\n\n        let _data = null;\n        if (extensions?.length > 0) {\n          _data = {\n            extension: extensions.map(e => {\n              const extensionDataType = TypeInfo.fromValue(e);\n              if (TypeInfo.isType(extensionDataType.name, 'Extension')) {\n                return util.valData(e);\n              } else {\n                throw new Error(`Expected \"FHIR.Extension\", got \"${extensionDataType}\"` );\n              }\n            })\n          };\n        }\n\n        return ResourceNode.makeResNode(data, null, primitiveType, _data, primitiveType);\n      };\n\n      Factory.invocationTable[primitiveType] = {\n        fn: Factory[primitiveType],\n        arity: {1: ['AnyAtRoot'], 2: ['AnyAtRoot', 'Any']}\n      };\n    });\n  }\n\n  /**\n   * Creates an extension with the given url and value\n   * @param {Factory[]} self - an array with one element, which is the Factory\n   *  class.\n   * @param {string} url - a string value that identifies the extension\n   * @param {*} value - the value of the extension (any valid type for\n   *  extension.value[x]).\n   * @return {ResourceNode}\n   */\n  static Extension(self, url, value) {\n    if (value.length !== 1) {\n      if (value.length > 1) {\n        throw new Error(\"Unexpected collection \" + JSON.stringify(value) +\n          \" as a value for %factory.Extension(url, value)\");\n      }\n\n      if (value.length === 0) {\n        throw new Error(\"Unexpected empty collection \" + JSON.stringify(value) +\n          \" as a value for %factory.Extension(url, value)\");\n      }\n    } else {\n      return ResourceNode.makeResNode(Factory.createExtensionObject(url, value[0]),\n        null, 'Extension', null, 'Extension');\n    }\n  }\n\n  /**\n   * Creates an object to store the extension value.\n   * @param {string} url - a string value that identifies the extension\n   * @param {*} value - the value of the extension (any valid type for\n   *  extension.value[x]).\n   * @return {{[p: string]: *, url}}\n   */\n  static createExtensionObject(url, value) {\n    const valuePropertyName = 'value' +\n      TypeInfo.fromValue(value).name.replace(/^\\w/, c => c.toUpperCase());\n    return {\n      url,\n      [valuePropertyName]: util.valData(value)\n    };\n  }\n\n  /**\n   * Creates an identifier with the given properties.\n   * @param {Factory[]} self - an array with one element, which is the Factory\n   *  class.\n   * @param {string} system - a string value that goes in Identifier.system.\n   * @param {string} value - a string value that goes in Identifier.value.\n   * @param {string} use - a string value that goes in Identifier.use.\n   * @param {ResourceNode[]} typeColl - a CodeableConcept that goes in\n   *  Identifier.type.\n   * @return {ResourceNode}\n   */\n  static Identifier (self, system, value, use, typeColl) {\n    if (typeColl?.length > 1) {\n      throw new Error(\"Unexpected collection \" + JSON.stringify(typeColl) +\n        \" as a type for %factory.Identifier{system, value, use, type)\");\n    }\n    const data = {};\n    if (util.isSome(system)) {\n      data.system = system;\n    }\n    if (util.isSome(value)) {\n      data.value = value;\n    }\n    if (util.isSome(use)) {\n      data.use = use;\n    }\n    if (util.isSome(typeColl)) {\n      const typeInfo = TypeInfo.fromValue(typeColl[0]);\n      if (!TypeInfo.isType(typeInfo.name, 'CodeableConcept')) {\n        throw new Error(`Expected \"FHIR.CodeableConcept\", got \"${typeInfo}\"` );\n      }\n      data.type = typeColl[0];\n    }\n    return ResourceNode.makeResNode(data, null, 'Identifier', null,\n      'Identifier');\n  }\n\n  /**\n   * Create a human name with the given properties.\n   * @param {Factory[]} self - an array with one element, which is the Factory\n   *  class.\n   * @param {string} family - a string value that goes in HumanName.system.\n   * @param {ResourceNode[]} givenColl - a collection of string values that goes\n   *  in HumanName.given.\n   * @param {string} prefix - a string value that goes in HumanName.prefix.\n   * @param {string} suffix - a string value that goes in HumanName.suffix.\n   * @param {string} text - a string value that goes in HumanName.text.\n   * @param {string} use - a string value that goes in HumanName.use.\n   * @return {ResourceNode}\n   */\n  static HumanName(self, family, givenColl, prefix, suffix, text, use) {\n    const data = {};\n    if (util.isSome(family)) {\n      data.family = family;\n    }\n    if (util.isSome(givenColl)) {\n      data.given = givenColl.map(given => {\n        const v = util.valData(given);\n        if (typeof v === \"string\") {\n          return v;\n        }\n        throw new Error(`Expected string, but got: ${JSON.stringify(v)}`);\n      });\n    }\n    if (util.isSome(prefix)) {\n      data.prefix = prefix;\n    }\n    if (util.isSome(suffix)) {\n      data.suffix = suffix;\n    }\n    if (util.isSome(text)) {\n      data.text = text;\n    }\n    if (util.isSome(use)) {\n      data.use = use;\n    }\n    return ResourceNode.makeResNode(data, null, 'HumanName', null,\n      'HumanName');\n  }\n\n  /**\n   * Creates a ContactPoint.\n   * @param {Factory[]} self - an array with one element, which is the Factory\n   *  class.\n   * @param {string} system - a string value that goes in ContactPoint.system.\n   * @param {string} value - a string value that goes in ContactPoint.value.\n   * @param {string} use - a string value that goes in ContactPoint.use.\n   * @return {ResourceNode}\n   */\n  static ContactPoint(self, system, value, use) {\n    const data = {};\n    if (util.isSome(system)) {\n      data.system = system;\n    }\n    if (util.isSome(value)) {\n      data.value = value;\n    }\n    if (util.isSome(use)) {\n      data.use = use;\n    }\n    return ResourceNode.makeResNode(data, null, 'ContactPoint', null,\n      'ContactPoint');\n  }\n\n  /**\n   * Creates an Address\n   * @param {Factory[]} self - an array with one element, which is the Factory\n   *  class.\n   * @param {ResourceNode[]} lineColl - a collection of string values that goes\n   *  in Address.line.\n   * @param {string} city - a string value that goes in Address.city.\n   * @param {string} state - a string value that goes in Address.state.\n   * @param {string} postalCode - a string value that goes in Address.postalCode.\n   * @param {string} country - a string value that goes in Address.country.\n   * @param {string} use - a string value that goes in Address.use.\n   * @param {string} type - a string value that goes in Address.type.\n   * @return {ResourceNode}\n   */\n  static Address(self, lineColl, city, state, postalCode, country, use, type) {\n    const data = {};\n    if (util.isSome(lineColl)) {\n      data.line = lineColl.map(line => {\n        const v = util.valData(line);\n        if (typeof v === \"string\") {\n          return v;\n        }\n        throw new Error(`Expected string, but got: ${JSON.stringify(v)}`);\n      });\n    }\n    if (util.isSome(city)) {\n      data.city = city;\n    }\n    if (util.isSome(state)) {\n      data.state = state;\n    }\n    if (util.isSome(postalCode)) {\n      data.postalCode = postalCode;\n    }\n    if (util.isSome(country)) {\n      data.country = country;\n    }\n    if (util.isSome(use)) {\n      data.use = use;\n    }\n    if (util.isSome(type)) {\n      data.type = type;\n    }\n    return ResourceNode.makeResNode(data, null, 'Address', null,\n      'Address');\n  }\n\n  /**\n   * Creates a Quantity.\n   * @param {Factory[]} self - an array with one element, which is the Factory\n   *  class.\n   * @param {string} system - a string value that goes in Quantity.system.\n   * @param {string} code - a string value that goes in Quantity.code.\n   * @param {string} value - a string or decimal value that goes in\n   *  Quantity.value.\n   * @param {string} unit - a string value that goes in Quantity.unit.\n   * @return {ResourceNode}\n   */\n  static Quantity(self, system, code, value, unit) {\n    const data = {};\n    if (util.isSome(system)) {\n      data.system = system;\n    }\n    if (util.isSome(code)) {\n      data.code = code;\n    }\n    if (util.isSome(value)) {\n      data.value = Number(value);\n    }\n    if (util.isSome(unit)) {\n      data.unit = unit;\n    }\n    return ResourceNode.makeResNode(data, null, 'Quantity', null,\n      'Quantity');\n  }\n\n  /**\n   * Creates a Coding.\n   * @param {Factory[]} self - an array with one element, which is the Factory\n   *  class.\n   * @param {string} system - a string value that goes in Coding.system.\n   * @param {string} code - a string value that goes in Coding.code.\n   * @param {string} display - a string value that goes in Coding.display.\n   * @param {string} version - a string value that goes in Coding.version.\n   * @return {ResourceNode}\n   */\n  static Coding(self, system, code, display, version) {\n    const data = {};\n    if (util.isSome(system)) {\n      data.system = system;\n    }\n    if (util.isSome(code)) {\n      data.code = code;\n    }\n    if (util.isSome(display)) {\n      data.display = display;\n    }\n    if (util.isSome(version)) {\n      data.version = version;\n    }\n    return ResourceNode.makeResNode(data, null, 'Coding', null,\n      'Coding');\n  }\n\n  /**\n   * Creates a CodeableConcept.\n   * @param {Factory[]} self - an array with one element, which is the Factory\n   *  class.\n   * @param {ResourceNode[]} valueColl - a collection of Coding that goes in\n   *  CodeableConcept.coding.\n   * @param {string} text - a string value that goes in CodeableConcept.text.\n   * @return {ResourceNode}\n   */\n  static CodeableConcept(self, valueColl, text) {\n    const data = valueColl?.length > 0 ?\n      {\n        coding: valueColl.map(coding => {\n          if (coding instanceof ResourceNode &&\n            coding.getTypeInfo().name === 'Coding') {\n            return util.valData(coding);\n          }\n          throw new Error(\"Unexpected value \" + JSON.stringify(coding) +\n            \"; expected value of type Coding\");\n        })\n      }\n      : {};\n\n    if (util.isSome(text)) {\n      data.text = text;\n    }\n\n    return ResourceNode.makeResNode(data, null, 'CodeableConcept', null,\n      'CodeableConcept');\n  }\n\n  /**\n   * Create an instance of the named type.\n   * @param {Factory[]} self - an array with one element that refers to\n   *  the current Factory instance.\n   * @param {TypeInfo} typeInfo - a value that is the type to create.\n   * @return {ResourceNode}\n   */\n  static create(self, typeInfo) {\n    if (typeInfo.namespace === TypeInfo.System) {\n      throw new Error('%factory.create(type) doesn\\'t support system types.');\n    }\n    return ResourceNode.makeResNode(null, null, typeInfo.name, null,\n      typeInfo.name);\n  }\n\n  /**\n   * Add an extension, and return the new type.\n   * @param {Factory[]} self - an array with one element that refers to\n   *  the current Factory instance.\n   * @param {ResourceNode[]} instanceColl - a collection that should contain the\n   *  instance to which the extension is to be added.\n   * @param {string} url - a string value that goes in Extension.url.\n   *  specification this could also be an actual ValueSet, but I don't want to\n   *  complicate this example.\n   * @param {ResourceNode[]} value - the value of the extension.\n   * @return {ResourceNode|[]}\n   */\n  static withExtension(self, instanceColl, url, value) {\n    if (instanceColl.length > 1 ) {\n      throw  new Error(\"Unexpected collection \" + JSON.stringify(instanceColl) +\n        \" as an instance for %factory.withExtension(instance, url, value)\");\n    }\n\n    if (value.length !== 1) {\n      if (value.length > 1) {\n        throw new Error(\"Unexpected collection \" + JSON.stringify(value) +\n          \" as a value for %factory.withExtension(instance, url, value)\");\n      }\n\n      if (value.length === 0) {\n        throw new Error(\"Unexpected empty collection \" + JSON.stringify(value) +\n          \" as a value for %factory.withExtension(instance, url, value)\");\n      }\n    }\n\n    if (instanceColl.length === 0) {\n      return [];\n    }\n\n    const instance = instanceColl[0];\n\n    if (instance instanceof ResourceNode) {\n      let data = instance.data;\n      let _data = instance._data;\n      if (TypeInfo.isPrimitive(instance.getTypeInfo())) {\n        _data = {\n          ...(instance._data || {}),\n          extension: [\n            ...(instance._data?.extension || []),\n            Factory.createExtensionObject(url, value[0])\n          ]\n        };\n      } else {\n        data = {\n          ...(instance.data || {}),\n          extension: [\n            ...(instance.data?.extension || []),\n            Factory.createExtensionObject(url, value[0])\n          ]\n        };\n      }\n      return  ResourceNode.makeResNode(data, null, instance.path, _data,\n        instance.fhirNodeDataType);\n    } else {\n      throw new Error('Expected a ResourceNode.');\n    }\n  }\n\n  /**\n   * Set a property value, and return the new type.\n   * @param {Factory[]} self - an array with one element that refers to\n   *  the current Factory instance.\n   * @param {ResourceNode[]} instanceColl - a collection that should contain the\n   *  instance to set the property on.\n   * @param {string} name - a string value that identifies the property to set.\n   * @param {string} value - the value of the property\n   * @return {ResourceNode|*[]}\n   */\n  static withProperty(self, instanceColl, name, value) {\n    if (instanceColl.length > 1 ) {\n      throw  new Error(\"Unexpected collection \" + JSON.stringify(instanceColl) +\n        \" as an instance for %factory.withProperty(instance, name, value)\");\n    }\n\n    if (value.length !== 1) {\n      if (value.length > 1) {\n        throw new Error(\"Unexpected collection \" + JSON.stringify(value) +\n          \" as a value for %factory.withProperty(instance, name, value)\");\n      }\n\n      if (value.length === 0) {\n        throw new Error(\"Unexpected empty collection \" + JSON.stringify(value) +\n          \" as a value for %factory.withProperty(instance, name, value)\");\n      }\n    }\n\n    if (instanceColl.length === 0) {\n      return [];\n    }\n\n    const instance = instanceColl[0];\n\n    if (instance instanceof ResourceNode) {\n      let data = instance.data;\n      let _data = instance._data;\n      if (TypeInfo.isPrimitive(instance.getTypeInfo())) {\n        _data = {\n          ...(instance._data || {}),\n          [name]: util.valData(value[0]),\n          ...(value[0]?._data ? { ['_' + name]: value[0]._data } : {})\n        };\n      } else {\n        data = {\n          ...(instance.data || {}),\n          [name]: util.valData(value[0]),\n          ...(value[0]?._data ? { ['_' + name]: value[0]._data } : {})\n        };\n      }\n      return  ResourceNode.makeResNode(data, null, instance.path, _data,\n        instance.fhirNodeDataType);\n    } else {\n      throw new Error('Expected a ResourceNode.');\n    }\n  }\n\n}\n\nmodule.exports = Factory;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2ZoaXJwYXRoQDMuMTguMC9ub2RlX21vZHVsZXMvZmhpcnBhdGgvc3JjL2ZhY3RvcnkuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBLGFBQWEsbUJBQU8sQ0FBQyx1R0FBYTtBQUNsQyxRQUFRLCtEQUErRCxFQUFFLG1CQUFPLENBQUMsK0ZBQVM7O0FBRTFGO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQiwrQkFBK0IsNEJBQTRCO0FBQzNFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QixFQUFFO0FBQ2hDO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLEVBQUU7QUFDaEM7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsRUFBRTtBQUNoQztBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QixFQUFFO0FBQ2hDO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLEVBQUU7QUFDaEM7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLEVBQUU7QUFDaEM7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLEVBQUU7QUFDaEM7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLEVBQUU7QUFDaEM7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLEVBQUU7QUFDaEM7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLEVBQUU7QUFDaEM7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLEVBQUU7QUFDaEM7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLEVBQUU7QUFDaEM7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0IsRUFBRSxtQkFBbUIsRUFBRSxpQkFBaUIsRUFBRTtBQUN6RTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsRUFBRTtBQUNoQztBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDLEVBQUU7QUFDbEM7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQSxZQUFZO0FBQ1osZ0NBQWdDLEVBQUU7QUFDbEM7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsRUFBRTtBQUNoQztBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQSx5REFBeUQsS0FBSztBQUM5RDtBQUNBO0FBQ0EsOEJBQThCLEVBQUU7QUFDaEM7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLEVBQUU7QUFDaEM7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsNERBQTRELEVBQUUsVUFBVSxFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQUUsVUFBVSxHQUFHO0FBQy9HO0FBQ0E7QUFDQSw4QkFBOEIsRUFBRTtBQUNoQztBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsRUFBRTtBQUNoQztBQUNBO0FBQ0EsZ0JBQWdCLDhCQUE4QjtBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLFdBQVc7QUFDNUI7QUFDQSxpQkFBaUIsR0FBRztBQUNwQjtBQUNBLGlCQUFpQixhQUFhO0FBQzlCLGtCQUFrQixjQUFjO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3Q0FBd0MsY0FBYztBQUN0RCxVQUFVO0FBQ1Y7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0EsWUFBWTtBQUNaLGdDQUFnQyxFQUFFLGFBQWEsY0FBYztBQUM3RDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCO0FBQ2hCLG1FQUFtRSxrQkFBa0I7QUFDckY7QUFDQSxhQUFhO0FBQ2I7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7QUFDQTtBQUNBLGFBQWEsV0FBVztBQUN4QjtBQUNBLGFBQWEsUUFBUTtBQUNyQixhQUFhLEdBQUc7QUFDaEI7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGFBQWEsUUFBUTtBQUNyQixhQUFhLEdBQUc7QUFDaEI7QUFDQSxlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxhQUFhLFdBQVc7QUFDeEI7QUFDQSxhQUFhLFFBQVE7QUFDckIsYUFBYSxRQUFRO0FBQ3JCLGFBQWEsUUFBUTtBQUNyQixhQUFhLGdCQUFnQjtBQUM3QjtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRDQUE0QztBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUVBQWlFLFNBQVM7QUFDMUU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxhQUFhLFdBQVc7QUFDeEI7QUFDQSxhQUFhLFFBQVE7QUFDckIsYUFBYSxnQkFBZ0I7QUFDN0I7QUFDQSxhQUFhLFFBQVE7QUFDckIsYUFBYSxRQUFRO0FBQ3JCLGFBQWEsUUFBUTtBQUNyQixhQUFhLFFBQVE7QUFDckIsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFEQUFxRCxrQkFBa0I7QUFDdkUsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxhQUFhLFdBQVc7QUFDeEI7QUFDQSxhQUFhLFFBQVE7QUFDckIsYUFBYSxRQUFRO0FBQ3JCLGFBQWEsUUFBUTtBQUNyQixjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxhQUFhLFdBQVc7QUFDeEI7QUFDQSxhQUFhLGdCQUFnQjtBQUM3QjtBQUNBLGFBQWEsUUFBUTtBQUNyQixhQUFhLFFBQVE7QUFDckIsYUFBYSxRQUFRO0FBQ3JCLGFBQWEsUUFBUTtBQUNyQixhQUFhLFFBQVE7QUFDckIsYUFBYSxRQUFRO0FBQ3JCLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxREFBcUQsa0JBQWtCO0FBQ3ZFLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsYUFBYSxXQUFXO0FBQ3hCO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCLGFBQWEsUUFBUTtBQUNyQixhQUFhLFFBQVE7QUFDckI7QUFDQSxhQUFhLFFBQVE7QUFDckIsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsYUFBYSxXQUFXO0FBQ3hCO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCLGFBQWEsUUFBUTtBQUNyQixhQUFhLFFBQVE7QUFDckIsYUFBYSxRQUFRO0FBQ3JCLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGFBQWEsV0FBVztBQUN4QjtBQUNBLGFBQWEsZ0JBQWdCO0FBQzdCO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZixTQUFTO0FBQ1Q7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxhQUFhLFdBQVc7QUFDeEI7QUFDQSxhQUFhLFVBQVU7QUFDdkIsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGFBQWEsV0FBVztBQUN4QjtBQUNBLGFBQWEsZ0JBQWdCO0FBQzdCO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCO0FBQ0E7QUFDQSxhQUFhLGdCQUFnQjtBQUM3QixjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtDQUFrQztBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0EsaUNBQWlDO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxhQUFhLFdBQVc7QUFDeEI7QUFDQSxhQUFhLGdCQUFnQjtBQUM3QjtBQUNBLGFBQWEsUUFBUTtBQUNyQixhQUFhLFFBQVE7QUFDckIsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQ0FBa0M7QUFDbEM7QUFDQSxrQ0FBa0MsK0JBQStCLElBQUk7QUFDckU7QUFDQSxRQUFRO0FBQ1I7QUFDQSxpQ0FBaUM7QUFDakM7QUFDQSxrQ0FBa0MsK0JBQStCLElBQUk7QUFDckU7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBOztBQUVBIiwic291cmNlcyI6WyIvVXNlcnMvZXRoYW5raW0vTmVzdG9yL21lZGZldGNoLmpzL25vZGVfbW9kdWxlcy8ucG5wbS9maGlycGF0aEAzLjE4LjAvbm9kZV9tb2R1bGVzL2ZoaXJwYXRoL3NyYy9mYWN0b3J5LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIFRoaXMgZmlsZSBjb250YWlucyBhIGNsYXNzIHRoYXQgaW1wbGVtZW50cyB0aGUgVHlwZSBGYWN0b3J5IEFQSS5cbi8vIFNlZSBodHRwczovL2hsNy5vcmcvZmhpci9maGlycGF0aC5odG1sI2ZhY3RvcnkgZm9yIGRldGFpbHMuXG5jb25zdCB1dGlsID0gcmVxdWlyZShcIi4vdXRpbGl0aWVzXCIpO1xuY29uc3QgeyBSZXNvdXJjZU5vZGUsIFR5cGVJbmZvLCBpbnN0YW50UkUsIHRpbWVSRSwgZGF0ZVJFLCBkYXRlVGltZVJFfSA9IHJlcXVpcmUoXCIuL3R5cGVzXCIpO1xuXG5jbGFzcyBGYWN0b3J5IHtcbiAgLy8gU2FtZSBhcyBmaGlycGF0aC5pbnZvY2F0aW9uVGFibGUsIGJ1dCBmb3IgJWZhY3RvcnkgbWV0aG9kc1xuICBzdGF0aWMgaW52b2NhdGlvblRhYmxlID0ge1xuICAgIEV4dGVuc2lvbjoge2ZuOiBGYWN0b3J5LkV4dGVuc2lvbiwgYXJpdHk6IHsyOiBbJ1N0cmluZycsICdBbnlBdFJvb3QnXX19LFxuICAgIElkZW50aWZpZXI6IHtcbiAgICAgIGZuOiBGYWN0b3J5LklkZW50aWZpZXIsXG4gICAgICBhcml0eToge1xuICAgICAgICAxOiBbJ1N0cmluZyddLFxuICAgICAgICAyOiBbJ1N0cmluZycsICdTdHJpbmcnXSxcbiAgICAgICAgMzogWydTdHJpbmcnLCAnU3RyaW5nJywgJ1N0cmluZyddLFxuICAgICAgICA0OiBbJ1N0cmluZycsICdTdHJpbmcnLCAnU3RyaW5nJywgJ0FueSddXG4gICAgICB9XG4gICAgfSxcbiAgICBIdW1hbk5hbWU6IHtcbiAgICAgIGZuOiBGYWN0b3J5Lkh1bWFuTmFtZSxcbiAgICAgIGFyaXR5OiB7XG4gICAgICAgIDE6IFsnU3RyaW5nJ10sXG4gICAgICAgIDI6IFsnU3RyaW5nJywgJ0FueUF0Um9vdCddLFxuICAgICAgICAzOiBbJ1N0cmluZycsICdBbnlBdFJvb3QnLCAnU3RyaW5nJ10sXG4gICAgICAgIDQ6IFsnU3RyaW5nJywgJ0FueUF0Um9vdCcsICdTdHJpbmcnLCAnU3RyaW5nJ10sXG4gICAgICAgIDU6IFsnU3RyaW5nJywgJ0FueUF0Um9vdCcsICdTdHJpbmcnLCAnU3RyaW5nJywgJ1N0cmluZyddLFxuICAgICAgICA2OiBbJ1N0cmluZycsICdBbnlBdFJvb3QnLCAnU3RyaW5nJywgJ1N0cmluZycsICdTdHJpbmcnLCAnU3RyaW5nJ11cbiAgICAgIH0sXG4gICAgfSxcbiAgICBDb250YWN0UG9pbnQ6IHtcbiAgICAgIGZuOiBGYWN0b3J5LkNvbnRhY3RQb2ludCxcbiAgICAgIGFyaXR5OiB7XG4gICAgICAgIDE6IFsnU3RyaW5nJ10sXG4gICAgICAgIDI6IFsnU3RyaW5nJywgJ1N0cmluZyddLFxuICAgICAgICAzOiBbJ1N0cmluZycsICdTdHJpbmcnLCAnU3RyaW5nJ11cbiAgICAgIH0sXG4gICAgfSxcbiAgICBBZGRyZXNzOiB7XG4gICAgICBmbjogRmFjdG9yeS5BZGRyZXNzLFxuICAgICAgYXJpdHk6IHtcbiAgICAgICAgMTogWydBbnlBdFJvb3QnXSxcbiAgICAgICAgMjogWydBbnlBdFJvb3QnLCAnU3RyaW5nJ10sXG4gICAgICAgIDM6IFsnQW55QXRSb290JywgJ1N0cmluZycsICdTdHJpbmcnXSxcbiAgICAgICAgNDogWydBbnlBdFJvb3QnLCAnU3RyaW5nJywgJ1N0cmluZycsICdTdHJpbmcnXSxcbiAgICAgICAgNTogWydBbnlBdFJvb3QnLCAnU3RyaW5nJywgJ1N0cmluZycsICdTdHJpbmcnLCAnU3RyaW5nJ10sXG4gICAgICAgIDY6IFsnQW55QXRSb290JywgJ1N0cmluZycsICdTdHJpbmcnLCAnU3RyaW5nJywgJ1N0cmluZycsICdTdHJpbmcnXSxcbiAgICAgICAgNzogWydBbnlBdFJvb3QnLCAnU3RyaW5nJywgJ1N0cmluZycsICdTdHJpbmcnLCAnU3RyaW5nJywgJ1N0cmluZycsICdTdHJpbmcnXVxuICAgICAgfSxcbiAgICB9LFxuICAgIFF1YW50aXR5OiB7XG4gICAgICBmbjogRmFjdG9yeS5RdWFudGl0eSxcbiAgICAgIGFyaXR5OiB7XG4gICAgICAgIDE6IFsnU3RyaW5nJ10sXG4gICAgICAgIDI6IFsnU3RyaW5nJywgJ1N0cmluZyddLFxuICAgICAgICAzOiBbJ1N0cmluZycsICdTdHJpbmcnLCAnU3RyaW5nT3JOdW1iZXInXSxcbiAgICAgICAgNDogWydTdHJpbmcnLCAnU3RyaW5nJywgJ1N0cmluZ09yTnVtYmVyJywgJ1N0cmluZyddXG4gICAgICB9XG4gICAgfSxcbiAgICBDb2Rpbmc6IHtcbiAgICAgIGZuOiBGYWN0b3J5LkNvZGluZyxcbiAgICAgIGFyaXR5OiB7XG4gICAgICAgIDE6IFsnU3RyaW5nJ10sXG4gICAgICAgIDI6IFsnU3RyaW5nJywgJ1N0cmluZyddLFxuICAgICAgICAzOiBbJ1N0cmluZycsICdTdHJpbmcnLCAnU3RyaW5nJ10sXG4gICAgICAgIDQ6IFsnU3RyaW5nJywgJ1N0cmluZycsICdTdHJpbmcnLCAnU3RyaW5nJ11cbiAgICAgIH1cbiAgICB9LFxuICAgIENvZGVhYmxlQ29uY2VwdDoge1xuICAgICAgZm46IEZhY3RvcnkuQ29kZWFibGVDb25jZXB0LFxuICAgICAgYXJpdHk6IHtcbiAgICAgICAgMTogWydBbnlBdFJvb3QnXSxcbiAgICAgICAgMjogWydBbnlBdFJvb3QnLCAnU3RyaW5nJ11cbiAgICAgIH1cbiAgICB9LFxuICAgIGNyZWF0ZToge1xuICAgICAgZm46IEZhY3RvcnkuY3JlYXRlLFxuICAgICAgYXJpdHk6IHtcbiAgICAgICAgMTogWydUeXBlU3BlY2lmaWVyJ11cbiAgICAgIH1cbiAgICB9LFxuICAgIHdpdGhFeHRlbnNpb246IHtcbiAgICAgIGZuOiBGYWN0b3J5LndpdGhFeHRlbnNpb24sXG4gICAgICBhcml0eToge1xuICAgICAgICAzOiBbJ0FueUF0Um9vdCcsICdTdHJpbmcnLCAnQW55QXRSb290J11cbiAgICAgIH1cbiAgICB9LFxuICAgIHdpdGhQcm9wZXJ0eToge1xuICAgICAgZm46IEZhY3Rvcnkud2l0aFByb3BlcnR5LFxuICAgICAgYXJpdHk6IHtcbiAgICAgICAgMzogWydBbnlBdFJvb3QnLCAnU3RyaW5nJywgJ0FueUF0Um9vdCddXG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIC8vIENyZWF0ZSBmdW5jdGlvbnMgdG8gY3JlYXRlIHByaW1pdGl2ZSB0eXBlcyBhbmQgYWRkIHRoZXNlIGZ1bmN0aW9ucyB0byB0aGVcbiAgLy8gaW52b2NhdGlvblRhYmxlLlxuICBzdGF0aWMge1xuICAgIFtcbiAgICAgIHtcbiAgICAgICAgdHlwZTogJ3N0cmluZycsXG4gICAgICAgIGdldFZhbHVlOiBmdW5jdGlvbiAodikge1xuICAgICAgICAgIGlmICh0eXBlb2YgdiAgPT09ICdzdHJpbmcnICYmIC9eW1xcc1xcU10rJC8udGVzdCh2KSkge1xuICAgICAgICAgICAgcmV0dXJuIFN0cmluZyh2KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBcIiR7dn1cIiBpcyBub3QgYSBzdHJpbmcuYCApO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAge1xuICAgICAgICB0eXBlOiAnaW50ZWdlcicsXG4gICAgICAgIGdldFZhbHVlOiAodikgPT4ge1xuICAgICAgICAgIGNvbnN0IG4gPSBOdW1iZXIodik7XG4gICAgICAgICAgaWYgKE51bWJlci5pc0ludGVnZXIobikpIHtcbiAgICAgICAgICAgIHJldHVybiBuO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFwiJHt2fVwiIGlzIG5vdCBhbiBpbnRlZ2VyLmAgKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgdHlwZTogJ3Vuc2lnbmVkSW50JyxcbiAgICAgICAgZ2V0VmFsdWU6ICh2KSA9PiB7XG4gICAgICAgICAgY29uc3QgbiA9IE51bWJlcih2KTtcbiAgICAgICAgICBpZiAoTnVtYmVyLmlzSW50ZWdlcihuKSAmJiBuID49IDApIHtcbiAgICAgICAgICAgIHJldHVybiBuO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFwiJHt2fVwiIGlzIG5vdCBhbiB1bnNpZ25lZEludC5gICk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHR5cGU6ICdwb3NpdGl2ZUludCcsXG4gICAgICAgIGdldFZhbHVlOiAodikgPT4ge1xuICAgICAgICAgIGNvbnN0IG4gPSBOdW1iZXIodik7XG4gICAgICAgICAgaWYgKE51bWJlci5pc0ludGVnZXIobikgJiYgbiA+IDApIHtcbiAgICAgICAgICAgIHJldHVybiBuO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFwiJHt2fVwiIGlzIG5vdCBhIHBvc2l0aXZlSW50LmAgKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgdHlwZTogJ2ludGVnZXI2NCcsXG4gICAgICAgIGdldFZhbHVlOiAodikgPT4ge1xuICAgICAgICAgIGNvbnN0IG4gPSBOdW1iZXIodik7XG4gICAgICAgICAgaWYgKE51bWJlci5pc0ludGVnZXIobikpIHtcbiAgICAgICAgICAgIHJldHVybiBuO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFwiJHt2fVwiIGlzIG5vdCBhbiBpbnRlZ2VyLmAgKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgdHlwZTogJ21hcmtkb3duJyxcbiAgICAgICAgZ2V0VmFsdWUodikge1xuICAgICAgICAgIGlmICh0eXBlb2YgdiAgPT09ICdzdHJpbmcnICYmIC9eW1xcc1xcU10rJC8udGVzdCh2KSkge1xuICAgICAgICAgICAgcmV0dXJuIHY7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgXCIke3Z9XCIgaXMgbm90IGEgbWFya2Rvd24uYCApO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAge1xuICAgICAgICB0eXBlOiAndXJsJyxcbiAgICAgICAgZ2V0VmFsdWUodikge1xuICAgICAgICAgIGlmICh0eXBlb2YgdiAgPT09ICdzdHJpbmcnICYmIC9eXFxTKiQvLnRlc3QodikpIHtcbiAgICAgICAgICAgIHJldHVybiB2O1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFwiJHt2fVwiIGlzIG5vdCBhIHVybC5gICk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHR5cGU6ICd1cmknLFxuICAgICAgICBnZXRWYWx1ZSh2KSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiB2ICA9PT0gJ3N0cmluZycgJiYgL15cXFMqJC8udGVzdCh2KSkge1xuICAgICAgICAgICAgcmV0dXJuIHY7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgXCIke3Z9XCIgaXMgbm90IGEgdXJpLmAgKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgdHlwZTogJ2luc3RhbnQnLFxuICAgICAgICBnZXRWYWx1ZSh2KSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiB2ICA9PT0gJ3N0cmluZycgJiYgaW5zdGFudFJFLnRlc3QodikpIHtcbiAgICAgICAgICAgIHJldHVybiB2O1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFwiJHt2fVwiIGlzIG5vdCBhbiBpbnN0YW50LmAgKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgdHlwZTogJ3RpbWUnLFxuICAgICAgICBnZXRWYWx1ZSh2KSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiB2ICA9PT0gJ3N0cmluZycgJiYgdGltZVJFLnRlc3QodikpIHtcbiAgICAgICAgICAgIHJldHVybiB2O1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFwiJHt2fVwiIGlzIG5vdCBhIHRpbWUuYCApO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAge1xuICAgICAgICB0eXBlOiAnZGF0ZScsXG4gICAgICAgIGdldFZhbHVlKHYpIHtcbiAgICAgICAgICBpZiAodHlwZW9mIHYgID09PSAnc3RyaW5nJyAmJiBkYXRlUkUudGVzdCh2KSkge1xuICAgICAgICAgICAgcmV0dXJuIHY7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgXCIke3Z9XCIgaXMgbm90IGEgZGF0ZS5gICk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHR5cGU6ICdkYXRlVGltZScsXG4gICAgICAgIGdldFZhbHVlKHYpIHtcbiAgICAgICAgICBpZiAodHlwZW9mIHYgID09PSAnc3RyaW5nJyAmJiBkYXRlVGltZVJFLnRlc3QodikpIHtcbiAgICAgICAgICAgIHJldHVybiB2O1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFwiJHt2fVwiIGlzIG5vdCBhIGRhdGVUaW1lLmAgKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgdHlwZTogJ2Jhc2U2NEJpbmFyeScsXG4gICAgICAgIGdldFZhbHVlKHYpIHtcbiAgICAgICAgICBpZiAodHlwZW9mIHYgID09PSAnc3RyaW5nJyAmJlxuICAgICAgICAgICAgL14oPzpbQS1aYS16MC05Ky9dezR9KSooPzpbQS1aYS16MC05Ky9dezJ9PT18W0EtWmEtejAtOSsvXXszfT0pPyQvXG4gICAgICAgICAgICAgIC50ZXN0KHYpKSB7XG4gICAgICAgICAgICByZXR1cm4gdjtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBcIiR7dn1cIiBpcyBub3QgYSBiYXNlNjRCaW5hcnkuYCApO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAge1xuICAgICAgICB0eXBlOiAnZGVjaW1hbCcsXG4gICAgICAgIGdldFZhbHVlKHYpIHtcbiAgICAgICAgICBjb25zdCBuID0gTnVtYmVyKHYpO1xuICAgICAgICAgIGlmIChOdW1iZXIuaXNOYU4obikpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgXCIke3Z9XCIgaXMgbm90IGFuIGRlY2ltYWwuYCApO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gbjtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgdHlwZTogJ2Jvb2xlYW4nLFxuICAgICAgICBnZXRWYWx1ZSh2KSB7XG4gICAgICAgICAgaWYgKHYgPT09IHRydWUgfHwgdiA9PT0gJ3RydWUnKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHYgPT09IGZhbHNlIHx8IHYgPT09ICdmYWxzZScpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBcIiR7dn1cIiBpcyBub3QgYSBib29sZWFuLmAgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHR5cGU6ICdjb2RlJyxcbiAgICAgICAgZ2V0VmFsdWUodikge1xuICAgICAgICAgIGlmICh0eXBlb2YgdiAgPT09ICdzdHJpbmcnICYmIC9eXFxTKyggXFxTKykqJC8udGVzdCh2KSkge1xuICAgICAgICAgICAgcmV0dXJuIHY7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgXCIke3Z9XCIgaXMgbm90IGEgY29kZS5gICk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHR5cGU6ICdpZCcsXG4gICAgICAgIGdldFZhbHVlKHYpIHtcbiAgICAgICAgICBpZiAodHlwZW9mIHYgID09PSAnc3RyaW5nJyAmJiAvXltBLVphLXowLTlcXC0uXXsxLDY0fSQvLnRlc3QodikpIHtcbiAgICAgICAgICAgIHJldHVybiB2O1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFwiJHt2fVwiIGlzIG5vdCBhbiBpZC5gICk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHR5cGU6ICdvaWQnLFxuICAgICAgICBnZXRWYWx1ZSh2KSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiB2ICA9PT0gJ3N0cmluZycgJiYgL151cm46b2lkOlswLTJdKFxcLigwfFsxLTldWzAtOV0qKSkrJC8udGVzdCh2KSkge1xuICAgICAgICAgICAgcmV0dXJuIHY7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgXCIke3Z9XCIgaXMgbm90IGFuIG9pZC5gICk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHR5cGU6ICd1dWlkJyxcbiAgICAgICAgZ2V0VmFsdWUodikge1xuICAgICAgICAgIGlmICh0eXBlb2YgdiAgPT09ICdzdHJpbmcnICYmIC9edXJuOnV1aWQ6WzAtOWEtZl17OH0tWzAtOWEtZl17NH0tWzAtOWEtZl17NH0tWzAtOWEtZl17NH0tWzAtOWEtZl17MTJ9JC8udGVzdCh2KSkge1xuICAgICAgICAgICAgcmV0dXJuIHY7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgXCIke3Z9XCIgaXMgbm90IGFuIHV1aWQuYCApO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAge1xuICAgICAgICB0eXBlOiAnY2Fub25pY2FsJyxcbiAgICAgICAgZ2V0VmFsdWUodikge1xuICAgICAgICAgIGlmICh0eXBlb2YgdiAgPT09ICdzdHJpbmcnICYmIC9eXFxTKiQvLnRlc3QodikpIHtcbiAgICAgICAgICAgIHJldHVybiB2O1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFwiJHt2fVwiIGlzIG5vdCBhbiBjYW5vbmljYWwuYCApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgXS5mb3JFYWNoKCh7dHlwZTogcHJpbWl0aXZlVHlwZSwgZ2V0VmFsdWV9KSA9PiB7XG4gICAgICAvKipcbiAgICAgICAqIENyZWF0ZXMgYW4gaW5zdGFuY2Ugb2YgdGhlIHR5cGUgd2l0aCB0aGUgdmFsdWUgYW5kIHBvc3NpYmx5IG9uZSBvciBtb3JlXG4gICAgICAgKiBleHRlbnNpb25zLlxuICAgICAgICogU2VlIHByaW1pdGl2ZSB0eXBlIGRlc2NyaXB0aW9ucyBoZXJlOlxuICAgICAgICogaHR0cHM6Ly9obDcub3JnL2ZoaXIvZGF0YXR5cGVzLmh0bWwjcHJpbWl0aXZlXG4gICAgICAgKiBAcGFyYW0ge0ZhY3RvcnlbXX0gc2VsZiAtIGFuIGFycmF5IHdpdGggb25lIGVsZW1lbnQsIHdoaWNoIGlzIHRoZVxuICAgICAgICogIEZhY3RvcnkgY2xhc3MuXG4gICAgICAgKiBAcGFyYW0geyp9IHZhbHVlQ29sbCAtIGEgY29sbGVjdGlvbiB0aGF0IHNob3VsZCBjb250YWluIGEgc2luZ2xlIHZhbHVlXG4gICAgICAgKiAgb2YgYSBwcmltaXRpdmUgdHlwZS5cbiAgICAgICAqIEBwYXJhbSB7RXh0ZW5zaW9uW119IFtleHRlbnNpb25zXSAtIGFuIG9wdGlvbmFsIGFycmF5IG9mIEV4dGVuc2lvbnMuXG4gICAgICAgKiBAcmV0dXJuIHtSZXNvdXJjZU5vZGV9IC0gYSBuZXcgUmVzb3VyY2VOb2RlLlxuICAgICAgICovXG4gICAgICBGYWN0b3J5W3ByaW1pdGl2ZVR5cGVdID0gZnVuY3Rpb24gKHNlbGYsIHZhbHVlQ29sbCwgZXh0ZW5zaW9ucykge1xuICAgICAgICBsZXQgZGF0YTtcbiAgICAgICAgaWYgKHZhbHVlQ29sbC5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbmV4cGVjdGVkIGNvbGxlY3Rpb24gJyArIEpTT04uc3RyaW5naWZ5KHZhbHVlQ29sbCkgK1xuICAgICAgICAgICAgYCBhcyBhIHZhbHVlIGZvciAlZmFjdG9yeS4ke3ByaW1pdGl2ZVR5cGV9KHZhbHVlLCBleHRlbnNpb25zKWApO1xuICAgICAgICB9IGVsc2UgaWYgKHZhbHVlQ29sbC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICBkYXRhID0gbnVsbDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb25zdCB2ID0gdXRpbC52YWxEYXRhKHZhbHVlQ29sbFswXSk7XG4gICAgICAgICAgaWYgKHYgPT0gbnVsbCkge1xuICAgICAgICAgICAgZGF0YSA9IG51bGw7XG4gICAgICAgICAgfSBpZiAodHlwZW9mIHYgIT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICBkYXRhID0gZ2V0VmFsdWUodik7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgXCIke3Z9XCIgaXMgbm90IGEgJHtwcmltaXRpdmVUeXBlfWAgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgX2RhdGEgPSBudWxsO1xuICAgICAgICBpZiAoZXh0ZW5zaW9ucz8ubGVuZ3RoID4gMCkge1xuICAgICAgICAgIF9kYXRhID0ge1xuICAgICAgICAgICAgZXh0ZW5zaW9uOiBleHRlbnNpb25zLm1hcChlID0+IHtcbiAgICAgICAgICAgICAgY29uc3QgZXh0ZW5zaW9uRGF0YVR5cGUgPSBUeXBlSW5mby5mcm9tVmFsdWUoZSk7XG4gICAgICAgICAgICAgIGlmIChUeXBlSW5mby5pc1R5cGUoZXh0ZW5zaW9uRGF0YVR5cGUubmFtZSwgJ0V4dGVuc2lvbicpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHV0aWwudmFsRGF0YShlKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEV4cGVjdGVkIFwiRkhJUi5FeHRlbnNpb25cIiwgZ290IFwiJHtleHRlbnNpb25EYXRhVHlwZX1cImAgKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIFJlc291cmNlTm9kZS5tYWtlUmVzTm9kZShkYXRhLCBudWxsLCBwcmltaXRpdmVUeXBlLCBfZGF0YSwgcHJpbWl0aXZlVHlwZSk7XG4gICAgICB9O1xuXG4gICAgICBGYWN0b3J5Lmludm9jYXRpb25UYWJsZVtwcmltaXRpdmVUeXBlXSA9IHtcbiAgICAgICAgZm46IEZhY3RvcnlbcHJpbWl0aXZlVHlwZV0sXG4gICAgICAgIGFyaXR5OiB7MTogWydBbnlBdFJvb3QnXSwgMjogWydBbnlBdFJvb3QnLCAnQW55J119XG4gICAgICB9O1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYW4gZXh0ZW5zaW9uIHdpdGggdGhlIGdpdmVuIHVybCBhbmQgdmFsdWVcbiAgICogQHBhcmFtIHtGYWN0b3J5W119IHNlbGYgLSBhbiBhcnJheSB3aXRoIG9uZSBlbGVtZW50LCB3aGljaCBpcyB0aGUgRmFjdG9yeVxuICAgKiAgY2xhc3MuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgLSBhIHN0cmluZyB2YWx1ZSB0aGF0IGlkZW50aWZpZXMgdGhlIGV4dGVuc2lvblxuICAgKiBAcGFyYW0geyp9IHZhbHVlIC0gdGhlIHZhbHVlIG9mIHRoZSBleHRlbnNpb24gKGFueSB2YWxpZCB0eXBlIGZvclxuICAgKiAgZXh0ZW5zaW9uLnZhbHVlW3hdKS5cbiAgICogQHJldHVybiB7UmVzb3VyY2VOb2RlfVxuICAgKi9cbiAgc3RhdGljIEV4dGVuc2lvbihzZWxmLCB1cmwsIHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlLmxlbmd0aCAhPT0gMSkge1xuICAgICAgaWYgKHZhbHVlLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVW5leHBlY3RlZCBjb2xsZWN0aW9uIFwiICsgSlNPTi5zdHJpbmdpZnkodmFsdWUpICtcbiAgICAgICAgICBcIiBhcyBhIHZhbHVlIGZvciAlZmFjdG9yeS5FeHRlbnNpb24odXJsLCB2YWx1ZSlcIik7XG4gICAgICB9XG5cbiAgICAgIGlmICh2YWx1ZS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVW5leHBlY3RlZCBlbXB0eSBjb2xsZWN0aW9uIFwiICsgSlNPTi5zdHJpbmdpZnkodmFsdWUpICtcbiAgICAgICAgICBcIiBhcyBhIHZhbHVlIGZvciAlZmFjdG9yeS5FeHRlbnNpb24odXJsLCB2YWx1ZSlcIik7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBSZXNvdXJjZU5vZGUubWFrZVJlc05vZGUoRmFjdG9yeS5jcmVhdGVFeHRlbnNpb25PYmplY3QodXJsLCB2YWx1ZVswXSksXG4gICAgICAgIG51bGwsICdFeHRlbnNpb24nLCBudWxsLCAnRXh0ZW5zaW9uJyk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYW4gb2JqZWN0IHRvIHN0b3JlIHRoZSBleHRlbnNpb24gdmFsdWUuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgLSBhIHN0cmluZyB2YWx1ZSB0aGF0IGlkZW50aWZpZXMgdGhlIGV4dGVuc2lvblxuICAgKiBAcGFyYW0geyp9IHZhbHVlIC0gdGhlIHZhbHVlIG9mIHRoZSBleHRlbnNpb24gKGFueSB2YWxpZCB0eXBlIGZvclxuICAgKiAgZXh0ZW5zaW9uLnZhbHVlW3hdKS5cbiAgICogQHJldHVybiB7e1twOiBzdHJpbmddOiAqLCB1cmx9fVxuICAgKi9cbiAgc3RhdGljIGNyZWF0ZUV4dGVuc2lvbk9iamVjdCh1cmwsIHZhbHVlKSB7XG4gICAgY29uc3QgdmFsdWVQcm9wZXJ0eU5hbWUgPSAndmFsdWUnICtcbiAgICAgIFR5cGVJbmZvLmZyb21WYWx1ZSh2YWx1ZSkubmFtZS5yZXBsYWNlKC9eXFx3LywgYyA9PiBjLnRvVXBwZXJDYXNlKCkpO1xuICAgIHJldHVybiB7XG4gICAgICB1cmwsXG4gICAgICBbdmFsdWVQcm9wZXJ0eU5hbWVdOiB1dGlsLnZhbERhdGEodmFsdWUpXG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGFuIGlkZW50aWZpZXIgd2l0aCB0aGUgZ2l2ZW4gcHJvcGVydGllcy5cbiAgICogQHBhcmFtIHtGYWN0b3J5W119IHNlbGYgLSBhbiBhcnJheSB3aXRoIG9uZSBlbGVtZW50LCB3aGljaCBpcyB0aGUgRmFjdG9yeVxuICAgKiAgY2xhc3MuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzeXN0ZW0gLSBhIHN0cmluZyB2YWx1ZSB0aGF0IGdvZXMgaW4gSWRlbnRpZmllci5zeXN0ZW0uXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZSAtIGEgc3RyaW5nIHZhbHVlIHRoYXQgZ29lcyBpbiBJZGVudGlmaWVyLnZhbHVlLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdXNlIC0gYSBzdHJpbmcgdmFsdWUgdGhhdCBnb2VzIGluIElkZW50aWZpZXIudXNlLlxuICAgKiBAcGFyYW0ge1Jlc291cmNlTm9kZVtdfSB0eXBlQ29sbCAtIGEgQ29kZWFibGVDb25jZXB0IHRoYXQgZ29lcyBpblxuICAgKiAgSWRlbnRpZmllci50eXBlLlxuICAgKiBAcmV0dXJuIHtSZXNvdXJjZU5vZGV9XG4gICAqL1xuICBzdGF0aWMgSWRlbnRpZmllciAoc2VsZiwgc3lzdGVtLCB2YWx1ZSwgdXNlLCB0eXBlQ29sbCkge1xuICAgIGlmICh0eXBlQ29sbD8ubGVuZ3RoID4gMSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVW5leHBlY3RlZCBjb2xsZWN0aW9uIFwiICsgSlNPTi5zdHJpbmdpZnkodHlwZUNvbGwpICtcbiAgICAgICAgXCIgYXMgYSB0eXBlIGZvciAlZmFjdG9yeS5JZGVudGlmaWVye3N5c3RlbSwgdmFsdWUsIHVzZSwgdHlwZSlcIik7XG4gICAgfVxuICAgIGNvbnN0IGRhdGEgPSB7fTtcbiAgICBpZiAodXRpbC5pc1NvbWUoc3lzdGVtKSkge1xuICAgICAgZGF0YS5zeXN0ZW0gPSBzeXN0ZW07XG4gICAgfVxuICAgIGlmICh1dGlsLmlzU29tZSh2YWx1ZSkpIHtcbiAgICAgIGRhdGEudmFsdWUgPSB2YWx1ZTtcbiAgICB9XG4gICAgaWYgKHV0aWwuaXNTb21lKHVzZSkpIHtcbiAgICAgIGRhdGEudXNlID0gdXNlO1xuICAgIH1cbiAgICBpZiAodXRpbC5pc1NvbWUodHlwZUNvbGwpKSB7XG4gICAgICBjb25zdCB0eXBlSW5mbyA9IFR5cGVJbmZvLmZyb21WYWx1ZSh0eXBlQ29sbFswXSk7XG4gICAgICBpZiAoIVR5cGVJbmZvLmlzVHlwZSh0eXBlSW5mby5uYW1lLCAnQ29kZWFibGVDb25jZXB0JykpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBFeHBlY3RlZCBcIkZISVIuQ29kZWFibGVDb25jZXB0XCIsIGdvdCBcIiR7dHlwZUluZm99XCJgICk7XG4gICAgICB9XG4gICAgICBkYXRhLnR5cGUgPSB0eXBlQ29sbFswXTtcbiAgICB9XG4gICAgcmV0dXJuIFJlc291cmNlTm9kZS5tYWtlUmVzTm9kZShkYXRhLCBudWxsLCAnSWRlbnRpZmllcicsIG51bGwsXG4gICAgICAnSWRlbnRpZmllcicpO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhIGh1bWFuIG5hbWUgd2l0aCB0aGUgZ2l2ZW4gcHJvcGVydGllcy5cbiAgICogQHBhcmFtIHtGYWN0b3J5W119IHNlbGYgLSBhbiBhcnJheSB3aXRoIG9uZSBlbGVtZW50LCB3aGljaCBpcyB0aGUgRmFjdG9yeVxuICAgKiAgY2xhc3MuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBmYW1pbHkgLSBhIHN0cmluZyB2YWx1ZSB0aGF0IGdvZXMgaW4gSHVtYW5OYW1lLnN5c3RlbS5cbiAgICogQHBhcmFtIHtSZXNvdXJjZU5vZGVbXX0gZ2l2ZW5Db2xsIC0gYSBjb2xsZWN0aW9uIG9mIHN0cmluZyB2YWx1ZXMgdGhhdCBnb2VzXG4gICAqICBpbiBIdW1hbk5hbWUuZ2l2ZW4uXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBwcmVmaXggLSBhIHN0cmluZyB2YWx1ZSB0aGF0IGdvZXMgaW4gSHVtYW5OYW1lLnByZWZpeC5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHN1ZmZpeCAtIGEgc3RyaW5nIHZhbHVlIHRoYXQgZ29lcyBpbiBIdW1hbk5hbWUuc3VmZml4LlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdGV4dCAtIGEgc3RyaW5nIHZhbHVlIHRoYXQgZ29lcyBpbiBIdW1hbk5hbWUudGV4dC5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHVzZSAtIGEgc3RyaW5nIHZhbHVlIHRoYXQgZ29lcyBpbiBIdW1hbk5hbWUudXNlLlxuICAgKiBAcmV0dXJuIHtSZXNvdXJjZU5vZGV9XG4gICAqL1xuICBzdGF0aWMgSHVtYW5OYW1lKHNlbGYsIGZhbWlseSwgZ2l2ZW5Db2xsLCBwcmVmaXgsIHN1ZmZpeCwgdGV4dCwgdXNlKSB7XG4gICAgY29uc3QgZGF0YSA9IHt9O1xuICAgIGlmICh1dGlsLmlzU29tZShmYW1pbHkpKSB7XG4gICAgICBkYXRhLmZhbWlseSA9IGZhbWlseTtcbiAgICB9XG4gICAgaWYgKHV0aWwuaXNTb21lKGdpdmVuQ29sbCkpIHtcbiAgICAgIGRhdGEuZ2l2ZW4gPSBnaXZlbkNvbGwubWFwKGdpdmVuID0+IHtcbiAgICAgICAgY29uc3QgdiA9IHV0aWwudmFsRGF0YShnaXZlbik7XG4gICAgICAgIGlmICh0eXBlb2YgdiA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgIHJldHVybiB2O1xuICAgICAgICB9XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgRXhwZWN0ZWQgc3RyaW5nLCBidXQgZ290OiAke0pTT04uc3RyaW5naWZ5KHYpfWApO1xuICAgICAgfSk7XG4gICAgfVxuICAgIGlmICh1dGlsLmlzU29tZShwcmVmaXgpKSB7XG4gICAgICBkYXRhLnByZWZpeCA9IHByZWZpeDtcbiAgICB9XG4gICAgaWYgKHV0aWwuaXNTb21lKHN1ZmZpeCkpIHtcbiAgICAgIGRhdGEuc3VmZml4ID0gc3VmZml4O1xuICAgIH1cbiAgICBpZiAodXRpbC5pc1NvbWUodGV4dCkpIHtcbiAgICAgIGRhdGEudGV4dCA9IHRleHQ7XG4gICAgfVxuICAgIGlmICh1dGlsLmlzU29tZSh1c2UpKSB7XG4gICAgICBkYXRhLnVzZSA9IHVzZTtcbiAgICB9XG4gICAgcmV0dXJuIFJlc291cmNlTm9kZS5tYWtlUmVzTm9kZShkYXRhLCBudWxsLCAnSHVtYW5OYW1lJywgbnVsbCxcbiAgICAgICdIdW1hbk5hbWUnKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgQ29udGFjdFBvaW50LlxuICAgKiBAcGFyYW0ge0ZhY3RvcnlbXX0gc2VsZiAtIGFuIGFycmF5IHdpdGggb25lIGVsZW1lbnQsIHdoaWNoIGlzIHRoZSBGYWN0b3J5XG4gICAqICBjbGFzcy5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHN5c3RlbSAtIGEgc3RyaW5nIHZhbHVlIHRoYXQgZ29lcyBpbiBDb250YWN0UG9pbnQuc3lzdGVtLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdmFsdWUgLSBhIHN0cmluZyB2YWx1ZSB0aGF0IGdvZXMgaW4gQ29udGFjdFBvaW50LnZhbHVlLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdXNlIC0gYSBzdHJpbmcgdmFsdWUgdGhhdCBnb2VzIGluIENvbnRhY3RQb2ludC51c2UuXG4gICAqIEByZXR1cm4ge1Jlc291cmNlTm9kZX1cbiAgICovXG4gIHN0YXRpYyBDb250YWN0UG9pbnQoc2VsZiwgc3lzdGVtLCB2YWx1ZSwgdXNlKSB7XG4gICAgY29uc3QgZGF0YSA9IHt9O1xuICAgIGlmICh1dGlsLmlzU29tZShzeXN0ZW0pKSB7XG4gICAgICBkYXRhLnN5c3RlbSA9IHN5c3RlbTtcbiAgICB9XG4gICAgaWYgKHV0aWwuaXNTb21lKHZhbHVlKSkge1xuICAgICAgZGF0YS52YWx1ZSA9IHZhbHVlO1xuICAgIH1cbiAgICBpZiAodXRpbC5pc1NvbWUodXNlKSkge1xuICAgICAgZGF0YS51c2UgPSB1c2U7XG4gICAgfVxuICAgIHJldHVybiBSZXNvdXJjZU5vZGUubWFrZVJlc05vZGUoZGF0YSwgbnVsbCwgJ0NvbnRhY3RQb2ludCcsIG51bGwsXG4gICAgICAnQ29udGFjdFBvaW50Jyk7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyBhbiBBZGRyZXNzXG4gICAqIEBwYXJhbSB7RmFjdG9yeVtdfSBzZWxmIC0gYW4gYXJyYXkgd2l0aCBvbmUgZWxlbWVudCwgd2hpY2ggaXMgdGhlIEZhY3RvcnlcbiAgICogIGNsYXNzLlxuICAgKiBAcGFyYW0ge1Jlc291cmNlTm9kZVtdfSBsaW5lQ29sbCAtIGEgY29sbGVjdGlvbiBvZiBzdHJpbmcgdmFsdWVzIHRoYXQgZ29lc1xuICAgKiAgaW4gQWRkcmVzcy5saW5lLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gY2l0eSAtIGEgc3RyaW5nIHZhbHVlIHRoYXQgZ29lcyBpbiBBZGRyZXNzLmNpdHkuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzdGF0ZSAtIGEgc3RyaW5nIHZhbHVlIHRoYXQgZ29lcyBpbiBBZGRyZXNzLnN0YXRlLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcG9zdGFsQ29kZSAtIGEgc3RyaW5nIHZhbHVlIHRoYXQgZ29lcyBpbiBBZGRyZXNzLnBvc3RhbENvZGUuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBjb3VudHJ5IC0gYSBzdHJpbmcgdmFsdWUgdGhhdCBnb2VzIGluIEFkZHJlc3MuY291bnRyeS5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHVzZSAtIGEgc3RyaW5nIHZhbHVlIHRoYXQgZ29lcyBpbiBBZGRyZXNzLnVzZS5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHR5cGUgLSBhIHN0cmluZyB2YWx1ZSB0aGF0IGdvZXMgaW4gQWRkcmVzcy50eXBlLlxuICAgKiBAcmV0dXJuIHtSZXNvdXJjZU5vZGV9XG4gICAqL1xuICBzdGF0aWMgQWRkcmVzcyhzZWxmLCBsaW5lQ29sbCwgY2l0eSwgc3RhdGUsIHBvc3RhbENvZGUsIGNvdW50cnksIHVzZSwgdHlwZSkge1xuICAgIGNvbnN0IGRhdGEgPSB7fTtcbiAgICBpZiAodXRpbC5pc1NvbWUobGluZUNvbGwpKSB7XG4gICAgICBkYXRhLmxpbmUgPSBsaW5lQ29sbC5tYXAobGluZSA9PiB7XG4gICAgICAgIGNvbnN0IHYgPSB1dGlsLnZhbERhdGEobGluZSk7XG4gICAgICAgIGlmICh0eXBlb2YgdiA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgIHJldHVybiB2O1xuICAgICAgICB9XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgRXhwZWN0ZWQgc3RyaW5nLCBidXQgZ290OiAke0pTT04uc3RyaW5naWZ5KHYpfWApO1xuICAgICAgfSk7XG4gICAgfVxuICAgIGlmICh1dGlsLmlzU29tZShjaXR5KSkge1xuICAgICAgZGF0YS5jaXR5ID0gY2l0eTtcbiAgICB9XG4gICAgaWYgKHV0aWwuaXNTb21lKHN0YXRlKSkge1xuICAgICAgZGF0YS5zdGF0ZSA9IHN0YXRlO1xuICAgIH1cbiAgICBpZiAodXRpbC5pc1NvbWUocG9zdGFsQ29kZSkpIHtcbiAgICAgIGRhdGEucG9zdGFsQ29kZSA9IHBvc3RhbENvZGU7XG4gICAgfVxuICAgIGlmICh1dGlsLmlzU29tZShjb3VudHJ5KSkge1xuICAgICAgZGF0YS5jb3VudHJ5ID0gY291bnRyeTtcbiAgICB9XG4gICAgaWYgKHV0aWwuaXNTb21lKHVzZSkpIHtcbiAgICAgIGRhdGEudXNlID0gdXNlO1xuICAgIH1cbiAgICBpZiAodXRpbC5pc1NvbWUodHlwZSkpIHtcbiAgICAgIGRhdGEudHlwZSA9IHR5cGU7XG4gICAgfVxuICAgIHJldHVybiBSZXNvdXJjZU5vZGUubWFrZVJlc05vZGUoZGF0YSwgbnVsbCwgJ0FkZHJlc3MnLCBudWxsLFxuICAgICAgJ0FkZHJlc3MnKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgUXVhbnRpdHkuXG4gICAqIEBwYXJhbSB7RmFjdG9yeVtdfSBzZWxmIC0gYW4gYXJyYXkgd2l0aCBvbmUgZWxlbWVudCwgd2hpY2ggaXMgdGhlIEZhY3RvcnlcbiAgICogIGNsYXNzLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gc3lzdGVtIC0gYSBzdHJpbmcgdmFsdWUgdGhhdCBnb2VzIGluIFF1YW50aXR5LnN5c3RlbS5cbiAgICogQHBhcmFtIHtzdHJpbmd9IGNvZGUgLSBhIHN0cmluZyB2YWx1ZSB0aGF0IGdvZXMgaW4gUXVhbnRpdHkuY29kZS5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlIC0gYSBzdHJpbmcgb3IgZGVjaW1hbCB2YWx1ZSB0aGF0IGdvZXMgaW5cbiAgICogIFF1YW50aXR5LnZhbHVlLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdW5pdCAtIGEgc3RyaW5nIHZhbHVlIHRoYXQgZ29lcyBpbiBRdWFudGl0eS51bml0LlxuICAgKiBAcmV0dXJuIHtSZXNvdXJjZU5vZGV9XG4gICAqL1xuICBzdGF0aWMgUXVhbnRpdHkoc2VsZiwgc3lzdGVtLCBjb2RlLCB2YWx1ZSwgdW5pdCkge1xuICAgIGNvbnN0IGRhdGEgPSB7fTtcbiAgICBpZiAodXRpbC5pc1NvbWUoc3lzdGVtKSkge1xuICAgICAgZGF0YS5zeXN0ZW0gPSBzeXN0ZW07XG4gICAgfVxuICAgIGlmICh1dGlsLmlzU29tZShjb2RlKSkge1xuICAgICAgZGF0YS5jb2RlID0gY29kZTtcbiAgICB9XG4gICAgaWYgKHV0aWwuaXNTb21lKHZhbHVlKSkge1xuICAgICAgZGF0YS52YWx1ZSA9IE51bWJlcih2YWx1ZSk7XG4gICAgfVxuICAgIGlmICh1dGlsLmlzU29tZSh1bml0KSkge1xuICAgICAgZGF0YS51bml0ID0gdW5pdDtcbiAgICB9XG4gICAgcmV0dXJuIFJlc291cmNlTm9kZS5tYWtlUmVzTm9kZShkYXRhLCBudWxsLCAnUXVhbnRpdHknLCBudWxsLFxuICAgICAgJ1F1YW50aXR5Jyk7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyBhIENvZGluZy5cbiAgICogQHBhcmFtIHtGYWN0b3J5W119IHNlbGYgLSBhbiBhcnJheSB3aXRoIG9uZSBlbGVtZW50LCB3aGljaCBpcyB0aGUgRmFjdG9yeVxuICAgKiAgY2xhc3MuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzeXN0ZW0gLSBhIHN0cmluZyB2YWx1ZSB0aGF0IGdvZXMgaW4gQ29kaW5nLnN5c3RlbS5cbiAgICogQHBhcmFtIHtzdHJpbmd9IGNvZGUgLSBhIHN0cmluZyB2YWx1ZSB0aGF0IGdvZXMgaW4gQ29kaW5nLmNvZGUuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBkaXNwbGF5IC0gYSBzdHJpbmcgdmFsdWUgdGhhdCBnb2VzIGluIENvZGluZy5kaXNwbGF5LlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdmVyc2lvbiAtIGEgc3RyaW5nIHZhbHVlIHRoYXQgZ29lcyBpbiBDb2RpbmcudmVyc2lvbi5cbiAgICogQHJldHVybiB7UmVzb3VyY2VOb2RlfVxuICAgKi9cbiAgc3RhdGljIENvZGluZyhzZWxmLCBzeXN0ZW0sIGNvZGUsIGRpc3BsYXksIHZlcnNpb24pIHtcbiAgICBjb25zdCBkYXRhID0ge307XG4gICAgaWYgKHV0aWwuaXNTb21lKHN5c3RlbSkpIHtcbiAgICAgIGRhdGEuc3lzdGVtID0gc3lzdGVtO1xuICAgIH1cbiAgICBpZiAodXRpbC5pc1NvbWUoY29kZSkpIHtcbiAgICAgIGRhdGEuY29kZSA9IGNvZGU7XG4gICAgfVxuICAgIGlmICh1dGlsLmlzU29tZShkaXNwbGF5KSkge1xuICAgICAgZGF0YS5kaXNwbGF5ID0gZGlzcGxheTtcbiAgICB9XG4gICAgaWYgKHV0aWwuaXNTb21lKHZlcnNpb24pKSB7XG4gICAgICBkYXRhLnZlcnNpb24gPSB2ZXJzaW9uO1xuICAgIH1cbiAgICByZXR1cm4gUmVzb3VyY2VOb2RlLm1ha2VSZXNOb2RlKGRhdGEsIG51bGwsICdDb2RpbmcnLCBudWxsLFxuICAgICAgJ0NvZGluZycpO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBDb2RlYWJsZUNvbmNlcHQuXG4gICAqIEBwYXJhbSB7RmFjdG9yeVtdfSBzZWxmIC0gYW4gYXJyYXkgd2l0aCBvbmUgZWxlbWVudCwgd2hpY2ggaXMgdGhlIEZhY3RvcnlcbiAgICogIGNsYXNzLlxuICAgKiBAcGFyYW0ge1Jlc291cmNlTm9kZVtdfSB2YWx1ZUNvbGwgLSBhIGNvbGxlY3Rpb24gb2YgQ29kaW5nIHRoYXQgZ29lcyBpblxuICAgKiAgQ29kZWFibGVDb25jZXB0LmNvZGluZy5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHRleHQgLSBhIHN0cmluZyB2YWx1ZSB0aGF0IGdvZXMgaW4gQ29kZWFibGVDb25jZXB0LnRleHQuXG4gICAqIEByZXR1cm4ge1Jlc291cmNlTm9kZX1cbiAgICovXG4gIHN0YXRpYyBDb2RlYWJsZUNvbmNlcHQoc2VsZiwgdmFsdWVDb2xsLCB0ZXh0KSB7XG4gICAgY29uc3QgZGF0YSA9IHZhbHVlQ29sbD8ubGVuZ3RoID4gMCA/XG4gICAgICB7XG4gICAgICAgIGNvZGluZzogdmFsdWVDb2xsLm1hcChjb2RpbmcgPT4ge1xuICAgICAgICAgIGlmIChjb2RpbmcgaW5zdGFuY2VvZiBSZXNvdXJjZU5vZGUgJiZcbiAgICAgICAgICAgIGNvZGluZy5nZXRUeXBlSW5mbygpLm5hbWUgPT09ICdDb2RpbmcnKSB7XG4gICAgICAgICAgICByZXR1cm4gdXRpbC52YWxEYXRhKGNvZGluZyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlVuZXhwZWN0ZWQgdmFsdWUgXCIgKyBKU09OLnN0cmluZ2lmeShjb2RpbmcpICtcbiAgICAgICAgICAgIFwiOyBleHBlY3RlZCB2YWx1ZSBvZiB0eXBlIENvZGluZ1wiKTtcbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICAgIDoge307XG5cbiAgICBpZiAodXRpbC5pc1NvbWUodGV4dCkpIHtcbiAgICAgIGRhdGEudGV4dCA9IHRleHQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIFJlc291cmNlTm9kZS5tYWtlUmVzTm9kZShkYXRhLCBudWxsLCAnQ29kZWFibGVDb25jZXB0JywgbnVsbCxcbiAgICAgICdDb2RlYWJsZUNvbmNlcHQnKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGUgYW4gaW5zdGFuY2Ugb2YgdGhlIG5hbWVkIHR5cGUuXG4gICAqIEBwYXJhbSB7RmFjdG9yeVtdfSBzZWxmIC0gYW4gYXJyYXkgd2l0aCBvbmUgZWxlbWVudCB0aGF0IHJlZmVycyB0b1xuICAgKiAgdGhlIGN1cnJlbnQgRmFjdG9yeSBpbnN0YW5jZS5cbiAgICogQHBhcmFtIHtUeXBlSW5mb30gdHlwZUluZm8gLSBhIHZhbHVlIHRoYXQgaXMgdGhlIHR5cGUgdG8gY3JlYXRlLlxuICAgKiBAcmV0dXJuIHtSZXNvdXJjZU5vZGV9XG4gICAqL1xuICBzdGF0aWMgY3JlYXRlKHNlbGYsIHR5cGVJbmZvKSB7XG4gICAgaWYgKHR5cGVJbmZvLm5hbWVzcGFjZSA9PT0gVHlwZUluZm8uU3lzdGVtKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJyVmYWN0b3J5LmNyZWF0ZSh0eXBlKSBkb2VzblxcJ3Qgc3VwcG9ydCBzeXN0ZW0gdHlwZXMuJyk7XG4gICAgfVxuICAgIHJldHVybiBSZXNvdXJjZU5vZGUubWFrZVJlc05vZGUobnVsbCwgbnVsbCwgdHlwZUluZm8ubmFtZSwgbnVsbCxcbiAgICAgIHR5cGVJbmZvLm5hbWUpO1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZCBhbiBleHRlbnNpb24sIGFuZCByZXR1cm4gdGhlIG5ldyB0eXBlLlxuICAgKiBAcGFyYW0ge0ZhY3RvcnlbXX0gc2VsZiAtIGFuIGFycmF5IHdpdGggb25lIGVsZW1lbnQgdGhhdCByZWZlcnMgdG9cbiAgICogIHRoZSBjdXJyZW50IEZhY3RvcnkgaW5zdGFuY2UuXG4gICAqIEBwYXJhbSB7UmVzb3VyY2VOb2RlW119IGluc3RhbmNlQ29sbCAtIGEgY29sbGVjdGlvbiB0aGF0IHNob3VsZCBjb250YWluIHRoZVxuICAgKiAgaW5zdGFuY2UgdG8gd2hpY2ggdGhlIGV4dGVuc2lvbiBpcyB0byBiZSBhZGRlZC5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHVybCAtIGEgc3RyaW5nIHZhbHVlIHRoYXQgZ29lcyBpbiBFeHRlbnNpb24udXJsLlxuICAgKiAgc3BlY2lmaWNhdGlvbiB0aGlzIGNvdWxkIGFsc28gYmUgYW4gYWN0dWFsIFZhbHVlU2V0LCBidXQgSSBkb24ndCB3YW50IHRvXG4gICAqICBjb21wbGljYXRlIHRoaXMgZXhhbXBsZS5cbiAgICogQHBhcmFtIHtSZXNvdXJjZU5vZGVbXX0gdmFsdWUgLSB0aGUgdmFsdWUgb2YgdGhlIGV4dGVuc2lvbi5cbiAgICogQHJldHVybiB7UmVzb3VyY2VOb2RlfFtdfVxuICAgKi9cbiAgc3RhdGljIHdpdGhFeHRlbnNpb24oc2VsZiwgaW5zdGFuY2VDb2xsLCB1cmwsIHZhbHVlKSB7XG4gICAgaWYgKGluc3RhbmNlQ29sbC5sZW5ndGggPiAxICkge1xuICAgICAgdGhyb3cgIG5ldyBFcnJvcihcIlVuZXhwZWN0ZWQgY29sbGVjdGlvbiBcIiArIEpTT04uc3RyaW5naWZ5KGluc3RhbmNlQ29sbCkgK1xuICAgICAgICBcIiBhcyBhbiBpbnN0YW5jZSBmb3IgJWZhY3Rvcnkud2l0aEV4dGVuc2lvbihpbnN0YW5jZSwgdXJsLCB2YWx1ZSlcIik7XG4gICAgfVxuXG4gICAgaWYgKHZhbHVlLmxlbmd0aCAhPT0gMSkge1xuICAgICAgaWYgKHZhbHVlLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVW5leHBlY3RlZCBjb2xsZWN0aW9uIFwiICsgSlNPTi5zdHJpbmdpZnkodmFsdWUpICtcbiAgICAgICAgICBcIiBhcyBhIHZhbHVlIGZvciAlZmFjdG9yeS53aXRoRXh0ZW5zaW9uKGluc3RhbmNlLCB1cmwsIHZhbHVlKVwiKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHZhbHVlLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJVbmV4cGVjdGVkIGVtcHR5IGNvbGxlY3Rpb24gXCIgKyBKU09OLnN0cmluZ2lmeSh2YWx1ZSkgK1xuICAgICAgICAgIFwiIGFzIGEgdmFsdWUgZm9yICVmYWN0b3J5LndpdGhFeHRlbnNpb24oaW5zdGFuY2UsIHVybCwgdmFsdWUpXCIpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChpbnN0YW5jZUNvbGwubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gW107XG4gICAgfVxuXG4gICAgY29uc3QgaW5zdGFuY2UgPSBpbnN0YW5jZUNvbGxbMF07XG5cbiAgICBpZiAoaW5zdGFuY2UgaW5zdGFuY2VvZiBSZXNvdXJjZU5vZGUpIHtcbiAgICAgIGxldCBkYXRhID0gaW5zdGFuY2UuZGF0YTtcbiAgICAgIGxldCBfZGF0YSA9IGluc3RhbmNlLl9kYXRhO1xuICAgICAgaWYgKFR5cGVJbmZvLmlzUHJpbWl0aXZlKGluc3RhbmNlLmdldFR5cGVJbmZvKCkpKSB7XG4gICAgICAgIF9kYXRhID0ge1xuICAgICAgICAgIC4uLihpbnN0YW5jZS5fZGF0YSB8fCB7fSksXG4gICAgICAgICAgZXh0ZW5zaW9uOiBbXG4gICAgICAgICAgICAuLi4oaW5zdGFuY2UuX2RhdGE/LmV4dGVuc2lvbiB8fCBbXSksXG4gICAgICAgICAgICBGYWN0b3J5LmNyZWF0ZUV4dGVuc2lvbk9iamVjdCh1cmwsIHZhbHVlWzBdKVxuICAgICAgICAgIF1cbiAgICAgICAgfTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRhdGEgPSB7XG4gICAgICAgICAgLi4uKGluc3RhbmNlLmRhdGEgfHwge30pLFxuICAgICAgICAgIGV4dGVuc2lvbjogW1xuICAgICAgICAgICAgLi4uKGluc3RhbmNlLmRhdGE/LmV4dGVuc2lvbiB8fCBbXSksXG4gICAgICAgICAgICBGYWN0b3J5LmNyZWF0ZUV4dGVuc2lvbk9iamVjdCh1cmwsIHZhbHVlWzBdKVxuICAgICAgICAgIF1cbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIHJldHVybiAgUmVzb3VyY2VOb2RlLm1ha2VSZXNOb2RlKGRhdGEsIG51bGwsIGluc3RhbmNlLnBhdGgsIF9kYXRhLFxuICAgICAgICBpbnN0YW5jZS5maGlyTm9kZURhdGFUeXBlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCBhIFJlc291cmNlTm9kZS4nKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogU2V0IGEgcHJvcGVydHkgdmFsdWUsIGFuZCByZXR1cm4gdGhlIG5ldyB0eXBlLlxuICAgKiBAcGFyYW0ge0ZhY3RvcnlbXX0gc2VsZiAtIGFuIGFycmF5IHdpdGggb25lIGVsZW1lbnQgdGhhdCByZWZlcnMgdG9cbiAgICogIHRoZSBjdXJyZW50IEZhY3RvcnkgaW5zdGFuY2UuXG4gICAqIEBwYXJhbSB7UmVzb3VyY2VOb2RlW119IGluc3RhbmNlQ29sbCAtIGEgY29sbGVjdGlvbiB0aGF0IHNob3VsZCBjb250YWluIHRoZVxuICAgKiAgaW5zdGFuY2UgdG8gc2V0IHRoZSBwcm9wZXJ0eSBvbi5cbiAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgLSBhIHN0cmluZyB2YWx1ZSB0aGF0IGlkZW50aWZpZXMgdGhlIHByb3BlcnR5IHRvIHNldC5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlIC0gdGhlIHZhbHVlIG9mIHRoZSBwcm9wZXJ0eVxuICAgKiBAcmV0dXJuIHtSZXNvdXJjZU5vZGV8KltdfVxuICAgKi9cbiAgc3RhdGljIHdpdGhQcm9wZXJ0eShzZWxmLCBpbnN0YW5jZUNvbGwsIG5hbWUsIHZhbHVlKSB7XG4gICAgaWYgKGluc3RhbmNlQ29sbC5sZW5ndGggPiAxICkge1xuICAgICAgdGhyb3cgIG5ldyBFcnJvcihcIlVuZXhwZWN0ZWQgY29sbGVjdGlvbiBcIiArIEpTT04uc3RyaW5naWZ5KGluc3RhbmNlQ29sbCkgK1xuICAgICAgICBcIiBhcyBhbiBpbnN0YW5jZSBmb3IgJWZhY3Rvcnkud2l0aFByb3BlcnR5KGluc3RhbmNlLCBuYW1lLCB2YWx1ZSlcIik7XG4gICAgfVxuXG4gICAgaWYgKHZhbHVlLmxlbmd0aCAhPT0gMSkge1xuICAgICAgaWYgKHZhbHVlLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVW5leHBlY3RlZCBjb2xsZWN0aW9uIFwiICsgSlNPTi5zdHJpbmdpZnkodmFsdWUpICtcbiAgICAgICAgICBcIiBhcyBhIHZhbHVlIGZvciAlZmFjdG9yeS53aXRoUHJvcGVydHkoaW5zdGFuY2UsIG5hbWUsIHZhbHVlKVwiKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHZhbHVlLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJVbmV4cGVjdGVkIGVtcHR5IGNvbGxlY3Rpb24gXCIgKyBKU09OLnN0cmluZ2lmeSh2YWx1ZSkgK1xuICAgICAgICAgIFwiIGFzIGEgdmFsdWUgZm9yICVmYWN0b3J5LndpdGhQcm9wZXJ0eShpbnN0YW5jZSwgbmFtZSwgdmFsdWUpXCIpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChpbnN0YW5jZUNvbGwubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gW107XG4gICAgfVxuXG4gICAgY29uc3QgaW5zdGFuY2UgPSBpbnN0YW5jZUNvbGxbMF07XG5cbiAgICBpZiAoaW5zdGFuY2UgaW5zdGFuY2VvZiBSZXNvdXJjZU5vZGUpIHtcbiAgICAgIGxldCBkYXRhID0gaW5zdGFuY2UuZGF0YTtcbiAgICAgIGxldCBfZGF0YSA9IGluc3RhbmNlLl9kYXRhO1xuICAgICAgaWYgKFR5cGVJbmZvLmlzUHJpbWl0aXZlKGluc3RhbmNlLmdldFR5cGVJbmZvKCkpKSB7XG4gICAgICAgIF9kYXRhID0ge1xuICAgICAgICAgIC4uLihpbnN0YW5jZS5fZGF0YSB8fCB7fSksXG4gICAgICAgICAgW25hbWVdOiB1dGlsLnZhbERhdGEodmFsdWVbMF0pLFxuICAgICAgICAgIC4uLih2YWx1ZVswXT8uX2RhdGEgPyB7IFsnXycgKyBuYW1lXTogdmFsdWVbMF0uX2RhdGEgfSA6IHt9KVxuICAgICAgICB9O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGF0YSA9IHtcbiAgICAgICAgICAuLi4oaW5zdGFuY2UuZGF0YSB8fCB7fSksXG4gICAgICAgICAgW25hbWVdOiB1dGlsLnZhbERhdGEodmFsdWVbMF0pLFxuICAgICAgICAgIC4uLih2YWx1ZVswXT8uX2RhdGEgPyB7IFsnXycgKyBuYW1lXTogdmFsdWVbMF0uX2RhdGEgfSA6IHt9KVxuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgcmV0dXJuICBSZXNvdXJjZU5vZGUubWFrZVJlc05vZGUoZGF0YSwgbnVsbCwgaW5zdGFuY2UucGF0aCwgX2RhdGEsXG4gICAgICAgIGluc3RhbmNlLmZoaXJOb2RlRGF0YVR5cGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIGEgUmVzb3VyY2VOb2RlLicpO1xuICAgIH1cbiAgfVxuXG59XG5cbm1vZHVsZS5leHBvcnRzID0gRmFjdG9yeTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/fhirpath@3.18.0/node_modules/fhirpath/src/factory.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/fhirpath@3.18.0/node_modules/fhirpath/src/fhirpath.js":
/*!***********************************************************************************!*\
  !*** ../node_modules/.pnpm/fhirpath@3.18.0/node_modules/fhirpath/src/fhirpath.js ***!
  \***********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// This is fhirpath interpreter\n// everything starts at evaluate function,\n// which is passed  fhirpath AST and resource.\n//\n// We reduce/eval recursively each node in AST\n// passing the context and current data\n//\n// each AST node has eval function, which should be registered in evalTable\n// and named after node type\n// if node needs to eval father it's children it has to call `doEval` function\n//\n// most of nodes do function or operator invocation at the end\n//\n// For invocation's and operator's there is one lookup table -\n// invocationTable and two helper functions doInvoke and infixInvoke for\n// operators\n// 1. operator or function is looked up in table\n// 2. using signature (in  .arity property) unpack parameters\n// 3. check params types\n// 4. do call function\n// 5. wrap result by util.arraify\n//\n// if function is nullable\n// and one of parameters is empty/null - function will not be invoked and empty\n// result returned\n//\n// Not solved problem is overloading functions by types - for example + operator defined\n// for strings and numbers\n// we can make dispatching params type dependent - let see\n\nconst {version} = __webpack_require__(/*! ../package.json */ \"(ssr)/../node_modules/.pnpm/fhirpath@3.18.0/node_modules/fhirpath/package.json\");\nconst parser = __webpack_require__(/*! ./parser */ \"(ssr)/../node_modules/.pnpm/fhirpath@3.18.0/node_modules/fhirpath/src/parser/index.js\");\nconst util = __webpack_require__(/*! ./utilities */ \"(ssr)/../node_modules/.pnpm/fhirpath@3.18.0/node_modules/fhirpath/src/utilities.js\");\n__webpack_require__(/*! ./polyfill */ \"(ssr)/../node_modules/.pnpm/fhirpath@3.18.0/node_modules/fhirpath/src/polyfill.js\");\nconst constants = __webpack_require__(/*! ./constants */ \"(ssr)/../node_modules/.pnpm/fhirpath@3.18.0/node_modules/fhirpath/src/constants.js\");\n\nlet engine    = {}; // the object with all FHIRPath functions and operations\nlet existence = __webpack_require__(/*! ./existence */ \"(ssr)/../node_modules/.pnpm/fhirpath@3.18.0/node_modules/fhirpath/src/existence.js\");\nlet filtering = __webpack_require__(/*! ./filtering */ \"(ssr)/../node_modules/.pnpm/fhirpath@3.18.0/node_modules/fhirpath/src/filtering.js\");\nlet aggregate = __webpack_require__(/*! ./aggregate */ \"(ssr)/../node_modules/.pnpm/fhirpath@3.18.0/node_modules/fhirpath/src/aggregate.js\");\nlet supplements = __webpack_require__(/*! ./sdc-ig-supplements */ \"(ssr)/../node_modules/.pnpm/fhirpath@3.18.0/node_modules/fhirpath/src/sdc-ig-supplements.js\");\nlet combining = __webpack_require__(/*! ./combining */ \"(ssr)/../node_modules/.pnpm/fhirpath@3.18.0/node_modules/fhirpath/src/combining.js\");\nlet misc      = __webpack_require__(/*! ./misc */ \"(ssr)/../node_modules/.pnpm/fhirpath@3.18.0/node_modules/fhirpath/src/misc.js\");\nlet equality  = __webpack_require__(/*! ./equality */ \"(ssr)/../node_modules/.pnpm/fhirpath@3.18.0/node_modules/fhirpath/src/equality.js\");\nlet collections  = __webpack_require__(/*! ./collections */ \"(ssr)/../node_modules/.pnpm/fhirpath@3.18.0/node_modules/fhirpath/src/collections.js\");\nlet math      = __webpack_require__(/*! ./math */ \"(ssr)/../node_modules/.pnpm/fhirpath@3.18.0/node_modules/fhirpath/src/math.js\");\nlet strings   = __webpack_require__(/*! ./strings */ \"(ssr)/../node_modules/.pnpm/fhirpath@3.18.0/node_modules/fhirpath/src/strings.js\");\nlet navigation= __webpack_require__(/*! ./navigation */ \"(ssr)/../node_modules/.pnpm/fhirpath@3.18.0/node_modules/fhirpath/src/navigation.js\");\nlet datetime  = __webpack_require__(/*! ./datetime */ \"(ssr)/../node_modules/.pnpm/fhirpath@3.18.0/node_modules/fhirpath/src/datetime.js\");\nlet additional  = __webpack_require__(/*! ./additional */ \"(ssr)/../node_modules/.pnpm/fhirpath@3.18.0/node_modules/fhirpath/src/additional.js\");\nlet logic  = __webpack_require__(/*! ./logic */ \"(ssr)/../node_modules/.pnpm/fhirpath@3.18.0/node_modules/fhirpath/src/logic.js\");\nconst types = __webpack_require__(/*! ./types */ \"(ssr)/../node_modules/.pnpm/fhirpath@3.18.0/node_modules/fhirpath/src/types.js\");\nconst {\n  FP_Date, FP_DateTime, FP_Time, FP_Quantity,\n  FP_Type, ResourceNode, TypeInfo\n} = types;\nlet makeResNode = ResourceNode.makeResNode;\nconst Terminologies = __webpack_require__(/*! ./terminologies */ \"(ssr)/../node_modules/.pnpm/fhirpath@3.18.0/node_modules/fhirpath/src/terminologies.js\");\nconst Factory = __webpack_require__(/*! ./factory */ \"(ssr)/../node_modules/.pnpm/fhirpath@3.18.0/node_modules/fhirpath/src/factory.js\");\n\n// * fn: handler\n// * arity: is index map with type signature\n//   if type is in array (like [Boolean]) - this means\n//   function accepts value of this type or empty value {}\n// * nullable:  means propagate empty result, i.e. instead\n//   calling function if one of params is  empty return empty\n\nengine.invocationTable = {\n  memberOf:     {fn: additional.memberOf, arity: { 1: ['String']} },\n  empty:        {fn: existence.emptyFn},\n  not:          {fn: existence.notFn},\n  exists:       {fn: existence.existsMacro, arity: {0: [], 1: [\"Expr\"]}},\n  all:          {fn: existence.allMacro, arity: {1: [\"Expr\"]}},\n  allTrue:      {fn: existence.allTrueFn},\n  anyTrue:      {fn: existence.anyTrueFn},\n  allFalse:     {fn: existence.allFalseFn},\n  anyFalse:     {fn: existence.anyFalseFn},\n  subsetOf:     {fn: existence.subsetOfFn, arity: {1: [\"AnyAtRoot\"]}},\n  supersetOf:   {fn: existence.supersetOfFn, arity: {1: [\"AnyAtRoot\"]}},\n  isDistinct:   {fn: existence.isDistinctFn},\n  distinct:     {fn: filtering.distinctFn},\n  count:        {fn: aggregate.countFn},\n  where:        {fn: filtering.whereMacro, arity: {1: [\"Expr\"]}},\n  extension:    {fn: filtering.extension, arity: {1: [\"String\"]}},\n  select:       {fn: filtering.selectMacro, arity: {1: [\"Expr\"]}},\n  aggregate:    {fn: aggregate.aggregateMacro, arity: {1: [\"Expr\"], 2: [\"Expr\", \"AnyAtRoot\"]}},\n  sum:          {fn: aggregate.sumFn},\n  min:          {fn: aggregate.minFn},\n  max:          {fn: aggregate.maxFn},\n  avg:          {fn: aggregate.avgFn},\n  weight:       {fn: supplements.weight},\n  ordinal:      {fn: supplements.weight},\n  single:       {fn: filtering.singleFn},\n  first:        {fn: filtering.firstFn},\n  last:         {fn: filtering.lastFn},\n  type:         {fn: types.typeFn, arity: {0: []}},\n  ofType:       {fn: filtering.ofTypeFn, arity: {1: [\"TypeSpecifier\"]}},\n  is:           {fn: types.isFn, arity: {1: [\"TypeSpecifier\"]}},\n  as:           {fn: types.asFn, arity: {1: [\"TypeSpecifier\"]}},\n  tail:         {fn: filtering.tailFn},\n  take:         {fn: filtering.takeFn, arity: {1: [\"Integer\"]}},\n  skip:         {fn: filtering.skipFn, arity: {1: [\"Integer\"]}},\n  combine:      {fn: combining.combineFn, arity: {1: [\"AnyAtRoot\"]}},\n  union:        {fn: combining.union,   arity: {1: [\"AnyAtRoot\"]}},\n  intersect:    {fn: combining.intersect,   arity: {1: [\"AnyAtRoot\"]}},\n  exclude:      {fn: combining.exclude,   arity: {1: [\"AnyAtRoot\"]}},\n  iif:          {fn: misc.iifMacro,    arity: {2: [\"Expr\", \"Expr\"], 3: [\"Expr\", \"Expr\", \"Expr\"]}},\n  trace:        {fn: misc.traceFn,     arity: {1: [\"String\"], 2: [\"String\", \"Expr\"]}},\n  defineVariable: {fn: misc.defineVariable,     arity: {1: [\"String\"], 2: [\"String\", \"Expr\"]}},\n  toInteger:    {fn: misc.toInteger},\n  toDecimal:    {fn: misc.toDecimal},\n  toString:     {fn: misc.toString},\n  toDate:       {fn: misc.toDate},\n  toDateTime:   {fn: misc.toDateTime},\n  toTime:       {fn: misc.toTime},\n  toBoolean:    {fn: misc.toBoolean},\n  toQuantity:   {fn: misc.toQuantity, arity: {0: [], 1: [\"String\"]}},\n  hasValue:     {fn: misc.hasValueFn},\n  getValue:     {fn: misc.getValueFn},\n  convertsToBoolean:    {fn: misc.createConvertsToFn(misc.toBoolean, 'boolean')},\n  convertsToInteger:    {fn: misc.createConvertsToFn(misc.toInteger, 'number')},\n  convertsToDecimal:    {fn: misc.createConvertsToFn(misc.toDecimal, 'number')},\n  convertsToString:     {fn: misc.createConvertsToFn(misc.toString, 'string')},\n  convertsToDate:       {fn: misc.createConvertsToFn(misc.toDate, FP_Date)},\n  convertsToDateTime:   {fn: misc.createConvertsToFn(misc.toDateTime, FP_DateTime)},\n  convertsToTime:       {fn: misc.createConvertsToFn(misc.toTime, FP_Time)},\n  convertsToQuantity:   {fn: misc.createConvertsToFn(misc.toQuantity, FP_Quantity)},\n\n  indexOf:        {fn: strings.indexOf,          arity: {1: [\"String\"]}},\n  substring:      {fn: strings.substring,        arity: {1: [\"Integer\"], 2: [\"Integer\",\"Integer\"]}},\n  startsWith:     {fn: strings.startsWith,       arity: {1: [\"String\"]}},\n  endsWith:       {fn: strings.endsWith,         arity: {1: [\"String\"]}},\n  contains:       {fn: strings.containsFn,       arity: {1: [\"String\"]}},\n  upper:          {fn: strings.upper},\n  lower:          {fn: strings.lower},\n  replace:        {fn: strings.replace,          arity: {2: [\"String\", \"String\"]}},\n  matches:        {fn: strings.matches,          arity: {1: [\"String\"]}},\n  replaceMatches: {fn: strings.replaceMatches,   arity: {2: [\"String\", \"String\"]}},\n  length:         {fn: strings.length },\n  toChars:        {fn: strings.toChars },\n  join:           {fn: strings.joinFn,           arity: {0: [], 1: [\"String\"]}},\n  split:          {fn: strings.splitFn,          arity: {1: [\"String\"]}},\n  trim:           {fn: strings.trimFn},\n\n  encode:         {fn: strings.encodeFn,         arity: {1: [\"String\"]}},\n  decode:         {fn: strings.decodeFn,         arity: {1: [\"String\"]}},\n\n  abs:            {fn: math.abs},\n  ceiling:        {fn: math.ceiling},\n  exp:            {fn: math.exp},\n  floor:          {fn: math.floor},\n  ln:             {fn: math.ln},\n  log:            {fn: math.log, arity:  {1: [\"Number\"]}, nullable: true},\n  power:          {fn: math.power, arity:  {1: [\"Number\"]}, nullable: true},\n  round:          {fn: math.round, arity:  {0: [], 1: [\"Number\"]}},\n  sqrt:           {fn: math.sqrt},\n  truncate:       {fn: math.truncate},\n\n  now:            {fn: datetime.now },\n  today:          {fn: datetime.today },\n  timeOfDay:      {fn: datetime.timeOfDay },\n\n  repeat:          {fn: filtering.repeatMacro, arity: {1: [\"Expr\"]}},\n  children:        {fn: navigation.children },\n  descendants:     {fn: navigation.descendants },\n\n  \"|\":          {fn: combining.union,   arity: {2: [\"Any\", \"Any\"]}},\n  \"=\":          {fn: equality.equal,   arity: {2: [\"Any\", \"Any\"]}, nullable: true},\n  \"!=\":         {fn: equality.unequal,   arity: {2: [\"Any\", \"Any\"]}, nullable: true},\n  \"~\":          {fn: equality.equival,   arity: {2: [\"Any\", \"Any\"]}},\n  \"!~\":         {fn: equality.unequival,   arity: {2: [\"Any\", \"Any\"]}},\n  \"<\":          {fn: equality.lt,   arity: {2: [\"Any\", \"Any\"]}, nullable: true},\n  \">\":          {fn: equality.gt,   arity: {2: [\"Any\", \"Any\"]}, nullable: true},\n  \"<=\":         {fn: equality.lte,  arity: {2: [\"Any\", \"Any\"]}, nullable: true},\n  \">=\":         {fn: equality.gte,  arity: {2: [\"Any\", \"Any\"]}, nullable: true},\n  \"containsOp\": {fn: collections.contains,   arity: {2: [\"Any\", \"Any\"]}},\n  \"inOp\":       {fn: collections.in,  arity: {2: [\"Any\", \"Any\"]}},\n  \"isOp\":       {fn: types.isFn,  arity: {2: [\"Any\", \"TypeSpecifier\"]}},\n  \"asOp\":       {fn: types.asFn,  arity: {2: [\"Any\", \"TypeSpecifier\"]}},\n  \"&\":          {fn: math.amp,     arity:  {2: [\"String\", \"String\"]}},\n  \"+\":          {fn: math.plus,    arity:  {2: [\"Any\", \"Any\"]}, nullable: true},\n  \"-\":          {fn: math.minus,   arity:  {2: [\"Any\", \"Any\"]}, nullable: true},\n  \"*\":          {fn: math.mul,     arity:  {2: [\"Any\", \"Any\"]}, nullable: true},\n  \"/\":          {fn: math.div,     arity:  {2: [\"Any\", \"Any\"]}, nullable: true},\n  \"mod\":        {fn: math.mod,     arity:  {2: [\"Number\", \"Number\"]}, nullable: true},\n  \"div\":        {fn: math.intdiv,  arity:  {2: [\"Number\", \"Number\"]}, nullable: true},\n\n  \"or\":        {fn: logic.orOp,  arity:       {2: [[\"Boolean\"], [\"Boolean\"]]}},\n  \"and\":       {fn: logic.andOp,  arity:      {2: [[\"Boolean\"], [\"Boolean\"]]}},\n  \"xor\":       {fn: logic.xorOp,  arity:      {2: [[\"Boolean\"], [\"Boolean\"]]}},\n  \"implies\":   {fn: logic.impliesOp,  arity:  {2: [[\"Boolean\"], [\"Boolean\"]]}},\n};\n\nengine.InvocationExpression = function(ctx, parentData, node) {\n  return node.children.reduce(function(acc, ch) {\n    return engine.doEval(ctx, acc, ch);\n  }, parentData);\n};\n\nengine.TermExpression = function(ctx, parentData, node) {\n  if (parentData) {\n    parentData = parentData.map((x) => {\n      if (x instanceof Object && x.resourceType) {\n        return makeResNode(x, null, null, null, null, ctx.model);\n      }\n      return x;\n    });\n  }\n\n  return engine.doEval(ctx,parentData, node.children[0]);\n};\n\nengine.PolarityExpression = function(ctx, parentData, node) {\n  var sign = node.terminalNodeText[0]; // either - or + per grammar\n  var rtn = engine.doEval(ctx,parentData, node.children[0]);\n  if (rtn.length !== 1) {  // not yet in spec, but per Bryn Rhodes\n    throw new Error('Unary ' + sign +\n     ' can only be applied to an individual number or Quantity.');\n  }\n  if (rtn[0] instanceof FP_Quantity) {\n    if (sign === '-') {\n      rtn[0] = new FP_Quantity(-rtn[0].value, rtn[0].unit);\n    }\n  } else if (typeof rtn[0] === 'number' && !isNaN(rtn[0])) {\n    if (sign === '-') {\n      rtn[0] = -rtn[0];\n    }\n  } else {\n    throw new Error('Unary ' + sign + ' can only be applied to a number or Quantity.');\n  }\n\n  return rtn;\n};\n\nengine.TypeSpecifier = function(ctx, parentData, node) {\n  let namespace, name;\n  const identifiers = node.text.split('.').map(i => i.replace(/(^`|`$)/g, \"\"));\n  switch (identifiers.length) {\n    case 2:\n      [namespace, name] = identifiers;\n      break;\n    case 1:\n      [name] = identifiers;\n      break;\n    default:\n      throw new Error(\"Expected TypeSpecifier node, got \" + JSON.stringify(node));\n  }\n\n  const typeInfo =  new TypeInfo({ namespace, name });\n  if (!typeInfo.isValid(ctx.model)) {\n    throw new Error('\"' + typeInfo + '\" cannot be resolved to a valid type identifier');\n  }\n  return typeInfo;\n};\n\nengine.ExternalConstantTerm = function(ctx, parentData, node) {\n  let varName;\n  const extConstant = node.children[0];\n  // externalConstant(variable name) is defined in the grammar as:\n  // '%' ( identifier | STRING )\n  if (extConstant.terminalNodeText.length === 2) {\n    // if the variable name is a STRING\n    varName = getStringLiteralVal(extConstant.terminalNodeText[1]);\n  } else {\n    // otherwise, it is an identifier\n    varName = getIdentifierVal(extConstant.children[0].text);\n  }\n\n  let value;\n  // Check the user-defined environment variables first as the user can override\n  // the \"context\" variable like we do in unit tests. In this case, the user\n  // environment variable can replace the system environment variable in \"processedVars\".\n  // If the user-defined environment variable has been processed, we don't need to process it again.\n  if (varName in ctx.vars && !ctx.processedUserVarNames.has(varName)) {\n    // Restore the ResourceNodes for the top-level objects of the environment\n    // variables. The nested objects will be converted to ResourceNodes\n    // in the MemberInvocation method.\n    value = ctx.vars[varName];\n    if (Array.isArray(value)) {\n      value = value.map(\n        i => i?.__path__\n          ? makeResNode(i, i.__path__.parentResNode, i.__path__.path, null,\n            i.__path__.fhirNodeDataType, i.__path__.model)\n          : i?.resourceType\n            ? makeResNode(i, null, null, null, null, ctx.model)\n            : i );\n    } else {\n      value = value?.__path__\n        ? makeResNode(value, value.__path__.parentResNode, value.__path__.path, null,\n          value.__path__.fhirNodeDataType, value.__path__.model)\n        : value?.resourceType\n          ? makeResNode(value, null, null, null, null, ctx.model)\n          : value;\n    }\n    ctx.processedVars[varName] = value;\n    ctx.processedUserVarNames.add(varName);\n  } else if (varName in ctx.processedVars) {\n    // \"processedVars\" are variables with ready-to-use values that have already\n    // been converted to ResourceNodes if necessary.\n    value = ctx.processedVars[varName];\n  } else  if (ctx.definedVars && varName in ctx.definedVars) {\n    // \"definedVars\" are variables defined with the \"defineVariable\" function.\n    value = ctx.definedVars[varName];\n  } else {\n    throw new Error(\n      \"Attempting to access an undefined environment variable: \" + varName\n    );\n  }\n  // For convenience, all variable values could be passed in without their array\n  // wrapper.  However, when evaluating, we need to put the array back in.\n  return value === undefined || value === null\n    ? []\n    : value instanceof Array ? value : [value];\n};\n\nengine.LiteralTerm = function(ctx, parentData, node) {\n  var term = node.children[0];\n  if(term){\n    return engine.doEval(ctx, parentData, term);\n  } else {\n    return [node.text];\n  }\n};\n\nengine.StringLiteral = function(ctx, parentData, node) {\n  return [getStringLiteralVal(node.text)];\n};\n\n/**\n * Removes the beginning and ending single-quotes and replaces string escape\n * sequences.\n * @param {string} str - string literal\n * @return {string}\n */\nfunction getStringLiteralVal(str) {\n  return str.replace(/(^'|'$)/g, \"\")\n    .replace(/\\\\(u\\d{4}|.)/g, function(match, submatch) {\n      switch(match) {\n        case '\\\\r':\n          return '\\r';\n        case '\\\\n':\n          return \"\\n\";\n        case '\\\\t':\n          return '\\t';\n        case '\\\\f':\n          return '\\f';\n        default:\n          if (submatch.length > 1)\n            return String.fromCharCode('0x'+submatch.slice(1));\n          else\n            return submatch;\n      }\n    });\n}\n\nengine.BooleanLiteral = function(ctx, parentData, node) {\n  if(node.text  === \"true\") {\n    return [true];\n  } else {\n    return [false];\n  }\n};\n\nengine.QuantityLiteral = function(ctx, parentData, node) {\n  var valueNode = node.children[0];\n  var value = Number(valueNode.terminalNodeText[0]);\n  var unitNode = valueNode.children[0];\n  var unit = unitNode.terminalNodeText[0];\n  // Sometimes the unit is in a child node of the child\n  if (!unit && unitNode.children)\n    unit = unitNode.children[0].terminalNodeText[0];\n\n  return [new FP_Quantity(value, unit)];\n};\n\nengine.DateTimeLiteral = function(ctx, parentData, node) {\n  var dateStr = node.text.slice(1); // Remove the @\n  return [new FP_DateTime(dateStr)];\n};\n\nengine.TimeLiteral = function(ctx, parentData, node) {\n  var timeStr = node.text.slice(1); // Remove the @\n  return [new FP_Time(timeStr)];\n};\n\nengine.NumberLiteral = function(ctx, parentData, node) {\n  return [Number(node.text)];\n};\n\nengine.Identifier = function(ctx, parentData, node) {\n  return [getIdentifierVal(node.text)];\n};\n\n/**\n * Removes the beginning and ending back-quotes.\n * @param {string} str - identifier string\n * @return {string}\n */\nfunction getIdentifierVal(str) {\n  return str.replace(/(^`|`$)/g, \"\");\n}\n\nengine.InvocationTerm = function(ctx, parentData, node) {\n  return engine.doEval(ctx,parentData, node.children[0]);\n};\n\n\nengine.MemberInvocation = function(ctx, parentData, node ) {\n  const key = engine.doEval(ctx, parentData, node.children[0])[0];\n  const model = ctx.model;\n\n  if (parentData) {\n    return parentData.reduce(function(acc, res) {\n      res = makeResNode(res, null, res.__path__?.path, null,\n        res.__path__?.fhirNodeDataType, model);\n      if (res.data?.resourceType === key) {\n        acc.push(res);\n      } else {\n        util.pushFn(acc, util.makeChildResNodes(res, key, model));\n      }\n      return acc;\n    }, []);\n  } else {\n    return [];\n  }\n};\n\nengine.IndexerExpression = function(ctx, parentData, node) {\n  const coll_node = node.children[0];\n  const idx_node = node.children[1];\n  var coll = engine.doEval(ctx, parentData, coll_node);\n  var idx = engine.doEval(ctx, parentData, idx_node);\n\n  if(util.isEmpty(idx)) {\n    return [];\n  }\n\n  var idxNum = parseInt(idx[0]);\n  if(coll && util.isSome(idxNum) && coll.length>idxNum && idxNum>=0) {\n    return [coll[idxNum]];\n  } else {\n    return [];\n  }\n};\n\nengine.Functn = function(ctx, parentData, node) {\n  return node.children.map(function(x) {\n    return engine.doEval(ctx, parentData, x);\n  });\n};\n\nengine.realizeParams = function(ctx, parentData, args) {\n  if(args && args[0] && args[0].children) {\n    return args[0].children.map(function(x) {\n      return engine.doEval(ctx, parentData, x);\n    });\n  } else {\n    return [];\n  }\n};\n\nfunction makeParam(ctx, parentData, type, param) {\n  if(type === \"Expr\"){\n    return function(data) {\n      const $this = util.arraify(data);\n      let ctxExpr = { ...ctx, $this };\n      if (ctx.definedVars) {\n        // Each parameter subexpression needs its own set of defined variables\n        // (cloned from the parent context). This way, the changes to the variables\n        // are isolated in the subexpression.\n        ctxExpr.definedVars = {...ctx.definedVars};\n      }\n      return engine.doEval(ctxExpr, $this, param);\n    };\n  }\n  if(type === \"AnyAtRoot\"){\n    const $this = ctx.$this || ctx.dataRoot;\n    let ctxExpr = { ...ctx, $this};\n    if (ctx.definedVars) {\n      // Each parameter subexpression needs its own set of defined variables\n      // (cloned from the parent context). This way, the changes to the variables\n      // are isolated in the subexpression.\n      ctxExpr.definedVars = {...ctx.definedVars};\n    }\n    return engine.doEval(ctxExpr, $this, param);\n  }\n  if(type === \"Identifier\"){\n    if(param.type === \"TermExpression\") {\n      return param.text;\n    } else {\n      throw new Error(\"Expected identifier node, got \" + JSON.stringify(param));\n    }\n  }\n\n  if(type === \"TypeSpecifier\") {\n    return engine.TypeSpecifier(ctx, parentData, param);\n  }\n\n  let res;\n  if(type === 'AnySingletonAtRoot'){\n    const $this = ctx.$this || ctx.dataRoot;\n    let ctxExpr = { ...ctx, $this};\n    if (ctx.definedVars) {\n      // Each parameter subexpression needs its own set of defined variables\n      // (cloned from the parent context). This way, the changes to the variables\n      // are isolated in the subexpression.\n      ctxExpr.definedVars = {...ctx.definedVars};\n    }\n    res = engine.doEval(ctxExpr, $this, param);\n  } else {\n    let ctxExpr = {...ctx};\n    if (ctx.definedVars) {\n      // Each parameter subexpression needs its own set of defined variables\n      // (cloned from the parent context). This way, the changes to the variables\n      // are isolated in the subexpression.\n      ctxExpr.definedVars = {...ctx.definedVars};\n    }\n    res = engine.doEval(ctxExpr, parentData, param);\n    if (type === \"Any\") {\n      return res;\n    }\n    if (Array.isArray(type)) {\n      if (res.length === 0) {\n        return [];\n      } else {\n        type = type[0];\n      }\n    }\n  }\n\n  return res instanceof Promise ?\n    res.then(r => misc.singleton(r, type)) :\n    misc.singleton(res, type);\n}\n\nfunction doInvoke(ctx, fnName, data, rawParams){\n  var invoc =\n    ctx.userInvocationTable\n    && Object.prototype.hasOwnProperty.call(ctx.userInvocationTable, fnName)\n    && ctx.userInvocationTable?.[fnName]\n    || engine.invocationTable[fnName]\n    || data.length === 1 && data[0]?.invocationTable?.[fnName];\n  var res;\n  if(invoc) {\n    if(!invoc.arity){\n      if(!rawParams){\n        res = invoc.fn.call(ctx, data);\n        return util.resolveAndArraify(res);\n      } else {\n        throw new Error(fnName + \" expects no params\");\n      }\n    } else {\n      var paramsNumber = rawParams ? rawParams.length : 0;\n      var argTypes = invoc.arity[paramsNumber];\n      if(argTypes){\n        var params = [];\n        for(var i = 0; i < paramsNumber; i++){\n          var tp = argTypes[i];\n          var pr = rawParams[i];\n          params.push(makeParam(ctx, data, tp, pr));\n        }\n        params.unshift(data);\n        if(invoc.nullable) {\n          if(params.some(isNullable)){\n            return [];\n          }\n        }\n        if (params.some(p => p instanceof Promise)) {\n          return Promise.all(params).then(p => {\n            res = invoc.fn.apply(ctx, p);\n            return util.resolveAndArraify(res);\n          });\n        }\n        res = invoc.fn.apply(ctx, params);\n        return util.resolveAndArraify(res);\n      } else {\n        console.log(fnName + \" wrong arity: got \" + paramsNumber );\n        return [];\n      }\n    }\n  } else {\n    throw new Error(\"Not implemented: \" + fnName);\n  }\n}\nfunction isNullable(x) {\n  return x === null || x === undefined || util.isEmpty(x);\n}\n\nfunction infixInvoke(ctx, fnName, data, rawParams){\n  var invoc = engine.invocationTable[fnName];\n  if(invoc && invoc.fn) {\n    var paramsNumber = rawParams ? rawParams.length : 0;\n    if(paramsNumber !== 2) { throw new Error(\"Infix invoke should have arity 2\"); }\n    var argTypes = invoc.arity[paramsNumber];\n    if(argTypes){\n      var params = [];\n      for(var i = 0; i < paramsNumber; i++){\n        var tp = argTypes[i];\n        var pr = rawParams[i];\n        params.push(makeParam(ctx, data, tp, pr));\n      }\n      if(invoc.nullable) {\n        if(params.some(isNullable)){\n          return [];\n        }\n      }\n      if (params.some(p => p instanceof Promise)) {\n        return Promise.all(params).then(p => {\n          var res = invoc.fn.apply(ctx, p);\n          return util.arraify(res);\n        });\n      }\n      var res = invoc.fn.apply(ctx, params);\n      return util.arraify(res);\n    } else {\n      console.log(fnName + \" wrong arity: got \" + paramsNumber );\n      return [];\n    }\n  } else {\n    throw new Error(\"Not impl \" + fnName);\n  }\n}\n\nengine.FunctionInvocation = function(ctx, parentData, node) {\n  var args = engine.doEval(ctx, parentData, node.children[0]);\n  const fnName = args[0];\n  args.shift();\n  var rawParams = args && args[0] && args[0].children;\n  return doInvoke(ctx, fnName, parentData, rawParams);\n};\n\nengine.ParamList = function(ctx, parentData, node) {\n  // we do not eval param list because sometimes it should be passed as\n  // lambda/macro (for example in case of where(...)\n  return node;\n};\n\n\nengine.UnionExpression = function(ctx, parentData, node) {\n  return infixInvoke(ctx, '|', parentData, node.children);\n};\n\nengine.ThisInvocation = function(ctx) {\n  return ctx.$this;\n};\n\nengine.TotalInvocation = function(ctx) {\n  return util.arraify(ctx.$total);\n};\n\nengine.IndexInvocation = function(ctx) {\n  return util.arraify(ctx.$index);\n};\n\nengine.OpExpression = function(ctx, parentData, node) {\n  var op = node.terminalNodeText[0];\n  return infixInvoke(ctx, op, parentData, node.children);\n};\n\nengine.AliasOpExpression = function(map){\n  return function(ctx, parentData, node) {\n    var op = node.terminalNodeText[0];\n    var alias = map[op];\n    if(!alias) { throw new Error(\"Do not know how to alias \" + op + \" by \" + JSON.stringify(map)); }\n    return infixInvoke(ctx, alias, parentData, node.children);\n  };\n};\n\nengine.NullLiteral = function() {\n  return [];\n};\n\nengine.ParenthesizedTerm = function(ctx, parentData, node) {\n  return engine.doEval(ctx, parentData, node.children[0]);\n};\n\n\nengine.evalTable = { // not every evaluator is listed if they are defined on engine\n  BooleanLiteral: engine.BooleanLiteral,\n  EqualityExpression: engine.OpExpression,\n  FunctionInvocation: engine.FunctionInvocation,\n  Functn: engine.Functn,\n  Identifier: engine.Identifier,\n  IndexerExpression: engine.IndexerExpression,\n  InequalityExpression: engine.OpExpression,\n  InvocationExpression: engine.InvocationExpression,\n  AdditiveExpression: engine.OpExpression,\n  MultiplicativeExpression: engine.OpExpression,\n  TypeExpression: engine.AliasOpExpression({\"is\": \"isOp\", \"as\": \"asOp\"}),\n  MembershipExpression: engine.AliasOpExpression({\"contains\": \"containsOp\", \"in\": \"inOp\"}),\n  NullLiteral: engine.NullLiteral,\n  EntireExpression: engine.InvocationTerm,\n  InvocationTerm: engine.InvocationTerm,\n  LiteralTerm: engine.LiteralTerm,\n  MemberInvocation: engine.MemberInvocation,\n  NumberLiteral: engine.NumberLiteral,\n  ParamList: engine.ParamList,\n  ParenthesizedTerm: engine.ParenthesizedTerm,\n  StringLiteral: engine.StringLiteral,\n  TermExpression: engine.TermExpression,\n  ThisInvocation: engine.ThisInvocation,\n  TotalInvocation: engine.TotalInvocation,\n  IndexInvocation: engine.IndexInvocation,\n  UnionExpression: engine.UnionExpression,\n  OrExpression: engine.OpExpression,\n  ImpliesExpression: engine.OpExpression,\n  AndExpression: engine.OpExpression,\n  XorExpression: engine.OpExpression\n};\n\n\nengine.doEval = function(ctx, parentData, node) {\n  if (parentData instanceof Promise) {\n    return parentData.then(p => engine.doEvalSync(ctx, p, node));\n  } else {\n    return  engine.doEvalSync(ctx, parentData, node);\n  }\n};\n\nengine.doEvalSync = function(ctx, parentData, node) {\n  const evaluator = engine.evalTable[node.type] || engine[node.type];\n  if(evaluator){\n    return evaluator.call(engine, ctx, parentData, node);\n  } else {\n    throw new Error(\"No \" + node.type + \" evaluator \");\n  }\n};\n\nfunction parse(path) {\n  return parser.parse(path);\n}\n\n\n/**\n *  Applies the given parsed FHIRPath expression to the given resource,\n *  returning the result of doEval.\n * @param {(object|object[])} resource -  FHIR resource, bundle as js object or array of resources\n *  This resource will be modified by this function to add type information.\n * @param {object} parsedPath - a special object created by the parser that describes the structure of a fhirpath expression.\n * @param {object} envVars - a hash of variable name/value pairs.\n * @param {object} model - The \"model\" data object specific to a domain, e.g. R4.\n *  For example, you could pass in the result of require(\"fhirpath/fhir-context/r4\");\n * @param {object} options - additional options:\n * @param {boolean} [options.resolveInternalTypes] - whether values of internal\n *  types should be converted to strings, true by default.\n * @param {function} [options.traceFn] - An optional trace function to call when tracing.\n * @param {object} [options.userInvocationTable] - a user invocation table used\n *  to replace any existing or define new functions.\n * @param {boolean|string} [options.async] - defines how to support asynchronous functions:\n *  false or similar to false, e.g. undefined, null, or 0 (default) - throw an exception;\n *  true or similar to true - return Promise only for asynchronous functions;\n *  \"always\" - return Promise always.\n * @param {string} [options.terminologyUrl] - a URL that points to a FHIR\n *   RESTful API that is used to create %terminologies that implements\n *   the Terminology Service API.\n * @param {AbortSignal} [options.signal] - an AbortSignal object that allows you\n *   to abort the asynchronous FHIRPath expression evaluation.\n */\nfunction applyParsedPath(resource, parsedPath, envVars, model, options) {\n  constants.reset();\n  let dataRoot = util.arraify(resource).map(\n    i => i?.__path__\n      ? makeResNode(i, i.__path__.parentResNode, i.__path__.path, null,\n        i.__path__.fhirNodeDataType, model)\n      : i?.resourceType\n        ? makeResNode(i, null, null, null, null, model)\n        : i);\n  // doEval takes a \"ctx\" object, and we store things in that as we parse, so we\n  // need to put user-provided variable data in a sub-object, ctx.vars.\n  // Set up default standard variables, and allow override from the variables.\n  // However, we'll keep our own copy of dataRoot for internal processing.\n  let ctx = {\n    dataRoot,\n    processedVars: {\n      ucum: 'http://unitsofmeasure.org',\n      context: dataRoot\n    },\n    processedUserVarNames: new Set(),\n    vars: envVars || {},\n    model\n  };\n  if (options.traceFn) {\n    ctx.customTraceFn = options.traceFn;\n  }\n  if (options.userInvocationTable) {\n    ctx.userInvocationTable = options.userInvocationTable;\n  }\n  if (options.async) {\n    ctx.async = options.async;\n  }\n  if (options.terminologyUrl) {\n    ctx.processedVars.terminologies = new Terminologies(options.terminologyUrl);\n  }\n  ctx.processedVars.factory = Factory;\n  if (options.signal) {\n    ctx.signal = options.signal;\n    if (!ctx.async) {\n      throw new Error(\n        'The \"signal\" option is only supported for asynchronous functions.');\n    }\n    if (ctx.signal.aborted) {\n      throw new Error(\n        'Evaluation of the expression was aborted before it started.');\n    }\n  }\n  const res = engine.doEval(ctx, dataRoot, parsedPath.children[0]);\n  return res instanceof Promise\n    ? res.then(r => {\n      if (ctx.signal?.aborted) {\n        return Promise.reject(new DOMException(\n          'Evaluation of the expression was aborted.', 'AbortError'));\n      } else {\n        return prepareEvalResult(r, model, options);\n      }\n    })\n    : options.async === 'always'\n      ? Promise.resolve(prepareEvalResult(res, model, options))\n      : prepareEvalResult(res, model, options);\n}\n\n/**\n * Prepares the result after evaluating an expression.\n * engine.doEval returns array of \"ResourceNode\" and/or \"FP_Type\" instances.\n * \"ResourceNode\" or \"FP_Type\" instances are not created for sub-items.\n * Resolves any internal \"ResourceNode\" instances to plain objects and if\n * options.resolveInternalTypes is true, resolve any internal \"FP_Type\"\n * instances to strings.\n * @param {Array} result - result of expression evaluation.\n * @param {object} model - The \"model\" data object specific to a domain, e.g. R4.\n * @param {object} options - additional options (see function \"applyParsedPath\").\n * @return {Array}\n */\nfunction prepareEvalResult(result, model, options) {\n  return result\n    .reduce((acc, n) => {\n      // Path for the data extracted from the resource.\n      let path;\n      let fhirNodeDataType;\n      let parentResNode;\n      if (n instanceof ResourceNode) {\n        path = n.path;\n        fhirNodeDataType = n.fhirNodeDataType;\n        parentResNode = n.parentResNode;\n      }\n      n = util.valData(n);\n      if (n instanceof FP_Type) {\n        if (options.resolveInternalTypes) {\n          n = n.toString();\n        }\n      }\n      // Exclude nulls\n      if (n != null) {\n        // Add a hidden (non-enumerable) property with the path to the data extracted\n        // from the resource.\n        if (path && typeof n === 'object' && !n.__path__) {\n          Object.defineProperty(n, '__path__', { value: {path, fhirNodeDataType, parentResNode, model} });\n        }\n        acc.push(n);\n      }\n      return acc;\n    }, []);\n}\n\n/**\n * Resolves any internal \"FP_Type\" instances in a result of FHIRPath expression\n * evaluation to standard JavaScript types.\n * @param {any} val - a result of FHIRPath expression evaluation\n * @returns {any} a new object with resolved values.\n */\nfunction resolveInternalTypes(val) {\n  if (Array.isArray(val)) {\n    for (let i=0, len=val.length; i<len; ++i)\n      val[i] = resolveInternalTypes(val[i]);\n  }\n  else if (val instanceof FP_Type) {\n    val = val.toString();\n  }\n  else if (typeof val === 'object') {\n    for (let k of Object.keys(val))\n      val[k] = resolveInternalTypes(val[k]);\n  }\n  return val;\n}\n\n/**\n *  Evaluates the \"path\" FHIRPath expression on the given resource or part of the resource,\n *  using data from \"context\" for variables mentioned in the \"path\" expression.\n * @param {(object|object[])} fhirData -  FHIR resource, part of a resource (in this case\n *  path.base should be provided), bundle as js object or array of resources.\n *  This object/array will be modified by this function to add type information.\n * @param {string|object} path - string with FHIRPath expression, sample 'Patient.name.given',\n *  or object, if fhirData represents the part of the FHIR resource:\n * @param {string} path.base - base path in resource from which fhirData was extracted\n * @param {string} path.expression - FHIRPath expression relative to path.base\n * @param {object} [envVars] - a hash of variable name/value pairs.\n * @param {object} [model] - The \"model\" data object specific to a domain, e.g. R4.\n *  For example, you could pass in the result of require(\"fhirpath/fhir-context/r4\");\n * @param {object} [options] - additional options:\n * @param {boolean} [options.resolveInternalTypes] - whether values of internal\n *  types should be converted to standard JavaScript types (true by default).\n *  If false is passed, this conversion can be done later by calling\n *  resolveInternalTypes().\n * @param {function} [options.traceFn] - An optional trace function to call when tracing.\n * @param {object} [options.userInvocationTable] - a user invocation table used\n *  to replace any existing or define new functions.\n * @param {boolean|string} [options.async] - defines how to support asynchronous functions:\n *  false or similar to false, e.g. undefined, null, or 0 (default) - throw an exception,\n *  true or similar to true - return Promise, only for asynchronous functions,\n *  \"always\" - return Promise always.\n * @param {string} [options.terminologyUrl] - a URL that points to a FHIR\n *   RESTful API that is used to create %terminologies that implements\n *   the Terminology Service API.\n * @param {AbortSignal} [options.signal] - an AbortSignal object that allows you\n *   to abort the asynchronous FHIRPath expression evaluation.\n */\nfunction evaluate(fhirData, path, envVars, model, options) {\n  return compile(path, model, options)(fhirData, envVars);\n}\n\n/**\n *  Returns a function that takes a resource or part of the resource and an\n *  optional context hash (see \"evaluate\"), and returns the result of evaluating\n *  the given FHIRPath expression on that resource.  The advantage of this\n *  function over \"evaluate\" is that if you have multiple resources, the given\n *  FHIRPath expression will only be parsed once.\n * @param {string|object} path - string with FHIRPath expression to be parsed or object:\n * @param {string} path.base - base path in resource from which a part of\n *   the resource was extracted\n * @param {string} path.expression - FHIRPath expression relative to path.base\n * @param {object} [model] - The \"model\" data object specific to a domain, e.g. R4.\n *  For example, you could pass in the result of require(\"fhirpath/fhir-context/r4\");\n * @param {object} [options] - additional options:\n * @param {boolean} [options.resolveInternalTypes] - whether values of internal\n *  types should be converted to strings, true by default.\n * @param {function} [options.traceFn] - An optional trace function to call when tracing.\n * @param {object} [options.userInvocationTable] - a user invocation table used\n *  to replace any existing or define new functions.\n * @param {boolean|string} [options.async] - defines how to support asynchronous functions:\n *  false or similar to false, e.g. undefined, null, or 0 (default) - throw an exception,\n *  true or similar to true - return Promise, only for asynchronous functions,\n *  \"always\" - return Promise always.\n * @param {string} [options.terminologyUrl] - a URL that points to a FHIR\n *   RESTful API that is used to create %terminologies that implements\n *   the Terminology Service API.\n * @param {AbortSignal} [options.signal] - an AbortSignal object that allows you\n *   to abort the asynchronous FHIRPath expression evaluation. Passing a signal\n *   to compile() whose result is used more than once will cause abortion\n *   problems.\n */\nfunction compile(path, model, options) {\n  options = {\n    resolveInternalTypes: true,\n    ... options\n  };\n\n  const userInvocationTable = options.userInvocationTable;\n  if (userInvocationTable) {\n    options.userInvocationTable = Object.keys(userInvocationTable).reduce(\n      (invocationTable, fnName) => {\n        if (userInvocationTable[fnName].internalStructures) {\n          invocationTable[fnName] = userInvocationTable[fnName];\n        } else {\n          invocationTable[fnName] = {\n            ...userInvocationTable[fnName],\n            fn: (...args) => {\n              return userInvocationTable[fnName].fn.apply(\n                // When we check Array.isArray(arg), we are checking if the\n                // singleton function has been called. An alternative to this is\n                // to check that the type of the argument is Integer, Boolean,\n                // Number, or String.\n                this, args.map(arg => Array.isArray(arg) ? arg.map(item => util.valData(item)) : arg)\n              );\n            }\n          };\n        }\n        return invocationTable;\n      }, {});\n  }\n\n  if (typeof path === 'object') {\n    const node = parse(path.expression);\n    return function (fhirData, envVars, additionalOptions) {\n      if (path.base) {\n        let basePath = model.pathsDefinedElsewhere[path.base] || path.base;\n        const baseFhirNodeDataType = model && model.path2Type[basePath];\n        basePath = baseFhirNodeDataType === 'BackboneElement' || baseFhirNodeDataType === 'Element' ? basePath : baseFhirNodeDataType || basePath;\n\n        fhirData = makeResNode(fhirData, null, basePath, null, baseFhirNodeDataType, model);\n      }\n      const actualOptions = additionalOptions ?\n        {...options, ...additionalOptions} : options;\n      return applyParsedPath(fhirData, node, envVars, model, actualOptions);\n    };\n  } else {\n    const node = parse(path);\n    return function (fhirData, envVars, additionalOptions) {\n      const actualOptions = additionalOptions ?\n        {...options, ...additionalOptions} : options;\n      return applyParsedPath(fhirData, node, envVars, model, actualOptions);\n    };\n  }\n}\n\n/**\n * Returns the type of each element in fhirpathResult array which was obtained\n * from evaluate() with option resolveInternalTypes=false.\n * @param {any} fhirpathResult - a result of FHIRPath expression evaluation.\n * @returns {string[]} an array of types, e.g. ['FHIR.Quantity', 'FHIR.date', 'System.String'].\n */\nfunction typesFn(fhirpathResult) {\n  return util.arraify(fhirpathResult).map(value => {\n    const ti = TypeInfo.fromValue(\n      value?.__path__\n        ? new ResourceNode(value, value.__path__?.parentResNode,\n          value.__path__?.path, null, value.__path__?.fhirNodeDataType, value.__path__.model)\n        : value );\n    return `${ti.namespace}.${ti.name}`;\n  });\n}\n\nmodule.exports = {\n  version,\n  parse,\n  compile,\n  evaluate,\n  resolveInternalTypes,\n  types: typesFn,\n  // Might as well export the UCUM library, since we are using it.\n  ucumUtils: (__webpack_require__(/*! @lhncbc/ucum-lhc */ \"(ssr)/../node_modules/.pnpm/@lhncbc+ucum-lhc@5.0.4/node_modules/@lhncbc/ucum-lhc/source-cjs/ucumPkg.js\").UcumLhcUtils).getInstance(),\n  // Utility functions that can be used to implement custom functions\n  util\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/fhirpath@3.18.0/node_modules/fhirpath/src/fhirpath.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/fhirpath@3.18.0/node_modules/fhirpath/src/filtering.js":
/*!************************************************************************************!*\
  !*** ../node_modules/.pnpm/fhirpath@3.18.0/node_modules/fhirpath/src/filtering.js ***!
  \************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Contains the FHIRPath Filtering and Projection functions.  (Section 5.2 of\n// the FHIRPath 1.0.0 specification).\n\n/**\n *  Adds the filtering and projection functions to the given FHIRPath engine.\n */\nconst util = __webpack_require__(/*! ./utilities */ \"(ssr)/../node_modules/.pnpm/fhirpath@3.18.0/node_modules/fhirpath/src/utilities.js\");\nconst {TypeInfo, ResourceNode} = __webpack_require__(/*! ./types */ \"(ssr)/../node_modules/.pnpm/fhirpath@3.18.0/node_modules/fhirpath/src/types.js\");\nconst hashObject = __webpack_require__(/*! ./hash-object */ \"(ssr)/../node_modules/.pnpm/fhirpath@3.18.0/node_modules/fhirpath/src/hash-object.js\");\nconst { deepEqual, maxCollSizeForDeepEqual } = __webpack_require__(/*! ./deep-equal */ \"(ssr)/../node_modules/.pnpm/fhirpath@3.18.0/node_modules/fhirpath/src/deep-equal.js\");\n\nvar engine = {};\nengine.whereMacro = function(parentData, expr) {\n  if(parentData !== false && ! parentData) { return []; }\n\n  return util.flatten(parentData.map((x, i) => {\n    this.$index = i;\n    const condition = expr(x);\n    if (condition instanceof Promise) {\n      return condition.then(c => c[0] ? x : []);\n    }\n    return condition[0] ? x : [];\n  }));\n};\n\nengine.extension = function(parentData, url) {\n  const ctx = this;\n  if(parentData !== false && ! parentData || !url) { return []; }\n\n  return util.flatten(parentData.map((x, i) => {\n    this.$index = i;\n    const extensions = (x && (x.data && x.data.extension || x._data && x._data.extension));\n    if (extensions) {\n      return extensions\n        .filter(extension => extension.url === url)\n        .map(e => ResourceNode.makeResNode(e, x, 'Extension', null, 'Extension', ctx.model));\n    }\n    return [];\n  }));\n};\n\nengine.selectMacro = function(data, expr) {\n  if(data !== false && ! data) { return []; }\n  return util.flatten(data.map((x, i) => {\n    this.$index = i;\n    return expr(x);\n  }));\n};\n\nengine.repeatMacro = function(parentData, expr, state = { res: [], unique: {}, hasPrimitive: false }) {\n  if(parentData !== false && ! parentData) { return []; }\n\n  let newItems = [].concat(...parentData.map(i => expr(i)));\n  if (newItems.some(i => i instanceof Promise)) {\n    return Promise.all(newItems).then(items => {\n      items = [].concat(...items);\n      if (items.length) {\n        return engine.repeatMacro(getNewItems(items, state), expr, state);\n      }\n      return state.res;\n    });\n  } else if (newItems.length) {\n    return engine.repeatMacro(getNewItems(newItems, state), expr, state);\n  } else {\n    return state.res;\n  }\n};\n\n/**\n * Returns new items from the input array that are not in the hash of existing\n * unique items and adds them to the result array.\n * @param {Array<*>} items - inout array.\n * @param {Object} state - current state object.\n * @param {{[key: string]: *}} state.unique - hash of existing unique items.\n * @param {Array<*>} state.res - result array.\n * @param {boolean} state.hasPrimitive - flag indicating if the result array has\n *  primitives.\n * @return {Array<*>}\n */\nfunction getNewItems(items, state) {\n  let newItems;\n  state.hasPrimitive = state.hasPrimitive || items.some(i => TypeInfo.isPrimitiveValue(i));\n  if (!state.hasPrimitive && items.length + state.res.length > maxCollSizeForDeepEqual) {\n    newItems = items.filter(item => {\n      const key = hashObject(item);\n      const isUnique = !state.unique[key];\n      if (isUnique) {\n        state.unique[key] = true;\n      }\n      return isUnique;\n    });\n    state.res.push.apply(state.res, newItems);\n  } else {\n    newItems = items.filter(item => {\n      const isUnique = !state.res.some(i => deepEqual(i, item));\n      if (isUnique) {\n        state.res.push(item);\n      }\n      return isUnique;\n    });\n  }\n  return newItems;\n}\n\n//TODO: behavior on object?\nengine.singleFn = function(x) {\n  if(x.length === 1){\n    return x;\n  } else if (x.length === 0) {\n    return [];\n  } else {\n    throw new Error(\"Expected single\");\n  }\n};\n\n\nengine.firstFn = function(x) {\n  return x[0];\n};\n\nengine.lastFn = function(x) {\n  return x[x.length - 1];\n};\n\nengine.tailFn = function(x) {\n  return x.slice(1, x.length);\n};\n\nengine.takeFn = function(x, n) {\n  return x.slice(0, n);\n};\n\nengine.skipFn = function(x, num) {\n  return x.slice(num, x.length);\n};\n\nengine.ofTypeFn = function(coll, typeInfo) {\n  const ctx = this;\n  return coll.filter(value => {\n    return TypeInfo.fromValue(value).is(typeInfo, ctx.model);\n  });\n};\n\nengine.distinctFn = function(x, hasPrimitive = undefined) {\n  let unique = [];\n  if (x.length > 0) {\n    hasPrimitive = hasPrimitive ?? x.some(i => TypeInfo.isPrimitiveValue(i));\n    if (!hasPrimitive && x.length > maxCollSizeForDeepEqual) {\n      // When we have more than maxCollSizeForDeepEqual items in input collection,\n      // we use a hash table (on JSON strings) for efficiency.\n      let uniqueHash = {};\n      for (let i = 0, len = x.length; i < len; ++i) {\n        let xObj = x[i];\n        let xStr = hashObject(xObj);\n        if (!uniqueHash[xStr]) {\n          unique.push(xObj);\n          uniqueHash[xStr] = true;\n        }\n      }\n    } else {\n      // Otherwise, it is more efficient to perform a deep comparison.\n      // Use reverse() + pop() instead of shift() to improve performance and\n      // maintain order.\n      x = x.concat().reverse();\n      do {\n        let xObj = x.pop();\n        unique.push(xObj);\n        x = x.filter(o => !deepEqual(xObj, o));\n      } while (x.length);\n    }\n  }\n  return unique;\n};\n\nmodule.exports = engine;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/fhirpath@3.18.0/node_modules/fhirpath/src/filtering.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/fhirpath@3.18.0/node_modules/fhirpath/src/hash-object.js":
/*!**************************************************************************************!*\
  !*** ../node_modules/.pnpm/fhirpath@3.18.0/node_modules/fhirpath/src/hash-object.js ***!
  \**************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const ucumUtils = (__webpack_require__(/*! @lhncbc/ucum-lhc */ \"(ssr)/../node_modules/.pnpm/@lhncbc+ucum-lhc@5.0.4/node_modules/@lhncbc/ucum-lhc/source-cjs/ucumPkg.js\").UcumLhcUtils).getInstance();\nconst {roundToMaxPrecision} = __webpack_require__(/*! ./numbers */ \"(ssr)/../node_modules/.pnpm/fhirpath@3.18.0/node_modules/fhirpath/src/numbers.js\");\nconst {valDataConverted} = __webpack_require__(/*! ./utilities */ \"(ssr)/../node_modules/.pnpm/fhirpath@3.18.0/node_modules/fhirpath/src/utilities.js\");\nconst {FP_Type, FP_Quantity} = __webpack_require__(/*! ./types */ \"(ssr)/../node_modules/.pnpm/fhirpath@3.18.0/node_modules/fhirpath/src/types.js\");\n\n/**\n *  Returns a JSON version of the given object, but with the object's keys\n *  in sorted order (or at least stable order,\n *  see https://stackoverflow.com/a/35810961/360782) and the values in\n *  unified forms, e.g. \"1 year\" is converted to the same value as \"12 months\",\n *  \"3 'min'\" is converted to the same value as \"120 'sec'\".\n *  This function is used instead of deepEqual for optimization when you need\n *  to compare many objects.\n */\nfunction hashObject(obj) {\n  return JSON.stringify(prepareObject(obj));\n}\n\n/**\n * Brings an object to the unified form so that it can be serialized to JSON to\n * compare with other objects according to https://hl7.org/fhirpath/#equals\n * This function is following the logic from deepEqual (if changes are needed\n * here they are likely also needed there).\n */\nfunction prepareObject(value) {\n  value = valDataConverted(value);\n  if (value === null) {\n    return null;\n  } else if (typeof value === 'number') {\n    return roundToMaxPrecision(value);\n  } else if (value instanceof Date) {\n    return value.toISOString();\n  } if (value instanceof FP_Quantity) {\n    const magnitude = FP_Quantity._yearMonthConversionFactor[value.unit];\n    if (magnitude) {\n      return '_!yearMonth!_:' + magnitude * value.value;\n    } else {\n      const ucumQuantity = FP_Quantity.toUcumQuantity(value.value, value.unit);\n      const unit = ucumUtils.getSpecifiedUnit(ucumQuantity.unit).unit;\n      return '_!' + unit.property_ + '!_:' + unit.magnitude_ * ucumQuantity.value;\n    }\n  } else if (value instanceof FP_Type) {\n    return value.toString();\n  } else if (typeof value === 'object') {\n    return Array.isArray(value) ?\n      value.map(prepareObject) :\n      Object.keys(value).sort().reduce(\n        (o, key) => {\n          const v = value[key];\n          o[key] = prepareObject(v);\n          return o;\n        }, {});\n  }\n\n  return  value;\n}\n\nmodule.exports = hashObject;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2ZoaXJwYXRoQDMuMTguMC9ub2RlX21vZHVsZXMvZmhpcnBhdGgvc3JjL2hhc2gtb2JqZWN0LmpzIiwibWFwcGluZ3MiOiJBQUFBLGtCQUFrQixvS0FBd0M7QUFDMUQsT0FBTyxxQkFBcUIsRUFBRSxtQkFBTyxDQUFDLG1HQUFXO0FBQ2pELE9BQU8sa0JBQWtCLEVBQUUsbUJBQU8sQ0FBQyx1R0FBYTtBQUNoRCxPQUFPLHNCQUFzQixFQUFFLG1CQUFPLENBQUMsK0ZBQVM7O0FBRWhEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBLElBQUk7QUFDSjtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTLElBQUk7QUFDYjs7QUFFQTtBQUNBOztBQUVBIiwic291cmNlcyI6WyIvVXNlcnMvZXRoYW5raW0vTmVzdG9yL21lZGZldGNoLmpzL25vZGVfbW9kdWxlcy8ucG5wbS9maGlycGF0aEAzLjE4LjAvbm9kZV9tb2R1bGVzL2ZoaXJwYXRoL3NyYy9oYXNoLW9iamVjdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCB1Y3VtVXRpbHMgPSByZXF1aXJlKCdAbGhuY2JjL3VjdW0tbGhjJykuVWN1bUxoY1V0aWxzLmdldEluc3RhbmNlKCk7XG5jb25zdCB7cm91bmRUb01heFByZWNpc2lvbn0gPSByZXF1aXJlKCcuL251bWJlcnMnKTtcbmNvbnN0IHt2YWxEYXRhQ29udmVydGVkfSA9IHJlcXVpcmUoJy4vdXRpbGl0aWVzJyk7XG5jb25zdCB7RlBfVHlwZSwgRlBfUXVhbnRpdHl9ID0gcmVxdWlyZSgnLi90eXBlcycpO1xuXG4vKipcbiAqICBSZXR1cm5zIGEgSlNPTiB2ZXJzaW9uIG9mIHRoZSBnaXZlbiBvYmplY3QsIGJ1dCB3aXRoIHRoZSBvYmplY3QncyBrZXlzXG4gKiAgaW4gc29ydGVkIG9yZGVyIChvciBhdCBsZWFzdCBzdGFibGUgb3JkZXIsXG4gKiAgc2VlIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8zNTgxMDk2MS8zNjA3ODIpIGFuZCB0aGUgdmFsdWVzIGluXG4gKiAgdW5pZmllZCBmb3JtcywgZS5nLiBcIjEgeWVhclwiIGlzIGNvbnZlcnRlZCB0byB0aGUgc2FtZSB2YWx1ZSBhcyBcIjEyIG1vbnRoc1wiLFxuICogIFwiMyAnbWluJ1wiIGlzIGNvbnZlcnRlZCB0byB0aGUgc2FtZSB2YWx1ZSBhcyBcIjEyMCAnc2VjJ1wiLlxuICogIFRoaXMgZnVuY3Rpb24gaXMgdXNlZCBpbnN0ZWFkIG9mIGRlZXBFcXVhbCBmb3Igb3B0aW1pemF0aW9uIHdoZW4geW91IG5lZWRcbiAqICB0byBjb21wYXJlIG1hbnkgb2JqZWN0cy5cbiAqL1xuZnVuY3Rpb24gaGFzaE9iamVjdChvYmopIHtcbiAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHByZXBhcmVPYmplY3Qob2JqKSk7XG59XG5cbi8qKlxuICogQnJpbmdzIGFuIG9iamVjdCB0byB0aGUgdW5pZmllZCBmb3JtIHNvIHRoYXQgaXQgY2FuIGJlIHNlcmlhbGl6ZWQgdG8gSlNPTiB0b1xuICogY29tcGFyZSB3aXRoIG90aGVyIG9iamVjdHMgYWNjb3JkaW5nIHRvIGh0dHBzOi8vaGw3Lm9yZy9maGlycGF0aC8jZXF1YWxzXG4gKiBUaGlzIGZ1bmN0aW9uIGlzIGZvbGxvd2luZyB0aGUgbG9naWMgZnJvbSBkZWVwRXF1YWwgKGlmIGNoYW5nZXMgYXJlIG5lZWRlZFxuICogaGVyZSB0aGV5IGFyZSBsaWtlbHkgYWxzbyBuZWVkZWQgdGhlcmUpLlxuICovXG5mdW5jdGlvbiBwcmVwYXJlT2JqZWN0KHZhbHVlKSB7XG4gIHZhbHVlID0gdmFsRGF0YUNvbnZlcnRlZCh2YWx1ZSk7XG4gIGlmICh2YWx1ZSA9PT0gbnVsbCkge1xuICAgIHJldHVybiBudWxsO1xuICB9IGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHtcbiAgICByZXR1cm4gcm91bmRUb01heFByZWNpc2lvbih2YWx1ZSk7XG4gIH0gZWxzZSBpZiAodmFsdWUgaW5zdGFuY2VvZiBEYXRlKSB7XG4gICAgcmV0dXJuIHZhbHVlLnRvSVNPU3RyaW5nKCk7XG4gIH0gaWYgKHZhbHVlIGluc3RhbmNlb2YgRlBfUXVhbnRpdHkpIHtcbiAgICBjb25zdCBtYWduaXR1ZGUgPSBGUF9RdWFudGl0eS5feWVhck1vbnRoQ29udmVyc2lvbkZhY3Rvclt2YWx1ZS51bml0XTtcbiAgICBpZiAobWFnbml0dWRlKSB7XG4gICAgICByZXR1cm4gJ18heWVhck1vbnRoIV86JyArIG1hZ25pdHVkZSAqIHZhbHVlLnZhbHVlO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCB1Y3VtUXVhbnRpdHkgPSBGUF9RdWFudGl0eS50b1VjdW1RdWFudGl0eSh2YWx1ZS52YWx1ZSwgdmFsdWUudW5pdCk7XG4gICAgICBjb25zdCB1bml0ID0gdWN1bVV0aWxzLmdldFNwZWNpZmllZFVuaXQodWN1bVF1YW50aXR5LnVuaXQpLnVuaXQ7XG4gICAgICByZXR1cm4gJ18hJyArIHVuaXQucHJvcGVydHlfICsgJyFfOicgKyB1bml0Lm1hZ25pdHVkZV8gKiB1Y3VtUXVhbnRpdHkudmFsdWU7XG4gICAgfVxuICB9IGVsc2UgaWYgKHZhbHVlIGluc3RhbmNlb2YgRlBfVHlwZSkge1xuICAgIHJldHVybiB2YWx1ZS50b1N0cmluZygpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcpIHtcbiAgICByZXR1cm4gQXJyYXkuaXNBcnJheSh2YWx1ZSkgP1xuICAgICAgdmFsdWUubWFwKHByZXBhcmVPYmplY3QpIDpcbiAgICAgIE9iamVjdC5rZXlzKHZhbHVlKS5zb3J0KCkucmVkdWNlKFxuICAgICAgICAobywga2V5KSA9PiB7XG4gICAgICAgICAgY29uc3QgdiA9IHZhbHVlW2tleV07XG4gICAgICAgICAgb1trZXldID0gcHJlcGFyZU9iamVjdCh2KTtcbiAgICAgICAgICByZXR1cm4gbztcbiAgICAgICAgfSwge30pO1xuICB9XG5cbiAgcmV0dXJuICB2YWx1ZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBoYXNoT2JqZWN0O1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/fhirpath@3.18.0/node_modules/fhirpath/src/hash-object.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/fhirpath@3.18.0/node_modules/fhirpath/src/logic.js":
/*!********************************************************************************!*\
  !*** ../node_modules/.pnpm/fhirpath@3.18.0/node_modules/fhirpath/src/logic.js ***!
  \********************************************************************************/
/***/ ((module) => {

eval("var engine = {};\n\nengine.orOp = function(a, b) {\n  if(Array.isArray(b)){\n    if(a === true){\n      return true;\n    } else if (a === false) {\n      return [];\n    } else if (Array.isArray(a)) {\n      return [];\n    }\n  }\n  if(Array.isArray(a)){\n    if(b === true ){\n      return true;\n    } else {\n      return [];\n    }\n  }\n  return a || b;\n};\n\nengine.andOp = function(a, b) {\n  if(Array.isArray(b)){\n    if(a === true){\n      return [];\n    } else if (a === false) {\n      return false;\n    } else if (Array.isArray(a)) {\n      return [];\n    }\n  }\n  if(Array.isArray(a)){\n    if(b === true ){\n      return [];\n    } else {\n      return false;\n    }\n  }\n  return a && b;\n};\n\nengine.xorOp = function(a, b) {\n  // If a or b are arrays, they must be the empty set.\n  // In that case, the result is always the empty set.\n  if (Array.isArray(a) || Array.isArray(b))\n    return [];\n  return ( a && !b ) || ( !a && b );\n};\n\nengine.impliesOp = function(a, b) {\n  if(Array.isArray(b)){\n    if(a === true){\n      return [];\n    } else if (a === false) {\n      return true;\n    } else if (Array.isArray(a)) {\n      return [];\n    }\n  }\n  if(Array.isArray(a)){\n    if(b === true ){\n      return true;\n    } else {\n      return [];\n    }\n  }\n  if(a === false) { return true; }\n  return (a && b);\n};\n\n\nmodule.exports = engine;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2ZoaXJwYXRoQDMuMTguMC9ub2RlX21vZHVsZXMvZmhpcnBhdGgvc3JjL2xvZ2ljLmpzIiwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQSxvQkFBb0I7QUFDcEI7QUFDQTs7O0FBR0EiLCJzb3VyY2VzIjpbIi9Vc2Vycy9ldGhhbmtpbS9OZXN0b3IvbWVkZmV0Y2guanMvbm9kZV9tb2R1bGVzLy5wbnBtL2ZoaXJwYXRoQDMuMTguMC9ub2RlX21vZHVsZXMvZmhpcnBhdGgvc3JjL2xvZ2ljLmpzIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBlbmdpbmUgPSB7fTtcblxuZW5naW5lLm9yT3AgPSBmdW5jdGlvbihhLCBiKSB7XG4gIGlmKEFycmF5LmlzQXJyYXkoYikpe1xuICAgIGlmKGEgPT09IHRydWUpe1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIGlmIChhID09PSBmYWxzZSkge1xuICAgICAgcmV0dXJuIFtdO1xuICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShhKSkge1xuICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbiAgfVxuICBpZihBcnJheS5pc0FycmF5KGEpKXtcbiAgICBpZihiID09PSB0cnVlICl7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbiAgfVxuICByZXR1cm4gYSB8fCBiO1xufTtcblxuZW5naW5lLmFuZE9wID0gZnVuY3Rpb24oYSwgYikge1xuICBpZihBcnJheS5pc0FycmF5KGIpKXtcbiAgICBpZihhID09PSB0cnVlKXtcbiAgICAgIHJldHVybiBbXTtcbiAgICB9IGVsc2UgaWYgKGEgPT09IGZhbHNlKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KGEpKSB7XG4gICAgICByZXR1cm4gW107XG4gICAgfVxuICB9XG4gIGlmKEFycmF5LmlzQXJyYXkoYSkpe1xuICAgIGlmKGIgPT09IHRydWUgKXtcbiAgICAgIHJldHVybiBbXTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gYSAmJiBiO1xufTtcblxuZW5naW5lLnhvck9wID0gZnVuY3Rpb24oYSwgYikge1xuICAvLyBJZiBhIG9yIGIgYXJlIGFycmF5cywgdGhleSBtdXN0IGJlIHRoZSBlbXB0eSBzZXQuXG4gIC8vIEluIHRoYXQgY2FzZSwgdGhlIHJlc3VsdCBpcyBhbHdheXMgdGhlIGVtcHR5IHNldC5cbiAgaWYgKEFycmF5LmlzQXJyYXkoYSkgfHwgQXJyYXkuaXNBcnJheShiKSlcbiAgICByZXR1cm4gW107XG4gIHJldHVybiAoIGEgJiYgIWIgKSB8fCAoICFhICYmIGIgKTtcbn07XG5cbmVuZ2luZS5pbXBsaWVzT3AgPSBmdW5jdGlvbihhLCBiKSB7XG4gIGlmKEFycmF5LmlzQXJyYXkoYikpe1xuICAgIGlmKGEgPT09IHRydWUpe1xuICAgICAgcmV0dXJuIFtdO1xuICAgIH0gZWxzZSBpZiAoYSA9PT0gZmFsc2UpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShhKSkge1xuICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbiAgfVxuICBpZihBcnJheS5pc0FycmF5KGEpKXtcbiAgICBpZihiID09PSB0cnVlICl7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbiAgfVxuICBpZihhID09PSBmYWxzZSkgeyByZXR1cm4gdHJ1ZTsgfVxuICByZXR1cm4gKGEgJiYgYik7XG59O1xuXG5cbm1vZHVsZS5leHBvcnRzID0gZW5naW5lO1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/fhirpath@3.18.0/node_modules/fhirpath/src/logic.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/fhirpath@3.18.0/node_modules/fhirpath/src/math.js":
/*!*******************************************************************************!*\
  !*** ../node_modules/.pnpm/fhirpath@3.18.0/node_modules/fhirpath/src/math.js ***!
  \*******************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// This file holds code to hande the FHIRPath Math functions.\n\nconst {FP_Quantity, FP_Type} = __webpack_require__(/*! ./types */ \"(ssr)/../node_modules/.pnpm/fhirpath@3.18.0/node_modules/fhirpath/src/types.js\");\nconst util = __webpack_require__(/*! ./utilities */ \"(ssr)/../node_modules/.pnpm/fhirpath@3.18.0/node_modules/fhirpath/src/utilities.js\");\n\n/**\n *  Adds the math functions to the given FHIRPath engine.\n */\nconst engine = {};\n\n/**\n * Checks if input collection is a number singleton and runs the passed function.\n * @param {Array<ResourceNode|number|any>} x - input collection\n * @param {Function} fn - math function\n * @throws Error\n * @return {number}\n */\nfunction callFnForNumericSingleton(x, fn){\n  let res;\n  if (isEmpty(x)){\n    res = [];\n  } else if (x.length !== 1) {\n    throw new Error(\"Unexpected collection\" + JSON.stringify(x) +\n      \"; expected singleton of type number\");\n  } else {\n    const num = util.valData(x[0]);\n    if (num == null) {\n      res = [];\n    } else if (typeof num === 'number') {\n      res = fn(num);\n    } else {\n      throw new Error(\"Expected number, but got \" + JSON.stringify(num));\n    }\n  }\n  return res;\n}\n\nfunction isEmpty(x) {\n  if(typeof(x) == 'number'){\n    return false;\n  }\n  return x.length === 0;\n}\n\nengine.amp = function(x, y){\n  return (x || \"\") + (y || \"\");\n};\n\n//HACK: for only polymorphic function\n//  Actually, \"minus\" is now also polymorphic\nengine.plus = function(xs, ys){\n  let res;\n  if(xs.length === 1 && ys.length === 1) {\n    const x = util.valDataConverted(xs[0]);\n    const y = util.valDataConverted(ys[0]);\n    // In the future, this and other functions might need to return ResourceNode\n    // to preserve the type information (integer vs decimal, and maybe decimal\n    // vs string if decimals are represented as strings), in order to support\n    // \"as\" and \"is\", but that support is deferred for now.\n    if (x == null || y == null) {\n      res = [];\n    } else if (typeof x == \"string\" && typeof y == \"string\") {\n      res = x + y;\n    } else if(typeof x == \"number\") {\n      if (typeof y == \"number\") {\n        res = x + y;\n      } else if (y instanceof FP_Quantity) {\n        res = (new FP_Quantity(x, \"'1'\")).plus(y);\n      }\n    } else if(x instanceof FP_Type) {\n      if (y instanceof FP_Quantity) {\n        res = x.plus(y);\n      } else if (y instanceof FP_Type) {\n        res = y.plus(x);\n      } else if (typeof y == \"number\") {\n        res = x.plus(new FP_Quantity(y, \"'1'\"));\n      }\n    }\n  }\n  if (res === undefined) {\n    throw new Error(\"Cannot \" + JSON.stringify(xs) + \" + \" + JSON.stringify(ys));\n  }\n  return res;\n};\n\nengine.minus = function(xs, ys){\n  if(xs.length === 1 && ys.length === 1) {\n    const x = util.valDataConverted(xs[0]);\n    const y = util.valDataConverted(ys[0]);\n    if (x == null || y == null) {\n      return [];\n    }\n    if(typeof x == \"number\") {\n      if (typeof y == \"number\") {\n        return x - y;\n      }\n      if (y instanceof FP_Quantity) {\n        return (new FP_Quantity(x, \"'1'\")).plus(new FP_Quantity(-y.value, y.unit));\n      }\n    }\n\n    if(x instanceof FP_Type) {\n      if (y instanceof FP_Quantity) {\n        return x.plus(new FP_Quantity(-y.value, y.unit));\n      }\n      if (typeof y == \"number\") {\n        return x.plus(new FP_Quantity(-y, \"'1'\"));\n      }\n    }\n  }\n  throw new Error(\"Cannot \" + JSON.stringify(xs) + \" - \" + JSON.stringify(ys));\n};\n\n\nengine.mul = function(xs, ys){\n  if(xs.length === 1 && ys.length === 1) {\n    const x = util.valDataConverted(xs[0]);\n    const y = util.valDataConverted(ys[0]);\n    if (x == null || y == null) {\n      return [];\n    }\n    if(typeof x == \"number\") {\n      if (typeof y == \"number\") {\n        return x * y;\n      }\n      if (y instanceof FP_Quantity) {\n        return (new FP_Quantity(x, \"'1'\")).mul(y);\n      }\n    }\n\n    if(x instanceof FP_Type) {\n      if (y instanceof FP_Quantity) {\n        return x.mul(y);\n      }\n      if (typeof y == 'number') {\n        return x.mul(new FP_Quantity(y, \"'1'\"));\n      }\n    }\n  }\n  throw new Error(\"Cannot \" + JSON.stringify(xs) + \" * \" + JSON.stringify(ys));\n};\n\nengine.div = function(xs, ys){\n  if(xs.length === 1 && ys.length === 1) {\n    const x = util.valDataConverted(xs[0]);\n    const y = util.valDataConverted(ys[0]);\n    if (x == null || y == null) {\n      return [];\n    }\n    if(typeof x == \"number\") {\n      if (typeof y == \"number\") {\n        if (y === 0) return [];\n        return x / y;\n      }\n      if (y instanceof FP_Quantity) {\n        return (new FP_Quantity(x, \"'1'\")).div(y);\n      }\n    }\n\n    if(x instanceof FP_Type) {\n      if (y instanceof FP_Quantity) {\n        return x.div(y);\n      }\n      if (typeof y == \"number\") {\n        return x.div(new FP_Quantity(y, \"'1'\"));\n      }\n    }\n  }\n  throw new Error(\"Cannot \" + JSON.stringify(xs) + \" / \" + JSON.stringify(ys));\n\n};\n\nengine.intdiv = function(x, y){\n  if (y === 0) return [];\n  return Math.floor(x / y);\n};\n\nengine.mod = function(x, y){\n  if (y === 0) return [];\n  return x % y;\n};\n\nengine.abs = function(x){\n  let res;\n\n  if (isEmpty(x)) {\n    res = [];\n  } else if (x.length !== 1) {\n    throw new Error(\"Unexpected collection\" + JSON.stringify(x) +\n      \"; expected singleton of type number or Quantity\");\n  } else {\n    var val = util.valData(x[0]);\n    if (val == null) {\n      res = [];\n    } else if (typeof val === 'number') {\n      res = Math.abs(val);\n    } else if (val instanceof FP_Quantity) {\n      res = new FP_Quantity(Math.abs(val.value), val.unit);\n    } else {\n      throw new Error(\"Expected number or Quantity, but got \" + JSON.stringify(val || x));\n    }\n  }\n\n  return res;\n};\n\nengine.ceiling = function(x) {\n  return callFnForNumericSingleton(x, Math.ceil);\n};\n\nengine.exp = function(x){\n  return callFnForNumericSingleton(x, Math.exp);\n};\n\nengine.floor = function(x){\n  return callFnForNumericSingleton(x, Math.floor);\n};\n\nengine.ln = function(x){\n  return callFnForNumericSingleton(x, Math.log);\n};\n\nengine.log = function(x, base){\n  return callFnForNumericSingleton(x, (num) => {\n    return (Math.log(num) / Math.log(base));\n  });\n};\n\nengine.power = function(x, exponent){\n  return callFnForNumericSingleton(x, (num) => {\n    const res = Math.pow(num, exponent);\n    return isNaN(res) ? [] : res;\n  });\n};\n\n/**\n * Implements the \"round\" function documented at\n * https://hl7.org/fhirpath/#roundprecision-integer-decimal\n * @param {Array} x - input collection\n * @param {integer} [precision] - determines what decimal place to round to\n * @return {number}\n */\nengine.round = function(x, precision){\n  return callFnForNumericSingleton(x, (num) => {\n    if (precision === undefined) {\n      return (Math.round(num));\n    } else {\n      let degree = Math.pow(10, precision);\n      return (Math.round(num * degree) / degree);\n    }\n  });\n};\n\nengine.sqrt = function(x){\n  return callFnForNumericSingleton(x, (num) => {\n    if (num < 0) {\n      return [];\n    } else {\n      return Math.sqrt(num);\n    }\n  });\n};\n\nengine.truncate = function(x){\n  return callFnForNumericSingleton(x, Math.trunc);\n};\n\nmodule.exports = engine;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/fhirpath@3.18.0/node_modules/fhirpath/src/math.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/fhirpath@3.18.0/node_modules/fhirpath/src/misc.js":
/*!*******************************************************************************!*\
  !*** ../node_modules/.pnpm/fhirpath@3.18.0/node_modules/fhirpath/src/misc.js ***!
  \*******************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n// This file holds code to hande the FHIRPath Existence functions (5.1 in the\n// specification).\n\nvar util = __webpack_require__(/*! ./utilities */ \"(ssr)/../node_modules/.pnpm/fhirpath@3.18.0/node_modules/fhirpath/src/utilities.js\");\nvar types = __webpack_require__(/*! ./types */ \"(ssr)/../node_modules/.pnpm/fhirpath@3.18.0/node_modules/fhirpath/src/types.js\");\n\nconst { FP_Quantity, TypeInfo } = types;\n\nvar engine = {};\n\nengine.iifMacro = function(data, cond, ok, fail) {\n  const condition = cond(data);\n  if (condition instanceof Promise) {\n    return condition.then(c => iifMacroSync(data, c, ok, fail));\n  }\n  return iifMacroSync(data, condition, ok, fail);\n};\n\nfunction iifMacroSync(data, condition, ok, fail) {\n  if(util.isTrue(condition)) {\n    return ok(data);\n  } else {\n    return fail ? fail(data) : [];\n  }\n}\n\nengine.traceFn = function (x, label, expr) {\n  const exprRes = expr ? expr(x) : null;\n  if (exprRes instanceof Promise) {\n    return exprRes.then((r) => engine.traceFn(x, label, r));\n  }\n  if (this.customTraceFn) {\n    if (expr){\n      this.customTraceFn(expr(x), label ?? \"\");\n    }\n    else {\n      this.customTraceFn(x, label ?? \"\");\n    }\n  }\n  else {\n    if (expr){\n      console.log(\"TRACE:[\" + (label || \"\") + \"]\", JSON.stringify(expr(x), null, \" \"));\n    }\n    else {\n      console.log(\"TRACE:[\" + (label || \"\") + \"]\", JSON.stringify(x, null, \" \"));\n    }\n  }\n  return x;\n};\n\n/**\n * Defines a variable named name that is accessible in subsequent expressions\n * and has the value of expr if present, otherwise the value of the input\n * collection.\n * @param {Array} x - the input collection on which the function is executed\n * @param {string} label - the name of the variable to define\n * @param {*} [expr] - an expression to run on the input collection\n * @returns the value of the input collection (The function should be transparent\n *  to the caller)\n */\nengine.defineVariable = function (x, label, expr) {\n  let data = x;\n  if (expr){\n    data = expr(x);\n  }\n  // Just in time initialization of definedVars\n  if (!this.definedVars) this.definedVars = {};\n\n  if (label in this.vars || label in this.processedVars) {\n    throw new Error(\"Environment Variable %\" + label + \" already defined\");\n  }\n\n  if (Object.keys(this.definedVars).includes(label)) {\n    throw new Error(\"Variable %\" + label + \" already defined\");\n  }\n\n  this.definedVars[label] = data;\n  return x;\n};\n\nvar intRegex = /^[+-]?\\d+$/;\nengine.toInteger = function(coll){\n  if(coll.length !== 1) { return []; }\n  var v = util.valData(coll[0]);\n  if(v === false) {return 0;}\n  if(v === true) {return 1;}\n  if(typeof v === \"number\") {\n    if(Number.isInteger(v)) {\n      return v;\n    } else {\n      return [];\n    }\n  }\n  if(typeof v === \"string\" && intRegex.test(v)) {\n    return parseInt(v);\n  }\n  return [];\n};\n\nconst quantityRegex = /^((\\+|-)?\\d+(\\.\\d+)?)\\s*(('[^']+')|([a-zA-Z]+))?$/,\n  quantityRegexMap = {value:1,unit:5,time:6};\nengine.toQuantity = function (coll, toUnit) {\n  let result;\n\n  if (coll.length > 1) {\n    throw new Error(\"Could not convert to quantity: input collection contains multiple items\");\n  } else if (coll.length === 1) {\n    if (toUnit) {\n      const thisUnitInSeconds = FP_Quantity._calendarDuration2Seconds[this.unit];\n      const toUnitInSeconds = FP_Quantity._calendarDuration2Seconds[toUnit];\n      if (\n        !thisUnitInSeconds !== !toUnitInSeconds &&\n        (thisUnitInSeconds > 1 || toUnitInSeconds > 1)\n      ) {\n        // Conversion from calendar duration quantities greater than seconds to\n        // time-valued UCUM quantities greater than seconds or vice versa is not\n        // allowed.\n        return null;\n      }\n\n      // Surround UCUM unit code in the toUnit parameter with single quotes\n      if (!FP_Quantity.mapTimeUnitsToUCUMCode[toUnit]) {\n        toUnit = `'${toUnit}'`;\n      }\n    }\n\n    var v = util.valDataConverted(coll[0]);\n    let quantityRegexRes;\n\n    if (typeof v === \"number\") {\n      result = new FP_Quantity(v, '\\'1\\'');\n    } else if (v instanceof FP_Quantity) {\n      result = v;\n    } else if (typeof v === 'boolean') {\n      result = new FP_Quantity(v ? 1 : 0, '\\'1\\'');\n    } else if (typeof v === \"string\" && (quantityRegexRes = quantityRegex.exec(v)) ) {\n      const value = quantityRegexRes[quantityRegexMap.value],\n        unit = quantityRegexRes[quantityRegexMap.unit],\n        time = quantityRegexRes[quantityRegexMap.time];\n\n      // UCUM unit code in the input string must be surrounded with single quotes\n      if (!time || FP_Quantity.mapTimeUnitsToUCUMCode[time]) {\n        result = new FP_Quantity(Number(value), unit || time || '\\'1\\'');\n      }\n    }\n\n    if (result && toUnit && result.unit !== toUnit) {\n      result = FP_Quantity.convUnitTo(result.unit, result.value, toUnit);\n    }\n  }\n\n  return result || [];\n};\n\nvar numRegex = /^[+-]?\\d+(\\.\\d+)?$/;\nengine.toDecimal = function(coll){\n  if(coll.length !== 1) { return []; }\n  var v = util.valData(coll[0]);\n  if(v === false) {return 0;}\n  if(v === true) {return 1.0;}\n  if(typeof v === \"number\") {\n    return v;\n  }\n  if(typeof v === \"string\" && numRegex.test(v)) {\n    return parseFloat(v);\n  }\n  return [];\n};\n\nengine.toString = function(coll){\n  if(coll.length !== 1) { return []; }\n  var v = util.valDataConverted(coll[0]);\n  if (v == null) { return []; }\n  return v.toString();\n};\n\n\n/**\n *  Defines a function on engine called to+timeType (e.g., toDateTime, etc.).\n * @param timeType The string name of a class for a time type (e.g. \"FP_DateTime\").\n */\nfunction defineTimeConverter(timeType) {\n  let timeName = timeType.slice(3); // Remove 'FP_'\n  engine['to'+timeName] = function(coll) {\n    var rtn = [];\n    if (coll.length > 1)\n      throw Error('to '+timeName+' called for a collection of length '+coll.length);\n    if (coll.length === 1) {\n      var v = util.valData(coll[0]);\n      if (typeof v === \"string\") {\n        var t = types[timeType].checkString(v);\n        if (t) {\n          rtn = t;\n        }\n      }\n    }\n    return rtn;\n  };\n}\ndefineTimeConverter('FP_Date');\ndefineTimeConverter('FP_DateTime');\ndefineTimeConverter('FP_Time');\n\n// Possible string values convertible to the true boolean value\nconst trueStrings = ['true', 't', 'yes', 'y', '1', '1.0'].reduce((acc, val) => {\n  acc[val] = true;\n  return acc;\n}, {});\n\n// Possible string values convertible to the false boolean value\nconst falseStrings = ['false', 'f', 'no', 'n', '0', '0.0'].reduce((acc, val) => {\n  acc[val] = true;\n  return acc;\n}, {});\n\nengine.toBoolean = function (coll) {\n  if(coll.length !== 1) {\n    return [];\n  }\n\n  const v = util.valData(coll[0]);\n  switch (typeof v) {\n    case 'boolean':\n      return v;\n    case 'number':\n      if (v === 1) {\n        return true;\n      }\n      if (v === 0) {\n        return false;\n      }\n      break;\n    case 'string':\n      // eslint-disable-next-line no-case-declarations\n      const lowerCaseValue = v.toLowerCase();\n      if (trueStrings[lowerCaseValue]) {\n        return true;\n      }\n      if (falseStrings[lowerCaseValue]) {\n        return false;\n      }\n  }\n  return [];\n};\n\n/**\n * Creates function that checks if toFunction returns specified type\n * @param {function(coll: array): <type|[]>} toFunction\n * @param {string|class} type - specifies type, for example: 'string' or FP_Quantity\n * @return {function(coll: array)}\n */\nengine.createConvertsToFn = function (toFunction, type) {\n  if (typeof type === 'string') {\n    return function (coll) {\n      if (coll.length !== 1) {\n        return [];\n      }\n\n      return typeof toFunction(coll) === type;\n    };\n  }\n\n  return function (coll) {\n    if (coll.length !== 1) {\n      return [];\n    }\n\n    return toFunction(coll) instanceof type;\n  };\n};\n\nconst singletonEvalByType = {\n  \"Integer\": function(d){\n    if (Number.isInteger(d)) {\n      return d;\n    }\n  },\n  \"Boolean\": function(d){\n    if (d === true || d === false) {\n      return d;\n    } else {\n      return true;\n    }\n  },\n  \"Number\": function(d) {\n    if (typeof d === \"number\") {\n      return d;\n    }\n  },\n  \"String\": function(d){\n    if (typeof d === \"string\") {\n      return d;\n    }\n  },\n  \"StringOrNumber\": function(d){\n    if (typeof d === \"string\" || typeof d === \"number\") {\n      return d;\n    }\n  },\n  \"AnySingletonAtRoot\": function (d) {\n    return d;\n  }\n};\n\n/**\n * Converts a collection to a singleton of the specified type.\n * The result can be an empty array if input collection is empty.\n * See http://hl7.org/fhirpath/#singleton-evaluation-of-collections for details.\n * @param {Array} coll - collection\n * @param {string} type - 'Integer', 'Boolean', 'Number' or 'String'\n * @throws {Error}  if there is more than one item in input collection,\n *   or an item that is not a specified type\n * @return {*|[]} the value of specified type or empty array\n */\nengine.singleton = function (coll, type) {\n  if(coll.length > 1){\n    throw new Error(\"Unexpected collection\" + JSON.stringify(coll) +\n      \"; expected singleton of type \" + type);\n  } else if (coll.length === 0) {\n    return [];\n  }\n  const v = util.valData(coll[0]);\n  if (v == null) {\n    return [];\n  }\n  const toSingleton = singletonEvalByType[type];\n  if (toSingleton) {\n    const value = toSingleton(v);\n    if (value !== undefined) {\n      return value;\n    }\n    throw new Error(`Expected ${type.toLowerCase()}, but got: ${JSON.stringify(coll)}`);\n  }\n  throw new Error('Not supported type ' + type);\n};\n\nengine.hasValueFn = function(coll) {\n  return coll.length === 1 && util.valData(coll[0]) != null\n    && TypeInfo.isPrimitiveValue(coll[0]);\n};\n\n/**\n * Returns the underlying system value for the FHIR primitive if the input\n * collection contains a single value which is a FHIR primitive, and it has a\n * primitive value. Otherwise, the return value is empty (i.e. []).\n *\n * See: https://hl7.org/fhir/fhirpath.html#functions\n * @param {Array<*>} coll - input collection\n * @returns {*|[]}\n */\nengine.getValueFn = function(coll) {\n  if (coll.length === 1) {\n    const node = coll[0];\n    const v = util.valData(node);\n    if (v != null && TypeInfo.isPrimitiveValue(node)) {\n      return v;\n    }\n  }\n  return [];\n};\n\nmodule.exports = engine;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/fhirpath@3.18.0/node_modules/fhirpath/src/misc.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/fhirpath@3.18.0/node_modules/fhirpath/src/navigation.js":
/*!*************************************************************************************!*\
  !*** ../node_modules/.pnpm/fhirpath@3.18.0/node_modules/fhirpath/src/navigation.js ***!
  \*************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const util = __webpack_require__(/*! ./utilities */ \"(ssr)/../node_modules/.pnpm/fhirpath@3.18.0/node_modules/fhirpath/src/utilities.js\");\n\nvar engine = {};\n\nengine.children = function(coll){\n  let model = this.model; // \"this\" is the context object\n  return coll.reduce(function(acc, x){\n    let d = util.valData(x);\n    if (d == null) {\n      return acc;\n    } else if (typeof d === 'object') {\n      for (var prop of Object.keys(d)) {\n        util.pushFn(acc, util.makeChildResNodes(x, prop, model));\n      }\n      return acc;\n    } else {\n      return acc;\n    }\n  }, []);\n};\n\nengine.descendants = function(coll){\n  var ch = engine.children.call(this, coll); // \"this\" is the context object\n  var res = [];\n  while(ch.length > 0){\n    util.pushFn(res, ch);\n    ch = engine.children.call(this, ch);\n  }\n  return res;\n};\n\nmodule.exports = engine;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2ZoaXJwYXRoQDMuMTguMC9ub2RlX21vZHVsZXMvZmhpcnBhdGgvc3JjL25hdmlnYXRpb24uanMiLCJtYXBwaW5ncyI6IkFBQUEsYUFBYSxtQkFBTyxDQUFDLHVHQUFhOztBQUVsQzs7QUFFQTtBQUNBLDBCQUEwQjtBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0EsNkNBQTZDO0FBQzdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBIiwic291cmNlcyI6WyIvVXNlcnMvZXRoYW5raW0vTmVzdG9yL21lZGZldGNoLmpzL25vZGVfbW9kdWxlcy8ucG5wbS9maGlycGF0aEAzLjE4LjAvbm9kZV9tb2R1bGVzL2ZoaXJwYXRoL3NyYy9uYXZpZ2F0aW9uLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHV0aWwgPSByZXF1aXJlKFwiLi91dGlsaXRpZXNcIik7XG5cbnZhciBlbmdpbmUgPSB7fTtcblxuZW5naW5lLmNoaWxkcmVuID0gZnVuY3Rpb24oY29sbCl7XG4gIGxldCBtb2RlbCA9IHRoaXMubW9kZWw7IC8vIFwidGhpc1wiIGlzIHRoZSBjb250ZXh0IG9iamVjdFxuICByZXR1cm4gY29sbC5yZWR1Y2UoZnVuY3Rpb24oYWNjLCB4KXtcbiAgICBsZXQgZCA9IHV0aWwudmFsRGF0YSh4KTtcbiAgICBpZiAoZCA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gYWNjO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGQgPT09ICdvYmplY3QnKSB7XG4gICAgICBmb3IgKHZhciBwcm9wIG9mIE9iamVjdC5rZXlzKGQpKSB7XG4gICAgICAgIHV0aWwucHVzaEZuKGFjYywgdXRpbC5tYWtlQ2hpbGRSZXNOb2Rlcyh4LCBwcm9wLCBtb2RlbCkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGFjYztcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGFjYztcbiAgICB9XG4gIH0sIFtdKTtcbn07XG5cbmVuZ2luZS5kZXNjZW5kYW50cyA9IGZ1bmN0aW9uKGNvbGwpe1xuICB2YXIgY2ggPSBlbmdpbmUuY2hpbGRyZW4uY2FsbCh0aGlzLCBjb2xsKTsgLy8gXCJ0aGlzXCIgaXMgdGhlIGNvbnRleHQgb2JqZWN0XG4gIHZhciByZXMgPSBbXTtcbiAgd2hpbGUoY2gubGVuZ3RoID4gMCl7XG4gICAgdXRpbC5wdXNoRm4ocmVzLCBjaCk7XG4gICAgY2ggPSBlbmdpbmUuY2hpbGRyZW4uY2FsbCh0aGlzLCBjaCk7XG4gIH1cbiAgcmV0dXJuIHJlcztcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZW5naW5lO1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/fhirpath@3.18.0/node_modules/fhirpath/src/navigation.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/fhirpath@3.18.0/node_modules/fhirpath/src/numbers.js":
/*!**********************************************************************************!*\
  !*** ../node_modules/.pnpm/fhirpath@3.18.0/node_modules/fhirpath/src/numbers.js ***!
  \**********************************************************************************/
/***/ ((module) => {

eval("let numberFns = {};\n\n// Returns the number of digits in the number after the decimal point, ignoring\n// trailing zeros.\nfunction decimalPlaces(x) {\n  // Based on https://stackoverflow.com/a/9539746/360782\n  // Make sure it is a number and use the builtin number -> string.\n  const s = \"\" + (+x),\n    match = /(\\d+)(?:\\.(\\d+))?(?:[eE]([+-]?\\d+))?$/.exec(s);\n  // NaN or Infinity or integer.\n  // We arbitrarily decide that Infinity is integral.\n  if (!match) { return 0; }\n  // Count the number of digits in the fraction and subtract the\n  // exponent to simulate moving the decimal point left by exponent places.\n  // 1.234e+2 has 1 fraction digit and '234'.length -  2 == 1\n  // 1.234e-2 has 5 fraction digit and '234'.length - -2 == 5\n  //var wholeNum = match[1];\n  const fraction = match[2],\n    exponent = match[3];\n  return Math.max(\n    0,  // lower limit.\n    (fraction === '0' ? 0 : (fraction || '').length)  // fraction length\n    - (exponent || 0));  // exponent\n}\n\n/**\n *  Rounds a number to the specified number of decimal places.\n * @param x the decimal number to be rounded\n * @param n the (maximum) number of decimal places to preserve.  (The result\n *  could contain fewer if the decimal digits in x contain zeros).\n */\nfunction roundToDecimalPlaces (x, n) {\n  const scale = Math.pow(10, n);\n  return Math.round(x*scale)/scale;\n}\n\n/**\n *  The smallest representable number in FHIRPath.\n */\nconst PRECISION_STEP = 1e-8;\n\n/**\n *  Rounds a number to the nearest multiple of PRECISION_STEP.\n */\nconst roundToMaxPrecision = numberFns.roundToMaxPrecision = function (x) {\n  return Math.round(x/PRECISION_STEP)*PRECISION_STEP;\n};\n\n/**\n * Determines numbers equivalence\n * @param {number} actual\n * @param {number} expected\n * @return {boolean}\n */\nnumberFns.isEquivalent = function(actual, expected) {\n  if(Number.isInteger(actual) && Number.isInteger(expected)) {\n    return actual === expected;\n  }\n\n  const prec = Math.min(decimalPlaces(actual), decimalPlaces(expected));\n\n  if(prec === 0){\n    return Math.round(actual) === Math.round(expected);\n  } else {\n    // Note: parseFloat(0.00000011).toPrecision(7) ===  \"1.100000e-7\"\n    // It does # of significant digits, not decimal places.\n    return roundToDecimalPlaces(actual, prec) ===\n      roundToDecimalPlaces(expected, prec);\n  }\n};\n\n/**\n * Determines numbers equality\n * @param {number} actual\n * @param {number} expected\n * @return {boolean}\n */\nnumberFns.isEqual = function(actual, expected) {\n  return roundToMaxPrecision(actual) === roundToMaxPrecision(expected);\n};\n\nmodule.exports = numberFns;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2ZoaXJwYXRoQDMuMTguMC9ub2RlX21vZHVsZXMvZmhpcnBhdGgvc3JjL251bWJlcnMuanMiLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIi9Vc2Vycy9ldGhhbmtpbS9OZXN0b3IvbWVkZmV0Y2guanMvbm9kZV9tb2R1bGVzLy5wbnBtL2ZoaXJwYXRoQDMuMTguMC9ub2RlX21vZHVsZXMvZmhpcnBhdGgvc3JjL251bWJlcnMuanMiXSwic291cmNlc0NvbnRlbnQiOlsibGV0IG51bWJlckZucyA9IHt9O1xuXG4vLyBSZXR1cm5zIHRoZSBudW1iZXIgb2YgZGlnaXRzIGluIHRoZSBudW1iZXIgYWZ0ZXIgdGhlIGRlY2ltYWwgcG9pbnQsIGlnbm9yaW5nXG4vLyB0cmFpbGluZyB6ZXJvcy5cbmZ1bmN0aW9uIGRlY2ltYWxQbGFjZXMoeCkge1xuICAvLyBCYXNlZCBvbiBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL2EvOTUzOTc0Ni8zNjA3ODJcbiAgLy8gTWFrZSBzdXJlIGl0IGlzIGEgbnVtYmVyIGFuZCB1c2UgdGhlIGJ1aWx0aW4gbnVtYmVyIC0+IHN0cmluZy5cbiAgY29uc3QgcyA9IFwiXCIgKyAoK3gpLFxuICAgIG1hdGNoID0gLyhcXGQrKSg/OlxcLihcXGQrKSk/KD86W2VFXShbKy1dP1xcZCspKT8kLy5leGVjKHMpO1xuICAvLyBOYU4gb3IgSW5maW5pdHkgb3IgaW50ZWdlci5cbiAgLy8gV2UgYXJiaXRyYXJpbHkgZGVjaWRlIHRoYXQgSW5maW5pdHkgaXMgaW50ZWdyYWwuXG4gIGlmICghbWF0Y2gpIHsgcmV0dXJuIDA7IH1cbiAgLy8gQ291bnQgdGhlIG51bWJlciBvZiBkaWdpdHMgaW4gdGhlIGZyYWN0aW9uIGFuZCBzdWJ0cmFjdCB0aGVcbiAgLy8gZXhwb25lbnQgdG8gc2ltdWxhdGUgbW92aW5nIHRoZSBkZWNpbWFsIHBvaW50IGxlZnQgYnkgZXhwb25lbnQgcGxhY2VzLlxuICAvLyAxLjIzNGUrMiBoYXMgMSBmcmFjdGlvbiBkaWdpdCBhbmQgJzIzNCcubGVuZ3RoIC0gIDIgPT0gMVxuICAvLyAxLjIzNGUtMiBoYXMgNSBmcmFjdGlvbiBkaWdpdCBhbmQgJzIzNCcubGVuZ3RoIC0gLTIgPT0gNVxuICAvL3ZhciB3aG9sZU51bSA9IG1hdGNoWzFdO1xuICBjb25zdCBmcmFjdGlvbiA9IG1hdGNoWzJdLFxuICAgIGV4cG9uZW50ID0gbWF0Y2hbM107XG4gIHJldHVybiBNYXRoLm1heChcbiAgICAwLCAgLy8gbG93ZXIgbGltaXQuXG4gICAgKGZyYWN0aW9uID09PSAnMCcgPyAwIDogKGZyYWN0aW9uIHx8ICcnKS5sZW5ndGgpICAvLyBmcmFjdGlvbiBsZW5ndGhcbiAgICAtIChleHBvbmVudCB8fCAwKSk7ICAvLyBleHBvbmVudFxufVxuXG4vKipcbiAqICBSb3VuZHMgYSBudW1iZXIgdG8gdGhlIHNwZWNpZmllZCBudW1iZXIgb2YgZGVjaW1hbCBwbGFjZXMuXG4gKiBAcGFyYW0geCB0aGUgZGVjaW1hbCBudW1iZXIgdG8gYmUgcm91bmRlZFxuICogQHBhcmFtIG4gdGhlIChtYXhpbXVtKSBudW1iZXIgb2YgZGVjaW1hbCBwbGFjZXMgdG8gcHJlc2VydmUuICAoVGhlIHJlc3VsdFxuICogIGNvdWxkIGNvbnRhaW4gZmV3ZXIgaWYgdGhlIGRlY2ltYWwgZGlnaXRzIGluIHggY29udGFpbiB6ZXJvcykuXG4gKi9cbmZ1bmN0aW9uIHJvdW5kVG9EZWNpbWFsUGxhY2VzICh4LCBuKSB7XG4gIGNvbnN0IHNjYWxlID0gTWF0aC5wb3coMTAsIG4pO1xuICByZXR1cm4gTWF0aC5yb3VuZCh4KnNjYWxlKS9zY2FsZTtcbn1cblxuLyoqXG4gKiAgVGhlIHNtYWxsZXN0IHJlcHJlc2VudGFibGUgbnVtYmVyIGluIEZISVJQYXRoLlxuICovXG5jb25zdCBQUkVDSVNJT05fU1RFUCA9IDFlLTg7XG5cbi8qKlxuICogIFJvdW5kcyBhIG51bWJlciB0byB0aGUgbmVhcmVzdCBtdWx0aXBsZSBvZiBQUkVDSVNJT05fU1RFUC5cbiAqL1xuY29uc3Qgcm91bmRUb01heFByZWNpc2lvbiA9IG51bWJlckZucy5yb3VuZFRvTWF4UHJlY2lzaW9uID0gZnVuY3Rpb24gKHgpIHtcbiAgcmV0dXJuIE1hdGgucm91bmQoeC9QUkVDSVNJT05fU1RFUCkqUFJFQ0lTSU9OX1NURVA7XG59O1xuXG4vKipcbiAqIERldGVybWluZXMgbnVtYmVycyBlcXVpdmFsZW5jZVxuICogQHBhcmFtIHtudW1iZXJ9IGFjdHVhbFxuICogQHBhcmFtIHtudW1iZXJ9IGV4cGVjdGVkXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5udW1iZXJGbnMuaXNFcXVpdmFsZW50ID0gZnVuY3Rpb24oYWN0dWFsLCBleHBlY3RlZCkge1xuICBpZihOdW1iZXIuaXNJbnRlZ2VyKGFjdHVhbCkgJiYgTnVtYmVyLmlzSW50ZWdlcihleHBlY3RlZCkpIHtcbiAgICByZXR1cm4gYWN0dWFsID09PSBleHBlY3RlZDtcbiAgfVxuXG4gIGNvbnN0IHByZWMgPSBNYXRoLm1pbihkZWNpbWFsUGxhY2VzKGFjdHVhbCksIGRlY2ltYWxQbGFjZXMoZXhwZWN0ZWQpKTtcblxuICBpZihwcmVjID09PSAwKXtcbiAgICByZXR1cm4gTWF0aC5yb3VuZChhY3R1YWwpID09PSBNYXRoLnJvdW5kKGV4cGVjdGVkKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBOb3RlOiBwYXJzZUZsb2F0KDAuMDAwMDAwMTEpLnRvUHJlY2lzaW9uKDcpID09PSAgXCIxLjEwMDAwMGUtN1wiXG4gICAgLy8gSXQgZG9lcyAjIG9mIHNpZ25pZmljYW50IGRpZ2l0cywgbm90IGRlY2ltYWwgcGxhY2VzLlxuICAgIHJldHVybiByb3VuZFRvRGVjaW1hbFBsYWNlcyhhY3R1YWwsIHByZWMpID09PVxuICAgICAgcm91bmRUb0RlY2ltYWxQbGFjZXMoZXhwZWN0ZWQsIHByZWMpO1xuICB9XG59O1xuXG4vKipcbiAqIERldGVybWluZXMgbnVtYmVycyBlcXVhbGl0eVxuICogQHBhcmFtIHtudW1iZXJ9IGFjdHVhbFxuICogQHBhcmFtIHtudW1iZXJ9IGV4cGVjdGVkXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5udW1iZXJGbnMuaXNFcXVhbCA9IGZ1bmN0aW9uKGFjdHVhbCwgZXhwZWN0ZWQpIHtcbiAgcmV0dXJuIHJvdW5kVG9NYXhQcmVjaXNpb24oYWN0dWFsKSA9PT0gcm91bmRUb01heFByZWNpc2lvbihleHBlY3RlZCk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IG51bWJlckZucztcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/fhirpath@3.18.0/node_modules/fhirpath/src/numbers.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/fhirpath@3.18.0/node_modules/fhirpath/src/parser/antlr4-index.js":
/*!**********************************************************************************************!*\
  !*** ../node_modules/.pnpm/fhirpath@3.18.0/node_modules/fhirpath/src/parser/antlr4-index.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("// This is a modified version of antr4's index.js, in which\n// the \"require\" statements of two unused classes are commented out\n// to avoid introducing a dependency on Node.js' \"fs\" package.\n\n/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\nexports.atn = __webpack_require__(/*! antlr4/src/antlr4/atn/index */ \"(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/atn/index.js\");\nexports.codepointat = __webpack_require__(/*! antlr4/src/antlr4/polyfills/codepointat */ \"(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/polyfills/codepointat.js\");\nexports.dfa = __webpack_require__(/*! antlr4/src/antlr4/dfa/index */ \"(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/dfa/index.js\");\nexports.fromcodepoint = __webpack_require__(/*! antlr4/src/antlr4/polyfills/fromcodepoint */ \"(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/polyfills/fromcodepoint.js\");\nexports.tree = __webpack_require__(/*! antlr4/src/antlr4/tree/index */ \"(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/tree/index.js\");\nexports.error = __webpack_require__(/*! antlr4/src/antlr4/error/index */ \"(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/error/index.js\");\nexports.Token = __webpack_require__(/*! antlr4/src/antlr4/Token */ \"(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/Token.js\").Token;\n// Commented out to avoid the problem with 'fs' during the webpack build\n// exports.CharStreams = require('antlr4/src/antlr4/CharStreams');\nexports.CommonToken = __webpack_require__(/*! antlr4/src/antlr4/Token */ \"(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/Token.js\").CommonToken;\nexports.InputStream = __webpack_require__(/*! antlr4/src/antlr4/InputStream */ \"(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/InputStream.js\");\n// Commented out to avoid the problem with 'fs' during the webpack build\n// exports.FileStream = require('antlr4/src/antlr4/FileStream');\nexports.CommonTokenStream = __webpack_require__(/*! antlr4/src/antlr4/CommonTokenStream */ \"(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/CommonTokenStream.js\");\nexports.Lexer = __webpack_require__(/*! antlr4/src/antlr4/Lexer */ \"(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/Lexer.js\");\nexports.Parser = __webpack_require__(/*! antlr4/src/antlr4/Parser */ \"(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/Parser.js\");\nvar pc = __webpack_require__(/*! antlr4/src/antlr4/PredictionContext */ \"(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/PredictionContext.js\");\nexports.PredictionContextCache = pc.PredictionContextCache;\nexports.ParserRuleContext = __webpack_require__(/*! antlr4/src/antlr4/ParserRuleContext */ \"(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/ParserRuleContext.js\");\nexports.Interval = __webpack_require__(/*! antlr4/src/antlr4/IntervalSet */ \"(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/IntervalSet.js\").Interval;\nexports.IntervalSet = __webpack_require__(/*! antlr4/src/antlr4/IntervalSet */ \"(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/IntervalSet.js\").IntervalSet;\nexports.Utils = __webpack_require__(/*! antlr4/src/antlr4/Utils */ \"(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/Utils.js\");\nexports.LL1Analyzer = __webpack_require__(/*! antlr4/src/antlr4/LL1Analyzer */ \"(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/LL1Analyzer.js\").LL1Analyzer;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2ZoaXJwYXRoQDMuMTguMC9ub2RlX21vZHVsZXMvZmhpcnBhdGgvc3JjL3BhcnNlci9hbnRscjQtaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEpBQW9EO0FBQ3BELDRMQUF3RTtBQUN4RSw0SkFBb0Q7QUFDcEQsa01BQTRFO0FBQzVFLCtKQUFzRDtBQUN0RCxrS0FBd0Q7QUFDeEQsNEpBQXdEO0FBQ3hEO0FBQ0E7QUFDQSx3S0FBb0U7QUFDcEUsd0tBQThEO0FBQzlEO0FBQ0E7QUFDQSwwTEFBMEU7QUFDMUUsc0pBQWtEO0FBQ2xELHlKQUFvRDtBQUNwRCxTQUFTLG1CQUFPLENBQUMseUlBQXFDO0FBQ3RELDhCQUE4QjtBQUM5QiwwTEFBMEU7QUFDMUUsOEtBQW9FO0FBQ3BFLG9MQUEwRTtBQUMxRSxzSkFBa0Q7QUFDbEQsb0xBQTBFIiwic291cmNlcyI6WyIvVXNlcnMvZXRoYW5raW0vTmVzdG9yL21lZGZldGNoLmpzL25vZGVfbW9kdWxlcy8ucG5wbS9maGlycGF0aEAzLjE4LjAvbm9kZV9tb2R1bGVzL2ZoaXJwYXRoL3NyYy9wYXJzZXIvYW50bHI0LWluZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIFRoaXMgaXMgYSBtb2RpZmllZCB2ZXJzaW9uIG9mIGFudHI0J3MgaW5kZXguanMsIGluIHdoaWNoXG4vLyB0aGUgXCJyZXF1aXJlXCIgc3RhdGVtZW50cyBvZiB0d28gdW51c2VkIGNsYXNzZXMgYXJlIGNvbW1lbnRlZCBvdXRcbi8vIHRvIGF2b2lkIGludHJvZHVjaW5nIGEgZGVwZW5kZW5jeSBvbiBOb2RlLmpzJyBcImZzXCIgcGFja2FnZS5cblxuLyogQ29weXJpZ2h0IChjKSAyMDEyLTIwMTcgVGhlIEFOVExSIFByb2plY3QuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBVc2Ugb2YgdGhpcyBmaWxlIGlzIGdvdmVybmVkIGJ5IHRoZSBCU0QgMy1jbGF1c2UgbGljZW5zZSB0aGF0XG4gKiBjYW4gYmUgZm91bmQgaW4gdGhlIExJQ0VOU0UudHh0IGZpbGUgaW4gdGhlIHByb2plY3Qgcm9vdC5cbiAqL1xuZXhwb3J0cy5hdG4gPSByZXF1aXJlKCdhbnRscjQvc3JjL2FudGxyNC9hdG4vaW5kZXgnKTtcbmV4cG9ydHMuY29kZXBvaW50YXQgPSByZXF1aXJlKCdhbnRscjQvc3JjL2FudGxyNC9wb2x5ZmlsbHMvY29kZXBvaW50YXQnKTtcbmV4cG9ydHMuZGZhID0gcmVxdWlyZSgnYW50bHI0L3NyYy9hbnRscjQvZGZhL2luZGV4Jyk7XG5leHBvcnRzLmZyb21jb2RlcG9pbnQgPSByZXF1aXJlKCdhbnRscjQvc3JjL2FudGxyNC9wb2x5ZmlsbHMvZnJvbWNvZGVwb2ludCcpO1xuZXhwb3J0cy50cmVlID0gcmVxdWlyZSgnYW50bHI0L3NyYy9hbnRscjQvdHJlZS9pbmRleCcpO1xuZXhwb3J0cy5lcnJvciA9IHJlcXVpcmUoJ2FudGxyNC9zcmMvYW50bHI0L2Vycm9yL2luZGV4Jyk7XG5leHBvcnRzLlRva2VuID0gcmVxdWlyZSgnYW50bHI0L3NyYy9hbnRscjQvVG9rZW4nKS5Ub2tlbjtcbi8vIENvbW1lbnRlZCBvdXQgdG8gYXZvaWQgdGhlIHByb2JsZW0gd2l0aCAnZnMnIGR1cmluZyB0aGUgd2VicGFjayBidWlsZFxuLy8gZXhwb3J0cy5DaGFyU3RyZWFtcyA9IHJlcXVpcmUoJ2FudGxyNC9zcmMvYW50bHI0L0NoYXJTdHJlYW1zJyk7XG5leHBvcnRzLkNvbW1vblRva2VuID0gcmVxdWlyZSgnYW50bHI0L3NyYy9hbnRscjQvVG9rZW4nKS5Db21tb25Ub2tlbjtcbmV4cG9ydHMuSW5wdXRTdHJlYW0gPSByZXF1aXJlKCdhbnRscjQvc3JjL2FudGxyNC9JbnB1dFN0cmVhbScpO1xuLy8gQ29tbWVudGVkIG91dCB0byBhdm9pZCB0aGUgcHJvYmxlbSB3aXRoICdmcycgZHVyaW5nIHRoZSB3ZWJwYWNrIGJ1aWxkXG4vLyBleHBvcnRzLkZpbGVTdHJlYW0gPSByZXF1aXJlKCdhbnRscjQvc3JjL2FudGxyNC9GaWxlU3RyZWFtJyk7XG5leHBvcnRzLkNvbW1vblRva2VuU3RyZWFtID0gcmVxdWlyZSgnYW50bHI0L3NyYy9hbnRscjQvQ29tbW9uVG9rZW5TdHJlYW0nKTtcbmV4cG9ydHMuTGV4ZXIgPSByZXF1aXJlKCdhbnRscjQvc3JjL2FudGxyNC9MZXhlcicpO1xuZXhwb3J0cy5QYXJzZXIgPSByZXF1aXJlKCdhbnRscjQvc3JjL2FudGxyNC9QYXJzZXInKTtcbnZhciBwYyA9IHJlcXVpcmUoJ2FudGxyNC9zcmMvYW50bHI0L1ByZWRpY3Rpb25Db250ZXh0Jyk7XG5leHBvcnRzLlByZWRpY3Rpb25Db250ZXh0Q2FjaGUgPSBwYy5QcmVkaWN0aW9uQ29udGV4dENhY2hlO1xuZXhwb3J0cy5QYXJzZXJSdWxlQ29udGV4dCA9IHJlcXVpcmUoJ2FudGxyNC9zcmMvYW50bHI0L1BhcnNlclJ1bGVDb250ZXh0Jyk7XG5leHBvcnRzLkludGVydmFsID0gcmVxdWlyZSgnYW50bHI0L3NyYy9hbnRscjQvSW50ZXJ2YWxTZXQnKS5JbnRlcnZhbDtcbmV4cG9ydHMuSW50ZXJ2YWxTZXQgPSByZXF1aXJlKCdhbnRscjQvc3JjL2FudGxyNC9JbnRlcnZhbFNldCcpLkludGVydmFsU2V0O1xuZXhwb3J0cy5VdGlscyA9IHJlcXVpcmUoJ2FudGxyNC9zcmMvYW50bHI0L1V0aWxzJyk7XG5leHBvcnRzLkxMMUFuYWx5emVyID0gcmVxdWlyZSgnYW50bHI0L3NyYy9hbnRscjQvTEwxQW5hbHl6ZXInKS5MTDFBbmFseXplcjtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/fhirpath@3.18.0/node_modules/fhirpath/src/parser/antlr4-index.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/fhirpath@3.18.0/node_modules/fhirpath/src/parser/generated/FHIRPathLexer.js":
/*!*********************************************************************************************************!*\
  !*** ../node_modules/.pnpm/fhirpath@3.18.0/node_modules/fhirpath/src/parser/generated/FHIRPathLexer.js ***!
  \*********************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Generated from FHIRPath.g4 by ANTLR 4.9.3\n// jshint ignore: start\nconst antlr4 = __webpack_require__(/*! ../antlr4-index */ \"(ssr)/../node_modules/.pnpm/fhirpath@3.18.0/node_modules/fhirpath/src/parser/antlr4-index.js\");\n\n\n\nconst serializedATN = [\"\\u0003\\u608b\\ua72a\\u8133\\ub9ed\\u417c\\u3be7\\u7786\",\n    \"\\u5964\\u0002A\\u0203\\b\\u0001\\u0004\\u0002\\t\\u0002\\u0004\\u0003\\t\\u0003\",\n    \"\\u0004\\u0004\\t\\u0004\\u0004\\u0005\\t\\u0005\\u0004\\u0006\\t\\u0006\\u0004\\u0007\",\n    \"\\t\\u0007\\u0004\\b\\t\\b\\u0004\\t\\t\\t\\u0004\\n\\t\\n\\u0004\\u000b\\t\\u000b\\u0004\",\n    \"\\f\\t\\f\\u0004\\r\\t\\r\\u0004\\u000e\\t\\u000e\\u0004\\u000f\\t\\u000f\\u0004\\u0010\",\n    \"\\t\\u0010\\u0004\\u0011\\t\\u0011\\u0004\\u0012\\t\\u0012\\u0004\\u0013\\t\\u0013\",\n    \"\\u0004\\u0014\\t\\u0014\\u0004\\u0015\\t\\u0015\\u0004\\u0016\\t\\u0016\\u0004\\u0017\",\n    \"\\t\\u0017\\u0004\\u0018\\t\\u0018\\u0004\\u0019\\t\\u0019\\u0004\\u001a\\t\\u001a\",\n    \"\\u0004\\u001b\\t\\u001b\\u0004\\u001c\\t\\u001c\\u0004\\u001d\\t\\u001d\\u0004\\u001e\",\n    \"\\t\\u001e\\u0004\\u001f\\t\\u001f\\u0004 \\t \\u0004!\\t!\\u0004\\\"\\t\\\"\\u0004#\",\n    \"\\t#\\u0004$\\t$\\u0004%\\t%\\u0004&\\t&\\u0004\\'\\t\\'\\u0004(\\t(\\u0004)\\t)\\u0004\",\n    \"*\\t*\\u0004+\\t+\\u0004,\\t,\\u0004-\\t-\\u0004.\\t.\\u0004/\\t/\\u00040\\t0\\u0004\",\n    \"1\\t1\\u00042\\t2\\u00043\\t3\\u00044\\t4\\u00045\\t5\\u00046\\t6\\u00047\\t7\\u0004\",\n    \"8\\t8\\u00049\\t9\\u0004:\\t:\\u0004;\\t;\\u0004<\\t<\\u0004=\\t=\\u0004>\\t>\\u0004\",\n    \"?\\t?\\u0004@\\t@\\u0004A\\tA\\u0004B\\tB\\u0004C\\tC\\u0004D\\tD\\u0003\\u0002\\u0003\",\n    \"\\u0002\\u0003\\u0003\\u0003\\u0003\\u0003\\u0004\\u0003\\u0004\\u0003\\u0005\\u0003\",\n    \"\\u0005\\u0003\\u0006\\u0003\\u0006\\u0003\\u0007\\u0003\\u0007\\u0003\\b\\u0003\",\n    \"\\b\\u0003\\t\\u0003\\t\\u0003\\t\\u0003\\t\\u0003\\n\\u0003\\n\\u0003\\n\\u0003\\n\\u0003\",\n    \"\\u000b\\u0003\\u000b\\u0003\\f\\u0003\\f\\u0003\\r\\u0003\\r\\u0003\\r\\u0003\\u000e\",\n    \"\\u0003\\u000e\\u0003\\u000f\\u0003\\u000f\\u0003\\u0010\\u0003\\u0010\\u0003\\u0010\",\n    \"\\u0003\\u0011\\u0003\\u0011\\u0003\\u0011\\u0003\\u0012\\u0003\\u0012\\u0003\\u0012\",\n    \"\\u0003\\u0013\\u0003\\u0013\\u0003\\u0014\\u0003\\u0014\\u0003\\u0015\\u0003\\u0015\",\n    \"\\u0003\\u0015\\u0003\\u0016\\u0003\\u0016\\u0003\\u0016\\u0003\\u0017\\u0003\\u0017\",\n    \"\\u0003\\u0017\\u0003\\u0018\\u0003\\u0018\\u0003\\u0018\\u0003\\u0018\\u0003\\u0018\",\n    \"\\u0003\\u0018\\u0003\\u0018\\u0003\\u0018\\u0003\\u0018\\u0003\\u0019\\u0003\\u0019\",\n    \"\\u0003\\u0019\\u0003\\u0019\\u0003\\u001a\\u0003\\u001a\\u0003\\u001a\\u0003\\u001b\",\n    \"\\u0003\\u001b\\u0003\\u001b\\u0003\\u001b\\u0003\\u001c\\u0003\\u001c\\u0003\\u001c\",\n    \"\\u0003\\u001c\\u0003\\u001c\\u0003\\u001c\\u0003\\u001c\\u0003\\u001c\\u0003\\u001d\",\n    \"\\u0003\\u001d\\u0003\\u001e\\u0003\\u001e\\u0003\\u001f\\u0003\\u001f\\u0003 \",\n    \"\\u0003 \\u0003!\\u0003!\\u0003!\\u0003!\\u0003!\\u0003\\\"\\u0003\\\"\\u0003\\\"\\u0003\",\n    \"\\\"\\u0003\\\"\\u0003\\\"\\u0003#\\u0003#\\u0003$\\u0003$\\u0003$\\u0003$\\u0003$\",\n    \"\\u0003$\\u0003%\\u0003%\\u0003%\\u0003%\\u0003%\\u0003%\\u0003%\\u0003&\\u0003\",\n    \"&\\u0003&\\u0003&\\u0003&\\u0003&\\u0003&\\u0003\\'\\u0003\\'\\u0003(\\u0003(\\u0003\",\n    \"(\\u0003(\\u0003(\\u0003)\\u0003)\\u0003)\\u0003)\\u0003)\\u0003)\\u0003*\\u0003\",\n    \"*\\u0003*\\u0003*\\u0003*\\u0003+\\u0003+\\u0003+\\u0003+\\u0003,\\u0003,\\u0003\",\n    \",\\u0003,\\u0003,\\u0003-\\u0003-\\u0003-\\u0003-\\u0003-\\u0003-\\u0003-\\u0003\",\n    \".\\u0003.\\u0003.\\u0003.\\u0003.\\u0003.\\u0003.\\u0003/\\u0003/\\u0003/\\u0003\",\n    \"/\\u0003/\\u0003/\\u0003/\\u0003/\\u0003/\\u0003/\\u0003/\\u0003/\\u00030\\u0003\",\n    \"0\\u00030\\u00030\\u00030\\u00030\\u00031\\u00031\\u00031\\u00031\\u00031\\u0003\",\n    \"1\\u00031\\u00032\\u00032\\u00032\\u00032\\u00032\\u00032\\u00033\\u00033\\u0003\",\n    \"3\\u00033\\u00033\\u00034\\u00034\\u00034\\u00034\\u00034\\u00034\\u00035\\u0003\",\n    \"5\\u00035\\u00035\\u00035\\u00035\\u00035\\u00035\\u00036\\u00036\\u00036\\u0003\",\n    \"6\\u00036\\u00036\\u00036\\u00036\\u00037\\u00037\\u00037\\u00037\\u00037\\u0003\",\n    \"7\\u00037\\u00037\\u00037\\u00037\\u00037\\u00037\\u00037\\u00038\\u00038\\u0003\",\n    \"8\\u00038\\u00038\\u00038\\u00038\\u00038\\u00038\\u00038\\u00038\\u00038\\u0003\",\n    \"8\\u00058\\u0183\\n8\\u00058\\u0185\\n8\\u00058\\u0187\\n8\\u00038\\u00058\\u018a\",\n    \"\\n8\\u00039\\u00039\\u00039\\u00039\\u0003:\\u0003:\\u0003:\\u0003:\\u0003:\\u0003\",\n    \":\\u0003:\\u0003:\\u0003:\\u0003:\\u0006:\\u019a\\n:\\r:\\u000e:\\u019b\\u0005\",\n    \":\\u019e\\n:\\u0005:\\u01a0\\n:\\u0005:\\u01a2\\n:\\u0003:\\u0003:\\u0003:\\u0003\",\n    \":\\u0003:\\u0003:\\u0003:\\u0005:\\u01ab\\n:\\u0003;\\u0005;\\u01ae\\n;\\u0003\",\n    \";\\u0007;\\u01b1\\n;\\f;\\u000e;\\u01b4\\u000b;\\u0003<\\u0003<\\u0003<\\u0007\",\n    \"<\\u01b9\\n<\\f<\\u000e<\\u01bc\\u000b<\\u0003<\\u0003<\\u0003=\\u0003=\\u0003\",\n    \"=\\u0007=\\u01c3\\n=\\f=\\u000e=\\u01c6\\u000b=\\u0003=\\u0003=\\u0003>\\u0006\",\n    \">\\u01cb\\n>\\r>\\u000e>\\u01cc\\u0003>\\u0003>\\u0006>\\u01d1\\n>\\r>\\u000e>\\u01d2\",\n    \"\\u0005>\\u01d5\\n>\\u0003?\\u0006?\\u01d8\\n?\\r?\\u000e?\\u01d9\\u0003?\\u0003\",\n    \"?\\u0003@\\u0003@\\u0003@\\u0003@\\u0007@\\u01e2\\n@\\f@\\u000e@\\u01e5\\u000b\",\n    \"@\\u0003@\\u0003@\\u0003@\\u0003@\\u0003@\\u0003A\\u0003A\\u0003A\\u0003A\\u0007\",\n    \"A\\u01f0\\nA\\fA\\u000eA\\u01f3\\u000bA\\u0003A\\u0003A\\u0003B\\u0003B\\u0003\",\n    \"B\\u0005B\\u01fa\\nB\\u0003C\\u0003C\\u0003C\\u0003C\\u0003C\\u0003C\\u0003D\\u0003\",\n    \"D\\u0003\\u01e3\\u0002E\\u0003\\u0003\\u0005\\u0004\\u0007\\u0005\\t\\u0006\\u000b\",\n    \"\\u0007\\r\\b\\u000f\\t\\u0011\\n\\u0013\\u000b\\u0015\\f\\u0017\\r\\u0019\\u000e\\u001b\",\n    \"\\u000f\\u001d\\u0010\\u001f\\u0011!\\u0012#\\u0013%\\u0014\\'\\u0015)\\u0016+\",\n    \"\\u0017-\\u0018/\\u00191\\u001a3\\u001b5\\u001c7\\u001d9\\u001e;\\u001f= ?!A\",\n    \"\\\"C#E$G%I&K\\'M(O)Q*S+U,W-Y.[/]0_1a2c3e4g5i6k7m8o9q:s\\u0002u;w<y={>}\",\n    \"?\\u007f@\\u0081A\\u0083\\u0002\\u0085\\u0002\\u0087\\u0002\\u0003\\u0002\\f\\u0003\",\n    \"\\u00022;\\u0004\\u0002--//\\u0005\\u0002C\\\\aac|\\u0006\\u00022;C\\\\aac|\\u0004\",\n    \"\\u0002^^bb\\u0003\\u0002))\\u0005\\u0002\\u000b\\f\\u000f\\u000f\\\"\\\"\\u0004\\u0002\",\n    \"\\f\\f\\u000f\\u000f\\n\\u0002))11^^bbhhppttvv\\u0005\\u00022;CHch\\u0002\\u0214\",\n    \"\\u0002\\u0003\\u0003\\u0002\\u0002\\u0002\\u0002\\u0005\\u0003\\u0002\\u0002\\u0002\",\n    \"\\u0002\\u0007\\u0003\\u0002\\u0002\\u0002\\u0002\\t\\u0003\\u0002\\u0002\\u0002\",\n    \"\\u0002\\u000b\\u0003\\u0002\\u0002\\u0002\\u0002\\r\\u0003\\u0002\\u0002\\u0002\",\n    \"\\u0002\\u000f\\u0003\\u0002\\u0002\\u0002\\u0002\\u0011\\u0003\\u0002\\u0002\\u0002\",\n    \"\\u0002\\u0013\\u0003\\u0002\\u0002\\u0002\\u0002\\u0015\\u0003\\u0002\\u0002\\u0002\",\n    \"\\u0002\\u0017\\u0003\\u0002\\u0002\\u0002\\u0002\\u0019\\u0003\\u0002\\u0002\\u0002\",\n    \"\\u0002\\u001b\\u0003\\u0002\\u0002\\u0002\\u0002\\u001d\\u0003\\u0002\\u0002\\u0002\",\n    \"\\u0002\\u001f\\u0003\\u0002\\u0002\\u0002\\u0002!\\u0003\\u0002\\u0002\\u0002\",\n    \"\\u0002#\\u0003\\u0002\\u0002\\u0002\\u0002%\\u0003\\u0002\\u0002\\u0002\\u0002\",\n    \"\\'\\u0003\\u0002\\u0002\\u0002\\u0002)\\u0003\\u0002\\u0002\\u0002\\u0002+\\u0003\",\n    \"\\u0002\\u0002\\u0002\\u0002-\\u0003\\u0002\\u0002\\u0002\\u0002/\\u0003\\u0002\",\n    \"\\u0002\\u0002\\u00021\\u0003\\u0002\\u0002\\u0002\\u00023\\u0003\\u0002\\u0002\",\n    \"\\u0002\\u00025\\u0003\\u0002\\u0002\\u0002\\u00027\\u0003\\u0002\\u0002\\u0002\",\n    \"\\u00029\\u0003\\u0002\\u0002\\u0002\\u0002;\\u0003\\u0002\\u0002\\u0002\\u0002\",\n    \"=\\u0003\\u0002\\u0002\\u0002\\u0002?\\u0003\\u0002\\u0002\\u0002\\u0002A\\u0003\",\n    \"\\u0002\\u0002\\u0002\\u0002C\\u0003\\u0002\\u0002\\u0002\\u0002E\\u0003\\u0002\",\n    \"\\u0002\\u0002\\u0002G\\u0003\\u0002\\u0002\\u0002\\u0002I\\u0003\\u0002\\u0002\",\n    \"\\u0002\\u0002K\\u0003\\u0002\\u0002\\u0002\\u0002M\\u0003\\u0002\\u0002\\u0002\",\n    \"\\u0002O\\u0003\\u0002\\u0002\\u0002\\u0002Q\\u0003\\u0002\\u0002\\u0002\\u0002\",\n    \"S\\u0003\\u0002\\u0002\\u0002\\u0002U\\u0003\\u0002\\u0002\\u0002\\u0002W\\u0003\",\n    \"\\u0002\\u0002\\u0002\\u0002Y\\u0003\\u0002\\u0002\\u0002\\u0002[\\u0003\\u0002\",\n    \"\\u0002\\u0002\\u0002]\\u0003\\u0002\\u0002\\u0002\\u0002_\\u0003\\u0002\\u0002\",\n    \"\\u0002\\u0002a\\u0003\\u0002\\u0002\\u0002\\u0002c\\u0003\\u0002\\u0002\\u0002\",\n    \"\\u0002e\\u0003\\u0002\\u0002\\u0002\\u0002g\\u0003\\u0002\\u0002\\u0002\\u0002\",\n    \"i\\u0003\\u0002\\u0002\\u0002\\u0002k\\u0003\\u0002\\u0002\\u0002\\u0002m\\u0003\",\n    \"\\u0002\\u0002\\u0002\\u0002o\\u0003\\u0002\\u0002\\u0002\\u0002q\\u0003\\u0002\",\n    \"\\u0002\\u0002\\u0002u\\u0003\\u0002\\u0002\\u0002\\u0002w\\u0003\\u0002\\u0002\",\n    \"\\u0002\\u0002y\\u0003\\u0002\\u0002\\u0002\\u0002{\\u0003\\u0002\\u0002\\u0002\",\n    \"\\u0002}\\u0003\\u0002\\u0002\\u0002\\u0002\\u007f\\u0003\\u0002\\u0002\\u0002\",\n    \"\\u0002\\u0081\\u0003\\u0002\\u0002\\u0002\\u0003\\u0089\\u0003\\u0002\\u0002\\u0002\",\n    \"\\u0005\\u008b\\u0003\\u0002\\u0002\\u0002\\u0007\\u008d\\u0003\\u0002\\u0002\\u0002\",\n    \"\\t\\u008f\\u0003\\u0002\\u0002\\u0002\\u000b\\u0091\\u0003\\u0002\\u0002\\u0002\",\n    \"\\r\\u0093\\u0003\\u0002\\u0002\\u0002\\u000f\\u0095\\u0003\\u0002\\u0002\\u0002\",\n    \"\\u0011\\u0097\\u0003\\u0002\\u0002\\u0002\\u0013\\u009b\\u0003\\u0002\\u0002\\u0002\",\n    \"\\u0015\\u009f\\u0003\\u0002\\u0002\\u0002\\u0017\\u00a1\\u0003\\u0002\\u0002\\u0002\",\n    \"\\u0019\\u00a3\\u0003\\u0002\\u0002\\u0002\\u001b\\u00a6\\u0003\\u0002\\u0002\\u0002\",\n    \"\\u001d\\u00a8\\u0003\\u0002\\u0002\\u0002\\u001f\\u00aa\\u0003\\u0002\\u0002\\u0002\",\n    \"!\\u00ad\\u0003\\u0002\\u0002\\u0002#\\u00b0\\u0003\\u0002\\u0002\\u0002%\\u00b3\",\n    \"\\u0003\\u0002\\u0002\\u0002\\'\\u00b5\\u0003\\u0002\\u0002\\u0002)\\u00b7\\u0003\",\n    \"\\u0002\\u0002\\u0002+\\u00ba\\u0003\\u0002\\u0002\\u0002-\\u00bd\\u0003\\u0002\",\n    \"\\u0002\\u0002/\\u00c0\\u0003\\u0002\\u0002\\u00021\\u00c9\\u0003\\u0002\\u0002\",\n    \"\\u00023\\u00cd\\u0003\\u0002\\u0002\\u00025\\u00d0\\u0003\\u0002\\u0002\\u0002\",\n    \"7\\u00d4\\u0003\\u0002\\u0002\\u00029\\u00dc\\u0003\\u0002\\u0002\\u0002;\\u00de\",\n    \"\\u0003\\u0002\\u0002\\u0002=\\u00e0\\u0003\\u0002\\u0002\\u0002?\\u00e2\\u0003\",\n    \"\\u0002\\u0002\\u0002A\\u00e4\\u0003\\u0002\\u0002\\u0002C\\u00e9\\u0003\\u0002\",\n    \"\\u0002\\u0002E\\u00ef\\u0003\\u0002\\u0002\\u0002G\\u00f1\\u0003\\u0002\\u0002\",\n    \"\\u0002I\\u00f7\\u0003\\u0002\\u0002\\u0002K\\u00fe\\u0003\\u0002\\u0002\\u0002\",\n    \"M\\u0105\\u0003\\u0002\\u0002\\u0002O\\u0107\\u0003\\u0002\\u0002\\u0002Q\\u010c\",\n    \"\\u0003\\u0002\\u0002\\u0002S\\u0112\\u0003\\u0002\\u0002\\u0002U\\u0117\\u0003\",\n    \"\\u0002\\u0002\\u0002W\\u011b\\u0003\\u0002\\u0002\\u0002Y\\u0120\\u0003\\u0002\",\n    \"\\u0002\\u0002[\\u0127\\u0003\\u0002\\u0002\\u0002]\\u012e\\u0003\\u0002\\u0002\",\n    \"\\u0002_\\u013a\\u0003\\u0002\\u0002\\u0002a\\u0140\\u0003\\u0002\\u0002\\u0002\",\n    \"c\\u0147\\u0003\\u0002\\u0002\\u0002e\\u014d\\u0003\\u0002\\u0002\\u0002g\\u0152\",\n    \"\\u0003\\u0002\\u0002\\u0002i\\u0158\\u0003\\u0002\\u0002\\u0002k\\u0160\\u0003\",\n    \"\\u0002\\u0002\\u0002m\\u0168\\u0003\\u0002\\u0002\\u0002o\\u0175\\u0003\\u0002\",\n    \"\\u0002\\u0002q\\u018b\\u0003\\u0002\\u0002\\u0002s\\u018f\\u0003\\u0002\\u0002\",\n    \"\\u0002u\\u01ad\\u0003\\u0002\\u0002\\u0002w\\u01b5\\u0003\\u0002\\u0002\\u0002\",\n    \"y\\u01bf\\u0003\\u0002\\u0002\\u0002{\\u01ca\\u0003\\u0002\\u0002\\u0002}\\u01d7\",\n    \"\\u0003\\u0002\\u0002\\u0002\\u007f\\u01dd\\u0003\\u0002\\u0002\\u0002\\u0081\\u01eb\",\n    \"\\u0003\\u0002\\u0002\\u0002\\u0083\\u01f6\\u0003\\u0002\\u0002\\u0002\\u0085\\u01fb\",\n    \"\\u0003\\u0002\\u0002\\u0002\\u0087\\u0201\\u0003\\u0002\\u0002\\u0002\\u0089\\u008a\",\n    \"\\u00070\\u0002\\u0002\\u008a\\u0004\\u0003\\u0002\\u0002\\u0002\\u008b\\u008c\",\n    \"\\u0007]\\u0002\\u0002\\u008c\\u0006\\u0003\\u0002\\u0002\\u0002\\u008d\\u008e\",\n    \"\\u0007_\\u0002\\u0002\\u008e\\b\\u0003\\u0002\\u0002\\u0002\\u008f\\u0090\\u0007\",\n    \"-\\u0002\\u0002\\u0090\\n\\u0003\\u0002\\u0002\\u0002\\u0091\\u0092\\u0007/\\u0002\",\n    \"\\u0002\\u0092\\f\\u0003\\u0002\\u0002\\u0002\\u0093\\u0094\\u0007,\\u0002\\u0002\",\n    \"\\u0094\\u000e\\u0003\\u0002\\u0002\\u0002\\u0095\\u0096\\u00071\\u0002\\u0002\",\n    \"\\u0096\\u0010\\u0003\\u0002\\u0002\\u0002\\u0097\\u0098\\u0007f\\u0002\\u0002\",\n    \"\\u0098\\u0099\\u0007k\\u0002\\u0002\\u0099\\u009a\\u0007x\\u0002\\u0002\\u009a\",\n    \"\\u0012\\u0003\\u0002\\u0002\\u0002\\u009b\\u009c\\u0007o\\u0002\\u0002\\u009c\",\n    \"\\u009d\\u0007q\\u0002\\u0002\\u009d\\u009e\\u0007f\\u0002\\u0002\\u009e\\u0014\",\n    \"\\u0003\\u0002\\u0002\\u0002\\u009f\\u00a0\\u0007(\\u0002\\u0002\\u00a0\\u0016\",\n    \"\\u0003\\u0002\\u0002\\u0002\\u00a1\\u00a2\\u0007~\\u0002\\u0002\\u00a2\\u0018\",\n    \"\\u0003\\u0002\\u0002\\u0002\\u00a3\\u00a4\\u0007>\\u0002\\u0002\\u00a4\\u00a5\",\n    \"\\u0007?\\u0002\\u0002\\u00a5\\u001a\\u0003\\u0002\\u0002\\u0002\\u00a6\\u00a7\",\n    \"\\u0007>\\u0002\\u0002\\u00a7\\u001c\\u0003\\u0002\\u0002\\u0002\\u00a8\\u00a9\",\n    \"\\u0007@\\u0002\\u0002\\u00a9\\u001e\\u0003\\u0002\\u0002\\u0002\\u00aa\\u00ab\",\n    \"\\u0007@\\u0002\\u0002\\u00ab\\u00ac\\u0007?\\u0002\\u0002\\u00ac \\u0003\\u0002\",\n    \"\\u0002\\u0002\\u00ad\\u00ae\\u0007k\\u0002\\u0002\\u00ae\\u00af\\u0007u\\u0002\",\n    \"\\u0002\\u00af\\\"\\u0003\\u0002\\u0002\\u0002\\u00b0\\u00b1\\u0007c\\u0002\\u0002\",\n    \"\\u00b1\\u00b2\\u0007u\\u0002\\u0002\\u00b2$\\u0003\\u0002\\u0002\\u0002\\u00b3\",\n    \"\\u00b4\\u0007?\\u0002\\u0002\\u00b4&\\u0003\\u0002\\u0002\\u0002\\u00b5\\u00b6\",\n    \"\\u0007\\u0080\\u0002\\u0002\\u00b6(\\u0003\\u0002\\u0002\\u0002\\u00b7\\u00b8\",\n    \"\\u0007#\\u0002\\u0002\\u00b8\\u00b9\\u0007?\\u0002\\u0002\\u00b9*\\u0003\\u0002\",\n    \"\\u0002\\u0002\\u00ba\\u00bb\\u0007#\\u0002\\u0002\\u00bb\\u00bc\\u0007\\u0080\",\n    \"\\u0002\\u0002\\u00bc,\\u0003\\u0002\\u0002\\u0002\\u00bd\\u00be\\u0007k\\u0002\",\n    \"\\u0002\\u00be\\u00bf\\u0007p\\u0002\\u0002\\u00bf.\\u0003\\u0002\\u0002\\u0002\",\n    \"\\u00c0\\u00c1\\u0007e\\u0002\\u0002\\u00c1\\u00c2\\u0007q\\u0002\\u0002\\u00c2\",\n    \"\\u00c3\\u0007p\\u0002\\u0002\\u00c3\\u00c4\\u0007v\\u0002\\u0002\\u00c4\\u00c5\",\n    \"\\u0007c\\u0002\\u0002\\u00c5\\u00c6\\u0007k\\u0002\\u0002\\u00c6\\u00c7\\u0007\",\n    \"p\\u0002\\u0002\\u00c7\\u00c8\\u0007u\\u0002\\u0002\\u00c80\\u0003\\u0002\\u0002\",\n    \"\\u0002\\u00c9\\u00ca\\u0007c\\u0002\\u0002\\u00ca\\u00cb\\u0007p\\u0002\\u0002\",\n    \"\\u00cb\\u00cc\\u0007f\\u0002\\u0002\\u00cc2\\u0003\\u0002\\u0002\\u0002\\u00cd\",\n    \"\\u00ce\\u0007q\\u0002\\u0002\\u00ce\\u00cf\\u0007t\\u0002\\u0002\\u00cf4\\u0003\",\n    \"\\u0002\\u0002\\u0002\\u00d0\\u00d1\\u0007z\\u0002\\u0002\\u00d1\\u00d2\\u0007\",\n    \"q\\u0002\\u0002\\u00d2\\u00d3\\u0007t\\u0002\\u0002\\u00d36\\u0003\\u0002\\u0002\",\n    \"\\u0002\\u00d4\\u00d5\\u0007k\\u0002\\u0002\\u00d5\\u00d6\\u0007o\\u0002\\u0002\",\n    \"\\u00d6\\u00d7\\u0007r\\u0002\\u0002\\u00d7\\u00d8\\u0007n\\u0002\\u0002\\u00d8\",\n    \"\\u00d9\\u0007k\\u0002\\u0002\\u00d9\\u00da\\u0007g\\u0002\\u0002\\u00da\\u00db\",\n    \"\\u0007u\\u0002\\u0002\\u00db8\\u0003\\u0002\\u0002\\u0002\\u00dc\\u00dd\\u0007\",\n    \"*\\u0002\\u0002\\u00dd:\\u0003\\u0002\\u0002\\u0002\\u00de\\u00df\\u0007+\\u0002\",\n    \"\\u0002\\u00df<\\u0003\\u0002\\u0002\\u0002\\u00e0\\u00e1\\u0007}\\u0002\\u0002\",\n    \"\\u00e1>\\u0003\\u0002\\u0002\\u0002\\u00e2\\u00e3\\u0007\\u007f\\u0002\\u0002\",\n    \"\\u00e3@\\u0003\\u0002\\u0002\\u0002\\u00e4\\u00e5\\u0007v\\u0002\\u0002\\u00e5\",\n    \"\\u00e6\\u0007t\\u0002\\u0002\\u00e6\\u00e7\\u0007w\\u0002\\u0002\\u00e7\\u00e8\",\n    \"\\u0007g\\u0002\\u0002\\u00e8B\\u0003\\u0002\\u0002\\u0002\\u00e9\\u00ea\\u0007\",\n    \"h\\u0002\\u0002\\u00ea\\u00eb\\u0007c\\u0002\\u0002\\u00eb\\u00ec\\u0007n\\u0002\",\n    \"\\u0002\\u00ec\\u00ed\\u0007u\\u0002\\u0002\\u00ed\\u00ee\\u0007g\\u0002\\u0002\",\n    \"\\u00eeD\\u0003\\u0002\\u0002\\u0002\\u00ef\\u00f0\\u0007\\'\\u0002\\u0002\\u00f0\",\n    \"F\\u0003\\u0002\\u0002\\u0002\\u00f1\\u00f2\\u0007&\\u0002\\u0002\\u00f2\\u00f3\",\n    \"\\u0007v\\u0002\\u0002\\u00f3\\u00f4\\u0007j\\u0002\\u0002\\u00f4\\u00f5\\u0007\",\n    \"k\\u0002\\u0002\\u00f5\\u00f6\\u0007u\\u0002\\u0002\\u00f6H\\u0003\\u0002\\u0002\",\n    \"\\u0002\\u00f7\\u00f8\\u0007&\\u0002\\u0002\\u00f8\\u00f9\\u0007k\\u0002\\u0002\",\n    \"\\u00f9\\u00fa\\u0007p\\u0002\\u0002\\u00fa\\u00fb\\u0007f\\u0002\\u0002\\u00fb\",\n    \"\\u00fc\\u0007g\\u0002\\u0002\\u00fc\\u00fd\\u0007z\\u0002\\u0002\\u00fdJ\\u0003\",\n    \"\\u0002\\u0002\\u0002\\u00fe\\u00ff\\u0007&\\u0002\\u0002\\u00ff\\u0100\\u0007\",\n    \"v\\u0002\\u0002\\u0100\\u0101\\u0007q\\u0002\\u0002\\u0101\\u0102\\u0007v\\u0002\",\n    \"\\u0002\\u0102\\u0103\\u0007c\\u0002\\u0002\\u0103\\u0104\\u0007n\\u0002\\u0002\",\n    \"\\u0104L\\u0003\\u0002\\u0002\\u0002\\u0105\\u0106\\u0007.\\u0002\\u0002\\u0106\",\n    \"N\\u0003\\u0002\\u0002\\u0002\\u0107\\u0108\\u0007{\\u0002\\u0002\\u0108\\u0109\",\n    \"\\u0007g\\u0002\\u0002\\u0109\\u010a\\u0007c\\u0002\\u0002\\u010a\\u010b\\u0007\",\n    \"t\\u0002\\u0002\\u010bP\\u0003\\u0002\\u0002\\u0002\\u010c\\u010d\\u0007o\\u0002\",\n    \"\\u0002\\u010d\\u010e\\u0007q\\u0002\\u0002\\u010e\\u010f\\u0007p\\u0002\\u0002\",\n    \"\\u010f\\u0110\\u0007v\\u0002\\u0002\\u0110\\u0111\\u0007j\\u0002\\u0002\\u0111\",\n    \"R\\u0003\\u0002\\u0002\\u0002\\u0112\\u0113\\u0007y\\u0002\\u0002\\u0113\\u0114\",\n    \"\\u0007g\\u0002\\u0002\\u0114\\u0115\\u0007g\\u0002\\u0002\\u0115\\u0116\\u0007\",\n    \"m\\u0002\\u0002\\u0116T\\u0003\\u0002\\u0002\\u0002\\u0117\\u0118\\u0007f\\u0002\",\n    \"\\u0002\\u0118\\u0119\\u0007c\\u0002\\u0002\\u0119\\u011a\\u0007{\\u0002\\u0002\",\n    \"\\u011aV\\u0003\\u0002\\u0002\\u0002\\u011b\\u011c\\u0007j\\u0002\\u0002\\u011c\",\n    \"\\u011d\\u0007q\\u0002\\u0002\\u011d\\u011e\\u0007w\\u0002\\u0002\\u011e\\u011f\",\n    \"\\u0007t\\u0002\\u0002\\u011fX\\u0003\\u0002\\u0002\\u0002\\u0120\\u0121\\u0007\",\n    \"o\\u0002\\u0002\\u0121\\u0122\\u0007k\\u0002\\u0002\\u0122\\u0123\\u0007p\\u0002\",\n    \"\\u0002\\u0123\\u0124\\u0007w\\u0002\\u0002\\u0124\\u0125\\u0007v\\u0002\\u0002\",\n    \"\\u0125\\u0126\\u0007g\\u0002\\u0002\\u0126Z\\u0003\\u0002\\u0002\\u0002\\u0127\",\n    \"\\u0128\\u0007u\\u0002\\u0002\\u0128\\u0129\\u0007g\\u0002\\u0002\\u0129\\u012a\",\n    \"\\u0007e\\u0002\\u0002\\u012a\\u012b\\u0007q\\u0002\\u0002\\u012b\\u012c\\u0007\",\n    \"p\\u0002\\u0002\\u012c\\u012d\\u0007f\\u0002\\u0002\\u012d\\\\\\u0003\\u0002\\u0002\",\n    \"\\u0002\\u012e\\u012f\\u0007o\\u0002\\u0002\\u012f\\u0130\\u0007k\\u0002\\u0002\",\n    \"\\u0130\\u0131\\u0007n\\u0002\\u0002\\u0131\\u0132\\u0007n\\u0002\\u0002\\u0132\",\n    \"\\u0133\\u0007k\\u0002\\u0002\\u0133\\u0134\\u0007u\\u0002\\u0002\\u0134\\u0135\",\n    \"\\u0007g\\u0002\\u0002\\u0135\\u0136\\u0007e\\u0002\\u0002\\u0136\\u0137\\u0007\",\n    \"q\\u0002\\u0002\\u0137\\u0138\\u0007p\\u0002\\u0002\\u0138\\u0139\\u0007f\\u0002\",\n    \"\\u0002\\u0139^\\u0003\\u0002\\u0002\\u0002\\u013a\\u013b\\u0007{\\u0002\\u0002\",\n    \"\\u013b\\u013c\\u0007g\\u0002\\u0002\\u013c\\u013d\\u0007c\\u0002\\u0002\\u013d\",\n    \"\\u013e\\u0007t\\u0002\\u0002\\u013e\\u013f\\u0007u\\u0002\\u0002\\u013f`\\u0003\",\n    \"\\u0002\\u0002\\u0002\\u0140\\u0141\\u0007o\\u0002\\u0002\\u0141\\u0142\\u0007\",\n    \"q\\u0002\\u0002\\u0142\\u0143\\u0007p\\u0002\\u0002\\u0143\\u0144\\u0007v\\u0002\",\n    \"\\u0002\\u0144\\u0145\\u0007j\\u0002\\u0002\\u0145\\u0146\\u0007u\\u0002\\u0002\",\n    \"\\u0146b\\u0003\\u0002\\u0002\\u0002\\u0147\\u0148\\u0007y\\u0002\\u0002\\u0148\",\n    \"\\u0149\\u0007g\\u0002\\u0002\\u0149\\u014a\\u0007g\\u0002\\u0002\\u014a\\u014b\",\n    \"\\u0007m\\u0002\\u0002\\u014b\\u014c\\u0007u\\u0002\\u0002\\u014cd\\u0003\\u0002\",\n    \"\\u0002\\u0002\\u014d\\u014e\\u0007f\\u0002\\u0002\\u014e\\u014f\\u0007c\\u0002\",\n    \"\\u0002\\u014f\\u0150\\u0007{\\u0002\\u0002\\u0150\\u0151\\u0007u\\u0002\\u0002\",\n    \"\\u0151f\\u0003\\u0002\\u0002\\u0002\\u0152\\u0153\\u0007j\\u0002\\u0002\\u0153\",\n    \"\\u0154\\u0007q\\u0002\\u0002\\u0154\\u0155\\u0007w\\u0002\\u0002\\u0155\\u0156\",\n    \"\\u0007t\\u0002\\u0002\\u0156\\u0157\\u0007u\\u0002\\u0002\\u0157h\\u0003\\u0002\",\n    \"\\u0002\\u0002\\u0158\\u0159\\u0007o\\u0002\\u0002\\u0159\\u015a\\u0007k\\u0002\",\n    \"\\u0002\\u015a\\u015b\\u0007p\\u0002\\u0002\\u015b\\u015c\\u0007w\\u0002\\u0002\",\n    \"\\u015c\\u015d\\u0007v\\u0002\\u0002\\u015d\\u015e\\u0007g\\u0002\\u0002\\u015e\",\n    \"\\u015f\\u0007u\\u0002\\u0002\\u015fj\\u0003\\u0002\\u0002\\u0002\\u0160\\u0161\",\n    \"\\u0007u\\u0002\\u0002\\u0161\\u0162\\u0007g\\u0002\\u0002\\u0162\\u0163\\u0007\",\n    \"e\\u0002\\u0002\\u0163\\u0164\\u0007q\\u0002\\u0002\\u0164\\u0165\\u0007p\\u0002\",\n    \"\\u0002\\u0165\\u0166\\u0007f\\u0002\\u0002\\u0166\\u0167\\u0007u\\u0002\\u0002\",\n    \"\\u0167l\\u0003\\u0002\\u0002\\u0002\\u0168\\u0169\\u0007o\\u0002\\u0002\\u0169\",\n    \"\\u016a\\u0007k\\u0002\\u0002\\u016a\\u016b\\u0007n\\u0002\\u0002\\u016b\\u016c\",\n    \"\\u0007n\\u0002\\u0002\\u016c\\u016d\\u0007k\\u0002\\u0002\\u016d\\u016e\\u0007\",\n    \"u\\u0002\\u0002\\u016e\\u016f\\u0007g\\u0002\\u0002\\u016f\\u0170\\u0007e\\u0002\",\n    \"\\u0002\\u0170\\u0171\\u0007q\\u0002\\u0002\\u0171\\u0172\\u0007p\\u0002\\u0002\",\n    \"\\u0172\\u0173\\u0007f\\u0002\\u0002\\u0173\\u0174\\u0007u\\u0002\\u0002\\u0174\",\n    \"n\\u0003\\u0002\\u0002\\u0002\\u0175\\u0176\\u0007B\\u0002\\u0002\\u0176\\u0177\",\n    \"\\t\\u0002\\u0002\\u0002\\u0177\\u0178\\t\\u0002\\u0002\\u0002\\u0178\\u0179\\t\\u0002\",\n    \"\\u0002\\u0002\\u0179\\u0186\\t\\u0002\\u0002\\u0002\\u017a\\u017b\\u0007/\\u0002\",\n    \"\\u0002\\u017b\\u017c\\t\\u0002\\u0002\\u0002\\u017c\\u0184\\t\\u0002\\u0002\\u0002\",\n    \"\\u017d\\u017e\\u0007/\\u0002\\u0002\\u017e\\u017f\\t\\u0002\\u0002\\u0002\\u017f\",\n    \"\\u0182\\t\\u0002\\u0002\\u0002\\u0180\\u0181\\u0007V\\u0002\\u0002\\u0181\\u0183\",\n    \"\\u0005s:\\u0002\\u0182\\u0180\\u0003\\u0002\\u0002\\u0002\\u0182\\u0183\\u0003\",\n    \"\\u0002\\u0002\\u0002\\u0183\\u0185\\u0003\\u0002\\u0002\\u0002\\u0184\\u017d\\u0003\",\n    \"\\u0002\\u0002\\u0002\\u0184\\u0185\\u0003\\u0002\\u0002\\u0002\\u0185\\u0187\\u0003\",\n    \"\\u0002\\u0002\\u0002\\u0186\\u017a\\u0003\\u0002\\u0002\\u0002\\u0186\\u0187\\u0003\",\n    \"\\u0002\\u0002\\u0002\\u0187\\u0189\\u0003\\u0002\\u0002\\u0002\\u0188\\u018a\\u0007\",\n    \"\\\\\\u0002\\u0002\\u0189\\u0188\\u0003\\u0002\\u0002\\u0002\\u0189\\u018a\\u0003\",\n    \"\\u0002\\u0002\\u0002\\u018ap\\u0003\\u0002\\u0002\\u0002\\u018b\\u018c\\u0007\",\n    \"B\\u0002\\u0002\\u018c\\u018d\\u0007V\\u0002\\u0002\\u018d\\u018e\\u0005s:\\u0002\",\n    \"\\u018er\\u0003\\u0002\\u0002\\u0002\\u018f\\u0190\\t\\u0002\\u0002\\u0002\\u0190\",\n    \"\\u01a1\\t\\u0002\\u0002\\u0002\\u0191\\u0192\\u0007<\\u0002\\u0002\\u0192\\u0193\",\n    \"\\t\\u0002\\u0002\\u0002\\u0193\\u019f\\t\\u0002\\u0002\\u0002\\u0194\\u0195\\u0007\",\n    \"<\\u0002\\u0002\\u0195\\u0196\\t\\u0002\\u0002\\u0002\\u0196\\u019d\\t\\u0002\\u0002\",\n    \"\\u0002\\u0197\\u0199\\u00070\\u0002\\u0002\\u0198\\u019a\\t\\u0002\\u0002\\u0002\",\n    \"\\u0199\\u0198\\u0003\\u0002\\u0002\\u0002\\u019a\\u019b\\u0003\\u0002\\u0002\\u0002\",\n    \"\\u019b\\u0199\\u0003\\u0002\\u0002\\u0002\\u019b\\u019c\\u0003\\u0002\\u0002\\u0002\",\n    \"\\u019c\\u019e\\u0003\\u0002\\u0002\\u0002\\u019d\\u0197\\u0003\\u0002\\u0002\\u0002\",\n    \"\\u019d\\u019e\\u0003\\u0002\\u0002\\u0002\\u019e\\u01a0\\u0003\\u0002\\u0002\\u0002\",\n    \"\\u019f\\u0194\\u0003\\u0002\\u0002\\u0002\\u019f\\u01a0\\u0003\\u0002\\u0002\\u0002\",\n    \"\\u01a0\\u01a2\\u0003\\u0002\\u0002\\u0002\\u01a1\\u0191\\u0003\\u0002\\u0002\\u0002\",\n    \"\\u01a1\\u01a2\\u0003\\u0002\\u0002\\u0002\\u01a2\\u01aa\\u0003\\u0002\\u0002\\u0002\",\n    \"\\u01a3\\u01ab\\u0007\\\\\\u0002\\u0002\\u01a4\\u01a5\\t\\u0003\\u0002\\u0002\\u01a5\",\n    \"\\u01a6\\t\\u0002\\u0002\\u0002\\u01a6\\u01a7\\t\\u0002\\u0002\\u0002\\u01a7\\u01a8\",\n    \"\\u0007<\\u0002\\u0002\\u01a8\\u01a9\\t\\u0002\\u0002\\u0002\\u01a9\\u01ab\\t\\u0002\",\n    \"\\u0002\\u0002\\u01aa\\u01a3\\u0003\\u0002\\u0002\\u0002\\u01aa\\u01a4\\u0003\\u0002\",\n    \"\\u0002\\u0002\\u01aa\\u01ab\\u0003\\u0002\\u0002\\u0002\\u01abt\\u0003\\u0002\",\n    \"\\u0002\\u0002\\u01ac\\u01ae\\t\\u0004\\u0002\\u0002\\u01ad\\u01ac\\u0003\\u0002\",\n    \"\\u0002\\u0002\\u01ae\\u01b2\\u0003\\u0002\\u0002\\u0002\\u01af\\u01b1\\t\\u0005\",\n    \"\\u0002\\u0002\\u01b0\\u01af\\u0003\\u0002\\u0002\\u0002\\u01b1\\u01b4\\u0003\\u0002\",\n    \"\\u0002\\u0002\\u01b2\\u01b0\\u0003\\u0002\\u0002\\u0002\\u01b2\\u01b3\\u0003\\u0002\",\n    \"\\u0002\\u0002\\u01b3v\\u0003\\u0002\\u0002\\u0002\\u01b4\\u01b2\\u0003\\u0002\",\n    \"\\u0002\\u0002\\u01b5\\u01ba\\u0007b\\u0002\\u0002\\u01b6\\u01b9\\u0005\\u0083\",\n    \"B\\u0002\\u01b7\\u01b9\\n\\u0006\\u0002\\u0002\\u01b8\\u01b6\\u0003\\u0002\\u0002\",\n    \"\\u0002\\u01b8\\u01b7\\u0003\\u0002\\u0002\\u0002\\u01b9\\u01bc\\u0003\\u0002\\u0002\",\n    \"\\u0002\\u01ba\\u01b8\\u0003\\u0002\\u0002\\u0002\\u01ba\\u01bb\\u0003\\u0002\\u0002\",\n    \"\\u0002\\u01bb\\u01bd\\u0003\\u0002\\u0002\\u0002\\u01bc\\u01ba\\u0003\\u0002\\u0002\",\n    \"\\u0002\\u01bd\\u01be\\u0007b\\u0002\\u0002\\u01bex\\u0003\\u0002\\u0002\\u0002\",\n    \"\\u01bf\\u01c4\\u0007)\\u0002\\u0002\\u01c0\\u01c3\\u0005\\u0083B\\u0002\\u01c1\",\n    \"\\u01c3\\n\\u0007\\u0002\\u0002\\u01c2\\u01c0\\u0003\\u0002\\u0002\\u0002\\u01c2\",\n    \"\\u01c1\\u0003\\u0002\\u0002\\u0002\\u01c3\\u01c6\\u0003\\u0002\\u0002\\u0002\\u01c4\",\n    \"\\u01c2\\u0003\\u0002\\u0002\\u0002\\u01c4\\u01c5\\u0003\\u0002\\u0002\\u0002\\u01c5\",\n    \"\\u01c7\\u0003\\u0002\\u0002\\u0002\\u01c6\\u01c4\\u0003\\u0002\\u0002\\u0002\\u01c7\",\n    \"\\u01c8\\u0007)\\u0002\\u0002\\u01c8z\\u0003\\u0002\\u0002\\u0002\\u01c9\\u01cb\",\n    \"\\t\\u0002\\u0002\\u0002\\u01ca\\u01c9\\u0003\\u0002\\u0002\\u0002\\u01cb\\u01cc\",\n    \"\\u0003\\u0002\\u0002\\u0002\\u01cc\\u01ca\\u0003\\u0002\\u0002\\u0002\\u01cc\\u01cd\",\n    \"\\u0003\\u0002\\u0002\\u0002\\u01cd\\u01d4\\u0003\\u0002\\u0002\\u0002\\u01ce\\u01d0\",\n    \"\\u00070\\u0002\\u0002\\u01cf\\u01d1\\t\\u0002\\u0002\\u0002\\u01d0\\u01cf\\u0003\",\n    \"\\u0002\\u0002\\u0002\\u01d1\\u01d2\\u0003\\u0002\\u0002\\u0002\\u01d2\\u01d0\\u0003\",\n    \"\\u0002\\u0002\\u0002\\u01d2\\u01d3\\u0003\\u0002\\u0002\\u0002\\u01d3\\u01d5\\u0003\",\n    \"\\u0002\\u0002\\u0002\\u01d4\\u01ce\\u0003\\u0002\\u0002\\u0002\\u01d4\\u01d5\\u0003\",\n    \"\\u0002\\u0002\\u0002\\u01d5|\\u0003\\u0002\\u0002\\u0002\\u01d6\\u01d8\\t\\b\\u0002\",\n    \"\\u0002\\u01d7\\u01d6\\u0003\\u0002\\u0002\\u0002\\u01d8\\u01d9\\u0003\\u0002\\u0002\",\n    \"\\u0002\\u01d9\\u01d7\\u0003\\u0002\\u0002\\u0002\\u01d9\\u01da\\u0003\\u0002\\u0002\",\n    \"\\u0002\\u01da\\u01db\\u0003\\u0002\\u0002\\u0002\\u01db\\u01dc\\b?\\u0002\\u0002\",\n    \"\\u01dc~\\u0003\\u0002\\u0002\\u0002\\u01dd\\u01de\\u00071\\u0002\\u0002\\u01de\",\n    \"\\u01df\\u0007,\\u0002\\u0002\\u01df\\u01e3\\u0003\\u0002\\u0002\\u0002\\u01e0\",\n    \"\\u01e2\\u000b\\u0002\\u0002\\u0002\\u01e1\\u01e0\\u0003\\u0002\\u0002\\u0002\\u01e2\",\n    \"\\u01e5\\u0003\\u0002\\u0002\\u0002\\u01e3\\u01e4\\u0003\\u0002\\u0002\\u0002\\u01e3\",\n    \"\\u01e1\\u0003\\u0002\\u0002\\u0002\\u01e4\\u01e6\\u0003\\u0002\\u0002\\u0002\\u01e5\",\n    \"\\u01e3\\u0003\\u0002\\u0002\\u0002\\u01e6\\u01e7\\u0007,\\u0002\\u0002\\u01e7\",\n    \"\\u01e8\\u00071\\u0002\\u0002\\u01e8\\u01e9\\u0003\\u0002\\u0002\\u0002\\u01e9\",\n    \"\\u01ea\\b@\\u0002\\u0002\\u01ea\\u0080\\u0003\\u0002\\u0002\\u0002\\u01eb\\u01ec\",\n    \"\\u00071\\u0002\\u0002\\u01ec\\u01ed\\u00071\\u0002\\u0002\\u01ed\\u01f1\\u0003\",\n    \"\\u0002\\u0002\\u0002\\u01ee\\u01f0\\n\\t\\u0002\\u0002\\u01ef\\u01ee\\u0003\\u0002\",\n    \"\\u0002\\u0002\\u01f0\\u01f3\\u0003\\u0002\\u0002\\u0002\\u01f1\\u01ef\\u0003\\u0002\",\n    \"\\u0002\\u0002\\u01f1\\u01f2\\u0003\\u0002\\u0002\\u0002\\u01f2\\u01f4\\u0003\\u0002\",\n    \"\\u0002\\u0002\\u01f3\\u01f1\\u0003\\u0002\\u0002\\u0002\\u01f4\\u01f5\\bA\\u0002\",\n    \"\\u0002\\u01f5\\u0082\\u0003\\u0002\\u0002\\u0002\\u01f6\\u01f9\\u0007^\\u0002\",\n    \"\\u0002\\u01f7\\u01fa\\t\\n\\u0002\\u0002\\u01f8\\u01fa\\u0005\\u0085C\\u0002\\u01f9\",\n    \"\\u01f7\\u0003\\u0002\\u0002\\u0002\\u01f9\\u01f8\\u0003\\u0002\\u0002\\u0002\\u01fa\",\n    \"\\u0084\\u0003\\u0002\\u0002\\u0002\\u01fb\\u01fc\\u0007w\\u0002\\u0002\\u01fc\",\n    \"\\u01fd\\u0005\\u0087D\\u0002\\u01fd\\u01fe\\u0005\\u0087D\\u0002\\u01fe\\u01ff\",\n    \"\\u0005\\u0087D\\u0002\\u01ff\\u0200\\u0005\\u0087D\\u0002\\u0200\\u0086\\u0003\",\n    \"\\u0002\\u0002\\u0002\\u0201\\u0202\\t\\u000b\\u0002\\u0002\\u0202\\u0088\\u0003\",\n    \"\\u0002\\u0002\\u0002\\u001a\\u0002\\u0182\\u0184\\u0186\\u0189\\u019b\\u019d\\u019f\",\n    \"\\u01a1\\u01aa\\u01ad\\u01b0\\u01b2\\u01b8\\u01ba\\u01c2\\u01c4\\u01cc\\u01d2\\u01d4\",\n    \"\\u01d9\\u01e3\\u01f1\\u01f9\\u0003\\u0002\\u0003\\u0002\"].join(\"\");\n\n\nconst atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);\n\nconst decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );\n\nclass FHIRPathLexer extends antlr4.Lexer {\n\n    static grammarFileName = \"FHIRPath.g4\";\n    static channelNames = [ \"DEFAULT_TOKEN_CHANNEL\", \"HIDDEN\" ];\n\tstatic modeNames = [ \"DEFAULT_MODE\" ];\n\tstatic literalNames = [ null, \"'.'\", \"'['\", \"']'\", \"'+'\", \"'-'\", \"'*'\", \n                         \"'/'\", \"'div'\", \"'mod'\", \"'&'\", \"'|'\", \"'<='\", \n                         \"'<'\", \"'>'\", \"'>='\", \"'is'\", \"'as'\", \"'='\", \"'~'\", \n                         \"'!='\", \"'!~'\", \"'in'\", \"'contains'\", \"'and'\", \n                         \"'or'\", \"'xor'\", \"'implies'\", \"'('\", \"')'\", \"'{'\", \n                         \"'}'\", \"'true'\", \"'false'\", \"'%'\", \"'$this'\", \"'$index'\", \n                         \"'$total'\", \"','\", \"'year'\", \"'month'\", \"'week'\", \n                         \"'day'\", \"'hour'\", \"'minute'\", \"'second'\", \"'millisecond'\", \n                         \"'years'\", \"'months'\", \"'weeks'\", \"'days'\", \"'hours'\", \n                         \"'minutes'\", \"'seconds'\", \"'milliseconds'\" ];\n\tstatic symbolicNames = [ null, null, null, null, null, null, null, null, \n                          null, null, null, null, null, null, null, null, \n                          null, null, null, null, null, null, null, null, \n                          null, null, null, null, null, null, null, null, \n                          null, null, null, null, null, null, null, null, \n                          null, null, null, null, null, null, null, null, \n                          null, null, null, null, null, null, null, \"DATETIME\", \n                          \"TIME\", \"IDENTIFIER\", \"DELIMITEDIDENTIFIER\", \"STRING\", \n                          \"NUMBER\", \"WS\", \"COMMENT\", \"LINE_COMMENT\" ];\n\tstatic ruleNames = [ \"T__0\", \"T__1\", \"T__2\", \"T__3\", \"T__4\", \"T__5\", \"T__6\", \n                      \"T__7\", \"T__8\", \"T__9\", \"T__10\", \"T__11\", \"T__12\", \n                      \"T__13\", \"T__14\", \"T__15\", \"T__16\", \"T__17\", \"T__18\", \n                      \"T__19\", \"T__20\", \"T__21\", \"T__22\", \"T__23\", \"T__24\", \n                      \"T__25\", \"T__26\", \"T__27\", \"T__28\", \"T__29\", \"T__30\", \n                      \"T__31\", \"T__32\", \"T__33\", \"T__34\", \"T__35\", \"T__36\", \n                      \"T__37\", \"T__38\", \"T__39\", \"T__40\", \"T__41\", \"T__42\", \n                      \"T__43\", \"T__44\", \"T__45\", \"T__46\", \"T__47\", \"T__48\", \n                      \"T__49\", \"T__50\", \"T__51\", \"T__52\", \"T__53\", \"DATETIME\", \n                      \"TIME\", \"TIMEFORMAT\", \"IDENTIFIER\", \"DELIMITEDIDENTIFIER\", \n                      \"STRING\", \"NUMBER\", \"WS\", \"COMMENT\", \"LINE_COMMENT\", \n                      \"ESC\", \"UNICODE\", \"HEX\" ];\n\n    constructor(input) {\n        super(input)\n        this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.PredictionContextCache());\n    }\n\n    get atn() {\n        return atn;\n    }\n}\n\nFHIRPathLexer.EOF = antlr4.Token.EOF;\nFHIRPathLexer.T__0 = 1;\nFHIRPathLexer.T__1 = 2;\nFHIRPathLexer.T__2 = 3;\nFHIRPathLexer.T__3 = 4;\nFHIRPathLexer.T__4 = 5;\nFHIRPathLexer.T__5 = 6;\nFHIRPathLexer.T__6 = 7;\nFHIRPathLexer.T__7 = 8;\nFHIRPathLexer.T__8 = 9;\nFHIRPathLexer.T__9 = 10;\nFHIRPathLexer.T__10 = 11;\nFHIRPathLexer.T__11 = 12;\nFHIRPathLexer.T__12 = 13;\nFHIRPathLexer.T__13 = 14;\nFHIRPathLexer.T__14 = 15;\nFHIRPathLexer.T__15 = 16;\nFHIRPathLexer.T__16 = 17;\nFHIRPathLexer.T__17 = 18;\nFHIRPathLexer.T__18 = 19;\nFHIRPathLexer.T__19 = 20;\nFHIRPathLexer.T__20 = 21;\nFHIRPathLexer.T__21 = 22;\nFHIRPathLexer.T__22 = 23;\nFHIRPathLexer.T__23 = 24;\nFHIRPathLexer.T__24 = 25;\nFHIRPathLexer.T__25 = 26;\nFHIRPathLexer.T__26 = 27;\nFHIRPathLexer.T__27 = 28;\nFHIRPathLexer.T__28 = 29;\nFHIRPathLexer.T__29 = 30;\nFHIRPathLexer.T__30 = 31;\nFHIRPathLexer.T__31 = 32;\nFHIRPathLexer.T__32 = 33;\nFHIRPathLexer.T__33 = 34;\nFHIRPathLexer.T__34 = 35;\nFHIRPathLexer.T__35 = 36;\nFHIRPathLexer.T__36 = 37;\nFHIRPathLexer.T__37 = 38;\nFHIRPathLexer.T__38 = 39;\nFHIRPathLexer.T__39 = 40;\nFHIRPathLexer.T__40 = 41;\nFHIRPathLexer.T__41 = 42;\nFHIRPathLexer.T__42 = 43;\nFHIRPathLexer.T__43 = 44;\nFHIRPathLexer.T__44 = 45;\nFHIRPathLexer.T__45 = 46;\nFHIRPathLexer.T__46 = 47;\nFHIRPathLexer.T__47 = 48;\nFHIRPathLexer.T__48 = 49;\nFHIRPathLexer.T__49 = 50;\nFHIRPathLexer.T__50 = 51;\nFHIRPathLexer.T__51 = 52;\nFHIRPathLexer.T__52 = 53;\nFHIRPathLexer.T__53 = 54;\nFHIRPathLexer.DATETIME = 55;\nFHIRPathLexer.TIME = 56;\nFHIRPathLexer.IDENTIFIER = 57;\nFHIRPathLexer.DELIMITEDIDENTIFIER = 58;\nFHIRPathLexer.STRING = 59;\nFHIRPathLexer.NUMBER = 60;\nFHIRPathLexer.WS = 61;\nFHIRPathLexer.COMMENT = 62;\nFHIRPathLexer.LINE_COMMENT = 63;\n\n\n\n\nmodule.exports = FHIRPathLexer;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/fhirpath@3.18.0/node_modules/fhirpath/src/parser/generated/FHIRPathLexer.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/fhirpath@3.18.0/node_modules/fhirpath/src/parser/generated/FHIRPathListener.js":
/*!************************************************************************************************************!*\
  !*** ../node_modules/.pnpm/fhirpath@3.18.0/node_modules/fhirpath/src/parser/generated/FHIRPathListener.js ***!
  \************************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Generated from FHIRPath.g4 by ANTLR 4.9.3\n// jshint ignore: start\nconst antlr4 = __webpack_require__(/*! ../antlr4-index */ \"(ssr)/../node_modules/.pnpm/fhirpath@3.18.0/node_modules/fhirpath/src/parser/antlr4-index.js\");\n\n// This class defines a complete listener for a parse tree produced by FHIRPathParser.\nclass FHIRPathListener extends antlr4.tree.ParseTreeListener {\n\n\t// Enter a parse tree produced by FHIRPathParser#entireExpression.\n\tenterEntireExpression(ctx) {\n\t}\n\n\t// Exit a parse tree produced by FHIRPathParser#entireExpression.\n\texitEntireExpression(ctx) {\n\t}\n\n\n\t// Enter a parse tree produced by FHIRPathParser#indexerExpression.\n\tenterIndexerExpression(ctx) {\n\t}\n\n\t// Exit a parse tree produced by FHIRPathParser#indexerExpression.\n\texitIndexerExpression(ctx) {\n\t}\n\n\n\t// Enter a parse tree produced by FHIRPathParser#polarityExpression.\n\tenterPolarityExpression(ctx) {\n\t}\n\n\t// Exit a parse tree produced by FHIRPathParser#polarityExpression.\n\texitPolarityExpression(ctx) {\n\t}\n\n\n\t// Enter a parse tree produced by FHIRPathParser#additiveExpression.\n\tenterAdditiveExpression(ctx) {\n\t}\n\n\t// Exit a parse tree produced by FHIRPathParser#additiveExpression.\n\texitAdditiveExpression(ctx) {\n\t}\n\n\n\t// Enter a parse tree produced by FHIRPathParser#multiplicativeExpression.\n\tenterMultiplicativeExpression(ctx) {\n\t}\n\n\t// Exit a parse tree produced by FHIRPathParser#multiplicativeExpression.\n\texitMultiplicativeExpression(ctx) {\n\t}\n\n\n\t// Enter a parse tree produced by FHIRPathParser#unionExpression.\n\tenterUnionExpression(ctx) {\n\t}\n\n\t// Exit a parse tree produced by FHIRPathParser#unionExpression.\n\texitUnionExpression(ctx) {\n\t}\n\n\n\t// Enter a parse tree produced by FHIRPathParser#orExpression.\n\tenterOrExpression(ctx) {\n\t}\n\n\t// Exit a parse tree produced by FHIRPathParser#orExpression.\n\texitOrExpression(ctx) {\n\t}\n\n\n\t// Enter a parse tree produced by FHIRPathParser#andExpression.\n\tenterAndExpression(ctx) {\n\t}\n\n\t// Exit a parse tree produced by FHIRPathParser#andExpression.\n\texitAndExpression(ctx) {\n\t}\n\n\n\t// Enter a parse tree produced by FHIRPathParser#membershipExpression.\n\tenterMembershipExpression(ctx) {\n\t}\n\n\t// Exit a parse tree produced by FHIRPathParser#membershipExpression.\n\texitMembershipExpression(ctx) {\n\t}\n\n\n\t// Enter a parse tree produced by FHIRPathParser#inequalityExpression.\n\tenterInequalityExpression(ctx) {\n\t}\n\n\t// Exit a parse tree produced by FHIRPathParser#inequalityExpression.\n\texitInequalityExpression(ctx) {\n\t}\n\n\n\t// Enter a parse tree produced by FHIRPathParser#invocationExpression.\n\tenterInvocationExpression(ctx) {\n\t}\n\n\t// Exit a parse tree produced by FHIRPathParser#invocationExpression.\n\texitInvocationExpression(ctx) {\n\t}\n\n\n\t// Enter a parse tree produced by FHIRPathParser#equalityExpression.\n\tenterEqualityExpression(ctx) {\n\t}\n\n\t// Exit a parse tree produced by FHIRPathParser#equalityExpression.\n\texitEqualityExpression(ctx) {\n\t}\n\n\n\t// Enter a parse tree produced by FHIRPathParser#impliesExpression.\n\tenterImpliesExpression(ctx) {\n\t}\n\n\t// Exit a parse tree produced by FHIRPathParser#impliesExpression.\n\texitImpliesExpression(ctx) {\n\t}\n\n\n\t// Enter a parse tree produced by FHIRPathParser#termExpression.\n\tenterTermExpression(ctx) {\n\t}\n\n\t// Exit a parse tree produced by FHIRPathParser#termExpression.\n\texitTermExpression(ctx) {\n\t}\n\n\n\t// Enter a parse tree produced by FHIRPathParser#typeExpression.\n\tenterTypeExpression(ctx) {\n\t}\n\n\t// Exit a parse tree produced by FHIRPathParser#typeExpression.\n\texitTypeExpression(ctx) {\n\t}\n\n\n\t// Enter a parse tree produced by FHIRPathParser#invocationTerm.\n\tenterInvocationTerm(ctx) {\n\t}\n\n\t// Exit a parse tree produced by FHIRPathParser#invocationTerm.\n\texitInvocationTerm(ctx) {\n\t}\n\n\n\t// Enter a parse tree produced by FHIRPathParser#literalTerm.\n\tenterLiteralTerm(ctx) {\n\t}\n\n\t// Exit a parse tree produced by FHIRPathParser#literalTerm.\n\texitLiteralTerm(ctx) {\n\t}\n\n\n\t// Enter a parse tree produced by FHIRPathParser#externalConstantTerm.\n\tenterExternalConstantTerm(ctx) {\n\t}\n\n\t// Exit a parse tree produced by FHIRPathParser#externalConstantTerm.\n\texitExternalConstantTerm(ctx) {\n\t}\n\n\n\t// Enter a parse tree produced by FHIRPathParser#parenthesizedTerm.\n\tenterParenthesizedTerm(ctx) {\n\t}\n\n\t// Exit a parse tree produced by FHIRPathParser#parenthesizedTerm.\n\texitParenthesizedTerm(ctx) {\n\t}\n\n\n\t// Enter a parse tree produced by FHIRPathParser#nullLiteral.\n\tenterNullLiteral(ctx) {\n\t}\n\n\t// Exit a parse tree produced by FHIRPathParser#nullLiteral.\n\texitNullLiteral(ctx) {\n\t}\n\n\n\t// Enter a parse tree produced by FHIRPathParser#booleanLiteral.\n\tenterBooleanLiteral(ctx) {\n\t}\n\n\t// Exit a parse tree produced by FHIRPathParser#booleanLiteral.\n\texitBooleanLiteral(ctx) {\n\t}\n\n\n\t// Enter a parse tree produced by FHIRPathParser#stringLiteral.\n\tenterStringLiteral(ctx) {\n\t}\n\n\t// Exit a parse tree produced by FHIRPathParser#stringLiteral.\n\texitStringLiteral(ctx) {\n\t}\n\n\n\t// Enter a parse tree produced by FHIRPathParser#numberLiteral.\n\tenterNumberLiteral(ctx) {\n\t}\n\n\t// Exit a parse tree produced by FHIRPathParser#numberLiteral.\n\texitNumberLiteral(ctx) {\n\t}\n\n\n\t// Enter a parse tree produced by FHIRPathParser#dateTimeLiteral.\n\tenterDateTimeLiteral(ctx) {\n\t}\n\n\t// Exit a parse tree produced by FHIRPathParser#dateTimeLiteral.\n\texitDateTimeLiteral(ctx) {\n\t}\n\n\n\t// Enter a parse tree produced by FHIRPathParser#timeLiteral.\n\tenterTimeLiteral(ctx) {\n\t}\n\n\t// Exit a parse tree produced by FHIRPathParser#timeLiteral.\n\texitTimeLiteral(ctx) {\n\t}\n\n\n\t// Enter a parse tree produced by FHIRPathParser#quantityLiteral.\n\tenterQuantityLiteral(ctx) {\n\t}\n\n\t// Exit a parse tree produced by FHIRPathParser#quantityLiteral.\n\texitQuantityLiteral(ctx) {\n\t}\n\n\n\t// Enter a parse tree produced by FHIRPathParser#externalConstant.\n\tenterExternalConstant(ctx) {\n\t}\n\n\t// Exit a parse tree produced by FHIRPathParser#externalConstant.\n\texitExternalConstant(ctx) {\n\t}\n\n\n\t// Enter a parse tree produced by FHIRPathParser#memberInvocation.\n\tenterMemberInvocation(ctx) {\n\t}\n\n\t// Exit a parse tree produced by FHIRPathParser#memberInvocation.\n\texitMemberInvocation(ctx) {\n\t}\n\n\n\t// Enter a parse tree produced by FHIRPathParser#functionInvocation.\n\tenterFunctionInvocation(ctx) {\n\t}\n\n\t// Exit a parse tree produced by FHIRPathParser#functionInvocation.\n\texitFunctionInvocation(ctx) {\n\t}\n\n\n\t// Enter a parse tree produced by FHIRPathParser#thisInvocation.\n\tenterThisInvocation(ctx) {\n\t}\n\n\t// Exit a parse tree produced by FHIRPathParser#thisInvocation.\n\texitThisInvocation(ctx) {\n\t}\n\n\n\t// Enter a parse tree produced by FHIRPathParser#indexInvocation.\n\tenterIndexInvocation(ctx) {\n\t}\n\n\t// Exit a parse tree produced by FHIRPathParser#indexInvocation.\n\texitIndexInvocation(ctx) {\n\t}\n\n\n\t// Enter a parse tree produced by FHIRPathParser#totalInvocation.\n\tenterTotalInvocation(ctx) {\n\t}\n\n\t// Exit a parse tree produced by FHIRPathParser#totalInvocation.\n\texitTotalInvocation(ctx) {\n\t}\n\n\n\t// Enter a parse tree produced by FHIRPathParser#functn.\n\tenterFunctn(ctx) {\n\t}\n\n\t// Exit a parse tree produced by FHIRPathParser#functn.\n\texitFunctn(ctx) {\n\t}\n\n\n\t// Enter a parse tree produced by FHIRPathParser#paramList.\n\tenterParamList(ctx) {\n\t}\n\n\t// Exit a parse tree produced by FHIRPathParser#paramList.\n\texitParamList(ctx) {\n\t}\n\n\n\t// Enter a parse tree produced by FHIRPathParser#quantity.\n\tenterQuantity(ctx) {\n\t}\n\n\t// Exit a parse tree produced by FHIRPathParser#quantity.\n\texitQuantity(ctx) {\n\t}\n\n\n\t// Enter a parse tree produced by FHIRPathParser#unit.\n\tenterUnit(ctx) {\n\t}\n\n\t// Exit a parse tree produced by FHIRPathParser#unit.\n\texitUnit(ctx) {\n\t}\n\n\n\t// Enter a parse tree produced by FHIRPathParser#dateTimePrecision.\n\tenterDateTimePrecision(ctx) {\n\t}\n\n\t// Exit a parse tree produced by FHIRPathParser#dateTimePrecision.\n\texitDateTimePrecision(ctx) {\n\t}\n\n\n\t// Enter a parse tree produced by FHIRPathParser#pluralDateTimePrecision.\n\tenterPluralDateTimePrecision(ctx) {\n\t}\n\n\t// Exit a parse tree produced by FHIRPathParser#pluralDateTimePrecision.\n\texitPluralDateTimePrecision(ctx) {\n\t}\n\n\n\t// Enter a parse tree produced by FHIRPathParser#typeSpecifier.\n\tenterTypeSpecifier(ctx) {\n\t}\n\n\t// Exit a parse tree produced by FHIRPathParser#typeSpecifier.\n\texitTypeSpecifier(ctx) {\n\t}\n\n\n\t// Enter a parse tree produced by FHIRPathParser#qualifiedIdentifier.\n\tenterQualifiedIdentifier(ctx) {\n\t}\n\n\t// Exit a parse tree produced by FHIRPathParser#qualifiedIdentifier.\n\texitQualifiedIdentifier(ctx) {\n\t}\n\n\n\t// Enter a parse tree produced by FHIRPathParser#identifier.\n\tenterIdentifier(ctx) {\n\t}\n\n\t// Exit a parse tree produced by FHIRPathParser#identifier.\n\texitIdentifier(ctx) {\n\t}\n\n\n\n}\nmodule.exports = FHIRPathListener;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/fhirpath@3.18.0/node_modules/fhirpath/src/parser/generated/FHIRPathListener.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/fhirpath@3.18.0/node_modules/fhirpath/src/parser/generated/FHIRPathParser.js":
/*!**********************************************************************************************************!*\
  !*** ../node_modules/.pnpm/fhirpath@3.18.0/node_modules/fhirpath/src/parser/generated/FHIRPathParser.js ***!
  \**********************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Generated from FHIRPath.g4 by ANTLR 4.9.3\n// jshint ignore: start\nconst antlr4 = __webpack_require__(/*! ../antlr4-index */ \"(ssr)/../node_modules/.pnpm/fhirpath@3.18.0/node_modules/fhirpath/src/parser/antlr4-index.js\");\nconst FHIRPathListener = __webpack_require__(/*! ./FHIRPathListener */ \"(ssr)/../node_modules/.pnpm/fhirpath@3.18.0/node_modules/fhirpath/src/parser/generated/FHIRPathListener.js\");\n\nconst serializedATN = [\"\\u0003\\u608b\\ua72a\\u8133\\ub9ed\\u417c\\u3be7\\u7786\",\n    \"\\u5964\\u0003A\\u009c\\u0004\\u0002\\t\\u0002\\u0004\\u0003\\t\\u0003\\u0004\\u0004\",\n    \"\\t\\u0004\\u0004\\u0005\\t\\u0005\\u0004\\u0006\\t\\u0006\\u0004\\u0007\\t\\u0007\",\n    \"\\u0004\\b\\t\\b\\u0004\\t\\t\\t\\u0004\\n\\t\\n\\u0004\\u000b\\t\\u000b\\u0004\\f\\t\\f\",\n    \"\\u0004\\r\\t\\r\\u0004\\u000e\\t\\u000e\\u0004\\u000f\\t\\u000f\\u0004\\u0010\\t\\u0010\",\n    \"\\u0003\\u0002\\u0003\\u0002\\u0003\\u0002\\u0003\\u0003\\u0003\\u0003\\u0003\\u0003\",\n    \"\\u0003\\u0003\\u0005\\u0003(\\n\\u0003\\u0003\\u0003\\u0003\\u0003\\u0003\\u0003\",\n    \"\\u0003\\u0003\\u0003\\u0003\\u0003\\u0003\\u0003\\u0003\\u0003\\u0003\\u0003\\u0003\",\n    \"\\u0003\\u0003\\u0003\\u0003\\u0003\\u0003\\u0003\\u0003\\u0003\\u0003\\u0003\\u0003\",\n    \"\\u0003\\u0003\\u0003\\u0003\\u0003\\u0003\\u0003\\u0003\\u0003\\u0003\\u0003\\u0003\",\n    \"\\u0003\\u0003\\u0003\\u0003\\u0003\\u0003\\u0003\\u0003\\u0003\\u0003\\u0003\\u0003\",\n    \"\\u0003\\u0003\\u0003\\u0003\\u0003\\u0003\\u0003\\u0003\\u0003\\u0003\\u0003\\u0003\",\n    \"\\u0003\\u0003\\u0003\\u0003\\u0003\\u0003\\u0003\\u0003\\u0003\\u0003\\u0007\\u0003\",\n    \"P\\n\\u0003\\f\\u0003\\u000e\\u0003S\\u000b\\u0003\\u0003\\u0004\\u0003\\u0004\\u0003\",\n    \"\\u0004\\u0003\\u0004\\u0003\\u0004\\u0003\\u0004\\u0003\\u0004\\u0005\\u0004\\\\\",\n    \"\\n\\u0004\\u0003\\u0005\\u0003\\u0005\\u0003\\u0005\\u0003\\u0005\\u0003\\u0005\",\n    \"\\u0003\\u0005\\u0003\\u0005\\u0003\\u0005\\u0005\\u0005f\\n\\u0005\\u0003\\u0006\",\n    \"\\u0003\\u0006\\u0003\\u0006\\u0005\\u0006k\\n\\u0006\\u0003\\u0007\\u0003\\u0007\",\n    \"\\u0003\\u0007\\u0003\\u0007\\u0003\\u0007\\u0005\\u0007r\\n\\u0007\\u0003\\b\\u0003\",\n    \"\\b\\u0003\\b\\u0005\\bw\\n\\b\\u0003\\b\\u0003\\b\\u0003\\t\\u0003\\t\\u0003\\t\\u0007\",\n    \"\\t~\\n\\t\\f\\t\\u000e\\t\\u0081\\u000b\\t\\u0003\\n\\u0003\\n\\u0005\\n\\u0085\\n\\n\",\n    \"\\u0003\\u000b\\u0003\\u000b\\u0003\\u000b\\u0005\\u000b\\u008a\\n\\u000b\\u0003\",\n    \"\\f\\u0003\\f\\u0003\\r\\u0003\\r\\u0003\\u000e\\u0003\\u000e\\u0003\\u000f\\u0003\",\n    \"\\u000f\\u0003\\u000f\\u0007\\u000f\\u0095\\n\\u000f\\f\\u000f\\u000e\\u000f\\u0098\",\n    \"\\u000b\\u000f\\u0003\\u0010\\u0003\\u0010\\u0003\\u0010\\u0002\\u0003\\u0004\\u0011\",\n    \"\\u0002\\u0004\\u0006\\b\\n\\f\\u000e\\u0010\\u0012\\u0014\\u0016\\u0018\\u001a\\u001c\",\n    \"\\u001e\\u0002\\u000e\\u0003\\u0002\\u0006\\u0007\\u0003\\u0002\\b\\u000b\\u0004\",\n    \"\\u0002\\u0006\\u0007\\f\\f\\u0003\\u0002\\u000e\\u0011\\u0003\\u0002\\u0014\\u0017\",\n    \"\\u0003\\u0002\\u0018\\u0019\\u0003\\u0002\\u001b\\u001c\\u0003\\u0002\\u0012\\u0013\",\n    \"\\u0003\\u0002\\\"#\\u0003\\u0002)0\\u0003\\u000218\\u0005\\u0002\\u0012\\u0013\",\n    \"\\u0018\\u0019;<\\u0002\\u00ad\\u0002 \\u0003\\u0002\\u0002\\u0002\\u0004\\'\\u0003\",\n    \"\\u0002\\u0002\\u0002\\u0006[\\u0003\\u0002\\u0002\\u0002\\be\\u0003\\u0002\\u0002\",\n    \"\\u0002\\ng\\u0003\\u0002\\u0002\\u0002\\fq\\u0003\\u0002\\u0002\\u0002\\u000es\",\n    \"\\u0003\\u0002\\u0002\\u0002\\u0010z\\u0003\\u0002\\u0002\\u0002\\u0012\\u0082\",\n    \"\\u0003\\u0002\\u0002\\u0002\\u0014\\u0089\\u0003\\u0002\\u0002\\u0002\\u0016\\u008b\",\n    \"\\u0003\\u0002\\u0002\\u0002\\u0018\\u008d\\u0003\\u0002\\u0002\\u0002\\u001a\\u008f\",\n    \"\\u0003\\u0002\\u0002\\u0002\\u001c\\u0091\\u0003\\u0002\\u0002\\u0002\\u001e\\u0099\",\n    \"\\u0003\\u0002\\u0002\\u0002 !\\u0005\\u0004\\u0003\\u0002!\\\"\\u0007\\u0002\\u0002\",\n    \"\\u0003\\\"\\u0003\\u0003\\u0002\\u0002\\u0002#$\\b\\u0003\\u0001\\u0002$(\\u0005\",\n    \"\\u0006\\u0004\\u0002%&\\t\\u0002\\u0002\\u0002&(\\u0005\\u0004\\u0003\\r\\'#\\u0003\",\n    \"\\u0002\\u0002\\u0002\\'%\\u0003\\u0002\\u0002\\u0002(Q\\u0003\\u0002\\u0002\\u0002\",\n    \")*\\f\\f\\u0002\\u0002*+\\t\\u0003\\u0002\\u0002+P\\u0005\\u0004\\u0003\\r,-\\f\\u000b\",\n    \"\\u0002\\u0002-.\\t\\u0004\\u0002\\u0002.P\\u0005\\u0004\\u0003\\f/0\\f\\n\\u0002\",\n    \"\\u000201\\u0007\\r\\u0002\\u00021P\\u0005\\u0004\\u0003\\u000b23\\f\\t\\u0002\\u0002\",\n    \"34\\t\\u0005\\u0002\\u00024P\\u0005\\u0004\\u0003\\n56\\f\\u0007\\u0002\\u00026\",\n    \"7\\t\\u0006\\u0002\\u00027P\\u0005\\u0004\\u0003\\b89\\f\\u0006\\u0002\\u00029:\",\n    \"\\t\\u0007\\u0002\\u0002:P\\u0005\\u0004\\u0003\\u0007;<\\f\\u0005\\u0002\\u0002\",\n    \"<=\\u0007\\u001a\\u0002\\u0002=P\\u0005\\u0004\\u0003\\u0006>?\\f\\u0004\\u0002\",\n    \"\\u0002?@\\t\\b\\u0002\\u0002@P\\u0005\\u0004\\u0003\\u0005AB\\f\\u0003\\u0002\\u0002\",\n    \"BC\\u0007\\u001d\\u0002\\u0002CP\\u0005\\u0004\\u0003\\u0004DE\\f\\u000f\\u0002\",\n    \"\\u0002EF\\u0007\\u0003\\u0002\\u0002FP\\u0005\\f\\u0007\\u0002GH\\f\\u000e\\u0002\",\n    \"\\u0002HI\\u0007\\u0004\\u0002\\u0002IJ\\u0005\\u0004\\u0003\\u0002JK\\u0007\\u0005\",\n    \"\\u0002\\u0002KP\\u0003\\u0002\\u0002\\u0002LM\\f\\b\\u0002\\u0002MN\\t\\t\\u0002\",\n    \"\\u0002NP\\u0005\\u001a\\u000e\\u0002O)\\u0003\\u0002\\u0002\\u0002O,\\u0003\\u0002\",\n    \"\\u0002\\u0002O/\\u0003\\u0002\\u0002\\u0002O2\\u0003\\u0002\\u0002\\u0002O5\\u0003\",\n    \"\\u0002\\u0002\\u0002O8\\u0003\\u0002\\u0002\\u0002O;\\u0003\\u0002\\u0002\\u0002\",\n    \"O>\\u0003\\u0002\\u0002\\u0002OA\\u0003\\u0002\\u0002\\u0002OD\\u0003\\u0002\\u0002\",\n    \"\\u0002OG\\u0003\\u0002\\u0002\\u0002OL\\u0003\\u0002\\u0002\\u0002PS\\u0003\\u0002\",\n    \"\\u0002\\u0002QO\\u0003\\u0002\\u0002\\u0002QR\\u0003\\u0002\\u0002\\u0002R\\u0005\",\n    \"\\u0003\\u0002\\u0002\\u0002SQ\\u0003\\u0002\\u0002\\u0002T\\\\\\u0005\\f\\u0007\",\n    \"\\u0002U\\\\\\u0005\\b\\u0005\\u0002V\\\\\\u0005\\n\\u0006\\u0002WX\\u0007\\u001e\\u0002\",\n    \"\\u0002XY\\u0005\\u0004\\u0003\\u0002YZ\\u0007\\u001f\\u0002\\u0002Z\\\\\\u0003\",\n    \"\\u0002\\u0002\\u0002[T\\u0003\\u0002\\u0002\\u0002[U\\u0003\\u0002\\u0002\\u0002\",\n    \"[V\\u0003\\u0002\\u0002\\u0002[W\\u0003\\u0002\\u0002\\u0002\\\\\\u0007\\u0003\\u0002\",\n    \"\\u0002\\u0002]^\\u0007 \\u0002\\u0002^f\\u0007!\\u0002\\u0002_f\\t\\n\\u0002\\u0002\",\n    \"`f\\u0007=\\u0002\\u0002af\\u0007>\\u0002\\u0002bf\\u00079\\u0002\\u0002cf\\u0007\",\n    \":\\u0002\\u0002df\\u0005\\u0012\\n\\u0002e]\\u0003\\u0002\\u0002\\u0002e_\\u0003\",\n    \"\\u0002\\u0002\\u0002e`\\u0003\\u0002\\u0002\\u0002ea\\u0003\\u0002\\u0002\\u0002\",\n    \"eb\\u0003\\u0002\\u0002\\u0002ec\\u0003\\u0002\\u0002\\u0002ed\\u0003\\u0002\\u0002\",\n    \"\\u0002f\\t\\u0003\\u0002\\u0002\\u0002gj\\u0007$\\u0002\\u0002hk\\u0005\\u001e\",\n    \"\\u0010\\u0002ik\\u0007=\\u0002\\u0002jh\\u0003\\u0002\\u0002\\u0002ji\\u0003\",\n    \"\\u0002\\u0002\\u0002k\\u000b\\u0003\\u0002\\u0002\\u0002lr\\u0005\\u001e\\u0010\",\n    \"\\u0002mr\\u0005\\u000e\\b\\u0002nr\\u0007%\\u0002\\u0002or\\u0007&\\u0002\\u0002\",\n    \"pr\\u0007\\'\\u0002\\u0002ql\\u0003\\u0002\\u0002\\u0002qm\\u0003\\u0002\\u0002\",\n    \"\\u0002qn\\u0003\\u0002\\u0002\\u0002qo\\u0003\\u0002\\u0002\\u0002qp\\u0003\\u0002\",\n    \"\\u0002\\u0002r\\r\\u0003\\u0002\\u0002\\u0002st\\u0005\\u001e\\u0010\\u0002tv\",\n    \"\\u0007\\u001e\\u0002\\u0002uw\\u0005\\u0010\\t\\u0002vu\\u0003\\u0002\\u0002\\u0002\",\n    \"vw\\u0003\\u0002\\u0002\\u0002wx\\u0003\\u0002\\u0002\\u0002xy\\u0007\\u001f\\u0002\",\n    \"\\u0002y\\u000f\\u0003\\u0002\\u0002\\u0002z\\u007f\\u0005\\u0004\\u0003\\u0002\",\n    \"{|\\u0007(\\u0002\\u0002|~\\u0005\\u0004\\u0003\\u0002}{\\u0003\\u0002\\u0002\",\n    \"\\u0002~\\u0081\\u0003\\u0002\\u0002\\u0002\\u007f}\\u0003\\u0002\\u0002\\u0002\",\n    \"\\u007f\\u0080\\u0003\\u0002\\u0002\\u0002\\u0080\\u0011\\u0003\\u0002\\u0002\\u0002\",\n    \"\\u0081\\u007f\\u0003\\u0002\\u0002\\u0002\\u0082\\u0084\\u0007>\\u0002\\u0002\",\n    \"\\u0083\\u0085\\u0005\\u0014\\u000b\\u0002\\u0084\\u0083\\u0003\\u0002\\u0002\\u0002\",\n    \"\\u0084\\u0085\\u0003\\u0002\\u0002\\u0002\\u0085\\u0013\\u0003\\u0002\\u0002\\u0002\",\n    \"\\u0086\\u008a\\u0005\\u0016\\f\\u0002\\u0087\\u008a\\u0005\\u0018\\r\\u0002\\u0088\",\n    \"\\u008a\\u0007=\\u0002\\u0002\\u0089\\u0086\\u0003\\u0002\\u0002\\u0002\\u0089\",\n    \"\\u0087\\u0003\\u0002\\u0002\\u0002\\u0089\\u0088\\u0003\\u0002\\u0002\\u0002\\u008a\",\n    \"\\u0015\\u0003\\u0002\\u0002\\u0002\\u008b\\u008c\\t\\u000b\\u0002\\u0002\\u008c\",\n    \"\\u0017\\u0003\\u0002\\u0002\\u0002\\u008d\\u008e\\t\\f\\u0002\\u0002\\u008e\\u0019\",\n    \"\\u0003\\u0002\\u0002\\u0002\\u008f\\u0090\\u0005\\u001c\\u000f\\u0002\\u0090\\u001b\",\n    \"\\u0003\\u0002\\u0002\\u0002\\u0091\\u0096\\u0005\\u001e\\u0010\\u0002\\u0092\\u0093\",\n    \"\\u0007\\u0003\\u0002\\u0002\\u0093\\u0095\\u0005\\u001e\\u0010\\u0002\\u0094\\u0092\",\n    \"\\u0003\\u0002\\u0002\\u0002\\u0095\\u0098\\u0003\\u0002\\u0002\\u0002\\u0096\\u0094\",\n    \"\\u0003\\u0002\\u0002\\u0002\\u0096\\u0097\\u0003\\u0002\\u0002\\u0002\\u0097\\u001d\",\n    \"\\u0003\\u0002\\u0002\\u0002\\u0098\\u0096\\u0003\\u0002\\u0002\\u0002\\u0099\\u009a\",\n    \"\\t\\r\\u0002\\u0002\\u009a\\u001f\\u0003\\u0002\\u0002\\u0002\\u000e\\'OQ[ejqv\",\n    \"\\u007f\\u0084\\u0089\\u0096\"].join(\"\");\n\n\nconst atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);\n\nconst decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );\n\nconst sharedContextCache = new antlr4.PredictionContextCache();\n\nclass FHIRPathParser extends antlr4.Parser {\n\n    static grammarFileName = \"FHIRPath.g4\";\n    static literalNames = [ null, \"'.'\", \"'['\", \"']'\", \"'+'\", \"'-'\", \"'*'\", \n                            \"'/'\", \"'div'\", \"'mod'\", \"'&'\", \"'|'\", \"'<='\", \n                            \"'<'\", \"'>'\", \"'>='\", \"'is'\", \"'as'\", \"'='\", \n                            \"'~'\", \"'!='\", \"'!~'\", \"'in'\", \"'contains'\", \n                            \"'and'\", \"'or'\", \"'xor'\", \"'implies'\", \"'('\", \n                            \"')'\", \"'{'\", \"'}'\", \"'true'\", \"'false'\", \"'%'\", \n                            \"'$this'\", \"'$index'\", \"'$total'\", \"','\", \"'year'\", \n                            \"'month'\", \"'week'\", \"'day'\", \"'hour'\", \"'minute'\", \n                            \"'second'\", \"'millisecond'\", \"'years'\", \"'months'\", \n                            \"'weeks'\", \"'days'\", \"'hours'\", \"'minutes'\", \n                            \"'seconds'\", \"'milliseconds'\" ];\n    static symbolicNames = [ null, null, null, null, null, null, null, null, \n                             null, null, null, null, null, null, null, null, \n                             null, null, null, null, null, null, null, null, \n                             null, null, null, null, null, null, null, null, \n                             null, null, null, null, null, null, null, null, \n                             null, null, null, null, null, null, null, null, \n                             null, null, null, null, null, null, null, \"DATETIME\", \n                             \"TIME\", \"IDENTIFIER\", \"DELIMITEDIDENTIFIER\", \n                             \"STRING\", \"NUMBER\", \"WS\", \"COMMENT\", \"LINE_COMMENT\" ];\n    static ruleNames = [ \"entireExpression\", \"expression\", \"term\", \"literal\", \n                         \"externalConstant\", \"invocation\", \"functn\", \"paramList\", \n                         \"quantity\", \"unit\", \"dateTimePrecision\", \"pluralDateTimePrecision\", \n                         \"typeSpecifier\", \"qualifiedIdentifier\", \"identifier\" ];\n\n    constructor(input) {\n        super(input);\n        this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);\n        this.ruleNames = FHIRPathParser.ruleNames;\n        this.literalNames = FHIRPathParser.literalNames;\n        this.symbolicNames = FHIRPathParser.symbolicNames;\n    }\n\n    get atn() {\n        return atn;\n    }\n\n    sempred(localctx, ruleIndex, predIndex) {\n    \tswitch(ruleIndex) {\n    \tcase 1:\n    \t    \t\treturn this.expression_sempred(localctx, predIndex);\n        default:\n            throw \"No predicate with index:\" + ruleIndex;\n       }\n    }\n\n    expression_sempred(localctx, predIndex) {\n    \tswitch(predIndex) {\n    \t\tcase 0:\n    \t\t\treturn this.precpred(this._ctx, 10);\n    \t\tcase 1:\n    \t\t\treturn this.precpred(this._ctx, 9);\n    \t\tcase 2:\n    \t\t\treturn this.precpred(this._ctx, 8);\n    \t\tcase 3:\n    \t\t\treturn this.precpred(this._ctx, 7);\n    \t\tcase 4:\n    \t\t\treturn this.precpred(this._ctx, 5);\n    \t\tcase 5:\n    \t\t\treturn this.precpred(this._ctx, 4);\n    \t\tcase 6:\n    \t\t\treturn this.precpred(this._ctx, 3);\n    \t\tcase 7:\n    \t\t\treturn this.precpred(this._ctx, 2);\n    \t\tcase 8:\n    \t\t\treturn this.precpred(this._ctx, 1);\n    \t\tcase 9:\n    \t\t\treturn this.precpred(this._ctx, 13);\n    \t\tcase 10:\n    \t\t\treturn this.precpred(this._ctx, 12);\n    \t\tcase 11:\n    \t\t\treturn this.precpred(this._ctx, 6);\n    \t\tdefault:\n    \t\t\tthrow \"No predicate with index:\" + predIndex;\n    \t}\n    };\n\n\n\n\n\tentireExpression() {\n\t    let localctx = new EntireExpressionContext(this, this._ctx, this.state);\n\t    this.enterRule(localctx, 0, FHIRPathParser.RULE_entireExpression);\n\t    try {\n\t        this.enterOuterAlt(localctx, 1);\n\t        this.state = 30;\n\t        this.expression(0);\n\t        this.state = 31;\n\t        this.match(FHIRPathParser.EOF);\n\t    } catch (re) {\n\t    \tif(re instanceof antlr4.error.RecognitionException) {\n\t\t        localctx.exception = re;\n\t\t        this._errHandler.reportError(this, re);\n\t\t        this._errHandler.recover(this, re);\n\t\t    } else {\n\t\t    \tthrow re;\n\t\t    }\n\t    } finally {\n\t        this.exitRule();\n\t    }\n\t    return localctx;\n\t}\n\n\n\texpression(_p) {\n\t\tif(_p===undefined) {\n\t\t    _p = 0;\n\t\t}\n\t    const _parentctx = this._ctx;\n\t    const _parentState = this.state;\n\t    let localctx = new ExpressionContext(this, this._ctx, _parentState);\n\t    let _prevctx = localctx;\n\t    const _startState = 2;\n\t    this.enterRecursionRule(localctx, 2, FHIRPathParser.RULE_expression, _p);\n\t    var _la = 0; // Token type\n\t    try {\n\t        this.enterOuterAlt(localctx, 1);\n\t        this.state = 37;\n\t        this._errHandler.sync(this);\n\t        switch(this._input.LA(1)) {\n\t        case FHIRPathParser.T__15:\n\t        case FHIRPathParser.T__16:\n\t        case FHIRPathParser.T__21:\n\t        case FHIRPathParser.T__22:\n\t        case FHIRPathParser.T__27:\n\t        case FHIRPathParser.T__29:\n\t        case FHIRPathParser.T__31:\n\t        case FHIRPathParser.T__32:\n\t        case FHIRPathParser.T__33:\n\t        case FHIRPathParser.T__34:\n\t        case FHIRPathParser.T__35:\n\t        case FHIRPathParser.T__36:\n\t        case FHIRPathParser.DATETIME:\n\t        case FHIRPathParser.TIME:\n\t        case FHIRPathParser.IDENTIFIER:\n\t        case FHIRPathParser.DELIMITEDIDENTIFIER:\n\t        case FHIRPathParser.STRING:\n\t        case FHIRPathParser.NUMBER:\n\t            localctx = new TermExpressionContext(this, localctx);\n\t            this._ctx = localctx;\n\t            _prevctx = localctx;\n\n\t            this.state = 34;\n\t            this.term();\n\t            break;\n\t        case FHIRPathParser.T__3:\n\t        case FHIRPathParser.T__4:\n\t            localctx = new PolarityExpressionContext(this, localctx);\n\t            this._ctx = localctx;\n\t            _prevctx = localctx;\n\t            this.state = 35;\n\t            _la = this._input.LA(1);\n\t            if(!(_la===FHIRPathParser.T__3 || _la===FHIRPathParser.T__4)) {\n\t            this._errHandler.recoverInline(this);\n\t            }\n\t            else {\n\t            \tthis._errHandler.reportMatch(this);\n\t                this.consume();\n\t            }\n\t            this.state = 36;\n\t            this.expression(11);\n\t            break;\n\t        default:\n\t            throw new antlr4.error.NoViableAltException(this);\n\t        }\n\t        this._ctx.stop = this._input.LT(-1);\n\t        this.state = 79;\n\t        this._errHandler.sync(this);\n\t        var _alt = this._interp.adaptivePredict(this._input,2,this._ctx)\n\t        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {\n\t            if(_alt===1) {\n\t                if(this._parseListeners!==null) {\n\t                    this.triggerExitRuleEvent();\n\t                }\n\t                _prevctx = localctx;\n\t                this.state = 77;\n\t                this._errHandler.sync(this);\n\t                var la_ = this._interp.adaptivePredict(this._input,1,this._ctx);\n\t                switch(la_) {\n\t                case 1:\n\t                    localctx = new MultiplicativeExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));\n\t                    this.pushNewRecursionContext(localctx, _startState, FHIRPathParser.RULE_expression);\n\t                    this.state = 39;\n\t                    if (!( this.precpred(this._ctx, 10))) {\n\t                        throw new antlr4.error.FailedPredicateException(this, \"this.precpred(this._ctx, 10)\");\n\t                    }\n\t                    this.state = 40;\n\t                    _la = this._input.LA(1);\n\t                    if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << FHIRPathParser.T__5) | (1 << FHIRPathParser.T__6) | (1 << FHIRPathParser.T__7) | (1 << FHIRPathParser.T__8))) !== 0))) {\n\t                    this._errHandler.recoverInline(this);\n\t                    }\n\t                    else {\n\t                    \tthis._errHandler.reportMatch(this);\n\t                        this.consume();\n\t                    }\n\t                    this.state = 41;\n\t                    this.expression(11);\n\t                    break;\n\n\t                case 2:\n\t                    localctx = new AdditiveExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));\n\t                    this.pushNewRecursionContext(localctx, _startState, FHIRPathParser.RULE_expression);\n\t                    this.state = 42;\n\t                    if (!( this.precpred(this._ctx, 9))) {\n\t                        throw new antlr4.error.FailedPredicateException(this, \"this.precpred(this._ctx, 9)\");\n\t                    }\n\t                    this.state = 43;\n\t                    _la = this._input.LA(1);\n\t                    if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << FHIRPathParser.T__3) | (1 << FHIRPathParser.T__4) | (1 << FHIRPathParser.T__9))) !== 0))) {\n\t                    this._errHandler.recoverInline(this);\n\t                    }\n\t                    else {\n\t                    \tthis._errHandler.reportMatch(this);\n\t                        this.consume();\n\t                    }\n\t                    this.state = 44;\n\t                    this.expression(10);\n\t                    break;\n\n\t                case 3:\n\t                    localctx = new UnionExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));\n\t                    this.pushNewRecursionContext(localctx, _startState, FHIRPathParser.RULE_expression);\n\t                    this.state = 45;\n\t                    if (!( this.precpred(this._ctx, 8))) {\n\t                        throw new antlr4.error.FailedPredicateException(this, \"this.precpred(this._ctx, 8)\");\n\t                    }\n\t                    this.state = 46;\n\t                    this.match(FHIRPathParser.T__10);\n\t                    this.state = 47;\n\t                    this.expression(9);\n\t                    break;\n\n\t                case 4:\n\t                    localctx = new InequalityExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));\n\t                    this.pushNewRecursionContext(localctx, _startState, FHIRPathParser.RULE_expression);\n\t                    this.state = 48;\n\t                    if (!( this.precpred(this._ctx, 7))) {\n\t                        throw new antlr4.error.FailedPredicateException(this, \"this.precpred(this._ctx, 7)\");\n\t                    }\n\t                    this.state = 49;\n\t                    _la = this._input.LA(1);\n\t                    if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << FHIRPathParser.T__11) | (1 << FHIRPathParser.T__12) | (1 << FHIRPathParser.T__13) | (1 << FHIRPathParser.T__14))) !== 0))) {\n\t                    this._errHandler.recoverInline(this);\n\t                    }\n\t                    else {\n\t                    \tthis._errHandler.reportMatch(this);\n\t                        this.consume();\n\t                    }\n\t                    this.state = 50;\n\t                    this.expression(8);\n\t                    break;\n\n\t                case 5:\n\t                    localctx = new EqualityExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));\n\t                    this.pushNewRecursionContext(localctx, _startState, FHIRPathParser.RULE_expression);\n\t                    this.state = 51;\n\t                    if (!( this.precpred(this._ctx, 5))) {\n\t                        throw new antlr4.error.FailedPredicateException(this, \"this.precpred(this._ctx, 5)\");\n\t                    }\n\t                    this.state = 52;\n\t                    _la = this._input.LA(1);\n\t                    if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << FHIRPathParser.T__17) | (1 << FHIRPathParser.T__18) | (1 << FHIRPathParser.T__19) | (1 << FHIRPathParser.T__20))) !== 0))) {\n\t                    this._errHandler.recoverInline(this);\n\t                    }\n\t                    else {\n\t                    \tthis._errHandler.reportMatch(this);\n\t                        this.consume();\n\t                    }\n\t                    this.state = 53;\n\t                    this.expression(6);\n\t                    break;\n\n\t                case 6:\n\t                    localctx = new MembershipExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));\n\t                    this.pushNewRecursionContext(localctx, _startState, FHIRPathParser.RULE_expression);\n\t                    this.state = 54;\n\t                    if (!( this.precpred(this._ctx, 4))) {\n\t                        throw new antlr4.error.FailedPredicateException(this, \"this.precpred(this._ctx, 4)\");\n\t                    }\n\t                    this.state = 55;\n\t                    _la = this._input.LA(1);\n\t                    if(!(_la===FHIRPathParser.T__21 || _la===FHIRPathParser.T__22)) {\n\t                    this._errHandler.recoverInline(this);\n\t                    }\n\t                    else {\n\t                    \tthis._errHandler.reportMatch(this);\n\t                        this.consume();\n\t                    }\n\t                    this.state = 56;\n\t                    this.expression(5);\n\t                    break;\n\n\t                case 7:\n\t                    localctx = new AndExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));\n\t                    this.pushNewRecursionContext(localctx, _startState, FHIRPathParser.RULE_expression);\n\t                    this.state = 57;\n\t                    if (!( this.precpred(this._ctx, 3))) {\n\t                        throw new antlr4.error.FailedPredicateException(this, \"this.precpred(this._ctx, 3)\");\n\t                    }\n\t                    this.state = 58;\n\t                    this.match(FHIRPathParser.T__23);\n\t                    this.state = 59;\n\t                    this.expression(4);\n\t                    break;\n\n\t                case 8:\n\t                    localctx = new OrExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));\n\t                    this.pushNewRecursionContext(localctx, _startState, FHIRPathParser.RULE_expression);\n\t                    this.state = 60;\n\t                    if (!( this.precpred(this._ctx, 2))) {\n\t                        throw new antlr4.error.FailedPredicateException(this, \"this.precpred(this._ctx, 2)\");\n\t                    }\n\t                    this.state = 61;\n\t                    _la = this._input.LA(1);\n\t                    if(!(_la===FHIRPathParser.T__24 || _la===FHIRPathParser.T__25)) {\n\t                    this._errHandler.recoverInline(this);\n\t                    }\n\t                    else {\n\t                    \tthis._errHandler.reportMatch(this);\n\t                        this.consume();\n\t                    }\n\t                    this.state = 62;\n\t                    this.expression(3);\n\t                    break;\n\n\t                case 9:\n\t                    localctx = new ImpliesExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));\n\t                    this.pushNewRecursionContext(localctx, _startState, FHIRPathParser.RULE_expression);\n\t                    this.state = 63;\n\t                    if (!( this.precpred(this._ctx, 1))) {\n\t                        throw new antlr4.error.FailedPredicateException(this, \"this.precpred(this._ctx, 1)\");\n\t                    }\n\t                    this.state = 64;\n\t                    this.match(FHIRPathParser.T__26);\n\t                    this.state = 65;\n\t                    this.expression(2);\n\t                    break;\n\n\t                case 10:\n\t                    localctx = new InvocationExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));\n\t                    this.pushNewRecursionContext(localctx, _startState, FHIRPathParser.RULE_expression);\n\t                    this.state = 66;\n\t                    if (!( this.precpred(this._ctx, 13))) {\n\t                        throw new antlr4.error.FailedPredicateException(this, \"this.precpred(this._ctx, 13)\");\n\t                    }\n\t                    this.state = 67;\n\t                    this.match(FHIRPathParser.T__0);\n\t                    this.state = 68;\n\t                    this.invocation();\n\t                    break;\n\n\t                case 11:\n\t                    localctx = new IndexerExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));\n\t                    this.pushNewRecursionContext(localctx, _startState, FHIRPathParser.RULE_expression);\n\t                    this.state = 69;\n\t                    if (!( this.precpred(this._ctx, 12))) {\n\t                        throw new antlr4.error.FailedPredicateException(this, \"this.precpred(this._ctx, 12)\");\n\t                    }\n\t                    this.state = 70;\n\t                    this.match(FHIRPathParser.T__1);\n\t                    this.state = 71;\n\t                    this.expression(0);\n\t                    this.state = 72;\n\t                    this.match(FHIRPathParser.T__2);\n\t                    break;\n\n\t                case 12:\n\t                    localctx = new TypeExpressionContext(this, new ExpressionContext(this, _parentctx, _parentState));\n\t                    this.pushNewRecursionContext(localctx, _startState, FHIRPathParser.RULE_expression);\n\t                    this.state = 74;\n\t                    if (!( this.precpred(this._ctx, 6))) {\n\t                        throw new antlr4.error.FailedPredicateException(this, \"this.precpred(this._ctx, 6)\");\n\t                    }\n\t                    this.state = 75;\n\t                    _la = this._input.LA(1);\n\t                    if(!(_la===FHIRPathParser.T__15 || _la===FHIRPathParser.T__16)) {\n\t                    this._errHandler.recoverInline(this);\n\t                    }\n\t                    else {\n\t                    \tthis._errHandler.reportMatch(this);\n\t                        this.consume();\n\t                    }\n\t                    this.state = 76;\n\t                    this.typeSpecifier();\n\t                    break;\n\n\t                } \n\t            }\n\t            this.state = 81;\n\t            this._errHandler.sync(this);\n\t            _alt = this._interp.adaptivePredict(this._input,2,this._ctx);\n\t        }\n\n\t    } catch( error) {\n\t        if(error instanceof antlr4.error.RecognitionException) {\n\t\t        localctx.exception = error;\n\t\t        this._errHandler.reportError(this, error);\n\t\t        this._errHandler.recover(this, error);\n\t\t    } else {\n\t\t    \tthrow error;\n\t\t    }\n\t    } finally {\n\t        this.unrollRecursionContexts(_parentctx)\n\t    }\n\t    return localctx;\n\t}\n\n\n\n\tterm() {\n\t    let localctx = new TermContext(this, this._ctx, this.state);\n\t    this.enterRule(localctx, 4, FHIRPathParser.RULE_term);\n\t    try {\n\t        this.state = 89;\n\t        this._errHandler.sync(this);\n\t        switch(this._input.LA(1)) {\n\t        case FHIRPathParser.T__15:\n\t        case FHIRPathParser.T__16:\n\t        case FHIRPathParser.T__21:\n\t        case FHIRPathParser.T__22:\n\t        case FHIRPathParser.T__34:\n\t        case FHIRPathParser.T__35:\n\t        case FHIRPathParser.T__36:\n\t        case FHIRPathParser.IDENTIFIER:\n\t        case FHIRPathParser.DELIMITEDIDENTIFIER:\n\t            localctx = new InvocationTermContext(this, localctx);\n\t            this.enterOuterAlt(localctx, 1);\n\t            this.state = 82;\n\t            this.invocation();\n\t            break;\n\t        case FHIRPathParser.T__29:\n\t        case FHIRPathParser.T__31:\n\t        case FHIRPathParser.T__32:\n\t        case FHIRPathParser.DATETIME:\n\t        case FHIRPathParser.TIME:\n\t        case FHIRPathParser.STRING:\n\t        case FHIRPathParser.NUMBER:\n\t            localctx = new LiteralTermContext(this, localctx);\n\t            this.enterOuterAlt(localctx, 2);\n\t            this.state = 83;\n\t            this.literal();\n\t            break;\n\t        case FHIRPathParser.T__33:\n\t            localctx = new ExternalConstantTermContext(this, localctx);\n\t            this.enterOuterAlt(localctx, 3);\n\t            this.state = 84;\n\t            this.externalConstant();\n\t            break;\n\t        case FHIRPathParser.T__27:\n\t            localctx = new ParenthesizedTermContext(this, localctx);\n\t            this.enterOuterAlt(localctx, 4);\n\t            this.state = 85;\n\t            this.match(FHIRPathParser.T__27);\n\t            this.state = 86;\n\t            this.expression(0);\n\t            this.state = 87;\n\t            this.match(FHIRPathParser.T__28);\n\t            break;\n\t        default:\n\t            throw new antlr4.error.NoViableAltException(this);\n\t        }\n\t    } catch (re) {\n\t    \tif(re instanceof antlr4.error.RecognitionException) {\n\t\t        localctx.exception = re;\n\t\t        this._errHandler.reportError(this, re);\n\t\t        this._errHandler.recover(this, re);\n\t\t    } else {\n\t\t    \tthrow re;\n\t\t    }\n\t    } finally {\n\t        this.exitRule();\n\t    }\n\t    return localctx;\n\t}\n\n\n\n\tliteral() {\n\t    let localctx = new LiteralContext(this, this._ctx, this.state);\n\t    this.enterRule(localctx, 6, FHIRPathParser.RULE_literal);\n\t    var _la = 0; // Token type\n\t    try {\n\t        this.state = 99;\n\t        this._errHandler.sync(this);\n\t        var la_ = this._interp.adaptivePredict(this._input,4,this._ctx);\n\t        switch(la_) {\n\t        case 1:\n\t            localctx = new NullLiteralContext(this, localctx);\n\t            this.enterOuterAlt(localctx, 1);\n\t            this.state = 91;\n\t            this.match(FHIRPathParser.T__29);\n\t            this.state = 92;\n\t            this.match(FHIRPathParser.T__30);\n\t            break;\n\n\t        case 2:\n\t            localctx = new BooleanLiteralContext(this, localctx);\n\t            this.enterOuterAlt(localctx, 2);\n\t            this.state = 93;\n\t            _la = this._input.LA(1);\n\t            if(!(_la===FHIRPathParser.T__31 || _la===FHIRPathParser.T__32)) {\n\t            this._errHandler.recoverInline(this);\n\t            }\n\t            else {\n\t            \tthis._errHandler.reportMatch(this);\n\t                this.consume();\n\t            }\n\t            break;\n\n\t        case 3:\n\t            localctx = new StringLiteralContext(this, localctx);\n\t            this.enterOuterAlt(localctx, 3);\n\t            this.state = 94;\n\t            this.match(FHIRPathParser.STRING);\n\t            break;\n\n\t        case 4:\n\t            localctx = new NumberLiteralContext(this, localctx);\n\t            this.enterOuterAlt(localctx, 4);\n\t            this.state = 95;\n\t            this.match(FHIRPathParser.NUMBER);\n\t            break;\n\n\t        case 5:\n\t            localctx = new DateTimeLiteralContext(this, localctx);\n\t            this.enterOuterAlt(localctx, 5);\n\t            this.state = 96;\n\t            this.match(FHIRPathParser.DATETIME);\n\t            break;\n\n\t        case 6:\n\t            localctx = new TimeLiteralContext(this, localctx);\n\t            this.enterOuterAlt(localctx, 6);\n\t            this.state = 97;\n\t            this.match(FHIRPathParser.TIME);\n\t            break;\n\n\t        case 7:\n\t            localctx = new QuantityLiteralContext(this, localctx);\n\t            this.enterOuterAlt(localctx, 7);\n\t            this.state = 98;\n\t            this.quantity();\n\t            break;\n\n\t        }\n\t    } catch (re) {\n\t    \tif(re instanceof antlr4.error.RecognitionException) {\n\t\t        localctx.exception = re;\n\t\t        this._errHandler.reportError(this, re);\n\t\t        this._errHandler.recover(this, re);\n\t\t    } else {\n\t\t    \tthrow re;\n\t\t    }\n\t    } finally {\n\t        this.exitRule();\n\t    }\n\t    return localctx;\n\t}\n\n\n\n\texternalConstant() {\n\t    let localctx = new ExternalConstantContext(this, this._ctx, this.state);\n\t    this.enterRule(localctx, 8, FHIRPathParser.RULE_externalConstant);\n\t    try {\n\t        this.enterOuterAlt(localctx, 1);\n\t        this.state = 101;\n\t        this.match(FHIRPathParser.T__33);\n\t        this.state = 104;\n\t        this._errHandler.sync(this);\n\t        switch(this._input.LA(1)) {\n\t        case FHIRPathParser.T__15:\n\t        case FHIRPathParser.T__16:\n\t        case FHIRPathParser.T__21:\n\t        case FHIRPathParser.T__22:\n\t        case FHIRPathParser.IDENTIFIER:\n\t        case FHIRPathParser.DELIMITEDIDENTIFIER:\n\t            this.state = 102;\n\t            this.identifier();\n\t            break;\n\t        case FHIRPathParser.STRING:\n\t            this.state = 103;\n\t            this.match(FHIRPathParser.STRING);\n\t            break;\n\t        default:\n\t            throw new antlr4.error.NoViableAltException(this);\n\t        }\n\t    } catch (re) {\n\t    \tif(re instanceof antlr4.error.RecognitionException) {\n\t\t        localctx.exception = re;\n\t\t        this._errHandler.reportError(this, re);\n\t\t        this._errHandler.recover(this, re);\n\t\t    } else {\n\t\t    \tthrow re;\n\t\t    }\n\t    } finally {\n\t        this.exitRule();\n\t    }\n\t    return localctx;\n\t}\n\n\n\n\tinvocation() {\n\t    let localctx = new InvocationContext(this, this._ctx, this.state);\n\t    this.enterRule(localctx, 10, FHIRPathParser.RULE_invocation);\n\t    try {\n\t        this.state = 111;\n\t        this._errHandler.sync(this);\n\t        var la_ = this._interp.adaptivePredict(this._input,6,this._ctx);\n\t        switch(la_) {\n\t        case 1:\n\t            localctx = new MemberInvocationContext(this, localctx);\n\t            this.enterOuterAlt(localctx, 1);\n\t            this.state = 106;\n\t            this.identifier();\n\t            break;\n\n\t        case 2:\n\t            localctx = new FunctionInvocationContext(this, localctx);\n\t            this.enterOuterAlt(localctx, 2);\n\t            this.state = 107;\n\t            this.functn();\n\t            break;\n\n\t        case 3:\n\t            localctx = new ThisInvocationContext(this, localctx);\n\t            this.enterOuterAlt(localctx, 3);\n\t            this.state = 108;\n\t            this.match(FHIRPathParser.T__34);\n\t            break;\n\n\t        case 4:\n\t            localctx = new IndexInvocationContext(this, localctx);\n\t            this.enterOuterAlt(localctx, 4);\n\t            this.state = 109;\n\t            this.match(FHIRPathParser.T__35);\n\t            break;\n\n\t        case 5:\n\t            localctx = new TotalInvocationContext(this, localctx);\n\t            this.enterOuterAlt(localctx, 5);\n\t            this.state = 110;\n\t            this.match(FHIRPathParser.T__36);\n\t            break;\n\n\t        }\n\t    } catch (re) {\n\t    \tif(re instanceof antlr4.error.RecognitionException) {\n\t\t        localctx.exception = re;\n\t\t        this._errHandler.reportError(this, re);\n\t\t        this._errHandler.recover(this, re);\n\t\t    } else {\n\t\t    \tthrow re;\n\t\t    }\n\t    } finally {\n\t        this.exitRule();\n\t    }\n\t    return localctx;\n\t}\n\n\n\n\tfunctn() {\n\t    let localctx = new FunctnContext(this, this._ctx, this.state);\n\t    this.enterRule(localctx, 12, FHIRPathParser.RULE_functn);\n\t    var _la = 0; // Token type\n\t    try {\n\t        this.enterOuterAlt(localctx, 1);\n\t        this.state = 113;\n\t        this.identifier();\n\t        this.state = 114;\n\t        this.match(FHIRPathParser.T__27);\n\t        this.state = 116;\n\t        this._errHandler.sync(this);\n\t        _la = this._input.LA(1);\n\t        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << FHIRPathParser.T__3) | (1 << FHIRPathParser.T__4) | (1 << FHIRPathParser.T__15) | (1 << FHIRPathParser.T__16) | (1 << FHIRPathParser.T__21) | (1 << FHIRPathParser.T__22) | (1 << FHIRPathParser.T__27) | (1 << FHIRPathParser.T__29))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (FHIRPathParser.T__31 - 32)) | (1 << (FHIRPathParser.T__32 - 32)) | (1 << (FHIRPathParser.T__33 - 32)) | (1 << (FHIRPathParser.T__34 - 32)) | (1 << (FHIRPathParser.T__35 - 32)) | (1 << (FHIRPathParser.T__36 - 32)) | (1 << (FHIRPathParser.DATETIME - 32)) | (1 << (FHIRPathParser.TIME - 32)) | (1 << (FHIRPathParser.IDENTIFIER - 32)) | (1 << (FHIRPathParser.DELIMITEDIDENTIFIER - 32)) | (1 << (FHIRPathParser.STRING - 32)) | (1 << (FHIRPathParser.NUMBER - 32)))) !== 0)) {\n\t            this.state = 115;\n\t            this.paramList();\n\t        }\n\n\t        this.state = 118;\n\t        this.match(FHIRPathParser.T__28);\n\t    } catch (re) {\n\t    \tif(re instanceof antlr4.error.RecognitionException) {\n\t\t        localctx.exception = re;\n\t\t        this._errHandler.reportError(this, re);\n\t\t        this._errHandler.recover(this, re);\n\t\t    } else {\n\t\t    \tthrow re;\n\t\t    }\n\t    } finally {\n\t        this.exitRule();\n\t    }\n\t    return localctx;\n\t}\n\n\n\n\tparamList() {\n\t    let localctx = new ParamListContext(this, this._ctx, this.state);\n\t    this.enterRule(localctx, 14, FHIRPathParser.RULE_paramList);\n\t    var _la = 0; // Token type\n\t    try {\n\t        this.enterOuterAlt(localctx, 1);\n\t        this.state = 120;\n\t        this.expression(0);\n\t        this.state = 125;\n\t        this._errHandler.sync(this);\n\t        _la = this._input.LA(1);\n\t        while(_la===FHIRPathParser.T__37) {\n\t            this.state = 121;\n\t            this.match(FHIRPathParser.T__37);\n\t            this.state = 122;\n\t            this.expression(0);\n\t            this.state = 127;\n\t            this._errHandler.sync(this);\n\t            _la = this._input.LA(1);\n\t        }\n\t    } catch (re) {\n\t    \tif(re instanceof antlr4.error.RecognitionException) {\n\t\t        localctx.exception = re;\n\t\t        this._errHandler.reportError(this, re);\n\t\t        this._errHandler.recover(this, re);\n\t\t    } else {\n\t\t    \tthrow re;\n\t\t    }\n\t    } finally {\n\t        this.exitRule();\n\t    }\n\t    return localctx;\n\t}\n\n\n\n\tquantity() {\n\t    let localctx = new QuantityContext(this, this._ctx, this.state);\n\t    this.enterRule(localctx, 16, FHIRPathParser.RULE_quantity);\n\t    try {\n\t        this.enterOuterAlt(localctx, 1);\n\t        this.state = 128;\n\t        this.match(FHIRPathParser.NUMBER);\n\t        this.state = 130;\n\t        this._errHandler.sync(this);\n\t        var la_ = this._interp.adaptivePredict(this._input,9,this._ctx);\n\t        if(la_===1) {\n\t            this.state = 129;\n\t            this.unit();\n\n\t        }\n\t    } catch (re) {\n\t    \tif(re instanceof antlr4.error.RecognitionException) {\n\t\t        localctx.exception = re;\n\t\t        this._errHandler.reportError(this, re);\n\t\t        this._errHandler.recover(this, re);\n\t\t    } else {\n\t\t    \tthrow re;\n\t\t    }\n\t    } finally {\n\t        this.exitRule();\n\t    }\n\t    return localctx;\n\t}\n\n\n\n\tunit() {\n\t    let localctx = new UnitContext(this, this._ctx, this.state);\n\t    this.enterRule(localctx, 18, FHIRPathParser.RULE_unit);\n\t    try {\n\t        this.state = 135;\n\t        this._errHandler.sync(this);\n\t        switch(this._input.LA(1)) {\n\t        case FHIRPathParser.T__38:\n\t        case FHIRPathParser.T__39:\n\t        case FHIRPathParser.T__40:\n\t        case FHIRPathParser.T__41:\n\t        case FHIRPathParser.T__42:\n\t        case FHIRPathParser.T__43:\n\t        case FHIRPathParser.T__44:\n\t        case FHIRPathParser.T__45:\n\t            this.enterOuterAlt(localctx, 1);\n\t            this.state = 132;\n\t            this.dateTimePrecision();\n\t            break;\n\t        case FHIRPathParser.T__46:\n\t        case FHIRPathParser.T__47:\n\t        case FHIRPathParser.T__48:\n\t        case FHIRPathParser.T__49:\n\t        case FHIRPathParser.T__50:\n\t        case FHIRPathParser.T__51:\n\t        case FHIRPathParser.T__52:\n\t        case FHIRPathParser.T__53:\n\t            this.enterOuterAlt(localctx, 2);\n\t            this.state = 133;\n\t            this.pluralDateTimePrecision();\n\t            break;\n\t        case FHIRPathParser.STRING:\n\t            this.enterOuterAlt(localctx, 3);\n\t            this.state = 134;\n\t            this.match(FHIRPathParser.STRING);\n\t            break;\n\t        default:\n\t            throw new antlr4.error.NoViableAltException(this);\n\t        }\n\t    } catch (re) {\n\t    \tif(re instanceof antlr4.error.RecognitionException) {\n\t\t        localctx.exception = re;\n\t\t        this._errHandler.reportError(this, re);\n\t\t        this._errHandler.recover(this, re);\n\t\t    } else {\n\t\t    \tthrow re;\n\t\t    }\n\t    } finally {\n\t        this.exitRule();\n\t    }\n\t    return localctx;\n\t}\n\n\n\n\tdateTimePrecision() {\n\t    let localctx = new DateTimePrecisionContext(this, this._ctx, this.state);\n\t    this.enterRule(localctx, 20, FHIRPathParser.RULE_dateTimePrecision);\n\t    var _la = 0; // Token type\n\t    try {\n\t        this.enterOuterAlt(localctx, 1);\n\t        this.state = 137;\n\t        _la = this._input.LA(1);\n\t        if(!(((((_la - 39)) & ~0x1f) == 0 && ((1 << (_la - 39)) & ((1 << (FHIRPathParser.T__38 - 39)) | (1 << (FHIRPathParser.T__39 - 39)) | (1 << (FHIRPathParser.T__40 - 39)) | (1 << (FHIRPathParser.T__41 - 39)) | (1 << (FHIRPathParser.T__42 - 39)) | (1 << (FHIRPathParser.T__43 - 39)) | (1 << (FHIRPathParser.T__44 - 39)) | (1 << (FHIRPathParser.T__45 - 39)))) !== 0))) {\n\t        this._errHandler.recoverInline(this);\n\t        }\n\t        else {\n\t        \tthis._errHandler.reportMatch(this);\n\t            this.consume();\n\t        }\n\t    } catch (re) {\n\t    \tif(re instanceof antlr4.error.RecognitionException) {\n\t\t        localctx.exception = re;\n\t\t        this._errHandler.reportError(this, re);\n\t\t        this._errHandler.recover(this, re);\n\t\t    } else {\n\t\t    \tthrow re;\n\t\t    }\n\t    } finally {\n\t        this.exitRule();\n\t    }\n\t    return localctx;\n\t}\n\n\n\n\tpluralDateTimePrecision() {\n\t    let localctx = new PluralDateTimePrecisionContext(this, this._ctx, this.state);\n\t    this.enterRule(localctx, 22, FHIRPathParser.RULE_pluralDateTimePrecision);\n\t    var _la = 0; // Token type\n\t    try {\n\t        this.enterOuterAlt(localctx, 1);\n\t        this.state = 139;\n\t        _la = this._input.LA(1);\n\t        if(!(((((_la - 47)) & ~0x1f) == 0 && ((1 << (_la - 47)) & ((1 << (FHIRPathParser.T__46 - 47)) | (1 << (FHIRPathParser.T__47 - 47)) | (1 << (FHIRPathParser.T__48 - 47)) | (1 << (FHIRPathParser.T__49 - 47)) | (1 << (FHIRPathParser.T__50 - 47)) | (1 << (FHIRPathParser.T__51 - 47)) | (1 << (FHIRPathParser.T__52 - 47)) | (1 << (FHIRPathParser.T__53 - 47)))) !== 0))) {\n\t        this._errHandler.recoverInline(this);\n\t        }\n\t        else {\n\t        \tthis._errHandler.reportMatch(this);\n\t            this.consume();\n\t        }\n\t    } catch (re) {\n\t    \tif(re instanceof antlr4.error.RecognitionException) {\n\t\t        localctx.exception = re;\n\t\t        this._errHandler.reportError(this, re);\n\t\t        this._errHandler.recover(this, re);\n\t\t    } else {\n\t\t    \tthrow re;\n\t\t    }\n\t    } finally {\n\t        this.exitRule();\n\t    }\n\t    return localctx;\n\t}\n\n\n\n\ttypeSpecifier() {\n\t    let localctx = new TypeSpecifierContext(this, this._ctx, this.state);\n\t    this.enterRule(localctx, 24, FHIRPathParser.RULE_typeSpecifier);\n\t    try {\n\t        this.enterOuterAlt(localctx, 1);\n\t        this.state = 141;\n\t        this.qualifiedIdentifier();\n\t    } catch (re) {\n\t    \tif(re instanceof antlr4.error.RecognitionException) {\n\t\t        localctx.exception = re;\n\t\t        this._errHandler.reportError(this, re);\n\t\t        this._errHandler.recover(this, re);\n\t\t    } else {\n\t\t    \tthrow re;\n\t\t    }\n\t    } finally {\n\t        this.exitRule();\n\t    }\n\t    return localctx;\n\t}\n\n\n\n\tqualifiedIdentifier() {\n\t    let localctx = new QualifiedIdentifierContext(this, this._ctx, this.state);\n\t    this.enterRule(localctx, 26, FHIRPathParser.RULE_qualifiedIdentifier);\n\t    try {\n\t        this.enterOuterAlt(localctx, 1);\n\t        this.state = 143;\n\t        this.identifier();\n\t        this.state = 148;\n\t        this._errHandler.sync(this);\n\t        var _alt = this._interp.adaptivePredict(this._input,11,this._ctx)\n\t        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {\n\t            if(_alt===1) {\n\t                this.state = 144;\n\t                this.match(FHIRPathParser.T__0);\n\t                this.state = 145;\n\t                this.identifier(); \n\t            }\n\t            this.state = 150;\n\t            this._errHandler.sync(this);\n\t            _alt = this._interp.adaptivePredict(this._input,11,this._ctx);\n\t        }\n\n\t    } catch (re) {\n\t    \tif(re instanceof antlr4.error.RecognitionException) {\n\t\t        localctx.exception = re;\n\t\t        this._errHandler.reportError(this, re);\n\t\t        this._errHandler.recover(this, re);\n\t\t    } else {\n\t\t    \tthrow re;\n\t\t    }\n\t    } finally {\n\t        this.exitRule();\n\t    }\n\t    return localctx;\n\t}\n\n\n\n\tidentifier() {\n\t    let localctx = new IdentifierContext(this, this._ctx, this.state);\n\t    this.enterRule(localctx, 28, FHIRPathParser.RULE_identifier);\n\t    var _la = 0; // Token type\n\t    try {\n\t        this.enterOuterAlt(localctx, 1);\n\t        this.state = 151;\n\t        _la = this._input.LA(1);\n\t        if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << FHIRPathParser.T__15) | (1 << FHIRPathParser.T__16) | (1 << FHIRPathParser.T__21) | (1 << FHIRPathParser.T__22))) !== 0) || _la===FHIRPathParser.IDENTIFIER || _la===FHIRPathParser.DELIMITEDIDENTIFIER)) {\n\t        this._errHandler.recoverInline(this);\n\t        }\n\t        else {\n\t        \tthis._errHandler.reportMatch(this);\n\t            this.consume();\n\t        }\n\t    } catch (re) {\n\t    \tif(re instanceof antlr4.error.RecognitionException) {\n\t\t        localctx.exception = re;\n\t\t        this._errHandler.reportError(this, re);\n\t\t        this._errHandler.recover(this, re);\n\t\t    } else {\n\t\t    \tthrow re;\n\t\t    }\n\t    } finally {\n\t        this.exitRule();\n\t    }\n\t    return localctx;\n\t}\n\n\n}\n\nFHIRPathParser.EOF = antlr4.Token.EOF;\nFHIRPathParser.T__0 = 1;\nFHIRPathParser.T__1 = 2;\nFHIRPathParser.T__2 = 3;\nFHIRPathParser.T__3 = 4;\nFHIRPathParser.T__4 = 5;\nFHIRPathParser.T__5 = 6;\nFHIRPathParser.T__6 = 7;\nFHIRPathParser.T__7 = 8;\nFHIRPathParser.T__8 = 9;\nFHIRPathParser.T__9 = 10;\nFHIRPathParser.T__10 = 11;\nFHIRPathParser.T__11 = 12;\nFHIRPathParser.T__12 = 13;\nFHIRPathParser.T__13 = 14;\nFHIRPathParser.T__14 = 15;\nFHIRPathParser.T__15 = 16;\nFHIRPathParser.T__16 = 17;\nFHIRPathParser.T__17 = 18;\nFHIRPathParser.T__18 = 19;\nFHIRPathParser.T__19 = 20;\nFHIRPathParser.T__20 = 21;\nFHIRPathParser.T__21 = 22;\nFHIRPathParser.T__22 = 23;\nFHIRPathParser.T__23 = 24;\nFHIRPathParser.T__24 = 25;\nFHIRPathParser.T__25 = 26;\nFHIRPathParser.T__26 = 27;\nFHIRPathParser.T__27 = 28;\nFHIRPathParser.T__28 = 29;\nFHIRPathParser.T__29 = 30;\nFHIRPathParser.T__30 = 31;\nFHIRPathParser.T__31 = 32;\nFHIRPathParser.T__32 = 33;\nFHIRPathParser.T__33 = 34;\nFHIRPathParser.T__34 = 35;\nFHIRPathParser.T__35 = 36;\nFHIRPathParser.T__36 = 37;\nFHIRPathParser.T__37 = 38;\nFHIRPathParser.T__38 = 39;\nFHIRPathParser.T__39 = 40;\nFHIRPathParser.T__40 = 41;\nFHIRPathParser.T__41 = 42;\nFHIRPathParser.T__42 = 43;\nFHIRPathParser.T__43 = 44;\nFHIRPathParser.T__44 = 45;\nFHIRPathParser.T__45 = 46;\nFHIRPathParser.T__46 = 47;\nFHIRPathParser.T__47 = 48;\nFHIRPathParser.T__48 = 49;\nFHIRPathParser.T__49 = 50;\nFHIRPathParser.T__50 = 51;\nFHIRPathParser.T__51 = 52;\nFHIRPathParser.T__52 = 53;\nFHIRPathParser.T__53 = 54;\nFHIRPathParser.DATETIME = 55;\nFHIRPathParser.TIME = 56;\nFHIRPathParser.IDENTIFIER = 57;\nFHIRPathParser.DELIMITEDIDENTIFIER = 58;\nFHIRPathParser.STRING = 59;\nFHIRPathParser.NUMBER = 60;\nFHIRPathParser.WS = 61;\nFHIRPathParser.COMMENT = 62;\nFHIRPathParser.LINE_COMMENT = 63;\n\nFHIRPathParser.RULE_entireExpression = 0;\nFHIRPathParser.RULE_expression = 1;\nFHIRPathParser.RULE_term = 2;\nFHIRPathParser.RULE_literal = 3;\nFHIRPathParser.RULE_externalConstant = 4;\nFHIRPathParser.RULE_invocation = 5;\nFHIRPathParser.RULE_functn = 6;\nFHIRPathParser.RULE_paramList = 7;\nFHIRPathParser.RULE_quantity = 8;\nFHIRPathParser.RULE_unit = 9;\nFHIRPathParser.RULE_dateTimePrecision = 10;\nFHIRPathParser.RULE_pluralDateTimePrecision = 11;\nFHIRPathParser.RULE_typeSpecifier = 12;\nFHIRPathParser.RULE_qualifiedIdentifier = 13;\nFHIRPathParser.RULE_identifier = 14;\n\nclass EntireExpressionContext extends antlr4.ParserRuleContext {\n\n    constructor(parser, parent, invokingState) {\n        if(parent===undefined) {\n            parent = null;\n        }\n        if(invokingState===undefined || invokingState===null) {\n            invokingState = -1;\n        }\n        super(parent, invokingState);\n        this.parser = parser;\n        this.ruleIndex = FHIRPathParser.RULE_entireExpression;\n    }\n\n\texpression() {\n\t    return this.getTypedRuleContext(ExpressionContext,0);\n\t};\n\n\tEOF() {\n\t    return this.getToken(FHIRPathParser.EOF, 0);\n\t};\n\n\tenterRule(listener) {\n\t    if(listener instanceof FHIRPathListener ) {\n\t        listener.enterEntireExpression(this);\n\t\t}\n\t}\n\n\texitRule(listener) {\n\t    if(listener instanceof FHIRPathListener ) {\n\t        listener.exitEntireExpression(this);\n\t\t}\n\t}\n\n\n}\n\n\n\nclass ExpressionContext extends antlr4.ParserRuleContext {\n\n    constructor(parser, parent, invokingState) {\n        if(parent===undefined) {\n            parent = null;\n        }\n        if(invokingState===undefined || invokingState===null) {\n            invokingState = -1;\n        }\n        super(parent, invokingState);\n        this.parser = parser;\n        this.ruleIndex = FHIRPathParser.RULE_expression;\n    }\n\n\n\t \n\t\tcopyFrom(ctx) {\n\t\t\tsuper.copyFrom(ctx);\n\t\t}\n\n}\n\n\nclass IndexerExpressionContext extends ExpressionContext {\n\n    constructor(parser, ctx) {\n        super(parser);\n        super.copyFrom(ctx);\n    }\n\n\texpression = function(i) {\n\t    if(i===undefined) {\n\t        i = null;\n\t    }\n\t    if(i===null) {\n\t        return this.getTypedRuleContexts(ExpressionContext);\n\t    } else {\n\t        return this.getTypedRuleContext(ExpressionContext,i);\n\t    }\n\t};\n\n\tenterRule(listener) {\n\t    if(listener instanceof FHIRPathListener ) {\n\t        listener.enterIndexerExpression(this);\n\t\t}\n\t}\n\n\texitRule(listener) {\n\t    if(listener instanceof FHIRPathListener ) {\n\t        listener.exitIndexerExpression(this);\n\t\t}\n\t}\n\n\n}\n\nFHIRPathParser.IndexerExpressionContext = IndexerExpressionContext;\n\nclass PolarityExpressionContext extends ExpressionContext {\n\n    constructor(parser, ctx) {\n        super(parser);\n        super.copyFrom(ctx);\n    }\n\n\texpression() {\n\t    return this.getTypedRuleContext(ExpressionContext,0);\n\t};\n\n\tenterRule(listener) {\n\t    if(listener instanceof FHIRPathListener ) {\n\t        listener.enterPolarityExpression(this);\n\t\t}\n\t}\n\n\texitRule(listener) {\n\t    if(listener instanceof FHIRPathListener ) {\n\t        listener.exitPolarityExpression(this);\n\t\t}\n\t}\n\n\n}\n\nFHIRPathParser.PolarityExpressionContext = PolarityExpressionContext;\n\nclass AdditiveExpressionContext extends ExpressionContext {\n\n    constructor(parser, ctx) {\n        super(parser);\n        super.copyFrom(ctx);\n    }\n\n\texpression = function(i) {\n\t    if(i===undefined) {\n\t        i = null;\n\t    }\n\t    if(i===null) {\n\t        return this.getTypedRuleContexts(ExpressionContext);\n\t    } else {\n\t        return this.getTypedRuleContext(ExpressionContext,i);\n\t    }\n\t};\n\n\tenterRule(listener) {\n\t    if(listener instanceof FHIRPathListener ) {\n\t        listener.enterAdditiveExpression(this);\n\t\t}\n\t}\n\n\texitRule(listener) {\n\t    if(listener instanceof FHIRPathListener ) {\n\t        listener.exitAdditiveExpression(this);\n\t\t}\n\t}\n\n\n}\n\nFHIRPathParser.AdditiveExpressionContext = AdditiveExpressionContext;\n\nclass MultiplicativeExpressionContext extends ExpressionContext {\n\n    constructor(parser, ctx) {\n        super(parser);\n        super.copyFrom(ctx);\n    }\n\n\texpression = function(i) {\n\t    if(i===undefined) {\n\t        i = null;\n\t    }\n\t    if(i===null) {\n\t        return this.getTypedRuleContexts(ExpressionContext);\n\t    } else {\n\t        return this.getTypedRuleContext(ExpressionContext,i);\n\t    }\n\t};\n\n\tenterRule(listener) {\n\t    if(listener instanceof FHIRPathListener ) {\n\t        listener.enterMultiplicativeExpression(this);\n\t\t}\n\t}\n\n\texitRule(listener) {\n\t    if(listener instanceof FHIRPathListener ) {\n\t        listener.exitMultiplicativeExpression(this);\n\t\t}\n\t}\n\n\n}\n\nFHIRPathParser.MultiplicativeExpressionContext = MultiplicativeExpressionContext;\n\nclass UnionExpressionContext extends ExpressionContext {\n\n    constructor(parser, ctx) {\n        super(parser);\n        super.copyFrom(ctx);\n    }\n\n\texpression = function(i) {\n\t    if(i===undefined) {\n\t        i = null;\n\t    }\n\t    if(i===null) {\n\t        return this.getTypedRuleContexts(ExpressionContext);\n\t    } else {\n\t        return this.getTypedRuleContext(ExpressionContext,i);\n\t    }\n\t};\n\n\tenterRule(listener) {\n\t    if(listener instanceof FHIRPathListener ) {\n\t        listener.enterUnionExpression(this);\n\t\t}\n\t}\n\n\texitRule(listener) {\n\t    if(listener instanceof FHIRPathListener ) {\n\t        listener.exitUnionExpression(this);\n\t\t}\n\t}\n\n\n}\n\nFHIRPathParser.UnionExpressionContext = UnionExpressionContext;\n\nclass OrExpressionContext extends ExpressionContext {\n\n    constructor(parser, ctx) {\n        super(parser);\n        super.copyFrom(ctx);\n    }\n\n\texpression = function(i) {\n\t    if(i===undefined) {\n\t        i = null;\n\t    }\n\t    if(i===null) {\n\t        return this.getTypedRuleContexts(ExpressionContext);\n\t    } else {\n\t        return this.getTypedRuleContext(ExpressionContext,i);\n\t    }\n\t};\n\n\tenterRule(listener) {\n\t    if(listener instanceof FHIRPathListener ) {\n\t        listener.enterOrExpression(this);\n\t\t}\n\t}\n\n\texitRule(listener) {\n\t    if(listener instanceof FHIRPathListener ) {\n\t        listener.exitOrExpression(this);\n\t\t}\n\t}\n\n\n}\n\nFHIRPathParser.OrExpressionContext = OrExpressionContext;\n\nclass AndExpressionContext extends ExpressionContext {\n\n    constructor(parser, ctx) {\n        super(parser);\n        super.copyFrom(ctx);\n    }\n\n\texpression = function(i) {\n\t    if(i===undefined) {\n\t        i = null;\n\t    }\n\t    if(i===null) {\n\t        return this.getTypedRuleContexts(ExpressionContext);\n\t    } else {\n\t        return this.getTypedRuleContext(ExpressionContext,i);\n\t    }\n\t};\n\n\tenterRule(listener) {\n\t    if(listener instanceof FHIRPathListener ) {\n\t        listener.enterAndExpression(this);\n\t\t}\n\t}\n\n\texitRule(listener) {\n\t    if(listener instanceof FHIRPathListener ) {\n\t        listener.exitAndExpression(this);\n\t\t}\n\t}\n\n\n}\n\nFHIRPathParser.AndExpressionContext = AndExpressionContext;\n\nclass MembershipExpressionContext extends ExpressionContext {\n\n    constructor(parser, ctx) {\n        super(parser);\n        super.copyFrom(ctx);\n    }\n\n\texpression = function(i) {\n\t    if(i===undefined) {\n\t        i = null;\n\t    }\n\t    if(i===null) {\n\t        return this.getTypedRuleContexts(ExpressionContext);\n\t    } else {\n\t        return this.getTypedRuleContext(ExpressionContext,i);\n\t    }\n\t};\n\n\tenterRule(listener) {\n\t    if(listener instanceof FHIRPathListener ) {\n\t        listener.enterMembershipExpression(this);\n\t\t}\n\t}\n\n\texitRule(listener) {\n\t    if(listener instanceof FHIRPathListener ) {\n\t        listener.exitMembershipExpression(this);\n\t\t}\n\t}\n\n\n}\n\nFHIRPathParser.MembershipExpressionContext = MembershipExpressionContext;\n\nclass InequalityExpressionContext extends ExpressionContext {\n\n    constructor(parser, ctx) {\n        super(parser);\n        super.copyFrom(ctx);\n    }\n\n\texpression = function(i) {\n\t    if(i===undefined) {\n\t        i = null;\n\t    }\n\t    if(i===null) {\n\t        return this.getTypedRuleContexts(ExpressionContext);\n\t    } else {\n\t        return this.getTypedRuleContext(ExpressionContext,i);\n\t    }\n\t};\n\n\tenterRule(listener) {\n\t    if(listener instanceof FHIRPathListener ) {\n\t        listener.enterInequalityExpression(this);\n\t\t}\n\t}\n\n\texitRule(listener) {\n\t    if(listener instanceof FHIRPathListener ) {\n\t        listener.exitInequalityExpression(this);\n\t\t}\n\t}\n\n\n}\n\nFHIRPathParser.InequalityExpressionContext = InequalityExpressionContext;\n\nclass InvocationExpressionContext extends ExpressionContext {\n\n    constructor(parser, ctx) {\n        super(parser);\n        super.copyFrom(ctx);\n    }\n\n\texpression() {\n\t    return this.getTypedRuleContext(ExpressionContext,0);\n\t};\n\n\tinvocation() {\n\t    return this.getTypedRuleContext(InvocationContext,0);\n\t};\n\n\tenterRule(listener) {\n\t    if(listener instanceof FHIRPathListener ) {\n\t        listener.enterInvocationExpression(this);\n\t\t}\n\t}\n\n\texitRule(listener) {\n\t    if(listener instanceof FHIRPathListener ) {\n\t        listener.exitInvocationExpression(this);\n\t\t}\n\t}\n\n\n}\n\nFHIRPathParser.InvocationExpressionContext = InvocationExpressionContext;\n\nclass EqualityExpressionContext extends ExpressionContext {\n\n    constructor(parser, ctx) {\n        super(parser);\n        super.copyFrom(ctx);\n    }\n\n\texpression = function(i) {\n\t    if(i===undefined) {\n\t        i = null;\n\t    }\n\t    if(i===null) {\n\t        return this.getTypedRuleContexts(ExpressionContext);\n\t    } else {\n\t        return this.getTypedRuleContext(ExpressionContext,i);\n\t    }\n\t};\n\n\tenterRule(listener) {\n\t    if(listener instanceof FHIRPathListener ) {\n\t        listener.enterEqualityExpression(this);\n\t\t}\n\t}\n\n\texitRule(listener) {\n\t    if(listener instanceof FHIRPathListener ) {\n\t        listener.exitEqualityExpression(this);\n\t\t}\n\t}\n\n\n}\n\nFHIRPathParser.EqualityExpressionContext = EqualityExpressionContext;\n\nclass ImpliesExpressionContext extends ExpressionContext {\n\n    constructor(parser, ctx) {\n        super(parser);\n        super.copyFrom(ctx);\n    }\n\n\texpression = function(i) {\n\t    if(i===undefined) {\n\t        i = null;\n\t    }\n\t    if(i===null) {\n\t        return this.getTypedRuleContexts(ExpressionContext);\n\t    } else {\n\t        return this.getTypedRuleContext(ExpressionContext,i);\n\t    }\n\t};\n\n\tenterRule(listener) {\n\t    if(listener instanceof FHIRPathListener ) {\n\t        listener.enterImpliesExpression(this);\n\t\t}\n\t}\n\n\texitRule(listener) {\n\t    if(listener instanceof FHIRPathListener ) {\n\t        listener.exitImpliesExpression(this);\n\t\t}\n\t}\n\n\n}\n\nFHIRPathParser.ImpliesExpressionContext = ImpliesExpressionContext;\n\nclass TermExpressionContext extends ExpressionContext {\n\n    constructor(parser, ctx) {\n        super(parser);\n        super.copyFrom(ctx);\n    }\n\n\tterm() {\n\t    return this.getTypedRuleContext(TermContext,0);\n\t};\n\n\tenterRule(listener) {\n\t    if(listener instanceof FHIRPathListener ) {\n\t        listener.enterTermExpression(this);\n\t\t}\n\t}\n\n\texitRule(listener) {\n\t    if(listener instanceof FHIRPathListener ) {\n\t        listener.exitTermExpression(this);\n\t\t}\n\t}\n\n\n}\n\nFHIRPathParser.TermExpressionContext = TermExpressionContext;\n\nclass TypeExpressionContext extends ExpressionContext {\n\n    constructor(parser, ctx) {\n        super(parser);\n        super.copyFrom(ctx);\n    }\n\n\texpression() {\n\t    return this.getTypedRuleContext(ExpressionContext,0);\n\t};\n\n\ttypeSpecifier() {\n\t    return this.getTypedRuleContext(TypeSpecifierContext,0);\n\t};\n\n\tenterRule(listener) {\n\t    if(listener instanceof FHIRPathListener ) {\n\t        listener.enterTypeExpression(this);\n\t\t}\n\t}\n\n\texitRule(listener) {\n\t    if(listener instanceof FHIRPathListener ) {\n\t        listener.exitTypeExpression(this);\n\t\t}\n\t}\n\n\n}\n\nFHIRPathParser.TypeExpressionContext = TypeExpressionContext;\n\nclass TermContext extends antlr4.ParserRuleContext {\n\n    constructor(parser, parent, invokingState) {\n        if(parent===undefined) {\n            parent = null;\n        }\n        if(invokingState===undefined || invokingState===null) {\n            invokingState = -1;\n        }\n        super(parent, invokingState);\n        this.parser = parser;\n        this.ruleIndex = FHIRPathParser.RULE_term;\n    }\n\n\n\t \n\t\tcopyFrom(ctx) {\n\t\t\tsuper.copyFrom(ctx);\n\t\t}\n\n}\n\n\nclass ExternalConstantTermContext extends TermContext {\n\n    constructor(parser, ctx) {\n        super(parser);\n        super.copyFrom(ctx);\n    }\n\n\texternalConstant() {\n\t    return this.getTypedRuleContext(ExternalConstantContext,0);\n\t};\n\n\tenterRule(listener) {\n\t    if(listener instanceof FHIRPathListener ) {\n\t        listener.enterExternalConstantTerm(this);\n\t\t}\n\t}\n\n\texitRule(listener) {\n\t    if(listener instanceof FHIRPathListener ) {\n\t        listener.exitExternalConstantTerm(this);\n\t\t}\n\t}\n\n\n}\n\nFHIRPathParser.ExternalConstantTermContext = ExternalConstantTermContext;\n\nclass LiteralTermContext extends TermContext {\n\n    constructor(parser, ctx) {\n        super(parser);\n        super.copyFrom(ctx);\n    }\n\n\tliteral() {\n\t    return this.getTypedRuleContext(LiteralContext,0);\n\t};\n\n\tenterRule(listener) {\n\t    if(listener instanceof FHIRPathListener ) {\n\t        listener.enterLiteralTerm(this);\n\t\t}\n\t}\n\n\texitRule(listener) {\n\t    if(listener instanceof FHIRPathListener ) {\n\t        listener.exitLiteralTerm(this);\n\t\t}\n\t}\n\n\n}\n\nFHIRPathParser.LiteralTermContext = LiteralTermContext;\n\nclass ParenthesizedTermContext extends TermContext {\n\n    constructor(parser, ctx) {\n        super(parser);\n        super.copyFrom(ctx);\n    }\n\n\texpression() {\n\t    return this.getTypedRuleContext(ExpressionContext,0);\n\t};\n\n\tenterRule(listener) {\n\t    if(listener instanceof FHIRPathListener ) {\n\t        listener.enterParenthesizedTerm(this);\n\t\t}\n\t}\n\n\texitRule(listener) {\n\t    if(listener instanceof FHIRPathListener ) {\n\t        listener.exitParenthesizedTerm(this);\n\t\t}\n\t}\n\n\n}\n\nFHIRPathParser.ParenthesizedTermContext = ParenthesizedTermContext;\n\nclass InvocationTermContext extends TermContext {\n\n    constructor(parser, ctx) {\n        super(parser);\n        super.copyFrom(ctx);\n    }\n\n\tinvocation() {\n\t    return this.getTypedRuleContext(InvocationContext,0);\n\t};\n\n\tenterRule(listener) {\n\t    if(listener instanceof FHIRPathListener ) {\n\t        listener.enterInvocationTerm(this);\n\t\t}\n\t}\n\n\texitRule(listener) {\n\t    if(listener instanceof FHIRPathListener ) {\n\t        listener.exitInvocationTerm(this);\n\t\t}\n\t}\n\n\n}\n\nFHIRPathParser.InvocationTermContext = InvocationTermContext;\n\nclass LiteralContext extends antlr4.ParserRuleContext {\n\n    constructor(parser, parent, invokingState) {\n        if(parent===undefined) {\n            parent = null;\n        }\n        if(invokingState===undefined || invokingState===null) {\n            invokingState = -1;\n        }\n        super(parent, invokingState);\n        this.parser = parser;\n        this.ruleIndex = FHIRPathParser.RULE_literal;\n    }\n\n\n\t \n\t\tcopyFrom(ctx) {\n\t\t\tsuper.copyFrom(ctx);\n\t\t}\n\n}\n\n\nclass TimeLiteralContext extends LiteralContext {\n\n    constructor(parser, ctx) {\n        super(parser);\n        super.copyFrom(ctx);\n    }\n\n\tTIME() {\n\t    return this.getToken(FHIRPathParser.TIME, 0);\n\t};\n\n\tenterRule(listener) {\n\t    if(listener instanceof FHIRPathListener ) {\n\t        listener.enterTimeLiteral(this);\n\t\t}\n\t}\n\n\texitRule(listener) {\n\t    if(listener instanceof FHIRPathListener ) {\n\t        listener.exitTimeLiteral(this);\n\t\t}\n\t}\n\n\n}\n\nFHIRPathParser.TimeLiteralContext = TimeLiteralContext;\n\nclass NullLiteralContext extends LiteralContext {\n\n    constructor(parser, ctx) {\n        super(parser);\n        super.copyFrom(ctx);\n    }\n\n\n\tenterRule(listener) {\n\t    if(listener instanceof FHIRPathListener ) {\n\t        listener.enterNullLiteral(this);\n\t\t}\n\t}\n\n\texitRule(listener) {\n\t    if(listener instanceof FHIRPathListener ) {\n\t        listener.exitNullLiteral(this);\n\t\t}\n\t}\n\n\n}\n\nFHIRPathParser.NullLiteralContext = NullLiteralContext;\n\nclass DateTimeLiteralContext extends LiteralContext {\n\n    constructor(parser, ctx) {\n        super(parser);\n        super.copyFrom(ctx);\n    }\n\n\tDATETIME() {\n\t    return this.getToken(FHIRPathParser.DATETIME, 0);\n\t};\n\n\tenterRule(listener) {\n\t    if(listener instanceof FHIRPathListener ) {\n\t        listener.enterDateTimeLiteral(this);\n\t\t}\n\t}\n\n\texitRule(listener) {\n\t    if(listener instanceof FHIRPathListener ) {\n\t        listener.exitDateTimeLiteral(this);\n\t\t}\n\t}\n\n\n}\n\nFHIRPathParser.DateTimeLiteralContext = DateTimeLiteralContext;\n\nclass StringLiteralContext extends LiteralContext {\n\n    constructor(parser, ctx) {\n        super(parser);\n        super.copyFrom(ctx);\n    }\n\n\tSTRING() {\n\t    return this.getToken(FHIRPathParser.STRING, 0);\n\t};\n\n\tenterRule(listener) {\n\t    if(listener instanceof FHIRPathListener ) {\n\t        listener.enterStringLiteral(this);\n\t\t}\n\t}\n\n\texitRule(listener) {\n\t    if(listener instanceof FHIRPathListener ) {\n\t        listener.exitStringLiteral(this);\n\t\t}\n\t}\n\n\n}\n\nFHIRPathParser.StringLiteralContext = StringLiteralContext;\n\nclass BooleanLiteralContext extends LiteralContext {\n\n    constructor(parser, ctx) {\n        super(parser);\n        super.copyFrom(ctx);\n    }\n\n\n\tenterRule(listener) {\n\t    if(listener instanceof FHIRPathListener ) {\n\t        listener.enterBooleanLiteral(this);\n\t\t}\n\t}\n\n\texitRule(listener) {\n\t    if(listener instanceof FHIRPathListener ) {\n\t        listener.exitBooleanLiteral(this);\n\t\t}\n\t}\n\n\n}\n\nFHIRPathParser.BooleanLiteralContext = BooleanLiteralContext;\n\nclass NumberLiteralContext extends LiteralContext {\n\n    constructor(parser, ctx) {\n        super(parser);\n        super.copyFrom(ctx);\n    }\n\n\tNUMBER() {\n\t    return this.getToken(FHIRPathParser.NUMBER, 0);\n\t};\n\n\tenterRule(listener) {\n\t    if(listener instanceof FHIRPathListener ) {\n\t        listener.enterNumberLiteral(this);\n\t\t}\n\t}\n\n\texitRule(listener) {\n\t    if(listener instanceof FHIRPathListener ) {\n\t        listener.exitNumberLiteral(this);\n\t\t}\n\t}\n\n\n}\n\nFHIRPathParser.NumberLiteralContext = NumberLiteralContext;\n\nclass QuantityLiteralContext extends LiteralContext {\n\n    constructor(parser, ctx) {\n        super(parser);\n        super.copyFrom(ctx);\n    }\n\n\tquantity() {\n\t    return this.getTypedRuleContext(QuantityContext,0);\n\t};\n\n\tenterRule(listener) {\n\t    if(listener instanceof FHIRPathListener ) {\n\t        listener.enterQuantityLiteral(this);\n\t\t}\n\t}\n\n\texitRule(listener) {\n\t    if(listener instanceof FHIRPathListener ) {\n\t        listener.exitQuantityLiteral(this);\n\t\t}\n\t}\n\n\n}\n\nFHIRPathParser.QuantityLiteralContext = QuantityLiteralContext;\n\nclass ExternalConstantContext extends antlr4.ParserRuleContext {\n\n    constructor(parser, parent, invokingState) {\n        if(parent===undefined) {\n            parent = null;\n        }\n        if(invokingState===undefined || invokingState===null) {\n            invokingState = -1;\n        }\n        super(parent, invokingState);\n        this.parser = parser;\n        this.ruleIndex = FHIRPathParser.RULE_externalConstant;\n    }\n\n\tidentifier() {\n\t    return this.getTypedRuleContext(IdentifierContext,0);\n\t};\n\n\tSTRING() {\n\t    return this.getToken(FHIRPathParser.STRING, 0);\n\t};\n\n\tenterRule(listener) {\n\t    if(listener instanceof FHIRPathListener ) {\n\t        listener.enterExternalConstant(this);\n\t\t}\n\t}\n\n\texitRule(listener) {\n\t    if(listener instanceof FHIRPathListener ) {\n\t        listener.exitExternalConstant(this);\n\t\t}\n\t}\n\n\n}\n\n\n\nclass InvocationContext extends antlr4.ParserRuleContext {\n\n    constructor(parser, parent, invokingState) {\n        if(parent===undefined) {\n            parent = null;\n        }\n        if(invokingState===undefined || invokingState===null) {\n            invokingState = -1;\n        }\n        super(parent, invokingState);\n        this.parser = parser;\n        this.ruleIndex = FHIRPathParser.RULE_invocation;\n    }\n\n\n\t \n\t\tcopyFrom(ctx) {\n\t\t\tsuper.copyFrom(ctx);\n\t\t}\n\n}\n\n\nclass TotalInvocationContext extends InvocationContext {\n\n    constructor(parser, ctx) {\n        super(parser);\n        super.copyFrom(ctx);\n    }\n\n\n\tenterRule(listener) {\n\t    if(listener instanceof FHIRPathListener ) {\n\t        listener.enterTotalInvocation(this);\n\t\t}\n\t}\n\n\texitRule(listener) {\n\t    if(listener instanceof FHIRPathListener ) {\n\t        listener.exitTotalInvocation(this);\n\t\t}\n\t}\n\n\n}\n\nFHIRPathParser.TotalInvocationContext = TotalInvocationContext;\n\nclass ThisInvocationContext extends InvocationContext {\n\n    constructor(parser, ctx) {\n        super(parser);\n        super.copyFrom(ctx);\n    }\n\n\n\tenterRule(listener) {\n\t    if(listener instanceof FHIRPathListener ) {\n\t        listener.enterThisInvocation(this);\n\t\t}\n\t}\n\n\texitRule(listener) {\n\t    if(listener instanceof FHIRPathListener ) {\n\t        listener.exitThisInvocation(this);\n\t\t}\n\t}\n\n\n}\n\nFHIRPathParser.ThisInvocationContext = ThisInvocationContext;\n\nclass IndexInvocationContext extends InvocationContext {\n\n    constructor(parser, ctx) {\n        super(parser);\n        super.copyFrom(ctx);\n    }\n\n\n\tenterRule(listener) {\n\t    if(listener instanceof FHIRPathListener ) {\n\t        listener.enterIndexInvocation(this);\n\t\t}\n\t}\n\n\texitRule(listener) {\n\t    if(listener instanceof FHIRPathListener ) {\n\t        listener.exitIndexInvocation(this);\n\t\t}\n\t}\n\n\n}\n\nFHIRPathParser.IndexInvocationContext = IndexInvocationContext;\n\nclass FunctionInvocationContext extends InvocationContext {\n\n    constructor(parser, ctx) {\n        super(parser);\n        super.copyFrom(ctx);\n    }\n\n\tfunctn() {\n\t    return this.getTypedRuleContext(FunctnContext,0);\n\t};\n\n\tenterRule(listener) {\n\t    if(listener instanceof FHIRPathListener ) {\n\t        listener.enterFunctionInvocation(this);\n\t\t}\n\t}\n\n\texitRule(listener) {\n\t    if(listener instanceof FHIRPathListener ) {\n\t        listener.exitFunctionInvocation(this);\n\t\t}\n\t}\n\n\n}\n\nFHIRPathParser.FunctionInvocationContext = FunctionInvocationContext;\n\nclass MemberInvocationContext extends InvocationContext {\n\n    constructor(parser, ctx) {\n        super(parser);\n        super.copyFrom(ctx);\n    }\n\n\tidentifier() {\n\t    return this.getTypedRuleContext(IdentifierContext,0);\n\t};\n\n\tenterRule(listener) {\n\t    if(listener instanceof FHIRPathListener ) {\n\t        listener.enterMemberInvocation(this);\n\t\t}\n\t}\n\n\texitRule(listener) {\n\t    if(listener instanceof FHIRPathListener ) {\n\t        listener.exitMemberInvocation(this);\n\t\t}\n\t}\n\n\n}\n\nFHIRPathParser.MemberInvocationContext = MemberInvocationContext;\n\nclass FunctnContext extends antlr4.ParserRuleContext {\n\n    constructor(parser, parent, invokingState) {\n        if(parent===undefined) {\n            parent = null;\n        }\n        if(invokingState===undefined || invokingState===null) {\n            invokingState = -1;\n        }\n        super(parent, invokingState);\n        this.parser = parser;\n        this.ruleIndex = FHIRPathParser.RULE_functn;\n    }\n\n\tidentifier() {\n\t    return this.getTypedRuleContext(IdentifierContext,0);\n\t};\n\n\tparamList() {\n\t    return this.getTypedRuleContext(ParamListContext,0);\n\t};\n\n\tenterRule(listener) {\n\t    if(listener instanceof FHIRPathListener ) {\n\t        listener.enterFunctn(this);\n\t\t}\n\t}\n\n\texitRule(listener) {\n\t    if(listener instanceof FHIRPathListener ) {\n\t        listener.exitFunctn(this);\n\t\t}\n\t}\n\n\n}\n\n\n\nclass ParamListContext extends antlr4.ParserRuleContext {\n\n    constructor(parser, parent, invokingState) {\n        if(parent===undefined) {\n            parent = null;\n        }\n        if(invokingState===undefined || invokingState===null) {\n            invokingState = -1;\n        }\n        super(parent, invokingState);\n        this.parser = parser;\n        this.ruleIndex = FHIRPathParser.RULE_paramList;\n    }\n\n\texpression = function(i) {\n\t    if(i===undefined) {\n\t        i = null;\n\t    }\n\t    if(i===null) {\n\t        return this.getTypedRuleContexts(ExpressionContext);\n\t    } else {\n\t        return this.getTypedRuleContext(ExpressionContext,i);\n\t    }\n\t};\n\n\tenterRule(listener) {\n\t    if(listener instanceof FHIRPathListener ) {\n\t        listener.enterParamList(this);\n\t\t}\n\t}\n\n\texitRule(listener) {\n\t    if(listener instanceof FHIRPathListener ) {\n\t        listener.exitParamList(this);\n\t\t}\n\t}\n\n\n}\n\n\n\nclass QuantityContext extends antlr4.ParserRuleContext {\n\n    constructor(parser, parent, invokingState) {\n        if(parent===undefined) {\n            parent = null;\n        }\n        if(invokingState===undefined || invokingState===null) {\n            invokingState = -1;\n        }\n        super(parent, invokingState);\n        this.parser = parser;\n        this.ruleIndex = FHIRPathParser.RULE_quantity;\n    }\n\n\tNUMBER() {\n\t    return this.getToken(FHIRPathParser.NUMBER, 0);\n\t};\n\n\tunit() {\n\t    return this.getTypedRuleContext(UnitContext,0);\n\t};\n\n\tenterRule(listener) {\n\t    if(listener instanceof FHIRPathListener ) {\n\t        listener.enterQuantity(this);\n\t\t}\n\t}\n\n\texitRule(listener) {\n\t    if(listener instanceof FHIRPathListener ) {\n\t        listener.exitQuantity(this);\n\t\t}\n\t}\n\n\n}\n\n\n\nclass UnitContext extends antlr4.ParserRuleContext {\n\n    constructor(parser, parent, invokingState) {\n        if(parent===undefined) {\n            parent = null;\n        }\n        if(invokingState===undefined || invokingState===null) {\n            invokingState = -1;\n        }\n        super(parent, invokingState);\n        this.parser = parser;\n        this.ruleIndex = FHIRPathParser.RULE_unit;\n    }\n\n\tdateTimePrecision() {\n\t    return this.getTypedRuleContext(DateTimePrecisionContext,0);\n\t};\n\n\tpluralDateTimePrecision() {\n\t    return this.getTypedRuleContext(PluralDateTimePrecisionContext,0);\n\t};\n\n\tSTRING() {\n\t    return this.getToken(FHIRPathParser.STRING, 0);\n\t};\n\n\tenterRule(listener) {\n\t    if(listener instanceof FHIRPathListener ) {\n\t        listener.enterUnit(this);\n\t\t}\n\t}\n\n\texitRule(listener) {\n\t    if(listener instanceof FHIRPathListener ) {\n\t        listener.exitUnit(this);\n\t\t}\n\t}\n\n\n}\n\n\n\nclass DateTimePrecisionContext extends antlr4.ParserRuleContext {\n\n    constructor(parser, parent, invokingState) {\n        if(parent===undefined) {\n            parent = null;\n        }\n        if(invokingState===undefined || invokingState===null) {\n            invokingState = -1;\n        }\n        super(parent, invokingState);\n        this.parser = parser;\n        this.ruleIndex = FHIRPathParser.RULE_dateTimePrecision;\n    }\n\n\n\tenterRule(listener) {\n\t    if(listener instanceof FHIRPathListener ) {\n\t        listener.enterDateTimePrecision(this);\n\t\t}\n\t}\n\n\texitRule(listener) {\n\t    if(listener instanceof FHIRPathListener ) {\n\t        listener.exitDateTimePrecision(this);\n\t\t}\n\t}\n\n\n}\n\n\n\nclass PluralDateTimePrecisionContext extends antlr4.ParserRuleContext {\n\n    constructor(parser, parent, invokingState) {\n        if(parent===undefined) {\n            parent = null;\n        }\n        if(invokingState===undefined || invokingState===null) {\n            invokingState = -1;\n        }\n        super(parent, invokingState);\n        this.parser = parser;\n        this.ruleIndex = FHIRPathParser.RULE_pluralDateTimePrecision;\n    }\n\n\n\tenterRule(listener) {\n\t    if(listener instanceof FHIRPathListener ) {\n\t        listener.enterPluralDateTimePrecision(this);\n\t\t}\n\t}\n\n\texitRule(listener) {\n\t    if(listener instanceof FHIRPathListener ) {\n\t        listener.exitPluralDateTimePrecision(this);\n\t\t}\n\t}\n\n\n}\n\n\n\nclass TypeSpecifierContext extends antlr4.ParserRuleContext {\n\n    constructor(parser, parent, invokingState) {\n        if(parent===undefined) {\n            parent = null;\n        }\n        if(invokingState===undefined || invokingState===null) {\n            invokingState = -1;\n        }\n        super(parent, invokingState);\n        this.parser = parser;\n        this.ruleIndex = FHIRPathParser.RULE_typeSpecifier;\n    }\n\n\tqualifiedIdentifier() {\n\t    return this.getTypedRuleContext(QualifiedIdentifierContext,0);\n\t};\n\n\tenterRule(listener) {\n\t    if(listener instanceof FHIRPathListener ) {\n\t        listener.enterTypeSpecifier(this);\n\t\t}\n\t}\n\n\texitRule(listener) {\n\t    if(listener instanceof FHIRPathListener ) {\n\t        listener.exitTypeSpecifier(this);\n\t\t}\n\t}\n\n\n}\n\n\n\nclass QualifiedIdentifierContext extends antlr4.ParserRuleContext {\n\n    constructor(parser, parent, invokingState) {\n        if(parent===undefined) {\n            parent = null;\n        }\n        if(invokingState===undefined || invokingState===null) {\n            invokingState = -1;\n        }\n        super(parent, invokingState);\n        this.parser = parser;\n        this.ruleIndex = FHIRPathParser.RULE_qualifiedIdentifier;\n    }\n\n\tidentifier = function(i) {\n\t    if(i===undefined) {\n\t        i = null;\n\t    }\n\t    if(i===null) {\n\t        return this.getTypedRuleContexts(IdentifierContext);\n\t    } else {\n\t        return this.getTypedRuleContext(IdentifierContext,i);\n\t    }\n\t};\n\n\tenterRule(listener) {\n\t    if(listener instanceof FHIRPathListener ) {\n\t        listener.enterQualifiedIdentifier(this);\n\t\t}\n\t}\n\n\texitRule(listener) {\n\t    if(listener instanceof FHIRPathListener ) {\n\t        listener.exitQualifiedIdentifier(this);\n\t\t}\n\t}\n\n\n}\n\n\n\nclass IdentifierContext extends antlr4.ParserRuleContext {\n\n    constructor(parser, parent, invokingState) {\n        if(parent===undefined) {\n            parent = null;\n        }\n        if(invokingState===undefined || invokingState===null) {\n            invokingState = -1;\n        }\n        super(parent, invokingState);\n        this.parser = parser;\n        this.ruleIndex = FHIRPathParser.RULE_identifier;\n    }\n\n\tIDENTIFIER() {\n\t    return this.getToken(FHIRPathParser.IDENTIFIER, 0);\n\t};\n\n\tDELIMITEDIDENTIFIER() {\n\t    return this.getToken(FHIRPathParser.DELIMITEDIDENTIFIER, 0);\n\t};\n\n\tenterRule(listener) {\n\t    if(listener instanceof FHIRPathListener ) {\n\t        listener.enterIdentifier(this);\n\t\t}\n\t}\n\n\texitRule(listener) {\n\t    if(listener instanceof FHIRPathListener ) {\n\t        listener.exitIdentifier(this);\n\t\t}\n\t}\n\n\n}\n\n\n\n\nFHIRPathParser.EntireExpressionContext = EntireExpressionContext; \nFHIRPathParser.ExpressionContext = ExpressionContext; \nFHIRPathParser.TermContext = TermContext; \nFHIRPathParser.LiteralContext = LiteralContext; \nFHIRPathParser.ExternalConstantContext = ExternalConstantContext; \nFHIRPathParser.InvocationContext = InvocationContext; \nFHIRPathParser.FunctnContext = FunctnContext; \nFHIRPathParser.ParamListContext = ParamListContext; \nFHIRPathParser.QuantityContext = QuantityContext; \nFHIRPathParser.UnitContext = UnitContext; \nFHIRPathParser.DateTimePrecisionContext = DateTimePrecisionContext; \nFHIRPathParser.PluralDateTimePrecisionContext = PluralDateTimePrecisionContext; \nFHIRPathParser.TypeSpecifierContext = TypeSpecifierContext; \nFHIRPathParser.QualifiedIdentifierContext = QualifiedIdentifierContext; \nFHIRPathParser.IdentifierContext = IdentifierContext; \n\nmodule.exports = FHIRPathParser;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/fhirpath@3.18.0/node_modules/fhirpath/src/parser/generated/FHIRPathParser.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/fhirpath@3.18.0/node_modules/fhirpath/src/parser/index.js":
/*!***************************************************************************************!*\
  !*** ../node_modules/.pnpm/fhirpath@3.18.0/node_modules/fhirpath/src/parser/index.js ***!
  \***************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const antlr4 = __webpack_require__(/*! ./antlr4-index */ \"(ssr)/../node_modules/.pnpm/fhirpath@3.18.0/node_modules/fhirpath/src/parser/antlr4-index.js\");\nconst Lexer = __webpack_require__(/*! ./generated/FHIRPathLexer */ \"(ssr)/../node_modules/.pnpm/fhirpath@3.18.0/node_modules/fhirpath/src/parser/generated/FHIRPathLexer.js\");\nconst Parser = __webpack_require__(/*! ./generated/FHIRPathParser */ \"(ssr)/../node_modules/.pnpm/fhirpath@3.18.0/node_modules/fhirpath/src/parser/generated/FHIRPathParser.js\");\nconst Listener = __webpack_require__(/*! ./generated/FHIRPathListener */ \"(ssr)/../node_modules/.pnpm/fhirpath@3.18.0/node_modules/fhirpath/src/parser/generated/FHIRPathListener.js\");\n\n\nclass ErrorListener extends antlr4.error.ErrorListener {\n  constructor(errors) {\n    super();\n    this.errors = errors;\n  }\n  syntaxError(rec, sym, line, col, msg, e) {\n    this.errors.push([rec, sym, line, col, msg, e]);\n  }\n}\n\nvar parse = function(path){\n  var chars = new antlr4.InputStream(path);\n  var lexer = new Lexer(chars);\n\n  var tokens  = new antlr4.CommonTokenStream(lexer);\n\n\n  var parser = new Parser(tokens);\n  parser.buildParseTrees = true;\n  var errors = [];\n  var listener = new ErrorListener(errors);\n\n  lexer.removeErrorListeners();\n  lexer.addErrorListener(listener);\n  parser.removeErrorListeners();\n  parser.addErrorListener(listener);\n\n  var tree = parser.entireExpression();\n\n  class PathListener extends Listener{\n    constructor() {\n      super();\n    }\n  }\n\n  var ast = {};\n  var node;\n  var parentStack = [ast];\n  for (let p of Object.getOwnPropertyNames(Listener.prototype)) {\n    if (p.startsWith(\"enter\")) {\n      PathListener.prototype[p] = function(ctx) {\n        let parentNode = parentStack[parentStack.length - 1];\n        let nodeType = p.slice(5); // remove \"enter\"\n        node = {type: nodeType};\n        node.text = ctx.getText();\n        if (!parentNode.children)\n          parentNode.children = [];\n        parentNode.children.push(node);\n        parentStack.push(node);\n        // Also collect this node's terminal nodes, if any.  Terminal nodes are\n        // not walked with the rest of the tree, but include things like \"+\" and\n        // \"-\", which we need.\n        node.terminalNodeText = [];\n        for (let c of ctx.children) {\n          // Test for node type \"TerminalNodeImpl\".  Minimized code no longer\n          // has the original function names, so we can't rely on\n          // c.constructor.name.  It appears the TerminalNodeImpl is the only\n          // node with a \"symbol\" property, so test for that.\n          if (c.symbol)\n            node.terminalNodeText.push(c.getText());\n        }\n      };\n    }\n    else if (p.startsWith(\"exit\")) {\n      PathListener.prototype[p] = function() {\n        parentStack.pop();\n      };\n    }\n  }\n\n  var printer = new PathListener();\n  antlr4.tree.ParseTreeWalker.DEFAULT.walk(printer, tree);\n\n  if (errors.length > 0) {\n    let errMsgs = [];\n    for (let i=0, len=errors.length; i<len; ++i) {\n      let err = errors[i];\n      let msg = \"line: \"+err[2]+\"; column: \"+ err[3]+\"; message: \"+err[4];\n      errMsgs.push(msg);\n    }\n    var e = new Error(errMsgs.join(\"\\n\"));\n    e.errors = errors;\n    throw e;\n  }\n  return ast;\n};\n\n\nmodule.exports = {\n  parse: parse\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2ZoaXJwYXRoQDMuMTguMC9ub2RlX21vZHVsZXMvZmhpcnBhdGgvc3JjL3BhcnNlci9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBQSxlQUFlLG1CQUFPLENBQUMsb0hBQWdCO0FBQ3ZDLGNBQWMsbUJBQU8sQ0FBQywwSUFBMkI7QUFDakQsZUFBZSxtQkFBTyxDQUFDLDRJQUE0QjtBQUNuRCxpQkFBaUIsbUJBQU8sQ0FBQyxnSkFBOEI7OztBQUd2RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUNBQW1DO0FBQ25DLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxxQ0FBcUMsT0FBTztBQUM1QztBQUNBLG1DQUFtQyxxQkFBcUI7QUFDeEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvZXRoYW5raW0vTmVzdG9yL21lZGZldGNoLmpzL25vZGVfbW9kdWxlcy8ucG5wbS9maGlycGF0aEAzLjE4LjAvbm9kZV9tb2R1bGVzL2ZoaXJwYXRoL3NyYy9wYXJzZXIvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgYW50bHI0ID0gcmVxdWlyZShcIi4vYW50bHI0LWluZGV4XCIpO1xuY29uc3QgTGV4ZXIgPSByZXF1aXJlKFwiLi9nZW5lcmF0ZWQvRkhJUlBhdGhMZXhlclwiKTtcbmNvbnN0IFBhcnNlciA9IHJlcXVpcmUoXCIuL2dlbmVyYXRlZC9GSElSUGF0aFBhcnNlclwiKTtcbmNvbnN0IExpc3RlbmVyID0gcmVxdWlyZShcIi4vZ2VuZXJhdGVkL0ZISVJQYXRoTGlzdGVuZXJcIik7XG5cblxuY2xhc3MgRXJyb3JMaXN0ZW5lciBleHRlbmRzIGFudGxyNC5lcnJvci5FcnJvckxpc3RlbmVyIHtcbiAgY29uc3RydWN0b3IoZXJyb3JzKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLmVycm9ycyA9IGVycm9ycztcbiAgfVxuICBzeW50YXhFcnJvcihyZWMsIHN5bSwgbGluZSwgY29sLCBtc2csIGUpIHtcbiAgICB0aGlzLmVycm9ycy5wdXNoKFtyZWMsIHN5bSwgbGluZSwgY29sLCBtc2csIGVdKTtcbiAgfVxufVxuXG52YXIgcGFyc2UgPSBmdW5jdGlvbihwYXRoKXtcbiAgdmFyIGNoYXJzID0gbmV3IGFudGxyNC5JbnB1dFN0cmVhbShwYXRoKTtcbiAgdmFyIGxleGVyID0gbmV3IExleGVyKGNoYXJzKTtcblxuICB2YXIgdG9rZW5zICA9IG5ldyBhbnRscjQuQ29tbW9uVG9rZW5TdHJlYW0obGV4ZXIpO1xuXG5cbiAgdmFyIHBhcnNlciA9IG5ldyBQYXJzZXIodG9rZW5zKTtcbiAgcGFyc2VyLmJ1aWxkUGFyc2VUcmVlcyA9IHRydWU7XG4gIHZhciBlcnJvcnMgPSBbXTtcbiAgdmFyIGxpc3RlbmVyID0gbmV3IEVycm9yTGlzdGVuZXIoZXJyb3JzKTtcblxuICBsZXhlci5yZW1vdmVFcnJvckxpc3RlbmVycygpO1xuICBsZXhlci5hZGRFcnJvckxpc3RlbmVyKGxpc3RlbmVyKTtcbiAgcGFyc2VyLnJlbW92ZUVycm9yTGlzdGVuZXJzKCk7XG4gIHBhcnNlci5hZGRFcnJvckxpc3RlbmVyKGxpc3RlbmVyKTtcblxuICB2YXIgdHJlZSA9IHBhcnNlci5lbnRpcmVFeHByZXNzaW9uKCk7XG5cbiAgY2xhc3MgUGF0aExpc3RlbmVyIGV4dGVuZHMgTGlzdGVuZXJ7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICBzdXBlcigpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBhc3QgPSB7fTtcbiAgdmFyIG5vZGU7XG4gIHZhciBwYXJlbnRTdGFjayA9IFthc3RdO1xuICBmb3IgKGxldCBwIG9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKExpc3RlbmVyLnByb3RvdHlwZSkpIHtcbiAgICBpZiAocC5zdGFydHNXaXRoKFwiZW50ZXJcIikpIHtcbiAgICAgIFBhdGhMaXN0ZW5lci5wcm90b3R5cGVbcF0gPSBmdW5jdGlvbihjdHgpIHtcbiAgICAgICAgbGV0IHBhcmVudE5vZGUgPSBwYXJlbnRTdGFja1twYXJlbnRTdGFjay5sZW5ndGggLSAxXTtcbiAgICAgICAgbGV0IG5vZGVUeXBlID0gcC5zbGljZSg1KTsgLy8gcmVtb3ZlIFwiZW50ZXJcIlxuICAgICAgICBub2RlID0ge3R5cGU6IG5vZGVUeXBlfTtcbiAgICAgICAgbm9kZS50ZXh0ID0gY3R4LmdldFRleHQoKTtcbiAgICAgICAgaWYgKCFwYXJlbnROb2RlLmNoaWxkcmVuKVxuICAgICAgICAgIHBhcmVudE5vZGUuY2hpbGRyZW4gPSBbXTtcbiAgICAgICAgcGFyZW50Tm9kZS5jaGlsZHJlbi5wdXNoKG5vZGUpO1xuICAgICAgICBwYXJlbnRTdGFjay5wdXNoKG5vZGUpO1xuICAgICAgICAvLyBBbHNvIGNvbGxlY3QgdGhpcyBub2RlJ3MgdGVybWluYWwgbm9kZXMsIGlmIGFueS4gIFRlcm1pbmFsIG5vZGVzIGFyZVxuICAgICAgICAvLyBub3Qgd2Fsa2VkIHdpdGggdGhlIHJlc3Qgb2YgdGhlIHRyZWUsIGJ1dCBpbmNsdWRlIHRoaW5ncyBsaWtlIFwiK1wiIGFuZFxuICAgICAgICAvLyBcIi1cIiwgd2hpY2ggd2UgbmVlZC5cbiAgICAgICAgbm9kZS50ZXJtaW5hbE5vZGVUZXh0ID0gW107XG4gICAgICAgIGZvciAobGV0IGMgb2YgY3R4LmNoaWxkcmVuKSB7XG4gICAgICAgICAgLy8gVGVzdCBmb3Igbm9kZSB0eXBlIFwiVGVybWluYWxOb2RlSW1wbFwiLiAgTWluaW1pemVkIGNvZGUgbm8gbG9uZ2VyXG4gICAgICAgICAgLy8gaGFzIHRoZSBvcmlnaW5hbCBmdW5jdGlvbiBuYW1lcywgc28gd2UgY2FuJ3QgcmVseSBvblxuICAgICAgICAgIC8vIGMuY29uc3RydWN0b3IubmFtZS4gIEl0IGFwcGVhcnMgdGhlIFRlcm1pbmFsTm9kZUltcGwgaXMgdGhlIG9ubHlcbiAgICAgICAgICAvLyBub2RlIHdpdGggYSBcInN5bWJvbFwiIHByb3BlcnR5LCBzbyB0ZXN0IGZvciB0aGF0LlxuICAgICAgICAgIGlmIChjLnN5bWJvbClcbiAgICAgICAgICAgIG5vZGUudGVybWluYWxOb2RlVGV4dC5wdXNoKGMuZ2V0VGV4dCgpKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG4gICAgZWxzZSBpZiAocC5zdGFydHNXaXRoKFwiZXhpdFwiKSkge1xuICAgICAgUGF0aExpc3RlbmVyLnByb3RvdHlwZVtwXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBwYXJlbnRTdGFjay5wb3AoKTtcbiAgICAgIH07XG4gICAgfVxuICB9XG5cbiAgdmFyIHByaW50ZXIgPSBuZXcgUGF0aExpc3RlbmVyKCk7XG4gIGFudGxyNC50cmVlLlBhcnNlVHJlZVdhbGtlci5ERUZBVUxULndhbGsocHJpbnRlciwgdHJlZSk7XG5cbiAgaWYgKGVycm9ycy5sZW5ndGggPiAwKSB7XG4gICAgbGV0IGVyck1zZ3MgPSBbXTtcbiAgICBmb3IgKGxldCBpPTAsIGxlbj1lcnJvcnMubGVuZ3RoOyBpPGxlbjsgKytpKSB7XG4gICAgICBsZXQgZXJyID0gZXJyb3JzW2ldO1xuICAgICAgbGV0IG1zZyA9IFwibGluZTogXCIrZXJyWzJdK1wiOyBjb2x1bW46IFwiKyBlcnJbM10rXCI7IG1lc3NhZ2U6IFwiK2Vycls0XTtcbiAgICAgIGVyck1zZ3MucHVzaChtc2cpO1xuICAgIH1cbiAgICB2YXIgZSA9IG5ldyBFcnJvcihlcnJNc2dzLmpvaW4oXCJcXG5cIikpO1xuICAgIGUuZXJyb3JzID0gZXJyb3JzO1xuICAgIHRocm93IGU7XG4gIH1cbiAgcmV0dXJuIGFzdDtcbn07XG5cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHBhcnNlOiBwYXJzZVxufTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/fhirpath@3.18.0/node_modules/fhirpath/src/parser/index.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/fhirpath@3.18.0/node_modules/fhirpath/src/polyfill.js":
/*!***********************************************************************************!*\
  !*** ../node_modules/.pnpm/fhirpath@3.18.0/node_modules/fhirpath/src/polyfill.js ***!
  \***********************************************************************************/
/***/ (() => {

eval("// Binding the function Array.prototype.slice.call for convert Array-like objects/collections to a new Array.\nconst slice = Function.prototype.call.bind(Array.prototype.slice);\n\n// isInteger (not in IE)\n// From Mozilla docs\nNumber.isInteger = Number.isInteger || function(value) {\n  return typeof value === 'number' &&\n    isFinite(value) &&\n    Math.floor(value) === value;\n};\n\n\nif (!String.prototype.startsWith) {\n  // From Mozilla docs with little changes\n  Object.defineProperty(String.prototype, 'startsWith', {\n    value: function(searchString, position) {\n      position = position || 0;\n      return this.indexOf(searchString, position) === position;\n    }\n  });\n}\n\nif (!String.prototype.endsWith) {\n  // From Mozilla docs with little changes\n  Object.defineProperty(String.prototype, 'endsWith', {\n    value: function(searchString, position) {\n      var subjectString = this.toString();\n      if (position === undefined || position > subjectString.length) {\n        position = subjectString.length;\n      }\n      position -= searchString.length;\n      var lastIndex = subjectString.indexOf(searchString, position);\n      return lastIndex !== -1 && lastIndex === position;\n    }\n  });\n}\n\nif (!String.prototype.includes) {\n  Object.defineProperty(String.prototype, 'includes', {\n    value: function() {\n      return this.indexOf.apply(this, arguments) !== -1;\n    }\n  });\n}\n\nif (!Object.assign) {\n  // From Mozilla docs with little changes\n  Object.defineProperty(Object, 'assign', {\n    value: function(target) {\n      if (target === undefined || target === null) {\n        throw new TypeError('Cannot convert undefined or null to object');\n      }\n\n      return slice(arguments, 1).reduce(function (to, nextSource) {\n        Object.keys(Object(nextSource)).forEach(function (nextKey) {\n          to[nextKey] = nextSource[nextKey];\n        });\n        return to;\n      },  Object(target));\n    }\n  });\n}\n\n// Define btoa for NodeJS\nif (typeof btoa === 'undefined') {\n  global.btoa = function (str) {\n    return new Buffer.from(str, 'binary').toString('base64');\n  };\n}\n\n// Define atob for NodeJS\nif (typeof atob === 'undefined') {\n  global.atob = function (b64Encoded) {\n    return new Buffer.from(b64Encoded, 'base64').toString('binary');\n  };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2ZoaXJwYXRoQDMuMTguMC9ub2RlX21vZHVsZXMvZmhpcnBhdGgvc3JjL3BvbHlmaWxsLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLE9BQU87QUFDUDtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvZXRoYW5raW0vTmVzdG9yL21lZGZldGNoLmpzL25vZGVfbW9kdWxlcy8ucG5wbS9maGlycGF0aEAzLjE4LjAvbm9kZV9tb2R1bGVzL2ZoaXJwYXRoL3NyYy9wb2x5ZmlsbC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBCaW5kaW5nIHRoZSBmdW5jdGlvbiBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbCBmb3IgY29udmVydCBBcnJheS1saWtlIG9iamVjdHMvY29sbGVjdGlvbnMgdG8gYSBuZXcgQXJyYXkuXG5jb25zdCBzbGljZSA9IEZ1bmN0aW9uLnByb3RvdHlwZS5jYWxsLmJpbmQoQXJyYXkucHJvdG90eXBlLnNsaWNlKTtcblxuLy8gaXNJbnRlZ2VyIChub3QgaW4gSUUpXG4vLyBGcm9tIE1vemlsbGEgZG9jc1xuTnVtYmVyLmlzSW50ZWdlciA9IE51bWJlci5pc0ludGVnZXIgfHwgZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicgJiZcbiAgICBpc0Zpbml0ZSh2YWx1ZSkgJiZcbiAgICBNYXRoLmZsb29yKHZhbHVlKSA9PT0gdmFsdWU7XG59O1xuXG5cbmlmICghU3RyaW5nLnByb3RvdHlwZS5zdGFydHNXaXRoKSB7XG4gIC8vIEZyb20gTW96aWxsYSBkb2NzIHdpdGggbGl0dGxlIGNoYW5nZXNcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFN0cmluZy5wcm90b3R5cGUsICdzdGFydHNXaXRoJywge1xuICAgIHZhbHVlOiBmdW5jdGlvbihzZWFyY2hTdHJpbmcsIHBvc2l0aW9uKSB7XG4gICAgICBwb3NpdGlvbiA9IHBvc2l0aW9uIHx8IDA7XG4gICAgICByZXR1cm4gdGhpcy5pbmRleE9mKHNlYXJjaFN0cmluZywgcG9zaXRpb24pID09PSBwb3NpdGlvbjtcbiAgICB9XG4gIH0pO1xufVxuXG5pZiAoIVN0cmluZy5wcm90b3R5cGUuZW5kc1dpdGgpIHtcbiAgLy8gRnJvbSBNb3ppbGxhIGRvY3Mgd2l0aCBsaXR0bGUgY2hhbmdlc1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoU3RyaW5nLnByb3RvdHlwZSwgJ2VuZHNXaXRoJywge1xuICAgIHZhbHVlOiBmdW5jdGlvbihzZWFyY2hTdHJpbmcsIHBvc2l0aW9uKSB7XG4gICAgICB2YXIgc3ViamVjdFN0cmluZyA9IHRoaXMudG9TdHJpbmcoKTtcbiAgICAgIGlmIChwb3NpdGlvbiA9PT0gdW5kZWZpbmVkIHx8IHBvc2l0aW9uID4gc3ViamVjdFN0cmluZy5sZW5ndGgpIHtcbiAgICAgICAgcG9zaXRpb24gPSBzdWJqZWN0U3RyaW5nLmxlbmd0aDtcbiAgICAgIH1cbiAgICAgIHBvc2l0aW9uIC09IHNlYXJjaFN0cmluZy5sZW5ndGg7XG4gICAgICB2YXIgbGFzdEluZGV4ID0gc3ViamVjdFN0cmluZy5pbmRleE9mKHNlYXJjaFN0cmluZywgcG9zaXRpb24pO1xuICAgICAgcmV0dXJuIGxhc3RJbmRleCAhPT0gLTEgJiYgbGFzdEluZGV4ID09PSBwb3NpdGlvbjtcbiAgICB9XG4gIH0pO1xufVxuXG5pZiAoIVN0cmluZy5wcm90b3R5cGUuaW5jbHVkZXMpIHtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFN0cmluZy5wcm90b3R5cGUsICdpbmNsdWRlcycsIHtcbiAgICB2YWx1ZTogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5pbmRleE9mLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgIT09IC0xO1xuICAgIH1cbiAgfSk7XG59XG5cbmlmICghT2JqZWN0LmFzc2lnbikge1xuICAvLyBGcm9tIE1vemlsbGEgZG9jcyB3aXRoIGxpdHRsZSBjaGFuZ2VzXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShPYmplY3QsICdhc3NpZ24nLCB7XG4gICAgdmFsdWU6IGZ1bmN0aW9uKHRhcmdldCkge1xuICAgICAgaWYgKHRhcmdldCA9PT0gdW5kZWZpbmVkIHx8IHRhcmdldCA9PT0gbnVsbCkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdDYW5ub3QgY29udmVydCB1bmRlZmluZWQgb3IgbnVsbCB0byBvYmplY3QnKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHNsaWNlKGFyZ3VtZW50cywgMSkucmVkdWNlKGZ1bmN0aW9uICh0bywgbmV4dFNvdXJjZSkge1xuICAgICAgICBPYmplY3Qua2V5cyhPYmplY3QobmV4dFNvdXJjZSkpLmZvckVhY2goZnVuY3Rpb24gKG5leHRLZXkpIHtcbiAgICAgICAgICB0b1tuZXh0S2V5XSA9IG5leHRTb3VyY2VbbmV4dEtleV07XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdG87XG4gICAgICB9LCAgT2JqZWN0KHRhcmdldCkpO1xuICAgIH1cbiAgfSk7XG59XG5cbi8vIERlZmluZSBidG9hIGZvciBOb2RlSlNcbmlmICh0eXBlb2YgYnRvYSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgZ2xvYmFsLmJ0b2EgPSBmdW5jdGlvbiAoc3RyKSB7XG4gICAgcmV0dXJuIG5ldyBCdWZmZXIuZnJvbShzdHIsICdiaW5hcnknKS50b1N0cmluZygnYmFzZTY0Jyk7XG4gIH07XG59XG5cbi8vIERlZmluZSBhdG9iIGZvciBOb2RlSlNcbmlmICh0eXBlb2YgYXRvYiA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgZ2xvYmFsLmF0b2IgPSBmdW5jdGlvbiAoYjY0RW5jb2RlZCkge1xuICAgIHJldHVybiBuZXcgQnVmZmVyLmZyb20oYjY0RW5jb2RlZCwgJ2Jhc2U2NCcpLnRvU3RyaW5nKCdiaW5hcnknKTtcbiAgfTtcbn1cbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/fhirpath@3.18.0/node_modules/fhirpath/src/polyfill.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/fhirpath@3.18.0/node_modules/fhirpath/src/sdc-ig-supplements.js":
/*!*********************************************************************************************!*\
  !*** ../node_modules/.pnpm/fhirpath@3.18.0/node_modules/fhirpath/src/sdc-ig-supplements.js ***!
  \*********************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// Contains the supplementary FHIRPath functions defined in the Structured Data\n// Capture IG, https://hl7.org/fhir/uv/sdc/expressions.html#fhirpath-supplements.\n\nlet engine = {};\nconst util = __webpack_require__(/*! ./utilities */ \"(ssr)/../node_modules/.pnpm/fhirpath@3.18.0/node_modules/fhirpath/src/utilities.js\");\n\n\n/**\n * Returns numeric values from the score extension associated with the input\n * collection of resource nodes (e.g. QuestionnaireResponse item answers).\n *\n * Currently, when searching for a score extension, we respect the \"Context of\n * Use\" for each possible extension used to store a score. See:\n *   * https://www.hl7.org/fhir/extensions/StructureDefinition-itemWeight.html\n *   * https://build.fhir.org/ig/HL7/fhir-extensions/StructureDefinition-itemWeight.html\n *   * https://hl7.org/fhir/R5/codesystem.html#defined-props\n *   * https://www.hl7.org/fhir/codesystem-concept-properties.html\n *   * https://www.hl7.org/fhir/R4/extension-ordinalvalue.html\n *\n * Since the first mention of the ordinal() (a.k.a. weight()) function was in\n * SDC 3 (https://hl7.org/fhir/uv/sdc/expressions.html#fhirpath-supplements),\n * we don't support this function in STU3 and DSTU2 for extensions described in\n * these links:\n *   * https://www.hl7.org/fhir/stu3/extension-questionnaire-ordinalvalue.html\n *   * https://www.hl7.org/fhir/stu3/extension-valueset-ordinalvalue.html\n *   * https://hl7.org/fhir/STU3/extension-iso21090-co-value.html\n *   * https://hl7.org/fhir/DSTU2/questionnaire.html#4.26.5.9\n *   * https://hl7.org/fhir/DSTU2/extension-iso21090-co-value.html\n *   * https://hl7.org/fhir/DSTU2/extension-valueset-ordinalvalue.html\n *\n * Also, according to the resolution of this JIRA issue\n * https://jira.hl7.org/browse/FHIR-49329, we support\n * a score extension for all possible [x] in value[x] in QuestionnaireResponse\n * answers.\n *\n * We search for the first score extension for each source node to add its value\n * to the result in the following order:\n * 1. Check the source node for a score extension.\n * 2. If the source node is an answer from a `QuestionnaireResponse` or its\n *    `value[x]`:\n *     - Check the `value[x]` element for a score extension.\n *     - Check the corresponding answer option (if any) of the corresponding\n *       `Questionnaire` item for a score extension.\n *     - Otherwise, if the `Questionnaire` item references a contained `ValueSet`,\n *       check the corresponding element there for a score extension.\n * 4. If the source resource (to which the source node belongs, e.g.\n *    `QuestionnaireResponse`) or `Questionnaire` contains a corresponding\n *    `CodeSystem`, check for a score extension (for R4) or property (for R5)\n *    there.\n * 5. Look for a score extension (for R4) or property (for R5) in the\n *    corresponding `CodeSystem` loaded from the terminology server.\n * @param {Array} coll - resource nodes\n * @return {(number|Promise<number>)[]}\n */\nengine.weight = function (coll) {\n  const ctx = this;\n  if(!ctx.model?.score) {\n    throw new Error(\"The weight()/ordinal() function is not supported for the current model.\");\n  }\n  if(coll !== false && ! coll) { return []; }\n\n  const res = [];\n\n  const questionnaire = this.vars.questionnaire || this.processedVars.questionnaire?.data;\n  let hasPromise = false;\n\n  coll.forEach((elem) => {\n    if (elem?.data) {\n      const {score: embeddedScore, isQuestionnaireResponse, value, valueType} =\n        getResourceNodeInfo(ctx, elem);\n      if (embeddedScore !== undefined) {\n        // if we have a score extension in the source item, use it.\n        res.push(embeddedScore);\n      } else if (isQuestionnaireResponse && value != null && valueType) {\n        const linkIds = getLinkIds(elem);\n        if (questionnaire) {\n          const qItem = getQItemByLinkIds(ctx.model?.version,questionnaire, linkIds);\n          if (qItem) {\n            const qItemInfo = getQuestionnaireItemInfo(ctx, qItem, value, valueType);\n            if (qItemInfo.score !== undefined) {\n              // if we have a score extension for the answerOption, use it.\n              res.push(qItemInfo.score);\n            } else if (qItemInfo.answerOption && value.system || qItemInfo.answerValueSet) {\n              // Otherwise, check corresponding value set and code system\n              hasPromise = addWeightFromCorrespondingResourcesToResult(res, ctx,\n                questionnaire, qItemInfo.answerValueSet, value.code,\n                value.system, elem) || hasPromise;\n            }\n          } else {\n            throw new Error(\n              'Questionnaire item with this linkId were not found: ' +\n              elem.parentResNode.data.linkId + '.');\n          }\n        } else {\n          throw new Error('%questionnaire is needed but not specified.');\n        }\n      } else if (valueType === 'Coding' && value?.system) {\n        // If there are no questionnaire (no linkId) check corresponding code system\n        hasPromise = addWeightFromCorrespondingResourcesToResult(res, ctx, null,\n          null, value.code, value.system, elem) || hasPromise;\n      }\n    }\n  });\n\n  return hasPromise ? Promise.all(res) : res;\n};\n\n\n/**\n * Returns the score extension value for the specified ResourceNode, a flag\n * indicating that the ResourceNode belongs to an answer in the\n * QuestionnaireResponse, a node value and its capitalized data type name that\n * can be used to further search for the score if the score extension is not\n * embedded in the node.\n * @param {Object} ctx - object describing the context of expression\n *  evaluation (see the \"applyParsedPath\" function).\n * @param {ResourceNode} rNode - resource node.\n * @returns {{\n *   score: (number|undefined),\n *   isQuestionnaireResponse: (true|false|undefined),\n *   value: (any)\n *   valueType: (string)\n *   }}\n */\nfunction getResourceNodeInfo(ctx, rNode) {\n  const scorePropertyUri = ctx.model.score.propertyURI;\n  const scoreExtensionUri =  ctx.model.score.extensionURI;\n  let score;\n  let isQuestionnaireResponse;\n  let value;\n  let valueType;\n  let valueProp;\n\n  switch(rNode.path) {\n    case 'Coding':\n      isQuestionnaireResponse =\n        rNode.parentResNode?.path === 'QuestionnaireResponse.item.answer';\n      score = getScoreExtensionValue(rNode.data, scoreExtensionUri);\n      value = rNode.data;\n      valueType = 'Coding';\n      break;\n    case 'Questionnaire.item.answerOption':\n      score = getScoreExtensionValue(rNode.data, scoreExtensionUri);\n      value = rNode.data;\n      // No need to return value and valueType, because there is no further search;\n      break;\n    case 'QuestionnaireResponse.item.answer':\n      isQuestionnaireResponse = true;\n      // eslint-disable-next-line no-fallthrough\n      valueProp = rNode.data && Object.keys(rNode.data).find(\n        p => p.length > 5 && p.startsWith('value')\n      );\n      if (valueProp) {\n        valueType = valueProp.substring(5);\n        value = rNode.data[valueProp];\n        score = getScoreExtensionValue(rNode.data['_'+valueProp] || value, scoreExtensionUri);\n      }\n      break;\n    case 'ValueSet.compose.include.concept':\n      if (!ctx.model.score.propertyURI) {\n        score = getScoreExtensionValue(rNode.data, scoreExtensionUri);\n      }\n      // Create a fake node value to allow further search in CodeSystem\n      value = {\n        code: rNode.data.code,\n        system: rNode.parentResNode?.data.system\n      };\n      valueType = 'Coding';\n      break;\n    case 'ValueSet.expansion.contains':\n      if (scorePropertyUri) {\n        const scorePropertyCode = getPropertyCode(\n          rNode.parentResNode?.data.property, scorePropertyUri\n        );\n        score = getDecimalPropertyValue(rNode.data, scorePropertyCode);\n        value = rNode.data;\n        valueType = 'Coding';\n      }\n      break;\n    case 'CodeSystem.concept':\n      if (scorePropertyUri) {\n        const scorePropertyCode = getPropertyCode(\n          rNode.parentResNode?.data.property, scorePropertyUri\n        );\n        score = getDecimalPropertyValue(rNode.data, scorePropertyCode);\n      } else {\n        score = getScoreExtensionValue(rNode.data, scoreExtensionUri);\n      }\n      // No need to return value and valueType, because there is no further search\n      break;\n    default:\n      isQuestionnaireResponse = rNode.parentResNode?.path === 'QuestionnaireResponse.item.answer';\n      if (isQuestionnaireResponse) {\n        score = getScoreExtensionValue(rNode._data || rNode.data, scoreExtensionUri);\n        value = rNode.data;\n        valueType = util.capitalize(rNode.fhirNodeDataType);\n      }\n  }\n  return {score, isQuestionnaireResponse, value, valueType};\n}\n\n\n/**\n * Returns the value of the score extension from the specified node data.\n * @param {Object|undefined} nodeData - node data.\n * @param {string[]|undefined} extensionURI - score extension URI.\n * @returns {number|undefined}\n */\nfunction getScoreExtensionValue(nodeData, extensionURI) {\n  return extensionURI && nodeData?.extension?.find(\n    (i) => extensionURI.indexOf(i.url) !== -1\n  )?.valueDecimal;\n}\n\n\n/**\n * Returns the score extension value for the specified questionnaire item,\n * the answer option that matches specified value and valueType,\n * and a value set URL specified in the Questionnaire item.\n * @param {Object} ctx - object describing the context of expression\n *  evaluation (see the \"applyParsedPath\" function).\n * @param {Object} qItem - questionnaire item.\n * @param {any} value - item value.\n * @param {string} valueType - item value type.\n * @returns {{\n *   score: number | undefined,\n *   answerOption: Object | undefined,\n *   answerValueSet: string\n *   }}\n */\nfunction getQuestionnaireItemInfo(ctx, qItem, value, valueType) {\n  let compareFn;\n  const valuePropName = 'value'+valueType;\n\n  switch (valueType) {\n    case 'Attachment':\n    case 'Quantity':\n    case 'Reference':\n      compareFn = o => Object.keys(value).find(\n        (propKey) => propKey !== 'extension' && o[valuePropName][propKey] !== value[propKey]\n      ) === undefined;\n      break;\n    case 'Coding':\n      compareFn = o => o.valueCoding?.code === value.code &&\n        o.valueCoding?.system === value.system;\n      break;\n    default:\n      compareFn = o => o[valuePropName] === value;\n  }\n  const answerOption = qItem?.answerOption?.find(compareFn);\n  const score =\n    getScoreExtensionValue(answerOption, ctx.model.score.extensionURI);\n  const answerValueSet = qItem?.answerValueSet;\n  return {score, answerOption, answerValueSet};\n}\n\n\n// Object for storing received scores\nconst weightCache = {};\n// Duration of data storage in cache.\nconst cacheStorageTime = 3600000; // 1 hour = 60 * 60 * 1000\n\n\n/**\n * Caches score.\n * @param {string} key - key to store score in cache.\n * @param {number|Promise} value - value of score or promise of value.\n */\nfunction putScoreToCache(key, value) {\n  weightCache[key] = {\n    timestamp: Date.now(),\n    value\n  };\n}\n\n\n/**\n * Checks if there is an unexpired score in the cache.\n * @param {string} key - key to store score in cache.\n * @return {boolean|undefined}\n */\nfunction hasScoreInCache(key) {\n  return weightCache[key] && Date.now() - weightCache[key].timestamp < cacheStorageTime;\n}\n\n\n/**\n * Returns a score or promise of score from the cache. Does not check the\n * expiration time. {@link hasScoreInCache} should be called before this\n * function.\n * @param {string} key - key to store score in cache.\n * @return {number | Promise}\n */\nfunction getScoreFromCache(key) {\n  return weightCache[key].value;\n}\n\n\n/**\n * Adds the value of score or its promise received from a corresponding value\n * set or code system to the result array.\n * @param {Array} res - result array.\n * @param {Object} ctx - object describing the context of expression\n *  evaluation (see the \"applyParsedPath\" function).\n * @param {Object} questionnaire - object containing questionnaire resource data\n * @param {string} vsURL - value set URL specified in the Questionnaire item.\n * @param {string} code - symbol in syntax defined by the system.\n * @param {string} system - code system.\n * @param {ResourceNode|any} elem - source collection item for which we obtain\n *  the score value.\n * @return {boolean} a flag indicating that a promise has been added to the\n *  resulting array.\n */\nfunction addWeightFromCorrespondingResourcesToResult(res, ctx, questionnaire,\n  vsURL, code, system, elem) {\n  let score;\n  const modelVersion = ctx.model?.version;\n  const cacheKey = [\n    modelVersion,\n    questionnaire?.url || questionnaire?.id,\n    ctx.processedVars.terminologies?.terminologyUrl,\n    vsURL, code, system\n  ].join('|');\n\n  if (hasScoreInCache(cacheKey)) {\n    score =  getScoreFromCache(cacheKey);\n  } else {\n    if (code) {\n      if (vsURL) {\n        const vsId = /^#(.*)/.test(vsURL) ? RegExp.$1 : null;\n        const isAnswerValueSet = vsId\n          ? (r) => r.id === vsId && r.resourceType === 'ValueSet'\n          : (r) => r.url === vsURL && r.resourceType === 'ValueSet';\n\n        const containedVS = questionnaire?.contained?.find(isAnswerValueSet);\n\n        if (containedVS) {\n          score = getWeightFromVS(ctx, containedVS, code, system);\n        } else if (vsId) {\n          throw new Error(\n            `Cannot find a contained value set with id: ` + vsId + '.');\n        }\n      } // end if (vsURL)\n\n      if (system) {\n        if (score === undefined || score === null) {\n          score = getWeightFromCS(ctx, questionnaire, elem, code, system);\n        } else if (score instanceof Promise) {\n          score = score.then(weightFromVS => {\n            if (weightFromVS !== undefined && weightFromVS !== null) {\n              return weightFromVS;\n            }\n            return getWeightFromCS(ctx, questionnaire, elem, code, system);\n          });\n        }\n      }\n    }\n\n    putScoreToCache(cacheKey, score);\n  }\n\n  if (score !== undefined) {\n    res.push(score);\n  }\n\n  return score instanceof Promise;\n}\n\n\n/**\n * Returns the value (or its promise) of the itemWeight property or score\n * extension for the specified system and code from a CodeSystem.\n * @param {Object} ctx - object describing the context of expression\n *  evaluation (see the \"applyParsedPath\" function). * @param ctx\n * @param {Object} questionnaire - object containing questionnaire resource data\n * @param {ResourceNode|any} elem - source collection item for which we obtain\n *  the score value.\n * @param {string} code - symbol in syntax defined by the system.\n * @param {string} system - code system.\n * @return {number|undefined|Promise<number|undefined>}\n */\nfunction getWeightFromCS(ctx, questionnaire, elem, code, system) {\n  const isCodeSystem = (r) => r.url === system && r.resourceType === 'CodeSystem';\n  const containedCS = getContainedResources(elem)?.find(isCodeSystem)\n    || questionnaire?.contained?.find(isCodeSystem);\n  let score;\n\n  if (containedCS) {\n    const scorePropertyUri = ctx.model?.score.propertyURI;\n    if (scorePropertyUri) {\n      const scorePropertyCode = getPropertyCode(containedCS?.property, scorePropertyUri);\n      if (scorePropertyCode) {\n        const item = getCodeSystemItem(containedCS?.concept, code);\n        score = getDecimalPropertyValue(item, scorePropertyCode);\n      }\n    } else {\n      const codeSystemExt = ctx.model?.score.extensionURI;\n      if (codeSystemExt) {\n        const item = getCodeSystemItem(containedCS?.concept, code);\n        score = getScoreExtensionValue(item, codeSystemExt);\n      }\n    }\n  } else {\n    score = getWeightFromTerminologyCodeSet(ctx, code, system);\n  }\n\n  return score;\n}\n\n\n/**\n * Returns a promise to return a score value from the code system obtained from\n * the terminology server.\n * @param {Object} ctx - object describing the context of expression\n *  evaluation (see the \"applyParsedPath\" function).\n * @param {string} code - symbol in syntax defined by the system.\n * @param {string} system - code system.\n * @return {Promise<number|undefined>}\n */\nfunction getWeightFromTerminologyCodeSet(ctx, code, system) {\n  const scorePropertyUri = ctx.model?.score.propertyURI;\n  const codeSystemExt = ctx.model?.score.extensionURI;\n\n  const terminologyUrl = getTerminologyUrl(ctx);\n  const fetchOptions = {\n    headers: {\n      'Accept': 'application/fhir+json'\n    },\n    ...(ctx.signal ? {signal: ctx.signal} : {})\n  };\n  return util.fetchWithCache(`${terminologyUrl}/CodeSystem?` + new URLSearchParams({\n    url: system,\n    ...(scorePropertyUri ? {_elements: 'property'}: {})\n  }).toString(), fetchOptions)\n    .then(bundle => {\n      if (scorePropertyUri) {\n        const scorePropertyCode = getPropertyCode(bundle?.entry?.[0]?.resource?.property, scorePropertyUri);\n        if (scorePropertyCode) {\n          return util.fetchWithCache(`${terminologyUrl}/CodeSystem/$lookup?` + new URLSearchParams({\n            code, system, property: scorePropertyCode\n          }).toString(), fetchOptions)\n            .then((parameters) => {\n              return parameters.parameter\n                .find(p => p.name === 'property' && p.part\n                  .find(part => part.name === 'code' && part.valueCode === scorePropertyCode))\n                ?.part?.find(p => p.name === 'value')?.valueDecimal;\n            });\n        }\n      } else {\n        const item = getCodeSystemItem(bundle?.entry?.[0]?.resource.concept, code);\n        return getScoreExtensionValue(item, codeSystemExt);\n      }\n    });\n}\n\n\n/**\n * Returns the URL of the terminology server.\n * @param {Object} ctx - object describing the context of expression\n *  evaluation (see the \"applyParsedPath\" function).\n * @return {string}\n */\nfunction getTerminologyUrl(ctx) {\n  if (!ctx.async) {\n    throw new Error('The asynchronous function \"weight\"/\"ordinal\" is not allowed. ' +\n      'To enable asynchronous functions, use the async=true or async=\"always\"' +\n      ' option.');\n  }\n\n  const terminologyUrl = ctx.processedVars.terminologies?.terminologyUrl;\n  if (!terminologyUrl) {\n    throw new Error('Option \"terminologyUrl\" is not specified.');\n  }\n\n  return terminologyUrl;\n}\n\n\n/**\n * Returns an item from \"ValueSet.expansion.contains\" that has the specified\n * code and system.\n * @param {Array<Object>} contains - value of \"ValueSet.expansion.contains\".\n * @param {string} code - symbol in syntax defined by the system.\n * @param {string} system - code system.\n * @return {Object| undefined}\n */\nfunction getValueSetItem(contains, code, system) {\n  let result;\n  if (contains) {\n    for(let i = 0; i < contains.length && !result; i++) {\n      const item = contains[i];\n      if (item.code === code && item.system === system) {\n        result = item;\n      } else {\n        result = getValueSetItem(item.contains, code, system);\n      }\n    }\n  }\n  return result;\n}\n\n\n/**\n * Returns an item from \"CodeSystem.concept\" that has the specified code.\n * @param {Array<Object>} concept - value of \"CodeSystem.concept\".\n * @param {string} code - symbol in syntax defined by the system.\n * @return {Object| undefined}\n */\nfunction getCodeSystemItem(concept, code) {\n  let result;\n  if (concept) {\n    for(let i = 0; i < concept.length && !result; i++) {\n      const item = concept[i];\n      if (item.code === code) {\n        result = item;\n      } else if (item.concept) {\n        result = getCodeSystemItem(item.concept, code);\n      }\n    }\n  }\n  return result;\n}\n\n\n/**\n * Returns  a property code from the array with additional information\n * supplied about each concept by its URI.\n * @param {Object} properties - ValueSet.expansion.property or\n *  CodeSystem.property.\n *  @param {string} uri - property URI.\n * @return {boolean}\n */\nfunction getPropertyCode(properties, uri) {\n  return properties?.find(p => p.uri === uri)?.code;\n}\n\n\n/**\n * Returns the decimal value of a property from a value set item or code\n * system concept item by its code.\n * @param {Object} item - an item from a ValueSet.expansion.contains or\n *  CodeSystem.concept.\n * @param {Object} code - property code.\n * @return {number | undefined}\n */\nfunction getDecimalPropertyValue(item, code) {\n  return item?.property?.find(p => p.code === code)?.valueDecimal;\n}\n\n\n/**\n * Returns the value of the itemWeight property or score extension for the\n * specified system and code from a value set. If the item in the value set has\n * no score, undefined is returned. If the item does not exist, null is returned.\n * The difference between null and undefined values may be used in paging.\n * @param {Object} ctx - object describing the context of expression\n *  evaluation (see the \"applyParsedPath\" function).\n * @param {Object} vs - ValueSet.\n * @param {string} code - symbol in syntax defined by the system.\n * @param {string} system - code system.\n * @return {number|null|undefined}\n */\nfunction getWeightFromVS(ctx, vs, code, system) {\n  let score;\n  let item;\n  const scorePropertyUri = ctx.model?.score.propertyURI;\n  if (scorePropertyUri) {\n    // \"ValueSet.expansion.contains\" for R5\n    const scorePropertyCode = getPropertyCode(\n      vs.expansion?.property, scorePropertyUri\n    );\n    if (scorePropertyCode) {\n      item = getValueSetItem(vs.expansion?.contains, code, system);\n      score = getDecimalPropertyValue(item, scorePropertyCode);\n    }\n  } else {\n    // \"ValueSet.compose.include.concept\" for R4\n    const includeExt = ctx.model?.score.extensionURI;\n    const include = vs.compose?.include;\n    const len = include?.length;\n    for (let i = 0; i < len && !item; ++i) {\n      if (include[i].system === system) {\n        item = getCodeSystemItem(include[i].concept, code);\n      }\n    }\n    score = getScoreExtensionValue(item, includeExt);\n  }\n\n  return item ? score : null;\n}\n\n\n/**\n * Returns array of linkIds of ancestor ResourceNodes and source ResourceNode\n * starting with the linkId of the given node and ending with the topmost item's\n * linkId.\n * @param {ResourceNode} node - source ResourceNode.\n * @return {String[]}\n */\nfunction getLinkIds(node) {\n  const res = [];\n\n  while (!node.data?.linkId && node?.parentResNode) {\n    node = node.parentResNode;\n  }\n\n  while (node?.data?.linkId) {\n    res.push(node.data.linkId);\n    node = node.parentResNode;\n  }\n\n  return res;\n}\n\n\n/**\n * Returns the \"contained\" property of the resource to which the ResourceNode\n * belongs, or an undefined value if not a ResourceNode was passed or if there\n * is no contained property.\n * @param {ResourceNode|any} node - source ResourceNode or something else.\n * @return {Object[]|undefined}\n */\nfunction getContainedResources(node) {\n  while (node) {\n    if (node.data?.resourceType && node.data?.contained) {\n      return node.data?.contained;\n    }\n    node = node.parentResNode;\n  }\n}\n\n\n/**\n * Mapping questionnaires to \"linkIds\" keys mapped to questionnaire items.\n * It is used to cache the result in the getQItemByLinkIds function.\n * @type {WeakMap<WeakKey, Object>}\n */\nconst questionnaire2linkIds = new WeakMap();\n\n\n/**\n * Returns a questionnaire item based on the linkIds array of the ancestor\n * ResourceNodes and the target ResourceNode. If the questionnaire item is not\n * found, it returns null.\n * @param {string} modelVersion - model version: 'r5', 'r4', 'stu3', or 'dstu2'.\n * @param {Object} questionnaire - object with a Questionnaire resource.\n * @param {string[]} linkIds - array of linkIds starting with the linkId of the\n * target node and ending with the topmost known item's linkId.\n * @return {Object | null}\n */\nfunction getQItemByLinkIds(modelVersion, questionnaire, linkIds) {\n  let currentNode;\n  // Mapping \"linkIds\" keys to questionnaire items.\n  let linkIds2items;\n  // \"linkIds\" key.\n  const linkIdsKey = linkIds.join('|');\n\n  // Get the mapping of \"linkIds\" keys to questionnaire items for the current\n  // questionnaire, or create it if it doesn't exist.\n  if (questionnaire2linkIds.has(questionnaire)) {\n    linkIds2items = questionnaire2linkIds.get(questionnaire);\n    currentNode =  linkIds2items[linkIdsKey];\n  } else {\n    linkIds2items = {};\n    questionnaire2linkIds.set(questionnaire, linkIds2items);\n  }\n\n  // We use \"hasOwnProperty\" because we also cache undefined results for scores.\n  if (!Object.prototype.hasOwnProperty.call(linkIds2items, linkIdsKey)) {\n    // If the result is not cached yet, we search for the questionnaire item.\n    const topLinkId = linkIds[linkIds.length - 1];\n\n    if (modelVersion === 'dstu2') {\n      // Search for an item in a questionnaire specified in DSTU2 format.\n      let collection = questionnaire.group;\n\n      // Find the questionnaire item that matches the linkId of the topmost\n      // known item.\n      while (collection?.length > 0) {\n        currentNode = collection.find(o => o.linkId === topLinkId);\n        if (currentNode) {\n          break;\n        } else {\n          collection = [].concat(...collection.map(i => [].concat(i.question || [], i.group || [])));\n        }\n      }\n\n      // Getting a questionnaire item relative to the topmost known item using\n      // subsequent linkIds.\n      for (let i = linkIds.length - 2; i >= 0 && currentNode; --i) {\n        currentNode = currentNode.question?.find(o => o.linkId === linkIds[i]) ||\n          currentNode.group?.find(o => o.linkId === linkIds[i]);\n      }\n\n    } else {\n      // Search for an item in a questionnaire specified in STU3, R4 or R5\n      // format.\n      let collection = questionnaire.item;\n\n      // Find the questionnaire item that matches the linkId of the topmost\n      // known item.\n      while (collection?.length > 0) {\n        currentNode = collection.find(o => o.linkId === topLinkId);\n        if (currentNode) {\n          break;\n        } else {\n          collection = [].concat(...collection.map(i => i.item || []));\n        }\n      }\n\n      // Getting a questionnaire item relative to the topmost known item using\n      // subsequent linkIds.\n      for (let i = linkIds.length - 2; i >= 0 && currentNode; --i) {\n        currentNode = currentNode.item?.find(o => o.linkId === linkIds[i]);\n      }\n    }\n\n    linkIds2items[linkIdsKey] = currentNode;\n  }\n\n  return currentNode;\n}\n\n\nmodule.exports = engine;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/fhirpath@3.18.0/node_modules/fhirpath/src/sdc-ig-supplements.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/fhirpath@3.18.0/node_modules/fhirpath/src/strings.js":
/*!**********************************************************************************!*\
  !*** ../node_modules/.pnpm/fhirpath@3.18.0/node_modules/fhirpath/src/strings.js ***!
  \**********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const util = __webpack_require__(/*! ./utilities */ \"(ssr)/../node_modules/.pnpm/fhirpath@3.18.0/node_modules/fhirpath/src/utilities.js\");\nconst misc = __webpack_require__(/*! ./misc */ \"(ssr)/../node_modules/.pnpm/fhirpath@3.18.0/node_modules/fhirpath/src/misc.js\");\n\nconst engine = {};\n\n// Cache for rewritten RegExp patterns\nconst cachedRegExp = {};\n\n/**\n * Rewrites RegExp pattern to support single-line mode (dotAll) in IE11:\n * To do that we replace \".\" with \"[^]\" in source RegExp pattern,\n * except where \".\" is escaped or is inside unescaped [].\n * Another way to do the same is using package regexpu-core\n * or packages regjsparser/regjsgen.\n * @param {string} pattern - source RegExp pattern\n * @return {string}\n */\nfunction rewritePatternForDotAll(pattern) {\n  if (!cachedRegExp[pattern]) {\n    cachedRegExp[pattern] = pattern.replace(/\\./g, (_, offset, entirePattern) => {\n      // The preceding part of the string\n      const precedingPart = entirePattern.substr(0, offset);\n      // The preceding part of the string without escaped characters: '\\', '[' or ']'\n      const cleanPrecedingPart = precedingPart\n        .replace(/\\\\\\\\/g, '')\n        .replace(/\\\\[\\][]/g, '');\n      // Check if '.' is escaped\n      const escaped = cleanPrecedingPart[cleanPrecedingPart.length - 1] === '\\\\';\n      // The last index of unescaped '['\n      const lastIndexOfOpenBracket = cleanPrecedingPart.lastIndexOf('[');\n      // The last index of unescaped ']'\n      const lastIndexOfCloseBracket = cleanPrecedingPart.lastIndexOf(']');\n      return escaped ||\n        (lastIndexOfOpenBracket > lastIndexOfCloseBracket)\n        ? '.'\n        : '[^]';\n    });\n  }\n\n  return cachedRegExp[pattern];\n}\n\nengine.indexOf = function (coll, substr) {\n  const str = misc.singleton(coll, 'String');\n  return util.isEmpty(substr) || util.isEmpty(str) ? [] : str.indexOf(substr);\n};\n\nengine.substring = function (coll, start, length) {\n  const str = misc.singleton(coll, 'String');\n  if (util.isEmpty(str) || util.isEmpty(start) || start < 0 || start >= str.length) {\n    return [];\n  }\n  if (length === undefined || util.isEmpty(length)) {\n    return str.substring(start);\n  }\n  return str.substring(start, start + length);\n};\n\nengine.startsWith = function (coll, prefix) {\n  const str = misc.singleton(coll, 'String');\n  return util.isEmpty(prefix) || util.isEmpty(str) ? [] : str.startsWith(prefix);\n};\n\nengine.endsWith = function (coll, postfix) {\n  const str = misc.singleton(coll, 'String');\n  return util.isEmpty(postfix) || util.isEmpty(str) ? [] : str.endsWith(postfix);\n};\n\nengine.containsFn = function (coll, substr) {\n  const str = misc.singleton(coll, 'String');\n  return util.isEmpty(substr) || util.isEmpty(str) ? [] : str.includes(substr);\n};\n\nengine.upper = function (coll) {\n  const str = misc.singleton(coll, 'String');\n  return util.isEmpty(str) ? [] : str.toUpperCase();\n};\n\nengine.lower = function (coll) {\n  const str = misc.singleton(coll, 'String');\n  return util.isEmpty(str) ? [] : str.toLowerCase();\n};\n\n// See https://build.fhir.org/ig/HL7/FHIRPath/#joinseparator-string-string\nengine.joinFn = function (coll, separator) {\n  const stringValues = [];\n  coll.forEach((n) => {\n    const d = util.valData(n);\n    if (typeof d === \"string\") {\n      stringValues.push(d);\n    } else if (d != null) {\n      throw new Error('Join requires a collection of strings.');\n    }\n  });\n  if (util.isEmpty(stringValues)) {\n    return [];\n  }\n  if (separator === undefined) {\n    separator = \"\";\n  }\n  return stringValues.join(separator);\n};\n\nengine.splitFn = function (coll, separator) {\n  const strToSplit = misc.singleton(coll, 'String');\n  return util.isEmpty(strToSplit) ? [] : strToSplit.split(separator);\n};\n\nengine.trimFn = function (coll) {\n  const strToTrim = misc.singleton(coll, 'String');\n  return util.isEmpty(strToTrim) ? [] : strToTrim.trim();\n};\n\n// encoding/decoding\nengine.encodeFn = function (coll, format) {\n  const strToEncode = misc.singleton(coll, 'String');\n  if (util.isEmpty(strToEncode)){\n    return [];\n  }\n  if (format === 'urlbase64' || format === 'base64url'){\n    return btoa(strToEncode).replace(/\\+/g, '-').replace(/\\//g, '_');\n  }\n  if (format === 'base64'){\n    return btoa(strToEncode);\n  }\n  if (format === 'hex'){\n    return  Array.from(strToEncode).map(c => \n      c.charCodeAt(0) < 128 ? c.charCodeAt(0).toString(16) : \n        encodeURIComponent(c).replace(/%/g,'')\n    ).join('');\n  }\n  return [];\n};\n\nengine.decodeFn = function (coll, format) {\n  const strDecode = misc.singleton(coll, 'String');\n  if (util.isEmpty(strDecode)){\n    return [];\n  }\n  if (format === 'urlbase64' || format === 'base64url'){\n    return atob(strDecode.replace(/-/g, '+').replace(/_/g, '/'));\n  }\n  if (format === 'base64'){\n    return atob(strDecode);\n  }\n  if (format === 'hex'){\n    if (strDecode.length % 2 !== 0){\n      throw new Error('Decode \\'hex\\' requires an even number of characters.');\n    }\n    return decodeURIComponent('%' + strDecode.match(/.{2}/g).join('%'));\n  }\n  return [];\n};\n\n// Check if dotAll is supported.\n// See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/dotAll for details.\nconst dotAllIsSupported = (new RegExp('')).dotAll === false;\n\nif (dotAllIsSupported) {\n  engine.matches = function (coll, regex) {\n    const str = misc.singleton(coll, 'String');\n    if (util.isEmpty(regex) || util.isEmpty(str)) {\n      return [];\n    }\n    const reg = new RegExp(regex, 'su');\n    return reg.test(str);\n  };\n} else {\n  engine.matches = function (coll, regex) {\n    const str = misc.singleton(coll, 'String');\n    if (util.isEmpty(regex) || util.isEmpty(str)) {\n      return [];\n    }\n    const reg = new RegExp(rewritePatternForDotAll(regex), 'u');\n    return reg.test(str);\n  };\n}\n\nengine.replace = function (coll, pattern, repl) {\n  const str = misc.singleton(coll, 'String');\n  if (util.isEmpty(pattern) || util.isEmpty(repl) || util.isEmpty(str)) {\n    return [];\n  }\n  const reg = new RegExp(util.escapeStringForRegExp(pattern), 'g');\n  return str.replace(reg, repl);\n};\n\nengine.replaceMatches = function (coll, regex, repl) {\n  const str = misc.singleton(coll, 'String');\n  if (util.isEmpty(regex) || util.isEmpty(repl) || util.isEmpty(str)) {\n    return [];\n  }\n  const reg = new RegExp(regex, 'gu');\n  return str.replace(reg, repl);\n};\n\nengine.length = function (coll) {\n  const str = misc.singleton(coll, 'String');\n  return util.isEmpty(str) ? [] : str.length;\n};\n\nengine.toChars = function (coll) {\n  const str = misc.singleton(coll, 'String');\n  return util.isEmpty(str) ? [] : str.split('');\n};\n\nmodule.exports = engine;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2ZoaXJwYXRoQDMuMTguMC9ub2RlX21vZHVsZXMvZmhpcnBhdGgvc3JjL3N0cmluZ3MuanMiLCJtYXBwaW5ncyI6IkFBQUEsYUFBYSxtQkFBTyxDQUFDLHVHQUFhO0FBQ2xDLGFBQWEsbUJBQU8sQ0FBQyw2RkFBUTs7QUFFN0I7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1REFBdUQsRUFBRTtBQUN6RDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBIiwic291cmNlcyI6WyIvVXNlcnMvZXRoYW5raW0vTmVzdG9yL21lZGZldGNoLmpzL25vZGVfbW9kdWxlcy8ucG5wbS9maGlycGF0aEAzLjE4LjAvbm9kZV9tb2R1bGVzL2ZoaXJwYXRoL3NyYy9zdHJpbmdzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHV0aWwgPSByZXF1aXJlKFwiLi91dGlsaXRpZXNcIik7XG5jb25zdCBtaXNjID0gcmVxdWlyZShcIi4vbWlzY1wiKTtcblxuY29uc3QgZW5naW5lID0ge307XG5cbi8vIENhY2hlIGZvciByZXdyaXR0ZW4gUmVnRXhwIHBhdHRlcm5zXG5jb25zdCBjYWNoZWRSZWdFeHAgPSB7fTtcblxuLyoqXG4gKiBSZXdyaXRlcyBSZWdFeHAgcGF0dGVybiB0byBzdXBwb3J0IHNpbmdsZS1saW5lIG1vZGUgKGRvdEFsbCkgaW4gSUUxMTpcbiAqIFRvIGRvIHRoYXQgd2UgcmVwbGFjZSBcIi5cIiB3aXRoIFwiW15dXCIgaW4gc291cmNlIFJlZ0V4cCBwYXR0ZXJuLFxuICogZXhjZXB0IHdoZXJlIFwiLlwiIGlzIGVzY2FwZWQgb3IgaXMgaW5zaWRlIHVuZXNjYXBlZCBbXS5cbiAqIEFub3RoZXIgd2F5IHRvIGRvIHRoZSBzYW1lIGlzIHVzaW5nIHBhY2thZ2UgcmVnZXhwdS1jb3JlXG4gKiBvciBwYWNrYWdlcyByZWdqc3BhcnNlci9yZWdqc2dlbi5cbiAqIEBwYXJhbSB7c3RyaW5nfSBwYXR0ZXJuIC0gc291cmNlIFJlZ0V4cCBwYXR0ZXJuXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIHJld3JpdGVQYXR0ZXJuRm9yRG90QWxsKHBhdHRlcm4pIHtcbiAgaWYgKCFjYWNoZWRSZWdFeHBbcGF0dGVybl0pIHtcbiAgICBjYWNoZWRSZWdFeHBbcGF0dGVybl0gPSBwYXR0ZXJuLnJlcGxhY2UoL1xcLi9nLCAoXywgb2Zmc2V0LCBlbnRpcmVQYXR0ZXJuKSA9PiB7XG4gICAgICAvLyBUaGUgcHJlY2VkaW5nIHBhcnQgb2YgdGhlIHN0cmluZ1xuICAgICAgY29uc3QgcHJlY2VkaW5nUGFydCA9IGVudGlyZVBhdHRlcm4uc3Vic3RyKDAsIG9mZnNldCk7XG4gICAgICAvLyBUaGUgcHJlY2VkaW5nIHBhcnQgb2YgdGhlIHN0cmluZyB3aXRob3V0IGVzY2FwZWQgY2hhcmFjdGVyczogJ1xcJywgJ1snIG9yICddJ1xuICAgICAgY29uc3QgY2xlYW5QcmVjZWRpbmdQYXJ0ID0gcHJlY2VkaW5nUGFydFxuICAgICAgICAucmVwbGFjZSgvXFxcXFxcXFwvZywgJycpXG4gICAgICAgIC5yZXBsYWNlKC9cXFxcW1xcXVtdL2csICcnKTtcbiAgICAgIC8vIENoZWNrIGlmICcuJyBpcyBlc2NhcGVkXG4gICAgICBjb25zdCBlc2NhcGVkID0gY2xlYW5QcmVjZWRpbmdQYXJ0W2NsZWFuUHJlY2VkaW5nUGFydC5sZW5ndGggLSAxXSA9PT0gJ1xcXFwnO1xuICAgICAgLy8gVGhlIGxhc3QgaW5kZXggb2YgdW5lc2NhcGVkICdbJ1xuICAgICAgY29uc3QgbGFzdEluZGV4T2ZPcGVuQnJhY2tldCA9IGNsZWFuUHJlY2VkaW5nUGFydC5sYXN0SW5kZXhPZignWycpO1xuICAgICAgLy8gVGhlIGxhc3QgaW5kZXggb2YgdW5lc2NhcGVkICddJ1xuICAgICAgY29uc3QgbGFzdEluZGV4T2ZDbG9zZUJyYWNrZXQgPSBjbGVhblByZWNlZGluZ1BhcnQubGFzdEluZGV4T2YoJ10nKTtcbiAgICAgIHJldHVybiBlc2NhcGVkIHx8XG4gICAgICAgIChsYXN0SW5kZXhPZk9wZW5CcmFja2V0ID4gbGFzdEluZGV4T2ZDbG9zZUJyYWNrZXQpXG4gICAgICAgID8gJy4nXG4gICAgICAgIDogJ1teXSc7XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gY2FjaGVkUmVnRXhwW3BhdHRlcm5dO1xufVxuXG5lbmdpbmUuaW5kZXhPZiA9IGZ1bmN0aW9uIChjb2xsLCBzdWJzdHIpIHtcbiAgY29uc3Qgc3RyID0gbWlzYy5zaW5nbGV0b24oY29sbCwgJ1N0cmluZycpO1xuICByZXR1cm4gdXRpbC5pc0VtcHR5KHN1YnN0cikgfHwgdXRpbC5pc0VtcHR5KHN0cikgPyBbXSA6IHN0ci5pbmRleE9mKHN1YnN0cik7XG59O1xuXG5lbmdpbmUuc3Vic3RyaW5nID0gZnVuY3Rpb24gKGNvbGwsIHN0YXJ0LCBsZW5ndGgpIHtcbiAgY29uc3Qgc3RyID0gbWlzYy5zaW5nbGV0b24oY29sbCwgJ1N0cmluZycpO1xuICBpZiAodXRpbC5pc0VtcHR5KHN0cikgfHwgdXRpbC5pc0VtcHR5KHN0YXJ0KSB8fCBzdGFydCA8IDAgfHwgc3RhcnQgPj0gc3RyLmxlbmd0aCkge1xuICAgIHJldHVybiBbXTtcbiAgfVxuICBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQgfHwgdXRpbC5pc0VtcHR5KGxlbmd0aCkpIHtcbiAgICByZXR1cm4gc3RyLnN1YnN0cmluZyhzdGFydCk7XG4gIH1cbiAgcmV0dXJuIHN0ci5zdWJzdHJpbmcoc3RhcnQsIHN0YXJ0ICsgbGVuZ3RoKTtcbn07XG5cbmVuZ2luZS5zdGFydHNXaXRoID0gZnVuY3Rpb24gKGNvbGwsIHByZWZpeCkge1xuICBjb25zdCBzdHIgPSBtaXNjLnNpbmdsZXRvbihjb2xsLCAnU3RyaW5nJyk7XG4gIHJldHVybiB1dGlsLmlzRW1wdHkocHJlZml4KSB8fCB1dGlsLmlzRW1wdHkoc3RyKSA/IFtdIDogc3RyLnN0YXJ0c1dpdGgocHJlZml4KTtcbn07XG5cbmVuZ2luZS5lbmRzV2l0aCA9IGZ1bmN0aW9uIChjb2xsLCBwb3N0Zml4KSB7XG4gIGNvbnN0IHN0ciA9IG1pc2Muc2luZ2xldG9uKGNvbGwsICdTdHJpbmcnKTtcbiAgcmV0dXJuIHV0aWwuaXNFbXB0eShwb3N0Zml4KSB8fCB1dGlsLmlzRW1wdHkoc3RyKSA/IFtdIDogc3RyLmVuZHNXaXRoKHBvc3RmaXgpO1xufTtcblxuZW5naW5lLmNvbnRhaW5zRm4gPSBmdW5jdGlvbiAoY29sbCwgc3Vic3RyKSB7XG4gIGNvbnN0IHN0ciA9IG1pc2Muc2luZ2xldG9uKGNvbGwsICdTdHJpbmcnKTtcbiAgcmV0dXJuIHV0aWwuaXNFbXB0eShzdWJzdHIpIHx8IHV0aWwuaXNFbXB0eShzdHIpID8gW10gOiBzdHIuaW5jbHVkZXMoc3Vic3RyKTtcbn07XG5cbmVuZ2luZS51cHBlciA9IGZ1bmN0aW9uIChjb2xsKSB7XG4gIGNvbnN0IHN0ciA9IG1pc2Muc2luZ2xldG9uKGNvbGwsICdTdHJpbmcnKTtcbiAgcmV0dXJuIHV0aWwuaXNFbXB0eShzdHIpID8gW10gOiBzdHIudG9VcHBlckNhc2UoKTtcbn07XG5cbmVuZ2luZS5sb3dlciA9IGZ1bmN0aW9uIChjb2xsKSB7XG4gIGNvbnN0IHN0ciA9IG1pc2Muc2luZ2xldG9uKGNvbGwsICdTdHJpbmcnKTtcbiAgcmV0dXJuIHV0aWwuaXNFbXB0eShzdHIpID8gW10gOiBzdHIudG9Mb3dlckNhc2UoKTtcbn07XG5cbi8vIFNlZSBodHRwczovL2J1aWxkLmZoaXIub3JnL2lnL0hMNy9GSElSUGF0aC8jam9pbnNlcGFyYXRvci1zdHJpbmctc3RyaW5nXG5lbmdpbmUuam9pbkZuID0gZnVuY3Rpb24gKGNvbGwsIHNlcGFyYXRvcikge1xuICBjb25zdCBzdHJpbmdWYWx1ZXMgPSBbXTtcbiAgY29sbC5mb3JFYWNoKChuKSA9PiB7XG4gICAgY29uc3QgZCA9IHV0aWwudmFsRGF0YShuKTtcbiAgICBpZiAodHlwZW9mIGQgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIHN0cmluZ1ZhbHVlcy5wdXNoKGQpO1xuICAgIH0gZWxzZSBpZiAoZCAhPSBudWxsKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0pvaW4gcmVxdWlyZXMgYSBjb2xsZWN0aW9uIG9mIHN0cmluZ3MuJyk7XG4gICAgfVxuICB9KTtcbiAgaWYgKHV0aWwuaXNFbXB0eShzdHJpbmdWYWx1ZXMpKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG4gIGlmIChzZXBhcmF0b3IgPT09IHVuZGVmaW5lZCkge1xuICAgIHNlcGFyYXRvciA9IFwiXCI7XG4gIH1cbiAgcmV0dXJuIHN0cmluZ1ZhbHVlcy5qb2luKHNlcGFyYXRvcik7XG59O1xuXG5lbmdpbmUuc3BsaXRGbiA9IGZ1bmN0aW9uIChjb2xsLCBzZXBhcmF0b3IpIHtcbiAgY29uc3Qgc3RyVG9TcGxpdCA9IG1pc2Muc2luZ2xldG9uKGNvbGwsICdTdHJpbmcnKTtcbiAgcmV0dXJuIHV0aWwuaXNFbXB0eShzdHJUb1NwbGl0KSA/IFtdIDogc3RyVG9TcGxpdC5zcGxpdChzZXBhcmF0b3IpO1xufTtcblxuZW5naW5lLnRyaW1GbiA9IGZ1bmN0aW9uIChjb2xsKSB7XG4gIGNvbnN0IHN0clRvVHJpbSA9IG1pc2Muc2luZ2xldG9uKGNvbGwsICdTdHJpbmcnKTtcbiAgcmV0dXJuIHV0aWwuaXNFbXB0eShzdHJUb1RyaW0pID8gW10gOiBzdHJUb1RyaW0udHJpbSgpO1xufTtcblxuLy8gZW5jb2RpbmcvZGVjb2RpbmdcbmVuZ2luZS5lbmNvZGVGbiA9IGZ1bmN0aW9uIChjb2xsLCBmb3JtYXQpIHtcbiAgY29uc3Qgc3RyVG9FbmNvZGUgPSBtaXNjLnNpbmdsZXRvbihjb2xsLCAnU3RyaW5nJyk7XG4gIGlmICh1dGlsLmlzRW1wdHkoc3RyVG9FbmNvZGUpKXtcbiAgICByZXR1cm4gW107XG4gIH1cbiAgaWYgKGZvcm1hdCA9PT0gJ3VybGJhc2U2NCcgfHwgZm9ybWF0ID09PSAnYmFzZTY0dXJsJyl7XG4gICAgcmV0dXJuIGJ0b2Eoc3RyVG9FbmNvZGUpLnJlcGxhY2UoL1xcKy9nLCAnLScpLnJlcGxhY2UoL1xcLy9nLCAnXycpO1xuICB9XG4gIGlmIChmb3JtYXQgPT09ICdiYXNlNjQnKXtcbiAgICByZXR1cm4gYnRvYShzdHJUb0VuY29kZSk7XG4gIH1cbiAgaWYgKGZvcm1hdCA9PT0gJ2hleCcpe1xuICAgIHJldHVybiAgQXJyYXkuZnJvbShzdHJUb0VuY29kZSkubWFwKGMgPT4gXG4gICAgICBjLmNoYXJDb2RlQXQoMCkgPCAxMjggPyBjLmNoYXJDb2RlQXQoMCkudG9TdHJpbmcoMTYpIDogXG4gICAgICAgIGVuY29kZVVSSUNvbXBvbmVudChjKS5yZXBsYWNlKC8lL2csJycpXG4gICAgKS5qb2luKCcnKTtcbiAgfVxuICByZXR1cm4gW107XG59O1xuXG5lbmdpbmUuZGVjb2RlRm4gPSBmdW5jdGlvbiAoY29sbCwgZm9ybWF0KSB7XG4gIGNvbnN0IHN0ckRlY29kZSA9IG1pc2Muc2luZ2xldG9uKGNvbGwsICdTdHJpbmcnKTtcbiAgaWYgKHV0aWwuaXNFbXB0eShzdHJEZWNvZGUpKXtcbiAgICByZXR1cm4gW107XG4gIH1cbiAgaWYgKGZvcm1hdCA9PT0gJ3VybGJhc2U2NCcgfHwgZm9ybWF0ID09PSAnYmFzZTY0dXJsJyl7XG4gICAgcmV0dXJuIGF0b2Ioc3RyRGVjb2RlLnJlcGxhY2UoLy0vZywgJysnKS5yZXBsYWNlKC9fL2csICcvJykpO1xuICB9XG4gIGlmIChmb3JtYXQgPT09ICdiYXNlNjQnKXtcbiAgICByZXR1cm4gYXRvYihzdHJEZWNvZGUpO1xuICB9XG4gIGlmIChmb3JtYXQgPT09ICdoZXgnKXtcbiAgICBpZiAoc3RyRGVjb2RlLmxlbmd0aCAlIDIgIT09IDApe1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdEZWNvZGUgXFwnaGV4XFwnIHJlcXVpcmVzIGFuIGV2ZW4gbnVtYmVyIG9mIGNoYXJhY3RlcnMuJyk7XG4gICAgfVxuICAgIHJldHVybiBkZWNvZGVVUklDb21wb25lbnQoJyUnICsgc3RyRGVjb2RlLm1hdGNoKC8uezJ9L2cpLmpvaW4oJyUnKSk7XG4gIH1cbiAgcmV0dXJuIFtdO1xufTtcblxuLy8gQ2hlY2sgaWYgZG90QWxsIGlzIHN1cHBvcnRlZC5cbi8vIFNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9SZWdFeHAvZG90QWxsIGZvciBkZXRhaWxzLlxuY29uc3QgZG90QWxsSXNTdXBwb3J0ZWQgPSAobmV3IFJlZ0V4cCgnJykpLmRvdEFsbCA9PT0gZmFsc2U7XG5cbmlmIChkb3RBbGxJc1N1cHBvcnRlZCkge1xuICBlbmdpbmUubWF0Y2hlcyA9IGZ1bmN0aW9uIChjb2xsLCByZWdleCkge1xuICAgIGNvbnN0IHN0ciA9IG1pc2Muc2luZ2xldG9uKGNvbGwsICdTdHJpbmcnKTtcbiAgICBpZiAodXRpbC5pc0VtcHR5KHJlZ2V4KSB8fCB1dGlsLmlzRW1wdHkoc3RyKSkge1xuICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbiAgICBjb25zdCByZWcgPSBuZXcgUmVnRXhwKHJlZ2V4LCAnc3UnKTtcbiAgICByZXR1cm4gcmVnLnRlc3Qoc3RyKTtcbiAgfTtcbn0gZWxzZSB7XG4gIGVuZ2luZS5tYXRjaGVzID0gZnVuY3Rpb24gKGNvbGwsIHJlZ2V4KSB7XG4gICAgY29uc3Qgc3RyID0gbWlzYy5zaW5nbGV0b24oY29sbCwgJ1N0cmluZycpO1xuICAgIGlmICh1dGlsLmlzRW1wdHkocmVnZXgpIHx8IHV0aWwuaXNFbXB0eShzdHIpKSB7XG4gICAgICByZXR1cm4gW107XG4gICAgfVxuICAgIGNvbnN0IHJlZyA9IG5ldyBSZWdFeHAocmV3cml0ZVBhdHRlcm5Gb3JEb3RBbGwocmVnZXgpLCAndScpO1xuICAgIHJldHVybiByZWcudGVzdChzdHIpO1xuICB9O1xufVxuXG5lbmdpbmUucmVwbGFjZSA9IGZ1bmN0aW9uIChjb2xsLCBwYXR0ZXJuLCByZXBsKSB7XG4gIGNvbnN0IHN0ciA9IG1pc2Muc2luZ2xldG9uKGNvbGwsICdTdHJpbmcnKTtcbiAgaWYgKHV0aWwuaXNFbXB0eShwYXR0ZXJuKSB8fCB1dGlsLmlzRW1wdHkocmVwbCkgfHwgdXRpbC5pc0VtcHR5KHN0cikpIHtcbiAgICByZXR1cm4gW107XG4gIH1cbiAgY29uc3QgcmVnID0gbmV3IFJlZ0V4cCh1dGlsLmVzY2FwZVN0cmluZ0ZvclJlZ0V4cChwYXR0ZXJuKSwgJ2cnKTtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKHJlZywgcmVwbCk7XG59O1xuXG5lbmdpbmUucmVwbGFjZU1hdGNoZXMgPSBmdW5jdGlvbiAoY29sbCwgcmVnZXgsIHJlcGwpIHtcbiAgY29uc3Qgc3RyID0gbWlzYy5zaW5nbGV0b24oY29sbCwgJ1N0cmluZycpO1xuICBpZiAodXRpbC5pc0VtcHR5KHJlZ2V4KSB8fCB1dGlsLmlzRW1wdHkocmVwbCkgfHwgdXRpbC5pc0VtcHR5KHN0cikpIHtcbiAgICByZXR1cm4gW107XG4gIH1cbiAgY29uc3QgcmVnID0gbmV3IFJlZ0V4cChyZWdleCwgJ2d1Jyk7XG4gIHJldHVybiBzdHIucmVwbGFjZShyZWcsIHJlcGwpO1xufTtcblxuZW5naW5lLmxlbmd0aCA9IGZ1bmN0aW9uIChjb2xsKSB7XG4gIGNvbnN0IHN0ciA9IG1pc2Muc2luZ2xldG9uKGNvbGwsICdTdHJpbmcnKTtcbiAgcmV0dXJuIHV0aWwuaXNFbXB0eShzdHIpID8gW10gOiBzdHIubGVuZ3RoO1xufTtcblxuZW5naW5lLnRvQ2hhcnMgPSBmdW5jdGlvbiAoY29sbCkge1xuICBjb25zdCBzdHIgPSBtaXNjLnNpbmdsZXRvbihjb2xsLCAnU3RyaW5nJyk7XG4gIHJldHVybiB1dGlsLmlzRW1wdHkoc3RyKSA/IFtdIDogc3RyLnNwbGl0KCcnKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZW5naW5lO1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/fhirpath@3.18.0/node_modules/fhirpath/src/strings.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/fhirpath@3.18.0/node_modules/fhirpath/src/terminologies.js":
/*!****************************************************************************************!*\
  !*** ../node_modules/.pnpm/fhirpath@3.18.0/node_modules/fhirpath/src/terminologies.js ***!
  \****************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// This file contains a class that implements the Terminology Service API.\n// See https://build.fhir.org/fhirpath.html#txapi for details.\n\n\nconst util = __webpack_require__(/*! ./utilities */ \"(ssr)/../node_modules/.pnpm/fhirpath@3.18.0/node_modules/fhirpath/src/utilities.js\");\n\n\nclass Terminologies {\n  constructor(terminologyUrl) {\n    this.terminologyUrl = terminologyUrl;\n    this.invocationTable = Terminologies.invocationTable;\n  }\n\n  // Same as fhirpath.invocationTable, but for %terminologies methods\n  static invocationTable = {\n    validateVS: {fn: Terminologies.validateVS,  arity: { 2: ['String', 'AnySingletonAtRoot'], 3: ['String', 'AnySingletonAtRoot', 'String']} }\n  };\n\n  /**\n   * This example function calls the Terminology Service $validate-code operation\n   * on a value set. See Terminology Service API: https://build.fhir.org/fhirpath.html#txapi\n   * The source code of this function is based on this script:\n   * https://gist.github.com/brianpos/97e1237470d76835ea9a35bf8e021ca6#file-fhirpath-async-ts\n   * @param {Terminologies[]} self - an array with one element that refers to\n   *  the current Terminology instance.\n   * @param {string} valueset - a canonical URL reference to a value set. In the original\n   *  specification this could also be an actual ValueSet, but I don't want to\n   *  complicate this example.\n   * @param {string|Object} coded - either a Coding, a CodeableConcept,\n   *  or a resource element that is a code.\n   * @param {string} [params] - a URL encoded string with other parameters for the\n   *  validate-code operation (e.g. 'date=2011-03-04&displayLanguage=en').\n   * @return {Promise<Parameters>} - a Parameters resource\n   *  (https://build.fhir.org/parameters.html) with the results of the validation\n   *  operation.\n   */\n  static validateVS(self, valueset, coded, params = '') {\n    const ctx = this;\n    if (!ctx.async) {\n      throw new Error('The asynchronous function \"validateVS\" is not allowed. ' +\n        'To enable asynchronous functions, use the async=true or async=\"always\"' +\n        ' option.');\n    }\n    checkParams(params);\n    const httpHeaders = {\n      \"Accept\": \"application/fhir+json; charset=utf-8\",\n    };\n    const httpPostHeaders = {\n      \"Accept\": \"application/fhir+json; charset=utf-8\",\n      \"Content-Type\": \"application/fhir+json; charset=utf-8\",\n    };\n    let myHeaders = new Headers(httpHeaders);\n\n    const requestUrl = `${self[0].terminologyUrl}/ValueSet/$validate-code`;\n\n    let response;\n    if (coded.coding) {\n      const parameters = {\n        \"resourceType\": \"Parameters\",\n        \"parameter\": [\n          {\n            \"name\": \"url\",\n            \"valueUri\": valueset\n          },\n          {\n            \"name\": \"codeableConcept\",\n            \"valueCodeableConcept\": coded\n          }\n        ]\n      };\n      myHeaders = new Headers(httpPostHeaders);\n      response = util.fetchWithCache(\n        requestUrl + (params ? '?' + params : ''), {\n          method: \"POST\", headers: myHeaders, body: JSON.stringify(parameters),\n          ...(ctx.signal ? {signal: ctx.signal} : {})\n        }\n      );\n    } else if (typeof coded === \"string\") {\n      const queryParams1 = new URLSearchParams({\n        url: valueset,\n      });\n      //  Workaround for the case where we don't have a system. See discussion here:\n      //  https://chat.fhir.org/#narrow/stream/179266-fhirpath/topic/Problem.20with.20the.20.22memberOf.22.20function.20and.20R4.20servers\n      response = util.fetchWithCache(\n        `${self[0].terminologyUrl}/ValueSet?${queryParams1.toString() + (params ? '&' + params : '')}`,\n        {headers: myHeaders, ...(ctx.signal ? {signal: ctx.signal} : {})}\n      )\n        .then((bundle) => {\n          const system = bundle?.entry?.length === 1 && (\n            getSystemFromArrayItems(bundle.entry[0].resource.expansion?.contains)\n            || getSystemFromArrayItems(bundle.entry[0].resource.compose?.include)\n          );\n          if (system) {\n            const queryParams2 = new URLSearchParams({\n              url: valueset,\n              code: coded,\n              system\n            });\n            return util.fetchWithCache(\n              `${requestUrl}?${queryParams2.toString() + (params ? '&' + params : '')}`,\n              { headers: myHeaders, ...(ctx.signal ? {signal: ctx.signal} : {}) }\n            );\n          } else {\n            throw new Error('The valueset does not have a single code system.');\n          }\n        });\n    } else {\n      if (coded.code) {\n        const queryParams = new URLSearchParams({\n          url: valueset ?? '',\n          system: coded.system ?? '',\n          code: coded.code\n        });\n        response = util.fetchWithCache(\n          `${requestUrl}?${queryParams.toString() + (params ? '&' + params : '')}`,\n          { headers: myHeaders, ...(ctx.signal ? {signal: ctx.signal} : {}) }\n        );\n      }\n    }\n\n    return response\n      .then(params => {\n        if (params?.parameter) {\n          return params;\n        }\n        throw new Error(params);\n      })\n      .catch(() => {\n        const key = createIndexKeyMemberOf(coded, valueset);\n        throw new Error(\"Failed to check membership: \" + key);\n      });\n  }\n}\n\n/**\n * Create and returns an Index Key for the validateVS function\n * The source code of this function was borrowed from this script:\n * https://gist.github.com/brianpos/97e1237470d76835ea9a35bf8e021ca6#file-fhirpath-async-ts\n * @param {Object|string} value - either a Coding, a CodeableConcept, or\n *  a resource element that is a code.\n * @param {string} valueset - a canonical URL reference to a value set.\n * @returns {string|undefined}\n */\nfunction createIndexKeyMemberOf(value, valueset) {\n  if (typeof value === \"string\") {\n    return value + \" - \" + valueset;\n  }\n  if (value.code) {\n    return value.system + \"|\" + value.code + \" - \" + valueset;\n  }\n  if (value.coding) {\n    // return the same as for coding by joining each of the codings with a comma\n    return value.coding.map((c) => c.system + \"|\" + c.code).join(\",\") + \" - \" + valueset;\n  }\n  return undefined;\n}\n\n/**\n * Throws an exception if the params parameter is not empty and is not a valid\n * URL-encoded string.\n * @param {string|undefined} params - a URL encoded string with parameters\n *  (e.g. 'date=2011-03-04&displayLanguage=en').\n */\nfunction checkParams(params) {\n  if (params?.split('&').find(\n    p => {\n      const v = p.split('=');\n      return v.length <= 2 && v.find(x => encodeURIComponent(decodeURIComponent(x)) !== x);\n    }\n  )) {\n    throw new Error(`\"${params}\" should be a valid URL-encoded string`);\n  }\n}\n\n/**\n * Returns the \"system\" property from an array of items if it is the same for all\n * items and equal to the initial value if the initial value is defined.\n * @param {Object[]|undefined} arr - array of items\n * @param {string|undefined} [system] - optional initial value\n * @return {string|undefined}\n */\nfunction getSystemFromArrayItems(arr, system = undefined) {\n  if (arr) {\n    for (let i = 0; i < arr.length; ++i) {\n      if (!system) {\n        system = arr[i].system;\n      } else if (system !== arr[i].system) {\n        system = undefined;\n        break;\n      }\n    }\n  }\n\n  return system;\n}\n\nmodule.exports = Terminologies;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/fhirpath@3.18.0/node_modules/fhirpath/src/terminologies.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/fhirpath@3.18.0/node_modules/fhirpath/src/types.js":
/*!********************************************************************************!*\
  !*** ../node_modules/.pnpm/fhirpath@3.18.0/node_modules/fhirpath/src/types.js ***!
  \********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const addMinutes = __webpack_require__(/*! date-fns/add_minutes */ \"(ssr)/../node_modules/.pnpm/date-fns@1.30.1/node_modules/date-fns/add_minutes/index.js\");\nconst ucumUtils = (__webpack_require__(/*! @lhncbc/ucum-lhc */ \"(ssr)/../node_modules/.pnpm/@lhncbc+ucum-lhc@5.0.4/node_modules/@lhncbc/ucum-lhc/source-cjs/ucumPkg.js\").UcumLhcUtils).getInstance();\nconst numbers = __webpack_require__(/*! ./numbers */ \"(ssr)/../node_modules/.pnpm/fhirpath@3.18.0/node_modules/fhirpath/src/numbers.js\");\n\nconst ucumSystemUrl = 'http://unitsofmeasure.org';\nlet timeFormat =\n  '[0-9][0-9](\\\\:[0-9][0-9](\\\\:[0-9][0-9](\\\\.[0-9]+)?)?)?(Z|(\\\\+|-)[0-9][0-9]\\\\:[0-9][0-9])?';\nlet timeRE = new RegExp('^T?'+timeFormat+'$');\nlet dateTimeRE = new RegExp(\n  '^[0-9][0-9][0-9][0-9](-[0-9][0-9](-[0-9][0-9](T'+timeFormat+')?)?)?Z?$');\nlet dateRE = new RegExp(\n  '^[0-9][0-9][0-9][0-9](-[0-9][0-9](-[0-9][0-9])?)?$');\nlet instantRE = new RegExp(\n  '^[0-9][0-9][0-9][0-9](-[0-9][0-9](-[0-9][0-9](T[0-9][0-9](\\\\:[0-9][0-9](\\\\:[0-9][0-9](\\\\.[0-9]+)?))(Z|(\\\\+|-)[0-9][0-9]\\\\:[0-9][0-9]))))$');\n// FHIR date/time regular expressions are slightly different.  For now, we will\n// stick with the FHIRPath regular expressions.\n//let fhirTimeRE = /([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?/;\n//let fhirDateTimeRE =\n///([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?/;\n\n/**\n *   Class FP_Type is the superclass for FHIRPath types that required special\n *   handling.\n */\nclass FP_Type {\n  /**\n   *  Tests whether this object is equal to another.  Returns either true,\n   *  false, or undefined (where in the FHIRPath specification empty would be\n   *  returned).  The undefined return value indicates that the values were the\n   *  same to the shared precision, but that they had differnent levels of\n   *  precision.\n   */\n  equals(/* otherObj */) {\n    return false;\n  }\n\n  /**\n   *  Tests whether this object is equivalant to another.  Returns either true,\n   *  false, or undefined (where in the FHIRPath specification empty would be\n   *  returned).\n   */\n  equivalentTo(/* otherObj */) {\n    return false;\n  }\n\n  toString() {\n    return this.asStr ? this.asStr : super.toString();\n  }\n\n  toJSON() {\n    return this.toString();\n  }\n\n  /**\n   *  Returns -1, 0, or 1 if this object is less then, equal to, or greater\n   *  than otherObj.\n   */\n  compare(/* otherObj */) {\n    throw 'Comparison not implemented for ' + this.constructor.name;\n  }\n\n  /**\n   *  Adds other value to this value.\n   */\n  plus(/* otherObj */) {\n    throw 'Addition not implemented for ' + this.constructor.name;\n  }\n\n  /**\n   * Multiplies this value by another value.\n   */\n  mul(/* otherObj */) {\n    throw 'Multiplication not implemented for ' + this.constructor.name;\n  }\n\n  /**\n   * Divides this value by another value.\n   */\n  div(/* otherObj */) {\n    throw 'Division not implemented for ' + this.constructor.name;\n  }\n}\n\n\n/**\n *  A class for Quantities.\n */\nclass FP_Quantity extends FP_Type {\n  constructor(value, unit) {\n    super();\n    this.asStr = value + ' ' + unit;\n    this.value = value;\n    this.unit = unit;\n  }\n\n  equals(otherQuantity) {\n    if (!(otherQuantity instanceof this.constructor)) {\n      return false;\n    }\n\n    const thisUnitInSeconds = FP_Quantity._calendarDuration2Seconds[this.unit];\n    const otherUnitInSeconds = FP_Quantity._calendarDuration2Seconds[otherQuantity.unit];\n\n    if (\n      !thisUnitInSeconds !== !otherUnitInSeconds &&\n      (thisUnitInSeconds > 1 || otherUnitInSeconds > 1)\n    ) {\n      // If one of the operands is a calendar duration greater than seconds and\n      // another one is not a calendar duration, return empty result\n      return null;\n    }\n\n    if (this.unit === otherQuantity.unit) {\n      return numbers.isEqual(this.value, otherQuantity.value);\n    }\n\n    // Special year/month comparison case: 1 year = 12 month\n    const compareYearsAndMonths = this._compareYearsAndMonths(otherQuantity);\n    if (compareYearsAndMonths) {\n      return compareYearsAndMonths.isEqual;\n    }\n\n    // General comparison case\n    const thisQuantity = FP_Quantity.toUcumQuantity(this.value, this.unit),\n      normalizedOtherQuantity = FP_Quantity.toUcumQuantity(otherQuantity.value, otherQuantity.unit),\n      convResult = ucumUtils.convertUnitTo(normalizedOtherQuantity.unit, normalizedOtherQuantity.value, thisQuantity.unit);\n\n    if (convResult.status !== 'succeeded') {\n      return false;\n    }\n\n    return numbers.isEqual(thisQuantity.value, convResult.toVal);\n  }\n\n  equivalentTo(otherQuantity) {\n    if (!(otherQuantity instanceof this.constructor)) {\n      return false;\n    }\n\n    if (this.unit === otherQuantity.unit) {\n      return numbers.isEquivalent(this.value, otherQuantity.value);\n    }\n\n    const ucumUnitCode = FP_Quantity.getEquivalentUcumUnitCode(this.unit),\n      otherUcumUnitCode = FP_Quantity.getEquivalentUcumUnitCode(otherQuantity.unit),\n      convResult = ucumUtils.convertUnitTo(otherUcumUnitCode, otherQuantity.value, ucumUnitCode);\n\n    if (convResult.status !== 'succeeded') {\n      return false;\n    }\n\n    return numbers.isEquivalent(this.value, convResult.toVal);\n  }\n\n  /**\n   *  Returns a number less than 0, equal to 0 or greater than 0\n   *  if this quantity is less than, equal to, or greater than otherQuantity.\n   *  If the quantities could not be compared, returns null, which will be\n   *  converted to an empty collection in the \"doInvoke\" function\n   *  See https://hl7.org/fhirpath/#comparison\n   *  @param {FP_Quantity} otherQuantity\n   *  @return {number|null}\n   */\n  compare(otherQuantity) {\n    if (this.unit === otherQuantity.unit) {\n      return this.value - otherQuantity.value;\n    }\n\n    const thisUnitInSeconds = FP_Quantity._calendarDuration2Seconds[this.unit];\n    const otherUnitInSeconds = FP_Quantity._calendarDuration2Seconds[otherQuantity.unit];\n\n    if (\n      !thisUnitInSeconds !== !otherUnitInSeconds &&\n      (thisUnitInSeconds > 1 || otherUnitInSeconds > 1)\n    ) {\n      // If one of the operands is a calendar duration greater than seconds and\n      // another one is not a calendar duration, return empty result\n      // For example, 1 year > 1 'a' should return []\n      return null;\n    }\n\n    const ucumUnitCode = FP_Quantity.getEquivalentUcumUnitCode(this.unit),\n      otherUcumUnitCode = FP_Quantity.getEquivalentUcumUnitCode(otherQuantity.unit),\n      convResult = ucumUtils.convertUnitTo(otherUcumUnitCode, otherQuantity.value, ucumUnitCode);\n\n    if (convResult.status !== 'succeeded') {\n      return null;\n    }\n\n    return this.value - convResult.toVal;\n  }\n\n  /**\n   *  Adds a quantity to this quantity.\n   * @param {FP_Quantity} otherQuantity a quantity to be added to this quantity.\n   * @return {FP_Quantity|null}\n   */\n  plus(otherQuantity) {\n    const thisConvFactor = FP_Quantity._yearMonthConversionFactor[this.unit];\n    const otherConvFactor = FP_Quantity._yearMonthConversionFactor[otherQuantity.unit];\n    if (thisConvFactor && otherConvFactor) {\n      // If the values are indicated in years and months, we use the conversion factor: 1 year = 12 months\n      return new FP_Quantity(this.value + otherQuantity.value * otherConvFactor / thisConvFactor, this.unit);\n    }\n\n    const thisUnitInSeconds = FP_Quantity._calendarDuration2Seconds[this.unit];\n    const otherUnitInSeconds = FP_Quantity._calendarDuration2Seconds[otherQuantity.unit];\n\n    if (\n      !thisUnitInSeconds !== !otherUnitInSeconds &&\n      (thisUnitInSeconds > 1 || otherUnitInSeconds > 1)\n    ) {\n      // If one of the operands is a calendar duration greater than seconds and\n      // another one is not a calendar duration, return empty result\n      return null;\n    }\n\n    const thisUcumUnitCode = thisUnitInSeconds ? 's' : this.unit.replace(surroundingApostrophesRegex, '');\n    const thisValue = (thisUnitInSeconds || 1) * this.value;\n\n    const otherUcumUnitCode = otherUnitInSeconds ? 's' : otherQuantity.unit.replace(surroundingApostrophesRegex, '');\n    const otherValue = (otherUnitInSeconds || 1) * otherQuantity.value;\n\n    const convResult = ucumUtils.convertUnitTo(otherUcumUnitCode, otherValue, thisUcumUnitCode);\n\n    if (convResult.status !== 'succeeded'\n      || convResult.fromUnit.isSpecial_\n      || convResult.toUnit.isSpecial_) {\n      return null;\n    }\n\n    return new FP_Quantity(thisValue + convResult.toVal, thisUcumUnitCode);\n  }\n\n  /**\n   * Multiplies this quantity to another quantity.\n   * @param {FP_Quantity} otherQuantity a quantity by which to multiply this quantity.\n   * @return {FP_Quantity}\n   */\n  mul(otherQuantity) {\n    const thisUnitInSeconds = FP_Quantity._calendarDuration2Seconds[this.unit];\n    const otherUnitInSeconds = FP_Quantity._calendarDuration2Seconds[otherQuantity.unit];\n\n    if (\n      (thisUnitInSeconds > 1 && otherQuantity.unit !== \"'1'\") ||\n      (otherUnitInSeconds > 1 && this.unit !== \"'1'\")\n    ) {\n      // If one of the operands is a calendar duration greater than seconds and\n      // another one is not a number, return empty result\n      return null;\n    }\n\n    const thisQ = this.convToUcumUnits(this, thisUnitInSeconds);\n    if (!thisQ) {\n      // If the first operand is not a UCUM quantity or it has a special unit\n      return null;\n    }\n\n    const otherQ = this.convToUcumUnits(otherQuantity, otherUnitInSeconds);\n    if (!otherQ) {\n      // If the second operand is not a UCUM quantity or it has a special unit\n      return null;\n    }\n\n    // Do not use UCUM unit codes for durations in simple cases\n    if (this.unit === \"'1'\") {\n      return new FP_Quantity(this.value * otherQuantity.value, otherQuantity.unit);\n    } else if (otherQuantity.unit === \"'1'\") {\n      return new FP_Quantity(this.value * otherQuantity.value, this.unit);\n    }\n\n    return new FP_Quantity(\n      thisQ.value * otherQ.value,\n      `'(${thisQ.unit}).(${otherQ.unit})'`\n    );\n  }\n\n  /**\n   * Divides this quantity by another quantity.\n   * @param {FP_Quantity} otherQuantity a quantity by which to divide this quantity.\n   * @return {FP_Quantity}\n   */\n  div(otherQuantity) {\n    // Division by zero always gives an empty result\n    if (otherQuantity.value === 0) {\n      return null;\n    }\n\n    const thisUnitInSeconds = FP_Quantity._calendarDuration2Seconds[this.unit];\n    const otherUnitInSeconds = FP_Quantity._calendarDuration2Seconds[otherQuantity.unit];\n\n    if (thisUnitInSeconds) {\n      if (otherUnitInSeconds) {\n        // If both operands are calendar duration quantities\n        const thisConvFactor = FP_Quantity._yearMonthConversionFactor[this.unit];\n        const otherConvFactor = FP_Quantity._yearMonthConversionFactor[otherQuantity.unit];\n        if (thisConvFactor && otherConvFactor) {\n          // If the values are indicated in years and months, we use the conversion factor: 1 year = 12 months\n          return new FP_Quantity(this.value * thisConvFactor / (otherQuantity.value * otherConvFactor), \"'1'\");\n        }\n      } else if (otherQuantity.unit === \"'1'\") {\n        // If the second operand is a number\n        return new FP_Quantity(this.value / otherQuantity.value, this.unit);\n      } else if (thisUnitInSeconds > 1) {\n        // If the first operand is a calendar duration greater than seconds\n        // and the other is not a calendar duration or number, return an empty result.\n        return null;\n      }\n    } else if (otherUnitInSeconds > 1) {\n      // If the first operands is not a calendar duration and the other is a\n      // calendar duration greater than seconds, return an empty result.\n      return null;\n    }\n\n    const thisQ = this.convToUcumUnits(this, thisUnitInSeconds);\n    if (!thisQ) {\n      // If the first operand is not a UCUM quantity or it has a special unit\n      return null;\n    }\n\n    const otherQ = this.convToUcumUnits(otherQuantity, otherUnitInSeconds);\n    if (!otherQ) {\n      // If the second operand is not a UCUM quantity or it has a special unit\n      return null;\n    }\n\n    const resultUnit = otherQ.unit === '1'\n      ? thisQ.unit\n      : `(${thisQ.unit})/(${otherQ.unit})`;\n\n    const convResult = ucumUtils.convertToBaseUnits(resultUnit, thisQ.value / otherQ.value);\n    if (convResult.status !== 'succeeded') {\n      // If the result units are unclear\n      return null;\n    }\n    return new FP_Quantity(\n      convResult.magnitude,\n      `'${Object.keys(convResult.unitToExp).map(key => key+convResult.unitToExp[key]).join('.') || \"1\"}'`\n    );\n  }\n\n  /**\n   * Converts a quantity to UCUM unit if possible, otherwise returns null.\n   * @param {FP_Quantity} quantity - source quantity.\n   * @param {number|undefined} unitInSeconds - if the source quantity is a\n   *  calendar duration then the value of the quantity unit in seconds,\n   *  otherwise undefined.\n   * @return {{unit: string, value: number} | null}\n   */\n  convToUcumUnits(quantity, unitInSeconds) {\n    if (unitInSeconds) {\n      return {\n        value: unitInSeconds * quantity.value,\n        unit: 's'\n      };\n    } else {\n      const unit = quantity.unit.replace(surroundingApostrophesRegex, '');\n      const convRes = ucumUtils.convertToBaseUnits(unit, quantity.value);\n      if (convRes.status !== 'succeeded' || convRes.fromUnitIsSpecial) {\n        // If it is not a UCUM quantity or it has a special unit\n        return null;\n      }\n      return {\n        value: convRes.magnitude,\n        unit: Object.keys(convRes.unitToExp).map(key => key+convRes.unitToExp[key]).join('.') || \"1\"\n      };\n    }\n  }\n\n  /**\n   * If both quantities have one of these units: year or month,\n   * then a special case will apply; otherwise returns null.\n   * In the special case of comparison, the fact that 1 year = 12 months is used.\n   *\n   * Just note: in general, for a calendar duration:\n   * 1 year = 365 days\n   * 12 month = 12*30 days = 360 days\n   * so, 1 year != 12 month\n   * That's why this special case is needed\n   *\n   * @param {FP_Quantity} otherQuantity\n   * @return {null|{isEqual: boolean}}\n   * @private\n   */\n  _compareYearsAndMonths(otherQuantity) {\n    const magnitude1 = FP_Quantity._yearMonthConversionFactor[this.unit],\n      magnitude2 = FP_Quantity._yearMonthConversionFactor[otherQuantity.unit];\n\n    if ( magnitude1 && magnitude2) {\n      return {\n        isEqual: numbers.isEqual(this.value*magnitude1, otherQuantity.value*magnitude2)\n      };\n    }\n\n    return null;\n  }\n\n}\n\nconst  surroundingApostrophesRegex = /^'|'$/g;\n/**\n * Converts a FHIR path unit to a UCUM unit code by converting a calendar duration keyword to an equivalent UCUM unit code\n * or removing single quotes for a UCUM unit.\n * @param {string} unit\n * @return {string}\n */\nFP_Quantity.getEquivalentUcumUnitCode = function (unit) {\n  return FP_Quantity.mapTimeUnitsToUCUMCode[unit] || unit.replace(surroundingApostrophesRegex, '');\n};\n\n/**\n * Converts FHIR path value/unit to UCUM value/unit. Usable for comparison.\n * @param {number} value\n * @param {string} unit\n * @returns { {value: number, unit: string} }\n */\nFP_Quantity.toUcumQuantity = function (value, unit) {\n  const magnitude = FP_Quantity._calendarDuration2Seconds[unit];\n  if (magnitude) {\n    return {\n      value: magnitude * value,\n      unit: 's'\n    };\n  }\n\n  return {\n    value,\n    unit: unit.replace(surroundingApostrophesRegex, '')\n  };\n};\n\n\n/**\n * Converts FHIRPath value/unit to other FHIRPath value/unit.\n * @param {string} fromUnit\n * @param {number} value\n * @param {string} toUnit\n * @return {FP_Quantity|null}\n */\nFP_Quantity.convUnitTo = function (fromUnit, value, toUnit) {\n  // 1 Year <-> 12 Months\n  const fromYearMonthMagnitude = FP_Quantity._yearMonthConversionFactor[fromUnit],\n    toYearMonthMagnitude = FP_Quantity._yearMonthConversionFactor[toUnit];\n  if (fromYearMonthMagnitude && toYearMonthMagnitude) {\n    return new FP_Quantity( fromYearMonthMagnitude*value/toYearMonthMagnitude, toUnit);\n  }\n\n  const fromMagnitude = FP_Quantity._calendarDuration2Seconds[fromUnit],\n    toMagnitude = FP_Quantity._calendarDuration2Seconds[toUnit];\n\n  // To FHIR path calendar duration\n  if (toMagnitude) {\n    if (fromMagnitude) {\n      return new FP_Quantity( fromMagnitude*value/toMagnitude, toUnit);\n    } else {\n      const convResult = ucumUtils.convertUnitTo(fromUnit.replace(/^'|'$/g, ''), value, 's');\n\n      if (convResult.status === 'succeeded') {\n        return new FP_Quantity(convResult.toVal/toMagnitude, toUnit);\n      }\n    }\n  // To Ucum unit\n  } else {\n    const convResult = fromMagnitude ? ucumUtils.convertUnitTo('s', fromMagnitude*value, toUnit.replace(/^'|'$/g, ''))\n      : ucumUtils.convertUnitTo(fromUnit.replace(/^'|'$/g, ''), value, toUnit.replace(/^'|'$/g, ''));\n\n    if(convResult.status === 'succeeded') {\n      return new FP_Quantity(convResult.toVal, toUnit);\n    }\n  }\n\n  return null;\n};\n\n\n// Defines conversion factors for calendar durations\nFP_Quantity._calendarDuration2Seconds = {\n  'years': 365*24*60*60,\n  'months': 30*24*60*60,\n  'weeks': 7*24*60*60,\n  'days': 24*60*60,\n  'hours': 60*60,\n  'minutes': 60,\n  'seconds': 1,\n  'milliseconds': .001,\n  'year': 365*24*60*60,\n  'month': 30*24*60*60,\n  'week': 7*24*60*60,\n  'day': 24*60*60,\n  'hour': 60*60,\n  'minute': 60,\n  'second': 1,\n  'millisecond': .001\n};\n\n// Defines special case to compare years with months for calendar durations\nFP_Quantity._yearMonthConversionFactor = {\n  'years': 12,\n  'months': 1,\n  'year': 12,\n  'month': 1\n};\n\n/**\n *  Defines a map from time units that are supported for date/time arithmetic\n *  (including some UCUM time based units) to FHIRPath time units.\n */\nFP_Quantity.dateTimeArithmeticDurationUnits = {\n  'years': \"year\",\n  'months': \"month\",\n  'weeks': \"week\",\n  'days': \"day\",\n  'hours': \"hour\",\n  'minutes': \"minute\",\n  'seconds': \"second\",\n  'milliseconds': \"millisecond\",\n  'year': \"year\",\n  'month': \"month\",\n  'week': \"week\",\n  'day': \"day\",\n  'hour': \"hour\",\n  'minute': \"minute\",\n  'second': \"second\",\n  'millisecond': \"millisecond\",\n  \"'s'\": \"second\",\n  \"'ms'\": \"millisecond\"\n};\n\n/**\n *  Defines a map from UCUM code to FHIRPath time units.\n */\nFP_Quantity.mapUCUMCodeToTimeUnits = {\n  'a': \"year\",\n  'mo': \"month\",\n  'wk': \"week\",\n  'd': \"day\",\n  'h': \"hour\",\n  'min': \"minute\",\n  's': \"second\",\n  'ms': \"millisecond\",\n};\n\n/**\n *  Defines a map from FHIRPath time units to UCUM code.\n */\nFP_Quantity.mapTimeUnitsToUCUMCode = Object.keys(FP_Quantity.mapUCUMCodeToTimeUnits)\n  .reduce(function (res, key) {\n    res[FP_Quantity.mapUCUMCodeToTimeUnits[key]] = key;\n    res[FP_Quantity.mapUCUMCodeToTimeUnits[key]+'s'] = key;\n    return res;\n  }, {});\n\nclass FP_TimeBase extends FP_Type {\n  constructor(timeStr) {\n    super();\n    this.asStr = timeStr;\n  }\n\n  /**\n   *  Adds a time-based quantity to this date/time.\n   * @param timeQuantity a quantity to be added to this date/time.  See the\n   *  FHIRPath specification for supported units.\n   */\n  plus(timeQuantity) {\n    const unit = timeQuantity.unit;\n    let timeUnit = FP_Quantity.dateTimeArithmeticDurationUnits[unit];\n    if (!timeUnit) {\n      throw new Error('For date/time arithmetic, the unit of the quantity ' +\n        'must be one of the following time-based units: ' +\n        Object.keys(FP_Quantity.dateTimeArithmeticDurationUnits));\n    }\n    const cls = this.constructor;\n    const unitPrecision = cls._timeUnitToDatePrecision[timeUnit];\n    if (unitPrecision === undefined) {\n      throw new Error('Unsupported unit for +.  The unit should be one of ' +\n        Object.keys(cls._timeUnitToDatePrecision).join(', ') + '.');\n    }\n    let qVal = timeQuantity.value;\n    const isTime = (cls === FP_Time);\n\n    // From the FHIRPath specification: \"For precisions above seconds, the\n    // decimal portion of the time-valued quantity is ignored, since date/time\n    // arithmetic above seconds is performed with calendar duration semantics.\"\n    if (isTime ? unitPrecision < 2 : unitPrecision < 5) {\n      qVal = Math.trunc(qVal);\n    }\n\n    // If the precision of the time quantity is higher than the precision of the\n    // date, we need to convert the time quantity to the precision of the date.\n    if (this._getPrecision() < unitPrecision) {\n      const neededUnit = cls._datePrecisionToTimeUnit[\n        this._getPrecision()];\n      if (neededUnit !== 'second') {\n        const newQuantity = FP_Quantity.convUnitTo(timeUnit, qVal, neededUnit);\n        timeUnit = newQuantity.unit;\n        qVal = Math.trunc(newQuantity.value);\n      }\n    }\n    const newDate = FP_TimeBase.timeUnitToAddFn[timeUnit](this._getDateObj(), qVal);\n    // newDate is a Date.  We need to make a string with the correct precision.\n    let precision = this._getPrecision();\n    if (isTime)\n      precision += 3; // based on dateTimeRE, not timeRE\n    let newDateStr = FP_DateTime.isoDateTime(newDate, precision);\n    if (isTime) {\n      // FP_Time just needs the time part of the string\n      newDateStr = newDateStr.slice(newDateStr.indexOf('T') + 1);\n    }\n\n    return new cls(newDateStr);\n  }\n\n\n  /**\n   *  Tests whether this object is equal to another.  Returns either true,\n   *  false, or undefined (where in the FHIRPath specification empty would be\n   *  returned).  The undefined return value indicates that the values were the\n   *  same to the shared precision, but that they had differnent levels of\n   *  precision.\n   * @param otherDateTime any sub-type of FP_TimeBase, but it should be the same\n   *  as the type of \"this\".\n   */\n  equals(otherDateTime) {\n    // From the 2019May ballot:\n    // For Date, DateTime and Time equality, the comparison is performed by\n    // considering each precision in order, beginning with years (or hours for\n    // time values), and respecting timezone offsets. If the values are the\n    // same, comparison proceeds to the next precision; if the values are\n    // different, the comparison stops and the result is false. If one input has\n    // a value for the precision and the other does not, the comparison stops\n    // and the result is empty ({ }); if neither input has a value for the\n    // precision, or the last precision has been reached, the comparison stops\n    // and the result is true.\n    // Note:  Per the spec above\n    //   2012-01 = 2012 //  empty\n    //   2012-01 = 2011 //  false\n    //   2012-01 ~ 2012 //  false\n    var rtn;\n    if (!(otherDateTime instanceof this.constructor) && !(this instanceof otherDateTime.constructor))\n      rtn = false;\n    else {\n      var thisPrec  = this._getPrecision();\n      var otherPrec = otherDateTime._getPrecision();\n\n      if (thisPrec == otherPrec) {\n        rtn = this._getDateObj().getTime() == otherDateTime._getDateObj().getTime();\n      }\n      else {\n        // The dates are not equal, but decide whether to return empty or false.\n        var commonPrec  = thisPrec <= otherPrec ? thisPrec : otherPrec;\n        // Adjust for timezone offsets, if any, so they are at a common timezone\n        var thisUTCStr  = this._getDateObj().toISOString();\n        var otherUTCStr = otherDateTime._getDateObj().toISOString();\n\n        if (this.constructor === FP_Time) {\n          commonPrec += 3; // because we now have year, month, and day\n          thisPrec += 3;\n          otherPrec += 3;\n        }\n\n        // Now parse the strings and compare the adjusted time parts.\n        // Dates without time specify no timezone and should be treated as already normalized to UTC. So we do not adjust the timezone, as this would change the date\n        var thisAdj  = thisPrec > 2 ? (new FP_DateTime(thisUTCStr))._getTimeParts() : this._getTimeParts();\n        var otherAdj = otherPrec > 2 ? (new FP_DateTime(otherUTCStr))._getTimeParts() : otherDateTime._getTimeParts();\n\n        for (var i = 0; i <= commonPrec && rtn !== false; ++i) {\n          rtn = thisAdj[i] == otherAdj[i];\n        }\n        // if rtn is still true, then return empty to indicate the difference in\n        // precision.\n        if (rtn)\n          rtn = undefined;\n      }\n    }\n    // else return undefined (empty)\n    return rtn;\n  }\n\n\n  /**\n   *  Tests whether this object is equivalant to another.  Returns either true\n   *  or false.\n   */\n  equivalentTo(otherDateTime) {\n    var rtn = otherDateTime instanceof this.constructor;\n    if (rtn) {\n      var thisPrec = this._getPrecision();\n      var otherPrec = otherDateTime._getPrecision();\n      rtn = thisPrec == otherPrec;\n      if (rtn) {\n        rtn = this._getDateObj().getTime() ==\n          otherDateTime._getDateObj().getTime();\n      }\n    }\n    return rtn;\n  }\n\n\n  /**\n   *  Returns a number less than 0, equal to 0 or greater than 0\n   *  if this (date) time is less than, equal to, or greater than otherTime.\n   *  Comparisons are made at the lesser of the two time precisions.\n   *  @param {FP_TimeBase} otherTime\n   *  @return {number}\n   */\n  compare(otherTime) {\n    var thisPrecision = this._getPrecision();\n    var otherPrecision = otherTime._getPrecision();\n    var thisTimeInt = thisPrecision <= otherPrecision ?\n      this._getDateObj().getTime(): this._dateAtPrecision(otherPrecision).getTime();\n    var otherTimeInt = otherPrecision <= thisPrecision ?\n      otherTime._getDateObj().getTime(): otherTime._dateAtPrecision(thisPrecision).getTime();\n    if (thisPrecision !== otherPrecision && thisTimeInt === otherTimeInt) {\n      return null;\n    }\n    return thisTimeInt - otherTimeInt;\n  }\n\n\n  /**\n   *  Returns a number representing the precision of the time string given to\n   *  the constructor.  (Higher means more precise).  The number is the number\n   *  of components of the time string (ignoring the time zone) produced by\n   *  matching against the time regular expression, except that milliseconds\n   *  and seconds are counted together as a single of level of precision.\n   *  @return {number}\n   */\n  _getPrecision() {\n    if (this.precision === undefined)\n      this._getMatchData();\n    return this.precision;\n  }\n\n  /**\n   *  Returns the match data from matching the given RegExp against the\n   *  date/time string given to the constructor.\n   *  Also sets this.precision.\n   * @param regEx The regular expression to match against the date/time string.\n   * @param maxPrecision the maximum precision possible for the type\n   */\n  _getMatchData(regEx, maxPrecision) {\n    if (this.timeMatchData === undefined) {\n      this.timeMatchData = this.asStr.match(regEx);\n      if (this.timeMatchData) {\n        for (let i=maxPrecision; i>=0 && this.precision === undefined; --i) {\n          if (this.timeMatchData[i])\n            this.precision = i;\n        }\n      }\n    }\n    return this.timeMatchData;\n  }\n\n  /**\n   *  Returns an array of the pieces of the given time string, for use in\n   *  constructing lower precision versions of the time. The returned array will\n   *  contain separate elements for the hour, minutes, seconds, and milliseconds\n   *  (or as many of those are as present).  The length of the returned array\n   *  will therefore be an indication of the precision.\n   *  It will not include the timezone.\n   * @timeMatchData the result of matching the time portion of the string passed\n   *  into the constructor against the \"timeRE\" regular expression.\n   */\n  _getTimeParts(timeMatchData) {\n    var timeParts = [];\n    // Finish parsing the data into pieces, for later use in building\n    // lower-precision versions of the date if needed.\n    timeParts = [timeMatchData[0]];\n    var timeZone = timeMatchData[4];\n    if (timeZone) { // remove time zone from hours\n      let hours = timeParts[0];\n      timeParts[0] = hours.slice(0, hours.length-timeZone.length);\n    }\n    var min = timeMatchData[1];\n    if (min) { // remove minutes from hours\n      let hours = timeParts[0];\n      timeParts[0] = hours.slice(0, hours.length-min.length);\n      timeParts[1] = min;\n      var sec = timeMatchData[2];\n      if (sec) { // remove seconds from minutes\n        timeParts[1] = min.slice(0, min.length-sec.length);\n        timeParts[2] = sec;\n        var ms = timeMatchData[3];\n        if (ms) { // remove milliseconds from seconds\n          timeParts[2] = sec.slice(0, sec.length-ms.length);\n          timeParts[3] = ms;\n        }\n      }\n    }\n    return timeParts;\n  }\n\n\n  /**\n   *  Returns a date object representing this time on a certain date.\n   */\n  _getDateObj() {\n    if (!this.dateObj) {\n      var precision = this._getPrecision();\n      // We cannot directly pass the string into the date constructor because\n      // (1) we don't want to introduce a time-dependent system date and (2) the\n      // time string might not have contained minutes, which are required by the\n      // Date constructor.\n      this.dateObj = this._dateAtPrecision(precision);\n    }\n    return this.dateObj;\n  }\n\n\n  /**\n   *  Creates a date object for the given timezone.  The returned date object\n   *  will have the specified date and time in the specified timezone.\n   * @param year...ms Just as in the Date constructor.\n   * @param timezoneOffset (optional) a string in the format (+-)HH:mm or Z, representing the\n   *  timezone offset.  If not provided, the local timzone will be assumed (as the\n   *  Date constructor does).\n   */\n  _createDate(year, month, day, hour, minutes, seconds, ms, timezoneOffset) {\n    var d = new Date(year, month, day, hour, minutes, seconds, ms);\n    if (timezoneOffset) {\n      // d is in local time.  Adjust for the timezone offset.\n      // First adjust the date by the timezone offset before reducing its\n      // precision.  Otherwise,\n      // @2018-11-01T-04:00 < @2018T-05:00\n      var localTimezoneMinutes = d.getTimezoneOffset();\n      var timezoneMinutes = 0; // if Z\n      if (timezoneOffset != 'Z') {\n        var timezoneParts = timezoneOffset.split(':'); // (+-)hours:minutes\n        var hours = parseInt(timezoneParts[0]);\n        timezoneMinutes = parseInt(timezoneParts[1]);\n        if (hours < 0)\n          timezoneMinutes = -timezoneMinutes;\n        timezoneMinutes += 60*hours;\n      }\n      // localTimezoneMinutes has the inverse sign of its timezone offset\n      d = addMinutes(d, -localTimezoneMinutes-timezoneMinutes);\n    }\n    return d;\n  }\n}\n\n/**\n *  A map from a FHIRPath time units to a function used to add that\n *  quantity to a date/time.\n */\nFP_TimeBase.timeUnitToAddFn = {\n  \"year\": __webpack_require__(/*! date-fns/add_years */ \"(ssr)/../node_modules/.pnpm/date-fns@1.30.1/node_modules/date-fns/add_years/index.js\"),\n  \"month\": __webpack_require__(/*! date-fns/add_months */ \"(ssr)/../node_modules/.pnpm/date-fns@1.30.1/node_modules/date-fns/add_months/index.js\"),\n  \"week\": __webpack_require__(/*! date-fns/add_weeks */ \"(ssr)/../node_modules/.pnpm/date-fns@1.30.1/node_modules/date-fns/add_weeks/index.js\"),\n  \"day\": __webpack_require__(/*! date-fns/add_days */ \"(ssr)/../node_modules/.pnpm/date-fns@1.30.1/node_modules/date-fns/add_days/index.js\"),\n  \"hour\": __webpack_require__(/*! date-fns/add_hours */ \"(ssr)/../node_modules/.pnpm/date-fns@1.30.1/node_modules/date-fns/add_hours/index.js\"),\n  \"minute\": __webpack_require__(/*! date-fns/add_minutes */ \"(ssr)/../node_modules/.pnpm/date-fns@1.30.1/node_modules/date-fns/add_minutes/index.js\"),\n  \"second\": __webpack_require__(/*! date-fns/add_seconds */ \"(ssr)/../node_modules/.pnpm/date-fns@1.30.1/node_modules/date-fns/add_seconds/index.js\"),\n  \"millisecond\": __webpack_require__(/*! date-fns/add_milliseconds */ \"(ssr)/../node_modules/.pnpm/date-fns@1.30.1/node_modules/date-fns/add_milliseconds/index.js\")\n};\n\n\nclass FP_DateTime extends FP_TimeBase {\n  /**\n   *  Constructs an FP_DateTime, assuming dateStr is valid.  If you don't know\n   *  whether a string is a valid DateTime, use FP_DateTime.checkString instead.\n   */\n  constructor(dateStr) {\n    super(dateStr);\n  }\n\n\n  /**\n   *  Returns -1, 0, or 1 if this date time is less then, equal to, or greater\n   *  than otherDateTime.  Comparisons are made at the lesser of the two date time\n   *  precisions.\n   */\n  compare(otherDateTime) {\n    if (!(otherDateTime instanceof FP_DateTime))\n      throw 'Invalid comparison of a DateTime with something else';\n    return super.compare(otherDateTime);\n  }\n\n\n  /**\n   *  Returns the match data from matching dateTimeRE against the datetime string.\n   *  Also sets this.precision.\n   */\n  _getMatchData() {\n    return super._getMatchData(dateTimeRE, 5);\n  }\n\n  /**\n   *  Returns an array of the pieces of the date time string passed into the\n   *  constructor, for use in constructing lower precision versions of the\n   *  date time. The returned array will contain separate elements for the year,\n   *  month, day, hour, minutes, seconds, and milliseconds (or as many of those\n   *  are as present).  The length of the returned array will therefore be an\n   *  indication of the precision.  It will not include the timezone.\n   */\n  _getTimeParts() {\n    if (!this.timeParts) {\n      let timeMatchData =  this._getMatchData();\n      let year = timeMatchData[0];\n      this.timeParts = [year];\n      var month = timeMatchData[1];\n      if (month) { // Remove other information from year\n        this.timeParts[0] = year.slice(0, year.length-month.length);\n        this.timeParts[1] = month;\n        let day = timeMatchData[2];\n        if (day) { // Remove day information from month\n          this.timeParts[1] = month.slice(0, month.length-day.length);\n          this.timeParts[2] = day;\n          let time = timeMatchData[3];\n          if (time) { // Remove time from day\n            this.timeParts[2] = day.slice(0, day.length-time.length);\n            if (time[0] === 'T') // remove T from hour\n              timeMatchData[3] = time.slice(1);\n            this.timeParts = this.timeParts.concat(\n              super._getTimeParts(timeMatchData.slice(3)));\n          }\n        }\n      }\n    }\n    return this.timeParts;\n  }\n\n\n  /**\n   *  Returns a new Date object for a time equal to what this time would be if\n   *  the string passed into the constructor had the given precision.\n   * @param precision the new precision, which is assumed to be less than\n   *  or equal to the current precision.\n   */\n  _dateAtPrecision(precision) {\n    var timeParts = this._getTimeParts();\n    var timezoneOffset = this._getMatchData()[7];\n    // Get the date object first at the current precision.\n    var thisPrecision = this._getPrecision();\n    var year = parseInt(timeParts[0]);\n    var month = thisPrecision > 0 ? parseInt(timeParts[1].slice(1)) - 1 : 0;\n    var day = thisPrecision > 1 ? parseInt(timeParts[2].slice(1)) : 1;\n    var hour = thisPrecision > 2 ? parseInt(timeParts[3]) : 0;\n    var minutes = thisPrecision > 3 ? parseInt(timeParts[4].slice(1)): 0;\n    var seconds = thisPrecision > 4 ? parseInt(timeParts[5].slice(1)): 0;\n    var ms = timeParts.length > 6 ? parseInt(timeParts[6].slice(1)): 0;\n    var d = this._createDate(year, month, day, hour, minutes, seconds, ms,\n      timezoneOffset);\n    if (precision < thisPrecision) {\n      // Adjust the precision\n      year = d.getFullYear();\n      month = precision > 0 ? d.getMonth() : 0;\n      day = precision > 1 ? d.getDate() : 1;\n      hour = precision > 2 ? d.getHours() : 0;\n      minutes = precision > 3 ? d.getMinutes(): 0;\n      // Here the precision will always be less than the maximum\n      // due to the condition in the if statement: \"precision < thisPrecision\"\n      d = new Date(year, month, day, hour, minutes);\n    }\n    return d;\n  }\n}\n\n/**\n *  Tests str to see if it is convertible to a DateTime.\n * @return If str is convertible to a DateTime, returns an FP_DateTime;\n *  otherwise returns null.\n */\nFP_DateTime.checkString = function(str) {\n  let d = new FP_DateTime(str);\n  if (!d._getMatchData())\n    d = null;\n  return d;\n};\n\n/**\n *  A map from FHIRPath time units to the internal DateTime \"precision\" number.\n */\nFP_DateTime._timeUnitToDatePrecision = {\n  \"year\": 0,\n  \"month\": 1,\n  \"week\": 2, // wk is just 7*d\n  \"day\": 2,\n  \"hour\": 3,\n  \"minute\": 4,\n  \"second\": 5,\n  \"millisecond\": 6\n};\n\n/**\n *  The inverse of _timeUnitToDatePrecision.\n */\nFP_DateTime._datePrecisionToTimeUnit = [\n  \"year\", \"month\", \"day\", \"hour\", \"minute\", \"second\", \"millisecond\"\n];\n\n\n\nclass FP_Time extends FP_TimeBase {\n  /**\n   *  Constructs an FP_Time, assuming dateStr is valid.  If you don't know\n   *  whether a string is a valid DateTime, use FP_Time.checkString instead.\n   */\n  constructor(timeStr) {\n    if (timeStr[0] == 'T')\n      timeStr = timeStr.slice(1);\n    super(timeStr);\n  }\n\n\n  /**\n   *  Returns -1, 0, or 1 if this time is less then, equal to, or greater\n   *  than otherTime.  Comparisons are made at the lesser of the two time\n   *  precisions.\n   */\n  compare(otherTime) {\n    if (!(otherTime instanceof FP_Time))\n      throw 'Invalid comparison of a time with something else';\n    return super.compare(otherTime);\n  }\n\n\n  /**\n   *  Returns a new Date object for a time equal to what this time would be if\n   *  the string passed into the constructor had the given precision.\n   *  The \"date\" portion of the returned Date object is not meaningful, and\n   *  should be ignored.\n   * @param precision the new precision, which is assumed to be less than the\n   *  or equal to the current precision.  A precision of 0 means the hour.\n   */\n  _dateAtPrecision(precision) {\n    var timeParts = this._getTimeParts();\n    var timezoneOffset = this._getMatchData()[4];\n    // Get the date object first at the current precision.\n    var thisPrecision = this._getPrecision();\n    var year = 2010; // Have to pick some year for the date object\n    var month = 0;\n    var day = 1;\n    var hour = parseInt(timeParts[0]);\n    var minutes = thisPrecision > 0 ? parseInt(timeParts[1].slice(1)): 0;\n    var seconds = thisPrecision > 1 ? parseInt(timeParts[2].slice(1)): 0;\n    var ms = timeParts.length > 3 ? parseInt(timeParts[3].slice(1)): 0;\n    var d = this._createDate(year, month, day, hour, minutes, seconds, ms,\n      timezoneOffset);\n    if (timezoneOffset) {\n      // Keep the date the same (in the local timezone), so it is not a relevant\n      // factor when comparing different times.\n      d.setYear(year);\n      d.setMonth(month);\n      d.setDate(day);\n    }\n    if (precision < thisPrecision) {\n      // Adjust the precision\n      hour = d.getHours();\n      minutes = precision > 0 ? d.getMinutes(): 0;\n      // Here the precision will always be less than the maximum\n      // due to the condition in the if statement: \"precision < thisPrecision\"\n      d = new Date(year, month, day, hour, minutes);\n    }\n    return d;\n  }\n\n\n  /**\n   *  Returns the match data from matching timeRE against the time string.\n   *  Also sets this.precision.\n   */\n  _getMatchData() {\n    return super._getMatchData(timeRE, 2);\n  }\n\n  /**\n   *  Returns an array of the pieces of the time string passed into the\n   *  constructor, for use in constructing lower precision versions of the\n   *  time. The returned array will contain separate elements for the hour,\n   *  minutes, seconds, and milliseconds (or as many of those are as present).\n   *  The length of the returned array will therefore be an indication of the\n   *  precision.  It will not include the timezone.\n   */\n  _getTimeParts() {\n    if (!this.timeParts) {\n      this.timeParts = super._getTimeParts(this._getMatchData());\n    }\n    return this.timeParts;\n  }\n}\n\n/**\n *  Tests str to see if it is convertible to a Time.\n * @return If str is convertible to a Time, returns an FP_Time;\n *  otherwise returns null.\n */\nFP_Time.checkString = function(str) {\n  let d = new FP_Time(str);\n  if (!d._getMatchData())\n    d = null;\n  return d;\n};\n\n/**\n *  A map from FHIRPath time units to the internal DateTime \"precision\" number.\n */\nFP_Time._timeUnitToDatePrecision = {\n  \"hour\": 0,\n  \"minute\": 1,\n  \"second\": 2,\n  \"millisecond\": 3\n};\n\n/**\n *  The inverse of _timeUnitToDatePrecision.\n */\nFP_Time._datePrecisionToTimeUnit = [\"hour\", \"minute\", \"second\", \"millisecond\"];\n\n\n/**\n *  Returns either the given number or a string with the number prefixed by\n *  zeros if the given number is less than the given length.\n * @param num the nubmer to format\n * @param len the number of returned digits.  For now this must either be 2 or\n *  3. (Optional-- default is 2).\n */\nfunction formatNum(num, len) {\n  // Could use String.repeat, but that requires convertin num to an string first\n  // to get its length.  This might be slightly faster given that we only need 2\n  // or three 3 digit return values.\n  var rtn = num;\n  if (len === 3 && num < 100)\n    rtn = '0' + num;\n  if (num < 10)\n    rtn = '0' + rtn;\n  return rtn;\n}\n\n\n/**\n *  Formats the given date object into an ISO8601 datetime string, expressing it\n *  in the local timezone.\n * @date the date to format\n * @precision the precision at which to terminate string string.  (This is\n *  optional). If present, it will be an integer into the matching components of\n *  dateTimeRE.\n * @return a string in ISO8601 format.\n */\nFP_DateTime.isoDateTime = function(date, precision) {\n  if (precision === undefined)\n    precision = 5; // maximum\n  // YYYY-MM-DDTHH:mm:ss.sss[+-]HH:mm\n  // Note:  Date.toISOString sets the timezone at 'Z', which I did not want.\n  // Actually, I wanted to keep the original timezone given in the constructor,\n  // but that is difficult due to daylight savings time changes.  (For instance,\n  // if you add 6 months, the timezone offset could change).\n  var rtn = '' + date.getFullYear();\n  if (precision > 0) {\n    rtn += '-' + formatNum(date.getMonth() + 1);\n    if (precision > 1) {\n      rtn += '-' + formatNum(date.getDate());\n      if (precision > 2) {\n        rtn += 'T' + FP_DateTime.isoTime(date, precision - 3);\n      }\n    }\n  }\n  // FHIRPath STU1 does not allow a timezone offset on a dateTime that does not\n  // have a time part (except that the grammar allows 'Z', which is\n  // inconsistent).\n  if (precision > 2) {\n    // Note:  getTimezoneoffset returns the offset for the local system at the\n    // given date.\n    var tzOffset = date.getTimezoneOffset();\n    // tzOffset is a number of minutes, and is positive for negative timezones,\n    // and negative for positive timezones.\n    var tzSign = tzOffset < 0 ? '+' : '-';\n    tzOffset = Math.abs(tzOffset);\n    var tzMin = tzOffset % 60;\n    var tzHour = (tzOffset - tzMin) / 60;\n    rtn += tzSign + formatNum(tzHour) + ':' + formatNum(tzMin);\n  }\n  return rtn;\n};\n\n\n/**\n *  Returns a time string in ISO format at the given precision level.\n * @date the date to format\n * @precision the precision at which to terminate string.  (This is\n *  optional). If present, it will be an integer into the matching components of\n *  timeRE.\n * @return a string in ISO 8601 format.\n */\nFP_DateTime.isoTime = function(date, precision) {\n  if (precision === undefined)\n    precision = 2; // maximum\n\n  let rtn = '' + formatNum(date.getHours());\n  if (precision > 0) {\n    rtn += ':' + formatNum(date.getMinutes());\n    if (precision > 1) {\n      rtn += ':' + formatNum(date.getSeconds() );\n      if (date.getMilliseconds())\n        rtn += '.' + formatNum(date.getMilliseconds(), 3);\n    }\n  }\n  return rtn;\n};\n\n\nclass FP_Date extends FP_DateTime {\n  /**\n   * Constructs an FP_Date, assuming dateStr is valid.  If you don't know\n   * whether a string is a valid Date, use FP_Date.checkString instead.\n   */\n  constructor(dateStr) {\n    super(dateStr);\n  }\n\n\n  /**\n   * Returns the match data from matching dateRE against the date string.\n   * Also sets this.precision.\n   */\n  _getMatchData() {\n    return FP_TimeBase.prototype._getMatchData.apply(this, [dateRE, 2]);\n  }\n}\n\n\n/**\n * Tests str to see if it is convertible to a Date.\n * @return If str is convertible to a Date, returns an FP_Date;\n *  otherwise returns null.\n */\nFP_Date.checkString = function(str) {\n  let d = new FP_Date(str);\n  if (!d._getMatchData())\n    d = null;\n  return d;\n};\n\n\n/**\n * Returns a date string in ISO format at the given precision level.\n * @date the date to format\n * @precision the precision at which to terminate string.  (This is\n *  optional). If present, it will be an integer into the matching components of\n *  dateTimeRE.\n * @return a string in ISO8601 format.\n */\nFP_Date.isoDate = function(date, precision) {\n  if (precision === undefined || precision > 2)\n    precision = 2;\n  return FP_DateTime.isoDateTime(date, precision);\n};\n\nclass FP_Instant extends FP_DateTime {\n  /**\n   * Constructs an FP_Instant, assuming instantStr is valid.  If you don't know\n   * whether a string is a valid \"instant\", use FP_Instant.checkString instead.\n   */\n  constructor(instantStr) {\n    super(instantStr);\n  }\n\n\n  /**\n   * Returns the match data from matching instantRE against the \"instant\" string.\n   * Also sets this.precision.\n   */\n  _getMatchData() {\n    return FP_TimeBase.prototype._getMatchData.apply(this, [instantRE, 5]);\n  }\n}\n\n\n/**\n * Tests str to see if it is convertible to an \"instant\".\n * @return If str match the \"instant\" RegExp, returns an FP_Instant;\n *  otherwise returns null.\n */\nFP_Instant.checkString = function(str) {\n  let d = new FP_Instant(str);\n  if (!d._getMatchData())\n    d = null;\n  return d;\n};\n\n/**\n *  A class that represents a node in a FHIR resource, with path and possibly type\n *  information.\n */\nclass ResourceNode {\n  /**\n   *  Constructs a instance for the given node (\"data\") of a resource.  If the\n   *  data is the top-level node of a resouce, the path and type parameters will\n   *  be ignored in favor of the resource's resourceType field.\n   * @param {*} data - the node's data or value (which might be an object with\n   *  sub-nodes, an array, or FHIR data type)\n   * @param {ResourceNode} parentResNode - parent ResourceNode.\n   * @param {string} path - the node's path in the resource (e.g. Patient.name).\n   *  If the data's type can be determined from data, that will take precedence\n   *  over this parameter.\n   * @param {*} _data - additional data stored in a property named with \"_\"\n   *  prepended, see https://www.hl7.org/fhir/element.html#json for details.\n   * @param {string} fhirNodeDataType - FHIR node data type, if the resource node\n   *  is described in the FHIR model.\n   *  @param {Object} model - the model object specific to a domain, e.g. R4.\n   */\n  constructor(data, parentResNode, path, _data, fhirNodeDataType, model) {\n    // If data is a resource (maybe a contained resource) reset the path\n    // information to the resource type.\n    if (data?.resourceType) {\n      path = data.resourceType;\n      fhirNodeDataType = data.resourceType;\n    }\n    this.parentResNode = parentResNode || null;\n    this.path = path || null;\n    this.data = data;\n    this._data = _data || {};\n    this.fhirNodeDataType = fhirNodeDataType || null;\n    this.model = model || null;\n  }\n\n  /**\n   * Returns resource node type info.\n   * @return {TypeInfo}\n   */\n  getTypeInfo() {\n    if (!this.typeInfo) {\n      let typeInfo;\n\n      if (this.fhirNodeDataType) {\n        if (/^System\\.(.*)$/.test(this.fhirNodeDataType)) {\n          typeInfo = new TypeInfo({namespace: TypeInfo.System, name: RegExp.$1});\n        } else {\n          typeInfo = new TypeInfo({\n            namespace: TypeInfo.FHIR,\n            name: this.fhirNodeDataType\n          });\n        }\n      }\n\n      this.typeInfo = typeInfo\n        // Resource object properties that are not defined in the model now have\n        // System.* data types:\n        || TypeInfo.createByValueInSystemNamespace(this.data);\n    }\n    return this.typeInfo;\n  }\n\n  toJSON() {\n    return JSON.stringify(this.data);\n  }\n\n  /**\n   * Converts a resource node value to an instance of the FHIRPath system type\n   * (FP_Quantity, FP_Date, FP_DateTime, or FP_Time) for use in evaluating\n   * a FHIRPath expression if the node path matches the specified type in the\n   * model and when conversion is possible, otherwise returns the data as is.\n   * Throws an exception if the data is a Quantity that has a comparator.\n   * The Mapping from FHIR Quantity to FHIRPath System.Quantity is explained here:\n   * https://www.hl7.org/fhir/fhirpath.html#quantity\n   * this.data is not changed, but converted value is returned.\n   * @return {FP_Type|any}\n   */\n  convertData() {\n    if (!this.convertedData) {\n      var data = this.data;\n      if (data != null) {\n        const cls = TypeInfo.typeToClassWithCheckString[this.path];\n        if (cls) {\n          data = cls.checkString(data) || data;\n        } else if (TypeInfo.isType(this.path, 'Quantity', this.model)) {\n          if (data?.system === ucumSystemUrl) {\n            if (typeof data.value === 'number' && typeof data.code === 'string') {\n              if (data.comparator !== undefined)\n                throw new Error('Cannot convert a FHIR.Quantity that has a comparator');\n              data = new FP_Quantity(\n                data.value,\n                FP_Quantity.mapUCUMCodeToTimeUnits[data.code] || '\\'' + data.code + '\\''\n              );\n            }\n          }\n        }\n      }\n\n      this.convertedData = data;\n    }\n    return this.convertedData;\n  }\n\n}\n\n\n/**\n *  Returns a ResourceNode for the given data node, checking first to see if the\n *  given node is already a ResourceNode.  Takes the same arguments as the\n *  constructor for ResourceNode.\n */\nResourceNode.makeResNode = function(data, parentResNode, path, _data, fhirNodeDataType, model) {\n  return (data instanceof ResourceNode) ? data : new ResourceNode(data, parentResNode, path, _data, fhirNodeDataType, model);\n};\n\n// The set of available data types in the System namespace\nconst availableSystemTypes = new Set();\n// IE11 probably doesn't support `new Set(iterable)`\n['Boolean', 'String', 'Integer', 'Decimal', 'Date', 'DateTime', 'Time', 'Quantity'].forEach(i => availableSystemTypes.add(i));\n\n/**\n * Object class defining type information.\n * Used for minimal type support.\n * (see http://hl7.org/fhirpath/#types-and-reflection)\n */\nclass TypeInfo {\n  constructor({name, namespace}) {\n    this.name = name;\n    this.namespace = namespace;\n  }\n\n  // The \"model\" data object specific to a domain, e.g. R4.\n  static model = null;\n\n  /**\n   * Checks for equality with another TypeInfo object, or that another TypeInfo\n   * object specifies a superclass for the type specified by this object.\n   * @param {TypeInfo} other - the TypeInfo object to compare with.\n   * @param {Object} model - the model object specific to a domain, e.g. R4.\n   * @return {boolean}\n   */\n  is(other, model) {\n    if (\n      other instanceof TypeInfo &&\n      (!this.namespace || !other.namespace || this.namespace === other.namespace)\n    ) {\n      return model && (!this.namespace || this.namespace === TypeInfo.FHIR)\n        ? TypeInfo.isType(this.name, other.name, model)\n        : this.name === other.name;\n    }\n    return false;\n  }\n\n  /**\n   * Returns the string representation of type info.\n   * @returns {string}\n   */\n  toString() {\n    return (this.namespace ? this.namespace + '.' : '') + this.name;\n  }\n\n  /**\n   * Returns true if type info represents a valid type identifier, false otherwise.\n   * @param {Object} model - the model object specific to a domain, e.g. R4.\n   * @returns {boolean}\n   */\n  isValid(model) {\n    let result = false;\n    if (this.namespace === 'System') {\n      result = availableSystemTypes.has(this.name);\n    } else if (this.namespace === 'FHIR') {\n      result = model.availableTypes.has(this.name);\n    } else if (!this.namespace) {\n      result = availableSystemTypes.has(this.name)\n        || model.availableTypes.has(this.name);\n    }\n    return result;\n  }\n}\n\n/**\n * Defines a map from a datatype to a datatype class which has a checkString method.\n * @type {Object.<string, FP_DateTime | FP_Time>}\n */\nTypeInfo.typeToClassWithCheckString = {\n  date: FP_Date,\n  dateTime: FP_DateTime,\n  instant: FP_Instant,\n  time: FP_Time\n};\n\n/**\n * Checks if the type name or its parent type name is equal to\n * the expected type name.\n * @param type - type name to check.\n * @param superType - expected type name.\n * @param model - the model object specific to a domain, e.g. R4.\n * @return {boolean}\n */\nTypeInfo.isType = function(type, superType, model) {\n  do {\n    if (type === superType) {\n      return true;\n    }\n  } while ((type = model?.type2Parent[type]));\n  return false;\n};\n\n// Available namespaces:\nTypeInfo.System = 'System';\nTypeInfo.FHIR = 'FHIR';\n\n/**\n * Creates new TypeInfo object for specified value in the System namespace.\n * @param {*} value\n * @return {TypeInfo}\n */\nTypeInfo.createByValueInSystemNamespace = function(value) {\n  let name = typeof value;\n\n  if (Number.isInteger(value)) {\n    name = 'integer';\n  } else if (name === \"number\") {\n    name = 'decimal';\n  } else if (value instanceof FP_Date) {\n    name = 'date';\n  } else if (value instanceof FP_DateTime) {\n    name = 'dateTime';\n  } else if (value instanceof FP_Time) {\n    name = 'time';\n  } else if (value instanceof FP_Quantity) {\n    name = 'Quantity';\n  }\n\n  name = name.replace(/^\\w/, c => c.toUpperCase());\n\n  // Currently can return name = \"Object\" which is probably wrong,\n  // but the isValid method allows you to check this.\n  return new TypeInfo({namespace: TypeInfo.System, name}) ;\n};\n\n/**\n * Retrieves TypeInfo by value\n * @param {*} value\n * @return {TypeInfo}\n */\nTypeInfo.fromValue = function (value) {\n  return value instanceof ResourceNode\n    ? value.getTypeInfo()\n    : TypeInfo.createByValueInSystemNamespace(value);\n};\n\n/**\n * Set of primitive data type names.\n */\nconst primitives = new Set();\n// IE11 probably doesn't support `new Set(iterable)`\n[\n  \"instant\",\n  \"time\",\n  \"date\",\n  \"dateTime\",\n  \"base64Binary\",\n  \"decimal\",\n  \"integer64\",\n  \"boolean\",\n  \"string\",\n  \"code\",\n  \"markdown\",\n  \"id\",\n  \"integer\",\n  \"unsignedInt\",\n  \"positiveInt\",\n  \"uri\",\n  \"oid\",\n  \"uuid\",\n  \"canonical\",\n  \"url\",\n  \"Integer\",\n  \"Decimal\",\n  \"String\",\n  \"Date\",\n  \"DateTime\",\n  \"Time\"\n].forEach(i => primitives.add(i));\n\n/**\n * Checks whether the specified type information contains a primitive data type.\n * @param {TypeInfo} typeInfo\n * @return {boolean}\n */\nTypeInfo.isPrimitive = function(typeInfo) {\n  return primitives.has(typeInfo.name);\n};\n\n/**\n * Checks whether the specified value is of a primitive data type.\n * @param {*} value - The value to check.\n * @returns {boolean} - Returns true if the value is a primitive data type,\n *  otherwise false.\n */\n\nTypeInfo.isPrimitiveValue = function(value) {\n  if (value instanceof ResourceNode) {\n    return primitives.has(value.getTypeInfo().name);\n  } else {\n    // Simplified check for primitive data types:\n    return typeof value !== 'object' || value instanceof FP_Type;\n  }\n};\n\n/**\n * Basic \"type()\" function implementation\n * (see http://hl7.org/fhirpath/#reflection)\n * @param {Array<*>} coll - input collection\n * @return {Array<*>}\n */\nfunction typeFn(coll) {\n  return coll.map(value => {\n    return TypeInfo.fromValue(value);\n  });\n}\n\n/**\n * Implementation of function \"is(type : type specifier)\" and operator \"is\"\n * (see http://hl7.org/fhirpath/#is-type-specifier)\n * @param {Array<*>} coll - input collection\n * @param {TypeInfo} typeInfo\n * @return {boolean|[]}\n */\nfunction isFn(coll, typeInfo) {\n  if(coll.length === 0) {\n    return [];\n  }\n\n  if(coll.length > 1) {\n    throw new Error(\"Expected singleton on left side of 'is', got \" + JSON.stringify(coll));\n  }\n\n  const ctx = this;\n\n  return TypeInfo.fromValue(coll[0]).is(typeInfo, ctx.model);\n}\n\n/**\n * Implementation of function \"as(type : type specifier)\" and operator \"as\"\n * (see http://hl7.org/fhirpath/#as-type-specifier)\n * @param {Array<*>} coll - input collection\n * @param {TypeInfo} typeInfo\n * @return {Array<*>}\n */\nfunction asFn(coll, typeInfo) {\n  if(coll.length === 0) {\n    return [];\n  }\n\n  if(coll.length > 1) {\n    throw new Error(\"Expected singleton on left side of 'as', got \" + JSON.stringify(coll));\n  }\n\n  const ctx = this;\n  return TypeInfo.fromValue(coll[0]).is(typeInfo, ctx.model) ? coll : [];\n}\n\nmodule.exports = {\n  FP_Type,\n  FP_TimeBase,\n  FP_Date,\n  FP_DateTime,\n  FP_Instant,\n  FP_Time,\n  FP_Quantity,\n  timeRE,\n  dateTimeRE,\n  dateRE,\n  instantRE,\n  ResourceNode,\n  TypeInfo,\n  typeFn,\n  isFn,\n  asFn\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/fhirpath@3.18.0/node_modules/fhirpath/src/types.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/fhirpath@3.18.0/node_modules/fhirpath/src/utilities.js":
/*!************************************************************************************!*\
  !*** ../node_modules/.pnpm/fhirpath@3.18.0/node_modules/fhirpath/src/utilities.js ***!
  \************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// This file holds utility functions used in implementing the public functions.\n\nconst util =  {};\nconst types = __webpack_require__(/*! ./types */ \"(ssr)/../node_modules/.pnpm/fhirpath@3.18.0/node_modules/fhirpath/src/types.js\");\nconst {ResourceNode} = types;\n\n/**\n *  Reports and error to the calling environment and stops processing.\n * @param message the error message\n * @param fnName the name of the function raising the error (optional)\n */\nutil.raiseError = function(message, fnName) {\n  fnName = fnName ? fnName + \": \" : \"\";\n  throw fnName + message;\n};\n\n/**\n *  Throws an exception if the collection contains not one value.\n * @param collection the collection to be checked.\n * @param errorMsgPrefix An optional prefix for the error message to assist in\n *  debugging.\n */\nutil.assertOnlyOne = function (collection, errorMsgPrefix) {\n  if (collection.length !== 1) {\n    util.raiseError(\"Was expecting only one element but got \" +\n      JSON.stringify(collection), errorMsgPrefix);\n  }\n};\n\n/**\n *  Throws an exception if the data is not one of the expected types.\n * @param data the value to be checked.  This may be a ResourceNode.\n * @param types an array of the permitted types\n * @param errorMsgPrefix An optional prefix for the error message to assist in\n *  debugging.\n * @return the value that was checked.  If \"data\" was a ResourceNode, this will\n *  be the ReourceNode's data.\n */\nutil.assertType = function(data, types, errorMsgPrefix) {\n  let val = this.valData(data);\n  if (types.indexOf(typeof val) < 0) {\n    let typeList = types.length > 1 ? \"one of \"+types.join(\", \") : types[0];\n    util.raiseError(\"Found type '\"+(typeof data)+\"' but was expecting \" +\n      typeList, errorMsgPrefix);\n  }\n  return val;\n};\n\nutil.isEmpty = function(x){\n  return Array.isArray(x) && x.length === 0;\n};\n\nutil.isSome = function(x){\n  return x !== null && x !== undefined && !util.isEmpty(x);\n};\n\nutil.isTrue = function(x){\n  // We use util.valData because we can use a boolean node as a criterion\n  return x !== null && x !== undefined && (x === true || (x.length === 1 && util.valData(x[0]) === true));\n};\n\nutil.isCapitalized = function(x){\n  return x && (x[0] === x[0].toUpperCase());\n};\n\nutil.capitalize = function(x){\n  return x[0].toUpperCase() + x.substring(1);\n};\n\nutil.flatten = function(x){\n  if (x.some(i => i instanceof Promise)) {\n    return Promise.all(x).then(arr => flattenSync(arr));\n  }\n  return flattenSync(x);\n};\n\n/**\n * Creates a shallow copy of the source array and replaces those elements of the\n * source array that are arrays with their contents.\n * For example:\n * [1, [2, 3]] -> [1, 2, 3]\n * @param {Array} x - source array\n * @return {Array}\n */\nfunction flattenSync(x) {\n  return [].concat(...x);\n}\n\nutil.arraify = function(x){\n  if(Array.isArray(x)){ return x; }\n  if(util.isSome(x)){ return [x]; }\n  return [];\n};\n\n/**\n * If the input parameter is a promise, arraify the result of that promise,\n * otherwise arraify the input parameter.\n * @param {*|Promise<*>} x - input parameter\n * @return {*[]|Promise<*[]>}\n */\nutil.resolveAndArraify = function(x){\n  return x instanceof Promise\n    ? x.then(r => util.arraify(r))\n    : util.arraify(x);\n};\n\n/**\n *  Returns the data value of the given parameter, which might be a ResourceNode.\n *  Otherwise, it returns the value that was passed in.\n */\nutil.valData = function(val) {\n  return (val instanceof ResourceNode) ? val.data : val;\n};\n\n/**\n *  Returns the data value of the given parameter, which might be a ResourceNode.\n *  Otherwise, it returns the value that was passed in.  In the case of a\n *  ResourceNode that is a Quantity, the returned value will have been converted\n *  to an FP_Quantity.\n */\nutil.valDataConverted = function(val) {\n  if (val instanceof ResourceNode) {\n    val = val.convertData();\n  }\n  return val;\n};\n\n/**\n * Prepares a string for insertion into a regular expression\n * @param {string} str\n * @return {string}\n */\nutil.escapeStringForRegExp = function (str) {\n  return str.replace(/[-[\\]{}()*+?.,\\\\/^$|#\\s]/g, '\\\\$&');\n};\n\n/**\n * Binding to the Array.prototype.push.apply function to define a function to\n * push the contents of the source array to the destination array.\n * @name pushFn\n * @function\n * @param {Array} destArray - destination array\n * @param {Array} sourceArray - source array\n * @returns the new length property of destArray\n */\nutil.pushFn = Function.prototype.apply.bind(Array.prototype.push);\n\n/**\n * Creates child resource nodes for the specified resource node property.\n * @param {ResourceNode} parentResNode - resource node\n * @param {string} childProperty - name of property\n * @param {object} [model] - \"model\" data object\n * @return {ResourceNode[]}\n */\nutil.makeChildResNodes = function(parentResNode, childProperty, model) {\n  let childPath = parentResNode.path + '.' + childProperty;\n\n  if (model) {\n    let defPath = model.pathsDefinedElsewhere[childPath];\n    if (defPath)\n      childPath = defPath;\n  }\n  let toAdd, _toAdd;\n  let actualTypes = model && model.choiceTypePaths[childPath];\n  if (actualTypes) {\n    // Use actualTypes to find the field's value\n    for (let t of actualTypes) {\n      let field = childProperty + t;\n      toAdd = parentResNode.data?.[field];\n      _toAdd = parentResNode.data?.['_' + field];\n      if (toAdd !== undefined || _toAdd !== undefined) {\n        childPath += t;\n        break;\n      }\n    }\n  }\n  else {\n    toAdd = parentResNode.data?.[childProperty];\n    _toAdd = parentResNode.data?.['_' + childProperty];\n    if (toAdd === undefined && _toAdd === undefined) {\n      toAdd = parentResNode._data[childProperty];\n    }\n    if (childProperty === 'extension') {\n      childPath = 'Extension';\n    }\n  }\n\n  let fhirNodeDataType = null;\n  if (model) {\n    fhirNodeDataType = model.path2Type[childPath];\n    childPath = model.path2TypeWithoutElements[childPath] || childPath;\n  }\n\n  let result;\n  if (util.isSome(toAdd) || util.isSome(_toAdd)) {\n    if(Array.isArray(toAdd)) {\n      result = toAdd.map((x, i)=>\n        ResourceNode.makeResNode(x, parentResNode, childPath, _toAdd && _toAdd[i], fhirNodeDataType, model));\n      // Add items to the end of the ResourceNode list that have no value\n      // but have associated data, such as extensions or ids.\n      const _toAddLength = _toAdd?.length || 0;\n      for (let i = toAdd.length; i < _toAddLength; ++i) {\n        result.push(ResourceNode.makeResNode(null, parentResNode, childPath, _toAdd[i], fhirNodeDataType, model));\n      }\n    } else if (toAdd == null && Array.isArray(_toAdd)) {\n      // Add items to the end of the ResourceNode list when there are no\n      // values at all, but there is a list of associated data, such as\n      // extensions or ids.\n      result = _toAdd.map((x) => ResourceNode.makeResNode(null, parentResNode, childPath, x, fhirNodeDataType, model));\n    } else {\n      result = [ResourceNode.makeResNode(toAdd, parentResNode, childPath, _toAdd, fhirNodeDataType, model)];\n    }\n  } else {\n    result = [];\n  }\n  return result;\n};\n\n\n// Object for storing fetch promises.\nconst requestCache = {};\n// Duration of data storage in cache.\nconst requestCacheStorageTime = 3600000; // 1 hour = 60 * 60 * 1000\n\n\n/**\n * fetch() wrapper for caching server responses.\n * @param {string} url - a URL of the resource you want to fetch.\n * @param {object} [options] - optional object containing any custom settings\n *  that you want to apply to the request.\n * @return {Promise}\n */\nutil.fetchWithCache = function(url, options) {\n  const requestKey = [\n    url, options ? JSON.stringify(options) : ''\n  ].join('|');\n\n  const timestamp = Date.now();\n  for (const key in requestCache) {\n    if (timestamp - requestCache[key].timestamp > requestCacheStorageTime) {\n      // Remove responses older than an hour\n      delete requestCache[key];\n    }\n  }\n\n  if (!requestCache[requestKey]) {\n    requestCache[requestKey] = {\n      timestamp,\n      // In Jest unit tests, a promise returned by 'fetch' is not an instance of\n      // Promise that we have in our application context, so we use Promise.resolve\n      // to do the conversion.\n      promise: Promise.resolve(options ? fetch(url, options) : fetch(url))\n        .then(r => {\n          const contentType = r.headers.get('Content-Type');\n          const isJson = contentType.includes('application/json') ||\n            contentType.includes('application/fhir+json');\n          try {\n            if (isJson) {\n              return r.json().then((json) => r.ok ? json : Promise.reject(json));\n            } else {\n              return r.text().then((text) => Promise.reject(text));\n            }\n          } catch (e) {\n            return Promise.reject(new Error(e));\n          }\n        })\n    };\n  }\n\n  return requestCache[requestKey].promise;\n};\n\n\nmodule.exports = util;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/fhirpath@3.18.0/node_modules/fhirpath/src/utilities.js\n");

/***/ })

};
;