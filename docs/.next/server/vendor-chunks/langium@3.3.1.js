"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/langium@3.3.1";
exports.ids = ["vendor-chunks/langium@3.3.1"];
exports.modules = {

/***/ "(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/default-module.js":
/*!**************************************************************************************!*\
  !*** ../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/default-module.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createDefaultCoreModule: () => (/* binding */ createDefaultCoreModule),\n/* harmony export */   createDefaultSharedCoreModule: () => (/* binding */ createDefaultSharedCoreModule)\n/* harmony export */ });\n/* harmony import */ var _languages_grammar_config_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./languages/grammar-config.js */ \"(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/languages/grammar-config.js\");\n/* harmony import */ var _parser_completion_parser_builder_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./parser/completion-parser-builder.js */ \"(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/parser/completion-parser-builder.js\");\n/* harmony import */ var _parser_langium_parser_builder_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./parser/langium-parser-builder.js */ \"(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/parser/langium-parser-builder.js\");\n/* harmony import */ var _parser_token_builder_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./parser/token-builder.js */ \"(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/parser/token-builder.js\");\n/* harmony import */ var _parser_value_converter_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./parser/value-converter.js */ \"(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/parser/value-converter.js\");\n/* harmony import */ var _references_linker_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./references/linker.js */ \"(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/references/linker.js\");\n/* harmony import */ var _references_name_provider_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./references/name-provider.js */ \"(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/references/name-provider.js\");\n/* harmony import */ var _references_references_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./references/references.js */ \"(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/references/references.js\");\n/* harmony import */ var _references_scope_computation_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./references/scope-computation.js */ \"(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/references/scope-computation.js\");\n/* harmony import */ var _references_scope_provider_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./references/scope-provider.js */ \"(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/references/scope-provider.js\");\n/* harmony import */ var _serializer_json_serializer_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./serializer/json-serializer.js */ \"(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/serializer/json-serializer.js\");\n/* harmony import */ var _service_registry_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./service-registry.js */ \"(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/service-registry.js\");\n/* harmony import */ var _validation_document_validator_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./validation/document-validator.js */ \"(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/validation/document-validator.js\");\n/* harmony import */ var _validation_validation_registry_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./validation/validation-registry.js */ \"(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/validation/validation-registry.js\");\n/* harmony import */ var _workspace_ast_descriptions_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./workspace/ast-descriptions.js */ \"(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/workspace/ast-descriptions.js\");\n/* harmony import */ var _workspace_ast_node_locator_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./workspace/ast-node-locator.js */ \"(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/workspace/ast-node-locator.js\");\n/* harmony import */ var _workspace_configuration_js__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./workspace/configuration.js */ \"(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/workspace/configuration.js\");\n/* harmony import */ var _workspace_document_builder_js__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./workspace/document-builder.js */ \"(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/workspace/document-builder.js\");\n/* harmony import */ var _workspace_documents_js__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./workspace/documents.js */ \"(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/workspace/documents.js\");\n/* harmony import */ var _workspace_index_manager_js__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./workspace/index-manager.js */ \"(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/workspace/index-manager.js\");\n/* harmony import */ var _workspace_workspace_manager_js__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./workspace/workspace-manager.js */ \"(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/workspace/workspace-manager.js\");\n/* harmony import */ var _parser_lexer_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./parser/lexer.js */ \"(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/parser/lexer.js\");\n/* harmony import */ var _documentation_documentation_provider_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./documentation/documentation-provider.js */ \"(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/documentation/documentation-provider.js\");\n/* harmony import */ var _documentation_comment_provider_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./documentation/comment-provider.js */ \"(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/documentation/comment-provider.js\");\n/* harmony import */ var _parser_langium_parser_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./parser/langium-parser.js */ \"(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/parser/langium-parser.js\");\n/* harmony import */ var _parser_async_parser_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./parser/async-parser.js */ \"(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/parser/async-parser.js\");\n/* harmony import */ var _workspace_workspace_lock_js__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./workspace/workspace-lock.js */ \"(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/workspace/workspace-lock.js\");\n/* harmony import */ var _serializer_hydrator_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./serializer/hydrator.js */ \"(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/serializer/hydrator.js\");\n/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n******************************************************************************/\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * Creates a dependency injection module configuring the default core services.\n * This is a set of services that are dedicated to a specific language.\n */\nfunction createDefaultCoreModule(context) {\n    return {\n        documentation: {\n            CommentProvider: (services) => new _documentation_comment_provider_js__WEBPACK_IMPORTED_MODULE_0__.DefaultCommentProvider(services),\n            DocumentationProvider: (services) => new _documentation_documentation_provider_js__WEBPACK_IMPORTED_MODULE_1__.JSDocDocumentationProvider(services)\n        },\n        parser: {\n            AsyncParser: (services) => new _parser_async_parser_js__WEBPACK_IMPORTED_MODULE_2__.DefaultAsyncParser(services),\n            GrammarConfig: (services) => (0,_languages_grammar_config_js__WEBPACK_IMPORTED_MODULE_3__.createGrammarConfig)(services),\n            LangiumParser: (services) => (0,_parser_langium_parser_builder_js__WEBPACK_IMPORTED_MODULE_4__.createLangiumParser)(services),\n            CompletionParser: (services) => (0,_parser_completion_parser_builder_js__WEBPACK_IMPORTED_MODULE_5__.createCompletionParser)(services),\n            ValueConverter: () => new _parser_value_converter_js__WEBPACK_IMPORTED_MODULE_6__.DefaultValueConverter(),\n            TokenBuilder: () => new _parser_token_builder_js__WEBPACK_IMPORTED_MODULE_7__.DefaultTokenBuilder(),\n            Lexer: (services) => new _parser_lexer_js__WEBPACK_IMPORTED_MODULE_8__.DefaultLexer(services),\n            ParserErrorMessageProvider: () => new _parser_langium_parser_js__WEBPACK_IMPORTED_MODULE_9__.LangiumParserErrorMessageProvider(),\n            LexerErrorMessageProvider: () => new _parser_lexer_js__WEBPACK_IMPORTED_MODULE_8__.DefaultLexerErrorMessageProvider()\n        },\n        workspace: {\n            AstNodeLocator: () => new _workspace_ast_node_locator_js__WEBPACK_IMPORTED_MODULE_10__.DefaultAstNodeLocator(),\n            AstNodeDescriptionProvider: (services) => new _workspace_ast_descriptions_js__WEBPACK_IMPORTED_MODULE_11__.DefaultAstNodeDescriptionProvider(services),\n            ReferenceDescriptionProvider: (services) => new _workspace_ast_descriptions_js__WEBPACK_IMPORTED_MODULE_11__.DefaultReferenceDescriptionProvider(services)\n        },\n        references: {\n            Linker: (services) => new _references_linker_js__WEBPACK_IMPORTED_MODULE_12__.DefaultLinker(services),\n            NameProvider: () => new _references_name_provider_js__WEBPACK_IMPORTED_MODULE_13__.DefaultNameProvider(),\n            ScopeProvider: (services) => new _references_scope_provider_js__WEBPACK_IMPORTED_MODULE_14__.DefaultScopeProvider(services),\n            ScopeComputation: (services) => new _references_scope_computation_js__WEBPACK_IMPORTED_MODULE_15__.DefaultScopeComputation(services),\n            References: (services) => new _references_references_js__WEBPACK_IMPORTED_MODULE_16__.DefaultReferences(services)\n        },\n        serializer: {\n            Hydrator: (services) => new _serializer_hydrator_js__WEBPACK_IMPORTED_MODULE_17__.DefaultHydrator(services),\n            JsonSerializer: (services) => new _serializer_json_serializer_js__WEBPACK_IMPORTED_MODULE_18__.DefaultJsonSerializer(services)\n        },\n        validation: {\n            DocumentValidator: (services) => new _validation_document_validator_js__WEBPACK_IMPORTED_MODULE_19__.DefaultDocumentValidator(services),\n            ValidationRegistry: (services) => new _validation_validation_registry_js__WEBPACK_IMPORTED_MODULE_20__.ValidationRegistry(services)\n        },\n        shared: () => context.shared\n    };\n}\n/**\n * Creates a dependency injection module configuring the default shared core services.\n * This is the set of services that are shared between multiple languages.\n */\nfunction createDefaultSharedCoreModule(context) {\n    return {\n        ServiceRegistry: (services) => new _service_registry_js__WEBPACK_IMPORTED_MODULE_21__.DefaultServiceRegistry(services),\n        workspace: {\n            LangiumDocuments: (services) => new _workspace_documents_js__WEBPACK_IMPORTED_MODULE_22__.DefaultLangiumDocuments(services),\n            LangiumDocumentFactory: (services) => new _workspace_documents_js__WEBPACK_IMPORTED_MODULE_22__.DefaultLangiumDocumentFactory(services),\n            DocumentBuilder: (services) => new _workspace_document_builder_js__WEBPACK_IMPORTED_MODULE_23__.DefaultDocumentBuilder(services),\n            IndexManager: (services) => new _workspace_index_manager_js__WEBPACK_IMPORTED_MODULE_24__.DefaultIndexManager(services),\n            WorkspaceManager: (services) => new _workspace_workspace_manager_js__WEBPACK_IMPORTED_MODULE_25__.DefaultWorkspaceManager(services),\n            FileSystemProvider: (services) => context.fileSystemProvider(services),\n            WorkspaceLock: () => new _workspace_workspace_lock_js__WEBPACK_IMPORTED_MODULE_26__.DefaultWorkspaceLock(),\n            ConfigurationProvider: (services) => new _workspace_configuration_js__WEBPACK_IMPORTED_MODULE_27__.DefaultConfigurationProvider(services)\n        }\n    };\n}\n//# sourceMappingURL=default-module.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/default-module.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/dependency-injection.js":
/*!********************************************************************************************!*\
  !*** ../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/dependency-injection.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Module: () => (/* binding */ Module),\n/* harmony export */   eagerLoad: () => (/* binding */ eagerLoad),\n/* harmony export */   inject: () => (/* binding */ inject)\n/* harmony export */ });\n/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\nvar Module;\n(function (Module) {\n    Module.merge = (m1, m2) => _merge(_merge({}, m1), m2);\n})(Module || (Module = {}));\n/**\n * Given a set of modules, the inject function returns a lazily evaluated injector\n * that injects dependencies into the requested service when it is requested the\n * first time. Subsequent requests will return the same service.\n *\n * In the case of cyclic dependencies, an Error will be thrown. This can be fixed\n * by injecting a provider `() => T` instead of a `T`.\n *\n * Please note that the arguments may be objects or arrays. However, the result will\n * be an object. Using it with for..of will have no effect.\n *\n * @param module1 first Module\n * @param module2 (optional) second Module\n * @param module3 (optional) third Module\n * @param module4 (optional) fourth Module\n * @param module5 (optional) fifth Module\n * @param module6 (optional) sixth Module\n * @param module7 (optional) seventh Module\n * @param module8 (optional) eighth Module\n * @param module9 (optional) ninth Module\n * @returns a new object of type I\n */\nfunction inject(module1, module2, module3, module4, module5, module6, module7, module8, module9) {\n    const module = [module1, module2, module3, module4, module5, module6, module7, module8, module9].reduce(_merge, {});\n    return _inject(module);\n}\nconst isProxy = Symbol('isProxy');\n/**\n * Eagerly load all services in the given dependency injection container. This is sometimes\n * necessary because services can register event listeners in their constructors.\n */\nfunction eagerLoad(item) {\n    if (item && item[isProxy]) {\n        for (const value of Object.values(item)) {\n            eagerLoad(value);\n        }\n    }\n    return item;\n}\n/**\n * Helper function that returns an injector by creating a proxy.\n * Invariant: injector is of type I. If injector is undefined, then T = I.\n */\nfunction _inject(module, injector) {\n    const proxy = new Proxy({}, {\n        deleteProperty: () => false,\n        set: () => {\n            throw new Error('Cannot set property on injected service container');\n        },\n        get: (obj, prop) => {\n            if (prop === isProxy) {\n                return true;\n            }\n            else {\n                return _resolve(obj, prop, module, injector || proxy);\n            }\n        },\n        getOwnPropertyDescriptor: (obj, prop) => (_resolve(obj, prop, module, injector || proxy), Object.getOwnPropertyDescriptor(obj, prop)), // used by for..in\n        has: (_, prop) => prop in module, // used by ..in..\n        ownKeys: () => [...Object.getOwnPropertyNames(module)] // used by for..in\n    });\n    return proxy;\n}\n/**\n * Internally used to tag a requested dependency, directly before calling the factory.\n * This allows us to find cycles during instance creation.\n */\nconst __requested__ = Symbol();\n/**\n * Returns the value `obj[prop]`. If the value does not exist, yet, it is resolved from\n * the module description. The result of service factories is cached. Groups are\n * recursively proxied.\n *\n * @param obj an object holding all group proxies and services\n * @param prop the key of a value within obj\n * @param module an object containing groups and service factories\n * @param injector the first level proxy that provides access to all values\n * @returns the requested value `obj[prop]`\n * @throws Error if a dependency cycle is detected\n */\nfunction _resolve(obj, prop, module, injector) {\n    if (prop in obj) {\n        if (obj[prop] instanceof Error) {\n            throw new Error('Construction failure. Please make sure that your dependencies are constructable.', { cause: obj[prop] });\n        }\n        if (obj[prop] === __requested__) {\n            throw new Error('Cycle detected. Please make \"' + String(prop) + '\" lazy. Visit https://langium.org/docs/reference/configuration-services/#resolving-cyclic-dependencies');\n        }\n        return obj[prop];\n    }\n    else if (prop in module) {\n        const value = module[prop];\n        obj[prop] = __requested__;\n        try {\n            obj[prop] = (typeof value === 'function') ? value(injector) : _inject(value, injector);\n        }\n        catch (error) {\n            obj[prop] = error instanceof Error ? error : undefined;\n            throw error;\n        }\n        return obj[prop];\n    }\n    else {\n        return undefined;\n    }\n}\n/**\n * Performs a deep-merge of two modules by writing source entries into the target module.\n *\n * @param target the module which is written\n * @param source the module which is read\n * @returns the target module\n */\nfunction _merge(target, source) {\n    if (source) {\n        for (const [key, value2] of Object.entries(source)) {\n            if (value2 !== undefined) {\n                const value1 = target[key];\n                if (value1 !== null && value2 !== null && typeof value1 === 'object' && typeof value2 === 'object') {\n                    target[key] = _merge(value1, value2);\n                }\n                else {\n                    target[key] = value2;\n                }\n            }\n        }\n    }\n    return target;\n}\n//# sourceMappingURL=dependency-injection.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2xhbmdpdW1AMy4zLjEvbm9kZV9tb2R1bGVzL2xhbmdpdW0vbGliL2RlcGVuZGVuY3ktaW5qZWN0aW9uLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0EsK0NBQStDO0FBQy9DLENBQUMsd0JBQXdCO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUCxzSEFBc0g7QUFDdEg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QjtBQUM5QjtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0hBQWtILGtCQUFrQjtBQUNwSTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL2V0aGFua2ltL05lc3Rvci9tZWRmZXRjaC5qcy9ub2RlX21vZHVsZXMvLnBucG0vbGFuZ2l1bUAzLjMuMS9ub2RlX21vZHVsZXMvbGFuZ2l1bS9saWIvZGVwZW5kZW5jeS1pbmplY3Rpb24uanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuICogQ29weXJpZ2h0IDIwMjEgVHlwZUZveCBHbWJIXG4gKiBUaGlzIHByb2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzIGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0aGVcbiAqIHRlcm1zIG9mIHRoZSBNSVQgTGljZW5zZSwgd2hpY2ggaXMgYXZhaWxhYmxlIGluIHRoZSBwcm9qZWN0IHJvb3QuXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuZXhwb3J0IHZhciBNb2R1bGU7XG4oZnVuY3Rpb24gKE1vZHVsZSkge1xuICAgIE1vZHVsZS5tZXJnZSA9IChtMSwgbTIpID0+IF9tZXJnZShfbWVyZ2Uoe30sIG0xKSwgbTIpO1xufSkoTW9kdWxlIHx8IChNb2R1bGUgPSB7fSkpO1xuLyoqXG4gKiBHaXZlbiBhIHNldCBvZiBtb2R1bGVzLCB0aGUgaW5qZWN0IGZ1bmN0aW9uIHJldHVybnMgYSBsYXppbHkgZXZhbHVhdGVkIGluamVjdG9yXG4gKiB0aGF0IGluamVjdHMgZGVwZW5kZW5jaWVzIGludG8gdGhlIHJlcXVlc3RlZCBzZXJ2aWNlIHdoZW4gaXQgaXMgcmVxdWVzdGVkIHRoZVxuICogZmlyc3QgdGltZS4gU3Vic2VxdWVudCByZXF1ZXN0cyB3aWxsIHJldHVybiB0aGUgc2FtZSBzZXJ2aWNlLlxuICpcbiAqIEluIHRoZSBjYXNlIG9mIGN5Y2xpYyBkZXBlbmRlbmNpZXMsIGFuIEVycm9yIHdpbGwgYmUgdGhyb3duLiBUaGlzIGNhbiBiZSBmaXhlZFxuICogYnkgaW5qZWN0aW5nIGEgcHJvdmlkZXIgYCgpID0+IFRgIGluc3RlYWQgb2YgYSBgVGAuXG4gKlxuICogUGxlYXNlIG5vdGUgdGhhdCB0aGUgYXJndW1lbnRzIG1heSBiZSBvYmplY3RzIG9yIGFycmF5cy4gSG93ZXZlciwgdGhlIHJlc3VsdCB3aWxsXG4gKiBiZSBhbiBvYmplY3QuIFVzaW5nIGl0IHdpdGggZm9yLi5vZiB3aWxsIGhhdmUgbm8gZWZmZWN0LlxuICpcbiAqIEBwYXJhbSBtb2R1bGUxIGZpcnN0IE1vZHVsZVxuICogQHBhcmFtIG1vZHVsZTIgKG9wdGlvbmFsKSBzZWNvbmQgTW9kdWxlXG4gKiBAcGFyYW0gbW9kdWxlMyAob3B0aW9uYWwpIHRoaXJkIE1vZHVsZVxuICogQHBhcmFtIG1vZHVsZTQgKG9wdGlvbmFsKSBmb3VydGggTW9kdWxlXG4gKiBAcGFyYW0gbW9kdWxlNSAob3B0aW9uYWwpIGZpZnRoIE1vZHVsZVxuICogQHBhcmFtIG1vZHVsZTYgKG9wdGlvbmFsKSBzaXh0aCBNb2R1bGVcbiAqIEBwYXJhbSBtb2R1bGU3IChvcHRpb25hbCkgc2V2ZW50aCBNb2R1bGVcbiAqIEBwYXJhbSBtb2R1bGU4IChvcHRpb25hbCkgZWlnaHRoIE1vZHVsZVxuICogQHBhcmFtIG1vZHVsZTkgKG9wdGlvbmFsKSBuaW50aCBNb2R1bGVcbiAqIEByZXR1cm5zIGEgbmV3IG9iamVjdCBvZiB0eXBlIElcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGluamVjdChtb2R1bGUxLCBtb2R1bGUyLCBtb2R1bGUzLCBtb2R1bGU0LCBtb2R1bGU1LCBtb2R1bGU2LCBtb2R1bGU3LCBtb2R1bGU4LCBtb2R1bGU5KSB7XG4gICAgY29uc3QgbW9kdWxlID0gW21vZHVsZTEsIG1vZHVsZTIsIG1vZHVsZTMsIG1vZHVsZTQsIG1vZHVsZTUsIG1vZHVsZTYsIG1vZHVsZTcsIG1vZHVsZTgsIG1vZHVsZTldLnJlZHVjZShfbWVyZ2UsIHt9KTtcbiAgICByZXR1cm4gX2luamVjdChtb2R1bGUpO1xufVxuY29uc3QgaXNQcm94eSA9IFN5bWJvbCgnaXNQcm94eScpO1xuLyoqXG4gKiBFYWdlcmx5IGxvYWQgYWxsIHNlcnZpY2VzIGluIHRoZSBnaXZlbiBkZXBlbmRlbmN5IGluamVjdGlvbiBjb250YWluZXIuIFRoaXMgaXMgc29tZXRpbWVzXG4gKiBuZWNlc3NhcnkgYmVjYXVzZSBzZXJ2aWNlcyBjYW4gcmVnaXN0ZXIgZXZlbnQgbGlzdGVuZXJzIGluIHRoZWlyIGNvbnN0cnVjdG9ycy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGVhZ2VyTG9hZChpdGVtKSB7XG4gICAgaWYgKGl0ZW0gJiYgaXRlbVtpc1Byb3h5XSkge1xuICAgICAgICBmb3IgKGNvbnN0IHZhbHVlIG9mIE9iamVjdC52YWx1ZXMoaXRlbSkpIHtcbiAgICAgICAgICAgIGVhZ2VyTG9hZCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGl0ZW07XG59XG4vKipcbiAqIEhlbHBlciBmdW5jdGlvbiB0aGF0IHJldHVybnMgYW4gaW5qZWN0b3IgYnkgY3JlYXRpbmcgYSBwcm94eS5cbiAqIEludmFyaWFudDogaW5qZWN0b3IgaXMgb2YgdHlwZSBJLiBJZiBpbmplY3RvciBpcyB1bmRlZmluZWQsIHRoZW4gVCA9IEkuXG4gKi9cbmZ1bmN0aW9uIF9pbmplY3QobW9kdWxlLCBpbmplY3Rvcikge1xuICAgIGNvbnN0IHByb3h5ID0gbmV3IFByb3h5KHt9LCB7XG4gICAgICAgIGRlbGV0ZVByb3BlcnR5OiAoKSA9PiBmYWxzZSxcbiAgICAgICAgc2V0OiAoKSA9PiB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCBzZXQgcHJvcGVydHkgb24gaW5qZWN0ZWQgc2VydmljZSBjb250YWluZXInKTtcbiAgICAgICAgfSxcbiAgICAgICAgZ2V0OiAob2JqLCBwcm9wKSA9PiB7XG4gICAgICAgICAgICBpZiAocHJvcCA9PT0gaXNQcm94eSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIF9yZXNvbHZlKG9iaiwgcHJvcCwgbW9kdWxlLCBpbmplY3RvciB8fCBwcm94eSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGdldE93blByb3BlcnR5RGVzY3JpcHRvcjogKG9iaiwgcHJvcCkgPT4gKF9yZXNvbHZlKG9iaiwgcHJvcCwgbW9kdWxlLCBpbmplY3RvciB8fCBwcm94eSksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBwcm9wKSksIC8vIHVzZWQgYnkgZm9yLi5pblxuICAgICAgICBoYXM6IChfLCBwcm9wKSA9PiBwcm9wIGluIG1vZHVsZSwgLy8gdXNlZCBieSAuLmluLi5cbiAgICAgICAgb3duS2V5czogKCkgPT4gWy4uLk9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKG1vZHVsZSldIC8vIHVzZWQgYnkgZm9yLi5pblxuICAgIH0pO1xuICAgIHJldHVybiBwcm94eTtcbn1cbi8qKlxuICogSW50ZXJuYWxseSB1c2VkIHRvIHRhZyBhIHJlcXVlc3RlZCBkZXBlbmRlbmN5LCBkaXJlY3RseSBiZWZvcmUgY2FsbGluZyB0aGUgZmFjdG9yeS5cbiAqIFRoaXMgYWxsb3dzIHVzIHRvIGZpbmQgY3ljbGVzIGR1cmluZyBpbnN0YW5jZSBjcmVhdGlvbi5cbiAqL1xuY29uc3QgX19yZXF1ZXN0ZWRfXyA9IFN5bWJvbCgpO1xuLyoqXG4gKiBSZXR1cm5zIHRoZSB2YWx1ZSBgb2JqW3Byb3BdYC4gSWYgdGhlIHZhbHVlIGRvZXMgbm90IGV4aXN0LCB5ZXQsIGl0IGlzIHJlc29sdmVkIGZyb21cbiAqIHRoZSBtb2R1bGUgZGVzY3JpcHRpb24uIFRoZSByZXN1bHQgb2Ygc2VydmljZSBmYWN0b3JpZXMgaXMgY2FjaGVkLiBHcm91cHMgYXJlXG4gKiByZWN1cnNpdmVseSBwcm94aWVkLlxuICpcbiAqIEBwYXJhbSBvYmogYW4gb2JqZWN0IGhvbGRpbmcgYWxsIGdyb3VwIHByb3hpZXMgYW5kIHNlcnZpY2VzXG4gKiBAcGFyYW0gcHJvcCB0aGUga2V5IG9mIGEgdmFsdWUgd2l0aGluIG9ialxuICogQHBhcmFtIG1vZHVsZSBhbiBvYmplY3QgY29udGFpbmluZyBncm91cHMgYW5kIHNlcnZpY2UgZmFjdG9yaWVzXG4gKiBAcGFyYW0gaW5qZWN0b3IgdGhlIGZpcnN0IGxldmVsIHByb3h5IHRoYXQgcHJvdmlkZXMgYWNjZXNzIHRvIGFsbCB2YWx1ZXNcbiAqIEByZXR1cm5zIHRoZSByZXF1ZXN0ZWQgdmFsdWUgYG9ialtwcm9wXWBcbiAqIEB0aHJvd3MgRXJyb3IgaWYgYSBkZXBlbmRlbmN5IGN5Y2xlIGlzIGRldGVjdGVkXG4gKi9cbmZ1bmN0aW9uIF9yZXNvbHZlKG9iaiwgcHJvcCwgbW9kdWxlLCBpbmplY3Rvcikge1xuICAgIGlmIChwcm9wIGluIG9iaikge1xuICAgICAgICBpZiAob2JqW3Byb3BdIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQ29uc3RydWN0aW9uIGZhaWx1cmUuIFBsZWFzZSBtYWtlIHN1cmUgdGhhdCB5b3VyIGRlcGVuZGVuY2llcyBhcmUgY29uc3RydWN0YWJsZS4nLCB7IGNhdXNlOiBvYmpbcHJvcF0gfSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9ialtwcm9wXSA9PT0gX19yZXF1ZXN0ZWRfXykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDeWNsZSBkZXRlY3RlZC4gUGxlYXNlIG1ha2UgXCInICsgU3RyaW5nKHByb3ApICsgJ1wiIGxhenkuIFZpc2l0IGh0dHBzOi8vbGFuZ2l1bS5vcmcvZG9jcy9yZWZlcmVuY2UvY29uZmlndXJhdGlvbi1zZXJ2aWNlcy8jcmVzb2x2aW5nLWN5Y2xpYy1kZXBlbmRlbmNpZXMnKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb2JqW3Byb3BdO1xuICAgIH1cbiAgICBlbHNlIGlmIChwcm9wIGluIG1vZHVsZSkge1xuICAgICAgICBjb25zdCB2YWx1ZSA9IG1vZHVsZVtwcm9wXTtcbiAgICAgICAgb2JqW3Byb3BdID0gX19yZXF1ZXN0ZWRfXztcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIG9ialtwcm9wXSA9ICh0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbicpID8gdmFsdWUoaW5qZWN0b3IpIDogX2luamVjdCh2YWx1ZSwgaW5qZWN0b3IpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgb2JqW3Byb3BdID0gZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yIDogdW5kZWZpbmVkO1xuICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG9ialtwcm9wXTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxufVxuLyoqXG4gKiBQZXJmb3JtcyBhIGRlZXAtbWVyZ2Ugb2YgdHdvIG1vZHVsZXMgYnkgd3JpdGluZyBzb3VyY2UgZW50cmllcyBpbnRvIHRoZSB0YXJnZXQgbW9kdWxlLlxuICpcbiAqIEBwYXJhbSB0YXJnZXQgdGhlIG1vZHVsZSB3aGljaCBpcyB3cml0dGVuXG4gKiBAcGFyYW0gc291cmNlIHRoZSBtb2R1bGUgd2hpY2ggaXMgcmVhZFxuICogQHJldHVybnMgdGhlIHRhcmdldCBtb2R1bGVcbiAqL1xuZnVuY3Rpb24gX21lcmdlKHRhcmdldCwgc291cmNlKSB7XG4gICAgaWYgKHNvdXJjZSkge1xuICAgICAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlMl0gb2YgT2JqZWN0LmVudHJpZXMoc291cmNlKSkge1xuICAgICAgICAgICAgaWYgKHZhbHVlMiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgdmFsdWUxID0gdGFyZ2V0W2tleV07XG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlMSAhPT0gbnVsbCAmJiB2YWx1ZTIgIT09IG51bGwgJiYgdHlwZW9mIHZhbHVlMSA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIHZhbHVlMiA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0W2tleV0gPSBfbWVyZ2UodmFsdWUxLCB2YWx1ZTIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0W2tleV0gPSB2YWx1ZTI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0YXJnZXQ7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kZXBlbmRlbmN5LWluamVjdGlvbi5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/dependency-injection.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/documentation/comment-provider.js":
/*!******************************************************************************************************!*\
  !*** ../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/documentation/comment-provider.js ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DefaultCommentProvider: () => (/* binding */ DefaultCommentProvider)\n/* harmony export */ });\n/* harmony import */ var _serializer_json_serializer_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../serializer/json-serializer.js */ \"(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/serializer/json-serializer.js\");\n/* harmony import */ var _utils_cst_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/cst-utils.js */ \"(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/cst-utils.js\");\n/******************************************************************************\n * Copyright 2023 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\n\nclass DefaultCommentProvider {\n    constructor(services) {\n        this.grammarConfig = () => services.parser.GrammarConfig;\n    }\n    getComment(node) {\n        var _a;\n        if ((0,_serializer_json_serializer_js__WEBPACK_IMPORTED_MODULE_0__.isAstNodeWithComment)(node)) {\n            return node.$comment;\n        }\n        return (_a = (0,_utils_cst_utils_js__WEBPACK_IMPORTED_MODULE_1__.findCommentNode)(node.$cstNode, this.grammarConfig().multilineCommentRules)) === null || _a === void 0 ? void 0 : _a.text;\n    }\n}\n//# sourceMappingURL=comment-provider.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2xhbmdpdW1AMy4zLjEvbm9kZV9tb2R1bGVzL2xhbmdpdW0vbGliL2RvY3VtZW50YXRpb24vY29tbWVudC1wcm92aWRlci5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ3dFO0FBQ2hCO0FBQ2pEO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksb0ZBQW9CO0FBQ2hDO0FBQ0E7QUFDQSxxQkFBcUIsb0VBQWU7QUFDcEM7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvZXRoYW5raW0vTmVzdG9yL21lZGZldGNoLmpzL25vZGVfbW9kdWxlcy8ucG5wbS9sYW5naXVtQDMuMy4xL25vZGVfbW9kdWxlcy9sYW5naXVtL2xpYi9kb2N1bWVudGF0aW9uL2NvbW1lbnQtcHJvdmlkZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuICogQ29weXJpZ2h0IDIwMjMgVHlwZUZveCBHbWJIXG4gKiBUaGlzIHByb2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzIGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0aGVcbiAqIHRlcm1zIG9mIHRoZSBNSVQgTGljZW5zZSwgd2hpY2ggaXMgYXZhaWxhYmxlIGluIHRoZSBwcm9qZWN0IHJvb3QuXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuaW1wb3J0IHsgaXNBc3ROb2RlV2l0aENvbW1lbnQgfSBmcm9tICcuLi9zZXJpYWxpemVyL2pzb24tc2VyaWFsaXplci5qcyc7XG5pbXBvcnQgeyBmaW5kQ29tbWVudE5vZGUgfSBmcm9tICcuLi91dGlscy9jc3QtdXRpbHMuanMnO1xuZXhwb3J0IGNsYXNzIERlZmF1bHRDb21tZW50UHJvdmlkZXIge1xuICAgIGNvbnN0cnVjdG9yKHNlcnZpY2VzKSB7XG4gICAgICAgIHRoaXMuZ3JhbW1hckNvbmZpZyA9ICgpID0+IHNlcnZpY2VzLnBhcnNlci5HcmFtbWFyQ29uZmlnO1xuICAgIH1cbiAgICBnZXRDb21tZW50KG5vZGUpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBpZiAoaXNBc3ROb2RlV2l0aENvbW1lbnQobm9kZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBub2RlLiRjb21tZW50O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAoX2EgPSBmaW5kQ29tbWVudE5vZGUobm9kZS4kY3N0Tm9kZSwgdGhpcy5ncmFtbWFyQ29uZmlnKCkubXVsdGlsaW5lQ29tbWVudFJ1bGVzKSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnRleHQ7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29tbWVudC1wcm92aWRlci5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/documentation/comment-provider.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/documentation/documentation-provider.js":
/*!************************************************************************************************************!*\
  !*** ../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/documentation/documentation-provider.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   JSDocDocumentationProvider: () => (/* binding */ JSDocDocumentationProvider)\n/* harmony export */ });\n/* harmony import */ var _utils_ast_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/ast-utils.js */ \"(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/ast-utils.js\");\n/* harmony import */ var _jsdoc_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./jsdoc.js */ \"(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/documentation/jsdoc.js\");\n/******************************************************************************\n * Copyright 2023 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\n\nclass JSDocDocumentationProvider {\n    constructor(services) {\n        this.indexManager = services.shared.workspace.IndexManager;\n        this.commentProvider = services.documentation.CommentProvider;\n    }\n    getDocumentation(node) {\n        const comment = this.commentProvider.getComment(node);\n        if (comment && (0,_jsdoc_js__WEBPACK_IMPORTED_MODULE_0__.isJSDoc)(comment)) {\n            const parsedJSDoc = (0,_jsdoc_js__WEBPACK_IMPORTED_MODULE_0__.parseJSDoc)(comment);\n            return parsedJSDoc.toMarkdown({\n                renderLink: (link, display) => {\n                    return this.documentationLinkRenderer(node, link, display);\n                },\n                renderTag: (tag) => {\n                    return this.documentationTagRenderer(node, tag);\n                }\n            });\n        }\n        return undefined;\n    }\n    documentationLinkRenderer(node, name, display) {\n        var _a;\n        const description = (_a = this.findNameInPrecomputedScopes(node, name)) !== null && _a !== void 0 ? _a : this.findNameInGlobalScope(node, name);\n        if (description && description.nameSegment) {\n            const line = description.nameSegment.range.start.line + 1;\n            const character = description.nameSegment.range.start.character + 1;\n            const uri = description.documentUri.with({ fragment: `L${line},${character}` });\n            return `[${display}](${uri.toString()})`;\n        }\n        else {\n            return undefined;\n        }\n    }\n    documentationTagRenderer(_node, _tag) {\n        // Fall back to the default tag rendering\n        return undefined;\n    }\n    findNameInPrecomputedScopes(node, name) {\n        const document = (0,_utils_ast_utils_js__WEBPACK_IMPORTED_MODULE_1__.getDocument)(node);\n        const precomputed = document.precomputedScopes;\n        if (!precomputed) {\n            return undefined;\n        }\n        let currentNode = node;\n        do {\n            const allDescriptions = precomputed.get(currentNode);\n            const description = allDescriptions.find(e => e.name === name);\n            if (description) {\n                return description;\n            }\n            currentNode = currentNode.$container;\n        } while (currentNode);\n        return undefined;\n    }\n    findNameInGlobalScope(node, name) {\n        const description = this.indexManager.allElements().find(e => e.name === name);\n        return description;\n    }\n}\n//# sourceMappingURL=documentation-provider.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2xhbmdpdW1AMy4zLjEvbm9kZV9tb2R1bGVzL2xhbmdpdW0vbGliL2RvY3VtZW50YXRpb24vZG9jdW1lbnRhdGlvbi1wcm92aWRlci5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ29EO0FBQ0g7QUFDMUM7QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsa0RBQU87QUFDOUIsZ0NBQWdDLHFEQUFVO0FBQzFDO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdURBQXVELGNBQWMsS0FBSyxHQUFHLFVBQVUsR0FBRztBQUMxRix1QkFBdUIsUUFBUSxJQUFJLGVBQWU7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUIsZ0VBQVc7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9Vc2Vycy9ldGhhbmtpbS9OZXN0b3IvbWVkZmV0Y2guanMvbm9kZV9tb2R1bGVzLy5wbnBtL2xhbmdpdW1AMy4zLjEvbm9kZV9tb2R1bGVzL2xhbmdpdW0vbGliL2RvY3VtZW50YXRpb24vZG9jdW1lbnRhdGlvbi1wcm92aWRlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gKiBDb3B5cmlnaHQgMjAyMyBUeXBlRm94IEdtYkhcbiAqIFRoaXMgcHJvZ3JhbSBhbmQgdGhlIGFjY29tcGFueWluZyBtYXRlcmlhbHMgYXJlIG1hZGUgYXZhaWxhYmxlIHVuZGVyIHRoZVxuICogdGVybXMgb2YgdGhlIE1JVCBMaWNlbnNlLCB3aGljaCBpcyBhdmFpbGFibGUgaW4gdGhlIHByb2plY3Qgcm9vdC5cbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5pbXBvcnQgeyBnZXREb2N1bWVudCB9IGZyb20gJy4uL3V0aWxzL2FzdC11dGlscy5qcyc7XG5pbXBvcnQgeyBpc0pTRG9jLCBwYXJzZUpTRG9jIH0gZnJvbSAnLi9qc2RvYy5qcyc7XG5leHBvcnQgY2xhc3MgSlNEb2NEb2N1bWVudGF0aW9uUHJvdmlkZXIge1xuICAgIGNvbnN0cnVjdG9yKHNlcnZpY2VzKSB7XG4gICAgICAgIHRoaXMuaW5kZXhNYW5hZ2VyID0gc2VydmljZXMuc2hhcmVkLndvcmtzcGFjZS5JbmRleE1hbmFnZXI7XG4gICAgICAgIHRoaXMuY29tbWVudFByb3ZpZGVyID0gc2VydmljZXMuZG9jdW1lbnRhdGlvbi5Db21tZW50UHJvdmlkZXI7XG4gICAgfVxuICAgIGdldERvY3VtZW50YXRpb24obm9kZSkge1xuICAgICAgICBjb25zdCBjb21tZW50ID0gdGhpcy5jb21tZW50UHJvdmlkZXIuZ2V0Q29tbWVudChub2RlKTtcbiAgICAgICAgaWYgKGNvbW1lbnQgJiYgaXNKU0RvYyhjb21tZW50KSkge1xuICAgICAgICAgICAgY29uc3QgcGFyc2VkSlNEb2MgPSBwYXJzZUpTRG9jKGNvbW1lbnQpO1xuICAgICAgICAgICAgcmV0dXJuIHBhcnNlZEpTRG9jLnRvTWFya2Rvd24oe1xuICAgICAgICAgICAgICAgIHJlbmRlckxpbms6IChsaW5rLCBkaXNwbGF5KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmRvY3VtZW50YXRpb25MaW5rUmVuZGVyZXIobm9kZSwgbGluaywgZGlzcGxheSk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICByZW5kZXJUYWc6ICh0YWcpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZG9jdW1lbnRhdGlvblRhZ1JlbmRlcmVyKG5vZGUsIHRhZyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgZG9jdW1lbnRhdGlvbkxpbmtSZW5kZXJlcihub2RlLCBuYW1lLCBkaXNwbGF5KSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgY29uc3QgZGVzY3JpcHRpb24gPSAoX2EgPSB0aGlzLmZpbmROYW1lSW5QcmVjb21wdXRlZFNjb3Blcyhub2RlLCBuYW1lKSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogdGhpcy5maW5kTmFtZUluR2xvYmFsU2NvcGUobm9kZSwgbmFtZSk7XG4gICAgICAgIGlmIChkZXNjcmlwdGlvbiAmJiBkZXNjcmlwdGlvbi5uYW1lU2VnbWVudCkge1xuICAgICAgICAgICAgY29uc3QgbGluZSA9IGRlc2NyaXB0aW9uLm5hbWVTZWdtZW50LnJhbmdlLnN0YXJ0LmxpbmUgKyAxO1xuICAgICAgICAgICAgY29uc3QgY2hhcmFjdGVyID0gZGVzY3JpcHRpb24ubmFtZVNlZ21lbnQucmFuZ2Uuc3RhcnQuY2hhcmFjdGVyICsgMTtcbiAgICAgICAgICAgIGNvbnN0IHVyaSA9IGRlc2NyaXB0aW9uLmRvY3VtZW50VXJpLndpdGgoeyBmcmFnbWVudDogYEwke2xpbmV9LCR7Y2hhcmFjdGVyfWAgfSk7XG4gICAgICAgICAgICByZXR1cm4gYFske2Rpc3BsYXl9XSgke3VyaS50b1N0cmluZygpfSlgO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBkb2N1bWVudGF0aW9uVGFnUmVuZGVyZXIoX25vZGUsIF90YWcpIHtcbiAgICAgICAgLy8gRmFsbCBiYWNrIHRvIHRoZSBkZWZhdWx0IHRhZyByZW5kZXJpbmdcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgZmluZE5hbWVJblByZWNvbXB1dGVkU2NvcGVzKG5vZGUsIG5hbWUpIHtcbiAgICAgICAgY29uc3QgZG9jdW1lbnQgPSBnZXREb2N1bWVudChub2RlKTtcbiAgICAgICAgY29uc3QgcHJlY29tcHV0ZWQgPSBkb2N1bWVudC5wcmVjb21wdXRlZFNjb3BlcztcbiAgICAgICAgaWYgKCFwcmVjb21wdXRlZCkge1xuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICBsZXQgY3VycmVudE5vZGUgPSBub2RlO1xuICAgICAgICBkbyB7XG4gICAgICAgICAgICBjb25zdCBhbGxEZXNjcmlwdGlvbnMgPSBwcmVjb21wdXRlZC5nZXQoY3VycmVudE5vZGUpO1xuICAgICAgICAgICAgY29uc3QgZGVzY3JpcHRpb24gPSBhbGxEZXNjcmlwdGlvbnMuZmluZChlID0+IGUubmFtZSA9PT0gbmFtZSk7XG4gICAgICAgICAgICBpZiAoZGVzY3JpcHRpb24pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZGVzY3JpcHRpb247XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjdXJyZW50Tm9kZSA9IGN1cnJlbnROb2RlLiRjb250YWluZXI7XG4gICAgICAgIH0gd2hpbGUgKGN1cnJlbnROb2RlKTtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgZmluZE5hbWVJbkdsb2JhbFNjb3BlKG5vZGUsIG5hbWUpIHtcbiAgICAgICAgY29uc3QgZGVzY3JpcHRpb24gPSB0aGlzLmluZGV4TWFuYWdlci5hbGxFbGVtZW50cygpLmZpbmQoZSA9PiBlLm5hbWUgPT09IG5hbWUpO1xuICAgICAgICByZXR1cm4gZGVzY3JpcHRpb247XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZG9jdW1lbnRhdGlvbi1wcm92aWRlci5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/documentation/documentation-provider.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/documentation/jsdoc.js":
/*!*******************************************************************************************!*\
  !*** ../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/documentation/jsdoc.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isJSDoc: () => (/* binding */ isJSDoc),\n/* harmony export */   parseJSDoc: () => (/* binding */ parseJSDoc)\n/* harmony export */ });\n/* harmony import */ var vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vscode-languageserver-types */ \"(ssr)/../node_modules/.pnpm/vscode-languageserver-types@3.17.5/node_modules/vscode-languageserver-types/lib/esm/main.js\");\n/* harmony import */ var _utils_regexp_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/regexp-utils.js */ \"(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/regexp-utils.js\");\n/* harmony import */ var _utils_uri_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/uri-utils.js */ \"(ssr)/../node_modules/.pnpm/vscode-uri@3.0.8/node_modules/vscode-uri/lib/esm/index.mjs\");\n/******************************************************************************\n * Copyright 2023 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\n\n\nfunction parseJSDoc(node, start, options) {\n    let opts;\n    let position;\n    if (typeof node === 'string') {\n        position = start;\n        opts = options;\n    }\n    else {\n        position = node.range.start;\n        opts = start;\n    }\n    if (!position) {\n        position = vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.Position.create(0, 0);\n    }\n    const lines = getLines(node);\n    const normalizedOptions = normalizeOptions(opts);\n    const tokens = tokenize({\n        lines,\n        position,\n        options: normalizedOptions\n    });\n    return parseJSDocComment({\n        index: 0,\n        tokens,\n        position\n    });\n}\nfunction isJSDoc(node, options) {\n    const normalizedOptions = normalizeOptions(options);\n    const lines = getLines(node);\n    if (lines.length === 0) {\n        return false;\n    }\n    const first = lines[0];\n    const last = lines[lines.length - 1];\n    const firstRegex = normalizedOptions.start;\n    const lastRegex = normalizedOptions.end;\n    return Boolean(firstRegex === null || firstRegex === void 0 ? void 0 : firstRegex.exec(first)) && Boolean(lastRegex === null || lastRegex === void 0 ? void 0 : lastRegex.exec(last));\n}\nfunction getLines(node) {\n    let content = '';\n    if (typeof node === 'string') {\n        content = node;\n    }\n    else {\n        content = node.text;\n    }\n    const lines = content.split(_utils_regexp_utils_js__WEBPACK_IMPORTED_MODULE_1__.NEWLINE_REGEXP);\n    return lines;\n}\nconst tagRegex = /\\s*(@([\\p{L}][\\p{L}\\p{N}]*)?)/uy;\nconst inlineTagRegex = /\\{(@[\\p{L}][\\p{L}\\p{N}]*)(\\s*)([^\\r\\n}]+)?\\}/gu;\nfunction tokenize(context) {\n    var _a, _b, _c;\n    const tokens = [];\n    let currentLine = context.position.line;\n    let currentCharacter = context.position.character;\n    for (let i = 0; i < context.lines.length; i++) {\n        const first = i === 0;\n        const last = i === context.lines.length - 1;\n        let line = context.lines[i];\n        let index = 0;\n        if (first && context.options.start) {\n            const match = (_a = context.options.start) === null || _a === void 0 ? void 0 : _a.exec(line);\n            if (match) {\n                index = match.index + match[0].length;\n            }\n        }\n        else {\n            const match = (_b = context.options.line) === null || _b === void 0 ? void 0 : _b.exec(line);\n            if (match) {\n                index = match.index + match[0].length;\n            }\n        }\n        if (last) {\n            const match = (_c = context.options.end) === null || _c === void 0 ? void 0 : _c.exec(line);\n            if (match) {\n                line = line.substring(0, match.index);\n            }\n        }\n        line = line.substring(0, lastCharacter(line));\n        const whitespaceEnd = skipWhitespace(line, index);\n        if (whitespaceEnd >= line.length) {\n            // Only create a break token when we already have previous tokens\n            if (tokens.length > 0) {\n                const position = vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.Position.create(currentLine, currentCharacter);\n                tokens.push({\n                    type: 'break',\n                    content: '',\n                    range: vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.Range.create(position, position)\n                });\n            }\n        }\n        else {\n            tagRegex.lastIndex = index;\n            const tagMatch = tagRegex.exec(line);\n            if (tagMatch) {\n                const fullMatch = tagMatch[0];\n                const value = tagMatch[1];\n                const start = vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.Position.create(currentLine, currentCharacter + index);\n                const end = vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.Position.create(currentLine, currentCharacter + index + fullMatch.length);\n                tokens.push({\n                    type: 'tag',\n                    content: value,\n                    range: vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.Range.create(start, end)\n                });\n                index += fullMatch.length;\n                index = skipWhitespace(line, index);\n            }\n            if (index < line.length) {\n                const rest = line.substring(index);\n                const inlineTagMatches = Array.from(rest.matchAll(inlineTagRegex));\n                tokens.push(...buildInlineTokens(inlineTagMatches, rest, currentLine, currentCharacter + index));\n            }\n        }\n        currentLine++;\n        currentCharacter = 0;\n    }\n    // Remove last break token if there is one\n    if (tokens.length > 0 && tokens[tokens.length - 1].type === 'break') {\n        return tokens.slice(0, -1);\n    }\n    return tokens;\n}\nfunction buildInlineTokens(tags, line, lineIndex, characterIndex) {\n    const tokens = [];\n    if (tags.length === 0) {\n        const start = vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.Position.create(lineIndex, characterIndex);\n        const end = vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.Position.create(lineIndex, characterIndex + line.length);\n        tokens.push({\n            type: 'text',\n            content: line,\n            range: vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.Range.create(start, end)\n        });\n    }\n    else {\n        let lastIndex = 0;\n        for (const match of tags) {\n            const matchIndex = match.index;\n            const startContent = line.substring(lastIndex, matchIndex);\n            if (startContent.length > 0) {\n                tokens.push({\n                    type: 'text',\n                    content: line.substring(lastIndex, matchIndex),\n                    range: vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.Range.create(vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.Position.create(lineIndex, lastIndex + characterIndex), vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.Position.create(lineIndex, matchIndex + characterIndex))\n                });\n            }\n            let offset = startContent.length + 1;\n            const tagName = match[1];\n            tokens.push({\n                type: 'inline-tag',\n                content: tagName,\n                range: vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.Range.create(vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.Position.create(lineIndex, lastIndex + offset + characterIndex), vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.Position.create(lineIndex, lastIndex + offset + tagName.length + characterIndex))\n            });\n            offset += tagName.length;\n            if (match.length === 4) {\n                offset += match[2].length;\n                const value = match[3];\n                tokens.push({\n                    type: 'text',\n                    content: value,\n                    range: vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.Range.create(vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.Position.create(lineIndex, lastIndex + offset + characterIndex), vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.Position.create(lineIndex, lastIndex + offset + value.length + characterIndex))\n                });\n            }\n            else {\n                tokens.push({\n                    type: 'text',\n                    content: '',\n                    range: vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.Range.create(vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.Position.create(lineIndex, lastIndex + offset + characterIndex), vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.Position.create(lineIndex, lastIndex + offset + characterIndex))\n                });\n            }\n            lastIndex = matchIndex + match[0].length;\n        }\n        const endContent = line.substring(lastIndex);\n        if (endContent.length > 0) {\n            tokens.push({\n                type: 'text',\n                content: endContent,\n                range: vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.Range.create(vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.Position.create(lineIndex, lastIndex + characterIndex), vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.Position.create(lineIndex, lastIndex + characterIndex + endContent.length))\n            });\n        }\n    }\n    return tokens;\n}\nconst nonWhitespaceRegex = /\\S/;\nconst whitespaceEndRegex = /\\s*$/;\nfunction skipWhitespace(line, index) {\n    const match = line.substring(index).match(nonWhitespaceRegex);\n    if (match) {\n        return index + match.index;\n    }\n    else {\n        return line.length;\n    }\n}\nfunction lastCharacter(line) {\n    const match = line.match(whitespaceEndRegex);\n    if (match && typeof match.index === 'number') {\n        return match.index;\n    }\n    return undefined;\n}\n// Parsing\nfunction parseJSDocComment(context) {\n    var _a, _b, _c, _d;\n    const startPosition = vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.Position.create(context.position.line, context.position.character);\n    if (context.tokens.length === 0) {\n        return new JSDocCommentImpl([], vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.Range.create(startPosition, startPosition));\n    }\n    const elements = [];\n    while (context.index < context.tokens.length) {\n        const element = parseJSDocElement(context, elements[elements.length - 1]);\n        if (element) {\n            elements.push(element);\n        }\n    }\n    const start = (_b = (_a = elements[0]) === null || _a === void 0 ? void 0 : _a.range.start) !== null && _b !== void 0 ? _b : startPosition;\n    const end = (_d = (_c = elements[elements.length - 1]) === null || _c === void 0 ? void 0 : _c.range.end) !== null && _d !== void 0 ? _d : startPosition;\n    return new JSDocCommentImpl(elements, vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.Range.create(start, end));\n}\nfunction parseJSDocElement(context, last) {\n    const next = context.tokens[context.index];\n    if (next.type === 'tag') {\n        return parseJSDocTag(context, false);\n    }\n    else if (next.type === 'text' || next.type === 'inline-tag') {\n        return parseJSDocText(context);\n    }\n    else {\n        appendEmptyLine(next, last);\n        context.index++;\n        return undefined;\n    }\n}\nfunction appendEmptyLine(token, element) {\n    if (element) {\n        const line = new JSDocLineImpl('', token.range);\n        if ('inlines' in element) {\n            element.inlines.push(line);\n        }\n        else {\n            element.content.inlines.push(line);\n        }\n    }\n}\nfunction parseJSDocText(context) {\n    let token = context.tokens[context.index];\n    const firstToken = token;\n    let lastToken = token;\n    const lines = [];\n    while (token && token.type !== 'break' && token.type !== 'tag') {\n        lines.push(parseJSDocInline(context));\n        lastToken = token;\n        token = context.tokens[context.index];\n    }\n    return new JSDocTextImpl(lines, vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.Range.create(firstToken.range.start, lastToken.range.end));\n}\nfunction parseJSDocInline(context) {\n    const token = context.tokens[context.index];\n    if (token.type === 'inline-tag') {\n        return parseJSDocTag(context, true);\n    }\n    else {\n        return parseJSDocLine(context);\n    }\n}\nfunction parseJSDocTag(context, inline) {\n    const tagToken = context.tokens[context.index++];\n    const name = tagToken.content.substring(1);\n    const nextToken = context.tokens[context.index];\n    if ((nextToken === null || nextToken === void 0 ? void 0 : nextToken.type) === 'text') {\n        if (inline) {\n            const docLine = parseJSDocLine(context);\n            return new JSDocTagImpl(name, new JSDocTextImpl([docLine], docLine.range), inline, vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.Range.create(tagToken.range.start, docLine.range.end));\n        }\n        else {\n            const textDoc = parseJSDocText(context);\n            return new JSDocTagImpl(name, textDoc, inline, vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.Range.create(tagToken.range.start, textDoc.range.end));\n        }\n    }\n    else {\n        const range = tagToken.range;\n        return new JSDocTagImpl(name, new JSDocTextImpl([], range), inline, range);\n    }\n}\nfunction parseJSDocLine(context) {\n    const token = context.tokens[context.index++];\n    return new JSDocLineImpl(token.content, token.range);\n}\nfunction normalizeOptions(options) {\n    if (!options) {\n        return normalizeOptions({\n            start: '/**',\n            end: '*/',\n            line: '*'\n        });\n    }\n    const { start, end, line } = options;\n    return {\n        start: normalizeOption(start, true),\n        end: normalizeOption(end, false),\n        line: normalizeOption(line, true)\n    };\n}\nfunction normalizeOption(option, start) {\n    if (typeof option === 'string' || typeof option === 'object') {\n        const escaped = typeof option === 'string' ? (0,_utils_regexp_utils_js__WEBPACK_IMPORTED_MODULE_1__.escapeRegExp)(option) : option.source;\n        if (start) {\n            return new RegExp(`^\\\\s*${escaped}`);\n        }\n        else {\n            return new RegExp(`\\\\s*${escaped}\\\\s*$`);\n        }\n    }\n    else {\n        return option;\n    }\n}\nclass JSDocCommentImpl {\n    constructor(elements, range) {\n        this.elements = elements;\n        this.range = range;\n    }\n    getTag(name) {\n        return this.getAllTags().find(e => e.name === name);\n    }\n    getTags(name) {\n        return this.getAllTags().filter(e => e.name === name);\n    }\n    getAllTags() {\n        return this.elements.filter((e) => 'name' in e);\n    }\n    toString() {\n        let value = '';\n        for (const element of this.elements) {\n            if (value.length === 0) {\n                value = element.toString();\n            }\n            else {\n                const text = element.toString();\n                value += fillNewlines(value) + text;\n            }\n        }\n        return value.trim();\n    }\n    toMarkdown(options) {\n        let value = '';\n        for (const element of this.elements) {\n            if (value.length === 0) {\n                value = element.toMarkdown(options);\n            }\n            else {\n                const text = element.toMarkdown(options);\n                value += fillNewlines(value) + text;\n            }\n        }\n        return value.trim();\n    }\n}\nclass JSDocTagImpl {\n    constructor(name, content, inline, range) {\n        this.name = name;\n        this.content = content;\n        this.inline = inline;\n        this.range = range;\n    }\n    toString() {\n        let text = `@${this.name}`;\n        const content = this.content.toString();\n        if (this.content.inlines.length === 1) {\n            text = `${text} ${content}`;\n        }\n        else if (this.content.inlines.length > 1) {\n            text = `${text}\\n${content}`;\n        }\n        if (this.inline) {\n            // Inline tags are surrounded by curly braces\n            return `{${text}}`;\n        }\n        else {\n            return text;\n        }\n    }\n    toMarkdown(options) {\n        var _a, _b;\n        return (_b = (_a = options === null || options === void 0 ? void 0 : options.renderTag) === null || _a === void 0 ? void 0 : _a.call(options, this)) !== null && _b !== void 0 ? _b : this.toMarkdownDefault(options);\n    }\n    toMarkdownDefault(options) {\n        const content = this.content.toMarkdown(options);\n        if (this.inline) {\n            const rendered = renderInlineTag(this.name, content, options !== null && options !== void 0 ? options : {});\n            if (typeof rendered === 'string') {\n                return rendered;\n            }\n        }\n        let marker = '';\n        if ((options === null || options === void 0 ? void 0 : options.tag) === 'italic' || (options === null || options === void 0 ? void 0 : options.tag) === undefined) {\n            marker = '*';\n        }\n        else if ((options === null || options === void 0 ? void 0 : options.tag) === 'bold') {\n            marker = '**';\n        }\n        else if ((options === null || options === void 0 ? void 0 : options.tag) === 'bold-italic') {\n            marker = '***';\n        }\n        let text = `${marker}@${this.name}${marker}`;\n        if (this.content.inlines.length === 1) {\n            text = `${text} — ${content}`;\n        }\n        else if (this.content.inlines.length > 1) {\n            text = `${text}\\n${content}`;\n        }\n        if (this.inline) {\n            // Inline tags are surrounded by curly braces\n            return `{${text}}`;\n        }\n        else {\n            return text;\n        }\n    }\n}\nfunction renderInlineTag(tag, content, options) {\n    var _a, _b;\n    if (tag === 'linkplain' || tag === 'linkcode' || tag === 'link') {\n        const index = content.indexOf(' ');\n        let display = content;\n        if (index > 0) {\n            const displayStart = skipWhitespace(content, index);\n            display = content.substring(displayStart);\n            content = content.substring(0, index);\n        }\n        if (tag === 'linkcode' || (tag === 'link' && options.link === 'code')) {\n            // Surround the display value in a markdown inline code block\n            display = `\\`${display}\\``;\n        }\n        const renderedLink = (_b = (_a = options.renderLink) === null || _a === void 0 ? void 0 : _a.call(options, content, display)) !== null && _b !== void 0 ? _b : renderLinkDefault(content, display);\n        return renderedLink;\n    }\n    return undefined;\n}\nfunction renderLinkDefault(content, display) {\n    try {\n        _utils_uri_utils_js__WEBPACK_IMPORTED_MODULE_2__.URI.parse(content, true);\n        return `[${display}](${content})`;\n    }\n    catch (_a) {\n        return content;\n    }\n}\nclass JSDocTextImpl {\n    constructor(lines, range) {\n        this.inlines = lines;\n        this.range = range;\n    }\n    toString() {\n        let text = '';\n        for (let i = 0; i < this.inlines.length; i++) {\n            const inline = this.inlines[i];\n            const next = this.inlines[i + 1];\n            text += inline.toString();\n            if (next && next.range.start.line > inline.range.start.line) {\n                text += '\\n';\n            }\n        }\n        return text;\n    }\n    toMarkdown(options) {\n        let text = '';\n        for (let i = 0; i < this.inlines.length; i++) {\n            const inline = this.inlines[i];\n            const next = this.inlines[i + 1];\n            text += inline.toMarkdown(options);\n            if (next && next.range.start.line > inline.range.start.line) {\n                text += '\\n';\n            }\n        }\n        return text;\n    }\n}\nclass JSDocLineImpl {\n    constructor(text, range) {\n        this.text = text;\n        this.range = range;\n    }\n    toString() {\n        return this.text;\n    }\n    toMarkdown() {\n        return this.text;\n    }\n}\nfunction fillNewlines(text) {\n    if (text.endsWith('\\n')) {\n        return '\\n';\n    }\n    else {\n        return '\\n\\n';\n    }\n}\n//# sourceMappingURL=jsdoc.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/documentation/jsdoc.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/languages/generated/ast.js":
/*!***********************************************************************************************!*\
  !*** ../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/languages/generated/ast.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AbstractElement: () => (/* binding */ AbstractElement),\n/* harmony export */   AbstractRule: () => (/* binding */ AbstractRule),\n/* harmony export */   AbstractType: () => (/* binding */ AbstractType),\n/* harmony export */   Action: () => (/* binding */ Action),\n/* harmony export */   Alternatives: () => (/* binding */ Alternatives),\n/* harmony export */   ArrayLiteral: () => (/* binding */ ArrayLiteral),\n/* harmony export */   ArrayType: () => (/* binding */ ArrayType),\n/* harmony export */   Assignment: () => (/* binding */ Assignment),\n/* harmony export */   BooleanLiteral: () => (/* binding */ BooleanLiteral),\n/* harmony export */   CharacterRange: () => (/* binding */ CharacterRange),\n/* harmony export */   Condition: () => (/* binding */ Condition),\n/* harmony export */   Conjunction: () => (/* binding */ Conjunction),\n/* harmony export */   CrossReference: () => (/* binding */ CrossReference),\n/* harmony export */   Disjunction: () => (/* binding */ Disjunction),\n/* harmony export */   EndOfFile: () => (/* binding */ EndOfFile),\n/* harmony export */   Grammar: () => (/* binding */ Grammar),\n/* harmony export */   GrammarImport: () => (/* binding */ GrammarImport),\n/* harmony export */   Group: () => (/* binding */ Group),\n/* harmony export */   InferredType: () => (/* binding */ InferredType),\n/* harmony export */   Interface: () => (/* binding */ Interface),\n/* harmony export */   Keyword: () => (/* binding */ Keyword),\n/* harmony export */   LangiumGrammarAstReflection: () => (/* binding */ LangiumGrammarAstReflection),\n/* harmony export */   LangiumGrammarTerminals: () => (/* binding */ LangiumGrammarTerminals),\n/* harmony export */   NamedArgument: () => (/* binding */ NamedArgument),\n/* harmony export */   NegatedToken: () => (/* binding */ NegatedToken),\n/* harmony export */   Negation: () => (/* binding */ Negation),\n/* harmony export */   NumberLiteral: () => (/* binding */ NumberLiteral),\n/* harmony export */   Parameter: () => (/* binding */ Parameter),\n/* harmony export */   ParameterReference: () => (/* binding */ ParameterReference),\n/* harmony export */   ParserRule: () => (/* binding */ ParserRule),\n/* harmony export */   ReferenceType: () => (/* binding */ ReferenceType),\n/* harmony export */   RegexToken: () => (/* binding */ RegexToken),\n/* harmony export */   ReturnType: () => (/* binding */ ReturnType),\n/* harmony export */   RuleCall: () => (/* binding */ RuleCall),\n/* harmony export */   SimpleType: () => (/* binding */ SimpleType),\n/* harmony export */   StringLiteral: () => (/* binding */ StringLiteral),\n/* harmony export */   TerminalAlternatives: () => (/* binding */ TerminalAlternatives),\n/* harmony export */   TerminalGroup: () => (/* binding */ TerminalGroup),\n/* harmony export */   TerminalRule: () => (/* binding */ TerminalRule),\n/* harmony export */   TerminalRuleCall: () => (/* binding */ TerminalRuleCall),\n/* harmony export */   Type: () => (/* binding */ Type),\n/* harmony export */   TypeAttribute: () => (/* binding */ TypeAttribute),\n/* harmony export */   TypeDefinition: () => (/* binding */ TypeDefinition),\n/* harmony export */   UnionType: () => (/* binding */ UnionType),\n/* harmony export */   UnorderedGroup: () => (/* binding */ UnorderedGroup),\n/* harmony export */   UntilToken: () => (/* binding */ UntilToken),\n/* harmony export */   ValueLiteral: () => (/* binding */ ValueLiteral),\n/* harmony export */   Wildcard: () => (/* binding */ Wildcard),\n/* harmony export */   isAbstractElement: () => (/* binding */ isAbstractElement),\n/* harmony export */   isAbstractRule: () => (/* binding */ isAbstractRule),\n/* harmony export */   isAbstractType: () => (/* binding */ isAbstractType),\n/* harmony export */   isAction: () => (/* binding */ isAction),\n/* harmony export */   isAlternatives: () => (/* binding */ isAlternatives),\n/* harmony export */   isArrayLiteral: () => (/* binding */ isArrayLiteral),\n/* harmony export */   isArrayType: () => (/* binding */ isArrayType),\n/* harmony export */   isAssignment: () => (/* binding */ isAssignment),\n/* harmony export */   isBooleanLiteral: () => (/* binding */ isBooleanLiteral),\n/* harmony export */   isCharacterRange: () => (/* binding */ isCharacterRange),\n/* harmony export */   isCondition: () => (/* binding */ isCondition),\n/* harmony export */   isConjunction: () => (/* binding */ isConjunction),\n/* harmony export */   isCrossReference: () => (/* binding */ isCrossReference),\n/* harmony export */   isDisjunction: () => (/* binding */ isDisjunction),\n/* harmony export */   isEndOfFile: () => (/* binding */ isEndOfFile),\n/* harmony export */   isFeatureName: () => (/* binding */ isFeatureName),\n/* harmony export */   isGrammar: () => (/* binding */ isGrammar),\n/* harmony export */   isGrammarImport: () => (/* binding */ isGrammarImport),\n/* harmony export */   isGroup: () => (/* binding */ isGroup),\n/* harmony export */   isInferredType: () => (/* binding */ isInferredType),\n/* harmony export */   isInterface: () => (/* binding */ isInterface),\n/* harmony export */   isKeyword: () => (/* binding */ isKeyword),\n/* harmony export */   isNamedArgument: () => (/* binding */ isNamedArgument),\n/* harmony export */   isNegatedToken: () => (/* binding */ isNegatedToken),\n/* harmony export */   isNegation: () => (/* binding */ isNegation),\n/* harmony export */   isNumberLiteral: () => (/* binding */ isNumberLiteral),\n/* harmony export */   isParameter: () => (/* binding */ isParameter),\n/* harmony export */   isParameterReference: () => (/* binding */ isParameterReference),\n/* harmony export */   isParserRule: () => (/* binding */ isParserRule),\n/* harmony export */   isPrimitiveType: () => (/* binding */ isPrimitiveType),\n/* harmony export */   isReferenceType: () => (/* binding */ isReferenceType),\n/* harmony export */   isRegexToken: () => (/* binding */ isRegexToken),\n/* harmony export */   isReturnType: () => (/* binding */ isReturnType),\n/* harmony export */   isRuleCall: () => (/* binding */ isRuleCall),\n/* harmony export */   isSimpleType: () => (/* binding */ isSimpleType),\n/* harmony export */   isStringLiteral: () => (/* binding */ isStringLiteral),\n/* harmony export */   isTerminalAlternatives: () => (/* binding */ isTerminalAlternatives),\n/* harmony export */   isTerminalGroup: () => (/* binding */ isTerminalGroup),\n/* harmony export */   isTerminalRule: () => (/* binding */ isTerminalRule),\n/* harmony export */   isTerminalRuleCall: () => (/* binding */ isTerminalRuleCall),\n/* harmony export */   isType: () => (/* binding */ isType),\n/* harmony export */   isTypeAttribute: () => (/* binding */ isTypeAttribute),\n/* harmony export */   isTypeDefinition: () => (/* binding */ isTypeDefinition),\n/* harmony export */   isUnionType: () => (/* binding */ isUnionType),\n/* harmony export */   isUnorderedGroup: () => (/* binding */ isUnorderedGroup),\n/* harmony export */   isUntilToken: () => (/* binding */ isUntilToken),\n/* harmony export */   isValueLiteral: () => (/* binding */ isValueLiteral),\n/* harmony export */   isWildcard: () => (/* binding */ isWildcard),\n/* harmony export */   reflection: () => (/* binding */ reflection)\n/* harmony export */ });\n/* harmony import */ var _syntax_tree_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../syntax-tree.js */ \"(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/syntax-tree.js\");\n/******************************************************************************\n * This file was generated by langium-cli 3.3.0.\n * DO NOT EDIT MANUALLY!\n ******************************************************************************/\n\nconst LangiumGrammarTerminals = {\n    ID: /\\^?[_a-zA-Z][\\w_]*/,\n    STRING: /\"(\\\\.|[^\"\\\\])*\"|'(\\\\.|[^'\\\\])*'/,\n    NUMBER: /NaN|-?((\\d*\\.\\d+|\\d+)([Ee][+-]?\\d+)?|Infinity)/,\n    RegexLiteral: /\\/(?![*+?])(?:[^\\r\\n\\[/\\\\]|\\\\.|\\[(?:[^\\r\\n\\]\\\\]|\\\\.)*\\])+\\/[a-z]*/,\n    WS: /\\s+/,\n    ML_COMMENT: /\\/\\*[\\s\\S]*?\\*\\//,\n    SL_COMMENT: /\\/\\/[^\\n\\r]*/,\n};\nconst AbstractRule = 'AbstractRule';\nfunction isAbstractRule(item) {\n    return reflection.isInstance(item, AbstractRule);\n}\nconst AbstractType = 'AbstractType';\nfunction isAbstractType(item) {\n    return reflection.isInstance(item, AbstractType);\n}\nconst Condition = 'Condition';\nfunction isCondition(item) {\n    return reflection.isInstance(item, Condition);\n}\nfunction isFeatureName(item) {\n    return isPrimitiveType(item) || item === 'current' || item === 'entry' || item === 'extends' || item === 'false' || item === 'fragment' || item === 'grammar' || item === 'hidden' || item === 'import' || item === 'interface' || item === 'returns' || item === 'terminal' || item === 'true' || item === 'type' || item === 'infer' || item === 'infers' || item === 'with' || (typeof item === 'string' && (/\\^?[_a-zA-Z][\\w_]*/.test(item)));\n}\nfunction isPrimitiveType(item) {\n    return item === 'string' || item === 'number' || item === 'boolean' || item === 'Date' || item === 'bigint';\n}\nconst TypeDefinition = 'TypeDefinition';\nfunction isTypeDefinition(item) {\n    return reflection.isInstance(item, TypeDefinition);\n}\nconst ValueLiteral = 'ValueLiteral';\nfunction isValueLiteral(item) {\n    return reflection.isInstance(item, ValueLiteral);\n}\nconst AbstractElement = 'AbstractElement';\nfunction isAbstractElement(item) {\n    return reflection.isInstance(item, AbstractElement);\n}\nconst ArrayLiteral = 'ArrayLiteral';\nfunction isArrayLiteral(item) {\n    return reflection.isInstance(item, ArrayLiteral);\n}\nconst ArrayType = 'ArrayType';\nfunction isArrayType(item) {\n    return reflection.isInstance(item, ArrayType);\n}\nconst BooleanLiteral = 'BooleanLiteral';\nfunction isBooleanLiteral(item) {\n    return reflection.isInstance(item, BooleanLiteral);\n}\nconst Conjunction = 'Conjunction';\nfunction isConjunction(item) {\n    return reflection.isInstance(item, Conjunction);\n}\nconst Disjunction = 'Disjunction';\nfunction isDisjunction(item) {\n    return reflection.isInstance(item, Disjunction);\n}\nconst Grammar = 'Grammar';\nfunction isGrammar(item) {\n    return reflection.isInstance(item, Grammar);\n}\nconst GrammarImport = 'GrammarImport';\nfunction isGrammarImport(item) {\n    return reflection.isInstance(item, GrammarImport);\n}\nconst InferredType = 'InferredType';\nfunction isInferredType(item) {\n    return reflection.isInstance(item, InferredType);\n}\nconst Interface = 'Interface';\nfunction isInterface(item) {\n    return reflection.isInstance(item, Interface);\n}\nconst NamedArgument = 'NamedArgument';\nfunction isNamedArgument(item) {\n    return reflection.isInstance(item, NamedArgument);\n}\nconst Negation = 'Negation';\nfunction isNegation(item) {\n    return reflection.isInstance(item, Negation);\n}\nconst NumberLiteral = 'NumberLiteral';\nfunction isNumberLiteral(item) {\n    return reflection.isInstance(item, NumberLiteral);\n}\nconst Parameter = 'Parameter';\nfunction isParameter(item) {\n    return reflection.isInstance(item, Parameter);\n}\nconst ParameterReference = 'ParameterReference';\nfunction isParameterReference(item) {\n    return reflection.isInstance(item, ParameterReference);\n}\nconst ParserRule = 'ParserRule';\nfunction isParserRule(item) {\n    return reflection.isInstance(item, ParserRule);\n}\nconst ReferenceType = 'ReferenceType';\nfunction isReferenceType(item) {\n    return reflection.isInstance(item, ReferenceType);\n}\nconst ReturnType = 'ReturnType';\nfunction isReturnType(item) {\n    return reflection.isInstance(item, ReturnType);\n}\nconst SimpleType = 'SimpleType';\nfunction isSimpleType(item) {\n    return reflection.isInstance(item, SimpleType);\n}\nconst StringLiteral = 'StringLiteral';\nfunction isStringLiteral(item) {\n    return reflection.isInstance(item, StringLiteral);\n}\nconst TerminalRule = 'TerminalRule';\nfunction isTerminalRule(item) {\n    return reflection.isInstance(item, TerminalRule);\n}\nconst Type = 'Type';\nfunction isType(item) {\n    return reflection.isInstance(item, Type);\n}\nconst TypeAttribute = 'TypeAttribute';\nfunction isTypeAttribute(item) {\n    return reflection.isInstance(item, TypeAttribute);\n}\nconst UnionType = 'UnionType';\nfunction isUnionType(item) {\n    return reflection.isInstance(item, UnionType);\n}\nconst Action = 'Action';\nfunction isAction(item) {\n    return reflection.isInstance(item, Action);\n}\nconst Alternatives = 'Alternatives';\nfunction isAlternatives(item) {\n    return reflection.isInstance(item, Alternatives);\n}\nconst Assignment = 'Assignment';\nfunction isAssignment(item) {\n    return reflection.isInstance(item, Assignment);\n}\nconst CharacterRange = 'CharacterRange';\nfunction isCharacterRange(item) {\n    return reflection.isInstance(item, CharacterRange);\n}\nconst CrossReference = 'CrossReference';\nfunction isCrossReference(item) {\n    return reflection.isInstance(item, CrossReference);\n}\nconst EndOfFile = 'EndOfFile';\nfunction isEndOfFile(item) {\n    return reflection.isInstance(item, EndOfFile);\n}\nconst Group = 'Group';\nfunction isGroup(item) {\n    return reflection.isInstance(item, Group);\n}\nconst Keyword = 'Keyword';\nfunction isKeyword(item) {\n    return reflection.isInstance(item, Keyword);\n}\nconst NegatedToken = 'NegatedToken';\nfunction isNegatedToken(item) {\n    return reflection.isInstance(item, NegatedToken);\n}\nconst RegexToken = 'RegexToken';\nfunction isRegexToken(item) {\n    return reflection.isInstance(item, RegexToken);\n}\nconst RuleCall = 'RuleCall';\nfunction isRuleCall(item) {\n    return reflection.isInstance(item, RuleCall);\n}\nconst TerminalAlternatives = 'TerminalAlternatives';\nfunction isTerminalAlternatives(item) {\n    return reflection.isInstance(item, TerminalAlternatives);\n}\nconst TerminalGroup = 'TerminalGroup';\nfunction isTerminalGroup(item) {\n    return reflection.isInstance(item, TerminalGroup);\n}\nconst TerminalRuleCall = 'TerminalRuleCall';\nfunction isTerminalRuleCall(item) {\n    return reflection.isInstance(item, TerminalRuleCall);\n}\nconst UnorderedGroup = 'UnorderedGroup';\nfunction isUnorderedGroup(item) {\n    return reflection.isInstance(item, UnorderedGroup);\n}\nconst UntilToken = 'UntilToken';\nfunction isUntilToken(item) {\n    return reflection.isInstance(item, UntilToken);\n}\nconst Wildcard = 'Wildcard';\nfunction isWildcard(item) {\n    return reflection.isInstance(item, Wildcard);\n}\nclass LangiumGrammarAstReflection extends _syntax_tree_js__WEBPACK_IMPORTED_MODULE_0__.AbstractAstReflection {\n    getAllTypes() {\n        return [AbstractElement, AbstractRule, AbstractType, Action, Alternatives, ArrayLiteral, ArrayType, Assignment, BooleanLiteral, CharacterRange, Condition, Conjunction, CrossReference, Disjunction, EndOfFile, Grammar, GrammarImport, Group, InferredType, Interface, Keyword, NamedArgument, NegatedToken, Negation, NumberLiteral, Parameter, ParameterReference, ParserRule, ReferenceType, RegexToken, ReturnType, RuleCall, SimpleType, StringLiteral, TerminalAlternatives, TerminalGroup, TerminalRule, TerminalRuleCall, Type, TypeAttribute, TypeDefinition, UnionType, UnorderedGroup, UntilToken, ValueLiteral, Wildcard];\n    }\n    computeIsSubtype(subtype, supertype) {\n        switch (subtype) {\n            case Action:\n            case Alternatives:\n            case Assignment:\n            case CharacterRange:\n            case CrossReference:\n            case EndOfFile:\n            case Group:\n            case Keyword:\n            case NegatedToken:\n            case RegexToken:\n            case RuleCall:\n            case TerminalAlternatives:\n            case TerminalGroup:\n            case TerminalRuleCall:\n            case UnorderedGroup:\n            case UntilToken:\n            case Wildcard: {\n                return this.isSubtype(AbstractElement, supertype);\n            }\n            case ArrayLiteral:\n            case NumberLiteral:\n            case StringLiteral: {\n                return this.isSubtype(ValueLiteral, supertype);\n            }\n            case ArrayType:\n            case ReferenceType:\n            case SimpleType:\n            case UnionType: {\n                return this.isSubtype(TypeDefinition, supertype);\n            }\n            case BooleanLiteral: {\n                return this.isSubtype(Condition, supertype) || this.isSubtype(ValueLiteral, supertype);\n            }\n            case Conjunction:\n            case Disjunction:\n            case Negation:\n            case ParameterReference: {\n                return this.isSubtype(Condition, supertype);\n            }\n            case InferredType:\n            case Interface:\n            case Type: {\n                return this.isSubtype(AbstractType, supertype);\n            }\n            case ParserRule: {\n                return this.isSubtype(AbstractRule, supertype) || this.isSubtype(AbstractType, supertype);\n            }\n            case TerminalRule: {\n                return this.isSubtype(AbstractRule, supertype);\n            }\n            default: {\n                return false;\n            }\n        }\n    }\n    getReferenceType(refInfo) {\n        const referenceId = `${refInfo.container.$type}:${refInfo.property}`;\n        switch (referenceId) {\n            case 'Action:type':\n            case 'CrossReference:type':\n            case 'Interface:superTypes':\n            case 'ParserRule:returnType':\n            case 'SimpleType:typeRef': {\n                return AbstractType;\n            }\n            case 'Grammar:hiddenTokens':\n            case 'ParserRule:hiddenTokens':\n            case 'RuleCall:rule': {\n                return AbstractRule;\n            }\n            case 'Grammar:usedGrammars': {\n                return Grammar;\n            }\n            case 'NamedArgument:parameter':\n            case 'ParameterReference:parameter': {\n                return Parameter;\n            }\n            case 'TerminalRuleCall:rule': {\n                return TerminalRule;\n            }\n            default: {\n                throw new Error(`${referenceId} is not a valid reference id.`);\n            }\n        }\n    }\n    getTypeMetaData(type) {\n        switch (type) {\n            case AbstractElement: {\n                return {\n                    name: AbstractElement,\n                    properties: [\n                        { name: 'cardinality' },\n                        { name: 'lookahead' }\n                    ]\n                };\n            }\n            case ArrayLiteral: {\n                return {\n                    name: ArrayLiteral,\n                    properties: [\n                        { name: 'elements', defaultValue: [] }\n                    ]\n                };\n            }\n            case ArrayType: {\n                return {\n                    name: ArrayType,\n                    properties: [\n                        { name: 'elementType' }\n                    ]\n                };\n            }\n            case BooleanLiteral: {\n                return {\n                    name: BooleanLiteral,\n                    properties: [\n                        { name: 'true', defaultValue: false }\n                    ]\n                };\n            }\n            case Conjunction: {\n                return {\n                    name: Conjunction,\n                    properties: [\n                        { name: 'left' },\n                        { name: 'right' }\n                    ]\n                };\n            }\n            case Disjunction: {\n                return {\n                    name: Disjunction,\n                    properties: [\n                        { name: 'left' },\n                        { name: 'right' }\n                    ]\n                };\n            }\n            case Grammar: {\n                return {\n                    name: Grammar,\n                    properties: [\n                        { name: 'definesHiddenTokens', defaultValue: false },\n                        { name: 'hiddenTokens', defaultValue: [] },\n                        { name: 'imports', defaultValue: [] },\n                        { name: 'interfaces', defaultValue: [] },\n                        { name: 'isDeclared', defaultValue: false },\n                        { name: 'name' },\n                        { name: 'rules', defaultValue: [] },\n                        { name: 'types', defaultValue: [] },\n                        { name: 'usedGrammars', defaultValue: [] }\n                    ]\n                };\n            }\n            case GrammarImport: {\n                return {\n                    name: GrammarImport,\n                    properties: [\n                        { name: 'path' }\n                    ]\n                };\n            }\n            case InferredType: {\n                return {\n                    name: InferredType,\n                    properties: [\n                        { name: 'name' }\n                    ]\n                };\n            }\n            case Interface: {\n                return {\n                    name: Interface,\n                    properties: [\n                        { name: 'attributes', defaultValue: [] },\n                        { name: 'name' },\n                        { name: 'superTypes', defaultValue: [] }\n                    ]\n                };\n            }\n            case NamedArgument: {\n                return {\n                    name: NamedArgument,\n                    properties: [\n                        { name: 'calledByName', defaultValue: false },\n                        { name: 'parameter' },\n                        { name: 'value' }\n                    ]\n                };\n            }\n            case Negation: {\n                return {\n                    name: Negation,\n                    properties: [\n                        { name: 'value' }\n                    ]\n                };\n            }\n            case NumberLiteral: {\n                return {\n                    name: NumberLiteral,\n                    properties: [\n                        { name: 'value' }\n                    ]\n                };\n            }\n            case Parameter: {\n                return {\n                    name: Parameter,\n                    properties: [\n                        { name: 'name' }\n                    ]\n                };\n            }\n            case ParameterReference: {\n                return {\n                    name: ParameterReference,\n                    properties: [\n                        { name: 'parameter' }\n                    ]\n                };\n            }\n            case ParserRule: {\n                return {\n                    name: ParserRule,\n                    properties: [\n                        { name: 'dataType' },\n                        { name: 'definesHiddenTokens', defaultValue: false },\n                        { name: 'definition' },\n                        { name: 'entry', defaultValue: false },\n                        { name: 'fragment', defaultValue: false },\n                        { name: 'hiddenTokens', defaultValue: [] },\n                        { name: 'inferredType' },\n                        { name: 'name' },\n                        { name: 'parameters', defaultValue: [] },\n                        { name: 'returnType' },\n                        { name: 'wildcard', defaultValue: false }\n                    ]\n                };\n            }\n            case ReferenceType: {\n                return {\n                    name: ReferenceType,\n                    properties: [\n                        { name: 'referenceType' }\n                    ]\n                };\n            }\n            case ReturnType: {\n                return {\n                    name: ReturnType,\n                    properties: [\n                        { name: 'name' }\n                    ]\n                };\n            }\n            case SimpleType: {\n                return {\n                    name: SimpleType,\n                    properties: [\n                        { name: 'primitiveType' },\n                        { name: 'stringType' },\n                        { name: 'typeRef' }\n                    ]\n                };\n            }\n            case StringLiteral: {\n                return {\n                    name: StringLiteral,\n                    properties: [\n                        { name: 'value' }\n                    ]\n                };\n            }\n            case TerminalRule: {\n                return {\n                    name: TerminalRule,\n                    properties: [\n                        { name: 'definition' },\n                        { name: 'fragment', defaultValue: false },\n                        { name: 'hidden', defaultValue: false },\n                        { name: 'name' },\n                        { name: 'type' }\n                    ]\n                };\n            }\n            case Type: {\n                return {\n                    name: Type,\n                    properties: [\n                        { name: 'name' },\n                        { name: 'type' }\n                    ]\n                };\n            }\n            case TypeAttribute: {\n                return {\n                    name: TypeAttribute,\n                    properties: [\n                        { name: 'defaultValue' },\n                        { name: 'isOptional', defaultValue: false },\n                        { name: 'name' },\n                        { name: 'type' }\n                    ]\n                };\n            }\n            case UnionType: {\n                return {\n                    name: UnionType,\n                    properties: [\n                        { name: 'types', defaultValue: [] }\n                    ]\n                };\n            }\n            case Action: {\n                return {\n                    name: Action,\n                    properties: [\n                        { name: 'cardinality' },\n                        { name: 'feature' },\n                        { name: 'inferredType' },\n                        { name: 'lookahead' },\n                        { name: 'operator' },\n                        { name: 'type' }\n                    ]\n                };\n            }\n            case Alternatives: {\n                return {\n                    name: Alternatives,\n                    properties: [\n                        { name: 'cardinality' },\n                        { name: 'elements', defaultValue: [] },\n                        { name: 'lookahead' }\n                    ]\n                };\n            }\n            case Assignment: {\n                return {\n                    name: Assignment,\n                    properties: [\n                        { name: 'cardinality' },\n                        { name: 'feature' },\n                        { name: 'lookahead' },\n                        { name: 'operator' },\n                        { name: 'terminal' }\n                    ]\n                };\n            }\n            case CharacterRange: {\n                return {\n                    name: CharacterRange,\n                    properties: [\n                        { name: 'cardinality' },\n                        { name: 'left' },\n                        { name: 'lookahead' },\n                        { name: 'right' }\n                    ]\n                };\n            }\n            case CrossReference: {\n                return {\n                    name: CrossReference,\n                    properties: [\n                        { name: 'cardinality' },\n                        { name: 'deprecatedSyntax', defaultValue: false },\n                        { name: 'lookahead' },\n                        { name: 'terminal' },\n                        { name: 'type' }\n                    ]\n                };\n            }\n            case EndOfFile: {\n                return {\n                    name: EndOfFile,\n                    properties: [\n                        { name: 'cardinality' },\n                        { name: 'lookahead' }\n                    ]\n                };\n            }\n            case Group: {\n                return {\n                    name: Group,\n                    properties: [\n                        { name: 'cardinality' },\n                        { name: 'elements', defaultValue: [] },\n                        { name: 'guardCondition' },\n                        { name: 'lookahead' }\n                    ]\n                };\n            }\n            case Keyword: {\n                return {\n                    name: Keyword,\n                    properties: [\n                        { name: 'cardinality' },\n                        { name: 'lookahead' },\n                        { name: 'value' }\n                    ]\n                };\n            }\n            case NegatedToken: {\n                return {\n                    name: NegatedToken,\n                    properties: [\n                        { name: 'cardinality' },\n                        { name: 'lookahead' },\n                        { name: 'terminal' }\n                    ]\n                };\n            }\n            case RegexToken: {\n                return {\n                    name: RegexToken,\n                    properties: [\n                        { name: 'cardinality' },\n                        { name: 'lookahead' },\n                        { name: 'regex' }\n                    ]\n                };\n            }\n            case RuleCall: {\n                return {\n                    name: RuleCall,\n                    properties: [\n                        { name: 'arguments', defaultValue: [] },\n                        { name: 'cardinality' },\n                        { name: 'lookahead' },\n                        { name: 'rule' }\n                    ]\n                };\n            }\n            case TerminalAlternatives: {\n                return {\n                    name: TerminalAlternatives,\n                    properties: [\n                        { name: 'cardinality' },\n                        { name: 'elements', defaultValue: [] },\n                        { name: 'lookahead' }\n                    ]\n                };\n            }\n            case TerminalGroup: {\n                return {\n                    name: TerminalGroup,\n                    properties: [\n                        { name: 'cardinality' },\n                        { name: 'elements', defaultValue: [] },\n                        { name: 'lookahead' }\n                    ]\n                };\n            }\n            case TerminalRuleCall: {\n                return {\n                    name: TerminalRuleCall,\n                    properties: [\n                        { name: 'cardinality' },\n                        { name: 'lookahead' },\n                        { name: 'rule' }\n                    ]\n                };\n            }\n            case UnorderedGroup: {\n                return {\n                    name: UnorderedGroup,\n                    properties: [\n                        { name: 'cardinality' },\n                        { name: 'elements', defaultValue: [] },\n                        { name: 'lookahead' }\n                    ]\n                };\n            }\n            case UntilToken: {\n                return {\n                    name: UntilToken,\n                    properties: [\n                        { name: 'cardinality' },\n                        { name: 'lookahead' },\n                        { name: 'terminal' }\n                    ]\n                };\n            }\n            case Wildcard: {\n                return {\n                    name: Wildcard,\n                    properties: [\n                        { name: 'cardinality' },\n                        { name: 'lookahead' }\n                    ]\n                };\n            }\n            default: {\n                return {\n                    name: type,\n                    properties: []\n                };\n            }\n        }\n    }\n}\nconst reflection = new LangiumGrammarAstReflection();\n//# sourceMappingURL=ast.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/languages/generated/ast.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/languages/grammar-config.js":
/*!************************************************************************************************!*\
  !*** ../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/languages/grammar-config.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createGrammarConfig: () => (/* binding */ createGrammarConfig)\n/* harmony export */ });\n/* harmony import */ var _utils_cst_utils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/cst-utils.js */ \"(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/cst-utils.js\");\n/* harmony import */ var _utils_grammar_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/grammar-utils.js */ \"(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/grammar-utils.js\");\n/* harmony import */ var _utils_regexp_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/regexp-utils.js */ \"(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/regexp-utils.js\");\n/* harmony import */ var _generated_ast_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./generated/ast.js */ \"(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/languages/generated/ast.js\");\n/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\n\n\n\n/**\n * Create the default grammar configuration (used by `createDefaultModule`). This can be overridden in a\n * language-specific module.\n */\nfunction createGrammarConfig(services) {\n    const rules = [];\n    const grammar = services.Grammar;\n    for (const rule of grammar.rules) {\n        if ((0,_generated_ast_js__WEBPACK_IMPORTED_MODULE_0__.isTerminalRule)(rule) && (0,_utils_grammar_utils_js__WEBPACK_IMPORTED_MODULE_1__.isCommentTerminal)(rule) && (0,_utils_regexp_utils_js__WEBPACK_IMPORTED_MODULE_2__.isMultilineComment)((0,_utils_grammar_utils_js__WEBPACK_IMPORTED_MODULE_1__.terminalRegex)(rule))) {\n            rules.push(rule.name);\n        }\n    }\n    return {\n        multilineCommentRules: rules,\n        nameRegexp: _utils_cst_utils_js__WEBPACK_IMPORTED_MODULE_3__.DefaultNameRegexp\n    };\n}\n//# sourceMappingURL=grammar-config.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2xhbmdpdW1AMy4zLjEvbm9kZV9tb2R1bGVzL2xhbmdpdW0vbGliL2xhbmd1YWdlcy9ncmFtbWFyLWNvbmZpZy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDMEQ7QUFDbUI7QUFDZjtBQUNWO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQSxZQUFZLGlFQUFjLFVBQVUsMEVBQWlCLFVBQVUsMEVBQWtCLENBQUMsc0VBQWE7QUFDL0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixrRUFBaUI7QUFDckM7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvZXRoYW5raW0vTmVzdG9yL21lZGZldGNoLmpzL25vZGVfbW9kdWxlcy8ucG5wbS9sYW5naXVtQDMuMy4xL25vZGVfbW9kdWxlcy9sYW5naXVtL2xpYi9sYW5ndWFnZXMvZ3JhbW1hci1jb25maWcuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuICogQ29weXJpZ2h0IDIwMjEgVHlwZUZveCBHbWJIXG4gKiBUaGlzIHByb2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzIGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0aGVcbiAqIHRlcm1zIG9mIHRoZSBNSVQgTGljZW5zZSwgd2hpY2ggaXMgYXZhaWxhYmxlIGluIHRoZSBwcm9qZWN0IHJvb3QuXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuaW1wb3J0IHsgRGVmYXVsdE5hbWVSZWdleHAgfSBmcm9tICcuLi91dGlscy9jc3QtdXRpbHMuanMnO1xuaW1wb3J0IHsgaXNDb21tZW50VGVybWluYWwsIHRlcm1pbmFsUmVnZXggfSBmcm9tICcuLi91dGlscy9ncmFtbWFyLXV0aWxzLmpzJztcbmltcG9ydCB7IGlzTXVsdGlsaW5lQ29tbWVudCB9IGZyb20gJy4uL3V0aWxzL3JlZ2V4cC11dGlscy5qcyc7XG5pbXBvcnQgeyBpc1Rlcm1pbmFsUnVsZSB9IGZyb20gJy4vZ2VuZXJhdGVkL2FzdC5qcyc7XG4vKipcbiAqIENyZWF0ZSB0aGUgZGVmYXVsdCBncmFtbWFyIGNvbmZpZ3VyYXRpb24gKHVzZWQgYnkgYGNyZWF0ZURlZmF1bHRNb2R1bGVgKS4gVGhpcyBjYW4gYmUgb3ZlcnJpZGRlbiBpbiBhXG4gKiBsYW5ndWFnZS1zcGVjaWZpYyBtb2R1bGUuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVHcmFtbWFyQ29uZmlnKHNlcnZpY2VzKSB7XG4gICAgY29uc3QgcnVsZXMgPSBbXTtcbiAgICBjb25zdCBncmFtbWFyID0gc2VydmljZXMuR3JhbW1hcjtcbiAgICBmb3IgKGNvbnN0IHJ1bGUgb2YgZ3JhbW1hci5ydWxlcykge1xuICAgICAgICBpZiAoaXNUZXJtaW5hbFJ1bGUocnVsZSkgJiYgaXNDb21tZW50VGVybWluYWwocnVsZSkgJiYgaXNNdWx0aWxpbmVDb21tZW50KHRlcm1pbmFsUmVnZXgocnVsZSkpKSB7XG4gICAgICAgICAgICBydWxlcy5wdXNoKHJ1bGUubmFtZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgbXVsdGlsaW5lQ29tbWVudFJ1bGVzOiBydWxlcyxcbiAgICAgICAgbmFtZVJlZ2V4cDogRGVmYXVsdE5hbWVSZWdleHBcbiAgICB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Z3JhbW1hci1jb25maWcuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/languages/grammar-config.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/parser/async-parser.js":
/*!*******************************************************************************************!*\
  !*** ../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/parser/async-parser.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AbstractThreadedAsyncParser: () => (/* binding */ AbstractThreadedAsyncParser),\n/* harmony export */   DefaultAsyncParser: () => (/* binding */ DefaultAsyncParser),\n/* harmony export */   ParserWorker: () => (/* binding */ ParserWorker)\n/* harmony export */ });\n/* harmony import */ var _utils_promise_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/promise-utils.js */ \"(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/promise-utils.js\");\n/* harmony import */ var _utils_event_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/event.js */ \"(ssr)/../node_modules/.pnpm/vscode-jsonrpc@8.2.0/node_modules/vscode-jsonrpc/lib/common/events.js\");\n/******************************************************************************\n * Copyright 2023 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\n\n/**\n * Default implementation of the async parser which simply wraps the sync parser in a promise.\n *\n * @remarks\n * A real implementation would create worker threads or web workers to offload the parsing work.\n */\nclass DefaultAsyncParser {\n    constructor(services) {\n        this.syncParser = services.parser.LangiumParser;\n    }\n    parse(text, _cancelToken) {\n        return Promise.resolve(this.syncParser.parse(text));\n    }\n}\nclass AbstractThreadedAsyncParser {\n    constructor(services) {\n        /**\n         * The thread count determines how many threads are used to parse files in parallel.\n         * The default value is 8. Decreasing this value increases startup performance, but decreases parallel parsing performance.\n         */\n        this.threadCount = 8;\n        /**\n         * The termination delay determines how long the parser waits for a thread to finish after a cancellation request.\n         * The default value is 200(ms).\n         */\n        this.terminationDelay = 200;\n        this.workerPool = [];\n        this.queue = [];\n        this.hydrator = services.serializer.Hydrator;\n    }\n    initializeWorkers() {\n        while (this.workerPool.length < this.threadCount) {\n            const worker = this.createWorker();\n            worker.onReady(() => {\n                if (this.queue.length > 0) {\n                    const deferred = this.queue.shift();\n                    if (deferred) {\n                        worker.lock();\n                        deferred.resolve(worker);\n                    }\n                }\n            });\n            this.workerPool.push(worker);\n        }\n    }\n    async parse(text, cancelToken) {\n        const worker = await this.acquireParserWorker(cancelToken);\n        const deferred = new _utils_promise_utils_js__WEBPACK_IMPORTED_MODULE_0__.Deferred();\n        let timeout;\n        // If the cancellation token is requested, we wait for a certain time before terminating the worker.\n        // Since the cancellation token lives longer than the parsing process, we need to dispose the event listener.\n        // Otherwise, we might accidentally terminate the worker after the parsing process has finished.\n        const cancellation = cancelToken.onCancellationRequested(() => {\n            timeout = setTimeout(() => {\n                this.terminateWorker(worker);\n            }, this.terminationDelay);\n        });\n        worker.parse(text).then(result => {\n            const hydrated = this.hydrator.hydrate(result);\n            deferred.resolve(hydrated);\n        }).catch(err => {\n            deferred.reject(err);\n        }).finally(() => {\n            cancellation.dispose();\n            clearTimeout(timeout);\n        });\n        return deferred.promise;\n    }\n    terminateWorker(worker) {\n        worker.terminate();\n        const index = this.workerPool.indexOf(worker);\n        if (index >= 0) {\n            this.workerPool.splice(index, 1);\n        }\n    }\n    async acquireParserWorker(cancelToken) {\n        this.initializeWorkers();\n        for (const worker of this.workerPool) {\n            if (worker.ready) {\n                worker.lock();\n                return worker;\n            }\n        }\n        const deferred = new _utils_promise_utils_js__WEBPACK_IMPORTED_MODULE_0__.Deferred();\n        cancelToken.onCancellationRequested(() => {\n            const index = this.queue.indexOf(deferred);\n            if (index >= 0) {\n                this.queue.splice(index, 1);\n            }\n            deferred.reject(_utils_promise_utils_js__WEBPACK_IMPORTED_MODULE_0__.OperationCancelled);\n        });\n        this.queue.push(deferred);\n        return deferred.promise;\n    }\n}\nclass ParserWorker {\n    get ready() {\n        return this._ready;\n    }\n    get onReady() {\n        return this.onReadyEmitter.event;\n    }\n    constructor(sendMessage, onMessage, onError, terminate) {\n        this.onReadyEmitter = new _utils_event_js__WEBPACK_IMPORTED_MODULE_1__.Emitter();\n        this.deferred = new _utils_promise_utils_js__WEBPACK_IMPORTED_MODULE_0__.Deferred();\n        this._ready = true;\n        this._parsing = false;\n        this.sendMessage = sendMessage;\n        this._terminate = terminate;\n        onMessage(result => {\n            const parseResult = result;\n            this.deferred.resolve(parseResult);\n            this.unlock();\n        });\n        onError(error => {\n            this.deferred.reject(error);\n            this.unlock();\n        });\n    }\n    terminate() {\n        this.deferred.reject(_utils_promise_utils_js__WEBPACK_IMPORTED_MODULE_0__.OperationCancelled);\n        this._terminate();\n    }\n    lock() {\n        this._ready = false;\n    }\n    unlock() {\n        this._parsing = false;\n        this._ready = true;\n        this.onReadyEmitter.fire();\n    }\n    parse(text) {\n        if (this._parsing) {\n            throw new Error('Parser worker is busy');\n        }\n        this._parsing = true;\n        this.deferred = new _utils_promise_utils_js__WEBPACK_IMPORTED_MODULE_0__.Deferred();\n        this.sendMessage(text);\n        return this.deferred.promise;\n    }\n}\n//# sourceMappingURL=async-parser.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/parser/async-parser.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/parser/completion-parser-builder.js":
/*!********************************************************************************************************!*\
  !*** ../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/parser/completion-parser-builder.js ***!
  \********************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createCompletionParser: () => (/* binding */ createCompletionParser)\n/* harmony export */ });\n/* harmony import */ var _langium_parser_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./langium-parser.js */ \"(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/parser/langium-parser.js\");\n/* harmony import */ var _parser_builder_base_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./parser-builder-base.js */ \"(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/parser/parser-builder-base.js\");\n/******************************************************************************\n * Copyright 2022 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\n\nfunction createCompletionParser(services) {\n    const grammar = services.Grammar;\n    const lexer = services.parser.Lexer;\n    const parser = new _langium_parser_js__WEBPACK_IMPORTED_MODULE_0__.LangiumCompletionParser(services);\n    (0,_parser_builder_base_js__WEBPACK_IMPORTED_MODULE_1__.createParser)(grammar, parser, lexer.definition);\n    parser.finalize();\n    return parser;\n}\n//# sourceMappingURL=completion-parser-builder.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2xhbmdpdW1AMy4zLjEvbm9kZV9tb2R1bGVzL2xhbmdpdW0vbGliL3BhcnNlci9jb21wbGV0aW9uLXBhcnNlci1idWlsZGVyLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDOEQ7QUFDTjtBQUNqRDtBQUNQO0FBQ0E7QUFDQSx1QkFBdUIsdUVBQXVCO0FBQzlDLElBQUkscUVBQVk7QUFDaEI7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9Vc2Vycy9ldGhhbmtpbS9OZXN0b3IvbWVkZmV0Y2guanMvbm9kZV9tb2R1bGVzLy5wbnBtL2xhbmdpdW1AMy4zLjEvbm9kZV9tb2R1bGVzL2xhbmdpdW0vbGliL3BhcnNlci9jb21wbGV0aW9uLXBhcnNlci1idWlsZGVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAqIENvcHlyaWdodCAyMDIyIFR5cGVGb3ggR21iSFxuICogVGhpcyBwcm9ncmFtIGFuZCB0aGUgYWNjb21wYW55aW5nIG1hdGVyaWFscyBhcmUgbWFkZSBhdmFpbGFibGUgdW5kZXIgdGhlXG4gKiB0ZXJtcyBvZiB0aGUgTUlUIExpY2Vuc2UsIHdoaWNoIGlzIGF2YWlsYWJsZSBpbiB0aGUgcHJvamVjdCByb290LlxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbmltcG9ydCB7IExhbmdpdW1Db21wbGV0aW9uUGFyc2VyIH0gZnJvbSAnLi9sYW5naXVtLXBhcnNlci5qcyc7XG5pbXBvcnQgeyBjcmVhdGVQYXJzZXIgfSBmcm9tICcuL3BhcnNlci1idWlsZGVyLWJhc2UuanMnO1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUNvbXBsZXRpb25QYXJzZXIoc2VydmljZXMpIHtcbiAgICBjb25zdCBncmFtbWFyID0gc2VydmljZXMuR3JhbW1hcjtcbiAgICBjb25zdCBsZXhlciA9IHNlcnZpY2VzLnBhcnNlci5MZXhlcjtcbiAgICBjb25zdCBwYXJzZXIgPSBuZXcgTGFuZ2l1bUNvbXBsZXRpb25QYXJzZXIoc2VydmljZXMpO1xuICAgIGNyZWF0ZVBhcnNlcihncmFtbWFyLCBwYXJzZXIsIGxleGVyLmRlZmluaXRpb24pO1xuICAgIHBhcnNlci5maW5hbGl6ZSgpO1xuICAgIHJldHVybiBwYXJzZXI7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb21wbGV0aW9uLXBhcnNlci1idWlsZGVyLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/parser/completion-parser-builder.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/parser/cst-node-builder.js":
/*!***********************************************************************************************!*\
  !*** ../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/parser/cst-node-builder.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AbstractCstNode: () => (/* binding */ AbstractCstNode),\n/* harmony export */   CompositeCstNodeImpl: () => (/* binding */ CompositeCstNodeImpl),\n/* harmony export */   CstNodeBuilder: () => (/* binding */ CstNodeBuilder),\n/* harmony export */   LeafCstNodeImpl: () => (/* binding */ LeafCstNodeImpl),\n/* harmony export */   RootCstNodeImpl: () => (/* binding */ RootCstNodeImpl)\n/* harmony export */ });\n/* harmony import */ var vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vscode-languageserver-types */ \"(ssr)/../node_modules/.pnpm/vscode-languageserver-types@3.17.5/node_modules/vscode-languageserver-types/lib/esm/main.js\");\n/* harmony import */ var _utils_cst_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/cst-utils.js */ \"(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/cst-utils.js\");\n/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\n\nclass CstNodeBuilder {\n    constructor() {\n        this.nodeStack = [];\n    }\n    get current() {\n        var _a;\n        return (_a = this.nodeStack[this.nodeStack.length - 1]) !== null && _a !== void 0 ? _a : this.rootNode;\n    }\n    buildRootNode(input) {\n        this.rootNode = new RootCstNodeImpl(input);\n        this.rootNode.root = this.rootNode;\n        this.nodeStack = [this.rootNode];\n        return this.rootNode;\n    }\n    buildCompositeNode(feature) {\n        const compositeNode = new CompositeCstNodeImpl();\n        compositeNode.grammarSource = feature;\n        compositeNode.root = this.rootNode;\n        this.current.content.push(compositeNode);\n        this.nodeStack.push(compositeNode);\n        return compositeNode;\n    }\n    buildLeafNode(token, feature) {\n        const leafNode = new LeafCstNodeImpl(token.startOffset, token.image.length, (0,_utils_cst_utils_js__WEBPACK_IMPORTED_MODULE_1__.tokenToRange)(token), token.tokenType, !feature);\n        leafNode.grammarSource = feature;\n        leafNode.root = this.rootNode;\n        this.current.content.push(leafNode);\n        return leafNode;\n    }\n    removeNode(node) {\n        const parent = node.container;\n        if (parent) {\n            const index = parent.content.indexOf(node);\n            if (index >= 0) {\n                parent.content.splice(index, 1);\n            }\n        }\n    }\n    addHiddenNodes(tokens) {\n        const nodes = [];\n        for (const token of tokens) {\n            const leafNode = new LeafCstNodeImpl(token.startOffset, token.image.length, (0,_utils_cst_utils_js__WEBPACK_IMPORTED_MODULE_1__.tokenToRange)(token), token.tokenType, true);\n            leafNode.root = this.rootNode;\n            nodes.push(leafNode);\n        }\n        let current = this.current;\n        let added = false;\n        // If we are within a composite node, we add the hidden nodes to the content\n        if (current.content.length > 0) {\n            current.content.push(...nodes);\n            return;\n        }\n        // Otherwise we are at a newly created node\n        // Instead of adding the hidden nodes here, we search for the first parent node with content\n        while (current.container) {\n            const index = current.container.content.indexOf(current);\n            if (index > 0) {\n                // Add the hidden nodes before the current node\n                current.container.content.splice(index, 0, ...nodes);\n                added = true;\n                break;\n            }\n            current = current.container;\n        }\n        // If we arrive at the root node, we add the hidden nodes at the beginning\n        // This is the case if the hidden nodes are the first nodes in the tree\n        if (!added) {\n            this.rootNode.content.unshift(...nodes);\n        }\n    }\n    construct(item) {\n        const current = this.current;\n        // The specified item could be a datatype ($type is symbol) or a fragment ($type is undefined)\n        // Only if the $type is a string, we actually assign the element\n        if (typeof item.$type === 'string') {\n            this.current.astNode = item;\n        }\n        item.$cstNode = current;\n        const node = this.nodeStack.pop();\n        // Empty composite nodes are not valid\n        // Simply remove the node from the tree\n        if ((node === null || node === void 0 ? void 0 : node.content.length) === 0) {\n            this.removeNode(node);\n        }\n    }\n}\nclass AbstractCstNode {\n    /** @deprecated use `container` instead. */\n    get parent() {\n        return this.container;\n    }\n    /** @deprecated use `grammarSource` instead. */\n    get feature() {\n        return this.grammarSource;\n    }\n    get hidden() {\n        return false;\n    }\n    get astNode() {\n        var _a, _b;\n        const node = typeof ((_a = this._astNode) === null || _a === void 0 ? void 0 : _a.$type) === 'string' ? this._astNode : (_b = this.container) === null || _b === void 0 ? void 0 : _b.astNode;\n        if (!node) {\n            throw new Error('This node has no associated AST element');\n        }\n        return node;\n    }\n    set astNode(value) {\n        this._astNode = value;\n    }\n    /** @deprecated use `astNode` instead. */\n    get element() {\n        return this.astNode;\n    }\n    get text() {\n        return this.root.fullText.substring(this.offset, this.end);\n    }\n}\nclass LeafCstNodeImpl extends AbstractCstNode {\n    get offset() {\n        return this._offset;\n    }\n    get length() {\n        return this._length;\n    }\n    get end() {\n        return this._offset + this._length;\n    }\n    get hidden() {\n        return this._hidden;\n    }\n    get tokenType() {\n        return this._tokenType;\n    }\n    get range() {\n        return this._range;\n    }\n    constructor(offset, length, range, tokenType, hidden = false) {\n        super();\n        this._hidden = hidden;\n        this._offset = offset;\n        this._tokenType = tokenType;\n        this._length = length;\n        this._range = range;\n    }\n}\nclass CompositeCstNodeImpl extends AbstractCstNode {\n    constructor() {\n        super(...arguments);\n        this.content = new CstNodeContainer(this);\n    }\n    /** @deprecated use `content` instead. */\n    get children() {\n        return this.content;\n    }\n    get offset() {\n        var _a, _b;\n        return (_b = (_a = this.firstNonHiddenNode) === null || _a === void 0 ? void 0 : _a.offset) !== null && _b !== void 0 ? _b : 0;\n    }\n    get length() {\n        return this.end - this.offset;\n    }\n    get end() {\n        var _a, _b;\n        return (_b = (_a = this.lastNonHiddenNode) === null || _a === void 0 ? void 0 : _a.end) !== null && _b !== void 0 ? _b : 0;\n    }\n    get range() {\n        const firstNode = this.firstNonHiddenNode;\n        const lastNode = this.lastNonHiddenNode;\n        if (firstNode && lastNode) {\n            if (this._rangeCache === undefined) {\n                const { range: firstRange } = firstNode;\n                const { range: lastRange } = lastNode;\n                this._rangeCache = { start: firstRange.start, end: lastRange.end.line < firstRange.start.line ? firstRange.start : lastRange.end };\n            }\n            return this._rangeCache;\n        }\n        else {\n            return { start: vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.Position.create(0, 0), end: vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.Position.create(0, 0) };\n        }\n    }\n    get firstNonHiddenNode() {\n        for (const child of this.content) {\n            if (!child.hidden) {\n                return child;\n            }\n        }\n        return this.content[0];\n    }\n    get lastNonHiddenNode() {\n        for (let i = this.content.length - 1; i >= 0; i--) {\n            const child = this.content[i];\n            if (!child.hidden) {\n                return child;\n            }\n        }\n        return this.content[this.content.length - 1];\n    }\n}\nclass CstNodeContainer extends Array {\n    constructor(parent) {\n        super();\n        this.parent = parent;\n        Object.setPrototypeOf(this, CstNodeContainer.prototype);\n    }\n    push(...items) {\n        this.addParents(items);\n        return super.push(...items);\n    }\n    unshift(...items) {\n        this.addParents(items);\n        return super.unshift(...items);\n    }\n    splice(start, count, ...items) {\n        this.addParents(items);\n        return super.splice(start, count, ...items);\n    }\n    addParents(items) {\n        for (const item of items) {\n            item.container = this.parent;\n        }\n    }\n}\nclass RootCstNodeImpl extends CompositeCstNodeImpl {\n    get text() {\n        return this._text.substring(this.offset, this.end);\n    }\n    get fullText() {\n        return this._text;\n    }\n    constructor(input) {\n        super();\n        this._text = '';\n        this._text = input !== null && input !== void 0 ? input : '';\n    }\n}\n//# sourceMappingURL=cst-node-builder.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/parser/cst-node-builder.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/parser/langium-parser-builder.js":
/*!*****************************************************************************************************!*\
  !*** ../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/parser/langium-parser-builder.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createLangiumParser: () => (/* binding */ createLangiumParser),\n/* harmony export */   prepareLangiumParser: () => (/* binding */ prepareLangiumParser)\n/* harmony export */ });\n/* harmony import */ var _langium_parser_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./langium-parser.js */ \"(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/parser/langium-parser.js\");\n/* harmony import */ var _parser_builder_base_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./parser-builder-base.js */ \"(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/parser/parser-builder-base.js\");\n/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\n\n/**\n * Create and finalize a Langium parser. The parser rules are derived from the grammar, which is\n * available at `services.Grammar`.\n */\nfunction createLangiumParser(services) {\n    const parser = prepareLangiumParser(services);\n    parser.finalize();\n    return parser;\n}\n/**\n * Create a Langium parser without finalizing it. This is used to extract more detailed error\n * information when the parser is initially validated.\n */\nfunction prepareLangiumParser(services) {\n    const grammar = services.Grammar;\n    const lexer = services.parser.Lexer;\n    const parser = new _langium_parser_js__WEBPACK_IMPORTED_MODULE_0__.LangiumParser(services);\n    return (0,_parser_builder_base_js__WEBPACK_IMPORTED_MODULE_1__.createParser)(grammar, parser, lexer.definition);\n}\n//# sourceMappingURL=langium-parser-builder.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2xhbmdpdW1AMy4zLjEvbm9kZV9tb2R1bGVzL2xhbmdpdW0vbGliL3BhcnNlci9sYW5naXVtLXBhcnNlci1idWlsZGVyLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ29EO0FBQ0k7QUFDeEQ7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQSx1QkFBdUIsNkRBQWE7QUFDcEMsV0FBVyxxRUFBWTtBQUN2QjtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvZXRoYW5raW0vTmVzdG9yL21lZGZldGNoLmpzL25vZGVfbW9kdWxlcy8ucG5wbS9sYW5naXVtQDMuMy4xL25vZGVfbW9kdWxlcy9sYW5naXVtL2xpYi9wYXJzZXIvbGFuZ2l1bS1wYXJzZXItYnVpbGRlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gKiBDb3B5cmlnaHQgMjAyMSBUeXBlRm94IEdtYkhcbiAqIFRoaXMgcHJvZ3JhbSBhbmQgdGhlIGFjY29tcGFueWluZyBtYXRlcmlhbHMgYXJlIG1hZGUgYXZhaWxhYmxlIHVuZGVyIHRoZVxuICogdGVybXMgb2YgdGhlIE1JVCBMaWNlbnNlLCB3aGljaCBpcyBhdmFpbGFibGUgaW4gdGhlIHByb2plY3Qgcm9vdC5cbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5pbXBvcnQgeyBMYW5naXVtUGFyc2VyIH0gZnJvbSAnLi9sYW5naXVtLXBhcnNlci5qcyc7XG5pbXBvcnQgeyBjcmVhdGVQYXJzZXIgfSBmcm9tICcuL3BhcnNlci1idWlsZGVyLWJhc2UuanMnO1xuLyoqXG4gKiBDcmVhdGUgYW5kIGZpbmFsaXplIGEgTGFuZ2l1bSBwYXJzZXIuIFRoZSBwYXJzZXIgcnVsZXMgYXJlIGRlcml2ZWQgZnJvbSB0aGUgZ3JhbW1hciwgd2hpY2ggaXNcbiAqIGF2YWlsYWJsZSBhdCBgc2VydmljZXMuR3JhbW1hcmAuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVMYW5naXVtUGFyc2VyKHNlcnZpY2VzKSB7XG4gICAgY29uc3QgcGFyc2VyID0gcHJlcGFyZUxhbmdpdW1QYXJzZXIoc2VydmljZXMpO1xuICAgIHBhcnNlci5maW5hbGl6ZSgpO1xuICAgIHJldHVybiBwYXJzZXI7XG59XG4vKipcbiAqIENyZWF0ZSBhIExhbmdpdW0gcGFyc2VyIHdpdGhvdXQgZmluYWxpemluZyBpdC4gVGhpcyBpcyB1c2VkIHRvIGV4dHJhY3QgbW9yZSBkZXRhaWxlZCBlcnJvclxuICogaW5mb3JtYXRpb24gd2hlbiB0aGUgcGFyc2VyIGlzIGluaXRpYWxseSB2YWxpZGF0ZWQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwcmVwYXJlTGFuZ2l1bVBhcnNlcihzZXJ2aWNlcykge1xuICAgIGNvbnN0IGdyYW1tYXIgPSBzZXJ2aWNlcy5HcmFtbWFyO1xuICAgIGNvbnN0IGxleGVyID0gc2VydmljZXMucGFyc2VyLkxleGVyO1xuICAgIGNvbnN0IHBhcnNlciA9IG5ldyBMYW5naXVtUGFyc2VyKHNlcnZpY2VzKTtcbiAgICByZXR1cm4gY3JlYXRlUGFyc2VyKGdyYW1tYXIsIHBhcnNlciwgbGV4ZXIuZGVmaW5pdGlvbik7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1sYW5naXVtLXBhcnNlci1idWlsZGVyLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/parser/langium-parser-builder.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/parser/langium-parser.js":
/*!*********************************************************************************************!*\
  !*** ../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/parser/langium-parser.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AbstractLangiumParser: () => (/* binding */ AbstractLangiumParser),\n/* harmony export */   AbstractParserErrorMessageProvider: () => (/* binding */ AbstractParserErrorMessageProvider),\n/* harmony export */   DatatypeSymbol: () => (/* binding */ DatatypeSymbol),\n/* harmony export */   LangiumCompletionParser: () => (/* binding */ LangiumCompletionParser),\n/* harmony export */   LangiumParser: () => (/* binding */ LangiumParser),\n/* harmony export */   LangiumParserErrorMessageProvider: () => (/* binding */ LangiumParserErrorMessageProvider)\n/* harmony export */ });\n/* harmony import */ var chevrotain__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! chevrotain */ \"(ssr)/../node_modules/.pnpm/chevrotain@11.0.3/node_modules/chevrotain/lib/src/api.js\");\n/* harmony import */ var chevrotain_allstar__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! chevrotain-allstar */ \"(ssr)/../node_modules/.pnpm/chevrotain-allstar@0.3.1_chevrotain@11.0.3/node_modules/chevrotain-allstar/lib/index.js\");\n/* harmony import */ var _languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../languages/generated/ast.js */ \"(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/languages/generated/ast.js\");\n/* harmony import */ var _utils_grammar_utils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/grammar-utils.js */ \"(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/grammar-utils.js\");\n/* harmony import */ var _utils_ast_utils_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/ast-utils.js */ \"(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/ast-utils.js\");\n/* harmony import */ var _cst_node_builder_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./cst-node-builder.js */ \"(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/parser/cst-node-builder.js\");\n/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\n\n\n\n\n\nconst DatatypeSymbol = Symbol('Datatype');\nfunction isDataTypeNode(node) {\n    return node.$type === DatatypeSymbol;\n}\nconst ruleSuffix = '\\u200B';\nconst withRuleSuffix = (name) => name.endsWith(ruleSuffix) ? name : name + ruleSuffix;\nclass AbstractLangiumParser {\n    constructor(services) {\n        this._unorderedGroups = new Map();\n        this.allRules = new Map();\n        this.lexer = services.parser.Lexer;\n        const tokens = this.lexer.definition;\n        const production = services.LanguageMetaData.mode === 'production';\n        this.wrapper = new ChevrotainWrapper(tokens, Object.assign(Object.assign({}, services.parser.ParserConfig), { skipValidations: production, errorMessageProvider: services.parser.ParserErrorMessageProvider }));\n    }\n    alternatives(idx, choices) {\n        this.wrapper.wrapOr(idx, choices);\n    }\n    optional(idx, callback) {\n        this.wrapper.wrapOption(idx, callback);\n    }\n    many(idx, callback) {\n        this.wrapper.wrapMany(idx, callback);\n    }\n    atLeastOne(idx, callback) {\n        this.wrapper.wrapAtLeastOne(idx, callback);\n    }\n    getRule(name) {\n        return this.allRules.get(name);\n    }\n    isRecording() {\n        return this.wrapper.IS_RECORDING;\n    }\n    get unorderedGroups() {\n        return this._unorderedGroups;\n    }\n    getRuleStack() {\n        return this.wrapper.RULE_STACK;\n    }\n    finalize() {\n        this.wrapper.wrapSelfAnalysis();\n    }\n}\nclass LangiumParser extends AbstractLangiumParser {\n    get current() {\n        return this.stack[this.stack.length - 1];\n    }\n    constructor(services) {\n        super(services);\n        this.nodeBuilder = new _cst_node_builder_js__WEBPACK_IMPORTED_MODULE_2__.CstNodeBuilder();\n        this.stack = [];\n        this.assignmentMap = new Map();\n        this.linker = services.references.Linker;\n        this.converter = services.parser.ValueConverter;\n        this.astReflection = services.shared.AstReflection;\n    }\n    rule(rule, impl) {\n        const type = this.computeRuleType(rule);\n        const ruleMethod = this.wrapper.DEFINE_RULE(withRuleSuffix(rule.name), this.startImplementation(type, impl).bind(this));\n        this.allRules.set(rule.name, ruleMethod);\n        if (rule.entry) {\n            this.mainRule = ruleMethod;\n        }\n        return ruleMethod;\n    }\n    computeRuleType(rule) {\n        if (rule.fragment) {\n            return undefined;\n        }\n        else if ((0,_utils_grammar_utils_js__WEBPACK_IMPORTED_MODULE_3__.isDataTypeRule)(rule)) {\n            return DatatypeSymbol;\n        }\n        else {\n            const explicit = (0,_utils_grammar_utils_js__WEBPACK_IMPORTED_MODULE_3__.getExplicitRuleType)(rule);\n            return explicit !== null && explicit !== void 0 ? explicit : rule.name;\n        }\n    }\n    parse(input, options = {}) {\n        this.nodeBuilder.buildRootNode(input);\n        const lexerResult = this.lexerResult = this.lexer.tokenize(input);\n        this.wrapper.input = lexerResult.tokens;\n        const ruleMethod = options.rule ? this.allRules.get(options.rule) : this.mainRule;\n        if (!ruleMethod) {\n            throw new Error(options.rule ? `No rule found with name '${options.rule}'` : 'No main rule available.');\n        }\n        const result = ruleMethod.call(this.wrapper, {});\n        this.nodeBuilder.addHiddenNodes(lexerResult.hidden);\n        this.unorderedGroups.clear();\n        this.lexerResult = undefined;\n        return {\n            value: result,\n            lexerErrors: lexerResult.errors,\n            lexerReport: lexerResult.report,\n            parserErrors: this.wrapper.errors\n        };\n    }\n    startImplementation($type, implementation) {\n        return (args) => {\n            // Only create a new AST node in case the calling rule is not a fragment rule\n            const createNode = !this.isRecording() && $type !== undefined;\n            if (createNode) {\n                const node = { $type };\n                this.stack.push(node);\n                if ($type === DatatypeSymbol) {\n                    node.value = '';\n                }\n            }\n            let result;\n            try {\n                result = implementation(args);\n            }\n            catch (err) {\n                result = undefined;\n            }\n            if (result === undefined && createNode) {\n                result = this.construct();\n            }\n            return result;\n        };\n    }\n    extractHiddenTokens(token) {\n        const hiddenTokens = this.lexerResult.hidden;\n        if (!hiddenTokens.length) {\n            return [];\n        }\n        const offset = token.startOffset;\n        for (let i = 0; i < hiddenTokens.length; i++) {\n            const token = hiddenTokens[i];\n            if (token.startOffset > offset) {\n                return hiddenTokens.splice(0, i);\n            }\n        }\n        return hiddenTokens.splice(0, hiddenTokens.length);\n    }\n    consume(idx, tokenType, feature) {\n        const token = this.wrapper.wrapConsume(idx, tokenType);\n        if (!this.isRecording() && this.isValidToken(token)) {\n            const hiddenTokens = this.extractHiddenTokens(token);\n            this.nodeBuilder.addHiddenNodes(hiddenTokens);\n            const leafNode = this.nodeBuilder.buildLeafNode(token, feature);\n            const { assignment, isCrossRef } = this.getAssignment(feature);\n            const current = this.current;\n            if (assignment) {\n                const convertedValue = (0,_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_4__.isKeyword)(feature) ? token.image : this.converter.convert(token.image, leafNode);\n                this.assign(assignment.operator, assignment.feature, convertedValue, leafNode, isCrossRef);\n            }\n            else if (isDataTypeNode(current)) {\n                let text = token.image;\n                if (!(0,_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_4__.isKeyword)(feature)) {\n                    text = this.converter.convert(text, leafNode).toString();\n                }\n                current.value += text;\n            }\n        }\n    }\n    /**\n     * Most consumed parser tokens are valid. However there are two cases in which they are not valid:\n     *\n     * 1. They were inserted during error recovery by the parser. These tokens don't really exist and should not be further processed\n     * 2. They contain invalid token ranges. This might include the special EOF token, or other tokens produced by invalid token builders.\n     */\n    isValidToken(token) {\n        return !token.isInsertedInRecovery && !isNaN(token.startOffset) && typeof token.endOffset === 'number' && !isNaN(token.endOffset);\n    }\n    subrule(idx, rule, fragment, feature, args) {\n        let cstNode;\n        if (!this.isRecording() && !fragment) {\n            // We only want to create a new CST node if the subrule actually creates a new AST node.\n            // In other cases like calls of fragment rules the current CST/AST is populated further.\n            // Note that skipping this initialization and leaving cstNode unassigned also skips the subrule assignment later on.\n            // This is intended, as fragment rules only enrich the current AST node\n            cstNode = this.nodeBuilder.buildCompositeNode(feature);\n        }\n        const subruleResult = this.wrapper.wrapSubrule(idx, rule, args);\n        if (!this.isRecording() && cstNode && cstNode.length > 0) {\n            this.performSubruleAssignment(subruleResult, feature, cstNode);\n        }\n    }\n    performSubruleAssignment(result, feature, cstNode) {\n        const { assignment, isCrossRef } = this.getAssignment(feature);\n        if (assignment) {\n            this.assign(assignment.operator, assignment.feature, result, cstNode, isCrossRef);\n        }\n        else if (!assignment) {\n            // If we call a subrule without an assignment we either:\n            // 1. append the result of the subrule (data type rule)\n            // 2. override the current object with the newly parsed object\n            // If the current element is an AST node and the result of the subrule\n            // is a data type rule, we can safely discard the results.\n            const current = this.current;\n            if (isDataTypeNode(current)) {\n                current.value += result.toString();\n            }\n            else if (typeof result === 'object' && result) {\n                const object = this.assignWithoutOverride(result, current);\n                const newItem = object;\n                this.stack.pop();\n                this.stack.push(newItem);\n            }\n        }\n    }\n    action($type, action) {\n        if (!this.isRecording()) {\n            let last = this.current;\n            if (action.feature && action.operator) {\n                last = this.construct();\n                this.nodeBuilder.removeNode(last.$cstNode);\n                const node = this.nodeBuilder.buildCompositeNode(action);\n                node.content.push(last.$cstNode);\n                const newItem = { $type };\n                this.stack.push(newItem);\n                this.assign(action.operator, action.feature, last, last.$cstNode, false);\n            }\n            else {\n                last.$type = $type;\n            }\n        }\n    }\n    construct() {\n        if (this.isRecording()) {\n            return undefined;\n        }\n        const obj = this.current;\n        (0,_utils_ast_utils_js__WEBPACK_IMPORTED_MODULE_5__.linkContentToContainer)(obj);\n        this.nodeBuilder.construct(obj);\n        this.stack.pop();\n        if (isDataTypeNode(obj)) {\n            return this.converter.convert(obj.value, obj.$cstNode);\n        }\n        else {\n            (0,_utils_ast_utils_js__WEBPACK_IMPORTED_MODULE_5__.assignMandatoryProperties)(this.astReflection, obj);\n        }\n        return obj;\n    }\n    getAssignment(feature) {\n        if (!this.assignmentMap.has(feature)) {\n            const assignment = (0,_utils_ast_utils_js__WEBPACK_IMPORTED_MODULE_5__.getContainerOfType)(feature, _languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_4__.isAssignment);\n            this.assignmentMap.set(feature, {\n                assignment: assignment,\n                isCrossRef: assignment ? (0,_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_4__.isCrossReference)(assignment.terminal) : false\n            });\n        }\n        return this.assignmentMap.get(feature);\n    }\n    assign(operator, feature, value, cstNode, isCrossRef) {\n        const obj = this.current;\n        let item;\n        if (isCrossRef && typeof value === 'string') {\n            item = this.linker.buildReference(obj, feature, cstNode, value);\n        }\n        else {\n            item = value;\n        }\n        switch (operator) {\n            case '=': {\n                obj[feature] = item;\n                break;\n            }\n            case '?=': {\n                obj[feature] = true;\n                break;\n            }\n            case '+=': {\n                if (!Array.isArray(obj[feature])) {\n                    obj[feature] = [];\n                }\n                obj[feature].push(item);\n            }\n        }\n    }\n    assignWithoutOverride(target, source) {\n        for (const [name, existingValue] of Object.entries(source)) {\n            const newValue = target[name];\n            if (newValue === undefined) {\n                target[name] = existingValue;\n            }\n            else if (Array.isArray(newValue) && Array.isArray(existingValue)) {\n                existingValue.push(...newValue);\n                target[name] = existingValue;\n            }\n        }\n        // The target was parsed from a unassigned subrule\n        // After the subrule construction, it received a cst node\n        // This CST node will later be overriden by the cst node builder\n        // To prevent references to stale AST nodes in the CST,\n        // we need to remove the reference here\n        const targetCstNode = target.$cstNode;\n        if (targetCstNode) {\n            targetCstNode.astNode = undefined;\n            target.$cstNode = undefined;\n        }\n        return target;\n    }\n    get definitionErrors() {\n        return this.wrapper.definitionErrors;\n    }\n}\nclass AbstractParserErrorMessageProvider {\n    buildMismatchTokenMessage(options) {\n        return chevrotain__WEBPACK_IMPORTED_MODULE_0__.defaultParserErrorProvider.buildMismatchTokenMessage(options);\n    }\n    buildNotAllInputParsedMessage(options) {\n        return chevrotain__WEBPACK_IMPORTED_MODULE_0__.defaultParserErrorProvider.buildNotAllInputParsedMessage(options);\n    }\n    buildNoViableAltMessage(options) {\n        return chevrotain__WEBPACK_IMPORTED_MODULE_0__.defaultParserErrorProvider.buildNoViableAltMessage(options);\n    }\n    buildEarlyExitMessage(options) {\n        return chevrotain__WEBPACK_IMPORTED_MODULE_0__.defaultParserErrorProvider.buildEarlyExitMessage(options);\n    }\n}\nclass LangiumParserErrorMessageProvider extends AbstractParserErrorMessageProvider {\n    buildMismatchTokenMessage({ expected, actual }) {\n        const expectedMsg = expected.LABEL\n            ? '`' + expected.LABEL + '`'\n            : expected.name.endsWith(':KW')\n                ? `keyword '${expected.name.substring(0, expected.name.length - 3)}'`\n                : `token of type '${expected.name}'`;\n        return `Expecting ${expectedMsg} but found \\`${actual.image}\\`.`;\n    }\n    buildNotAllInputParsedMessage({ firstRedundant }) {\n        return `Expecting end of file but found \\`${firstRedundant.image}\\`.`;\n    }\n}\nclass LangiumCompletionParser extends AbstractLangiumParser {\n    constructor() {\n        super(...arguments);\n        this.tokens = [];\n        this.elementStack = [];\n        this.lastElementStack = [];\n        this.nextTokenIndex = 0;\n        this.stackSize = 0;\n    }\n    action() {\n        // NOOP\n    }\n    construct() {\n        // NOOP\n        return undefined;\n    }\n    parse(input) {\n        this.resetState();\n        const tokens = this.lexer.tokenize(input, { mode: 'partial' });\n        this.tokens = tokens.tokens;\n        this.wrapper.input = [...this.tokens];\n        this.mainRule.call(this.wrapper, {});\n        this.unorderedGroups.clear();\n        return {\n            tokens: this.tokens,\n            elementStack: [...this.lastElementStack],\n            tokenIndex: this.nextTokenIndex\n        };\n    }\n    rule(rule, impl) {\n        const ruleMethod = this.wrapper.DEFINE_RULE(withRuleSuffix(rule.name), this.startImplementation(impl).bind(this));\n        this.allRules.set(rule.name, ruleMethod);\n        if (rule.entry) {\n            this.mainRule = ruleMethod;\n        }\n        return ruleMethod;\n    }\n    resetState() {\n        this.elementStack = [];\n        this.lastElementStack = [];\n        this.nextTokenIndex = 0;\n        this.stackSize = 0;\n    }\n    startImplementation(implementation) {\n        return (args) => {\n            const size = this.keepStackSize();\n            try {\n                implementation(args);\n            }\n            finally {\n                this.resetStackSize(size);\n            }\n        };\n    }\n    removeUnexpectedElements() {\n        this.elementStack.splice(this.stackSize);\n    }\n    keepStackSize() {\n        const size = this.elementStack.length;\n        this.stackSize = size;\n        return size;\n    }\n    resetStackSize(size) {\n        this.removeUnexpectedElements();\n        this.stackSize = size;\n    }\n    consume(idx, tokenType, feature) {\n        this.wrapper.wrapConsume(idx, tokenType);\n        if (!this.isRecording()) {\n            this.lastElementStack = [...this.elementStack, feature];\n            this.nextTokenIndex = this.currIdx + 1;\n        }\n    }\n    subrule(idx, rule, fragment, feature, args) {\n        this.before(feature);\n        this.wrapper.wrapSubrule(idx, rule, args);\n        this.after(feature);\n    }\n    before(element) {\n        if (!this.isRecording()) {\n            this.elementStack.push(element);\n        }\n    }\n    after(element) {\n        if (!this.isRecording()) {\n            const index = this.elementStack.lastIndexOf(element);\n            if (index >= 0) {\n                this.elementStack.splice(index);\n            }\n        }\n    }\n    get currIdx() {\n        return this.wrapper.currIdx;\n    }\n}\nconst defaultConfig = {\n    recoveryEnabled: true,\n    nodeLocationTracking: 'full',\n    skipValidations: true,\n    errorMessageProvider: new LangiumParserErrorMessageProvider()\n};\n/**\n * This class wraps the embedded actions parser of chevrotain and exposes protected methods.\n * This way, we can build the `LangiumParser` as a composition.\n */\nclass ChevrotainWrapper extends chevrotain__WEBPACK_IMPORTED_MODULE_0__.EmbeddedActionsParser {\n    constructor(tokens, config) {\n        const useDefaultLookahead = config && 'maxLookahead' in config;\n        super(tokens, Object.assign(Object.assign(Object.assign({}, defaultConfig), { lookaheadStrategy: useDefaultLookahead\n                ? new chevrotain__WEBPACK_IMPORTED_MODULE_0__.LLkLookaheadStrategy({ maxLookahead: config.maxLookahead })\n                : new chevrotain_allstar__WEBPACK_IMPORTED_MODULE_1__.LLStarLookaheadStrategy({\n                    // If validations are skipped, don't log the lookahead warnings\n                    logging: config.skipValidations ? () => { } : undefined\n                }) }), config));\n    }\n    get IS_RECORDING() {\n        return this.RECORDING_PHASE;\n    }\n    DEFINE_RULE(name, impl) {\n        return this.RULE(name, impl);\n    }\n    wrapSelfAnalysis() {\n        this.performSelfAnalysis();\n    }\n    wrapConsume(idx, tokenType) {\n        return this.consume(idx, tokenType);\n    }\n    wrapSubrule(idx, rule, args) {\n        return this.subrule(idx, rule, {\n            ARGS: [args]\n        });\n    }\n    wrapOr(idx, choices) {\n        this.or(idx, choices);\n    }\n    wrapOption(idx, callback) {\n        this.option(idx, callback);\n    }\n    wrapMany(idx, callback) {\n        this.many(idx, callback);\n    }\n    wrapAtLeastOne(idx, callback) {\n        this.atLeastOne(idx, callback);\n    }\n}\n//# sourceMappingURL=langium-parser.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/parser/langium-parser.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/parser/lexer.js":
/*!************************************************************************************!*\
  !*** ../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/parser/lexer.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEFAULT_TOKENIZE_OPTIONS: () => (/* binding */ DEFAULT_TOKENIZE_OPTIONS),\n/* harmony export */   DefaultLexer: () => (/* binding */ DefaultLexer),\n/* harmony export */   DefaultLexerErrorMessageProvider: () => (/* binding */ DefaultLexerErrorMessageProvider),\n/* harmony export */   isIMultiModeLexerDefinition: () => (/* binding */ isIMultiModeLexerDefinition),\n/* harmony export */   isTokenTypeArray: () => (/* binding */ isTokenTypeArray),\n/* harmony export */   isTokenTypeDictionary: () => (/* binding */ isTokenTypeDictionary)\n/* harmony export */ });\n/* harmony import */ var chevrotain__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! chevrotain */ \"(ssr)/../node_modules/.pnpm/chevrotain@11.0.3/node_modules/chevrotain/lib/src/api.js\");\n/******************************************************************************\n * Copyright 2022 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\nclass DefaultLexerErrorMessageProvider {\n    buildUnexpectedCharactersMessage(fullText, startOffset, length, line, column) {\n        return chevrotain__WEBPACK_IMPORTED_MODULE_0__.defaultLexerErrorProvider.buildUnexpectedCharactersMessage(fullText, startOffset, length, line, column);\n    }\n    buildUnableToPopLexerModeMessage(token) {\n        return chevrotain__WEBPACK_IMPORTED_MODULE_0__.defaultLexerErrorProvider.buildUnableToPopLexerModeMessage(token);\n    }\n}\nconst DEFAULT_TOKENIZE_OPTIONS = { mode: 'full' };\nclass DefaultLexer {\n    constructor(services) {\n        this.errorMessageProvider = services.parser.LexerErrorMessageProvider;\n        this.tokenBuilder = services.parser.TokenBuilder;\n        const tokens = this.tokenBuilder.buildTokens(services.Grammar, {\n            caseInsensitive: services.LanguageMetaData.caseInsensitive\n        });\n        this.tokenTypes = this.toTokenTypeDictionary(tokens);\n        const lexerTokens = isTokenTypeDictionary(tokens) ? Object.values(tokens) : tokens;\n        const production = services.LanguageMetaData.mode === 'production';\n        this.chevrotainLexer = new chevrotain__WEBPACK_IMPORTED_MODULE_0__.Lexer(lexerTokens, {\n            positionTracking: 'full',\n            skipValidations: production,\n            errorMessageProvider: this.errorMessageProvider\n        });\n    }\n    get definition() {\n        return this.tokenTypes;\n    }\n    tokenize(text, _options = DEFAULT_TOKENIZE_OPTIONS) {\n        var _a, _b, _c;\n        const chevrotainResult = this.chevrotainLexer.tokenize(text);\n        return {\n            tokens: chevrotainResult.tokens,\n            errors: chevrotainResult.errors,\n            hidden: (_a = chevrotainResult.groups.hidden) !== null && _a !== void 0 ? _a : [],\n            report: (_c = (_b = this.tokenBuilder).flushLexingReport) === null || _c === void 0 ? void 0 : _c.call(_b, text)\n        };\n    }\n    toTokenTypeDictionary(buildTokens) {\n        if (isTokenTypeDictionary(buildTokens))\n            return buildTokens;\n        const tokens = isIMultiModeLexerDefinition(buildTokens) ? Object.values(buildTokens.modes).flat() : buildTokens;\n        const res = {};\n        tokens.forEach(token => res[token.name] = token);\n        return res;\n    }\n}\n/**\n * Returns a check whether the given TokenVocabulary is TokenType array\n */\nfunction isTokenTypeArray(tokenVocabulary) {\n    return Array.isArray(tokenVocabulary) && (tokenVocabulary.length === 0 || 'name' in tokenVocabulary[0]);\n}\n/**\n * Returns a check whether the given TokenVocabulary is IMultiModeLexerDefinition\n */\nfunction isIMultiModeLexerDefinition(tokenVocabulary) {\n    return tokenVocabulary && 'modes' in tokenVocabulary && 'defaultMode' in tokenVocabulary;\n}\n/**\n * Returns a check whether the given TokenVocabulary is TokenTypeDictionary\n */\nfunction isTokenTypeDictionary(tokenVocabulary) {\n    return !isTokenTypeArray(tokenVocabulary) && !isIMultiModeLexerDefinition(tokenVocabulary);\n}\n//# sourceMappingURL=lexer.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2xhbmdpdW1AMy4zLjEvbm9kZV9tb2R1bGVzL2xhbmdpdW0vbGliL3BhcnNlci9sZXhlci5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNpRjtBQUMxRTtBQUNQO0FBQ0EsZUFBZSxpRUFBeUI7QUFDeEM7QUFDQTtBQUNBLGVBQWUsaUVBQXlCO0FBQ3hDO0FBQ0E7QUFDTyxtQ0FBbUM7QUFDbkM7QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLG1DQUFtQyw2Q0FBZTtBQUNsRDtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvZXRoYW5raW0vTmVzdG9yL21lZGZldGNoLmpzL25vZGVfbW9kdWxlcy8ucG5wbS9sYW5naXVtQDMuMy4xL25vZGVfbW9kdWxlcy9sYW5naXVtL2xpYi9wYXJzZXIvbGV4ZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuICogQ29weXJpZ2h0IDIwMjIgVHlwZUZveCBHbWJIXG4gKiBUaGlzIHByb2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzIGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0aGVcbiAqIHRlcm1zIG9mIHRoZSBNSVQgTGljZW5zZSwgd2hpY2ggaXMgYXZhaWxhYmxlIGluIHRoZSBwcm9qZWN0IHJvb3QuXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuaW1wb3J0IHsgTGV4ZXIgYXMgQ2hldnJvdGFpbkxleGVyLCBkZWZhdWx0TGV4ZXJFcnJvclByb3ZpZGVyIH0gZnJvbSAnY2hldnJvdGFpbic7XG5leHBvcnQgY2xhc3MgRGVmYXVsdExleGVyRXJyb3JNZXNzYWdlUHJvdmlkZXIge1xuICAgIGJ1aWxkVW5leHBlY3RlZENoYXJhY3RlcnNNZXNzYWdlKGZ1bGxUZXh0LCBzdGFydE9mZnNldCwgbGVuZ3RoLCBsaW5lLCBjb2x1bW4pIHtcbiAgICAgICAgcmV0dXJuIGRlZmF1bHRMZXhlckVycm9yUHJvdmlkZXIuYnVpbGRVbmV4cGVjdGVkQ2hhcmFjdGVyc01lc3NhZ2UoZnVsbFRleHQsIHN0YXJ0T2Zmc2V0LCBsZW5ndGgsIGxpbmUsIGNvbHVtbik7XG4gICAgfVxuICAgIGJ1aWxkVW5hYmxlVG9Qb3BMZXhlck1vZGVNZXNzYWdlKHRva2VuKSB7XG4gICAgICAgIHJldHVybiBkZWZhdWx0TGV4ZXJFcnJvclByb3ZpZGVyLmJ1aWxkVW5hYmxlVG9Qb3BMZXhlck1vZGVNZXNzYWdlKHRva2VuKTtcbiAgICB9XG59XG5leHBvcnQgY29uc3QgREVGQVVMVF9UT0tFTklaRV9PUFRJT05TID0geyBtb2RlOiAnZnVsbCcgfTtcbmV4cG9ydCBjbGFzcyBEZWZhdWx0TGV4ZXIge1xuICAgIGNvbnN0cnVjdG9yKHNlcnZpY2VzKSB7XG4gICAgICAgIHRoaXMuZXJyb3JNZXNzYWdlUHJvdmlkZXIgPSBzZXJ2aWNlcy5wYXJzZXIuTGV4ZXJFcnJvck1lc3NhZ2VQcm92aWRlcjtcbiAgICAgICAgdGhpcy50b2tlbkJ1aWxkZXIgPSBzZXJ2aWNlcy5wYXJzZXIuVG9rZW5CdWlsZGVyO1xuICAgICAgICBjb25zdCB0b2tlbnMgPSB0aGlzLnRva2VuQnVpbGRlci5idWlsZFRva2VucyhzZXJ2aWNlcy5HcmFtbWFyLCB7XG4gICAgICAgICAgICBjYXNlSW5zZW5zaXRpdmU6IHNlcnZpY2VzLkxhbmd1YWdlTWV0YURhdGEuY2FzZUluc2Vuc2l0aXZlXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnRva2VuVHlwZXMgPSB0aGlzLnRvVG9rZW5UeXBlRGljdGlvbmFyeSh0b2tlbnMpO1xuICAgICAgICBjb25zdCBsZXhlclRva2VucyA9IGlzVG9rZW5UeXBlRGljdGlvbmFyeSh0b2tlbnMpID8gT2JqZWN0LnZhbHVlcyh0b2tlbnMpIDogdG9rZW5zO1xuICAgICAgICBjb25zdCBwcm9kdWN0aW9uID0gc2VydmljZXMuTGFuZ3VhZ2VNZXRhRGF0YS5tb2RlID09PSAncHJvZHVjdGlvbic7XG4gICAgICAgIHRoaXMuY2hldnJvdGFpbkxleGVyID0gbmV3IENoZXZyb3RhaW5MZXhlcihsZXhlclRva2Vucywge1xuICAgICAgICAgICAgcG9zaXRpb25UcmFja2luZzogJ2Z1bGwnLFxuICAgICAgICAgICAgc2tpcFZhbGlkYXRpb25zOiBwcm9kdWN0aW9uLFxuICAgICAgICAgICAgZXJyb3JNZXNzYWdlUHJvdmlkZXI6IHRoaXMuZXJyb3JNZXNzYWdlUHJvdmlkZXJcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGdldCBkZWZpbml0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy50b2tlblR5cGVzO1xuICAgIH1cbiAgICB0b2tlbml6ZSh0ZXh0LCBfb3B0aW9ucyA9IERFRkFVTFRfVE9LRU5JWkVfT1BUSU9OUykge1xuICAgICAgICB2YXIgX2EsIF9iLCBfYztcbiAgICAgICAgY29uc3QgY2hldnJvdGFpblJlc3VsdCA9IHRoaXMuY2hldnJvdGFpbkxleGVyLnRva2VuaXplKHRleHQpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdG9rZW5zOiBjaGV2cm90YWluUmVzdWx0LnRva2VucyxcbiAgICAgICAgICAgIGVycm9yczogY2hldnJvdGFpblJlc3VsdC5lcnJvcnMsXG4gICAgICAgICAgICBoaWRkZW46IChfYSA9IGNoZXZyb3RhaW5SZXN1bHQuZ3JvdXBzLmhpZGRlbikgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogW10sXG4gICAgICAgICAgICByZXBvcnQ6IChfYyA9IChfYiA9IHRoaXMudG9rZW5CdWlsZGVyKS5mbHVzaExleGluZ1JlcG9ydCkgPT09IG51bGwgfHwgX2MgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9jLmNhbGwoX2IsIHRleHQpXG4gICAgICAgIH07XG4gICAgfVxuICAgIHRvVG9rZW5UeXBlRGljdGlvbmFyeShidWlsZFRva2Vucykge1xuICAgICAgICBpZiAoaXNUb2tlblR5cGVEaWN0aW9uYXJ5KGJ1aWxkVG9rZW5zKSlcbiAgICAgICAgICAgIHJldHVybiBidWlsZFRva2VucztcbiAgICAgICAgY29uc3QgdG9rZW5zID0gaXNJTXVsdGlNb2RlTGV4ZXJEZWZpbml0aW9uKGJ1aWxkVG9rZW5zKSA/IE9iamVjdC52YWx1ZXMoYnVpbGRUb2tlbnMubW9kZXMpLmZsYXQoKSA6IGJ1aWxkVG9rZW5zO1xuICAgICAgICBjb25zdCByZXMgPSB7fTtcbiAgICAgICAgdG9rZW5zLmZvckVhY2godG9rZW4gPT4gcmVzW3Rva2VuLm5hbWVdID0gdG9rZW4pO1xuICAgICAgICByZXR1cm4gcmVzO1xuICAgIH1cbn1cbi8qKlxuICogUmV0dXJucyBhIGNoZWNrIHdoZXRoZXIgdGhlIGdpdmVuIFRva2VuVm9jYWJ1bGFyeSBpcyBUb2tlblR5cGUgYXJyYXlcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzVG9rZW5UeXBlQXJyYXkodG9rZW5Wb2NhYnVsYXJ5KSB7XG4gICAgcmV0dXJuIEFycmF5LmlzQXJyYXkodG9rZW5Wb2NhYnVsYXJ5KSAmJiAodG9rZW5Wb2NhYnVsYXJ5Lmxlbmd0aCA9PT0gMCB8fCAnbmFtZScgaW4gdG9rZW5Wb2NhYnVsYXJ5WzBdKTtcbn1cbi8qKlxuICogUmV0dXJucyBhIGNoZWNrIHdoZXRoZXIgdGhlIGdpdmVuIFRva2VuVm9jYWJ1bGFyeSBpcyBJTXVsdGlNb2RlTGV4ZXJEZWZpbml0aW9uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc0lNdWx0aU1vZGVMZXhlckRlZmluaXRpb24odG9rZW5Wb2NhYnVsYXJ5KSB7XG4gICAgcmV0dXJuIHRva2VuVm9jYWJ1bGFyeSAmJiAnbW9kZXMnIGluIHRva2VuVm9jYWJ1bGFyeSAmJiAnZGVmYXVsdE1vZGUnIGluIHRva2VuVm9jYWJ1bGFyeTtcbn1cbi8qKlxuICogUmV0dXJucyBhIGNoZWNrIHdoZXRoZXIgdGhlIGdpdmVuIFRva2VuVm9jYWJ1bGFyeSBpcyBUb2tlblR5cGVEaWN0aW9uYXJ5XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc1Rva2VuVHlwZURpY3Rpb25hcnkodG9rZW5Wb2NhYnVsYXJ5KSB7XG4gICAgcmV0dXJuICFpc1Rva2VuVHlwZUFycmF5KHRva2VuVm9jYWJ1bGFyeSkgJiYgIWlzSU11bHRpTW9kZUxleGVyRGVmaW5pdGlvbih0b2tlblZvY2FidWxhcnkpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bGV4ZXIuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/parser/lexer.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/parser/parser-builder-base.js":
/*!**************************************************************************************************!*\
  !*** ../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/parser/parser-builder-base.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createParser: () => (/* binding */ createParser)\n/* harmony export */ });\n/* harmony import */ var chevrotain__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! chevrotain */ \"(ssr)/../node_modules/.pnpm/chevrotain@11.0.3/node_modules/chevrotain/lib/src/api.js\");\n/* harmony import */ var _languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../languages/generated/ast.js */ \"(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/languages/generated/ast.js\");\n/* harmony import */ var _utils_errors_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/errors.js */ \"(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/errors.js\");\n/* harmony import */ var _utils_stream_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/stream.js */ \"(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/stream.js\");\n/* harmony import */ var _utils_grammar_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/grammar-utils.js */ \"(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/grammar-utils.js\");\n/******************************************************************************\n * Copyright 2022 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\n\n\n\n\nfunction createParser(grammar, parser, tokens) {\n    const parserContext = {\n        parser,\n        tokens,\n        ruleNames: new Map()\n    };\n    buildRules(parserContext, grammar);\n    return parser;\n}\nfunction buildRules(parserContext, grammar) {\n    const reachable = (0,_utils_grammar_utils_js__WEBPACK_IMPORTED_MODULE_1__.getAllReachableRules)(grammar, false);\n    const parserRules = (0,_utils_stream_js__WEBPACK_IMPORTED_MODULE_2__.stream)(grammar.rules).filter(_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_3__.isParserRule).filter(rule => reachable.has(rule));\n    for (const rule of parserRules) {\n        const ctx = Object.assign(Object.assign({}, parserContext), { consume: 1, optional: 1, subrule: 1, many: 1, or: 1 });\n        parserContext.parser.rule(rule, buildElement(ctx, rule.definition));\n    }\n}\nfunction buildElement(ctx, element, ignoreGuard = false) {\n    let method;\n    if ((0,_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_3__.isKeyword)(element)) {\n        method = buildKeyword(ctx, element);\n    }\n    else if ((0,_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_3__.isAction)(element)) {\n        method = buildAction(ctx, element);\n    }\n    else if ((0,_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_3__.isAssignment)(element)) {\n        method = buildElement(ctx, element.terminal);\n    }\n    else if ((0,_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_3__.isCrossReference)(element)) {\n        method = buildCrossReference(ctx, element);\n    }\n    else if ((0,_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_3__.isRuleCall)(element)) {\n        method = buildRuleCall(ctx, element);\n    }\n    else if ((0,_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_3__.isAlternatives)(element)) {\n        method = buildAlternatives(ctx, element);\n    }\n    else if ((0,_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_3__.isUnorderedGroup)(element)) {\n        method = buildUnorderedGroup(ctx, element);\n    }\n    else if ((0,_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_3__.isGroup)(element)) {\n        method = buildGroup(ctx, element);\n    }\n    else if ((0,_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_3__.isEndOfFile)(element)) {\n        const idx = ctx.consume++;\n        method = () => ctx.parser.consume(idx, chevrotain__WEBPACK_IMPORTED_MODULE_0__.EOF, element);\n    }\n    else {\n        throw new _utils_errors_js__WEBPACK_IMPORTED_MODULE_4__.ErrorWithLocation(element.$cstNode, `Unexpected element type: ${element.$type}`);\n    }\n    return wrap(ctx, ignoreGuard ? undefined : getGuardCondition(element), method, element.cardinality);\n}\nfunction buildAction(ctx, action) {\n    const actionType = (0,_utils_grammar_utils_js__WEBPACK_IMPORTED_MODULE_1__.getTypeName)(action);\n    return () => ctx.parser.action(actionType, action);\n}\nfunction buildRuleCall(ctx, ruleCall) {\n    const rule = ruleCall.rule.ref;\n    if ((0,_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_3__.isParserRule)(rule)) {\n        const idx = ctx.subrule++;\n        const fragment = rule.fragment;\n        const predicate = ruleCall.arguments.length > 0 ? buildRuleCallPredicate(rule, ruleCall.arguments) : () => ({});\n        return (args) => ctx.parser.subrule(idx, getRule(ctx, rule), fragment, ruleCall, predicate(args));\n    }\n    else if ((0,_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_3__.isTerminalRule)(rule)) {\n        const idx = ctx.consume++;\n        const method = getToken(ctx, rule.name);\n        return () => ctx.parser.consume(idx, method, ruleCall);\n    }\n    else if (!rule) {\n        throw new _utils_errors_js__WEBPACK_IMPORTED_MODULE_4__.ErrorWithLocation(ruleCall.$cstNode, `Undefined rule: ${ruleCall.rule.$refText}`);\n    }\n    else {\n        (0,_utils_errors_js__WEBPACK_IMPORTED_MODULE_4__.assertUnreachable)(rule);\n    }\n}\nfunction buildRuleCallPredicate(rule, namedArgs) {\n    const predicates = namedArgs.map(e => buildPredicate(e.value));\n    return (args) => {\n        const ruleArgs = {};\n        for (let i = 0; i < predicates.length; i++) {\n            const ruleTarget = rule.parameters[i];\n            const predicate = predicates[i];\n            ruleArgs[ruleTarget.name] = predicate(args);\n        }\n        return ruleArgs;\n    };\n}\nfunction buildPredicate(condition) {\n    if ((0,_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_3__.isDisjunction)(condition)) {\n        const left = buildPredicate(condition.left);\n        const right = buildPredicate(condition.right);\n        return (args) => (left(args) || right(args));\n    }\n    else if ((0,_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_3__.isConjunction)(condition)) {\n        const left = buildPredicate(condition.left);\n        const right = buildPredicate(condition.right);\n        return (args) => (left(args) && right(args));\n    }\n    else if ((0,_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_3__.isNegation)(condition)) {\n        const value = buildPredicate(condition.value);\n        return (args) => !value(args);\n    }\n    else if ((0,_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_3__.isParameterReference)(condition)) {\n        const name = condition.parameter.ref.name;\n        return (args) => args !== undefined && args[name] === true;\n    }\n    else if ((0,_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_3__.isBooleanLiteral)(condition)) {\n        const value = Boolean(condition.true);\n        return () => value;\n    }\n    (0,_utils_errors_js__WEBPACK_IMPORTED_MODULE_4__.assertUnreachable)(condition);\n}\nfunction buildAlternatives(ctx, alternatives) {\n    if (alternatives.elements.length === 1) {\n        return buildElement(ctx, alternatives.elements[0]);\n    }\n    else {\n        const methods = [];\n        for (const element of alternatives.elements) {\n            const predicatedMethod = {\n                // Since we handle the guard condition in the alternative already\n                // We can ignore the group guard condition inside\n                ALT: buildElement(ctx, element, true)\n            };\n            const guard = getGuardCondition(element);\n            if (guard) {\n                predicatedMethod.GATE = buildPredicate(guard);\n            }\n            methods.push(predicatedMethod);\n        }\n        const idx = ctx.or++;\n        return (args) => ctx.parser.alternatives(idx, methods.map(method => {\n            const alt = {\n                ALT: () => method.ALT(args)\n            };\n            const gate = method.GATE;\n            if (gate) {\n                alt.GATE = () => gate(args);\n            }\n            return alt;\n        }));\n    }\n}\nfunction buildUnorderedGroup(ctx, group) {\n    if (group.elements.length === 1) {\n        return buildElement(ctx, group.elements[0]);\n    }\n    const methods = [];\n    for (const element of group.elements) {\n        const predicatedMethod = {\n            // Since we handle the guard condition in the alternative already\n            // We can ignore the group guard condition inside\n            ALT: buildElement(ctx, element, true)\n        };\n        const guard = getGuardCondition(element);\n        if (guard) {\n            predicatedMethod.GATE = buildPredicate(guard);\n        }\n        methods.push(predicatedMethod);\n    }\n    const orIdx = ctx.or++;\n    const idFunc = (groupIdx, lParser) => {\n        const stackId = lParser.getRuleStack().join('-');\n        return `uGroup_${groupIdx}_${stackId}`;\n    };\n    const alternatives = (args) => ctx.parser.alternatives(orIdx, methods.map((method, idx) => {\n        const alt = { ALT: () => true };\n        const parser = ctx.parser;\n        alt.ALT = () => {\n            method.ALT(args);\n            if (!parser.isRecording()) {\n                const key = idFunc(orIdx, parser);\n                if (!parser.unorderedGroups.get(key)) {\n                    // init after clear state\n                    parser.unorderedGroups.set(key, []);\n                }\n                const groupState = parser.unorderedGroups.get(key);\n                if (typeof (groupState === null || groupState === void 0 ? void 0 : groupState[idx]) === 'undefined') {\n                    // Not accessed yet\n                    groupState[idx] = true;\n                }\n            }\n        };\n        const gate = method.GATE;\n        if (gate) {\n            alt.GATE = () => gate(args);\n        }\n        else {\n            alt.GATE = () => {\n                const trackedAlternatives = parser.unorderedGroups.get(idFunc(orIdx, parser));\n                const allow = !(trackedAlternatives === null || trackedAlternatives === void 0 ? void 0 : trackedAlternatives[idx]);\n                return allow;\n            };\n        }\n        return alt;\n    }));\n    const wrapped = wrap(ctx, getGuardCondition(group), alternatives, '*');\n    return (args) => {\n        wrapped(args);\n        if (!ctx.parser.isRecording()) {\n            ctx.parser.unorderedGroups.delete(idFunc(orIdx, ctx.parser));\n        }\n    };\n}\nfunction buildGroup(ctx, group) {\n    const methods = group.elements.map(e => buildElement(ctx, e));\n    return (args) => methods.forEach(method => method(args));\n}\nfunction getGuardCondition(element) {\n    if ((0,_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_3__.isGroup)(element)) {\n        return element.guardCondition;\n    }\n    return undefined;\n}\nfunction buildCrossReference(ctx, crossRef, terminal = crossRef.terminal) {\n    if (!terminal) {\n        if (!crossRef.type.ref) {\n            throw new Error('Could not resolve reference to type: ' + crossRef.type.$refText);\n        }\n        const assignment = (0,_utils_grammar_utils_js__WEBPACK_IMPORTED_MODULE_1__.findNameAssignment)(crossRef.type.ref);\n        const assignTerminal = assignment === null || assignment === void 0 ? void 0 : assignment.terminal;\n        if (!assignTerminal) {\n            throw new Error('Could not find name assignment for type: ' + (0,_utils_grammar_utils_js__WEBPACK_IMPORTED_MODULE_1__.getTypeName)(crossRef.type.ref));\n        }\n        return buildCrossReference(ctx, crossRef, assignTerminal);\n    }\n    else if ((0,_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_3__.isRuleCall)(terminal) && (0,_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_3__.isParserRule)(terminal.rule.ref)) {\n        // The terminal is a data type rule here. Everything else will result in a validation error.\n        const rule = terminal.rule.ref;\n        const idx = ctx.subrule++;\n        return (args) => ctx.parser.subrule(idx, getRule(ctx, rule), false, crossRef, args);\n    }\n    else if ((0,_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_3__.isRuleCall)(terminal) && (0,_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_3__.isTerminalRule)(terminal.rule.ref)) {\n        const idx = ctx.consume++;\n        const terminalRule = getToken(ctx, terminal.rule.ref.name);\n        return () => ctx.parser.consume(idx, terminalRule, crossRef);\n    }\n    else if ((0,_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_3__.isKeyword)(terminal)) {\n        const idx = ctx.consume++;\n        const keyword = getToken(ctx, terminal.value);\n        return () => ctx.parser.consume(idx, keyword, crossRef);\n    }\n    else {\n        throw new Error('Could not build cross reference parser');\n    }\n}\nfunction buildKeyword(ctx, keyword) {\n    const idx = ctx.consume++;\n    const token = ctx.tokens[keyword.value];\n    if (!token) {\n        throw new Error('Could not find token for keyword: ' + keyword.value);\n    }\n    return () => ctx.parser.consume(idx, token, keyword);\n}\nfunction wrap(ctx, guard, method, cardinality) {\n    const gate = guard && buildPredicate(guard);\n    if (!cardinality) {\n        if (gate) {\n            const idx = ctx.or++;\n            return (args) => ctx.parser.alternatives(idx, [\n                {\n                    ALT: () => method(args),\n                    GATE: () => gate(args)\n                },\n                {\n                    ALT: (0,chevrotain__WEBPACK_IMPORTED_MODULE_0__.EMPTY_ALT)(),\n                    GATE: () => !gate(args)\n                }\n            ]);\n        }\n        else {\n            return method;\n        }\n    }\n    if (cardinality === '*') {\n        const idx = ctx.many++;\n        return (args) => ctx.parser.many(idx, {\n            DEF: () => method(args),\n            GATE: gate ? () => gate(args) : undefined\n        });\n    }\n    else if (cardinality === '+') {\n        const idx = ctx.many++;\n        if (gate) {\n            const orIdx = ctx.or++;\n            // In the case of a guard condition for the `+` group\n            // We combine it with an empty alternative\n            // If the condition returns true, it needs to parse at least a single iteration\n            // If its false, it is not allowed to parse anything\n            return (args) => ctx.parser.alternatives(orIdx, [\n                {\n                    ALT: () => ctx.parser.atLeastOne(idx, {\n                        DEF: () => method(args)\n                    }),\n                    GATE: () => gate(args)\n                },\n                {\n                    ALT: (0,chevrotain__WEBPACK_IMPORTED_MODULE_0__.EMPTY_ALT)(),\n                    GATE: () => !gate(args)\n                }\n            ]);\n        }\n        else {\n            return (args) => ctx.parser.atLeastOne(idx, {\n                DEF: () => method(args),\n            });\n        }\n    }\n    else if (cardinality === '?') {\n        const idx = ctx.optional++;\n        return (args) => ctx.parser.optional(idx, {\n            DEF: () => method(args),\n            GATE: gate ? () => gate(args) : undefined\n        });\n    }\n    else {\n        (0,_utils_errors_js__WEBPACK_IMPORTED_MODULE_4__.assertUnreachable)(cardinality);\n    }\n}\nfunction getRule(ctx, element) {\n    const name = getRuleName(ctx, element);\n    const rule = ctx.parser.getRule(name);\n    if (!rule)\n        throw new Error(`Rule \"${name}\" not found.\"`);\n    return rule;\n}\nfunction getRuleName(ctx, element) {\n    if ((0,_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_3__.isParserRule)(element)) {\n        return element.name;\n    }\n    else if (ctx.ruleNames.has(element)) {\n        return ctx.ruleNames.get(element);\n    }\n    else {\n        let item = element;\n        let parent = item.$container;\n        let ruleName = element.$type;\n        while (!(0,_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_3__.isParserRule)(parent)) {\n            if ((0,_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_3__.isGroup)(parent) || (0,_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_3__.isAlternatives)(parent) || (0,_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_3__.isUnorderedGroup)(parent)) {\n                const index = parent.elements.indexOf(item);\n                ruleName = index.toString() + ':' + ruleName;\n            }\n            item = parent;\n            parent = parent.$container;\n        }\n        const rule = parent;\n        ruleName = rule.name + ':' + ruleName;\n        ctx.ruleNames.set(element, ruleName);\n        return ruleName;\n    }\n}\nfunction getToken(ctx, name) {\n    const token = ctx.tokens[name];\n    if (!token)\n        throw new Error(`Token \"${name}\" not found.\"`);\n    return token;\n}\n//# sourceMappingURL=parser-builder-base.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/parser/parser-builder-base.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/parser/token-builder.js":
/*!********************************************************************************************!*\
  !*** ../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/parser/token-builder.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DefaultTokenBuilder: () => (/* binding */ DefaultTokenBuilder)\n/* harmony export */ });\n/* harmony import */ var chevrotain__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! chevrotain */ \"(ssr)/../node_modules/.pnpm/chevrotain@11.0.3/node_modules/chevrotain/lib/src/api.js\");\n/* harmony import */ var _languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../languages/generated/ast.js */ \"(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/languages/generated/ast.js\");\n/* harmony import */ var _utils_ast_utils_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/ast-utils.js */ \"(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/ast-utils.js\");\n/* harmony import */ var _utils_grammar_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/grammar-utils.js */ \"(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/grammar-utils.js\");\n/* harmony import */ var _utils_regexp_utils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/regexp-utils.js */ \"(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/regexp-utils.js\");\n/* harmony import */ var _utils_stream_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/stream.js */ \"(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/stream.js\");\n/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\n\n\n\n\n\nclass DefaultTokenBuilder {\n    constructor() {\n        /**\n         * The list of diagnostics stored during the lexing process of a single text.\n         */\n        this.diagnostics = [];\n    }\n    buildTokens(grammar, options) {\n        const reachableRules = (0,_utils_stream_js__WEBPACK_IMPORTED_MODULE_1__.stream)((0,_utils_grammar_utils_js__WEBPACK_IMPORTED_MODULE_2__.getAllReachableRules)(grammar, false));\n        const terminalTokens = this.buildTerminalTokens(reachableRules);\n        const tokens = this.buildKeywordTokens(reachableRules, terminalTokens, options);\n        terminalTokens.forEach(terminalToken => {\n            const pattern = terminalToken.PATTERN;\n            if (typeof pattern === 'object' && pattern && 'test' in pattern && (0,_utils_regexp_utils_js__WEBPACK_IMPORTED_MODULE_3__.isWhitespace)(pattern)) {\n                tokens.unshift(terminalToken);\n            }\n            else {\n                tokens.push(terminalToken);\n            }\n        });\n        // We don't need to add the EOF token explicitly.\n        // It is automatically available at the end of the token stream.\n        return tokens;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    flushLexingReport(text) {\n        return { diagnostics: this.popDiagnostics() };\n    }\n    popDiagnostics() {\n        const diagnostics = [...this.diagnostics];\n        this.diagnostics = [];\n        return diagnostics;\n    }\n    buildTerminalTokens(rules) {\n        return rules.filter(_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_4__.isTerminalRule).filter(e => !e.fragment)\n            .map(terminal => this.buildTerminalToken(terminal)).toArray();\n    }\n    buildTerminalToken(terminal) {\n        const regex = (0,_utils_grammar_utils_js__WEBPACK_IMPORTED_MODULE_2__.terminalRegex)(terminal);\n        const pattern = this.requiresCustomPattern(regex) ? this.regexPatternFunction(regex) : regex;\n        const tokenType = {\n            name: terminal.name,\n            PATTERN: pattern,\n        };\n        if (typeof pattern === 'function') {\n            tokenType.LINE_BREAKS = true;\n        }\n        if (terminal.hidden) {\n            // Only skip tokens that are able to accept whitespace\n            tokenType.GROUP = (0,_utils_regexp_utils_js__WEBPACK_IMPORTED_MODULE_3__.isWhitespace)(regex) ? chevrotain__WEBPACK_IMPORTED_MODULE_0__.Lexer.SKIPPED : 'hidden';\n        }\n        return tokenType;\n    }\n    requiresCustomPattern(regex) {\n        if (regex.flags.includes('u') || regex.flags.includes('s')) {\n            // Unicode and dotall regexes are not supported by Chevrotain.\n            return true;\n        }\n        else if (regex.source.includes('?<=') || regex.source.includes('?<!')) {\n            // Negative and positive lookbehind are not supported by Chevrotain yet.\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n    regexPatternFunction(regex) {\n        const stickyRegex = new RegExp(regex, regex.flags + 'y');\n        return (text, offset) => {\n            stickyRegex.lastIndex = offset;\n            const execResult = stickyRegex.exec(text);\n            return execResult;\n        };\n    }\n    buildKeywordTokens(rules, terminalTokens, options) {\n        return rules\n            // We filter by parser rules, since keywords in terminal rules get transformed into regex and are not actual tokens\n            .filter(_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_4__.isParserRule)\n            .flatMap(rule => (0,_utils_ast_utils_js__WEBPACK_IMPORTED_MODULE_5__.streamAllContents)(rule).filter(_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_4__.isKeyword))\n            .distinct(e => e.value).toArray()\n            // Sort keywords by descending length\n            .sort((a, b) => b.value.length - a.value.length)\n            .map(keyword => this.buildKeywordToken(keyword, terminalTokens, Boolean(options === null || options === void 0 ? void 0 : options.caseInsensitive)));\n    }\n    buildKeywordToken(keyword, terminalTokens, caseInsensitive) {\n        const keywordPattern = this.buildKeywordPattern(keyword, caseInsensitive);\n        const tokenType = {\n            name: keyword.value,\n            PATTERN: keywordPattern,\n            LONGER_ALT: this.findLongerAlt(keyword, terminalTokens)\n        };\n        if (typeof keywordPattern === 'function') {\n            tokenType.LINE_BREAKS = true;\n        }\n        return tokenType;\n    }\n    buildKeywordPattern(keyword, caseInsensitive) {\n        return caseInsensitive ?\n            new RegExp((0,_utils_regexp_utils_js__WEBPACK_IMPORTED_MODULE_3__.getCaseInsensitivePattern)(keyword.value)) :\n            keyword.value;\n    }\n    findLongerAlt(keyword, terminalTokens) {\n        return terminalTokens.reduce((longerAlts, token) => {\n            const pattern = token === null || token === void 0 ? void 0 : token.PATTERN;\n            if ((pattern === null || pattern === void 0 ? void 0 : pattern.source) && (0,_utils_regexp_utils_js__WEBPACK_IMPORTED_MODULE_3__.partialMatches)('^' + pattern.source + '$', keyword.value)) {\n                longerAlts.push(token);\n            }\n            return longerAlts;\n        }, []);\n    }\n}\n//# sourceMappingURL=token-builder.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/parser/token-builder.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/parser/value-converter.js":
/*!**********************************************************************************************!*\
  !*** ../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/parser/value-converter.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DefaultValueConverter: () => (/* binding */ DefaultValueConverter),\n/* harmony export */   ValueConverter: () => (/* binding */ ValueConverter)\n/* harmony export */ });\n/* harmony import */ var _languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../languages/generated/ast.js */ \"(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/languages/generated/ast.js\");\n/* harmony import */ var _utils_grammar_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/grammar-utils.js */ \"(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/grammar-utils.js\");\n/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\n\nclass DefaultValueConverter {\n    convert(input, cstNode) {\n        let feature = cstNode.grammarSource;\n        if ((0,_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_0__.isCrossReference)(feature)) {\n            feature = (0,_utils_grammar_utils_js__WEBPACK_IMPORTED_MODULE_1__.getCrossReferenceTerminal)(feature);\n        }\n        if ((0,_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_0__.isRuleCall)(feature)) {\n            const rule = feature.rule.ref;\n            if (!rule) {\n                throw new Error('This cst node was not parsed by a rule.');\n            }\n            return this.runConverter(rule, input, cstNode);\n        }\n        return input;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    runConverter(rule, input, cstNode) {\n        var _a;\n        switch (rule.name.toUpperCase()) {\n            case 'INT': return ValueConverter.convertInt(input);\n            case 'STRING': return ValueConverter.convertString(input);\n            case 'ID': return ValueConverter.convertID(input);\n        }\n        switch ((_a = (0,_utils_grammar_utils_js__WEBPACK_IMPORTED_MODULE_1__.getRuleType)(rule)) === null || _a === void 0 ? void 0 : _a.toLowerCase()) {\n            case 'number': return ValueConverter.convertNumber(input);\n            case 'boolean': return ValueConverter.convertBoolean(input);\n            case 'bigint': return ValueConverter.convertBigint(input);\n            case 'date': return ValueConverter.convertDate(input);\n            default: return input;\n        }\n    }\n}\nvar ValueConverter;\n(function (ValueConverter) {\n    function convertString(input) {\n        let result = '';\n        for (let i = 1; i < input.length - 1; i++) {\n            const c = input.charAt(i);\n            if (c === '\\\\') {\n                const c1 = input.charAt(++i);\n                result += convertEscapeCharacter(c1);\n            }\n            else {\n                result += c;\n            }\n        }\n        return result;\n    }\n    ValueConverter.convertString = convertString;\n    function convertEscapeCharacter(char) {\n        switch (char) {\n            case 'b': return '\\b';\n            case 'f': return '\\f';\n            case 'n': return '\\n';\n            case 'r': return '\\r';\n            case 't': return '\\t';\n            case 'v': return '\\v';\n            case '0': return '\\0';\n            default: return char;\n        }\n    }\n    function convertID(input) {\n        if (input.charAt(0) === '^') {\n            return input.substring(1);\n        }\n        else {\n            return input;\n        }\n    }\n    ValueConverter.convertID = convertID;\n    function convertInt(input) {\n        return parseInt(input);\n    }\n    ValueConverter.convertInt = convertInt;\n    function convertBigint(input) {\n        return BigInt(input);\n    }\n    ValueConverter.convertBigint = convertBigint;\n    function convertDate(input) {\n        return new Date(input);\n    }\n    ValueConverter.convertDate = convertDate;\n    function convertNumber(input) {\n        return Number(input);\n    }\n    ValueConverter.convertNumber = convertNumber;\n    function convertBoolean(input) {\n        return input.toLowerCase() === 'true';\n    }\n    ValueConverter.convertBoolean = convertBoolean;\n})(ValueConverter || (ValueConverter = {}));\n//# sourceMappingURL=value-converter.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2xhbmdpdW1AMy4zLjEvbm9kZV9tb2R1bGVzL2xhbmdpdW0vbGliL3BhcnNlci92YWx1ZS1jb252ZXJ0ZXIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDNkU7QUFDTTtBQUM1RTtBQUNQO0FBQ0E7QUFDQSxZQUFZLDZFQUFnQjtBQUM1QixzQkFBc0Isa0ZBQXlCO0FBQy9DO0FBQ0EsWUFBWSx1RUFBVTtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQixvRUFBVztBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQSx3QkFBd0Isc0JBQXNCO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLHdDQUF3QztBQUN6QyIsInNvdXJjZXMiOlsiL1VzZXJzL2V0aGFua2ltL05lc3Rvci9tZWRmZXRjaC5qcy9ub2RlX21vZHVsZXMvLnBucG0vbGFuZ2l1bUAzLjMuMS9ub2RlX21vZHVsZXMvbGFuZ2l1bS9saWIvcGFyc2VyL3ZhbHVlLWNvbnZlcnRlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gKiBDb3B5cmlnaHQgMjAyMSBUeXBlRm94IEdtYkhcbiAqIFRoaXMgcHJvZ3JhbSBhbmQgdGhlIGFjY29tcGFueWluZyBtYXRlcmlhbHMgYXJlIG1hZGUgYXZhaWxhYmxlIHVuZGVyIHRoZVxuICogdGVybXMgb2YgdGhlIE1JVCBMaWNlbnNlLCB3aGljaCBpcyBhdmFpbGFibGUgaW4gdGhlIHByb2plY3Qgcm9vdC5cbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5pbXBvcnQgeyBpc0Nyb3NzUmVmZXJlbmNlLCBpc1J1bGVDYWxsIH0gZnJvbSAnLi4vbGFuZ3VhZ2VzL2dlbmVyYXRlZC9hc3QuanMnO1xuaW1wb3J0IHsgZ2V0Q3Jvc3NSZWZlcmVuY2VUZXJtaW5hbCwgZ2V0UnVsZVR5cGUgfSBmcm9tICcuLi91dGlscy9ncmFtbWFyLXV0aWxzLmpzJztcbmV4cG9ydCBjbGFzcyBEZWZhdWx0VmFsdWVDb252ZXJ0ZXIge1xuICAgIGNvbnZlcnQoaW5wdXQsIGNzdE5vZGUpIHtcbiAgICAgICAgbGV0IGZlYXR1cmUgPSBjc3ROb2RlLmdyYW1tYXJTb3VyY2U7XG4gICAgICAgIGlmIChpc0Nyb3NzUmVmZXJlbmNlKGZlYXR1cmUpKSB7XG4gICAgICAgICAgICBmZWF0dXJlID0gZ2V0Q3Jvc3NSZWZlcmVuY2VUZXJtaW5hbChmZWF0dXJlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNSdWxlQ2FsbChmZWF0dXJlKSkge1xuICAgICAgICAgICAgY29uc3QgcnVsZSA9IGZlYXR1cmUucnVsZS5yZWY7XG4gICAgICAgICAgICBpZiAoIXJ1bGUpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoaXMgY3N0IG5vZGUgd2FzIG5vdCBwYXJzZWQgYnkgYSBydWxlLicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMucnVuQ29udmVydGVyKHJ1bGUsIGlucHV0LCBjc3ROb2RlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaW5wdXQ7XG4gICAgfVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW51c2VkLXZhcnNcbiAgICBydW5Db252ZXJ0ZXIocnVsZSwgaW5wdXQsIGNzdE5vZGUpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBzd2l0Y2ggKHJ1bGUubmFtZS50b1VwcGVyQ2FzZSgpKSB7XG4gICAgICAgICAgICBjYXNlICdJTlQnOiByZXR1cm4gVmFsdWVDb252ZXJ0ZXIuY29udmVydEludChpbnB1dCk7XG4gICAgICAgICAgICBjYXNlICdTVFJJTkcnOiByZXR1cm4gVmFsdWVDb252ZXJ0ZXIuY29udmVydFN0cmluZyhpbnB1dCk7XG4gICAgICAgICAgICBjYXNlICdJRCc6IHJldHVybiBWYWx1ZUNvbnZlcnRlci5jb252ZXJ0SUQoaW5wdXQpO1xuICAgICAgICB9XG4gICAgICAgIHN3aXRjaCAoKF9hID0gZ2V0UnVsZVR5cGUocnVsZSkpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS50b0xvd2VyQ2FzZSgpKSB7XG4gICAgICAgICAgICBjYXNlICdudW1iZXInOiByZXR1cm4gVmFsdWVDb252ZXJ0ZXIuY29udmVydE51bWJlcihpbnB1dCk7XG4gICAgICAgICAgICBjYXNlICdib29sZWFuJzogcmV0dXJuIFZhbHVlQ29udmVydGVyLmNvbnZlcnRCb29sZWFuKGlucHV0KTtcbiAgICAgICAgICAgIGNhc2UgJ2JpZ2ludCc6IHJldHVybiBWYWx1ZUNvbnZlcnRlci5jb252ZXJ0QmlnaW50KGlucHV0KTtcbiAgICAgICAgICAgIGNhc2UgJ2RhdGUnOiByZXR1cm4gVmFsdWVDb252ZXJ0ZXIuY29udmVydERhdGUoaW5wdXQpO1xuICAgICAgICAgICAgZGVmYXVsdDogcmV0dXJuIGlucHV0O1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0IHZhciBWYWx1ZUNvbnZlcnRlcjtcbihmdW5jdGlvbiAoVmFsdWVDb252ZXJ0ZXIpIHtcbiAgICBmdW5jdGlvbiBjb252ZXJ0U3RyaW5nKGlucHV0KSB7XG4gICAgICAgIGxldCByZXN1bHQgPSAnJztcbiAgICAgICAgZm9yIChsZXQgaSA9IDE7IGkgPCBpbnB1dC5sZW5ndGggLSAxOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IGMgPSBpbnB1dC5jaGFyQXQoaSk7XG4gICAgICAgICAgICBpZiAoYyA9PT0gJ1xcXFwnKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgYzEgPSBpbnB1dC5jaGFyQXQoKytpKTtcbiAgICAgICAgICAgICAgICByZXN1bHQgKz0gY29udmVydEVzY2FwZUNoYXJhY3RlcihjMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXN1bHQgKz0gYztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICBWYWx1ZUNvbnZlcnRlci5jb252ZXJ0U3RyaW5nID0gY29udmVydFN0cmluZztcbiAgICBmdW5jdGlvbiBjb252ZXJ0RXNjYXBlQ2hhcmFjdGVyKGNoYXIpIHtcbiAgICAgICAgc3dpdGNoIChjaGFyKSB7XG4gICAgICAgICAgICBjYXNlICdiJzogcmV0dXJuICdcXGInO1xuICAgICAgICAgICAgY2FzZSAnZic6IHJldHVybiAnXFxmJztcbiAgICAgICAgICAgIGNhc2UgJ24nOiByZXR1cm4gJ1xcbic7XG4gICAgICAgICAgICBjYXNlICdyJzogcmV0dXJuICdcXHInO1xuICAgICAgICAgICAgY2FzZSAndCc6IHJldHVybiAnXFx0JztcbiAgICAgICAgICAgIGNhc2UgJ3YnOiByZXR1cm4gJ1xcdic7XG4gICAgICAgICAgICBjYXNlICcwJzogcmV0dXJuICdcXDAnO1xuICAgICAgICAgICAgZGVmYXVsdDogcmV0dXJuIGNoYXI7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gY29udmVydElEKGlucHV0KSB7XG4gICAgICAgIGlmIChpbnB1dC5jaGFyQXQoMCkgPT09ICdeJykge1xuICAgICAgICAgICAgcmV0dXJuIGlucHV0LnN1YnN0cmluZygxKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBpbnB1dDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBWYWx1ZUNvbnZlcnRlci5jb252ZXJ0SUQgPSBjb252ZXJ0SUQ7XG4gICAgZnVuY3Rpb24gY29udmVydEludChpbnB1dCkge1xuICAgICAgICByZXR1cm4gcGFyc2VJbnQoaW5wdXQpO1xuICAgIH1cbiAgICBWYWx1ZUNvbnZlcnRlci5jb252ZXJ0SW50ID0gY29udmVydEludDtcbiAgICBmdW5jdGlvbiBjb252ZXJ0QmlnaW50KGlucHV0KSB7XG4gICAgICAgIHJldHVybiBCaWdJbnQoaW5wdXQpO1xuICAgIH1cbiAgICBWYWx1ZUNvbnZlcnRlci5jb252ZXJ0QmlnaW50ID0gY29udmVydEJpZ2ludDtcbiAgICBmdW5jdGlvbiBjb252ZXJ0RGF0ZShpbnB1dCkge1xuICAgICAgICByZXR1cm4gbmV3IERhdGUoaW5wdXQpO1xuICAgIH1cbiAgICBWYWx1ZUNvbnZlcnRlci5jb252ZXJ0RGF0ZSA9IGNvbnZlcnREYXRlO1xuICAgIGZ1bmN0aW9uIGNvbnZlcnROdW1iZXIoaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIE51bWJlcihpbnB1dCk7XG4gICAgfVxuICAgIFZhbHVlQ29udmVydGVyLmNvbnZlcnROdW1iZXIgPSBjb252ZXJ0TnVtYmVyO1xuICAgIGZ1bmN0aW9uIGNvbnZlcnRCb29sZWFuKGlucHV0KSB7XG4gICAgICAgIHJldHVybiBpbnB1dC50b0xvd2VyQ2FzZSgpID09PSAndHJ1ZSc7XG4gICAgfVxuICAgIFZhbHVlQ29udmVydGVyLmNvbnZlcnRCb29sZWFuID0gY29udmVydEJvb2xlYW47XG59KShWYWx1ZUNvbnZlcnRlciB8fCAoVmFsdWVDb252ZXJ0ZXIgPSB7fSkpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dmFsdWUtY29udmVydGVyLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/parser/value-converter.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/references/linker.js":
/*!*****************************************************************************************!*\
  !*** ../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/references/linker.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DefaultLinker: () => (/* binding */ DefaultLinker)\n/* harmony export */ });\n/* harmony import */ var _utils_cancellation_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/cancellation.js */ \"(ssr)/../node_modules/.pnpm/vscode-jsonrpc@8.2.0/node_modules/vscode-jsonrpc/lib/common/cancellation.js\");\n/* harmony import */ var _syntax_tree_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../syntax-tree.js */ \"(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/syntax-tree.js\");\n/* harmony import */ var _utils_ast_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/ast-utils.js */ \"(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/ast-utils.js\");\n/* harmony import */ var _utils_promise_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/promise-utils.js */ \"(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/promise-utils.js\");\n/* harmony import */ var _workspace_documents_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../workspace/documents.js */ \"(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/workspace/documents.js\");\n/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\n\n\n\n\nconst ref_resolving = Symbol('ref_resolving');\nclass DefaultLinker {\n    constructor(services) {\n        this.reflection = services.shared.AstReflection;\n        this.langiumDocuments = () => services.shared.workspace.LangiumDocuments;\n        this.scopeProvider = services.references.ScopeProvider;\n        this.astNodeLocator = services.workspace.AstNodeLocator;\n    }\n    async link(document, cancelToken = _utils_cancellation_js__WEBPACK_IMPORTED_MODULE_0__.CancellationToken.None) {\n        for (const node of (0,_utils_ast_utils_js__WEBPACK_IMPORTED_MODULE_1__.streamAst)(document.parseResult.value)) {\n            await (0,_utils_promise_utils_js__WEBPACK_IMPORTED_MODULE_2__.interruptAndCheck)(cancelToken);\n            (0,_utils_ast_utils_js__WEBPACK_IMPORTED_MODULE_1__.streamReferences)(node).forEach(ref => this.doLink(ref, document));\n        }\n    }\n    doLink(refInfo, document) {\n        var _a;\n        const ref = refInfo.reference;\n        // The reference may already have been resolved lazily by accessing its `ref` property.\n        if (ref._ref === undefined) {\n            ref._ref = ref_resolving;\n            try {\n                const description = this.getCandidate(refInfo);\n                if ((0,_syntax_tree_js__WEBPACK_IMPORTED_MODULE_3__.isLinkingError)(description)) {\n                    ref._ref = description;\n                }\n                else {\n                    ref._nodeDescription = description;\n                    if (this.langiumDocuments().hasDocument(description.documentUri)) {\n                        // The target document is already loaded\n                        const linkedNode = this.loadAstNode(description);\n                        ref._ref = linkedNode !== null && linkedNode !== void 0 ? linkedNode : this.createLinkingError(refInfo, description);\n                    }\n                    else {\n                        // Try to load the target AST node later using the already provided description\n                        ref._ref = undefined;\n                    }\n                }\n            }\n            catch (err) {\n                console.error(`An error occurred while resolving reference to '${ref.$refText}':`, err);\n                const errorMessage = (_a = err.message) !== null && _a !== void 0 ? _a : String(err);\n                ref._ref = Object.assign(Object.assign({}, refInfo), { message: `An error occurred while resolving reference to '${ref.$refText}': ${errorMessage}` });\n            }\n            // Add the reference to the document's array of references\n            // Only add if the reference has been not been resolved earlier\n            // Otherwise we end up with duplicates\n            // See also implementation of `buildReference`\n            document.references.push(ref);\n        }\n    }\n    unlink(document) {\n        for (const ref of document.references) {\n            delete ref._ref;\n            delete ref._nodeDescription;\n        }\n        document.references = [];\n    }\n    getCandidate(refInfo) {\n        const scope = this.scopeProvider.getScope(refInfo);\n        const description = scope.getElement(refInfo.reference.$refText);\n        return description !== null && description !== void 0 ? description : this.createLinkingError(refInfo);\n    }\n    buildReference(node, property, refNode, refText) {\n        // See behavior description in doc of Linker, update that on changes in here.\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        const linker = this;\n        const reference = {\n            $refNode: refNode,\n            $refText: refText,\n            get ref() {\n                var _a;\n                if ((0,_syntax_tree_js__WEBPACK_IMPORTED_MODULE_3__.isAstNode)(this._ref)) {\n                    // Most frequent case: the target is already resolved.\n                    return this._ref;\n                }\n                else if ((0,_syntax_tree_js__WEBPACK_IMPORTED_MODULE_3__.isAstNodeDescription)(this._nodeDescription)) {\n                    // A candidate has been found before, but it is not loaded yet.\n                    const linkedNode = linker.loadAstNode(this._nodeDescription);\n                    this._ref = linkedNode !== null && linkedNode !== void 0 ? linkedNode : linker.createLinkingError({ reference, container: node, property }, this._nodeDescription);\n                }\n                else if (this._ref === undefined) {\n                    // The reference has not been linked yet, so do that now.\n                    this._ref = ref_resolving;\n                    const document = (0,_utils_ast_utils_js__WEBPACK_IMPORTED_MODULE_1__.findRootNode)(node).$document;\n                    const refData = linker.getLinkedNode({ reference, container: node, property });\n                    if (refData.error && document && document.state < _workspace_documents_js__WEBPACK_IMPORTED_MODULE_4__.DocumentState.ComputedScopes) {\n                        // Document scope is not ready, don't set `this._ref` so linker can retry later.\n                        return this._ref = undefined;\n                    }\n                    this._ref = (_a = refData.node) !== null && _a !== void 0 ? _a : refData.error;\n                    this._nodeDescription = refData.descr;\n                    document === null || document === void 0 ? void 0 : document.references.push(this);\n                }\n                else if (this._ref === ref_resolving) {\n                    throw new Error(`Cyclic reference resolution detected: ${linker.astNodeLocator.getAstNodePath(node)}/${property} (symbol '${refText}')`);\n                }\n                return (0,_syntax_tree_js__WEBPACK_IMPORTED_MODULE_3__.isAstNode)(this._ref) ? this._ref : undefined;\n            },\n            get $nodeDescription() {\n                return this._nodeDescription;\n            },\n            get error() {\n                return (0,_syntax_tree_js__WEBPACK_IMPORTED_MODULE_3__.isLinkingError)(this._ref) ? this._ref : undefined;\n            }\n        };\n        return reference;\n    }\n    getLinkedNode(refInfo) {\n        var _a;\n        try {\n            const description = this.getCandidate(refInfo);\n            if ((0,_syntax_tree_js__WEBPACK_IMPORTED_MODULE_3__.isLinkingError)(description)) {\n                return { error: description };\n            }\n            const linkedNode = this.loadAstNode(description);\n            if (linkedNode) {\n                return { node: linkedNode, descr: description };\n            }\n            else {\n                return {\n                    descr: description,\n                    error: this.createLinkingError(refInfo, description)\n                };\n            }\n        }\n        catch (err) {\n            console.error(`An error occurred while resolving reference to '${refInfo.reference.$refText}':`, err);\n            const errorMessage = (_a = err.message) !== null && _a !== void 0 ? _a : String(err);\n            return {\n                error: Object.assign(Object.assign({}, refInfo), { message: `An error occurred while resolving reference to '${refInfo.reference.$refText}': ${errorMessage}` })\n            };\n        }\n    }\n    loadAstNode(nodeDescription) {\n        if (nodeDescription.node) {\n            return nodeDescription.node;\n        }\n        const doc = this.langiumDocuments().getDocument(nodeDescription.documentUri);\n        if (!doc) {\n            return undefined;\n        }\n        return this.astNodeLocator.getAstNode(doc.parseResult.value, nodeDescription.path);\n    }\n    createLinkingError(refInfo, targetDescription) {\n        // Check whether the document is sufficiently processed by the DocumentBuilder. If not, this is a hint for a bug\n        // in the language implementation.\n        const document = (0,_utils_ast_utils_js__WEBPACK_IMPORTED_MODULE_1__.findRootNode)(refInfo.container).$document;\n        if (document && document.state < _workspace_documents_js__WEBPACK_IMPORTED_MODULE_4__.DocumentState.ComputedScopes) {\n            console.warn(`Attempted reference resolution before document reached ComputedScopes state (${document.uri}).`);\n        }\n        const referenceType = this.reflection.getReferenceType(refInfo);\n        return Object.assign(Object.assign({}, refInfo), { message: `Could not resolve reference to ${referenceType} named '${refInfo.reference.$refText}'.`, targetDescription });\n    }\n}\n//# sourceMappingURL=linker.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/references/linker.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/references/name-provider.js":
/*!************************************************************************************************!*\
  !*** ../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/references/name-provider.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DefaultNameProvider: () => (/* binding */ DefaultNameProvider),\n/* harmony export */   isNamed: () => (/* binding */ isNamed)\n/* harmony export */ });\n/* harmony import */ var _utils_grammar_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/grammar-utils.js */ \"(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/grammar-utils.js\");\n/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\nfunction isNamed(node) {\n    return typeof node.name === 'string';\n}\nclass DefaultNameProvider {\n    getName(node) {\n        if (isNamed(node)) {\n            return node.name;\n        }\n        return undefined;\n    }\n    getNameNode(node) {\n        return (0,_utils_grammar_utils_js__WEBPACK_IMPORTED_MODULE_0__.findNodeForProperty)(node.$cstNode, 'name');\n    }\n}\n//# sourceMappingURL=name-provider.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2xhbmdpdW1AMy4zLjEvbm9kZV9tb2R1bGVzL2xhbmdpdW0vbGliL3JlZmVyZW5jZXMvbmFtZS1wcm92aWRlci5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ2dFO0FBQ3pEO0FBQ1A7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLDRFQUFtQjtBQUNsQztBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9Vc2Vycy9ldGhhbmtpbS9OZXN0b3IvbWVkZmV0Y2guanMvbm9kZV9tb2R1bGVzLy5wbnBtL2xhbmdpdW1AMy4zLjEvbm9kZV9tb2R1bGVzL2xhbmdpdW0vbGliL3JlZmVyZW5jZXMvbmFtZS1wcm92aWRlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gKiBDb3B5cmlnaHQgMjAyMSBUeXBlRm94IEdtYkhcbiAqIFRoaXMgcHJvZ3JhbSBhbmQgdGhlIGFjY29tcGFueWluZyBtYXRlcmlhbHMgYXJlIG1hZGUgYXZhaWxhYmxlIHVuZGVyIHRoZVxuICogdGVybXMgb2YgdGhlIE1JVCBMaWNlbnNlLCB3aGljaCBpcyBhdmFpbGFibGUgaW4gdGhlIHByb2plY3Qgcm9vdC5cbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5pbXBvcnQgeyBmaW5kTm9kZUZvclByb3BlcnR5IH0gZnJvbSAnLi4vdXRpbHMvZ3JhbW1hci11dGlscy5qcyc7XG5leHBvcnQgZnVuY3Rpb24gaXNOYW1lZChub2RlKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBub2RlLm5hbWUgPT09ICdzdHJpbmcnO1xufVxuZXhwb3J0IGNsYXNzIERlZmF1bHROYW1lUHJvdmlkZXIge1xuICAgIGdldE5hbWUobm9kZSkge1xuICAgICAgICBpZiAoaXNOYW1lZChub2RlKSkge1xuICAgICAgICAgICAgcmV0dXJuIG5vZGUubmFtZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBnZXROYW1lTm9kZShub2RlKSB7XG4gICAgICAgIHJldHVybiBmaW5kTm9kZUZvclByb3BlcnR5KG5vZGUuJGNzdE5vZGUsICduYW1lJyk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bmFtZS1wcm92aWRlci5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/references/name-provider.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/references/references.js":
/*!*********************************************************************************************!*\
  !*** ../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/references/references.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DefaultReferences: () => (/* binding */ DefaultReferences)\n/* harmony export */ });\n/* harmony import */ var _utils_grammar_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/grammar-utils.js */ \"(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/grammar-utils.js\");\n/* harmony import */ var _syntax_tree_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../syntax-tree.js */ \"(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/syntax-tree.js\");\n/* harmony import */ var _utils_ast_utils_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/ast-utils.js */ \"(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/ast-utils.js\");\n/* harmony import */ var _utils_cst_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/cst-utils.js */ \"(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/cst-utils.js\");\n/* harmony import */ var _utils_stream_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/stream.js */ \"(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/stream.js\");\n/* harmony import */ var _utils_uri_utils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/uri-utils.js */ \"(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/uri-utils.js\");\n/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\n\n\n\n\n\nclass DefaultReferences {\n    constructor(services) {\n        this.nameProvider = services.references.NameProvider;\n        this.index = services.shared.workspace.IndexManager;\n        this.nodeLocator = services.workspace.AstNodeLocator;\n    }\n    findDeclaration(sourceCstNode) {\n        if (sourceCstNode) {\n            const assignment = (0,_utils_grammar_utils_js__WEBPACK_IMPORTED_MODULE_0__.findAssignment)(sourceCstNode);\n            const nodeElem = sourceCstNode.astNode;\n            if (assignment && nodeElem) {\n                const reference = nodeElem[assignment.feature];\n                if ((0,_syntax_tree_js__WEBPACK_IMPORTED_MODULE_1__.isReference)(reference)) {\n                    return reference.ref;\n                }\n                else if (Array.isArray(reference)) {\n                    for (const ref of reference) {\n                        if ((0,_syntax_tree_js__WEBPACK_IMPORTED_MODULE_1__.isReference)(ref) && ref.$refNode\n                            && ref.$refNode.offset <= sourceCstNode.offset\n                            && ref.$refNode.end >= sourceCstNode.end) {\n                            return ref.ref;\n                        }\n                    }\n                }\n            }\n            if (nodeElem) {\n                const nameNode = this.nameProvider.getNameNode(nodeElem);\n                // Only return the targeted node in case the targeted cst node is the name node or part of it\n                if (nameNode && (nameNode === sourceCstNode || (0,_utils_cst_utils_js__WEBPACK_IMPORTED_MODULE_2__.isChildNode)(sourceCstNode, nameNode))) {\n                    return nodeElem;\n                }\n            }\n        }\n        return undefined;\n    }\n    findDeclarationNode(sourceCstNode) {\n        const astNode = this.findDeclaration(sourceCstNode);\n        if (astNode === null || astNode === void 0 ? void 0 : astNode.$cstNode) {\n            const targetNode = this.nameProvider.getNameNode(astNode);\n            return targetNode !== null && targetNode !== void 0 ? targetNode : astNode.$cstNode;\n        }\n        return undefined;\n    }\n    findReferences(targetNode, options) {\n        const refs = [];\n        if (options.includeDeclaration) {\n            const ref = this.getReferenceToSelf(targetNode);\n            if (ref) {\n                refs.push(ref);\n            }\n        }\n        let indexReferences = this.index.findAllReferences(targetNode, this.nodeLocator.getAstNodePath(targetNode));\n        if (options.documentUri) {\n            indexReferences = indexReferences.filter(ref => _utils_uri_utils_js__WEBPACK_IMPORTED_MODULE_3__.UriUtils.equals(ref.sourceUri, options.documentUri));\n        }\n        refs.push(...indexReferences);\n        return (0,_utils_stream_js__WEBPACK_IMPORTED_MODULE_4__.stream)(refs);\n    }\n    getReferenceToSelf(targetNode) {\n        const nameNode = this.nameProvider.getNameNode(targetNode);\n        if (nameNode) {\n            const doc = (0,_utils_ast_utils_js__WEBPACK_IMPORTED_MODULE_5__.getDocument)(targetNode);\n            const path = this.nodeLocator.getAstNodePath(targetNode);\n            return {\n                sourceUri: doc.uri,\n                sourcePath: path,\n                targetUri: doc.uri,\n                targetPath: path,\n                segment: (0,_utils_cst_utils_js__WEBPACK_IMPORTED_MODULE_2__.toDocumentSegment)(nameNode),\n                local: true\n            };\n        }\n        return undefined;\n    }\n}\n//# sourceMappingURL=references.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2xhbmdpdW1AMy4zLjEvbm9kZV9tb2R1bGVzL2xhbmdpdW0vbGliL3JlZmVyZW5jZXMvcmVmZXJlbmNlcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUMyRDtBQUNYO0FBQ0k7QUFDbUI7QUFDM0I7QUFDSztBQUMxQztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCLHVFQUFjO0FBQzdDO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQiw0REFBVztBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0Qiw0REFBVztBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtEQUErRCxnRUFBVztBQUMxRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0REFBNEQseURBQVE7QUFDcEU7QUFDQTtBQUNBLGVBQWUsd0RBQU07QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsZ0VBQVc7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCLHNFQUFpQjtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL2V0aGFua2ltL05lc3Rvci9tZWRmZXRjaC5qcy9ub2RlX21vZHVsZXMvLnBucG0vbGFuZ2l1bUAzLjMuMS9ub2RlX21vZHVsZXMvbGFuZ2l1bS9saWIvcmVmZXJlbmNlcy9yZWZlcmVuY2VzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAqIENvcHlyaWdodCAyMDIxIFR5cGVGb3ggR21iSFxuICogVGhpcyBwcm9ncmFtIGFuZCB0aGUgYWNjb21wYW55aW5nIG1hdGVyaWFscyBhcmUgbWFkZSBhdmFpbGFibGUgdW5kZXIgdGhlXG4gKiB0ZXJtcyBvZiB0aGUgTUlUIExpY2Vuc2UsIHdoaWNoIGlzIGF2YWlsYWJsZSBpbiB0aGUgcHJvamVjdCByb290LlxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbmltcG9ydCB7IGZpbmRBc3NpZ25tZW50IH0gZnJvbSAnLi4vdXRpbHMvZ3JhbW1hci11dGlscy5qcyc7XG5pbXBvcnQgeyBpc1JlZmVyZW5jZSB9IGZyb20gJy4uL3N5bnRheC10cmVlLmpzJztcbmltcG9ydCB7IGdldERvY3VtZW50IH0gZnJvbSAnLi4vdXRpbHMvYXN0LXV0aWxzLmpzJztcbmltcG9ydCB7IGlzQ2hpbGROb2RlLCB0b0RvY3VtZW50U2VnbWVudCB9IGZyb20gJy4uL3V0aWxzL2NzdC11dGlscy5qcyc7XG5pbXBvcnQgeyBzdHJlYW0gfSBmcm9tICcuLi91dGlscy9zdHJlYW0uanMnO1xuaW1wb3J0IHsgVXJpVXRpbHMgfSBmcm9tICcuLi91dGlscy91cmktdXRpbHMuanMnO1xuZXhwb3J0IGNsYXNzIERlZmF1bHRSZWZlcmVuY2VzIHtcbiAgICBjb25zdHJ1Y3RvcihzZXJ2aWNlcykge1xuICAgICAgICB0aGlzLm5hbWVQcm92aWRlciA9IHNlcnZpY2VzLnJlZmVyZW5jZXMuTmFtZVByb3ZpZGVyO1xuICAgICAgICB0aGlzLmluZGV4ID0gc2VydmljZXMuc2hhcmVkLndvcmtzcGFjZS5JbmRleE1hbmFnZXI7XG4gICAgICAgIHRoaXMubm9kZUxvY2F0b3IgPSBzZXJ2aWNlcy53b3Jrc3BhY2UuQXN0Tm9kZUxvY2F0b3I7XG4gICAgfVxuICAgIGZpbmREZWNsYXJhdGlvbihzb3VyY2VDc3ROb2RlKSB7XG4gICAgICAgIGlmIChzb3VyY2VDc3ROb2RlKSB7XG4gICAgICAgICAgICBjb25zdCBhc3NpZ25tZW50ID0gZmluZEFzc2lnbm1lbnQoc291cmNlQ3N0Tm9kZSk7XG4gICAgICAgICAgICBjb25zdCBub2RlRWxlbSA9IHNvdXJjZUNzdE5vZGUuYXN0Tm9kZTtcbiAgICAgICAgICAgIGlmIChhc3NpZ25tZW50ICYmIG5vZGVFbGVtKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVmZXJlbmNlID0gbm9kZUVsZW1bYXNzaWdubWVudC5mZWF0dXJlXTtcbiAgICAgICAgICAgICAgICBpZiAoaXNSZWZlcmVuY2UocmVmZXJlbmNlKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVmZXJlbmNlLnJlZjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoQXJyYXkuaXNBcnJheShyZWZlcmVuY2UpKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgcmVmIG9mIHJlZmVyZW5jZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzUmVmZXJlbmNlKHJlZikgJiYgcmVmLiRyZWZOb2RlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJiYgcmVmLiRyZWZOb2RlLm9mZnNldCA8PSBzb3VyY2VDc3ROb2RlLm9mZnNldFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICYmIHJlZi4kcmVmTm9kZS5lbmQgPj0gc291cmNlQ3N0Tm9kZS5lbmQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVmLnJlZjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChub2RlRWxlbSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IG5hbWVOb2RlID0gdGhpcy5uYW1lUHJvdmlkZXIuZ2V0TmFtZU5vZGUobm9kZUVsZW0pO1xuICAgICAgICAgICAgICAgIC8vIE9ubHkgcmV0dXJuIHRoZSB0YXJnZXRlZCBub2RlIGluIGNhc2UgdGhlIHRhcmdldGVkIGNzdCBub2RlIGlzIHRoZSBuYW1lIG5vZGUgb3IgcGFydCBvZiBpdFxuICAgICAgICAgICAgICAgIGlmIChuYW1lTm9kZSAmJiAobmFtZU5vZGUgPT09IHNvdXJjZUNzdE5vZGUgfHwgaXNDaGlsZE5vZGUoc291cmNlQ3N0Tm9kZSwgbmFtZU5vZGUpKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbm9kZUVsZW07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGZpbmREZWNsYXJhdGlvbk5vZGUoc291cmNlQ3N0Tm9kZSkge1xuICAgICAgICBjb25zdCBhc3ROb2RlID0gdGhpcy5maW5kRGVjbGFyYXRpb24oc291cmNlQ3N0Tm9kZSk7XG4gICAgICAgIGlmIChhc3ROb2RlID09PSBudWxsIHx8IGFzdE5vZGUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGFzdE5vZGUuJGNzdE5vZGUpIHtcbiAgICAgICAgICAgIGNvbnN0IHRhcmdldE5vZGUgPSB0aGlzLm5hbWVQcm92aWRlci5nZXROYW1lTm9kZShhc3ROb2RlKTtcbiAgICAgICAgICAgIHJldHVybiB0YXJnZXROb2RlICE9PSBudWxsICYmIHRhcmdldE5vZGUgIT09IHZvaWQgMCA/IHRhcmdldE5vZGUgOiBhc3ROb2RlLiRjc3ROb2RlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGZpbmRSZWZlcmVuY2VzKHRhcmdldE5vZGUsIG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgcmVmcyA9IFtdO1xuICAgICAgICBpZiAob3B0aW9ucy5pbmNsdWRlRGVjbGFyYXRpb24pIHtcbiAgICAgICAgICAgIGNvbnN0IHJlZiA9IHRoaXMuZ2V0UmVmZXJlbmNlVG9TZWxmKHRhcmdldE5vZGUpO1xuICAgICAgICAgICAgaWYgKHJlZikge1xuICAgICAgICAgICAgICAgIHJlZnMucHVzaChyZWYpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGxldCBpbmRleFJlZmVyZW5jZXMgPSB0aGlzLmluZGV4LmZpbmRBbGxSZWZlcmVuY2VzKHRhcmdldE5vZGUsIHRoaXMubm9kZUxvY2F0b3IuZ2V0QXN0Tm9kZVBhdGgodGFyZ2V0Tm9kZSkpO1xuICAgICAgICBpZiAob3B0aW9ucy5kb2N1bWVudFVyaSkge1xuICAgICAgICAgICAgaW5kZXhSZWZlcmVuY2VzID0gaW5kZXhSZWZlcmVuY2VzLmZpbHRlcihyZWYgPT4gVXJpVXRpbHMuZXF1YWxzKHJlZi5zb3VyY2VVcmksIG9wdGlvbnMuZG9jdW1lbnRVcmkpKTtcbiAgICAgICAgfVxuICAgICAgICByZWZzLnB1c2goLi4uaW5kZXhSZWZlcmVuY2VzKTtcbiAgICAgICAgcmV0dXJuIHN0cmVhbShyZWZzKTtcbiAgICB9XG4gICAgZ2V0UmVmZXJlbmNlVG9TZWxmKHRhcmdldE5vZGUpIHtcbiAgICAgICAgY29uc3QgbmFtZU5vZGUgPSB0aGlzLm5hbWVQcm92aWRlci5nZXROYW1lTm9kZSh0YXJnZXROb2RlKTtcbiAgICAgICAgaWYgKG5hbWVOb2RlKSB7XG4gICAgICAgICAgICBjb25zdCBkb2MgPSBnZXREb2N1bWVudCh0YXJnZXROb2RlKTtcbiAgICAgICAgICAgIGNvbnN0IHBhdGggPSB0aGlzLm5vZGVMb2NhdG9yLmdldEFzdE5vZGVQYXRoKHRhcmdldE5vZGUpO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBzb3VyY2VVcmk6IGRvYy51cmksXG4gICAgICAgICAgICAgICAgc291cmNlUGF0aDogcGF0aCxcbiAgICAgICAgICAgICAgICB0YXJnZXRVcmk6IGRvYy51cmksXG4gICAgICAgICAgICAgICAgdGFyZ2V0UGF0aDogcGF0aCxcbiAgICAgICAgICAgICAgICBzZWdtZW50OiB0b0RvY3VtZW50U2VnbWVudChuYW1lTm9kZSksXG4gICAgICAgICAgICAgICAgbG9jYWw6IHRydWVcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZWZlcmVuY2VzLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/references/references.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/references/scope-computation.js":
/*!****************************************************************************************************!*\
  !*** ../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/references/scope-computation.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DefaultScopeComputation: () => (/* binding */ DefaultScopeComputation)\n/* harmony export */ });\n/* harmony import */ var _utils_cancellation_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/cancellation.js */ \"(ssr)/../node_modules/.pnpm/vscode-jsonrpc@8.2.0/node_modules/vscode-jsonrpc/lib/common/cancellation.js\");\n/* harmony import */ var _utils_ast_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/ast-utils.js */ \"(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/ast-utils.js\");\n/* harmony import */ var _utils_collections_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/collections.js */ \"(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/collections.js\");\n/* harmony import */ var _utils_promise_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/promise-utils.js */ \"(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/promise-utils.js\");\n/******************************************************************************\n * Copyright 2021-2022 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\n\n\n\n/**\n * The default scope computation creates and collectes descriptions of the AST nodes to be exported into the\n * _global_ scope from the given document. By default those are the document's root AST node and its directly\n * contained child nodes.\n *\n * Besides, it gathers all AST nodes that have a name (according to the `NameProvider` service) and includes them\n * in the local scope of their particular container nodes. As a result, for every cross-reference in the AST,\n * target elements from the same level (siblings) and further up towards the root (parents and siblings of parents)\n * are visible. Elements being nested inside lower levels (children, children of siblings and parents' siblings)\n * are _invisible_ by default, but that can be changed by customizing this service.\n */\nclass DefaultScopeComputation {\n    constructor(services) {\n        this.nameProvider = services.references.NameProvider;\n        this.descriptions = services.workspace.AstNodeDescriptionProvider;\n    }\n    async computeExports(document, cancelToken = _utils_cancellation_js__WEBPACK_IMPORTED_MODULE_0__.CancellationToken.None) {\n        return this.computeExportsForNode(document.parseResult.value, document, undefined, cancelToken);\n    }\n    /**\n     * Creates {@link AstNodeDescription AstNodeDescriptions} for the given {@link AstNode parentNode} and its children.\n     * The list of children to be considered is determined by the function parameter {@link children}.\n     * By default only the direct children of {@link parentNode} are visited, nested nodes are not exported.\n     *\n     * @param parentNode AST node to be exported, i.e., of which an {@link AstNodeDescription} shall be added to the returned list.\n     * @param document The document containing the AST node to be exported.\n     * @param children A function called with {@link parentNode} as single argument and returning an {@link Iterable} supplying the children to be visited, which must be directly or transitively contained in {@link parentNode}.\n     * @param cancelToken Indicates when to cancel the current operation.\n     * @throws `OperationCancelled` if a user action occurs during execution.\n     * @returns A list of {@link AstNodeDescription AstNodeDescriptions} to be published to index.\n     */\n    async computeExportsForNode(parentNode, document, children = _utils_ast_utils_js__WEBPACK_IMPORTED_MODULE_1__.streamContents, cancelToken = _utils_cancellation_js__WEBPACK_IMPORTED_MODULE_0__.CancellationToken.None) {\n        const exports = [];\n        this.exportNode(parentNode, exports, document);\n        for (const node of children(parentNode)) {\n            await (0,_utils_promise_utils_js__WEBPACK_IMPORTED_MODULE_2__.interruptAndCheck)(cancelToken);\n            this.exportNode(node, exports, document);\n        }\n        return exports;\n    }\n    /**\n     * Add a single node to the list of exports if it has a name. Override this method to change how\n     * symbols are exported, e.g. by modifying their exported name.\n     */\n    exportNode(node, exports, document) {\n        const name = this.nameProvider.getName(node);\n        if (name) {\n            exports.push(this.descriptions.createDescription(node, name, document));\n        }\n    }\n    async computeLocalScopes(document, cancelToken = _utils_cancellation_js__WEBPACK_IMPORTED_MODULE_0__.CancellationToken.None) {\n        const rootNode = document.parseResult.value;\n        const scopes = new _utils_collections_js__WEBPACK_IMPORTED_MODULE_3__.MultiMap();\n        // Here we navigate the full AST - local scopes shall be available in the whole document\n        for (const node of (0,_utils_ast_utils_js__WEBPACK_IMPORTED_MODULE_1__.streamAllContents)(rootNode)) {\n            await (0,_utils_promise_utils_js__WEBPACK_IMPORTED_MODULE_2__.interruptAndCheck)(cancelToken);\n            this.processNode(node, document, scopes);\n        }\n        return scopes;\n    }\n    /**\n     * Process a single node during scopes computation. The default implementation makes the node visible\n     * in the subtree of its container (if the node has a name). Override this method to change this,\n     * e.g. by increasing the visibility to a higher level in the AST.\n     */\n    processNode(node, document, scopes) {\n        const container = node.$container;\n        if (container) {\n            const name = this.nameProvider.getName(node);\n            if (name) {\n                scopes.add(container, this.descriptions.createDescription(node, name, document));\n            }\n        }\n    }\n}\n//# sourceMappingURL=scope-computation.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2xhbmdpdW1AMy4zLjEvbm9kZV9tb2R1bGVzL2xhbmdpdW0vbGliL3JlZmVyZW5jZXMvc2NvcGUtY29tcHV0YXRpb24uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQzZEO0FBQ2E7QUFDdkI7QUFDVztBQUM5RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlEQUFpRCxxRUFBaUI7QUFDbEU7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLDhDQUE4QyxlQUFlLDBCQUEwQjtBQUN2RyxzRkFBc0YsZUFBZTtBQUNyRywrQ0FBK0Msa0JBQWtCO0FBQ2pFO0FBQ0EscUVBQXFFLDBCQUEwQjtBQUMvRjtBQUNBLCtDQUErQyxrQkFBa0IscUNBQXFDLGdCQUFnQiwyRkFBMkYsaUJBQWlCO0FBQ2xPO0FBQ0E7QUFDQSwyQkFBMkIsOENBQThDO0FBQ3pFO0FBQ0EsaUVBQWlFLCtEQUFjLGdCQUFnQixxRUFBaUI7QUFDaEg7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLDBFQUFpQjtBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscURBQXFELHFFQUFpQjtBQUN0RTtBQUNBLDJCQUEyQiwyREFBUTtBQUNuQztBQUNBLDJCQUEyQixzRUFBaUI7QUFDNUMsa0JBQWtCLDBFQUFpQjtBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvZXRoYW5raW0vTmVzdG9yL21lZGZldGNoLmpzL25vZGVfbW9kdWxlcy8ucG5wbS9sYW5naXVtQDMuMy4xL25vZGVfbW9kdWxlcy9sYW5naXVtL2xpYi9yZWZlcmVuY2VzL3Njb3BlLWNvbXB1dGF0aW9uLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAqIENvcHlyaWdodCAyMDIxLTIwMjIgVHlwZUZveCBHbWJIXG4gKiBUaGlzIHByb2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzIGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0aGVcbiAqIHRlcm1zIG9mIHRoZSBNSVQgTGljZW5zZSwgd2hpY2ggaXMgYXZhaWxhYmxlIGluIHRoZSBwcm9qZWN0IHJvb3QuXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuaW1wb3J0IHsgQ2FuY2VsbGF0aW9uVG9rZW4gfSBmcm9tICcuLi91dGlscy9jYW5jZWxsYXRpb24uanMnO1xuaW1wb3J0IHsgc3RyZWFtQWxsQ29udGVudHMsIHN0cmVhbUNvbnRlbnRzIH0gZnJvbSAnLi4vdXRpbHMvYXN0LXV0aWxzLmpzJztcbmltcG9ydCB7IE11bHRpTWFwIH0gZnJvbSAnLi4vdXRpbHMvY29sbGVjdGlvbnMuanMnO1xuaW1wb3J0IHsgaW50ZXJydXB0QW5kQ2hlY2sgfSBmcm9tICcuLi91dGlscy9wcm9taXNlLXV0aWxzLmpzJztcbi8qKlxuICogVGhlIGRlZmF1bHQgc2NvcGUgY29tcHV0YXRpb24gY3JlYXRlcyBhbmQgY29sbGVjdGVzIGRlc2NyaXB0aW9ucyBvZiB0aGUgQVNUIG5vZGVzIHRvIGJlIGV4cG9ydGVkIGludG8gdGhlXG4gKiBfZ2xvYmFsXyBzY29wZSBmcm9tIHRoZSBnaXZlbiBkb2N1bWVudC4gQnkgZGVmYXVsdCB0aG9zZSBhcmUgdGhlIGRvY3VtZW50J3Mgcm9vdCBBU1Qgbm9kZSBhbmQgaXRzIGRpcmVjdGx5XG4gKiBjb250YWluZWQgY2hpbGQgbm9kZXMuXG4gKlxuICogQmVzaWRlcywgaXQgZ2F0aGVycyBhbGwgQVNUIG5vZGVzIHRoYXQgaGF2ZSBhIG5hbWUgKGFjY29yZGluZyB0byB0aGUgYE5hbWVQcm92aWRlcmAgc2VydmljZSkgYW5kIGluY2x1ZGVzIHRoZW1cbiAqIGluIHRoZSBsb2NhbCBzY29wZSBvZiB0aGVpciBwYXJ0aWN1bGFyIGNvbnRhaW5lciBub2Rlcy4gQXMgYSByZXN1bHQsIGZvciBldmVyeSBjcm9zcy1yZWZlcmVuY2UgaW4gdGhlIEFTVCxcbiAqIHRhcmdldCBlbGVtZW50cyBmcm9tIHRoZSBzYW1lIGxldmVsIChzaWJsaW5ncykgYW5kIGZ1cnRoZXIgdXAgdG93YXJkcyB0aGUgcm9vdCAocGFyZW50cyBhbmQgc2libGluZ3Mgb2YgcGFyZW50cylcbiAqIGFyZSB2aXNpYmxlLiBFbGVtZW50cyBiZWluZyBuZXN0ZWQgaW5zaWRlIGxvd2VyIGxldmVscyAoY2hpbGRyZW4sIGNoaWxkcmVuIG9mIHNpYmxpbmdzIGFuZCBwYXJlbnRzJyBzaWJsaW5ncylcbiAqIGFyZSBfaW52aXNpYmxlXyBieSBkZWZhdWx0LCBidXQgdGhhdCBjYW4gYmUgY2hhbmdlZCBieSBjdXN0b21pemluZyB0aGlzIHNlcnZpY2UuXG4gKi9cbmV4cG9ydCBjbGFzcyBEZWZhdWx0U2NvcGVDb21wdXRhdGlvbiB7XG4gICAgY29uc3RydWN0b3Ioc2VydmljZXMpIHtcbiAgICAgICAgdGhpcy5uYW1lUHJvdmlkZXIgPSBzZXJ2aWNlcy5yZWZlcmVuY2VzLk5hbWVQcm92aWRlcjtcbiAgICAgICAgdGhpcy5kZXNjcmlwdGlvbnMgPSBzZXJ2aWNlcy53b3Jrc3BhY2UuQXN0Tm9kZURlc2NyaXB0aW9uUHJvdmlkZXI7XG4gICAgfVxuICAgIGFzeW5jIGNvbXB1dGVFeHBvcnRzKGRvY3VtZW50LCBjYW5jZWxUb2tlbiA9IENhbmNlbGxhdGlvblRva2VuLk5vbmUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29tcHV0ZUV4cG9ydHNGb3JOb2RlKGRvY3VtZW50LnBhcnNlUmVzdWx0LnZhbHVlLCBkb2N1bWVudCwgdW5kZWZpbmVkLCBjYW5jZWxUb2tlbik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMge0BsaW5rIEFzdE5vZGVEZXNjcmlwdGlvbiBBc3ROb2RlRGVzY3JpcHRpb25zfSBmb3IgdGhlIGdpdmVuIHtAbGluayBBc3ROb2RlIHBhcmVudE5vZGV9IGFuZCBpdHMgY2hpbGRyZW4uXG4gICAgICogVGhlIGxpc3Qgb2YgY2hpbGRyZW4gdG8gYmUgY29uc2lkZXJlZCBpcyBkZXRlcm1pbmVkIGJ5IHRoZSBmdW5jdGlvbiBwYXJhbWV0ZXIge0BsaW5rIGNoaWxkcmVufS5cbiAgICAgKiBCeSBkZWZhdWx0IG9ubHkgdGhlIGRpcmVjdCBjaGlsZHJlbiBvZiB7QGxpbmsgcGFyZW50Tm9kZX0gYXJlIHZpc2l0ZWQsIG5lc3RlZCBub2RlcyBhcmUgbm90IGV4cG9ydGVkLlxuICAgICAqXG4gICAgICogQHBhcmFtIHBhcmVudE5vZGUgQVNUIG5vZGUgdG8gYmUgZXhwb3J0ZWQsIGkuZS4sIG9mIHdoaWNoIGFuIHtAbGluayBBc3ROb2RlRGVzY3JpcHRpb259IHNoYWxsIGJlIGFkZGVkIHRvIHRoZSByZXR1cm5lZCBsaXN0LlxuICAgICAqIEBwYXJhbSBkb2N1bWVudCBUaGUgZG9jdW1lbnQgY29udGFpbmluZyB0aGUgQVNUIG5vZGUgdG8gYmUgZXhwb3J0ZWQuXG4gICAgICogQHBhcmFtIGNoaWxkcmVuIEEgZnVuY3Rpb24gY2FsbGVkIHdpdGgge0BsaW5rIHBhcmVudE5vZGV9IGFzIHNpbmdsZSBhcmd1bWVudCBhbmQgcmV0dXJuaW5nIGFuIHtAbGluayBJdGVyYWJsZX0gc3VwcGx5aW5nIHRoZSBjaGlsZHJlbiB0byBiZSB2aXNpdGVkLCB3aGljaCBtdXN0IGJlIGRpcmVjdGx5IG9yIHRyYW5zaXRpdmVseSBjb250YWluZWQgaW4ge0BsaW5rIHBhcmVudE5vZGV9LlxuICAgICAqIEBwYXJhbSBjYW5jZWxUb2tlbiBJbmRpY2F0ZXMgd2hlbiB0byBjYW5jZWwgdGhlIGN1cnJlbnQgb3BlcmF0aW9uLlxuICAgICAqIEB0aHJvd3MgYE9wZXJhdGlvbkNhbmNlbGxlZGAgaWYgYSB1c2VyIGFjdGlvbiBvY2N1cnMgZHVyaW5nIGV4ZWN1dGlvbi5cbiAgICAgKiBAcmV0dXJucyBBIGxpc3Qgb2Yge0BsaW5rIEFzdE5vZGVEZXNjcmlwdGlvbiBBc3ROb2RlRGVzY3JpcHRpb25zfSB0byBiZSBwdWJsaXNoZWQgdG8gaW5kZXguXG4gICAgICovXG4gICAgYXN5bmMgY29tcHV0ZUV4cG9ydHNGb3JOb2RlKHBhcmVudE5vZGUsIGRvY3VtZW50LCBjaGlsZHJlbiA9IHN0cmVhbUNvbnRlbnRzLCBjYW5jZWxUb2tlbiA9IENhbmNlbGxhdGlvblRva2VuLk5vbmUpIHtcbiAgICAgICAgY29uc3QgZXhwb3J0cyA9IFtdO1xuICAgICAgICB0aGlzLmV4cG9ydE5vZGUocGFyZW50Tm9kZSwgZXhwb3J0cywgZG9jdW1lbnQpO1xuICAgICAgICBmb3IgKGNvbnN0IG5vZGUgb2YgY2hpbGRyZW4ocGFyZW50Tm9kZSkpIHtcbiAgICAgICAgICAgIGF3YWl0IGludGVycnVwdEFuZENoZWNrKGNhbmNlbFRva2VuKTtcbiAgICAgICAgICAgIHRoaXMuZXhwb3J0Tm9kZShub2RlLCBleHBvcnRzLCBkb2N1bWVudCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGV4cG9ydHM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFkZCBhIHNpbmdsZSBub2RlIHRvIHRoZSBsaXN0IG9mIGV4cG9ydHMgaWYgaXQgaGFzIGEgbmFtZS4gT3ZlcnJpZGUgdGhpcyBtZXRob2QgdG8gY2hhbmdlIGhvd1xuICAgICAqIHN5bWJvbHMgYXJlIGV4cG9ydGVkLCBlLmcuIGJ5IG1vZGlmeWluZyB0aGVpciBleHBvcnRlZCBuYW1lLlxuICAgICAqL1xuICAgIGV4cG9ydE5vZGUobm9kZSwgZXhwb3J0cywgZG9jdW1lbnQpIHtcbiAgICAgICAgY29uc3QgbmFtZSA9IHRoaXMubmFtZVByb3ZpZGVyLmdldE5hbWUobm9kZSk7XG4gICAgICAgIGlmIChuYW1lKSB7XG4gICAgICAgICAgICBleHBvcnRzLnB1c2godGhpcy5kZXNjcmlwdGlvbnMuY3JlYXRlRGVzY3JpcHRpb24obm9kZSwgbmFtZSwgZG9jdW1lbnQpKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBhc3luYyBjb21wdXRlTG9jYWxTY29wZXMoZG9jdW1lbnQsIGNhbmNlbFRva2VuID0gQ2FuY2VsbGF0aW9uVG9rZW4uTm9uZSkge1xuICAgICAgICBjb25zdCByb290Tm9kZSA9IGRvY3VtZW50LnBhcnNlUmVzdWx0LnZhbHVlO1xuICAgICAgICBjb25zdCBzY29wZXMgPSBuZXcgTXVsdGlNYXAoKTtcbiAgICAgICAgLy8gSGVyZSB3ZSBuYXZpZ2F0ZSB0aGUgZnVsbCBBU1QgLSBsb2NhbCBzY29wZXMgc2hhbGwgYmUgYXZhaWxhYmxlIGluIHRoZSB3aG9sZSBkb2N1bWVudFxuICAgICAgICBmb3IgKGNvbnN0IG5vZGUgb2Ygc3RyZWFtQWxsQ29udGVudHMocm9vdE5vZGUpKSB7XG4gICAgICAgICAgICBhd2FpdCBpbnRlcnJ1cHRBbmRDaGVjayhjYW5jZWxUb2tlbik7XG4gICAgICAgICAgICB0aGlzLnByb2Nlc3NOb2RlKG5vZGUsIGRvY3VtZW50LCBzY29wZXMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzY29wZXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFByb2Nlc3MgYSBzaW5nbGUgbm9kZSBkdXJpbmcgc2NvcGVzIGNvbXB1dGF0aW9uLiBUaGUgZGVmYXVsdCBpbXBsZW1lbnRhdGlvbiBtYWtlcyB0aGUgbm9kZSB2aXNpYmxlXG4gICAgICogaW4gdGhlIHN1YnRyZWUgb2YgaXRzIGNvbnRhaW5lciAoaWYgdGhlIG5vZGUgaGFzIGEgbmFtZSkuIE92ZXJyaWRlIHRoaXMgbWV0aG9kIHRvIGNoYW5nZSB0aGlzLFxuICAgICAqIGUuZy4gYnkgaW5jcmVhc2luZyB0aGUgdmlzaWJpbGl0eSB0byBhIGhpZ2hlciBsZXZlbCBpbiB0aGUgQVNULlxuICAgICAqL1xuICAgIHByb2Nlc3NOb2RlKG5vZGUsIGRvY3VtZW50LCBzY29wZXMpIHtcbiAgICAgICAgY29uc3QgY29udGFpbmVyID0gbm9kZS4kY29udGFpbmVyO1xuICAgICAgICBpZiAoY29udGFpbmVyKSB7XG4gICAgICAgICAgICBjb25zdCBuYW1lID0gdGhpcy5uYW1lUHJvdmlkZXIuZ2V0TmFtZShub2RlKTtcbiAgICAgICAgICAgIGlmIChuYW1lKSB7XG4gICAgICAgICAgICAgICAgc2NvcGVzLmFkZChjb250YWluZXIsIHRoaXMuZGVzY3JpcHRpb25zLmNyZWF0ZURlc2NyaXB0aW9uKG5vZGUsIG5hbWUsIGRvY3VtZW50KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zY29wZS1jb21wdXRhdGlvbi5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/references/scope-computation.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/references/scope-provider.js":
/*!*************************************************************************************************!*\
  !*** ../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/references/scope-provider.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DefaultScopeProvider: () => (/* binding */ DefaultScopeProvider)\n/* harmony export */ });\n/* harmony import */ var _scope_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./scope.js */ \"(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/references/scope.js\");\n/* harmony import */ var _utils_ast_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/ast-utils.js */ \"(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/ast-utils.js\");\n/* harmony import */ var _utils_stream_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/stream.js */ \"(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/stream.js\");\n/* harmony import */ var _utils_caching_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/caching.js */ \"(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/caching.js\");\n/******************************************************************************\n * Copyright 2021-2022 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\n\n\n\nclass DefaultScopeProvider {\n    constructor(services) {\n        this.reflection = services.shared.AstReflection;\n        this.nameProvider = services.references.NameProvider;\n        this.descriptions = services.workspace.AstNodeDescriptionProvider;\n        this.indexManager = services.shared.workspace.IndexManager;\n        this.globalScopeCache = new _utils_caching_js__WEBPACK_IMPORTED_MODULE_0__.WorkspaceCache(services.shared);\n    }\n    getScope(context) {\n        const scopes = [];\n        const referenceType = this.reflection.getReferenceType(context);\n        const precomputed = (0,_utils_ast_utils_js__WEBPACK_IMPORTED_MODULE_1__.getDocument)(context.container).precomputedScopes;\n        if (precomputed) {\n            let currentNode = context.container;\n            do {\n                const allDescriptions = precomputed.get(currentNode);\n                if (allDescriptions.length > 0) {\n                    scopes.push((0,_utils_stream_js__WEBPACK_IMPORTED_MODULE_2__.stream)(allDescriptions).filter(desc => this.reflection.isSubtype(desc.type, referenceType)));\n                }\n                currentNode = currentNode.$container;\n            } while (currentNode);\n        }\n        let result = this.getGlobalScope(referenceType, context);\n        for (let i = scopes.length - 1; i >= 0; i--) {\n            result = this.createScope(scopes[i], result);\n        }\n        return result;\n    }\n    /**\n     * Create a scope for the given collection of AST node descriptions.\n     */\n    createScope(elements, outerScope, options) {\n        return new _scope_js__WEBPACK_IMPORTED_MODULE_3__.StreamScope((0,_utils_stream_js__WEBPACK_IMPORTED_MODULE_2__.stream)(elements), outerScope, options);\n    }\n    /**\n     * Create a scope for the given collection of AST nodes, which need to be transformed into respective\n     * descriptions first. This is done using the `NameProvider` and `AstNodeDescriptionProvider` services.\n     */\n    createScopeForNodes(elements, outerScope, options) {\n        const s = (0,_utils_stream_js__WEBPACK_IMPORTED_MODULE_2__.stream)(elements).map(e => {\n            const name = this.nameProvider.getName(e);\n            if (name) {\n                return this.descriptions.createDescription(e, name);\n            }\n            return undefined;\n        }).nonNullable();\n        return new _scope_js__WEBPACK_IMPORTED_MODULE_3__.StreamScope(s, outerScope, options);\n    }\n    /**\n     * Create a global scope filtered for the given reference type.\n     */\n    getGlobalScope(referenceType, _context) {\n        return this.globalScopeCache.get(referenceType, () => new _scope_js__WEBPACK_IMPORTED_MODULE_3__.MapScope(this.indexManager.allElements(referenceType)));\n    }\n}\n//# sourceMappingURL=scope-provider.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2xhbmdpdW1AMy4zLjEvbm9kZV9tb2R1bGVzL2xhbmdpdW0vbGliL3JlZmVyZW5jZXMvc2NvcGUtcHJvdmlkZXIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ21EO0FBQ0M7QUFDUjtBQUNTO0FBQzlDO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9DQUFvQyw2REFBYztBQUNsRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QixnRUFBVztBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDLHdEQUFNO0FBQ3RDO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBLHdDQUF3QyxRQUFRO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsa0RBQVcsQ0FBQyx3REFBTTtBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0Isd0RBQU07QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVCxtQkFBbUIsa0RBQVc7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtFQUFrRSwrQ0FBUTtBQUMxRTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9Vc2Vycy9ldGhhbmtpbS9OZXN0b3IvbWVkZmV0Y2guanMvbm9kZV9tb2R1bGVzLy5wbnBtL2xhbmdpdW1AMy4zLjEvbm9kZV9tb2R1bGVzL2xhbmdpdW0vbGliL3JlZmVyZW5jZXMvc2NvcGUtcHJvdmlkZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuICogQ29weXJpZ2h0IDIwMjEtMjAyMiBUeXBlRm94IEdtYkhcbiAqIFRoaXMgcHJvZ3JhbSBhbmQgdGhlIGFjY29tcGFueWluZyBtYXRlcmlhbHMgYXJlIG1hZGUgYXZhaWxhYmxlIHVuZGVyIHRoZVxuICogdGVybXMgb2YgdGhlIE1JVCBMaWNlbnNlLCB3aGljaCBpcyBhdmFpbGFibGUgaW4gdGhlIHByb2plY3Qgcm9vdC5cbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5pbXBvcnQgeyBNYXBTY29wZSwgU3RyZWFtU2NvcGUgfSBmcm9tICcuL3Njb3BlLmpzJztcbmltcG9ydCB7IGdldERvY3VtZW50IH0gZnJvbSAnLi4vdXRpbHMvYXN0LXV0aWxzLmpzJztcbmltcG9ydCB7IHN0cmVhbSB9IGZyb20gJy4uL3V0aWxzL3N0cmVhbS5qcyc7XG5pbXBvcnQgeyBXb3Jrc3BhY2VDYWNoZSB9IGZyb20gJy4uL3V0aWxzL2NhY2hpbmcuanMnO1xuZXhwb3J0IGNsYXNzIERlZmF1bHRTY29wZVByb3ZpZGVyIHtcbiAgICBjb25zdHJ1Y3RvcihzZXJ2aWNlcykge1xuICAgICAgICB0aGlzLnJlZmxlY3Rpb24gPSBzZXJ2aWNlcy5zaGFyZWQuQXN0UmVmbGVjdGlvbjtcbiAgICAgICAgdGhpcy5uYW1lUHJvdmlkZXIgPSBzZXJ2aWNlcy5yZWZlcmVuY2VzLk5hbWVQcm92aWRlcjtcbiAgICAgICAgdGhpcy5kZXNjcmlwdGlvbnMgPSBzZXJ2aWNlcy53b3Jrc3BhY2UuQXN0Tm9kZURlc2NyaXB0aW9uUHJvdmlkZXI7XG4gICAgICAgIHRoaXMuaW5kZXhNYW5hZ2VyID0gc2VydmljZXMuc2hhcmVkLndvcmtzcGFjZS5JbmRleE1hbmFnZXI7XG4gICAgICAgIHRoaXMuZ2xvYmFsU2NvcGVDYWNoZSA9IG5ldyBXb3Jrc3BhY2VDYWNoZShzZXJ2aWNlcy5zaGFyZWQpO1xuICAgIH1cbiAgICBnZXRTY29wZShjb250ZXh0KSB7XG4gICAgICAgIGNvbnN0IHNjb3BlcyA9IFtdO1xuICAgICAgICBjb25zdCByZWZlcmVuY2VUeXBlID0gdGhpcy5yZWZsZWN0aW9uLmdldFJlZmVyZW5jZVR5cGUoY29udGV4dCk7XG4gICAgICAgIGNvbnN0IHByZWNvbXB1dGVkID0gZ2V0RG9jdW1lbnQoY29udGV4dC5jb250YWluZXIpLnByZWNvbXB1dGVkU2NvcGVzO1xuICAgICAgICBpZiAocHJlY29tcHV0ZWQpIHtcbiAgICAgICAgICAgIGxldCBjdXJyZW50Tm9kZSA9IGNvbnRleHQuY29udGFpbmVyO1xuICAgICAgICAgICAgZG8ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGFsbERlc2NyaXB0aW9ucyA9IHByZWNvbXB1dGVkLmdldChjdXJyZW50Tm9kZSk7XG4gICAgICAgICAgICAgICAgaWYgKGFsbERlc2NyaXB0aW9ucy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHNjb3Blcy5wdXNoKHN0cmVhbShhbGxEZXNjcmlwdGlvbnMpLmZpbHRlcihkZXNjID0+IHRoaXMucmVmbGVjdGlvbi5pc1N1YnR5cGUoZGVzYy50eXBlLCByZWZlcmVuY2VUeXBlKSkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjdXJyZW50Tm9kZSA9IGN1cnJlbnROb2RlLiRjb250YWluZXI7XG4gICAgICAgICAgICB9IHdoaWxlIChjdXJyZW50Tm9kZSk7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHJlc3VsdCA9IHRoaXMuZ2V0R2xvYmFsU2NvcGUocmVmZXJlbmNlVHlwZSwgY29udGV4dCk7XG4gICAgICAgIGZvciAobGV0IGkgPSBzY29wZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IHRoaXMuY3JlYXRlU2NvcGUoc2NvcGVzW2ldLCByZXN1bHQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIHNjb3BlIGZvciB0aGUgZ2l2ZW4gY29sbGVjdGlvbiBvZiBBU1Qgbm9kZSBkZXNjcmlwdGlvbnMuXG4gICAgICovXG4gICAgY3JlYXRlU2NvcGUoZWxlbWVudHMsIG91dGVyU2NvcGUsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBTdHJlYW1TY29wZShzdHJlYW0oZWxlbWVudHMpLCBvdXRlclNjb3BlLCBvcHRpb25zKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgc2NvcGUgZm9yIHRoZSBnaXZlbiBjb2xsZWN0aW9uIG9mIEFTVCBub2Rlcywgd2hpY2ggbmVlZCB0byBiZSB0cmFuc2Zvcm1lZCBpbnRvIHJlc3BlY3RpdmVcbiAgICAgKiBkZXNjcmlwdGlvbnMgZmlyc3QuIFRoaXMgaXMgZG9uZSB1c2luZyB0aGUgYE5hbWVQcm92aWRlcmAgYW5kIGBBc3ROb2RlRGVzY3JpcHRpb25Qcm92aWRlcmAgc2VydmljZXMuXG4gICAgICovXG4gICAgY3JlYXRlU2NvcGVGb3JOb2RlcyhlbGVtZW50cywgb3V0ZXJTY29wZSwgb3B0aW9ucykge1xuICAgICAgICBjb25zdCBzID0gc3RyZWFtKGVsZW1lbnRzKS5tYXAoZSA9PiB7XG4gICAgICAgICAgICBjb25zdCBuYW1lID0gdGhpcy5uYW1lUHJvdmlkZXIuZ2V0TmFtZShlKTtcbiAgICAgICAgICAgIGlmIChuYW1lKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGVzY3JpcHRpb25zLmNyZWF0ZURlc2NyaXB0aW9uKGUsIG5hbWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfSkubm9uTnVsbGFibGUoKTtcbiAgICAgICAgcmV0dXJuIG5ldyBTdHJlYW1TY29wZShzLCBvdXRlclNjb3BlLCBvcHRpb25zKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgZ2xvYmFsIHNjb3BlIGZpbHRlcmVkIGZvciB0aGUgZ2l2ZW4gcmVmZXJlbmNlIHR5cGUuXG4gICAgICovXG4gICAgZ2V0R2xvYmFsU2NvcGUocmVmZXJlbmNlVHlwZSwgX2NvbnRleHQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2xvYmFsU2NvcGVDYWNoZS5nZXQocmVmZXJlbmNlVHlwZSwgKCkgPT4gbmV3IE1hcFNjb3BlKHRoaXMuaW5kZXhNYW5hZ2VyLmFsbEVsZW1lbnRzKHJlZmVyZW5jZVR5cGUpKSk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2NvcGUtcHJvdmlkZXIuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/references/scope-provider.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/references/scope.js":
/*!****************************************************************************************!*\
  !*** ../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/references/scope.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EMPTY_SCOPE: () => (/* binding */ EMPTY_SCOPE),\n/* harmony export */   MapScope: () => (/* binding */ MapScope),\n/* harmony export */   StreamScope: () => (/* binding */ StreamScope)\n/* harmony export */ });\n/* harmony import */ var _utils_stream_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/stream.js */ \"(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/stream.js\");\n/******************************************************************************\n * Copyright 2023 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\n/**\n * The default scope implementation is based on a `Stream`. It has an optional _outer scope_ describing\n * the next level of elements, which are queried when a target element is not found in the stream provided\n * to this scope.\n */\nclass StreamScope {\n    constructor(elements, outerScope, options) {\n        var _a;\n        this.elements = elements;\n        this.outerScope = outerScope;\n        this.caseInsensitive = (_a = options === null || options === void 0 ? void 0 : options.caseInsensitive) !== null && _a !== void 0 ? _a : false;\n    }\n    getAllElements() {\n        if (this.outerScope) {\n            return this.elements.concat(this.outerScope.getAllElements());\n        }\n        else {\n            return this.elements;\n        }\n    }\n    getElement(name) {\n        const local = this.caseInsensitive\n            ? this.elements.find(e => e.name.toLowerCase() === name.toLowerCase())\n            : this.elements.find(e => e.name === name);\n        if (local) {\n            return local;\n        }\n        if (this.outerScope) {\n            return this.outerScope.getElement(name);\n        }\n        return undefined;\n    }\n}\nclass MapScope {\n    constructor(elements, outerScope, options) {\n        var _a;\n        this.elements = new Map();\n        this.caseInsensitive = (_a = options === null || options === void 0 ? void 0 : options.caseInsensitive) !== null && _a !== void 0 ? _a : false;\n        for (const element of elements) {\n            const name = this.caseInsensitive\n                ? element.name.toLowerCase()\n                : element.name;\n            this.elements.set(name, element);\n        }\n        this.outerScope = outerScope;\n    }\n    getElement(name) {\n        const localName = this.caseInsensitive ? name.toLowerCase() : name;\n        const local = this.elements.get(localName);\n        if (local) {\n            return local;\n        }\n        if (this.outerScope) {\n            return this.outerScope.getElement(name);\n        }\n        return undefined;\n    }\n    getAllElements() {\n        let elementStream = (0,_utils_stream_js__WEBPACK_IMPORTED_MODULE_0__.stream)(this.elements.values());\n        if (this.outerScope) {\n            elementStream = elementStream.concat(this.outerScope.getAllElements());\n        }\n        return elementStream;\n    }\n}\nconst EMPTY_SCOPE = {\n    getElement() {\n        return undefined;\n    },\n    getAllElements() {\n        return _utils_stream_js__WEBPACK_IMPORTED_MODULE_0__.EMPTY_STREAM;\n    }\n};\n//# sourceMappingURL=scope.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2xhbmdpdW1AMy4zLjEvbm9kZV9tb2R1bGVzL2xhbmdpdW0vbGliL3JlZmVyZW5jZXMvc2NvcGUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDMEQ7QUFDMUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsd0RBQU07QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsZUFBZSwwREFBWTtBQUMzQjtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9Vc2Vycy9ldGhhbmtpbS9OZXN0b3IvbWVkZmV0Y2guanMvbm9kZV9tb2R1bGVzLy5wbnBtL2xhbmdpdW1AMy4zLjEvbm9kZV9tb2R1bGVzL2xhbmdpdW0vbGliL3JlZmVyZW5jZXMvc2NvcGUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuICogQ29weXJpZ2h0IDIwMjMgVHlwZUZveCBHbWJIXG4gKiBUaGlzIHByb2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzIGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0aGVcbiAqIHRlcm1zIG9mIHRoZSBNSVQgTGljZW5zZSwgd2hpY2ggaXMgYXZhaWxhYmxlIGluIHRoZSBwcm9qZWN0IHJvb3QuXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuaW1wb3J0IHsgRU1QVFlfU1RSRUFNLCBzdHJlYW0gfSBmcm9tICcuLi91dGlscy9zdHJlYW0uanMnO1xuLyoqXG4gKiBUaGUgZGVmYXVsdCBzY29wZSBpbXBsZW1lbnRhdGlvbiBpcyBiYXNlZCBvbiBhIGBTdHJlYW1gLiBJdCBoYXMgYW4gb3B0aW9uYWwgX291dGVyIHNjb3BlXyBkZXNjcmliaW5nXG4gKiB0aGUgbmV4dCBsZXZlbCBvZiBlbGVtZW50cywgd2hpY2ggYXJlIHF1ZXJpZWQgd2hlbiBhIHRhcmdldCBlbGVtZW50IGlzIG5vdCBmb3VuZCBpbiB0aGUgc3RyZWFtIHByb3ZpZGVkXG4gKiB0byB0aGlzIHNjb3BlLlxuICovXG5leHBvcnQgY2xhc3MgU3RyZWFtU2NvcGUge1xuICAgIGNvbnN0cnVjdG9yKGVsZW1lbnRzLCBvdXRlclNjb3BlLCBvcHRpb25zKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgdGhpcy5lbGVtZW50cyA9IGVsZW1lbnRzO1xuICAgICAgICB0aGlzLm91dGVyU2NvcGUgPSBvdXRlclNjb3BlO1xuICAgICAgICB0aGlzLmNhc2VJbnNlbnNpdGl2ZSA9IChfYSA9IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5jYXNlSW5zZW5zaXRpdmUpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IGZhbHNlO1xuICAgIH1cbiAgICBnZXRBbGxFbGVtZW50cygpIHtcbiAgICAgICAgaWYgKHRoaXMub3V0ZXJTY29wZSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZWxlbWVudHMuY29uY2F0KHRoaXMub3V0ZXJTY29wZS5nZXRBbGxFbGVtZW50cygpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmVsZW1lbnRzO1xuICAgICAgICB9XG4gICAgfVxuICAgIGdldEVsZW1lbnQobmFtZSkge1xuICAgICAgICBjb25zdCBsb2NhbCA9IHRoaXMuY2FzZUluc2Vuc2l0aXZlXG4gICAgICAgICAgICA/IHRoaXMuZWxlbWVudHMuZmluZChlID0+IGUubmFtZS50b0xvd2VyQ2FzZSgpID09PSBuYW1lLnRvTG93ZXJDYXNlKCkpXG4gICAgICAgICAgICA6IHRoaXMuZWxlbWVudHMuZmluZChlID0+IGUubmFtZSA9PT0gbmFtZSk7XG4gICAgICAgIGlmIChsb2NhbCkge1xuICAgICAgICAgICAgcmV0dXJuIGxvY2FsO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLm91dGVyU2NvcGUpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm91dGVyU2NvcGUuZ2V0RWxlbWVudChuYW1lKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBNYXBTY29wZSB7XG4gICAgY29uc3RydWN0b3IoZWxlbWVudHMsIG91dGVyU2NvcGUsIG9wdGlvbnMpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICB0aGlzLmVsZW1lbnRzID0gbmV3IE1hcCgpO1xuICAgICAgICB0aGlzLmNhc2VJbnNlbnNpdGl2ZSA9IChfYSA9IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5jYXNlSW5zZW5zaXRpdmUpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IGZhbHNlO1xuICAgICAgICBmb3IgKGNvbnN0IGVsZW1lbnQgb2YgZWxlbWVudHMpIHtcbiAgICAgICAgICAgIGNvbnN0IG5hbWUgPSB0aGlzLmNhc2VJbnNlbnNpdGl2ZVxuICAgICAgICAgICAgICAgID8gZWxlbWVudC5uYW1lLnRvTG93ZXJDYXNlKClcbiAgICAgICAgICAgICAgICA6IGVsZW1lbnQubmFtZTtcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudHMuc2V0KG5hbWUsIGVsZW1lbnQpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMub3V0ZXJTY29wZSA9IG91dGVyU2NvcGU7XG4gICAgfVxuICAgIGdldEVsZW1lbnQobmFtZSkge1xuICAgICAgICBjb25zdCBsb2NhbE5hbWUgPSB0aGlzLmNhc2VJbnNlbnNpdGl2ZSA/IG5hbWUudG9Mb3dlckNhc2UoKSA6IG5hbWU7XG4gICAgICAgIGNvbnN0IGxvY2FsID0gdGhpcy5lbGVtZW50cy5nZXQobG9jYWxOYW1lKTtcbiAgICAgICAgaWYgKGxvY2FsKSB7XG4gICAgICAgICAgICByZXR1cm4gbG9jYWw7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMub3V0ZXJTY29wZSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMub3V0ZXJTY29wZS5nZXRFbGVtZW50KG5hbWUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGdldEFsbEVsZW1lbnRzKCkge1xuICAgICAgICBsZXQgZWxlbWVudFN0cmVhbSA9IHN0cmVhbSh0aGlzLmVsZW1lbnRzLnZhbHVlcygpKTtcbiAgICAgICAgaWYgKHRoaXMub3V0ZXJTY29wZSkge1xuICAgICAgICAgICAgZWxlbWVudFN0cmVhbSA9IGVsZW1lbnRTdHJlYW0uY29uY2F0KHRoaXMub3V0ZXJTY29wZS5nZXRBbGxFbGVtZW50cygpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZWxlbWVudFN0cmVhbTtcbiAgICB9XG59XG5leHBvcnQgY29uc3QgRU1QVFlfU0NPUEUgPSB7XG4gICAgZ2V0RWxlbWVudCgpIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9LFxuICAgIGdldEFsbEVsZW1lbnRzKCkge1xuICAgICAgICByZXR1cm4gRU1QVFlfU1RSRUFNO1xuICAgIH1cbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zY29wZS5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/references/scope.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/serializer/hydrator.js":
/*!*******************************************************************************************!*\
  !*** ../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/serializer/hydrator.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DefaultHydrator: () => (/* binding */ DefaultHydrator)\n/* harmony export */ });\n/* harmony import */ var _parser_cst_node_builder_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../parser/cst-node-builder.js */ \"(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/parser/cst-node-builder.js\");\n/* harmony import */ var _languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../languages/generated/ast.js */ \"(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/languages/generated/ast.js\");\n/* harmony import */ var _syntax_tree_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../syntax-tree.js */ \"(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/syntax-tree.js\");\n/* harmony import */ var _utils_ast_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/ast-utils.js */ \"(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/ast-utils.js\");\n/* harmony import */ var _utils_collections_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/collections.js */ \"(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/collections.js\");\n/* harmony import */ var _utils_cst_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/cst-utils.js */ \"(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/cst-utils.js\");\n/******************************************************************************\n * Copyright 2024 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\n\n\n\n\n\nclass DefaultHydrator {\n    constructor(services) {\n        this.grammarElementIdMap = new _utils_collections_js__WEBPACK_IMPORTED_MODULE_0__.BiMap();\n        this.tokenTypeIdMap = new _utils_collections_js__WEBPACK_IMPORTED_MODULE_0__.BiMap();\n        this.grammar = services.Grammar;\n        this.lexer = services.parser.Lexer;\n        this.linker = services.references.Linker;\n    }\n    dehydrate(result) {\n        return {\n            lexerErrors: result.lexerErrors,\n            lexerReport: result.lexerReport ? this.dehydrateLexerReport(result.lexerReport) : undefined,\n            // We need to create shallow copies of the errors\n            // The original errors inherit from the `Error` class, which is not transferable across worker threads\n            parserErrors: result.parserErrors.map(e => (Object.assign(Object.assign({}, e), { message: e.message }))),\n            value: this.dehydrateAstNode(result.value, this.createDehyrationContext(result.value))\n        };\n    }\n    dehydrateLexerReport(lexerReport) {\n        // By default, lexer reports are serializable\n        return lexerReport;\n    }\n    createDehyrationContext(node) {\n        const astNodes = new Map();\n        const cstNodes = new Map();\n        for (const astNode of (0,_utils_ast_utils_js__WEBPACK_IMPORTED_MODULE_1__.streamAst)(node)) {\n            astNodes.set(astNode, {});\n        }\n        if (node.$cstNode) {\n            for (const cstNode of (0,_utils_cst_utils_js__WEBPACK_IMPORTED_MODULE_2__.streamCst)(node.$cstNode)) {\n                cstNodes.set(cstNode, {});\n            }\n        }\n        return {\n            astNodes,\n            cstNodes\n        };\n    }\n    dehydrateAstNode(node, context) {\n        const obj = context.astNodes.get(node);\n        obj.$type = node.$type;\n        obj.$containerIndex = node.$containerIndex;\n        obj.$containerProperty = node.$containerProperty;\n        if (node.$cstNode !== undefined) {\n            obj.$cstNode = this.dehydrateCstNode(node.$cstNode, context);\n        }\n        for (const [name, value] of Object.entries(node)) {\n            if (name.startsWith('$')) {\n                continue;\n            }\n            if (Array.isArray(value)) {\n                const arr = [];\n                obj[name] = arr;\n                for (const item of value) {\n                    if ((0,_syntax_tree_js__WEBPACK_IMPORTED_MODULE_3__.isAstNode)(item)) {\n                        arr.push(this.dehydrateAstNode(item, context));\n                    }\n                    else if ((0,_syntax_tree_js__WEBPACK_IMPORTED_MODULE_3__.isReference)(item)) {\n                        arr.push(this.dehydrateReference(item, context));\n                    }\n                    else {\n                        arr.push(item);\n                    }\n                }\n            }\n            else if ((0,_syntax_tree_js__WEBPACK_IMPORTED_MODULE_3__.isAstNode)(value)) {\n                obj[name] = this.dehydrateAstNode(value, context);\n            }\n            else if ((0,_syntax_tree_js__WEBPACK_IMPORTED_MODULE_3__.isReference)(value)) {\n                obj[name] = this.dehydrateReference(value, context);\n            }\n            else if (value !== undefined) {\n                obj[name] = value;\n            }\n        }\n        return obj;\n    }\n    dehydrateReference(reference, context) {\n        const obj = {};\n        obj.$refText = reference.$refText;\n        if (reference.$refNode) {\n            obj.$refNode = context.cstNodes.get(reference.$refNode);\n        }\n        return obj;\n    }\n    dehydrateCstNode(node, context) {\n        const cstNode = context.cstNodes.get(node);\n        if ((0,_syntax_tree_js__WEBPACK_IMPORTED_MODULE_3__.isRootCstNode)(node)) {\n            cstNode.fullText = node.fullText;\n        }\n        else {\n            // Note: This returns undefined for hidden nodes (i.e. comments)\n            cstNode.grammarSource = this.getGrammarElementId(node.grammarSource);\n        }\n        cstNode.hidden = node.hidden;\n        cstNode.astNode = context.astNodes.get(node.astNode);\n        if ((0,_syntax_tree_js__WEBPACK_IMPORTED_MODULE_3__.isCompositeCstNode)(node)) {\n            cstNode.content = node.content.map(child => this.dehydrateCstNode(child, context));\n        }\n        else if ((0,_syntax_tree_js__WEBPACK_IMPORTED_MODULE_3__.isLeafCstNode)(node)) {\n            cstNode.tokenType = node.tokenType.name;\n            cstNode.offset = node.offset;\n            cstNode.length = node.length;\n            cstNode.startLine = node.range.start.line;\n            cstNode.startColumn = node.range.start.character;\n            cstNode.endLine = node.range.end.line;\n            cstNode.endColumn = node.range.end.character;\n        }\n        return cstNode;\n    }\n    hydrate(result) {\n        const node = result.value;\n        const context = this.createHydrationContext(node);\n        if ('$cstNode' in node) {\n            this.hydrateCstNode(node.$cstNode, context);\n        }\n        return {\n            lexerErrors: result.lexerErrors,\n            lexerReport: result.lexerReport,\n            parserErrors: result.parserErrors,\n            value: this.hydrateAstNode(node, context)\n        };\n    }\n    createHydrationContext(node) {\n        const astNodes = new Map();\n        const cstNodes = new Map();\n        for (const astNode of (0,_utils_ast_utils_js__WEBPACK_IMPORTED_MODULE_1__.streamAst)(node)) {\n            astNodes.set(astNode, {});\n        }\n        let root;\n        if (node.$cstNode) {\n            for (const cstNode of (0,_utils_cst_utils_js__WEBPACK_IMPORTED_MODULE_2__.streamCst)(node.$cstNode)) {\n                let cst;\n                if ('fullText' in cstNode) {\n                    cst = new _parser_cst_node_builder_js__WEBPACK_IMPORTED_MODULE_4__.RootCstNodeImpl(cstNode.fullText);\n                    root = cst;\n                }\n                else if ('content' in cstNode) {\n                    cst = new _parser_cst_node_builder_js__WEBPACK_IMPORTED_MODULE_4__.CompositeCstNodeImpl();\n                }\n                else if ('tokenType' in cstNode) {\n                    cst = this.hydrateCstLeafNode(cstNode);\n                }\n                if (cst) {\n                    cstNodes.set(cstNode, cst);\n                    cst.root = root;\n                }\n            }\n        }\n        return {\n            astNodes,\n            cstNodes\n        };\n    }\n    hydrateAstNode(node, context) {\n        const astNode = context.astNodes.get(node);\n        astNode.$type = node.$type;\n        astNode.$containerIndex = node.$containerIndex;\n        astNode.$containerProperty = node.$containerProperty;\n        if (node.$cstNode) {\n            astNode.$cstNode = context.cstNodes.get(node.$cstNode);\n        }\n        for (const [name, value] of Object.entries(node)) {\n            if (name.startsWith('$')) {\n                continue;\n            }\n            if (Array.isArray(value)) {\n                const arr = [];\n                astNode[name] = arr;\n                for (const item of value) {\n                    if ((0,_syntax_tree_js__WEBPACK_IMPORTED_MODULE_3__.isAstNode)(item)) {\n                        arr.push(this.setParent(this.hydrateAstNode(item, context), astNode));\n                    }\n                    else if ((0,_syntax_tree_js__WEBPACK_IMPORTED_MODULE_3__.isReference)(item)) {\n                        arr.push(this.hydrateReference(item, astNode, name, context));\n                    }\n                    else {\n                        arr.push(item);\n                    }\n                }\n            }\n            else if ((0,_syntax_tree_js__WEBPACK_IMPORTED_MODULE_3__.isAstNode)(value)) {\n                astNode[name] = this.setParent(this.hydrateAstNode(value, context), astNode);\n            }\n            else if ((0,_syntax_tree_js__WEBPACK_IMPORTED_MODULE_3__.isReference)(value)) {\n                astNode[name] = this.hydrateReference(value, astNode, name, context);\n            }\n            else if (value !== undefined) {\n                astNode[name] = value;\n            }\n        }\n        return astNode;\n    }\n    setParent(node, parent) {\n        node.$container = parent;\n        return node;\n    }\n    hydrateReference(reference, node, name, context) {\n        return this.linker.buildReference(node, name, context.cstNodes.get(reference.$refNode), reference.$refText);\n    }\n    hydrateCstNode(cstNode, context, num = 0) {\n        const cstNodeObj = context.cstNodes.get(cstNode);\n        if (typeof cstNode.grammarSource === 'number') {\n            cstNodeObj.grammarSource = this.getGrammarElement(cstNode.grammarSource);\n        }\n        cstNodeObj.astNode = context.astNodes.get(cstNode.astNode);\n        if ((0,_syntax_tree_js__WEBPACK_IMPORTED_MODULE_3__.isCompositeCstNode)(cstNodeObj)) {\n            for (const child of cstNode.content) {\n                const hydrated = this.hydrateCstNode(child, context, num++);\n                cstNodeObj.content.push(hydrated);\n            }\n        }\n        return cstNodeObj;\n    }\n    hydrateCstLeafNode(cstNode) {\n        const tokenType = this.getTokenType(cstNode.tokenType);\n        const offset = cstNode.offset;\n        const length = cstNode.length;\n        const startLine = cstNode.startLine;\n        const startColumn = cstNode.startColumn;\n        const endLine = cstNode.endLine;\n        const endColumn = cstNode.endColumn;\n        const hidden = cstNode.hidden;\n        const node = new _parser_cst_node_builder_js__WEBPACK_IMPORTED_MODULE_4__.LeafCstNodeImpl(offset, length, {\n            start: {\n                line: startLine,\n                character: startColumn\n            },\n            end: {\n                line: endLine,\n                character: endColumn\n            }\n        }, tokenType, hidden);\n        return node;\n    }\n    getTokenType(name) {\n        return this.lexer.definition[name];\n    }\n    getGrammarElementId(node) {\n        if (!node) {\n            return undefined;\n        }\n        if (this.grammarElementIdMap.size === 0) {\n            this.createGrammarElementIdMap();\n        }\n        return this.grammarElementIdMap.get(node);\n    }\n    getGrammarElement(id) {\n        if (this.grammarElementIdMap.size === 0) {\n            this.createGrammarElementIdMap();\n        }\n        const element = this.grammarElementIdMap.getKey(id);\n        return element;\n    }\n    createGrammarElementIdMap() {\n        let id = 0;\n        for (const element of (0,_utils_ast_utils_js__WEBPACK_IMPORTED_MODULE_1__.streamAst)(this.grammar)) {\n            if ((0,_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_5__.isAbstractElement)(element)) {\n                this.grammarElementIdMap.set(element, id++);\n            }\n        }\n    }\n}\n//# sourceMappingURL=hydrator.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/serializer/hydrator.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/serializer/json-serializer.js":
/*!**************************************************************************************************!*\
  !*** ../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/serializer/json-serializer.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DefaultJsonSerializer: () => (/* binding */ DefaultJsonSerializer),\n/* harmony export */   isAstNodeWithComment: () => (/* binding */ isAstNodeWithComment)\n/* harmony export */ });\n/* harmony import */ var vscode_uri__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! vscode-uri */ \"(ssr)/../node_modules/.pnpm/vscode-uri@3.0.8/node_modules/vscode-uri/lib/esm/index.mjs\");\n/* harmony import */ var _syntax_tree_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../syntax-tree.js */ \"(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/syntax-tree.js\");\n/* harmony import */ var _utils_ast_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/ast-utils.js */ \"(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/ast-utils.js\");\n/* harmony import */ var _utils_grammar_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/grammar-utils.js */ \"(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/grammar-utils.js\");\n/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\n\n\n\nfunction isAstNodeWithComment(node) {\n    return typeof node.$comment === 'string';\n}\nfunction isIntermediateReference(obj) {\n    return typeof obj === 'object' && !!obj && ('$ref' in obj || '$error' in obj);\n}\nclass DefaultJsonSerializer {\n    constructor(services) {\n        /** The set of AstNode properties to be ignored by the serializer. */\n        this.ignoreProperties = new Set(['$container', '$containerProperty', '$containerIndex', '$document', '$cstNode']);\n        this.langiumDocuments = services.shared.workspace.LangiumDocuments;\n        this.astNodeLocator = services.workspace.AstNodeLocator;\n        this.nameProvider = services.references.NameProvider;\n        this.commentProvider = services.documentation.CommentProvider;\n    }\n    serialize(node, options) {\n        const serializeOptions = options !== null && options !== void 0 ? options : {};\n        const specificReplacer = options === null || options === void 0 ? void 0 : options.replacer;\n        const defaultReplacer = (key, value) => this.replacer(key, value, serializeOptions);\n        const replacer = specificReplacer ? (key, value) => specificReplacer(key, value, defaultReplacer) : defaultReplacer;\n        try {\n            this.currentDocument = (0,_utils_ast_utils_js__WEBPACK_IMPORTED_MODULE_0__.getDocument)(node);\n            return JSON.stringify(node, replacer, options === null || options === void 0 ? void 0 : options.space);\n        }\n        finally {\n            this.currentDocument = undefined;\n        }\n    }\n    deserialize(content, options) {\n        const deserializeOptions = options !== null && options !== void 0 ? options : {};\n        const root = JSON.parse(content);\n        this.linkNode(root, root, deserializeOptions);\n        return root;\n    }\n    replacer(key, value, { refText, sourceText, textRegions, comments, uriConverter }) {\n        var _a, _b, _c, _d;\n        if (this.ignoreProperties.has(key)) {\n            return undefined;\n        }\n        else if ((0,_syntax_tree_js__WEBPACK_IMPORTED_MODULE_1__.isReference)(value)) {\n            const refValue = value.ref;\n            const $refText = refText ? value.$refText : undefined;\n            if (refValue) {\n                const targetDocument = (0,_utils_ast_utils_js__WEBPACK_IMPORTED_MODULE_0__.getDocument)(refValue);\n                let targetUri = '';\n                if (this.currentDocument && this.currentDocument !== targetDocument) {\n                    if (uriConverter) {\n                        targetUri = uriConverter(targetDocument.uri, value);\n                    }\n                    else {\n                        targetUri = targetDocument.uri.toString();\n                    }\n                }\n                const targetPath = this.astNodeLocator.getAstNodePath(refValue);\n                return {\n                    $ref: `${targetUri}#${targetPath}`,\n                    $refText\n                };\n            }\n            else {\n                return {\n                    $error: (_b = (_a = value.error) === null || _a === void 0 ? void 0 : _a.message) !== null && _b !== void 0 ? _b : 'Could not resolve reference',\n                    $refText\n                };\n            }\n        }\n        else if ((0,_syntax_tree_js__WEBPACK_IMPORTED_MODULE_1__.isAstNode)(value)) {\n            let astNode = undefined;\n            if (textRegions) {\n                astNode = this.addAstNodeRegionWithAssignmentsTo(Object.assign({}, value));\n                if ((!key || value.$document) && (astNode === null || astNode === void 0 ? void 0 : astNode.$textRegion)) {\n                    // The document URI is added to the root node of the resulting JSON tree\n                    astNode.$textRegion.documentURI = (_c = this.currentDocument) === null || _c === void 0 ? void 0 : _c.uri.toString();\n                }\n            }\n            if (sourceText && !key) {\n                astNode !== null && astNode !== void 0 ? astNode : (astNode = Object.assign({}, value));\n                astNode.$sourceText = (_d = value.$cstNode) === null || _d === void 0 ? void 0 : _d.text;\n            }\n            if (comments) {\n                astNode !== null && astNode !== void 0 ? astNode : (astNode = Object.assign({}, value));\n                const comment = this.commentProvider.getComment(value);\n                if (comment) {\n                    astNode.$comment = comment.replace(/\\r/g, '');\n                }\n            }\n            return astNode !== null && astNode !== void 0 ? astNode : value;\n        }\n        else {\n            return value;\n        }\n    }\n    addAstNodeRegionWithAssignmentsTo(node) {\n        const createDocumentSegment = cstNode => ({\n            offset: cstNode.offset,\n            end: cstNode.end,\n            length: cstNode.length,\n            range: cstNode.range,\n        });\n        if (node.$cstNode) {\n            const textRegion = node.$textRegion = createDocumentSegment(node.$cstNode);\n            const assignments = textRegion.assignments = {};\n            Object.keys(node).filter(key => !key.startsWith('$')).forEach(key => {\n                const propertyAssignments = (0,_utils_grammar_utils_js__WEBPACK_IMPORTED_MODULE_2__.findNodesForProperty)(node.$cstNode, key).map(createDocumentSegment);\n                if (propertyAssignments.length !== 0) {\n                    assignments[key] = propertyAssignments;\n                }\n            });\n            return node;\n        }\n        return undefined;\n    }\n    linkNode(node, root, options, container, containerProperty, containerIndex) {\n        for (const [propertyName, item] of Object.entries(node)) {\n            if (Array.isArray(item)) {\n                for (let index = 0; index < item.length; index++) {\n                    const element = item[index];\n                    if (isIntermediateReference(element)) {\n                        item[index] = this.reviveReference(node, propertyName, root, element, options);\n                    }\n                    else if ((0,_syntax_tree_js__WEBPACK_IMPORTED_MODULE_1__.isAstNode)(element)) {\n                        this.linkNode(element, root, options, node, propertyName, index);\n                    }\n                }\n            }\n            else if (isIntermediateReference(item)) {\n                node[propertyName] = this.reviveReference(node, propertyName, root, item, options);\n            }\n            else if ((0,_syntax_tree_js__WEBPACK_IMPORTED_MODULE_1__.isAstNode)(item)) {\n                this.linkNode(item, root, options, node, propertyName);\n            }\n        }\n        const mutable = node;\n        mutable.$container = container;\n        mutable.$containerProperty = containerProperty;\n        mutable.$containerIndex = containerIndex;\n    }\n    reviveReference(container, property, root, reference, options) {\n        let refText = reference.$refText;\n        let error = reference.$error;\n        if (reference.$ref) {\n            const ref = this.getRefNode(root, reference.$ref, options.uriConverter);\n            if ((0,_syntax_tree_js__WEBPACK_IMPORTED_MODULE_1__.isAstNode)(ref)) {\n                if (!refText) {\n                    refText = this.nameProvider.getName(ref);\n                }\n                return {\n                    $refText: refText !== null && refText !== void 0 ? refText : '',\n                    ref\n                };\n            }\n            else {\n                error = ref;\n            }\n        }\n        if (error) {\n            const ref = {\n                $refText: refText !== null && refText !== void 0 ? refText : ''\n            };\n            ref.error = {\n                container,\n                property,\n                message: error,\n                reference: ref\n            };\n            return ref;\n        }\n        else {\n            return undefined;\n        }\n    }\n    getRefNode(root, uri, uriConverter) {\n        try {\n            const fragmentIndex = uri.indexOf('#');\n            if (fragmentIndex === 0) {\n                const node = this.astNodeLocator.getAstNode(root, uri.substring(1));\n                if (!node) {\n                    return 'Could not resolve path: ' + uri;\n                }\n                return node;\n            }\n            if (fragmentIndex < 0) {\n                const documentUri = uriConverter ? uriConverter(uri) : vscode_uri__WEBPACK_IMPORTED_MODULE_3__.URI.parse(uri);\n                const document = this.langiumDocuments.getDocument(documentUri);\n                if (!document) {\n                    return 'Could not find document for URI: ' + uri;\n                }\n                return document.parseResult.value;\n            }\n            const documentUri = uriConverter ? uriConverter(uri.substring(0, fragmentIndex)) : vscode_uri__WEBPACK_IMPORTED_MODULE_3__.URI.parse(uri.substring(0, fragmentIndex));\n            const document = this.langiumDocuments.getDocument(documentUri);\n            if (!document) {\n                return 'Could not find document for URI: ' + uri;\n            }\n            if (fragmentIndex === uri.length - 1) {\n                return document.parseResult.value;\n            }\n            const node = this.astNodeLocator.getAstNode(document.parseResult.value, uri.substring(fragmentIndex + 1));\n            if (!node) {\n                return 'Could not resolve URI: ' + uri;\n            }\n            return node;\n        }\n        catch (err) {\n            return String(err);\n        }\n    }\n}\n//# sourceMappingURL=json-serializer.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2xhbmdpdW1AMy4zLjEvbm9kZV9tb2R1bGVzL2xhbmdpdW0vbGliL3NlcmlhbGl6ZXIvanNvbi1zZXJpYWxpemVyLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDaUM7QUFDMEI7QUFDUDtBQUNhO0FBQzFEO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1DQUFtQyxnRUFBVztBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkIsMERBQTBEO0FBQ3JGO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLDREQUFXO0FBQzVCO0FBQ0E7QUFDQTtBQUNBLHVDQUF1QyxnRUFBVztBQUNsRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLFVBQVUsR0FBRyxXQUFXO0FBQ3JEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLDBEQUFTO0FBQzFCO0FBQ0E7QUFDQSxpRkFBaUY7QUFDakY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEZBQThGO0FBQzlGO0FBQ0E7QUFDQTtBQUNBLDhGQUE4RjtBQUM5RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNENBQTRDLDZFQUFvQjtBQUNoRTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQ0FBb0MscUJBQXFCO0FBQ3pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLDBEQUFTO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLDBEQUFTO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLDBEQUFTO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVFQUF1RSwyQ0FBRztBQUMxRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrRkFBK0YsMkNBQUc7QUFDbEc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9Vc2Vycy9ldGhhbmtpbS9OZXN0b3IvbWVkZmV0Y2guanMvbm9kZV9tb2R1bGVzLy5wbnBtL2xhbmdpdW1AMy4zLjEvbm9kZV9tb2R1bGVzL2xhbmdpdW0vbGliL3NlcmlhbGl6ZXIvanNvbi1zZXJpYWxpemVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAqIENvcHlyaWdodCAyMDIxIFR5cGVGb3ggR21iSFxuICogVGhpcyBwcm9ncmFtIGFuZCB0aGUgYWNjb21wYW55aW5nIG1hdGVyaWFscyBhcmUgbWFkZSBhdmFpbGFibGUgdW5kZXIgdGhlXG4gKiB0ZXJtcyBvZiB0aGUgTUlUIExpY2Vuc2UsIHdoaWNoIGlzIGF2YWlsYWJsZSBpbiB0aGUgcHJvamVjdCByb290LlxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbmltcG9ydCB7IFVSSSB9IGZyb20gJ3ZzY29kZS11cmknO1xuaW1wb3J0IHsgaXNBc3ROb2RlLCBpc1JlZmVyZW5jZSB9IGZyb20gJy4uL3N5bnRheC10cmVlLmpzJztcbmltcG9ydCB7IGdldERvY3VtZW50IH0gZnJvbSAnLi4vdXRpbHMvYXN0LXV0aWxzLmpzJztcbmltcG9ydCB7IGZpbmROb2Rlc0ZvclByb3BlcnR5IH0gZnJvbSAnLi4vdXRpbHMvZ3JhbW1hci11dGlscy5qcyc7XG5leHBvcnQgZnVuY3Rpb24gaXNBc3ROb2RlV2l0aENvbW1lbnQobm9kZSkge1xuICAgIHJldHVybiB0eXBlb2Ygbm9kZS4kY29tbWVudCA9PT0gJ3N0cmluZyc7XG59XG5mdW5jdGlvbiBpc0ludGVybWVkaWF0ZVJlZmVyZW5jZShvYmopIHtcbiAgICByZXR1cm4gdHlwZW9mIG9iaiA9PT0gJ29iamVjdCcgJiYgISFvYmogJiYgKCckcmVmJyBpbiBvYmogfHwgJyRlcnJvcicgaW4gb2JqKTtcbn1cbmV4cG9ydCBjbGFzcyBEZWZhdWx0SnNvblNlcmlhbGl6ZXIge1xuICAgIGNvbnN0cnVjdG9yKHNlcnZpY2VzKSB7XG4gICAgICAgIC8qKiBUaGUgc2V0IG9mIEFzdE5vZGUgcHJvcGVydGllcyB0byBiZSBpZ25vcmVkIGJ5IHRoZSBzZXJpYWxpemVyLiAqL1xuICAgICAgICB0aGlzLmlnbm9yZVByb3BlcnRpZXMgPSBuZXcgU2V0KFsnJGNvbnRhaW5lcicsICckY29udGFpbmVyUHJvcGVydHknLCAnJGNvbnRhaW5lckluZGV4JywgJyRkb2N1bWVudCcsICckY3N0Tm9kZSddKTtcbiAgICAgICAgdGhpcy5sYW5naXVtRG9jdW1lbnRzID0gc2VydmljZXMuc2hhcmVkLndvcmtzcGFjZS5MYW5naXVtRG9jdW1lbnRzO1xuICAgICAgICB0aGlzLmFzdE5vZGVMb2NhdG9yID0gc2VydmljZXMud29ya3NwYWNlLkFzdE5vZGVMb2NhdG9yO1xuICAgICAgICB0aGlzLm5hbWVQcm92aWRlciA9IHNlcnZpY2VzLnJlZmVyZW5jZXMuTmFtZVByb3ZpZGVyO1xuICAgICAgICB0aGlzLmNvbW1lbnRQcm92aWRlciA9IHNlcnZpY2VzLmRvY3VtZW50YXRpb24uQ29tbWVudFByb3ZpZGVyO1xuICAgIH1cbiAgICBzZXJpYWxpemUobm9kZSwgb3B0aW9ucykge1xuICAgICAgICBjb25zdCBzZXJpYWxpemVPcHRpb25zID0gb3B0aW9ucyAhPT0gbnVsbCAmJiBvcHRpb25zICE9PSB2b2lkIDAgPyBvcHRpb25zIDoge307XG4gICAgICAgIGNvbnN0IHNwZWNpZmljUmVwbGFjZXIgPSBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMucmVwbGFjZXI7XG4gICAgICAgIGNvbnN0IGRlZmF1bHRSZXBsYWNlciA9IChrZXksIHZhbHVlKSA9PiB0aGlzLnJlcGxhY2VyKGtleSwgdmFsdWUsIHNlcmlhbGl6ZU9wdGlvbnMpO1xuICAgICAgICBjb25zdCByZXBsYWNlciA9IHNwZWNpZmljUmVwbGFjZXIgPyAoa2V5LCB2YWx1ZSkgPT4gc3BlY2lmaWNSZXBsYWNlcihrZXksIHZhbHVlLCBkZWZhdWx0UmVwbGFjZXIpIDogZGVmYXVsdFJlcGxhY2VyO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdGhpcy5jdXJyZW50RG9jdW1lbnQgPSBnZXREb2N1bWVudChub2RlKTtcbiAgICAgICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShub2RlLCByZXBsYWNlciwgb3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLnNwYWNlKTtcbiAgICAgICAgfVxuICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgIHRoaXMuY3VycmVudERvY3VtZW50ID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgfVxuICAgIGRlc2VyaWFsaXplKGNvbnRlbnQsIG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgZGVzZXJpYWxpemVPcHRpb25zID0gb3B0aW9ucyAhPT0gbnVsbCAmJiBvcHRpb25zICE9PSB2b2lkIDAgPyBvcHRpb25zIDoge307XG4gICAgICAgIGNvbnN0IHJvb3QgPSBKU09OLnBhcnNlKGNvbnRlbnQpO1xuICAgICAgICB0aGlzLmxpbmtOb2RlKHJvb3QsIHJvb3QsIGRlc2VyaWFsaXplT3B0aW9ucyk7XG4gICAgICAgIHJldHVybiByb290O1xuICAgIH1cbiAgICByZXBsYWNlcihrZXksIHZhbHVlLCB7IHJlZlRleHQsIHNvdXJjZVRleHQsIHRleHRSZWdpb25zLCBjb21tZW50cywgdXJpQ29udmVydGVyIH0pIHtcbiAgICAgICAgdmFyIF9hLCBfYiwgX2MsIF9kO1xuICAgICAgICBpZiAodGhpcy5pZ25vcmVQcm9wZXJ0aWVzLmhhcyhrZXkpKSB7XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGlzUmVmZXJlbmNlKHZhbHVlKSkge1xuICAgICAgICAgICAgY29uc3QgcmVmVmFsdWUgPSB2YWx1ZS5yZWY7XG4gICAgICAgICAgICBjb25zdCAkcmVmVGV4dCA9IHJlZlRleHQgPyB2YWx1ZS4kcmVmVGV4dCA6IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIGlmIChyZWZWYWx1ZSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHRhcmdldERvY3VtZW50ID0gZ2V0RG9jdW1lbnQocmVmVmFsdWUpO1xuICAgICAgICAgICAgICAgIGxldCB0YXJnZXRVcmkgPSAnJztcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5jdXJyZW50RG9jdW1lbnQgJiYgdGhpcy5jdXJyZW50RG9jdW1lbnQgIT09IHRhcmdldERvY3VtZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh1cmlDb252ZXJ0ZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldFVyaSA9IHVyaUNvbnZlcnRlcih0YXJnZXREb2N1bWVudC51cmksIHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldFVyaSA9IHRhcmdldERvY3VtZW50LnVyaS50b1N0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IHRhcmdldFBhdGggPSB0aGlzLmFzdE5vZGVMb2NhdG9yLmdldEFzdE5vZGVQYXRoKHJlZlZhbHVlKTtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAkcmVmOiBgJHt0YXJnZXRVcml9IyR7dGFyZ2V0UGF0aH1gLFxuICAgICAgICAgICAgICAgICAgICAkcmVmVGV4dFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAkZXJyb3I6IChfYiA9IChfYSA9IHZhbHVlLmVycm9yKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EubWVzc2FnZSkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogJ0NvdWxkIG5vdCByZXNvbHZlIHJlZmVyZW5jZScsXG4gICAgICAgICAgICAgICAgICAgICRyZWZUZXh0XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChpc0FzdE5vZGUodmFsdWUpKSB7XG4gICAgICAgICAgICBsZXQgYXN0Tm9kZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIGlmICh0ZXh0UmVnaW9ucykge1xuICAgICAgICAgICAgICAgIGFzdE5vZGUgPSB0aGlzLmFkZEFzdE5vZGVSZWdpb25XaXRoQXNzaWdubWVudHNUbyhPYmplY3QuYXNzaWduKHt9LCB2YWx1ZSkpO1xuICAgICAgICAgICAgICAgIGlmICgoIWtleSB8fCB2YWx1ZS4kZG9jdW1lbnQpICYmIChhc3ROb2RlID09PSBudWxsIHx8IGFzdE5vZGUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGFzdE5vZGUuJHRleHRSZWdpb24pKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFRoZSBkb2N1bWVudCBVUkkgaXMgYWRkZWQgdG8gdGhlIHJvb3Qgbm9kZSBvZiB0aGUgcmVzdWx0aW5nIEpTT04gdHJlZVxuICAgICAgICAgICAgICAgICAgICBhc3ROb2RlLiR0ZXh0UmVnaW9uLmRvY3VtZW50VVJJID0gKF9jID0gdGhpcy5jdXJyZW50RG9jdW1lbnQpID09PSBudWxsIHx8IF9jID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYy51cmkudG9TdHJpbmcoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoc291cmNlVGV4dCAmJiAha2V5KSB7XG4gICAgICAgICAgICAgICAgYXN0Tm9kZSAhPT0gbnVsbCAmJiBhc3ROb2RlICE9PSB2b2lkIDAgPyBhc3ROb2RlIDogKGFzdE5vZGUgPSBPYmplY3QuYXNzaWduKHt9LCB2YWx1ZSkpO1xuICAgICAgICAgICAgICAgIGFzdE5vZGUuJHNvdXJjZVRleHQgPSAoX2QgPSB2YWx1ZS4kY3N0Tm9kZSkgPT09IG51bGwgfHwgX2QgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9kLnRleHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoY29tbWVudHMpIHtcbiAgICAgICAgICAgICAgICBhc3ROb2RlICE9PSBudWxsICYmIGFzdE5vZGUgIT09IHZvaWQgMCA/IGFzdE5vZGUgOiAoYXN0Tm9kZSA9IE9iamVjdC5hc3NpZ24oe30sIHZhbHVlKSk7XG4gICAgICAgICAgICAgICAgY29uc3QgY29tbWVudCA9IHRoaXMuY29tbWVudFByb3ZpZGVyLmdldENvbW1lbnQodmFsdWUpO1xuICAgICAgICAgICAgICAgIGlmIChjb21tZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIGFzdE5vZGUuJGNvbW1lbnQgPSBjb21tZW50LnJlcGxhY2UoL1xcci9nLCAnJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGFzdE5vZGUgIT09IG51bGwgJiYgYXN0Tm9kZSAhPT0gdm9pZCAwID8gYXN0Tm9kZSA6IHZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICB9XG4gICAgfVxuICAgIGFkZEFzdE5vZGVSZWdpb25XaXRoQXNzaWdubWVudHNUbyhub2RlKSB7XG4gICAgICAgIGNvbnN0IGNyZWF0ZURvY3VtZW50U2VnbWVudCA9IGNzdE5vZGUgPT4gKHtcbiAgICAgICAgICAgIG9mZnNldDogY3N0Tm9kZS5vZmZzZXQsXG4gICAgICAgICAgICBlbmQ6IGNzdE5vZGUuZW5kLFxuICAgICAgICAgICAgbGVuZ3RoOiBjc3ROb2RlLmxlbmd0aCxcbiAgICAgICAgICAgIHJhbmdlOiBjc3ROb2RlLnJhbmdlLFxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKG5vZGUuJGNzdE5vZGUpIHtcbiAgICAgICAgICAgIGNvbnN0IHRleHRSZWdpb24gPSBub2RlLiR0ZXh0UmVnaW9uID0gY3JlYXRlRG9jdW1lbnRTZWdtZW50KG5vZGUuJGNzdE5vZGUpO1xuICAgICAgICAgICAgY29uc3QgYXNzaWdubWVudHMgPSB0ZXh0UmVnaW9uLmFzc2lnbm1lbnRzID0ge307XG4gICAgICAgICAgICBPYmplY3Qua2V5cyhub2RlKS5maWx0ZXIoa2V5ID0+ICFrZXkuc3RhcnRzV2l0aCgnJCcpKS5mb3JFYWNoKGtleSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgcHJvcGVydHlBc3NpZ25tZW50cyA9IGZpbmROb2Rlc0ZvclByb3BlcnR5KG5vZGUuJGNzdE5vZGUsIGtleSkubWFwKGNyZWF0ZURvY3VtZW50U2VnbWVudCk7XG4gICAgICAgICAgICAgICAgaWYgKHByb3BlcnR5QXNzaWdubWVudHMubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGFzc2lnbm1lbnRzW2tleV0gPSBwcm9wZXJ0eUFzc2lnbm1lbnRzO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIG5vZGU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgbGlua05vZGUobm9kZSwgcm9vdCwgb3B0aW9ucywgY29udGFpbmVyLCBjb250YWluZXJQcm9wZXJ0eSwgY29udGFpbmVySW5kZXgpIHtcbiAgICAgICAgZm9yIChjb25zdCBbcHJvcGVydHlOYW1lLCBpdGVtXSBvZiBPYmplY3QuZW50cmllcyhub2RlKSkge1xuICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoaXRlbSkpIHtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgaXRlbS5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZWxlbWVudCA9IGl0ZW1baW5kZXhdO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaXNJbnRlcm1lZGlhdGVSZWZlcmVuY2UoZWxlbWVudCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1baW5kZXhdID0gdGhpcy5yZXZpdmVSZWZlcmVuY2Uobm9kZSwgcHJvcGVydHlOYW1lLCByb290LCBlbGVtZW50LCBvcHRpb25zKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChpc0FzdE5vZGUoZWxlbWVudCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubGlua05vZGUoZWxlbWVudCwgcm9vdCwgb3B0aW9ucywgbm9kZSwgcHJvcGVydHlOYW1lLCBpbmRleCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChpc0ludGVybWVkaWF0ZVJlZmVyZW5jZShpdGVtKSkge1xuICAgICAgICAgICAgICAgIG5vZGVbcHJvcGVydHlOYW1lXSA9IHRoaXMucmV2aXZlUmVmZXJlbmNlKG5vZGUsIHByb3BlcnR5TmFtZSwgcm9vdCwgaXRlbSwgb3B0aW9ucyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChpc0FzdE5vZGUoaXRlbSkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmxpbmtOb2RlKGl0ZW0sIHJvb3QsIG9wdGlvbnMsIG5vZGUsIHByb3BlcnR5TmFtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbXV0YWJsZSA9IG5vZGU7XG4gICAgICAgIG11dGFibGUuJGNvbnRhaW5lciA9IGNvbnRhaW5lcjtcbiAgICAgICAgbXV0YWJsZS4kY29udGFpbmVyUHJvcGVydHkgPSBjb250YWluZXJQcm9wZXJ0eTtcbiAgICAgICAgbXV0YWJsZS4kY29udGFpbmVySW5kZXggPSBjb250YWluZXJJbmRleDtcbiAgICB9XG4gICAgcmV2aXZlUmVmZXJlbmNlKGNvbnRhaW5lciwgcHJvcGVydHksIHJvb3QsIHJlZmVyZW5jZSwgb3B0aW9ucykge1xuICAgICAgICBsZXQgcmVmVGV4dCA9IHJlZmVyZW5jZS4kcmVmVGV4dDtcbiAgICAgICAgbGV0IGVycm9yID0gcmVmZXJlbmNlLiRlcnJvcjtcbiAgICAgICAgaWYgKHJlZmVyZW5jZS4kcmVmKSB7XG4gICAgICAgICAgICBjb25zdCByZWYgPSB0aGlzLmdldFJlZk5vZGUocm9vdCwgcmVmZXJlbmNlLiRyZWYsIG9wdGlvbnMudXJpQ29udmVydGVyKTtcbiAgICAgICAgICAgIGlmIChpc0FzdE5vZGUocmVmKSkge1xuICAgICAgICAgICAgICAgIGlmICghcmVmVGV4dCkge1xuICAgICAgICAgICAgICAgICAgICByZWZUZXh0ID0gdGhpcy5uYW1lUHJvdmlkZXIuZ2V0TmFtZShyZWYpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAkcmVmVGV4dDogcmVmVGV4dCAhPT0gbnVsbCAmJiByZWZUZXh0ICE9PSB2b2lkIDAgPyByZWZUZXh0IDogJycsXG4gICAgICAgICAgICAgICAgICAgIHJlZlxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBlcnJvciA9IHJlZjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICAgIGNvbnN0IHJlZiA9IHtcbiAgICAgICAgICAgICAgICAkcmVmVGV4dDogcmVmVGV4dCAhPT0gbnVsbCAmJiByZWZUZXh0ICE9PSB2b2lkIDAgPyByZWZUZXh0IDogJydcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICByZWYuZXJyb3IgPSB7XG4gICAgICAgICAgICAgICAgY29udGFpbmVyLFxuICAgICAgICAgICAgICAgIHByb3BlcnR5LFxuICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGVycm9yLFxuICAgICAgICAgICAgICAgIHJlZmVyZW5jZTogcmVmXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcmV0dXJuIHJlZjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2V0UmVmTm9kZShyb290LCB1cmksIHVyaUNvbnZlcnRlcikge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgZnJhZ21lbnRJbmRleCA9IHVyaS5pbmRleE9mKCcjJyk7XG4gICAgICAgICAgICBpZiAoZnJhZ21lbnRJbmRleCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IG5vZGUgPSB0aGlzLmFzdE5vZGVMb2NhdG9yLmdldEFzdE5vZGUocm9vdCwgdXJpLnN1YnN0cmluZygxKSk7XG4gICAgICAgICAgICAgICAgaWYgKCFub2RlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnQ291bGQgbm90IHJlc29sdmUgcGF0aDogJyArIHVyaTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5vZGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZnJhZ21lbnRJbmRleCA8IDApIHtcbiAgICAgICAgICAgICAgICBjb25zdCBkb2N1bWVudFVyaSA9IHVyaUNvbnZlcnRlciA/IHVyaUNvbnZlcnRlcih1cmkpIDogVVJJLnBhcnNlKHVyaSk7XG4gICAgICAgICAgICAgICAgY29uc3QgZG9jdW1lbnQgPSB0aGlzLmxhbmdpdW1Eb2N1bWVudHMuZ2V0RG9jdW1lbnQoZG9jdW1lbnRVcmkpO1xuICAgICAgICAgICAgICAgIGlmICghZG9jdW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdDb3VsZCBub3QgZmluZCBkb2N1bWVudCBmb3IgVVJJOiAnICsgdXJpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gZG9jdW1lbnQucGFyc2VSZXN1bHQudmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBkb2N1bWVudFVyaSA9IHVyaUNvbnZlcnRlciA/IHVyaUNvbnZlcnRlcih1cmkuc3Vic3RyaW5nKDAsIGZyYWdtZW50SW5kZXgpKSA6IFVSSS5wYXJzZSh1cmkuc3Vic3RyaW5nKDAsIGZyYWdtZW50SW5kZXgpKTtcbiAgICAgICAgICAgIGNvbnN0IGRvY3VtZW50ID0gdGhpcy5sYW5naXVtRG9jdW1lbnRzLmdldERvY3VtZW50KGRvY3VtZW50VXJpKTtcbiAgICAgICAgICAgIGlmICghZG9jdW1lbnQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ0NvdWxkIG5vdCBmaW5kIGRvY3VtZW50IGZvciBVUkk6ICcgKyB1cmk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZnJhZ21lbnRJbmRleCA9PT0gdXJpLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZG9jdW1lbnQucGFyc2VSZXN1bHQudmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBub2RlID0gdGhpcy5hc3ROb2RlTG9jYXRvci5nZXRBc3ROb2RlKGRvY3VtZW50LnBhcnNlUmVzdWx0LnZhbHVlLCB1cmkuc3Vic3RyaW5nKGZyYWdtZW50SW5kZXggKyAxKSk7XG4gICAgICAgICAgICBpZiAoIW5vZGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ0NvdWxkIG5vdCByZXNvbHZlIFVSSTogJyArIHVyaTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBub2RlO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIHJldHVybiBTdHJpbmcoZXJyKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWpzb24tc2VyaWFsaXplci5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/serializer/json-serializer.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/service-registry.js":
/*!****************************************************************************************!*\
  !*** ../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/service-registry.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DefaultServiceRegistry: () => (/* binding */ DefaultServiceRegistry)\n/* harmony export */ });\n/* harmony import */ var _utils_uri_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils/uri-utils.js */ \"(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/uri-utils.js\");\n/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\n/**\n * Generic registry for Langium services, but capable of being used with extending service sets as well (such as the lsp-complete LangiumCoreServices set)\n */\nclass DefaultServiceRegistry {\n    /**\n     * @deprecated Use the new `fileExtensionMap` (or `languageIdMap`) property instead.\n     */\n    get map() {\n        return this.fileExtensionMap;\n    }\n    constructor(services) {\n        this.languageIdMap = new Map();\n        this.fileExtensionMap = new Map();\n        this.textDocuments = services === null || services === void 0 ? void 0 : services.workspace.TextDocuments;\n    }\n    register(language) {\n        const data = language.LanguageMetaData;\n        for (const ext of data.fileExtensions) {\n            if (this.fileExtensionMap.has(ext)) {\n                console.warn(`The file extension ${ext} is used by multiple languages. It is now assigned to '${data.languageId}'.`);\n            }\n            this.fileExtensionMap.set(ext, language);\n        }\n        this.languageIdMap.set(data.languageId, language);\n        if (this.languageIdMap.size === 1) {\n            this.singleton = language;\n        }\n        else {\n            this.singleton = undefined;\n        }\n    }\n    getServices(uri) {\n        var _a, _b;\n        if (this.singleton !== undefined) {\n            return this.singleton;\n        }\n        if (this.languageIdMap.size === 0) {\n            throw new Error('The service registry is empty. Use `register` to register the services of a language.');\n        }\n        const languageId = (_b = (_a = this.textDocuments) === null || _a === void 0 ? void 0 : _a.get(uri)) === null || _b === void 0 ? void 0 : _b.languageId;\n        if (languageId !== undefined) {\n            const services = this.languageIdMap.get(languageId);\n            if (services) {\n                return services;\n            }\n        }\n        const ext = _utils_uri_utils_js__WEBPACK_IMPORTED_MODULE_0__.UriUtils.extname(uri);\n        const services = this.fileExtensionMap.get(ext);\n        if (!services) {\n            if (languageId) {\n                throw new Error(`The service registry contains no services for the extension '${ext}' for language '${languageId}'.`);\n            }\n            else {\n                throw new Error(`The service registry contains no services for the extension '${ext}'.`);\n            }\n        }\n        return services;\n    }\n    hasServices(uri) {\n        try {\n            this.getServices(uri);\n            return true;\n        }\n        catch (_a) {\n            return false;\n        }\n    }\n    get all() {\n        return Array.from(this.languageIdMap.values());\n    }\n}\n//# sourceMappingURL=service-registry.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2xhbmdpdW1AMy4zLjEvbm9kZV9tb2R1bGVzL2xhbmdpdW0vbGliL3NlcnZpY2UtcmVnaXN0cnkuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ2dEO0FBQ2hEO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbURBQW1ELEtBQUssd0RBQXdELGdCQUFnQjtBQUNoSTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLHlEQUFRO0FBQzVCO0FBQ0E7QUFDQTtBQUNBLGdHQUFnRyxJQUFJLGtCQUFrQixXQUFXO0FBQ2pJO0FBQ0E7QUFDQSxnR0FBZ0csSUFBSTtBQUNwRztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9Vc2Vycy9ldGhhbmtpbS9OZXN0b3IvbWVkZmV0Y2guanMvbm9kZV9tb2R1bGVzLy5wbnBtL2xhbmdpdW1AMy4zLjEvbm9kZV9tb2R1bGVzL2xhbmdpdW0vbGliL3NlcnZpY2UtcmVnaXN0cnkuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuICogQ29weXJpZ2h0IDIwMjEgVHlwZUZveCBHbWJIXG4gKiBUaGlzIHByb2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzIGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0aGVcbiAqIHRlcm1zIG9mIHRoZSBNSVQgTGljZW5zZSwgd2hpY2ggaXMgYXZhaWxhYmxlIGluIHRoZSBwcm9qZWN0IHJvb3QuXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuaW1wb3J0IHsgVXJpVXRpbHMgfSBmcm9tICcuL3V0aWxzL3VyaS11dGlscy5qcyc7XG4vKipcbiAqIEdlbmVyaWMgcmVnaXN0cnkgZm9yIExhbmdpdW0gc2VydmljZXMsIGJ1dCBjYXBhYmxlIG9mIGJlaW5nIHVzZWQgd2l0aCBleHRlbmRpbmcgc2VydmljZSBzZXRzIGFzIHdlbGwgKHN1Y2ggYXMgdGhlIGxzcC1jb21wbGV0ZSBMYW5naXVtQ29yZVNlcnZpY2VzIHNldClcbiAqL1xuZXhwb3J0IGNsYXNzIERlZmF1bHRTZXJ2aWNlUmVnaXN0cnkge1xuICAgIC8qKlxuICAgICAqIEBkZXByZWNhdGVkIFVzZSB0aGUgbmV3IGBmaWxlRXh0ZW5zaW9uTWFwYCAob3IgYGxhbmd1YWdlSWRNYXBgKSBwcm9wZXJ0eSBpbnN0ZWFkLlxuICAgICAqL1xuICAgIGdldCBtYXAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmZpbGVFeHRlbnNpb25NYXA7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKHNlcnZpY2VzKSB7XG4gICAgICAgIHRoaXMubGFuZ3VhZ2VJZE1hcCA9IG5ldyBNYXAoKTtcbiAgICAgICAgdGhpcy5maWxlRXh0ZW5zaW9uTWFwID0gbmV3IE1hcCgpO1xuICAgICAgICB0aGlzLnRleHREb2N1bWVudHMgPSBzZXJ2aWNlcyA9PT0gbnVsbCB8fCBzZXJ2aWNlcyA9PT0gdm9pZCAwID8gdm9pZCAwIDogc2VydmljZXMud29ya3NwYWNlLlRleHREb2N1bWVudHM7XG4gICAgfVxuICAgIHJlZ2lzdGVyKGxhbmd1YWdlKSB7XG4gICAgICAgIGNvbnN0IGRhdGEgPSBsYW5ndWFnZS5MYW5ndWFnZU1ldGFEYXRhO1xuICAgICAgICBmb3IgKGNvbnN0IGV4dCBvZiBkYXRhLmZpbGVFeHRlbnNpb25zKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5maWxlRXh0ZW5zaW9uTWFwLmhhcyhleHQpKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKGBUaGUgZmlsZSBleHRlbnNpb24gJHtleHR9IGlzIHVzZWQgYnkgbXVsdGlwbGUgbGFuZ3VhZ2VzLiBJdCBpcyBub3cgYXNzaWduZWQgdG8gJyR7ZGF0YS5sYW5ndWFnZUlkfScuYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmZpbGVFeHRlbnNpb25NYXAuc2V0KGV4dCwgbGFuZ3VhZ2UpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubGFuZ3VhZ2VJZE1hcC5zZXQoZGF0YS5sYW5ndWFnZUlkLCBsYW5ndWFnZSk7XG4gICAgICAgIGlmICh0aGlzLmxhbmd1YWdlSWRNYXAuc2l6ZSA9PT0gMSkge1xuICAgICAgICAgICAgdGhpcy5zaW5nbGV0b24gPSBsYW5ndWFnZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuc2luZ2xldG9uID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgfVxuICAgIGdldFNlcnZpY2VzKHVyaSkge1xuICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICBpZiAodGhpcy5zaW5nbGV0b24gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2luZ2xldG9uO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmxhbmd1YWdlSWRNYXAuc2l6ZSA9PT0gMCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdUaGUgc2VydmljZSByZWdpc3RyeSBpcyBlbXB0eS4gVXNlIGByZWdpc3RlcmAgdG8gcmVnaXN0ZXIgdGhlIHNlcnZpY2VzIG9mIGEgbGFuZ3VhZ2UuJyk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbGFuZ3VhZ2VJZCA9IChfYiA9IChfYSA9IHRoaXMudGV4dERvY3VtZW50cykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmdldCh1cmkpKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IubGFuZ3VhZ2VJZDtcbiAgICAgICAgaWYgKGxhbmd1YWdlSWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgY29uc3Qgc2VydmljZXMgPSB0aGlzLmxhbmd1YWdlSWRNYXAuZ2V0KGxhbmd1YWdlSWQpO1xuICAgICAgICAgICAgaWYgKHNlcnZpY2VzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHNlcnZpY2VzO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGV4dCA9IFVyaVV0aWxzLmV4dG5hbWUodXJpKTtcbiAgICAgICAgY29uc3Qgc2VydmljZXMgPSB0aGlzLmZpbGVFeHRlbnNpb25NYXAuZ2V0KGV4dCk7XG4gICAgICAgIGlmICghc2VydmljZXMpIHtcbiAgICAgICAgICAgIGlmIChsYW5ndWFnZUlkKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBUaGUgc2VydmljZSByZWdpc3RyeSBjb250YWlucyBubyBzZXJ2aWNlcyBmb3IgdGhlIGV4dGVuc2lvbiAnJHtleHR9JyBmb3IgbGFuZ3VhZ2UgJyR7bGFuZ3VhZ2VJZH0nLmApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBUaGUgc2VydmljZSByZWdpc3RyeSBjb250YWlucyBubyBzZXJ2aWNlcyBmb3IgdGhlIGV4dGVuc2lvbiAnJHtleHR9Jy5gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc2VydmljZXM7XG4gICAgfVxuICAgIGhhc1NlcnZpY2VzKHVyaSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdGhpcy5nZXRTZXJ2aWNlcyh1cmkpO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKF9hKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2V0IGFsbCgpIHtcbiAgICAgICAgcmV0dXJuIEFycmF5LmZyb20odGhpcy5sYW5ndWFnZUlkTWFwLnZhbHVlcygpKTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zZXJ2aWNlLXJlZ2lzdHJ5LmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/service-registry.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/syntax-tree.js":
/*!***********************************************************************************!*\
  !*** ../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/syntax-tree.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AbstractAstReflection: () => (/* binding */ AbstractAstReflection),\n/* harmony export */   isAstNode: () => (/* binding */ isAstNode),\n/* harmony export */   isAstNodeDescription: () => (/* binding */ isAstNodeDescription),\n/* harmony export */   isCompositeCstNode: () => (/* binding */ isCompositeCstNode),\n/* harmony export */   isLeafCstNode: () => (/* binding */ isLeafCstNode),\n/* harmony export */   isLinkingError: () => (/* binding */ isLinkingError),\n/* harmony export */   isReference: () => (/* binding */ isReference),\n/* harmony export */   isRootCstNode: () => (/* binding */ isRootCstNode)\n/* harmony export */ });\n/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\nfunction isAstNode(obj) {\n    return typeof obj === 'object' && obj !== null && typeof obj.$type === 'string';\n}\nfunction isReference(obj) {\n    return typeof obj === 'object' && obj !== null && typeof obj.$refText === 'string';\n}\nfunction isAstNodeDescription(obj) {\n    return typeof obj === 'object' && obj !== null\n        && typeof obj.name === 'string'\n        && typeof obj.type === 'string'\n        && typeof obj.path === 'string';\n}\nfunction isLinkingError(obj) {\n    return typeof obj === 'object' && obj !== null\n        && isAstNode(obj.container)\n        && isReference(obj.reference)\n        && typeof obj.message === 'string';\n}\n/**\n * An abstract implementation of the {@link AstReflection} interface.\n * Serves to cache subtype computation results to improve performance throughout different parts of Langium.\n */\nclass AbstractAstReflection {\n    constructor() {\n        this.subtypes = {};\n        this.allSubtypes = {};\n    }\n    isInstance(node, type) {\n        return isAstNode(node) && this.isSubtype(node.$type, type);\n    }\n    isSubtype(subtype, supertype) {\n        if (subtype === supertype) {\n            return true;\n        }\n        let nested = this.subtypes[subtype];\n        if (!nested) {\n            nested = this.subtypes[subtype] = {};\n        }\n        const existing = nested[supertype];\n        if (existing !== undefined) {\n            return existing;\n        }\n        else {\n            const result = this.computeIsSubtype(subtype, supertype);\n            nested[supertype] = result;\n            return result;\n        }\n    }\n    getAllSubTypes(type) {\n        const existing = this.allSubtypes[type];\n        if (existing) {\n            return existing;\n        }\n        else {\n            const allTypes = this.getAllTypes();\n            const types = [];\n            for (const possibleSubType of allTypes) {\n                if (this.isSubtype(possibleSubType, type)) {\n                    types.push(possibleSubType);\n                }\n            }\n            this.allSubtypes[type] = types;\n            return types;\n        }\n    }\n}\nfunction isCompositeCstNode(node) {\n    return typeof node === 'object' && node !== null && Array.isArray(node.content);\n}\nfunction isLeafCstNode(node) {\n    return typeof node === 'object' && node !== null && typeof node.tokenType === 'object';\n}\nfunction isRootCstNode(node) {\n    return isCompositeCstNode(node) && typeof node.fullText === 'string';\n}\n//# sourceMappingURL=syntax-tree.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2xhbmdpdW1AMy4zLjEvbm9kZV9tb2R1bGVzL2xhbmdpdW0vbGliL3N5bnRheC10cmVlLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0NBQXNDLHFCQUFxQjtBQUMzRDtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvZXRoYW5raW0vTmVzdG9yL21lZGZldGNoLmpzL25vZGVfbW9kdWxlcy8ucG5wbS9sYW5naXVtQDMuMy4xL25vZGVfbW9kdWxlcy9sYW5naXVtL2xpYi9zeW50YXgtdHJlZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gKiBDb3B5cmlnaHQgMjAyMSBUeXBlRm94IEdtYkhcbiAqIFRoaXMgcHJvZ3JhbSBhbmQgdGhlIGFjY29tcGFueWluZyBtYXRlcmlhbHMgYXJlIG1hZGUgYXZhaWxhYmxlIHVuZGVyIHRoZVxuICogdGVybXMgb2YgdGhlIE1JVCBMaWNlbnNlLCB3aGljaCBpcyBhdmFpbGFibGUgaW4gdGhlIHByb2plY3Qgcm9vdC5cbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5leHBvcnQgZnVuY3Rpb24gaXNBc3ROb2RlKG9iaikge1xuICAgIHJldHVybiB0eXBlb2Ygb2JqID09PSAnb2JqZWN0JyAmJiBvYmogIT09IG51bGwgJiYgdHlwZW9mIG9iai4kdHlwZSA9PT0gJ3N0cmluZyc7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNSZWZlcmVuY2Uob2JqKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBvYmogPT09ICdvYmplY3QnICYmIG9iaiAhPT0gbnVsbCAmJiB0eXBlb2Ygb2JqLiRyZWZUZXh0ID09PSAnc3RyaW5nJztcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc0FzdE5vZGVEZXNjcmlwdGlvbihvYmopIHtcbiAgICByZXR1cm4gdHlwZW9mIG9iaiA9PT0gJ29iamVjdCcgJiYgb2JqICE9PSBudWxsXG4gICAgICAgICYmIHR5cGVvZiBvYmoubmFtZSA9PT0gJ3N0cmluZydcbiAgICAgICAgJiYgdHlwZW9mIG9iai50eXBlID09PSAnc3RyaW5nJ1xuICAgICAgICAmJiB0eXBlb2Ygb2JqLnBhdGggPT09ICdzdHJpbmcnO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzTGlua2luZ0Vycm9yKG9iaikge1xuICAgIHJldHVybiB0eXBlb2Ygb2JqID09PSAnb2JqZWN0JyAmJiBvYmogIT09IG51bGxcbiAgICAgICAgJiYgaXNBc3ROb2RlKG9iai5jb250YWluZXIpXG4gICAgICAgICYmIGlzUmVmZXJlbmNlKG9iai5yZWZlcmVuY2UpXG4gICAgICAgICYmIHR5cGVvZiBvYmoubWVzc2FnZSA9PT0gJ3N0cmluZyc7XG59XG4vKipcbiAqIEFuIGFic3RyYWN0IGltcGxlbWVudGF0aW9uIG9mIHRoZSB7QGxpbmsgQXN0UmVmbGVjdGlvbn0gaW50ZXJmYWNlLlxuICogU2VydmVzIHRvIGNhY2hlIHN1YnR5cGUgY29tcHV0YXRpb24gcmVzdWx0cyB0byBpbXByb3ZlIHBlcmZvcm1hbmNlIHRocm91Z2hvdXQgZGlmZmVyZW50IHBhcnRzIG9mIExhbmdpdW0uXG4gKi9cbmV4cG9ydCBjbGFzcyBBYnN0cmFjdEFzdFJlZmxlY3Rpb24ge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLnN1YnR5cGVzID0ge307XG4gICAgICAgIHRoaXMuYWxsU3VidHlwZXMgPSB7fTtcbiAgICB9XG4gICAgaXNJbnN0YW5jZShub2RlLCB0eXBlKSB7XG4gICAgICAgIHJldHVybiBpc0FzdE5vZGUobm9kZSkgJiYgdGhpcy5pc1N1YnR5cGUobm9kZS4kdHlwZSwgdHlwZSk7XG4gICAgfVxuICAgIGlzU3VidHlwZShzdWJ0eXBlLCBzdXBlcnR5cGUpIHtcbiAgICAgICAgaWYgKHN1YnR5cGUgPT09IHN1cGVydHlwZSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IG5lc3RlZCA9IHRoaXMuc3VidHlwZXNbc3VidHlwZV07XG4gICAgICAgIGlmICghbmVzdGVkKSB7XG4gICAgICAgICAgICBuZXN0ZWQgPSB0aGlzLnN1YnR5cGVzW3N1YnR5cGVdID0ge307XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZXhpc3RpbmcgPSBuZXN0ZWRbc3VwZXJ0eXBlXTtcbiAgICAgICAgaWYgKGV4aXN0aW5nICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBleGlzdGluZztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMuY29tcHV0ZUlzU3VidHlwZShzdWJ0eXBlLCBzdXBlcnR5cGUpO1xuICAgICAgICAgICAgbmVzdGVkW3N1cGVydHlwZV0gPSByZXN1bHQ7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9XG4gICAgfVxuICAgIGdldEFsbFN1YlR5cGVzKHR5cGUpIHtcbiAgICAgICAgY29uc3QgZXhpc3RpbmcgPSB0aGlzLmFsbFN1YnR5cGVzW3R5cGVdO1xuICAgICAgICBpZiAoZXhpc3RpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBleGlzdGluZztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IGFsbFR5cGVzID0gdGhpcy5nZXRBbGxUeXBlcygpO1xuICAgICAgICAgICAgY29uc3QgdHlwZXMgPSBbXTtcbiAgICAgICAgICAgIGZvciAoY29uc3QgcG9zc2libGVTdWJUeXBlIG9mIGFsbFR5cGVzKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuaXNTdWJ0eXBlKHBvc3NpYmxlU3ViVHlwZSwgdHlwZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZXMucHVzaChwb3NzaWJsZVN1YlR5cGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuYWxsU3VidHlwZXNbdHlwZV0gPSB0eXBlcztcbiAgICAgICAgICAgIHJldHVybiB0eXBlcztcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiBpc0NvbXBvc2l0ZUNzdE5vZGUobm9kZSkge1xuICAgIHJldHVybiB0eXBlb2Ygbm9kZSA9PT0gJ29iamVjdCcgJiYgbm9kZSAhPT0gbnVsbCAmJiBBcnJheS5pc0FycmF5KG5vZGUuY29udGVudCk7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNMZWFmQ3N0Tm9kZShub2RlKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBub2RlID09PSAnb2JqZWN0JyAmJiBub2RlICE9PSBudWxsICYmIHR5cGVvZiBub2RlLnRva2VuVHlwZSA9PT0gJ29iamVjdCc7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNSb290Q3N0Tm9kZShub2RlKSB7XG4gICAgcmV0dXJuIGlzQ29tcG9zaXRlQ3N0Tm9kZShub2RlKSAmJiB0eXBlb2Ygbm9kZS5mdWxsVGV4dCA9PT0gJ3N0cmluZyc7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zeW50YXgtdHJlZS5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/syntax-tree.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/ast-utils.js":
/*!***************************************************************************************!*\
  !*** ../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/ast-utils.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   assignMandatoryProperties: () => (/* binding */ assignMandatoryProperties),\n/* harmony export */   copyAstNode: () => (/* binding */ copyAstNode),\n/* harmony export */   findLocalReferences: () => (/* binding */ findLocalReferences),\n/* harmony export */   findRootNode: () => (/* binding */ findRootNode),\n/* harmony export */   getContainerOfType: () => (/* binding */ getContainerOfType),\n/* harmony export */   getDocument: () => (/* binding */ getDocument),\n/* harmony export */   hasContainerOfType: () => (/* binding */ hasContainerOfType),\n/* harmony export */   linkContentToContainer: () => (/* binding */ linkContentToContainer),\n/* harmony export */   streamAllContents: () => (/* binding */ streamAllContents),\n/* harmony export */   streamAst: () => (/* binding */ streamAst),\n/* harmony export */   streamContents: () => (/* binding */ streamContents),\n/* harmony export */   streamReferences: () => (/* binding */ streamReferences)\n/* harmony export */ });\n/* harmony import */ var _syntax_tree_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../syntax-tree.js */ \"(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/syntax-tree.js\");\n/* harmony import */ var _stream_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./stream.js */ \"(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/stream.js\");\n/* harmony import */ var _cst_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./cst-utils.js */ \"(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/cst-utils.js\");\n/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\n\n\n/**\n * Link the `$container` and other related properties of every AST node that is directly contained\n * in the given `node`.\n */\nfunction linkContentToContainer(node) {\n    for (const [name, value] of Object.entries(node)) {\n        if (!name.startsWith('$')) {\n            if (Array.isArray(value)) {\n                value.forEach((item, index) => {\n                    if ((0,_syntax_tree_js__WEBPACK_IMPORTED_MODULE_0__.isAstNode)(item)) {\n                        item.$container = node;\n                        item.$containerProperty = name;\n                        item.$containerIndex = index;\n                    }\n                });\n            }\n            else if ((0,_syntax_tree_js__WEBPACK_IMPORTED_MODULE_0__.isAstNode)(value)) {\n                value.$container = node;\n                value.$containerProperty = name;\n            }\n        }\n    }\n}\n/**\n * Walk along the hierarchy of containers from the given AST node to the root and return the first\n * node that matches the type predicate. If the start node itself matches, it is returned.\n * If no container matches, `undefined` is returned.\n */\nfunction getContainerOfType(node, typePredicate) {\n    let item = node;\n    while (item) {\n        if (typePredicate(item)) {\n            return item;\n        }\n        item = item.$container;\n    }\n    return undefined;\n}\n/**\n * Walk along the hierarchy of containers from the given AST node to the root and check for existence\n * of a container that matches the given predicate. The start node is included in the checks.\n */\nfunction hasContainerOfType(node, predicate) {\n    let item = node;\n    while (item) {\n        if (predicate(item)) {\n            return true;\n        }\n        item = item.$container;\n    }\n    return false;\n}\n/**\n * Retrieve the document in which the given AST node is contained. A reference to the document is\n * usually held by the root node of the AST.\n *\n * @throws an error if the node is not contained in a document.\n */\nfunction getDocument(node) {\n    const rootNode = findRootNode(node);\n    const result = rootNode.$document;\n    if (!result) {\n        throw new Error('AST node has no document.');\n    }\n    return result;\n}\n/**\n * Returns the root node of the given AST node by following the `$container` references.\n */\nfunction findRootNode(node) {\n    while (node.$container) {\n        node = node.$container;\n    }\n    return node;\n}\n/**\n * Create a stream of all AST nodes that are directly contained in the given node. This includes\n * single-valued as well as multi-valued (array) properties.\n */\nfunction streamContents(node, options) {\n    if (!node) {\n        throw new Error('Node must be an AstNode.');\n    }\n    const range = options === null || options === void 0 ? void 0 : options.range;\n    return new _stream_js__WEBPACK_IMPORTED_MODULE_1__.StreamImpl(() => ({\n        keys: Object.keys(node),\n        keyIndex: 0,\n        arrayIndex: 0\n    }), state => {\n        while (state.keyIndex < state.keys.length) {\n            const property = state.keys[state.keyIndex];\n            if (!property.startsWith('$')) {\n                const value = node[property];\n                if ((0,_syntax_tree_js__WEBPACK_IMPORTED_MODULE_0__.isAstNode)(value)) {\n                    state.keyIndex++;\n                    if (isAstNodeInRange(value, range)) {\n                        return { done: false, value };\n                    }\n                }\n                else if (Array.isArray(value)) {\n                    while (state.arrayIndex < value.length) {\n                        const index = state.arrayIndex++;\n                        const element = value[index];\n                        if ((0,_syntax_tree_js__WEBPACK_IMPORTED_MODULE_0__.isAstNode)(element) && isAstNodeInRange(element, range)) {\n                            return { done: false, value: element };\n                        }\n                    }\n                    state.arrayIndex = 0;\n                }\n            }\n            state.keyIndex++;\n        }\n        return _stream_js__WEBPACK_IMPORTED_MODULE_1__.DONE_RESULT;\n    });\n}\n/**\n * Create a stream of all AST nodes that are directly and indirectly contained in the given root node.\n * This does not include the root node itself.\n */\nfunction streamAllContents(root, options) {\n    if (!root) {\n        throw new Error('Root node must be an AstNode.');\n    }\n    return new _stream_js__WEBPACK_IMPORTED_MODULE_1__.TreeStreamImpl(root, node => streamContents(node, options));\n}\n/**\n * Create a stream of all AST nodes that are directly and indirectly contained in the given root node,\n * including the root node itself.\n */\nfunction streamAst(root, options) {\n    if (!root) {\n        throw new Error('Root node must be an AstNode.');\n    }\n    else if ((options === null || options === void 0 ? void 0 : options.range) && !isAstNodeInRange(root, options.range)) {\n        // Return an empty stream if the root node isn't in range\n        return new _stream_js__WEBPACK_IMPORTED_MODULE_1__.TreeStreamImpl(root, () => []);\n    }\n    return new _stream_js__WEBPACK_IMPORTED_MODULE_1__.TreeStreamImpl(root, node => streamContents(node, options), { includeRoot: true });\n}\nfunction isAstNodeInRange(astNode, range) {\n    var _a;\n    if (!range) {\n        return true;\n    }\n    const nodeRange = (_a = astNode.$cstNode) === null || _a === void 0 ? void 0 : _a.range;\n    if (!nodeRange) {\n        return false;\n    }\n    return (0,_cst_utils_js__WEBPACK_IMPORTED_MODULE_2__.inRange)(nodeRange, range);\n}\n/**\n * Create a stream of all cross-references that are held by the given AST node. This includes\n * single-valued as well as multi-valued (array) properties.\n */\nfunction streamReferences(node) {\n    return new _stream_js__WEBPACK_IMPORTED_MODULE_1__.StreamImpl(() => ({\n        keys: Object.keys(node),\n        keyIndex: 0,\n        arrayIndex: 0\n    }), state => {\n        while (state.keyIndex < state.keys.length) {\n            const property = state.keys[state.keyIndex];\n            if (!property.startsWith('$')) {\n                const value = node[property];\n                if ((0,_syntax_tree_js__WEBPACK_IMPORTED_MODULE_0__.isReference)(value)) {\n                    state.keyIndex++;\n                    return { done: false, value: { reference: value, container: node, property } };\n                }\n                else if (Array.isArray(value)) {\n                    while (state.arrayIndex < value.length) {\n                        const index = state.arrayIndex++;\n                        const element = value[index];\n                        if ((0,_syntax_tree_js__WEBPACK_IMPORTED_MODULE_0__.isReference)(element)) {\n                            return { done: false, value: { reference: element, container: node, property, index } };\n                        }\n                    }\n                    state.arrayIndex = 0;\n                }\n            }\n            state.keyIndex++;\n        }\n        return _stream_js__WEBPACK_IMPORTED_MODULE_1__.DONE_RESULT;\n    });\n}\n/**\n * Returns a Stream of references to the target node from the AstNode tree\n *\n * @param targetNode AstNode we are looking for\n * @param lookup AstNode where we search for references. If not provided, the root node of the document is used as the default value\n */\nfunction findLocalReferences(targetNode, lookup = getDocument(targetNode).parseResult.value) {\n    const refs = [];\n    streamAst(lookup).forEach(node => {\n        streamReferences(node).forEach(refInfo => {\n            if (refInfo.reference.ref === targetNode) {\n                refs.push(refInfo.reference);\n            }\n        });\n    });\n    return (0,_stream_js__WEBPACK_IMPORTED_MODULE_1__.stream)(refs);\n}\n/**\n * Assigns all mandatory AST properties to the specified node.\n *\n * @param reflection Reflection object used to gather mandatory properties for the node.\n * @param node Specified node is modified in place and properties are directly assigned.\n */\nfunction assignMandatoryProperties(reflection, node) {\n    const typeMetaData = reflection.getTypeMetaData(node.$type);\n    const genericNode = node;\n    for (const property of typeMetaData.properties) {\n        // Only set the value if the property is not already set and if it has a default value\n        if (property.defaultValue !== undefined && genericNode[property.name] === undefined) {\n            genericNode[property.name] = copyDefaultValue(property.defaultValue);\n        }\n    }\n}\nfunction copyDefaultValue(propertyType) {\n    if (Array.isArray(propertyType)) {\n        return [...propertyType.map(copyDefaultValue)];\n    }\n    else {\n        return propertyType;\n    }\n}\n/**\n * Creates a deep copy of the specified AST node.\n * The resulting copy will only contain semantically relevant information, such as the `$type` property and AST properties.\n *\n * References are copied without resolved cross reference. The specified function is used to rebuild them.\n */\nfunction copyAstNode(node, buildReference) {\n    const copy = { $type: node.$type };\n    for (const [name, value] of Object.entries(node)) {\n        if (!name.startsWith('$')) {\n            if ((0,_syntax_tree_js__WEBPACK_IMPORTED_MODULE_0__.isAstNode)(value)) {\n                copy[name] = copyAstNode(value, buildReference);\n            }\n            else if ((0,_syntax_tree_js__WEBPACK_IMPORTED_MODULE_0__.isReference)(value)) {\n                copy[name] = buildReference(copy, name, value.$refNode, value.$refText);\n            }\n            else if (Array.isArray(value)) {\n                const copiedArray = [];\n                for (const element of value) {\n                    if ((0,_syntax_tree_js__WEBPACK_IMPORTED_MODULE_0__.isAstNode)(element)) {\n                        copiedArray.push(copyAstNode(element, buildReference));\n                    }\n                    else if ((0,_syntax_tree_js__WEBPACK_IMPORTED_MODULE_0__.isReference)(element)) {\n                        copiedArray.push(buildReference(copy, name, element.$refNode, element.$refText));\n                    }\n                    else {\n                        copiedArray.push(element);\n                    }\n                }\n                copy[name] = copiedArray;\n            }\n            else {\n                copy[name] = value;\n            }\n        }\n    }\n    linkContentToContainer(copy);\n    return copy;\n}\n//# sourceMappingURL=ast-utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/ast-utils.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/caching.js":
/*!*************************************************************************************!*\
  !*** ../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/caching.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ContextCache: () => (/* binding */ ContextCache),\n/* harmony export */   DisposableCache: () => (/* binding */ DisposableCache),\n/* harmony export */   DocumentCache: () => (/* binding */ DocumentCache),\n/* harmony export */   SimpleCache: () => (/* binding */ SimpleCache),\n/* harmony export */   WorkspaceCache: () => (/* binding */ WorkspaceCache)\n/* harmony export */ });\n/******************************************************************************\n * Copyright 2023 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\nclass DisposableCache {\n    constructor() {\n        this.toDispose = [];\n        this.isDisposed = false;\n    }\n    onDispose(disposable) {\n        this.toDispose.push(disposable);\n    }\n    dispose() {\n        this.throwIfDisposed();\n        this.clear();\n        this.isDisposed = true;\n        this.toDispose.forEach(disposable => disposable.dispose());\n    }\n    throwIfDisposed() {\n        if (this.isDisposed) {\n            throw new Error('This cache has already been disposed');\n        }\n    }\n}\nclass SimpleCache extends DisposableCache {\n    constructor() {\n        super(...arguments);\n        this.cache = new Map();\n    }\n    has(key) {\n        this.throwIfDisposed();\n        return this.cache.has(key);\n    }\n    set(key, value) {\n        this.throwIfDisposed();\n        this.cache.set(key, value);\n    }\n    get(key, provider) {\n        this.throwIfDisposed();\n        if (this.cache.has(key)) {\n            return this.cache.get(key);\n        }\n        else if (provider) {\n            const value = provider();\n            this.cache.set(key, value);\n            return value;\n        }\n        else {\n            return undefined;\n        }\n    }\n    delete(key) {\n        this.throwIfDisposed();\n        return this.cache.delete(key);\n    }\n    clear() {\n        this.throwIfDisposed();\n        this.cache.clear();\n    }\n}\nclass ContextCache extends DisposableCache {\n    constructor(converter) {\n        super();\n        this.cache = new Map();\n        this.converter = converter !== null && converter !== void 0 ? converter : (value => value);\n    }\n    has(contextKey, key) {\n        this.throwIfDisposed();\n        return this.cacheForContext(contextKey).has(key);\n    }\n    set(contextKey, key, value) {\n        this.throwIfDisposed();\n        this.cacheForContext(contextKey).set(key, value);\n    }\n    get(contextKey, key, provider) {\n        this.throwIfDisposed();\n        const contextCache = this.cacheForContext(contextKey);\n        if (contextCache.has(key)) {\n            return contextCache.get(key);\n        }\n        else if (provider) {\n            const value = provider();\n            contextCache.set(key, value);\n            return value;\n        }\n        else {\n            return undefined;\n        }\n    }\n    delete(contextKey, key) {\n        this.throwIfDisposed();\n        return this.cacheForContext(contextKey).delete(key);\n    }\n    clear(contextKey) {\n        this.throwIfDisposed();\n        if (contextKey) {\n            const mapKey = this.converter(contextKey);\n            this.cache.delete(mapKey);\n        }\n        else {\n            this.cache.clear();\n        }\n    }\n    cacheForContext(contextKey) {\n        const mapKey = this.converter(contextKey);\n        let documentCache = this.cache.get(mapKey);\n        if (!documentCache) {\n            documentCache = new Map();\n            this.cache.set(mapKey, documentCache);\n        }\n        return documentCache;\n    }\n}\n/**\n * Every key/value pair in this cache is scoped to a document.\n * If this document is changed or deleted, all associated key/value pairs are deleted.\n */\nclass DocumentCache extends ContextCache {\n    /**\n     * Creates a new document cache.\n     *\n     * @param sharedServices Service container instance to hook into document lifecycle events.\n     * @param state Optional document state on which the cache should evict.\n     * If not provided, the cache will evict on `DocumentBuilder#onUpdate`.\n     * *Deleted* documents are considered in both cases.\n     *\n     * Providing a state here will use `DocumentBuilder#onDocumentPhase` instead,\n     * which triggers on all documents that have been affected by this change, assuming that the\n     * state is `DocumentState.Linked` or a later state.\n     */\n    constructor(sharedServices, state) {\n        super(uri => uri.toString());\n        if (state) {\n            this.toDispose.push(sharedServices.workspace.DocumentBuilder.onDocumentPhase(state, document => {\n                this.clear(document.uri.toString());\n            }));\n            this.toDispose.push(sharedServices.workspace.DocumentBuilder.onUpdate((_changed, deleted) => {\n                for (const uri of deleted) { // react only on deleted documents\n                    this.clear(uri);\n                }\n            }));\n        }\n        else {\n            this.toDispose.push(sharedServices.workspace.DocumentBuilder.onUpdate((changed, deleted) => {\n                const allUris = changed.concat(deleted); // react on both changed and deleted documents\n                for (const uri of allUris) {\n                    this.clear(uri);\n                }\n            }));\n        }\n    }\n}\n/**\n * Every key/value pair in this cache is scoped to the whole workspace.\n * If any document in the workspace is added, changed or deleted, the whole cache is evicted.\n */\nclass WorkspaceCache extends SimpleCache {\n    /**\n     * Creates a new workspace cache.\n     *\n     * @param sharedServices Service container instance to hook into document lifecycle events.\n     * @param state Optional document state on which the cache should evict.\n     * If not provided, the cache will evict on `DocumentBuilder#onUpdate`.\n     * *Deleted* documents are considered in both cases.\n     */\n    constructor(sharedServices, state) {\n        super();\n        if (state) {\n            this.toDispose.push(sharedServices.workspace.DocumentBuilder.onBuildPhase(state, () => {\n                this.clear();\n            }));\n            this.toDispose.push(sharedServices.workspace.DocumentBuilder.onUpdate((_changed, deleted) => {\n                if (deleted.length > 0) { // react only on deleted documents\n                    this.clear();\n                }\n            }));\n        }\n        else {\n            this.toDispose.push(sharedServices.workspace.DocumentBuilder.onUpdate(() => {\n                this.clear();\n            }));\n        }\n    }\n}\n//# sourceMappingURL=caching.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/caching.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/collections.js":
/*!*****************************************************************************************!*\
  !*** ../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/collections.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BiMap: () => (/* binding */ BiMap),\n/* harmony export */   MultiMap: () => (/* binding */ MultiMap)\n/* harmony export */ });\n/* harmony import */ var _stream_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./stream.js */ \"(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/stream.js\");\n/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\n/**\n * A multimap is a variation of a Map that has potentially multiple values for every key.\n */\nclass MultiMap {\n    constructor(elements) {\n        this.map = new Map();\n        if (elements) {\n            for (const [key, value] of elements) {\n                this.add(key, value);\n            }\n        }\n    }\n    /**\n     * The total number of values in the multimap.\n     */\n    get size() {\n        return _stream_js__WEBPACK_IMPORTED_MODULE_0__.Reduction.sum((0,_stream_js__WEBPACK_IMPORTED_MODULE_0__.stream)(this.map.values()).map(a => a.length));\n    }\n    /**\n     * Clear all entries in the multimap.\n     */\n    clear() {\n        this.map.clear();\n    }\n    /**\n     * Operates differently depending on whether a `value` is given:\n     *  * With a value, this method deletes the specific key / value pair from the multimap.\n     *  * Without a value, all values associated with the given key are deleted.\n     *\n     * @returns `true` if a value existed and has been removed, or `false` if the specified\n     *     key / value does not exist.\n     */\n    delete(key, value) {\n        if (value === undefined) {\n            return this.map.delete(key);\n        }\n        else {\n            const values = this.map.get(key);\n            if (values) {\n                const index = values.indexOf(value);\n                if (index >= 0) {\n                    if (values.length === 1) {\n                        this.map.delete(key);\n                    }\n                    else {\n                        values.splice(index, 1);\n                    }\n                    return true;\n                }\n            }\n            return false;\n        }\n    }\n    /**\n     * Returns an array of all values associated with the given key. If no value exists,\n     * an empty array is returned.\n     *\n     * _Note:_ The returned array is assumed not to be modified. Use the `set` method to add a\n     * value and `delete` to remove a value from the multimap.\n     */\n    get(key) {\n        var _a;\n        return (_a = this.map.get(key)) !== null && _a !== void 0 ? _a : [];\n    }\n    /**\n     * Operates differently depending on whether a `value` is given:\n     *  * With a value, this method returns `true` if the specific key / value pair is present in the multimap.\n     *  * Without a value, this method returns `true` if the given key is present in the multimap.\n     */\n    has(key, value) {\n        if (value === undefined) {\n            return this.map.has(key);\n        }\n        else {\n            const values = this.map.get(key);\n            if (values) {\n                return values.indexOf(value) >= 0;\n            }\n            return false;\n        }\n    }\n    /**\n     * Add the given key / value pair to the multimap.\n     */\n    add(key, value) {\n        if (this.map.has(key)) {\n            this.map.get(key).push(value);\n        }\n        else {\n            this.map.set(key, [value]);\n        }\n        return this;\n    }\n    /**\n     * Add the given set of key / value pairs to the multimap.\n     */\n    addAll(key, values) {\n        if (this.map.has(key)) {\n            this.map.get(key).push(...values);\n        }\n        else {\n            this.map.set(key, Array.from(values));\n        }\n        return this;\n    }\n    /**\n     * Invokes the given callback function for every key / value pair in the multimap.\n     */\n    forEach(callbackfn) {\n        this.map.forEach((array, key) => array.forEach(value => callbackfn(value, key, this)));\n    }\n    /**\n     * Returns an iterator of key, value pairs for every entry in the map.\n     */\n    [Symbol.iterator]() {\n        return this.entries().iterator();\n    }\n    /**\n     * Returns a stream of key, value pairs for every entry in the map.\n     */\n    entries() {\n        return (0,_stream_js__WEBPACK_IMPORTED_MODULE_0__.stream)(this.map.entries())\n            .flatMap(([key, array]) => array.map(value => [key, value]));\n    }\n    /**\n     * Returns a stream of keys in the map.\n     */\n    keys() {\n        return (0,_stream_js__WEBPACK_IMPORTED_MODULE_0__.stream)(this.map.keys());\n    }\n    /**\n     * Returns a stream of values in the map.\n     */\n    values() {\n        return (0,_stream_js__WEBPACK_IMPORTED_MODULE_0__.stream)(this.map.values()).flat();\n    }\n    /**\n     * Returns a stream of key, value set pairs for every key in the map.\n     */\n    entriesGroupedByKey() {\n        return (0,_stream_js__WEBPACK_IMPORTED_MODULE_0__.stream)(this.map.entries());\n    }\n}\nclass BiMap {\n    get size() {\n        return this.map.size;\n    }\n    constructor(elements) {\n        this.map = new Map();\n        this.inverse = new Map();\n        if (elements) {\n            for (const [key, value] of elements) {\n                this.set(key, value);\n            }\n        }\n    }\n    clear() {\n        this.map.clear();\n        this.inverse.clear();\n    }\n    set(key, value) {\n        this.map.set(key, value);\n        this.inverse.set(value, key);\n        return this;\n    }\n    get(key) {\n        return this.map.get(key);\n    }\n    getKey(value) {\n        return this.inverse.get(value);\n    }\n    delete(key) {\n        const value = this.map.get(key);\n        if (value !== undefined) {\n            this.map.delete(key);\n            this.inverse.delete(value);\n            return true;\n        }\n        return false;\n    }\n}\n//# sourceMappingURL=collections.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/collections.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/cst-utils.js":
/*!***************************************************************************************!*\
  !*** ../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/cst-utils.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DefaultNameRegexp: () => (/* binding */ DefaultNameRegexp),\n/* harmony export */   RangeComparison: () => (/* binding */ RangeComparison),\n/* harmony export */   compareRange: () => (/* binding */ compareRange),\n/* harmony export */   findCommentNode: () => (/* binding */ findCommentNode),\n/* harmony export */   findDeclarationNodeAtOffset: () => (/* binding */ findDeclarationNodeAtOffset),\n/* harmony export */   findLeafNodeAtOffset: () => (/* binding */ findLeafNodeAtOffset),\n/* harmony export */   findLeafNodeBeforeOffset: () => (/* binding */ findLeafNodeBeforeOffset),\n/* harmony export */   flattenCst: () => (/* binding */ flattenCst),\n/* harmony export */   getInteriorNodes: () => (/* binding */ getInteriorNodes),\n/* harmony export */   getNextNode: () => (/* binding */ getNextNode),\n/* harmony export */   getPreviousNode: () => (/* binding */ getPreviousNode),\n/* harmony export */   getStartlineNode: () => (/* binding */ getStartlineNode),\n/* harmony export */   inRange: () => (/* binding */ inRange),\n/* harmony export */   isChildNode: () => (/* binding */ isChildNode),\n/* harmony export */   isCommentNode: () => (/* binding */ isCommentNode),\n/* harmony export */   streamCst: () => (/* binding */ streamCst),\n/* harmony export */   toDocumentSegment: () => (/* binding */ toDocumentSegment),\n/* harmony export */   tokenToRange: () => (/* binding */ tokenToRange)\n/* harmony export */ });\n/* harmony import */ var _syntax_tree_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../syntax-tree.js */ \"(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/syntax-tree.js\");\n/* harmony import */ var _stream_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./stream.js */ \"(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/stream.js\");\n/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\n\n/**\n * Create a stream of all CST nodes that are directly and indirectly contained in the given root node,\n * including the root node itself.\n */\nfunction streamCst(node) {\n    return new _stream_js__WEBPACK_IMPORTED_MODULE_0__.TreeStreamImpl(node, element => {\n        if ((0,_syntax_tree_js__WEBPACK_IMPORTED_MODULE_1__.isCompositeCstNode)(element)) {\n            return element.content;\n        }\n        else {\n            return [];\n        }\n    }, { includeRoot: true });\n}\n/**\n * Create a stream of all leaf nodes that are directly and indirectly contained in the given root node.\n */\nfunction flattenCst(node) {\n    return streamCst(node).filter(_syntax_tree_js__WEBPACK_IMPORTED_MODULE_1__.isLeafCstNode);\n}\n/**\n * Determines whether the specified cst node is a child of the specified parent node.\n */\nfunction isChildNode(child, parent) {\n    while (child.container) {\n        child = child.container;\n        if (child === parent) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction tokenToRange(token) {\n    // Chevrotain uses 1-based indices everywhere\n    // So we subtract 1 from every value to align with the LSP\n    return {\n        start: {\n            character: token.startColumn - 1,\n            line: token.startLine - 1\n        },\n        end: {\n            character: token.endColumn, // endColumn uses the correct index\n            line: token.endLine - 1\n        }\n    };\n}\nfunction toDocumentSegment(node) {\n    if (!node) {\n        return undefined;\n    }\n    const { offset, end, range } = node;\n    return {\n        range,\n        offset,\n        end,\n        length: end - offset\n    };\n}\nvar RangeComparison;\n(function (RangeComparison) {\n    RangeComparison[RangeComparison[\"Before\"] = 0] = \"Before\";\n    RangeComparison[RangeComparison[\"After\"] = 1] = \"After\";\n    RangeComparison[RangeComparison[\"OverlapFront\"] = 2] = \"OverlapFront\";\n    RangeComparison[RangeComparison[\"OverlapBack\"] = 3] = \"OverlapBack\";\n    RangeComparison[RangeComparison[\"Inside\"] = 4] = \"Inside\";\n    RangeComparison[RangeComparison[\"Outside\"] = 5] = \"Outside\";\n})(RangeComparison || (RangeComparison = {}));\nfunction compareRange(range, to) {\n    if (range.end.line < to.start.line || (range.end.line === to.start.line && range.end.character <= to.start.character)) {\n        return RangeComparison.Before;\n    }\n    else if (range.start.line > to.end.line || (range.start.line === to.end.line && range.start.character >= to.end.character)) {\n        return RangeComparison.After;\n    }\n    const startInside = range.start.line > to.start.line || (range.start.line === to.start.line && range.start.character >= to.start.character);\n    const endInside = range.end.line < to.end.line || (range.end.line === to.end.line && range.end.character <= to.end.character);\n    if (startInside && endInside) {\n        return RangeComparison.Inside;\n    }\n    else if (startInside) {\n        return RangeComparison.OverlapBack;\n    }\n    else if (endInside) {\n        return RangeComparison.OverlapFront;\n    }\n    else {\n        return RangeComparison.Outside;\n    }\n}\nfunction inRange(range, to) {\n    const comparison = compareRange(range, to);\n    return comparison > RangeComparison.After;\n}\n// The \\p{L} regex matches any unicode letter character, i.e. characters from non-english alphabets\n// Together with \\w it matches any kind of character which can commonly appear in IDs\nconst DefaultNameRegexp = /^[\\w\\p{L}]$/u;\n/**\n * Performs `findLeafNodeAtOffset` with a minor difference: When encountering a character that matches the `nameRegexp` argument,\n * it will instead return the leaf node at the `offset - 1` position.\n *\n * For LSP services, users expect that the declaration of an element is available if the cursor is directly after the element.\n */\nfunction findDeclarationNodeAtOffset(cstNode, offset, nameRegexp = DefaultNameRegexp) {\n    if (cstNode) {\n        if (offset > 0) {\n            const localOffset = offset - cstNode.offset;\n            const textAtOffset = cstNode.text.charAt(localOffset);\n            if (!nameRegexp.test(textAtOffset)) {\n                offset--;\n            }\n        }\n        return findLeafNodeAtOffset(cstNode, offset);\n    }\n    return undefined;\n}\nfunction findCommentNode(cstNode, commentNames) {\n    if (cstNode) {\n        const previous = getPreviousNode(cstNode, true);\n        if (previous && isCommentNode(previous, commentNames)) {\n            return previous;\n        }\n        if ((0,_syntax_tree_js__WEBPACK_IMPORTED_MODULE_1__.isRootCstNode)(cstNode)) {\n            // Go from the first non-hidden node through all nodes in reverse order\n            // We do this to find the comment node which directly precedes the root node\n            const endIndex = cstNode.content.findIndex(e => !e.hidden);\n            for (let i = endIndex - 1; i >= 0; i--) {\n                const child = cstNode.content[i];\n                if (isCommentNode(child, commentNames)) {\n                    return child;\n                }\n            }\n        }\n    }\n    return undefined;\n}\nfunction isCommentNode(cstNode, commentNames) {\n    return (0,_syntax_tree_js__WEBPACK_IMPORTED_MODULE_1__.isLeafCstNode)(cstNode) && commentNames.includes(cstNode.tokenType.name);\n}\n/**\n * Finds the leaf CST node at the specified 0-based string offset.\n * Note that the given offset will be within the range of the returned leaf node.\n *\n * If the offset does not point to a CST node (but just white space), this method will return `undefined`.\n *\n * @param node The CST node to search through.\n * @param offset The specified offset.\n * @returns The CST node at the specified offset.\n */\nfunction findLeafNodeAtOffset(node, offset) {\n    if ((0,_syntax_tree_js__WEBPACK_IMPORTED_MODULE_1__.isLeafCstNode)(node)) {\n        return node;\n    }\n    else if ((0,_syntax_tree_js__WEBPACK_IMPORTED_MODULE_1__.isCompositeCstNode)(node)) {\n        const searchResult = binarySearch(node, offset, false);\n        if (searchResult) {\n            return findLeafNodeAtOffset(searchResult, offset);\n        }\n    }\n    return undefined;\n}\n/**\n * Finds the leaf CST node at the specified 0-based string offset.\n * If no CST node exists at the specified position, it will return the leaf node before it.\n *\n * If there is no leaf node before the specified offset, this method will return `undefined`.\n *\n * @param node The CST node to search through.\n * @param offset The specified offset.\n * @returns The CST node closest to the specified offset.\n */\nfunction findLeafNodeBeforeOffset(node, offset) {\n    if ((0,_syntax_tree_js__WEBPACK_IMPORTED_MODULE_1__.isLeafCstNode)(node)) {\n        return node;\n    }\n    else if ((0,_syntax_tree_js__WEBPACK_IMPORTED_MODULE_1__.isCompositeCstNode)(node)) {\n        const searchResult = binarySearch(node, offset, true);\n        if (searchResult) {\n            return findLeafNodeBeforeOffset(searchResult, offset);\n        }\n    }\n    return undefined;\n}\nfunction binarySearch(node, offset, closest) {\n    let left = 0;\n    let right = node.content.length - 1;\n    let closestNode = undefined;\n    while (left <= right) {\n        const middle = Math.floor((left + right) / 2);\n        const middleNode = node.content[middle];\n        if (middleNode.offset <= offset && middleNode.end > offset) {\n            // Found an exact match\n            return middleNode;\n        }\n        if (middleNode.end <= offset) {\n            // Update the closest node (less than offset) and move to the right half\n            closestNode = closest ? middleNode : undefined;\n            left = middle + 1;\n        }\n        else {\n            // Move to the left half\n            right = middle - 1;\n        }\n    }\n    return closestNode;\n}\nfunction getPreviousNode(node, hidden = true) {\n    while (node.container) {\n        const parent = node.container;\n        let index = parent.content.indexOf(node);\n        while (index > 0) {\n            index--;\n            const previous = parent.content[index];\n            if (hidden || !previous.hidden) {\n                return previous;\n            }\n        }\n        node = parent;\n    }\n    return undefined;\n}\nfunction getNextNode(node, hidden = true) {\n    while (node.container) {\n        const parent = node.container;\n        let index = parent.content.indexOf(node);\n        const last = parent.content.length - 1;\n        while (index < last) {\n            index++;\n            const next = parent.content[index];\n            if (hidden || !next.hidden) {\n                return next;\n            }\n        }\n        node = parent;\n    }\n    return undefined;\n}\nfunction getStartlineNode(node) {\n    if (node.range.start.character === 0) {\n        return node;\n    }\n    const line = node.range.start.line;\n    let last = node;\n    let index;\n    while (node.container) {\n        const parent = node.container;\n        const selfIndex = index !== null && index !== void 0 ? index : parent.content.indexOf(node);\n        if (selfIndex === 0) {\n            node = parent;\n            index = undefined;\n        }\n        else {\n            index = selfIndex - 1;\n            node = parent.content[index];\n        }\n        if (node.range.start.line !== line) {\n            break;\n        }\n        last = node;\n    }\n    return last;\n}\nfunction getInteriorNodes(start, end) {\n    const commonParent = getCommonParent(start, end);\n    if (!commonParent) {\n        return [];\n    }\n    return commonParent.parent.content.slice(commonParent.a + 1, commonParent.b);\n}\nfunction getCommonParent(a, b) {\n    const aParents = getParentChain(a);\n    const bParents = getParentChain(b);\n    let current;\n    for (let i = 0; i < aParents.length && i < bParents.length; i++) {\n        const aParent = aParents[i];\n        const bParent = bParents[i];\n        if (aParent.parent === bParent.parent) {\n            current = {\n                parent: aParent.parent,\n                a: aParent.index,\n                b: bParent.index\n            };\n        }\n        else {\n            break;\n        }\n    }\n    return current;\n}\nfunction getParentChain(node) {\n    const chain = [];\n    while (node.container) {\n        const parent = node.container;\n        const index = parent.content.indexOf(node);\n        chain.push({\n            parent,\n            index\n        });\n        node = parent;\n    }\n    return chain.reverse();\n}\n//# sourceMappingURL=cst-utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/cst-utils.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/disposable.js":
/*!****************************************************************************************!*\
  !*** ../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/disposable.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Disposable: () => (/* binding */ Disposable)\n/* harmony export */ });\n/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\nvar Disposable;\n(function (Disposable) {\n    function create(callback) {\n        return {\n            dispose: async () => await callback()\n        };\n    }\n    Disposable.create = create;\n})(Disposable || (Disposable = {}));\n//# sourceMappingURL=disposable.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2xhbmdpdW1AMy4zLjEvbm9kZV9tb2R1bGVzL2xhbmdpdW0vbGliL3V0aWxzL2Rpc3Bvc2FibGUuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxnQ0FBZ0M7QUFDakMiLCJzb3VyY2VzIjpbIi9Vc2Vycy9ldGhhbmtpbS9OZXN0b3IvbWVkZmV0Y2guanMvbm9kZV9tb2R1bGVzLy5wbnBtL2xhbmdpdW1AMy4zLjEvbm9kZV9tb2R1bGVzL2xhbmdpdW0vbGliL3V0aWxzL2Rpc3Bvc2FibGUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuICogQ29weXJpZ2h0IDIwMjEgVHlwZUZveCBHbWJIXG4gKiBUaGlzIHByb2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzIGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0aGVcbiAqIHRlcm1zIG9mIHRoZSBNSVQgTGljZW5zZSwgd2hpY2ggaXMgYXZhaWxhYmxlIGluIHRoZSBwcm9qZWN0IHJvb3QuXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuZXhwb3J0IHZhciBEaXNwb3NhYmxlO1xuKGZ1bmN0aW9uIChEaXNwb3NhYmxlKSB7XG4gICAgZnVuY3Rpb24gY3JlYXRlKGNhbGxiYWNrKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBkaXNwb3NlOiBhc3luYyAoKSA9PiBhd2FpdCBjYWxsYmFjaygpXG4gICAgICAgIH07XG4gICAgfVxuICAgIERpc3Bvc2FibGUuY3JlYXRlID0gY3JlYXRlO1xufSkoRGlzcG9zYWJsZSB8fCAoRGlzcG9zYWJsZSA9IHt9KSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kaXNwb3NhYmxlLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/disposable.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/errors.js":
/*!************************************************************************************!*\
  !*** ../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/errors.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ErrorWithLocation: () => (/* binding */ ErrorWithLocation),\n/* harmony export */   assertUnreachable: () => (/* binding */ assertUnreachable)\n/* harmony export */ });\n/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\nclass ErrorWithLocation extends Error {\n    constructor(node, message) {\n        super(node ? `${message} at ${node.range.start.line}:${node.range.start.character}` : message);\n    }\n}\nfunction assertUnreachable(_) {\n    throw new Error('Error! The input value was not handled.');\n}\n//# sourceMappingURL=errors.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2xhbmdpdW1AMy4zLjEvbm9kZV9tb2R1bGVzL2xhbmdpdW0vbGliL3V0aWxzL2Vycm9ycy5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0Esd0JBQXdCLFNBQVMsS0FBSyxzQkFBc0IsR0FBRywyQkFBMkI7QUFDMUY7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvZXRoYW5raW0vTmVzdG9yL21lZGZldGNoLmpzL25vZGVfbW9kdWxlcy8ucG5wbS9sYW5naXVtQDMuMy4xL25vZGVfbW9kdWxlcy9sYW5naXVtL2xpYi91dGlscy9lcnJvcnMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuICogQ29weXJpZ2h0IDIwMjEgVHlwZUZveCBHbWJIXG4gKiBUaGlzIHByb2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzIGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0aGVcbiAqIHRlcm1zIG9mIHRoZSBNSVQgTGljZW5zZSwgd2hpY2ggaXMgYXZhaWxhYmxlIGluIHRoZSBwcm9qZWN0IHJvb3QuXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuZXhwb3J0IGNsYXNzIEVycm9yV2l0aExvY2F0aW9uIGV4dGVuZHMgRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKG5vZGUsIG1lc3NhZ2UpIHtcbiAgICAgICAgc3VwZXIobm9kZSA/IGAke21lc3NhZ2V9IGF0ICR7bm9kZS5yYW5nZS5zdGFydC5saW5lfToke25vZGUucmFuZ2Uuc3RhcnQuY2hhcmFjdGVyfWAgOiBtZXNzYWdlKTtcbiAgICB9XG59XG5leHBvcnQgZnVuY3Rpb24gYXNzZXJ0VW5yZWFjaGFibGUoXykge1xuICAgIHRocm93IG5ldyBFcnJvcignRXJyb3IhIFRoZSBpbnB1dCB2YWx1ZSB3YXMgbm90IGhhbmRsZWQuJyk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1lcnJvcnMuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/errors.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/grammar-loader.js":
/*!********************************************************************************************!*\
  !*** ../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/grammar-loader.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   loadGrammarFromJson: () => (/* binding */ loadGrammarFromJson)\n/* harmony export */ });\n/* harmony import */ var _default_module_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../default-module.js */ \"(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/default-module.js\");\n/* harmony import */ var _dependency_injection_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../dependency-injection.js */ \"(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/dependency-injection.js\");\n/* harmony import */ var _languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../languages/generated/ast.js */ \"(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/languages/generated/ast.js\");\n/* harmony import */ var _workspace_file_system_provider_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../workspace/file-system-provider.js */ \"(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/workspace/file-system-provider.js\");\n/* harmony import */ var _uri_utils_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./uri-utils.js */ \"(ssr)/../node_modules/.pnpm/vscode-uri@3.0.8/node_modules/vscode-uri/lib/esm/index.mjs\");\n/******************************************************************************\n * Copyright 2023 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\n\n\n\n\nconst minimalGrammarModule = {\n    Grammar: () => undefined,\n    LanguageMetaData: () => ({\n        caseInsensitive: false,\n        fileExtensions: ['.langium'],\n        languageId: 'langium'\n    })\n};\nconst minimalSharedGrammarModule = {\n    AstReflection: () => new _languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_0__.LangiumGrammarAstReflection()\n};\nfunction createMinimalGrammarServices() {\n    const shared = (0,_dependency_injection_js__WEBPACK_IMPORTED_MODULE_1__.inject)((0,_default_module_js__WEBPACK_IMPORTED_MODULE_2__.createDefaultSharedCoreModule)(_workspace_file_system_provider_js__WEBPACK_IMPORTED_MODULE_3__.EmptyFileSystem), minimalSharedGrammarModule);\n    const grammar = (0,_dependency_injection_js__WEBPACK_IMPORTED_MODULE_1__.inject)((0,_default_module_js__WEBPACK_IMPORTED_MODULE_2__.createDefaultCoreModule)({ shared }), minimalGrammarModule);\n    shared.ServiceRegistry.register(grammar);\n    return grammar;\n}\n/**\n * Load a Langium grammar for your language from a JSON string. This is used by several services,\n * most notably the parser builder which interprets the grammar to create a parser.\n */\nfunction loadGrammarFromJson(json) {\n    var _a;\n    const services = createMinimalGrammarServices();\n    const astNode = services.serializer.JsonSerializer.deserialize(json);\n    services.shared.workspace.LangiumDocumentFactory.fromModel(astNode, _uri_utils_js__WEBPACK_IMPORTED_MODULE_4__.URI.parse(`memory://${(_a = astNode.name) !== null && _a !== void 0 ? _a : 'grammar'}.langium`));\n    return astNode;\n}\n//# sourceMappingURL=grammar-loader.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2xhbmdpdW1AMy4zLjEvbm9kZV9tb2R1bGVzL2xhbmdpdW0vbGliL3V0aWxzL2dyYW1tYXItbG9hZGVyLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDOEY7QUFDMUM7QUFDQztBQUNrQjtBQUNsQztBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLDZCQUE2QixvRkFBK0I7QUFDNUQ7QUFDQTtBQUNBLG1CQUFtQixnRUFBTSxDQUFDLGlGQUE2QixDQUFDLCtFQUFlO0FBQ3ZFLG9CQUFvQixnRUFBTSxDQUFDLDJFQUF1QixHQUFHLFFBQVE7QUFDN0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBLHdFQUF3RSw4Q0FBRyxtQkFBbUIsK0RBQStEO0FBQzdKO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL2V0aGFua2ltL05lc3Rvci9tZWRmZXRjaC5qcy9ub2RlX21vZHVsZXMvLnBucG0vbGFuZ2l1bUAzLjMuMS9ub2RlX21vZHVsZXMvbGFuZ2l1bS9saWIvdXRpbHMvZ3JhbW1hci1sb2FkZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuICogQ29weXJpZ2h0IDIwMjMgVHlwZUZveCBHbWJIXG4gKiBUaGlzIHByb2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzIGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0aGVcbiAqIHRlcm1zIG9mIHRoZSBNSVQgTGljZW5zZSwgd2hpY2ggaXMgYXZhaWxhYmxlIGluIHRoZSBwcm9qZWN0IHJvb3QuXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuaW1wb3J0IHsgY3JlYXRlRGVmYXVsdENvcmVNb2R1bGUsIGNyZWF0ZURlZmF1bHRTaGFyZWRDb3JlTW9kdWxlIH0gZnJvbSAnLi4vZGVmYXVsdC1tb2R1bGUuanMnO1xuaW1wb3J0IHsgaW5qZWN0IH0gZnJvbSAnLi4vZGVwZW5kZW5jeS1pbmplY3Rpb24uanMnO1xuaW1wb3J0ICogYXMgYXN0IGZyb20gJy4uL2xhbmd1YWdlcy9nZW5lcmF0ZWQvYXN0LmpzJztcbmltcG9ydCB7IEVtcHR5RmlsZVN5c3RlbSB9IGZyb20gJy4uL3dvcmtzcGFjZS9maWxlLXN5c3RlbS1wcm92aWRlci5qcyc7XG5pbXBvcnQgeyBVUkkgfSBmcm9tICcuL3VyaS11dGlscy5qcyc7XG5jb25zdCBtaW5pbWFsR3JhbW1hck1vZHVsZSA9IHtcbiAgICBHcmFtbWFyOiAoKSA9PiB1bmRlZmluZWQsXG4gICAgTGFuZ3VhZ2VNZXRhRGF0YTogKCkgPT4gKHtcbiAgICAgICAgY2FzZUluc2Vuc2l0aXZlOiBmYWxzZSxcbiAgICAgICAgZmlsZUV4dGVuc2lvbnM6IFsnLmxhbmdpdW0nXSxcbiAgICAgICAgbGFuZ3VhZ2VJZDogJ2xhbmdpdW0nXG4gICAgfSlcbn07XG5jb25zdCBtaW5pbWFsU2hhcmVkR3JhbW1hck1vZHVsZSA9IHtcbiAgICBBc3RSZWZsZWN0aW9uOiAoKSA9PiBuZXcgYXN0LkxhbmdpdW1HcmFtbWFyQXN0UmVmbGVjdGlvbigpXG59O1xuZnVuY3Rpb24gY3JlYXRlTWluaW1hbEdyYW1tYXJTZXJ2aWNlcygpIHtcbiAgICBjb25zdCBzaGFyZWQgPSBpbmplY3QoY3JlYXRlRGVmYXVsdFNoYXJlZENvcmVNb2R1bGUoRW1wdHlGaWxlU3lzdGVtKSwgbWluaW1hbFNoYXJlZEdyYW1tYXJNb2R1bGUpO1xuICAgIGNvbnN0IGdyYW1tYXIgPSBpbmplY3QoY3JlYXRlRGVmYXVsdENvcmVNb2R1bGUoeyBzaGFyZWQgfSksIG1pbmltYWxHcmFtbWFyTW9kdWxlKTtcbiAgICBzaGFyZWQuU2VydmljZVJlZ2lzdHJ5LnJlZ2lzdGVyKGdyYW1tYXIpO1xuICAgIHJldHVybiBncmFtbWFyO1xufVxuLyoqXG4gKiBMb2FkIGEgTGFuZ2l1bSBncmFtbWFyIGZvciB5b3VyIGxhbmd1YWdlIGZyb20gYSBKU09OIHN0cmluZy4gVGhpcyBpcyB1c2VkIGJ5IHNldmVyYWwgc2VydmljZXMsXG4gKiBtb3N0IG5vdGFibHkgdGhlIHBhcnNlciBidWlsZGVyIHdoaWNoIGludGVycHJldHMgdGhlIGdyYW1tYXIgdG8gY3JlYXRlIGEgcGFyc2VyLlxuICovXG5leHBvcnQgZnVuY3Rpb24gbG9hZEdyYW1tYXJGcm9tSnNvbihqc29uKSB7XG4gICAgdmFyIF9hO1xuICAgIGNvbnN0IHNlcnZpY2VzID0gY3JlYXRlTWluaW1hbEdyYW1tYXJTZXJ2aWNlcygpO1xuICAgIGNvbnN0IGFzdE5vZGUgPSBzZXJ2aWNlcy5zZXJpYWxpemVyLkpzb25TZXJpYWxpemVyLmRlc2VyaWFsaXplKGpzb24pO1xuICAgIHNlcnZpY2VzLnNoYXJlZC53b3Jrc3BhY2UuTGFuZ2l1bURvY3VtZW50RmFjdG9yeS5mcm9tTW9kZWwoYXN0Tm9kZSwgVVJJLnBhcnNlKGBtZW1vcnk6Ly8keyhfYSA9IGFzdE5vZGUubmFtZSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogJ2dyYW1tYXInfS5sYW5naXVtYCkpO1xuICAgIHJldHVybiBhc3ROb2RlO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Z3JhbW1hci1sb2FkZXIuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/grammar-loader.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/grammar-utils.js":
/*!*******************************************************************************************!*\
  !*** ../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/grammar-utils.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   findAssignment: () => (/* binding */ findAssignment),\n/* harmony export */   findNameAssignment: () => (/* binding */ findNameAssignment),\n/* harmony export */   findNodeForKeyword: () => (/* binding */ findNodeForKeyword),\n/* harmony export */   findNodeForProperty: () => (/* binding */ findNodeForProperty),\n/* harmony export */   findNodesForKeyword: () => (/* binding */ findNodesForKeyword),\n/* harmony export */   findNodesForKeywordInternal: () => (/* binding */ findNodesForKeywordInternal),\n/* harmony export */   findNodesForProperty: () => (/* binding */ findNodesForProperty),\n/* harmony export */   getActionAtElement: () => (/* binding */ getActionAtElement),\n/* harmony export */   getActionType: () => (/* binding */ getActionType),\n/* harmony export */   getAllReachableRules: () => (/* binding */ getAllReachableRules),\n/* harmony export */   getCrossReferenceTerminal: () => (/* binding */ getCrossReferenceTerminal),\n/* harmony export */   getEntryRule: () => (/* binding */ getEntryRule),\n/* harmony export */   getExplicitRuleType: () => (/* binding */ getExplicitRuleType),\n/* harmony export */   getHiddenRules: () => (/* binding */ getHiddenRules),\n/* harmony export */   getRuleType: () => (/* binding */ getRuleType),\n/* harmony export */   getRuleTypeName: () => (/* binding */ getRuleTypeName),\n/* harmony export */   getTypeName: () => (/* binding */ getTypeName),\n/* harmony export */   isArrayCardinality: () => (/* binding */ isArrayCardinality),\n/* harmony export */   isArrayOperator: () => (/* binding */ isArrayOperator),\n/* harmony export */   isCommentTerminal: () => (/* binding */ isCommentTerminal),\n/* harmony export */   isDataType: () => (/* binding */ isDataType),\n/* harmony export */   isDataTypeRule: () => (/* binding */ isDataTypeRule),\n/* harmony export */   isOptionalCardinality: () => (/* binding */ isOptionalCardinality),\n/* harmony export */   terminalRegex: () => (/* binding */ terminalRegex)\n/* harmony export */ });\n/* harmony import */ var _utils_errors_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/errors.js */ \"(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/errors.js\");\n/* harmony import */ var _languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../languages/generated/ast.js */ \"(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/languages/generated/ast.js\");\n/* harmony import */ var _syntax_tree_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../syntax-tree.js */ \"(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/syntax-tree.js\");\n/* harmony import */ var _ast_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ast-utils.js */ \"(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/ast-utils.js\");\n/* harmony import */ var _cst_utils_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./cst-utils.js */ \"(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/cst-utils.js\");\n/* harmony import */ var _regexp_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./regexp-utils.js */ \"(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/regexp-utils.js\");\n/******************************************************************************\n * Copyright 2021-2022 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\n\n\n\n\n\n/**\n * Returns the entry rule of the given grammar, if any. If the grammar file does not contain an entry rule,\n * the result is `undefined`.\n */\nfunction getEntryRule(grammar) {\n    return grammar.rules.find(e => _languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_0__.isParserRule(e) && e.entry);\n}\n/**\n * Returns all hidden terminal rules of the given grammar, if any.\n */\nfunction getHiddenRules(grammar) {\n    return grammar.rules.filter((e) => _languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_0__.isTerminalRule(e) && e.hidden);\n}\n/**\n * Returns all rules that can be reached from the topmost rules of the specified grammar (entry and hidden terminal rules).\n *\n * @param grammar The grammar that contains all rules\n * @param allTerminals Whether or not to include terminals that are referenced only by other terminals\n * @returns A list of referenced parser and terminal rules. If the grammar contains no entry rule,\n *      this function returns all rules of the specified grammar.\n */\nfunction getAllReachableRules(grammar, allTerminals) {\n    const ruleNames = new Set();\n    const entryRule = getEntryRule(grammar);\n    if (!entryRule) {\n        return new Set(grammar.rules);\n    }\n    const topMostRules = [entryRule].concat(getHiddenRules(grammar));\n    for (const rule of topMostRules) {\n        ruleDfs(rule, ruleNames, allTerminals);\n    }\n    const rules = new Set();\n    for (const rule of grammar.rules) {\n        if (ruleNames.has(rule.name) || (_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_0__.isTerminalRule(rule) && rule.hidden)) {\n            rules.add(rule);\n        }\n    }\n    return rules;\n}\nfunction ruleDfs(rule, visitedSet, allTerminals) {\n    visitedSet.add(rule.name);\n    (0,_ast_utils_js__WEBPACK_IMPORTED_MODULE_1__.streamAllContents)(rule).forEach(node => {\n        if (_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_0__.isRuleCall(node) || (allTerminals && _languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_0__.isTerminalRuleCall(node))) {\n            const refRule = node.rule.ref;\n            if (refRule && !visitedSet.has(refRule.name)) {\n                ruleDfs(refRule, visitedSet, allTerminals);\n            }\n        }\n    });\n}\n/**\n * Determines the grammar expression used to parse a cross-reference (usually a reference to a terminal rule).\n * A cross-reference can declare this expression explicitly in the form `[Type : Terminal]`, but if `Terminal`\n * is omitted, this function attempts to infer it from the name of the referenced `Type` (using `findNameAssignment`).\n *\n * Returns the grammar expression used to parse the given cross-reference, or `undefined` if it is not declared\n * and cannot be inferred.\n */\nfunction getCrossReferenceTerminal(crossRef) {\n    if (crossRef.terminal) {\n        return crossRef.terminal;\n    }\n    else if (crossRef.type.ref) {\n        const nameAssigment = findNameAssignment(crossRef.type.ref);\n        return nameAssigment === null || nameAssigment === void 0 ? void 0 : nameAssigment.terminal;\n    }\n    return undefined;\n}\n/**\n * Determines whether the given terminal rule represents a comment. This is true if the rule is marked\n * as `hidden` and it does not match white space. This means every hidden token (i.e. excluded from the AST)\n * that contains visible characters is considered a comment.\n */\nfunction isCommentTerminal(terminalRule) {\n    return terminalRule.hidden && !(0,_regexp_utils_js__WEBPACK_IMPORTED_MODULE_2__.isWhitespace)(terminalRegex(terminalRule));\n}\n/**\n * Find all CST nodes within the given node that contribute to the specified property.\n *\n * @param node A CST node in which to look for property assignments. If this is undefined, the result is an empty array.\n * @param property A property name of the constructed AST node. If this is undefined, the result is an empty array.\n */\nfunction findNodesForProperty(node, property) {\n    if (!node || !property) {\n        return [];\n    }\n    return findNodesForPropertyInternal(node, property, node.astNode, true);\n}\n/**\n * Find a single CST node within the given node that contributes to the specified property.\n *\n * @param node A CST node in which to look for property assignments. If this is undefined, the result is `undefined`.\n * @param property A property name of the constructed AST node. If this is undefined, the result is `undefined`.\n * @param index If no index is specified or the index is less than zero, the first found node is returned. If the\n *        specified index exceeds the number of assignments to the property, the last found node is returned. Otherwise,\n *        the node with the specified index is returned.\n */\nfunction findNodeForProperty(node, property, index) {\n    if (!node || !property) {\n        return undefined;\n    }\n    const nodes = findNodesForPropertyInternal(node, property, node.astNode, true);\n    if (nodes.length === 0) {\n        return undefined;\n    }\n    if (index !== undefined) {\n        index = Math.max(0, Math.min(index, nodes.length - 1));\n    }\n    else {\n        index = 0;\n    }\n    return nodes[index];\n}\nfunction findNodesForPropertyInternal(node, property, element, first) {\n    if (!first) {\n        const nodeFeature = (0,_ast_utils_js__WEBPACK_IMPORTED_MODULE_1__.getContainerOfType)(node.grammarSource, _languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_0__.isAssignment);\n        if (nodeFeature && nodeFeature.feature === property) {\n            return [node];\n        }\n    }\n    if ((0,_syntax_tree_js__WEBPACK_IMPORTED_MODULE_3__.isCompositeCstNode)(node) && node.astNode === element) {\n        return node.content.flatMap(e => findNodesForPropertyInternal(e, property, element, false));\n    }\n    return [];\n}\n/**\n * Find all CST nodes within the given node that correspond to the specified keyword.\n *\n * @param node A CST node in which to look for keywords. If this is undefined, the result is an empty array.\n * @param keyword A keyword as specified in the grammar.\n */\nfunction findNodesForKeyword(node, keyword) {\n    if (!node) {\n        return [];\n    }\n    return findNodesForKeywordInternal(node, keyword, node === null || node === void 0 ? void 0 : node.astNode);\n}\n/**\n * Find a single CST node within the given node that corresponds to the specified keyword.\n *\n * @param node A CST node in which to look for keywords. If this is undefined, the result is `undefined`.\n * @param keyword A keyword as specified in the grammar.\n * @param index If no index is specified or the index is less than zero, the first found node is returned. If the\n *        specified index exceeds the number of keyword occurrences, the last found node is returned. Otherwise,\n *        the node with the specified index is returned.\n */\nfunction findNodeForKeyword(node, keyword, index) {\n    if (!node) {\n        return undefined;\n    }\n    const nodes = findNodesForKeywordInternal(node, keyword, node === null || node === void 0 ? void 0 : node.astNode);\n    if (nodes.length === 0) {\n        return undefined;\n    }\n    if (index !== undefined) {\n        index = Math.max(0, Math.min(index, nodes.length - 1));\n    }\n    else {\n        index = 0;\n    }\n    return nodes[index];\n}\nfunction findNodesForKeywordInternal(node, keyword, element) {\n    if (node.astNode !== element) {\n        return [];\n    }\n    if (_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_0__.isKeyword(node.grammarSource) && node.grammarSource.value === keyword) {\n        return [node];\n    }\n    const treeIterator = (0,_cst_utils_js__WEBPACK_IMPORTED_MODULE_4__.streamCst)(node).iterator();\n    let result;\n    const keywordNodes = [];\n    do {\n        result = treeIterator.next();\n        if (!result.done) {\n            const childNode = result.value;\n            if (childNode.astNode === element) {\n                if (_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_0__.isKeyword(childNode.grammarSource) && childNode.grammarSource.value === keyword) {\n                    keywordNodes.push(childNode);\n                }\n            }\n            else {\n                treeIterator.prune();\n            }\n        }\n    } while (!result.done);\n    return keywordNodes;\n}\n/**\n * If the given CST node was parsed in the context of a property assignment, the respective `Assignment` grammar\n * node is returned. If no assignment is found, the result is `undefined`.\n *\n * @param cstNode A CST node for which to find a property assignment.\n */\nfunction findAssignment(cstNode) {\n    var _a;\n    const astNode = cstNode.astNode;\n    // Only search until the ast node of the parent cst node is no longer the original ast node\n    // This would make us jump to a preceding rule call, which contains only unrelated assignments\n    while (astNode === ((_a = cstNode.container) === null || _a === void 0 ? void 0 : _a.astNode)) {\n        const assignment = (0,_ast_utils_js__WEBPACK_IMPORTED_MODULE_1__.getContainerOfType)(cstNode.grammarSource, _languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_0__.isAssignment);\n        if (assignment) {\n            return assignment;\n        }\n        cstNode = cstNode.container;\n    }\n    return undefined;\n}\n/**\n * Find an assignment to the `name` property for the given grammar type. This requires the `type` to be inferred\n * from a parser rule, and that rule must contain an assignment to the `name` property. In all other cases,\n * this function returns `undefined`.\n */\nfunction findNameAssignment(type) {\n    let startNode = type;\n    if (_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_0__.isInferredType(startNode)) {\n        // for inferred types, the location to start searching for the name-assignment is different\n        if (_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_0__.isAction(startNode.$container)) {\n            // a type which is explicitly inferred by an action: investigate the sibbling of the Action node, i.e. start searching at the Action's parent\n            startNode = startNode.$container.$container;\n        }\n        else if (_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_0__.isParserRule(startNode.$container)) {\n            // investigate the parser rule with the explicitly inferred type\n            startNode = startNode.$container;\n        }\n        else {\n            (0,_utils_errors_js__WEBPACK_IMPORTED_MODULE_5__.assertUnreachable)(startNode.$container);\n        }\n    }\n    return findNameAssignmentInternal(type, startNode, new Map());\n}\nfunction findNameAssignmentInternal(type, startNode, cache) {\n    var _a;\n    // the cache is only required to prevent infinite loops\n    function go(node, refType) {\n        let childAssignment = undefined;\n        const parentAssignment = (0,_ast_utils_js__WEBPACK_IMPORTED_MODULE_1__.getContainerOfType)(node, _languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_0__.isAssignment);\n        // No parent assignment implies unassigned rule call\n        if (!parentAssignment) {\n            childAssignment = findNameAssignmentInternal(refType, refType, cache);\n        }\n        cache.set(type, childAssignment);\n        return childAssignment;\n    }\n    if (cache.has(type)) {\n        return cache.get(type);\n    }\n    cache.set(type, undefined);\n    for (const node of (0,_ast_utils_js__WEBPACK_IMPORTED_MODULE_1__.streamAllContents)(startNode)) {\n        if (_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_0__.isAssignment(node) && node.feature.toLowerCase() === 'name') {\n            cache.set(type, node);\n            return node;\n        }\n        else if (_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_0__.isRuleCall(node) && _languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_0__.isParserRule(node.rule.ref)) {\n            return go(node, node.rule.ref);\n        }\n        else if (_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_0__.isSimpleType(node) && ((_a = node.typeRef) === null || _a === void 0 ? void 0 : _a.ref)) {\n            return go(node, node.typeRef.ref);\n        }\n    }\n    return undefined;\n}\nfunction getActionAtElement(element) {\n    const parent = element.$container;\n    if (_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_0__.isGroup(parent)) {\n        const elements = parent.elements;\n        const index = elements.indexOf(element);\n        for (let i = index - 1; i >= 0; i--) {\n            const item = elements[i];\n            if (_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_0__.isAction(item)) {\n                return item;\n            }\n            else {\n                const action = (0,_ast_utils_js__WEBPACK_IMPORTED_MODULE_1__.streamAllContents)(elements[i]).find(_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_0__.isAction);\n                if (action) {\n                    return action;\n                }\n            }\n        }\n    }\n    if (_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_0__.isAbstractElement(parent)) {\n        return getActionAtElement(parent);\n    }\n    else {\n        return undefined;\n    }\n}\nfunction isOptionalCardinality(cardinality, element) {\n    return cardinality === '?' || cardinality === '*' || (_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_0__.isGroup(element) && Boolean(element.guardCondition));\n}\nfunction isArrayCardinality(cardinality) {\n    return cardinality === '*' || cardinality === '+';\n}\nfunction isArrayOperator(operator) {\n    return operator === '+=';\n}\n/**\n * Determines whether the given parser rule is a _data type rule_, meaning that it has a\n * primitive return type like `number`, `boolean`, etc.\n */\nfunction isDataTypeRule(rule) {\n    return isDataTypeRuleInternal(rule, new Set());\n}\nfunction isDataTypeRuleInternal(rule, visited) {\n    if (visited.has(rule)) {\n        return true;\n    }\n    else {\n        visited.add(rule);\n    }\n    for (const node of (0,_ast_utils_js__WEBPACK_IMPORTED_MODULE_1__.streamAllContents)(rule)) {\n        if (_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_0__.isRuleCall(node)) {\n            if (!node.rule.ref) {\n                // RuleCall to unresolved rule. Don't assume `rule` is a DataType rule.\n                return false;\n            }\n            if (_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_0__.isParserRule(node.rule.ref) && !isDataTypeRuleInternal(node.rule.ref, visited)) {\n                return false;\n            }\n        }\n        else if (_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_0__.isAssignment(node)) {\n            return false;\n        }\n        else if (_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_0__.isAction(node)) {\n            return false;\n        }\n    }\n    return Boolean(rule.definition);\n}\nfunction isDataType(type) {\n    return isDataTypeInternal(type.type, new Set());\n}\nfunction isDataTypeInternal(type, visited) {\n    if (visited.has(type)) {\n        return true;\n    }\n    else {\n        visited.add(type);\n    }\n    if (_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_0__.isArrayType(type)) {\n        return false;\n    }\n    else if (_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_0__.isReferenceType(type)) {\n        return false;\n    }\n    else if (_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_0__.isUnionType(type)) {\n        return type.types.every(e => isDataTypeInternal(e, visited));\n    }\n    else if (_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_0__.isSimpleType(type)) {\n        if (type.primitiveType !== undefined) {\n            return true;\n        }\n        else if (type.stringType !== undefined) {\n            return true;\n        }\n        else if (type.typeRef !== undefined) {\n            const ref = type.typeRef.ref;\n            if (_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_0__.isType(ref)) {\n                return isDataTypeInternal(ref.type, visited);\n            }\n            else {\n                return false;\n            }\n        }\n        else {\n            return false;\n        }\n    }\n    else {\n        return false;\n    }\n}\nfunction getExplicitRuleType(rule) {\n    if (rule.inferredType) {\n        return rule.inferredType.name;\n    }\n    else if (rule.dataType) {\n        return rule.dataType;\n    }\n    else if (rule.returnType) {\n        const refType = rule.returnType.ref;\n        if (refType) {\n            // check if we need to check Action as return type\n            if (_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_0__.isParserRule(refType)) {\n                return refType.name;\n            }\n            else if (_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_0__.isInterface(refType) || _languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_0__.isType(refType)) {\n                return refType.name;\n            }\n        }\n    }\n    return undefined;\n}\nfunction getTypeName(type) {\n    var _a;\n    if (_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_0__.isParserRule(type)) {\n        return isDataTypeRule(type) ? type.name : (_a = getExplicitRuleType(type)) !== null && _a !== void 0 ? _a : type.name;\n    }\n    else if (_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_0__.isInterface(type) || _languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_0__.isType(type) || _languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_0__.isReturnType(type)) {\n        return type.name;\n    }\n    else if (_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_0__.isAction(type)) {\n        const actionType = getActionType(type);\n        if (actionType) {\n            return actionType;\n        }\n    }\n    else if (_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_0__.isInferredType(type)) {\n        return type.name;\n    }\n    throw new Error('Cannot get name of Unknown Type');\n}\nfunction getActionType(action) {\n    var _a;\n    if (action.inferredType) {\n        return action.inferredType.name;\n    }\n    else if ((_a = action.type) === null || _a === void 0 ? void 0 : _a.ref) {\n        return getTypeName(action.type.ref);\n    }\n    return undefined; // not inferring and not referencing a valid type\n}\n/**\n * This function is used at development time (for code generation and the internal type system) to get the type of the AST node produced by the given rule.\n * For data type rules, the name of the rule is returned,\n * e.g. \"INT_value returns number: MY_INT;\" returns \"INT_value\".\n * @param rule the given rule\n * @returns the name of the AST node type of the rule\n */\nfunction getRuleTypeName(rule) {\n    var _a, _b, _c;\n    if (_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_0__.isTerminalRule(rule)) {\n        return (_b = (_a = rule.type) === null || _a === void 0 ? void 0 : _a.name) !== null && _b !== void 0 ? _b : 'string';\n    }\n    else {\n        return isDataTypeRule(rule) ? rule.name : (_c = getExplicitRuleType(rule)) !== null && _c !== void 0 ? _c : rule.name;\n    }\n}\n/**\n * This function is used at runtime to get the actual type of the values produced by the given rule at runtime.\n * For data type rules, the name of the declared return type of the rule is returned (if any),\n * e.g. \"INT_value returns number: MY_INT;\" returns \"number\".\n * @param rule the given rule\n * @returns the name of the type of the produced values of the rule at runtime\n */\nfunction getRuleType(rule) {\n    var _a, _b, _c;\n    if (_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_0__.isTerminalRule(rule)) {\n        return (_b = (_a = rule.type) === null || _a === void 0 ? void 0 : _a.name) !== null && _b !== void 0 ? _b : 'string';\n    }\n    else {\n        return (_c = getExplicitRuleType(rule)) !== null && _c !== void 0 ? _c : rule.name;\n    }\n}\nfunction terminalRegex(terminalRule) {\n    const flags = {\n        s: false,\n        i: false,\n        u: false\n    };\n    const source = abstractElementToRegex(terminalRule.definition, flags);\n    const flagText = Object.entries(flags).filter(([, value]) => value).map(([name]) => name).join('');\n    return new RegExp(source, flagText);\n}\n// Using [\\s\\S]* allows to match everything, compared to . which doesn't match line terminators\nconst WILDCARD = /[\\s\\S]/.source;\nfunction abstractElementToRegex(element, flags) {\n    if (_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_0__.isTerminalAlternatives(element)) {\n        return terminalAlternativesToRegex(element);\n    }\n    else if (_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_0__.isTerminalGroup(element)) {\n        return terminalGroupToRegex(element);\n    }\n    else if (_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_0__.isCharacterRange(element)) {\n        return characterRangeToRegex(element);\n    }\n    else if (_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_0__.isTerminalRuleCall(element)) {\n        const rule = element.rule.ref;\n        if (!rule) {\n            throw new Error('Missing rule reference.');\n        }\n        return withCardinality(abstractElementToRegex(rule.definition), {\n            cardinality: element.cardinality,\n            lookahead: element.lookahead\n        });\n    }\n    else if (_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_0__.isNegatedToken(element)) {\n        return negateTokenToRegex(element);\n    }\n    else if (_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_0__.isUntilToken(element)) {\n        return untilTokenToRegex(element);\n    }\n    else if (_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_0__.isRegexToken(element)) {\n        const lastSlash = element.regex.lastIndexOf('/');\n        const source = element.regex.substring(1, lastSlash);\n        const regexFlags = element.regex.substring(lastSlash + 1);\n        if (flags) {\n            flags.i = regexFlags.includes('i');\n            flags.s = regexFlags.includes('s');\n            flags.u = regexFlags.includes('u');\n        }\n        return withCardinality(source, {\n            cardinality: element.cardinality,\n            lookahead: element.lookahead,\n            wrap: false\n        });\n    }\n    else if (_languages_generated_ast_js__WEBPACK_IMPORTED_MODULE_0__.isWildcard(element)) {\n        return withCardinality(WILDCARD, {\n            cardinality: element.cardinality,\n            lookahead: element.lookahead\n        });\n    }\n    else {\n        throw new Error(`Invalid terminal element: ${element === null || element === void 0 ? void 0 : element.$type}`);\n    }\n}\nfunction terminalAlternativesToRegex(alternatives) {\n    return withCardinality(alternatives.elements.map(e => abstractElementToRegex(e)).join('|'), {\n        cardinality: alternatives.cardinality,\n        lookahead: alternatives.lookahead\n    });\n}\nfunction terminalGroupToRegex(group) {\n    return withCardinality(group.elements.map(e => abstractElementToRegex(e)).join(''), {\n        cardinality: group.cardinality,\n        lookahead: group.lookahead\n    });\n}\nfunction untilTokenToRegex(until) {\n    return withCardinality(`${WILDCARD}*?${abstractElementToRegex(until.terminal)}`, {\n        cardinality: until.cardinality,\n        lookahead: until.lookahead\n    });\n}\nfunction negateTokenToRegex(negate) {\n    return withCardinality(`(?!${abstractElementToRegex(negate.terminal)})${WILDCARD}*?`, {\n        cardinality: negate.cardinality,\n        lookahead: negate.lookahead\n    });\n}\nfunction characterRangeToRegex(range) {\n    if (range.right) {\n        return withCardinality(`[${keywordToRegex(range.left)}-${keywordToRegex(range.right)}]`, {\n            cardinality: range.cardinality,\n            lookahead: range.lookahead,\n            wrap: false\n        });\n    }\n    return withCardinality(keywordToRegex(range.left), {\n        cardinality: range.cardinality,\n        lookahead: range.lookahead,\n        wrap: false\n    });\n}\nfunction keywordToRegex(keyword) {\n    return (0,_regexp_utils_js__WEBPACK_IMPORTED_MODULE_2__.escapeRegExp)(keyword.value);\n}\nfunction withCardinality(regex, options) {\n    var _a;\n    if (options.wrap !== false || options.lookahead) {\n        regex = `(${(_a = options.lookahead) !== null && _a !== void 0 ? _a : ''}${regex})`;\n    }\n    if (options.cardinality) {\n        return `${regex}${options.cardinality}`;\n    }\n    return regex;\n}\n//# sourceMappingURL=grammar-utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/grammar-utils.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/promise-utils.js":
/*!*******************************************************************************************!*\
  !*** ../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/promise-utils.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Deferred: () => (/* binding */ Deferred),\n/* harmony export */   OperationCancelled: () => (/* binding */ OperationCancelled),\n/* harmony export */   delayNextTick: () => (/* binding */ delayNextTick),\n/* harmony export */   interruptAndCheck: () => (/* binding */ interruptAndCheck),\n/* harmony export */   isOperationCancelled: () => (/* binding */ isOperationCancelled),\n/* harmony export */   setInterruptionPeriod: () => (/* binding */ setInterruptionPeriod),\n/* harmony export */   startCancelableOperation: () => (/* binding */ startCancelableOperation)\n/* harmony export */ });\n/* harmony import */ var _utils_cancellation_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/cancellation.js */ \"(ssr)/../node_modules/.pnpm/vscode-jsonrpc@8.2.0/node_modules/vscode-jsonrpc/lib/common/cancellation.js\");\n/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\n/**\n * Delays the execution of the current code to the next tick of the event loop.\n * Don't call this method directly in a tight loop to prevent too many promises from being created.\n */\nfunction delayNextTick() {\n    return new Promise(resolve => {\n        // In case we are running in a non-node environment, `setImmediate` isn't available.\n        // Using `setTimeout` of the browser API accomplishes the same result.\n        if (typeof setImmediate === 'undefined') {\n            setTimeout(resolve, 0);\n        }\n        else {\n            setImmediate(resolve);\n        }\n    });\n}\nlet lastTick = 0;\nlet globalInterruptionPeriod = 10;\n/**\n * Reset the global interruption period and create a cancellation token source.\n */\nfunction startCancelableOperation() {\n    lastTick = performance.now();\n    return new _utils_cancellation_js__WEBPACK_IMPORTED_MODULE_0__.CancellationTokenSource();\n}\n/**\n * Change the period duration for `interruptAndCheck` to the given number of milliseconds.\n * The default value is 10ms.\n */\nfunction setInterruptionPeriod(period) {\n    globalInterruptionPeriod = period;\n}\n/**\n * This symbol may be thrown in an asynchronous context by any Langium service that receives\n * a `CancellationToken`. This means that the promise returned by such a service is rejected with\n * this symbol as rejection reason.\n */\nconst OperationCancelled = Symbol('OperationCancelled');\n/**\n * Use this in a `catch` block to check whether the thrown object indicates that the operation\n * has been cancelled.\n */\nfunction isOperationCancelled(err) {\n    return err === OperationCancelled;\n}\n/**\n * This function does two things:\n *  1. Check the elapsed time since the last call to this function or to `startCancelableOperation`. If the predefined\n *     period (configured with `setInterruptionPeriod`) is exceeded, execution is delayed with `delayNextTick`.\n *  2. If the predefined period is not met yet or execution is resumed after an interruption, the given cancellation\n *     token is checked, and if cancellation is requested, `OperationCanceled` is thrown.\n *\n * All services in Langium that receive a `CancellationToken` may potentially call this function, so the\n * `CancellationToken` must be caught (with an `async` try-catch block or a `catch` callback attached to\n * the promise) to avoid that event being exposed as an error.\n */\nasync function interruptAndCheck(token) {\n    if (token === _utils_cancellation_js__WEBPACK_IMPORTED_MODULE_0__.CancellationToken.None) {\n        // Early exit in case cancellation was disabled by the caller\n        return;\n    }\n    const current = performance.now();\n    if (current - lastTick >= globalInterruptionPeriod) {\n        lastTick = current;\n        await delayNextTick();\n        // prevent calling delayNextTick every iteration of loop\n        // where delayNextTick takes up the majority or all of the\n        // globalInterruptionPeriod itself\n        lastTick = performance.now();\n    }\n    if (token.isCancellationRequested) {\n        throw OperationCancelled;\n    }\n}\n/**\n * Simple implementation of the deferred pattern.\n * An object that exposes a promise and functions to resolve and reject it.\n */\nclass Deferred {\n    constructor() {\n        this.promise = new Promise((resolve, reject) => {\n            this.resolve = (arg) => {\n                resolve(arg);\n                return this;\n            };\n            this.reject = (err) => {\n                reject(err);\n                return this;\n            };\n        });\n    }\n}\n//# sourceMappingURL=promise-utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2xhbmdpdW1AMy4zLjEvbm9kZV9tb2R1bGVzL2xhbmdpdW0vbGliL3V0aWxzL3Byb21pc2UtdXRpbHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ3NGO0FBQ3RGO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBLGVBQWUsMkVBQXVCO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQLGtCQUFrQixxRUFBaUI7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvZXRoYW5raW0vTmVzdG9yL21lZGZldGNoLmpzL25vZGVfbW9kdWxlcy8ucG5wbS9sYW5naXVtQDMuMy4xL25vZGVfbW9kdWxlcy9sYW5naXVtL2xpYi91dGlscy9wcm9taXNlLXV0aWxzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAqIENvcHlyaWdodCAyMDIxIFR5cGVGb3ggR21iSFxuICogVGhpcyBwcm9ncmFtIGFuZCB0aGUgYWNjb21wYW55aW5nIG1hdGVyaWFscyBhcmUgbWFkZSBhdmFpbGFibGUgdW5kZXIgdGhlXG4gKiB0ZXJtcyBvZiB0aGUgTUlUIExpY2Vuc2UsIHdoaWNoIGlzIGF2YWlsYWJsZSBpbiB0aGUgcHJvamVjdCByb290LlxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbmltcG9ydCB7IENhbmNlbGxhdGlvblRva2VuLCBDYW5jZWxsYXRpb25Ub2tlblNvdXJjZSB9IGZyb20gJy4uL3V0aWxzL2NhbmNlbGxhdGlvbi5qcyc7XG4vKipcbiAqIERlbGF5cyB0aGUgZXhlY3V0aW9uIG9mIHRoZSBjdXJyZW50IGNvZGUgdG8gdGhlIG5leHQgdGljayBvZiB0aGUgZXZlbnQgbG9vcC5cbiAqIERvbid0IGNhbGwgdGhpcyBtZXRob2QgZGlyZWN0bHkgaW4gYSB0aWdodCBsb29wIHRvIHByZXZlbnQgdG9vIG1hbnkgcHJvbWlzZXMgZnJvbSBiZWluZyBjcmVhdGVkLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZGVsYXlOZXh0VGljaygpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgICAgIC8vIEluIGNhc2Ugd2UgYXJlIHJ1bm5pbmcgaW4gYSBub24tbm9kZSBlbnZpcm9ubWVudCwgYHNldEltbWVkaWF0ZWAgaXNuJ3QgYXZhaWxhYmxlLlxuICAgICAgICAvLyBVc2luZyBgc2V0VGltZW91dGAgb2YgdGhlIGJyb3dzZXIgQVBJIGFjY29tcGxpc2hlcyB0aGUgc2FtZSByZXN1bHQuXG4gICAgICAgIGlmICh0eXBlb2Ygc2V0SW1tZWRpYXRlID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgc2V0VGltZW91dChyZXNvbHZlLCAwKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHNldEltbWVkaWF0ZShyZXNvbHZlKTtcbiAgICAgICAgfVxuICAgIH0pO1xufVxubGV0IGxhc3RUaWNrID0gMDtcbmxldCBnbG9iYWxJbnRlcnJ1cHRpb25QZXJpb2QgPSAxMDtcbi8qKlxuICogUmVzZXQgdGhlIGdsb2JhbCBpbnRlcnJ1cHRpb24gcGVyaW9kIGFuZCBjcmVhdGUgYSBjYW5jZWxsYXRpb24gdG9rZW4gc291cmNlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gc3RhcnRDYW5jZWxhYmxlT3BlcmF0aW9uKCkge1xuICAgIGxhc3RUaWNrID0gcGVyZm9ybWFuY2Uubm93KCk7XG4gICAgcmV0dXJuIG5ldyBDYW5jZWxsYXRpb25Ub2tlblNvdXJjZSgpO1xufVxuLyoqXG4gKiBDaGFuZ2UgdGhlIHBlcmlvZCBkdXJhdGlvbiBmb3IgYGludGVycnVwdEFuZENoZWNrYCB0byB0aGUgZ2l2ZW4gbnVtYmVyIG9mIG1pbGxpc2Vjb25kcy5cbiAqIFRoZSBkZWZhdWx0IHZhbHVlIGlzIDEwbXMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzZXRJbnRlcnJ1cHRpb25QZXJpb2QocGVyaW9kKSB7XG4gICAgZ2xvYmFsSW50ZXJydXB0aW9uUGVyaW9kID0gcGVyaW9kO1xufVxuLyoqXG4gKiBUaGlzIHN5bWJvbCBtYXkgYmUgdGhyb3duIGluIGFuIGFzeW5jaHJvbm91cyBjb250ZXh0IGJ5IGFueSBMYW5naXVtIHNlcnZpY2UgdGhhdCByZWNlaXZlc1xuICogYSBgQ2FuY2VsbGF0aW9uVG9rZW5gLiBUaGlzIG1lYW5zIHRoYXQgdGhlIHByb21pc2UgcmV0dXJuZWQgYnkgc3VjaCBhIHNlcnZpY2UgaXMgcmVqZWN0ZWQgd2l0aFxuICogdGhpcyBzeW1ib2wgYXMgcmVqZWN0aW9uIHJlYXNvbi5cbiAqL1xuZXhwb3J0IGNvbnN0IE9wZXJhdGlvbkNhbmNlbGxlZCA9IFN5bWJvbCgnT3BlcmF0aW9uQ2FuY2VsbGVkJyk7XG4vKipcbiAqIFVzZSB0aGlzIGluIGEgYGNhdGNoYCBibG9jayB0byBjaGVjayB3aGV0aGVyIHRoZSB0aHJvd24gb2JqZWN0IGluZGljYXRlcyB0aGF0IHRoZSBvcGVyYXRpb25cbiAqIGhhcyBiZWVuIGNhbmNlbGxlZC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzT3BlcmF0aW9uQ2FuY2VsbGVkKGVycikge1xuICAgIHJldHVybiBlcnIgPT09IE9wZXJhdGlvbkNhbmNlbGxlZDtcbn1cbi8qKlxuICogVGhpcyBmdW5jdGlvbiBkb2VzIHR3byB0aGluZ3M6XG4gKiAgMS4gQ2hlY2sgdGhlIGVsYXBzZWQgdGltZSBzaW5jZSB0aGUgbGFzdCBjYWxsIHRvIHRoaXMgZnVuY3Rpb24gb3IgdG8gYHN0YXJ0Q2FuY2VsYWJsZU9wZXJhdGlvbmAuIElmIHRoZSBwcmVkZWZpbmVkXG4gKiAgICAgcGVyaW9kIChjb25maWd1cmVkIHdpdGggYHNldEludGVycnVwdGlvblBlcmlvZGApIGlzIGV4Y2VlZGVkLCBleGVjdXRpb24gaXMgZGVsYXllZCB3aXRoIGBkZWxheU5leHRUaWNrYC5cbiAqICAyLiBJZiB0aGUgcHJlZGVmaW5lZCBwZXJpb2QgaXMgbm90IG1ldCB5ZXQgb3IgZXhlY3V0aW9uIGlzIHJlc3VtZWQgYWZ0ZXIgYW4gaW50ZXJydXB0aW9uLCB0aGUgZ2l2ZW4gY2FuY2VsbGF0aW9uXG4gKiAgICAgdG9rZW4gaXMgY2hlY2tlZCwgYW5kIGlmIGNhbmNlbGxhdGlvbiBpcyByZXF1ZXN0ZWQsIGBPcGVyYXRpb25DYW5jZWxlZGAgaXMgdGhyb3duLlxuICpcbiAqIEFsbCBzZXJ2aWNlcyBpbiBMYW5naXVtIHRoYXQgcmVjZWl2ZSBhIGBDYW5jZWxsYXRpb25Ub2tlbmAgbWF5IHBvdGVudGlhbGx5IGNhbGwgdGhpcyBmdW5jdGlvbiwgc28gdGhlXG4gKiBgQ2FuY2VsbGF0aW9uVG9rZW5gIG11c3QgYmUgY2F1Z2h0ICh3aXRoIGFuIGBhc3luY2AgdHJ5LWNhdGNoIGJsb2NrIG9yIGEgYGNhdGNoYCBjYWxsYmFjayBhdHRhY2hlZCB0b1xuICogdGhlIHByb21pc2UpIHRvIGF2b2lkIHRoYXQgZXZlbnQgYmVpbmcgZXhwb3NlZCBhcyBhbiBlcnJvci5cbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGludGVycnVwdEFuZENoZWNrKHRva2VuKSB7XG4gICAgaWYgKHRva2VuID09PSBDYW5jZWxsYXRpb25Ub2tlbi5Ob25lKSB7XG4gICAgICAgIC8vIEVhcmx5IGV4aXQgaW4gY2FzZSBjYW5jZWxsYXRpb24gd2FzIGRpc2FibGVkIGJ5IHRoZSBjYWxsZXJcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBjdXJyZW50ID0gcGVyZm9ybWFuY2Uubm93KCk7XG4gICAgaWYgKGN1cnJlbnQgLSBsYXN0VGljayA+PSBnbG9iYWxJbnRlcnJ1cHRpb25QZXJpb2QpIHtcbiAgICAgICAgbGFzdFRpY2sgPSBjdXJyZW50O1xuICAgICAgICBhd2FpdCBkZWxheU5leHRUaWNrKCk7XG4gICAgICAgIC8vIHByZXZlbnQgY2FsbGluZyBkZWxheU5leHRUaWNrIGV2ZXJ5IGl0ZXJhdGlvbiBvZiBsb29wXG4gICAgICAgIC8vIHdoZXJlIGRlbGF5TmV4dFRpY2sgdGFrZXMgdXAgdGhlIG1ham9yaXR5IG9yIGFsbCBvZiB0aGVcbiAgICAgICAgLy8gZ2xvYmFsSW50ZXJydXB0aW9uUGVyaW9kIGl0c2VsZlxuICAgICAgICBsYXN0VGljayA9IHBlcmZvcm1hbmNlLm5vdygpO1xuICAgIH1cbiAgICBpZiAodG9rZW4uaXNDYW5jZWxsYXRpb25SZXF1ZXN0ZWQpIHtcbiAgICAgICAgdGhyb3cgT3BlcmF0aW9uQ2FuY2VsbGVkO1xuICAgIH1cbn1cbi8qKlxuICogU2ltcGxlIGltcGxlbWVudGF0aW9uIG9mIHRoZSBkZWZlcnJlZCBwYXR0ZXJuLlxuICogQW4gb2JqZWN0IHRoYXQgZXhwb3NlcyBhIHByb21pc2UgYW5kIGZ1bmN0aW9ucyB0byByZXNvbHZlIGFuZCByZWplY3QgaXQuXG4gKi9cbmV4cG9ydCBjbGFzcyBEZWZlcnJlZCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMucHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgIHRoaXMucmVzb2x2ZSA9IChhcmcpID0+IHtcbiAgICAgICAgICAgICAgICByZXNvbHZlKGFyZyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdGhpcy5yZWplY3QgPSAoZXJyKSA9PiB7XG4gICAgICAgICAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9KTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wcm9taXNlLXV0aWxzLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/promise-utils.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/regexp-utils.js":
/*!******************************************************************************************!*\
  !*** ../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/regexp-utils.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   NEWLINE_REGEXP: () => (/* binding */ NEWLINE_REGEXP),\n/* harmony export */   escapeRegExp: () => (/* binding */ escapeRegExp),\n/* harmony export */   getCaseInsensitivePattern: () => (/* binding */ getCaseInsensitivePattern),\n/* harmony export */   getTerminalParts: () => (/* binding */ getTerminalParts),\n/* harmony export */   isMultilineComment: () => (/* binding */ isMultilineComment),\n/* harmony export */   isWhitespace: () => (/* binding */ isWhitespace),\n/* harmony export */   partialMatches: () => (/* binding */ partialMatches),\n/* harmony export */   partialRegExp: () => (/* binding */ partialRegExp),\n/* harmony export */   whitespaceCharacters: () => (/* binding */ whitespaceCharacters)\n/* harmony export */ });\n/* harmony import */ var _chevrotain_regexp_to_ast__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @chevrotain/regexp-to-ast */ \"(ssr)/../node_modules/.pnpm/@chevrotain+regexp-to-ast@11.0.3/node_modules/@chevrotain/regexp-to-ast/lib/src/api.js\");\n/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\nconst NEWLINE_REGEXP = /\\r?\\n/gm;\nconst regexpParser = new _chevrotain_regexp_to_ast__WEBPACK_IMPORTED_MODULE_0__.RegExpParser();\n/**\n * This class is in charge of heuristically identifying start/end tokens of terminals.\n *\n * The way this works is by doing the following:\n * 1. Traverse the regular expression in the \"start state\"\n * 2. Add any encountered sets/single characters to the \"start regexp\"\n * 3. Once we encounter any variable-length content (i.e. with quantifiers such as +/?/*), we enter the \"end state\"\n * 4. In the end state, any sets/single characters are added to an \"end stack\".\n * 5. If we re-encounter any variable-length content we reset the end stack\n * 6. We continue visiting the regex until the end, reseting the end stack and rebuilding it as necessary\n *\n * After traversing a regular expression the `startRegexp/endRegexp` properties allow access to the stored start/end of the terminal\n */\nclass TerminalRegExpVisitor extends _chevrotain_regexp_to_ast__WEBPACK_IMPORTED_MODULE_0__.BaseRegExpVisitor {\n    constructor() {\n        super(...arguments);\n        this.isStarting = true;\n        this.endRegexpStack = [];\n        this.multiline = false;\n    }\n    get endRegex() {\n        return this.endRegexpStack.join('');\n    }\n    reset(regex) {\n        this.multiline = false;\n        this.regex = regex;\n        this.startRegexp = '';\n        this.isStarting = true;\n        this.endRegexpStack = [];\n    }\n    visitGroup(node) {\n        if (node.quantifier) {\n            this.isStarting = false;\n            this.endRegexpStack = [];\n        }\n    }\n    visitCharacter(node) {\n        const char = String.fromCharCode(node.value);\n        if (!this.multiline && char === '\\n') {\n            this.multiline = true;\n        }\n        if (node.quantifier) {\n            this.isStarting = false;\n            this.endRegexpStack = [];\n        }\n        else {\n            const escapedChar = escapeRegExp(char);\n            this.endRegexpStack.push(escapedChar);\n            if (this.isStarting) {\n                this.startRegexp += escapedChar;\n            }\n        }\n    }\n    visitSet(node) {\n        if (!this.multiline) {\n            const set = this.regex.substring(node.loc.begin, node.loc.end);\n            const regex = new RegExp(set);\n            this.multiline = Boolean('\\n'.match(regex));\n        }\n        if (node.quantifier) {\n            this.isStarting = false;\n            this.endRegexpStack = [];\n        }\n        else {\n            const set = this.regex.substring(node.loc.begin, node.loc.end);\n            this.endRegexpStack.push(set);\n            if (this.isStarting) {\n                this.startRegexp += set;\n            }\n        }\n    }\n    visitChildren(node) {\n        if (node.type === 'Group') {\n            // Ignore children of groups with quantifier (+/*/?)\n            // These groups are unrelated to start/end tokens of terminals\n            const group = node;\n            if (group.quantifier) {\n                return;\n            }\n        }\n        super.visitChildren(node);\n    }\n}\nconst visitor = new TerminalRegExpVisitor();\nfunction getTerminalParts(regexp) {\n    try {\n        if (typeof regexp !== 'string') {\n            regexp = regexp.source;\n        }\n        regexp = `/${regexp}/`;\n        const pattern = regexpParser.pattern(regexp);\n        const parts = [];\n        for (const alternative of pattern.value.value) {\n            visitor.reset(regexp);\n            visitor.visit(alternative);\n            parts.push({\n                start: visitor.startRegexp,\n                end: visitor.endRegex\n            });\n        }\n        return parts;\n    }\n    catch (_a) {\n        return [];\n    }\n}\nfunction isMultilineComment(regexp) {\n    try {\n        if (typeof regexp === 'string') {\n            regexp = new RegExp(regexp);\n        }\n        regexp = regexp.toString();\n        visitor.reset(regexp);\n        // Parsing the pattern might fail (since it's user code)\n        visitor.visit(regexpParser.pattern(regexp));\n        return visitor.multiline;\n    }\n    catch (_a) {\n        return false;\n    }\n}\n/**\n * A set of all characters that are considered whitespace by the '\\s' RegExp character class.\n * Taken from [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_expressions/Character_classes).\n */\nconst whitespaceCharacters = ('\\f\\n\\r\\t\\v\\u0020\\u00a0\\u1680\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007' +\n    '\\u2008\\u2009\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff').split('');\nfunction isWhitespace(value) {\n    const regexp = typeof value === 'string' ? new RegExp(value) : value;\n    return whitespaceCharacters.some((ws) => regexp.test(ws));\n}\nfunction escapeRegExp(value) {\n    return value.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n}\nfunction getCaseInsensitivePattern(keyword) {\n    return Array.prototype.map.call(keyword, letter => /\\w/.test(letter) ? `[${letter.toLowerCase()}${letter.toUpperCase()}]` : escapeRegExp(letter)).join('');\n}\n/**\n * Determines whether the given input has a partial match with the specified regex.\n * @param regex The regex to partially match against\n * @param input The input string\n * @returns Whether any match exists.\n */\nfunction partialMatches(regex, input) {\n    const partial = partialRegExp(regex);\n    const match = input.match(partial);\n    return !!match && match[0].length > 0;\n}\n/**\n * Builds a partial regex from the input regex. A partial regex is able to match incomplete input strings. E.g.\n * a partial regex constructed from `/ab/` is able to match the string `a` without needing a following `b` character. However it won't match `b` alone.\n * @param regex The input regex to be converted.\n * @returns A partial regex constructed from the input regex.\n */\nfunction partialRegExp(regex) {\n    if (typeof regex === 'string') {\n        regex = new RegExp(regex);\n    }\n    const re = regex, source = regex.source;\n    let i = 0;\n    function process() {\n        let result = '', tmp;\n        function appendRaw(nbChars) {\n            result += source.substr(i, nbChars);\n            i += nbChars;\n        }\n        function appendOptional(nbChars) {\n            result += '(?:' + source.substr(i, nbChars) + '|$)';\n            i += nbChars;\n        }\n        while (i < source.length) {\n            switch (source[i]) {\n                case '\\\\':\n                    switch (source[i + 1]) {\n                        case 'c':\n                            appendOptional(3);\n                            break;\n                        case 'x':\n                            appendOptional(4);\n                            break;\n                        case 'u':\n                            if (re.unicode) {\n                                if (source[i + 2] === '{') {\n                                    appendOptional(source.indexOf('}', i) - i + 1);\n                                }\n                                else {\n                                    appendOptional(6);\n                                }\n                            }\n                            else {\n                                appendOptional(2);\n                            }\n                            break;\n                        case 'p':\n                        case 'P':\n                            if (re.unicode) {\n                                appendOptional(source.indexOf('}', i) - i + 1);\n                            }\n                            else {\n                                appendOptional(2);\n                            }\n                            break;\n                        case 'k':\n                            appendOptional(source.indexOf('>', i) - i + 1);\n                            break;\n                        default:\n                            appendOptional(2);\n                            break;\n                    }\n                    break;\n                case '[':\n                    tmp = /\\[(?:\\\\.|.)*?\\]/g;\n                    tmp.lastIndex = i;\n                    tmp = tmp.exec(source) || [];\n                    appendOptional(tmp[0].length);\n                    break;\n                case '|':\n                case '^':\n                case '$':\n                case '*':\n                case '+':\n                case '?':\n                    appendRaw(1);\n                    break;\n                case '{':\n                    tmp = /\\{\\d+,?\\d*\\}/g;\n                    tmp.lastIndex = i;\n                    tmp = tmp.exec(source);\n                    if (tmp) {\n                        appendRaw(tmp[0].length);\n                    }\n                    else {\n                        appendOptional(1);\n                    }\n                    break;\n                case '(':\n                    if (source[i + 1] === '?') {\n                        switch (source[i + 2]) {\n                            case ':':\n                                result += '(?:';\n                                i += 3;\n                                result += process() + '|$)';\n                                break;\n                            case '=':\n                                result += '(?=';\n                                i += 3;\n                                result += process() + ')';\n                                break;\n                            case '!':\n                                tmp = i;\n                                i += 3;\n                                process();\n                                result += source.substr(tmp, i - tmp);\n                                break;\n                            case '<':\n                                switch (source[i + 3]) {\n                                    case '=':\n                                    case '!':\n                                        tmp = i;\n                                        i += 4;\n                                        process();\n                                        result += source.substr(tmp, i - tmp);\n                                        break;\n                                    default:\n                                        appendRaw(source.indexOf('>', i) - i + 1);\n                                        result += process() + '|$)';\n                                        break;\n                                }\n                                break;\n                        }\n                    }\n                    else {\n                        appendRaw(1);\n                        result += process() + '|$)';\n                    }\n                    break;\n                case ')':\n                    ++i;\n                    return result;\n                default:\n                    appendOptional(1);\n                    break;\n            }\n        }\n        return result;\n    }\n    return new RegExp(process(), regex.flags);\n}\n//# sourceMappingURL=regexp-utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/regexp-utils.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/stream.js":
/*!************************************************************************************!*\
  !*** ../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/stream.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DONE_RESULT: () => (/* binding */ DONE_RESULT),\n/* harmony export */   EMPTY_STREAM: () => (/* binding */ EMPTY_STREAM),\n/* harmony export */   Reduction: () => (/* binding */ Reduction),\n/* harmony export */   StreamImpl: () => (/* binding */ StreamImpl),\n/* harmony export */   TreeStreamImpl: () => (/* binding */ TreeStreamImpl),\n/* harmony export */   stream: () => (/* binding */ stream)\n/* harmony export */ });\n/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n/**\n * The default implementation of `Stream` works with two input functions:\n *  - The first function creates the initial state of an iteration.\n *  - The second function gets the current state as argument and returns an `IteratorResult`.\n */\nclass StreamImpl {\n    constructor(startFn, nextFn) {\n        this.startFn = startFn;\n        this.nextFn = nextFn;\n    }\n    iterator() {\n        const iterator = {\n            state: this.startFn(),\n            next: () => this.nextFn(iterator.state),\n            [Symbol.iterator]: () => iterator\n        };\n        return iterator;\n    }\n    [Symbol.iterator]() {\n        return this.iterator();\n    }\n    isEmpty() {\n        const iterator = this.iterator();\n        return Boolean(iterator.next().done);\n    }\n    count() {\n        const iterator = this.iterator();\n        let count = 0;\n        let next = iterator.next();\n        while (!next.done) {\n            count++;\n            next = iterator.next();\n        }\n        return count;\n    }\n    toArray() {\n        const result = [];\n        const iterator = this.iterator();\n        let next;\n        do {\n            next = iterator.next();\n            if (next.value !== undefined) {\n                result.push(next.value);\n            }\n        } while (!next.done);\n        return result;\n    }\n    toSet() {\n        return new Set(this);\n    }\n    toMap(keyFn, valueFn) {\n        const entryStream = this.map(element => [\n            keyFn ? keyFn(element) : element,\n            valueFn ? valueFn(element) : element\n        ]);\n        return new Map(entryStream);\n    }\n    toString() {\n        return this.join();\n    }\n    concat(other) {\n        return new StreamImpl(() => ({ first: this.startFn(), firstDone: false, iterator: other[Symbol.iterator]() }), state => {\n            let result;\n            if (!state.firstDone) {\n                do {\n                    result = this.nextFn(state.first);\n                    if (!result.done) {\n                        return result;\n                    }\n                } while (!result.done);\n                state.firstDone = true;\n            }\n            do {\n                result = state.iterator.next();\n                if (!result.done) {\n                    return result;\n                }\n            } while (!result.done);\n            return DONE_RESULT;\n        });\n    }\n    join(separator = ',') {\n        const iterator = this.iterator();\n        let value = '';\n        let result;\n        let addSeparator = false;\n        do {\n            result = iterator.next();\n            if (!result.done) {\n                if (addSeparator) {\n                    value += separator;\n                }\n                value += toString(result.value);\n            }\n            addSeparator = true;\n        } while (!result.done);\n        return value;\n    }\n    indexOf(searchElement, fromIndex = 0) {\n        const iterator = this.iterator();\n        let index = 0;\n        let next = iterator.next();\n        while (!next.done) {\n            if (index >= fromIndex && next.value === searchElement) {\n                return index;\n            }\n            next = iterator.next();\n            index++;\n        }\n        return -1;\n    }\n    every(predicate) {\n        const iterator = this.iterator();\n        let next = iterator.next();\n        while (!next.done) {\n            if (!predicate(next.value)) {\n                return false;\n            }\n            next = iterator.next();\n        }\n        return true;\n    }\n    some(predicate) {\n        const iterator = this.iterator();\n        let next = iterator.next();\n        while (!next.done) {\n            if (predicate(next.value)) {\n                return true;\n            }\n            next = iterator.next();\n        }\n        return false;\n    }\n    forEach(callbackfn) {\n        const iterator = this.iterator();\n        let index = 0;\n        let next = iterator.next();\n        while (!next.done) {\n            callbackfn(next.value, index);\n            next = iterator.next();\n            index++;\n        }\n    }\n    map(callbackfn) {\n        return new StreamImpl(this.startFn, (state) => {\n            const { done, value } = this.nextFn(state);\n            if (done) {\n                return DONE_RESULT;\n            }\n            else {\n                return { done: false, value: callbackfn(value) };\n            }\n        });\n    }\n    filter(predicate) {\n        return new StreamImpl(this.startFn, state => {\n            let result;\n            do {\n                result = this.nextFn(state);\n                if (!result.done && predicate(result.value)) {\n                    return result;\n                }\n            } while (!result.done);\n            return DONE_RESULT;\n        });\n    }\n    nonNullable() {\n        return this.filter(e => e !== undefined && e !== null);\n    }\n    reduce(callbackfn, initialValue) {\n        const iterator = this.iterator();\n        let previousValue = initialValue;\n        let next = iterator.next();\n        while (!next.done) {\n            if (previousValue === undefined) {\n                previousValue = next.value;\n            }\n            else {\n                previousValue = callbackfn(previousValue, next.value);\n            }\n            next = iterator.next();\n        }\n        return previousValue;\n    }\n    reduceRight(callbackfn, initialValue) {\n        return this.recursiveReduce(this.iterator(), callbackfn, initialValue);\n    }\n    recursiveReduce(iterator, callbackfn, initialValue) {\n        const next = iterator.next();\n        if (next.done) {\n            return initialValue;\n        }\n        const previousValue = this.recursiveReduce(iterator, callbackfn, initialValue);\n        if (previousValue === undefined) {\n            return next.value;\n        }\n        return callbackfn(previousValue, next.value);\n    }\n    find(predicate) {\n        const iterator = this.iterator();\n        let next = iterator.next();\n        while (!next.done) {\n            if (predicate(next.value)) {\n                return next.value;\n            }\n            next = iterator.next();\n        }\n        return undefined;\n    }\n    findIndex(predicate) {\n        const iterator = this.iterator();\n        let index = 0;\n        let next = iterator.next();\n        while (!next.done) {\n            if (predicate(next.value)) {\n                return index;\n            }\n            next = iterator.next();\n            index++;\n        }\n        return -1;\n    }\n    includes(searchElement) {\n        const iterator = this.iterator();\n        let next = iterator.next();\n        while (!next.done) {\n            if (next.value === searchElement) {\n                return true;\n            }\n            next = iterator.next();\n        }\n        return false;\n    }\n    flatMap(callbackfn) {\n        return new StreamImpl(() => ({ this: this.startFn() }), (state) => {\n            do {\n                if (state.iterator) {\n                    const next = state.iterator.next();\n                    if (next.done) {\n                        state.iterator = undefined;\n                    }\n                    else {\n                        return next;\n                    }\n                }\n                const { done, value } = this.nextFn(state.this);\n                if (!done) {\n                    const mapped = callbackfn(value);\n                    if (isIterable(mapped)) {\n                        state.iterator = mapped[Symbol.iterator]();\n                    }\n                    else {\n                        return { done: false, value: mapped };\n                    }\n                }\n            } while (state.iterator);\n            return DONE_RESULT;\n        });\n    }\n    flat(depth) {\n        if (depth === undefined) {\n            depth = 1;\n        }\n        if (depth <= 0) {\n            return this;\n        }\n        const stream = depth > 1 ? this.flat(depth - 1) : this;\n        return new StreamImpl(() => ({ this: stream.startFn() }), (state) => {\n            do {\n                if (state.iterator) {\n                    const next = state.iterator.next();\n                    if (next.done) {\n                        state.iterator = undefined;\n                    }\n                    else {\n                        return next;\n                    }\n                }\n                const { done, value } = stream.nextFn(state.this);\n                if (!done) {\n                    if (isIterable(value)) {\n                        state.iterator = value[Symbol.iterator]();\n                    }\n                    else {\n                        return { done: false, value: value };\n                    }\n                }\n            } while (state.iterator);\n            return DONE_RESULT;\n        });\n    }\n    head() {\n        const iterator = this.iterator();\n        const result = iterator.next();\n        if (result.done) {\n            return undefined;\n        }\n        return result.value;\n    }\n    tail(skipCount = 1) {\n        return new StreamImpl(() => {\n            const state = this.startFn();\n            for (let i = 0; i < skipCount; i++) {\n                const next = this.nextFn(state);\n                if (next.done) {\n                    return state;\n                }\n            }\n            return state;\n        }, this.nextFn);\n    }\n    limit(maxSize) {\n        return new StreamImpl(() => ({ size: 0, state: this.startFn() }), state => {\n            state.size++;\n            if (state.size > maxSize) {\n                return DONE_RESULT;\n            }\n            return this.nextFn(state.state);\n        });\n    }\n    distinct(by) {\n        return new StreamImpl(() => ({ set: new Set(), internalState: this.startFn() }), state => {\n            let result;\n            do {\n                result = this.nextFn(state.internalState);\n                if (!result.done) {\n                    const value = by ? by(result.value) : result.value;\n                    if (!state.set.has(value)) {\n                        state.set.add(value);\n                        return result;\n                    }\n                }\n            } while (!result.done);\n            return DONE_RESULT;\n        });\n    }\n    exclude(other, key) {\n        const otherKeySet = new Set();\n        for (const item of other) {\n            const value = key ? key(item) : item;\n            otherKeySet.add(value);\n        }\n        return this.filter(e => {\n            const ownKey = key ? key(e) : e;\n            return !otherKeySet.has(ownKey);\n        });\n    }\n}\nfunction toString(item) {\n    if (typeof item === 'string') {\n        return item;\n    }\n    if (typeof item === 'undefined') {\n        return 'undefined';\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    if (typeof item.toString === 'function') {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        return item.toString();\n    }\n    return Object.prototype.toString.call(item);\n}\nfunction isIterable(obj) {\n    return !!obj && typeof obj[Symbol.iterator] === 'function';\n}\n/**\n * An empty stream of any type.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst EMPTY_STREAM = new StreamImpl(() => undefined, () => DONE_RESULT);\n/**\n * Use this `IteratorResult` when implementing a `StreamImpl` to indicate that there are no more elements in the stream.\n */\nconst DONE_RESULT = Object.freeze({ done: true, value: undefined });\n/**\n * Create a stream from one or more iterables or array-likes.\n */\nfunction stream(...collections) {\n    if (collections.length === 1) {\n        const collection = collections[0];\n        if (collection instanceof StreamImpl) {\n            return collection;\n        }\n        if (isIterable(collection)) {\n            return new StreamImpl(() => collection[Symbol.iterator](), (iterator) => iterator.next());\n        }\n        if (typeof collection.length === 'number') {\n            return new StreamImpl(() => ({ index: 0 }), (state) => {\n                if (state.index < collection.length) {\n                    return { done: false, value: collection[state.index++] };\n                }\n                else {\n                    return DONE_RESULT;\n                }\n            });\n        }\n    }\n    if (collections.length > 1) {\n        return new StreamImpl(() => ({ collIndex: 0, arrIndex: 0 }), (state) => {\n            do {\n                if (state.iterator) {\n                    const next = state.iterator.next();\n                    if (!next.done) {\n                        return next;\n                    }\n                    state.iterator = undefined;\n                }\n                if (state.array) {\n                    if (state.arrIndex < state.array.length) {\n                        return { done: false, value: state.array[state.arrIndex++] };\n                    }\n                    state.array = undefined;\n                    state.arrIndex = 0;\n                }\n                if (state.collIndex < collections.length) {\n                    const collection = collections[state.collIndex++];\n                    if (isIterable(collection)) {\n                        state.iterator = collection[Symbol.iterator]();\n                    }\n                    else if (collection && typeof collection.length === 'number') {\n                        state.array = collection;\n                    }\n                }\n            } while (state.iterator || state.array || state.collIndex < collections.length);\n            return DONE_RESULT;\n        });\n    }\n    return EMPTY_STREAM;\n}\n/**\n * The default implementation of `TreeStream` takes a root element and a function that computes the\n * children of its argument. Whether the root node included in the stream is controlled with the\n * `includeRoot` option, which defaults to `false`.\n */\nclass TreeStreamImpl extends StreamImpl {\n    constructor(root, children, options) {\n        super(() => ({\n            iterators: (options === null || options === void 0 ? void 0 : options.includeRoot) ? [[root][Symbol.iterator]()] : [children(root)[Symbol.iterator]()],\n            pruned: false\n        }), state => {\n            if (state.pruned) {\n                state.iterators.pop();\n                state.pruned = false;\n            }\n            while (state.iterators.length > 0) {\n                const iterator = state.iterators[state.iterators.length - 1];\n                const next = iterator.next();\n                if (next.done) {\n                    state.iterators.pop();\n                }\n                else {\n                    state.iterators.push(children(next.value)[Symbol.iterator]());\n                    return next;\n                }\n            }\n            return DONE_RESULT;\n        });\n    }\n    iterator() {\n        const iterator = {\n            state: this.startFn(),\n            next: () => this.nextFn(iterator.state),\n            prune: () => {\n                iterator.state.pruned = true;\n            },\n            [Symbol.iterator]: () => iterator\n        };\n        return iterator;\n    }\n}\n/**\n * A set of utility functions that reduce a stream to a single value.\n */\nvar Reduction;\n(function (Reduction) {\n    /**\n     * Compute the sum of a number stream.\n     */\n    function sum(stream) {\n        return stream.reduce((a, b) => a + b, 0);\n    }\n    Reduction.sum = sum;\n    /**\n     * Compute the product of a number stream.\n     */\n    function product(stream) {\n        return stream.reduce((a, b) => a * b, 0);\n    }\n    Reduction.product = product;\n    /**\n     * Compute the minimum of a number stream. Returns `undefined` if the stream is empty.\n     */\n    function min(stream) {\n        return stream.reduce((a, b) => Math.min(a, b));\n    }\n    Reduction.min = min;\n    /**\n     * Compute the maximum of a number stream. Returns `undefined` if the stream is empty.\n     */\n    function max(stream) {\n        return stream.reduce((a, b) => Math.max(a, b));\n    }\n    Reduction.max = max;\n})(Reduction || (Reduction = {}));\n//# sourceMappingURL=stream.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/stream.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/uri-utils.js":
/*!***************************************************************************************!*\
  !*** ../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/uri-utils.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   URI: () => (/* reexport safe */ vscode_uri__WEBPACK_IMPORTED_MODULE_0__.URI),\n/* harmony export */   UriUtils: () => (/* binding */ UriUtils)\n/* harmony export */ });\n/* harmony import */ var vscode_uri__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vscode-uri */ \"(ssr)/../node_modules/.pnpm/vscode-uri@3.0.8/node_modules/vscode-uri/lib/esm/index.mjs\");\n/******************************************************************************\n * Copyright 2022 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\n\nvar UriUtils;\n(function (UriUtils) {\n    UriUtils.basename = vscode_uri__WEBPACK_IMPORTED_MODULE_0__.Utils.basename;\n    UriUtils.dirname = vscode_uri__WEBPACK_IMPORTED_MODULE_0__.Utils.dirname;\n    UriUtils.extname = vscode_uri__WEBPACK_IMPORTED_MODULE_0__.Utils.extname;\n    UriUtils.joinPath = vscode_uri__WEBPACK_IMPORTED_MODULE_0__.Utils.joinPath;\n    UriUtils.resolvePath = vscode_uri__WEBPACK_IMPORTED_MODULE_0__.Utils.resolvePath;\n    function equals(a, b) {\n        return (a === null || a === void 0 ? void 0 : a.toString()) === (b === null || b === void 0 ? void 0 : b.toString());\n    }\n    UriUtils.equals = equals;\n    function relative(from, to) {\n        const fromPath = typeof from === 'string' ? from : from.path;\n        const toPath = typeof to === 'string' ? to : to.path;\n        const fromParts = fromPath.split('/').filter(e => e.length > 0);\n        const toParts = toPath.split('/').filter(e => e.length > 0);\n        let i = 0;\n        for (; i < fromParts.length; i++) {\n            if (fromParts[i] !== toParts[i]) {\n                break;\n            }\n        }\n        const backPart = '../'.repeat(fromParts.length - i);\n        const toPart = toParts.slice(i).join('/');\n        return backPart + toPart;\n    }\n    UriUtils.relative = relative;\n    function normalize(uri) {\n        return vscode_uri__WEBPACK_IMPORTED_MODULE_0__.URI.parse(uri.toString()).toString();\n    }\n    UriUtils.normalize = normalize;\n})(UriUtils || (UriUtils = {}));\n//# sourceMappingURL=uri-utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2xhbmdpdW1AMy4zLjEvbm9kZV9tb2R1bGVzL2xhbmdpdW0vbGliL3V0aWxzL3VyaS11dGlscy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ3dDO0FBQ3pCO0FBQ1I7QUFDUDtBQUNBLHdCQUF3Qiw2Q0FBSztBQUM3Qix1QkFBdUIsNkNBQUs7QUFDNUIsdUJBQXVCLDZDQUFLO0FBQzVCLHdCQUF3Qiw2Q0FBSztBQUM3QiwyQkFBMkIsNkNBQUs7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLHNCQUFzQjtBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsMkNBQUc7QUFDbEI7QUFDQTtBQUNBLENBQUMsNEJBQTRCO0FBQzdCIiwic291cmNlcyI6WyIvVXNlcnMvZXRoYW5raW0vTmVzdG9yL21lZGZldGNoLmpzL25vZGVfbW9kdWxlcy8ucG5wbS9sYW5naXVtQDMuMy4xL25vZGVfbW9kdWxlcy9sYW5naXVtL2xpYi91dGlscy91cmktdXRpbHMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuICogQ29weXJpZ2h0IDIwMjIgVHlwZUZveCBHbWJIXG4gKiBUaGlzIHByb2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzIGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0aGVcbiAqIHRlcm1zIG9mIHRoZSBNSVQgTGljZW5zZSwgd2hpY2ggaXMgYXZhaWxhYmxlIGluIHRoZSBwcm9qZWN0IHJvb3QuXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuaW1wb3J0IHsgVVJJLCBVdGlscyB9IGZyb20gJ3ZzY29kZS11cmknO1xuZXhwb3J0IHsgVVJJIH07XG5leHBvcnQgdmFyIFVyaVV0aWxzO1xuKGZ1bmN0aW9uIChVcmlVdGlscykge1xuICAgIFVyaVV0aWxzLmJhc2VuYW1lID0gVXRpbHMuYmFzZW5hbWU7XG4gICAgVXJpVXRpbHMuZGlybmFtZSA9IFV0aWxzLmRpcm5hbWU7XG4gICAgVXJpVXRpbHMuZXh0bmFtZSA9IFV0aWxzLmV4dG5hbWU7XG4gICAgVXJpVXRpbHMuam9pblBhdGggPSBVdGlscy5qb2luUGF0aDtcbiAgICBVcmlVdGlscy5yZXNvbHZlUGF0aCA9IFV0aWxzLnJlc29sdmVQYXRoO1xuICAgIGZ1bmN0aW9uIGVxdWFscyhhLCBiKSB7XG4gICAgICAgIHJldHVybiAoYSA9PT0gbnVsbCB8fCBhID09PSB2b2lkIDAgPyB2b2lkIDAgOiBhLnRvU3RyaW5nKCkpID09PSAoYiA9PT0gbnVsbCB8fCBiID09PSB2b2lkIDAgPyB2b2lkIDAgOiBiLnRvU3RyaW5nKCkpO1xuICAgIH1cbiAgICBVcmlVdGlscy5lcXVhbHMgPSBlcXVhbHM7XG4gICAgZnVuY3Rpb24gcmVsYXRpdmUoZnJvbSwgdG8pIHtcbiAgICAgICAgY29uc3QgZnJvbVBhdGggPSB0eXBlb2YgZnJvbSA9PT0gJ3N0cmluZycgPyBmcm9tIDogZnJvbS5wYXRoO1xuICAgICAgICBjb25zdCB0b1BhdGggPSB0eXBlb2YgdG8gPT09ICdzdHJpbmcnID8gdG8gOiB0by5wYXRoO1xuICAgICAgICBjb25zdCBmcm9tUGFydHMgPSBmcm9tUGF0aC5zcGxpdCgnLycpLmZpbHRlcihlID0+IGUubGVuZ3RoID4gMCk7XG4gICAgICAgIGNvbnN0IHRvUGFydHMgPSB0b1BhdGguc3BsaXQoJy8nKS5maWx0ZXIoZSA9PiBlLmxlbmd0aCA+IDApO1xuICAgICAgICBsZXQgaSA9IDA7XG4gICAgICAgIGZvciAoOyBpIDwgZnJvbVBhcnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoZnJvbVBhcnRzW2ldICE9PSB0b1BhcnRzW2ldKSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgYmFja1BhcnQgPSAnLi4vJy5yZXBlYXQoZnJvbVBhcnRzLmxlbmd0aCAtIGkpO1xuICAgICAgICBjb25zdCB0b1BhcnQgPSB0b1BhcnRzLnNsaWNlKGkpLmpvaW4oJy8nKTtcbiAgICAgICAgcmV0dXJuIGJhY2tQYXJ0ICsgdG9QYXJ0O1xuICAgIH1cbiAgICBVcmlVdGlscy5yZWxhdGl2ZSA9IHJlbGF0aXZlO1xuICAgIGZ1bmN0aW9uIG5vcm1hbGl6ZSh1cmkpIHtcbiAgICAgICAgcmV0dXJuIFVSSS5wYXJzZSh1cmkudG9TdHJpbmcoKSkudG9TdHJpbmcoKTtcbiAgICB9XG4gICAgVXJpVXRpbHMubm9ybWFsaXplID0gbm9ybWFsaXplO1xufSkoVXJpVXRpbHMgfHwgKFVyaVV0aWxzID0ge30pKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXVyaS11dGlscy5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/uri-utils.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/validation/document-validator.js":
/*!*****************************************************************************************************!*\
  !*** ../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/validation/document-validator.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DefaultDocumentValidator: () => (/* binding */ DefaultDocumentValidator),\n/* harmony export */   DocumentValidator: () => (/* binding */ DocumentValidator),\n/* harmony export */   getDiagnosticRange: () => (/* binding */ getDiagnosticRange),\n/* harmony export */   toDiagnosticData: () => (/* binding */ toDiagnosticData),\n/* harmony export */   toDiagnosticSeverity: () => (/* binding */ toDiagnosticSeverity)\n/* harmony export */ });\n/* harmony import */ var _utils_cancellation_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/cancellation.js */ \"(ssr)/../node_modules/.pnpm/vscode-jsonrpc@8.2.0/node_modules/vscode-jsonrpc/lib/common/cancellation.js\");\n/* harmony import */ var _utils_grammar_utils_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/grammar-utils.js */ \"(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/grammar-utils.js\");\n/* harmony import */ var _utils_ast_utils_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/ast-utils.js */ \"(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/ast-utils.js\");\n/* harmony import */ var _utils_cst_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/cst-utils.js */ \"(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/cst-utils.js\");\n/* harmony import */ var _utils_promise_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/promise-utils.js */ \"(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/promise-utils.js\");\n/* harmony import */ var _validation_registry_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./validation-registry.js */ \"(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/validation/validation-registry.js\");\n/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\n\n\n\n\n\nclass DefaultDocumentValidator {\n    constructor(services) {\n        this.validationRegistry = services.validation.ValidationRegistry;\n        this.metadata = services.LanguageMetaData;\n    }\n    async validateDocument(document, options = {}, cancelToken = _utils_cancellation_js__WEBPACK_IMPORTED_MODULE_0__.CancellationToken.None) {\n        const parseResult = document.parseResult;\n        const diagnostics = [];\n        await (0,_utils_promise_utils_js__WEBPACK_IMPORTED_MODULE_1__.interruptAndCheck)(cancelToken);\n        if (!options.categories || options.categories.includes('built-in')) {\n            this.processLexingErrors(parseResult, diagnostics, options);\n            if (options.stopAfterLexingErrors && diagnostics.some(d => { var _a; return ((_a = d.data) === null || _a === void 0 ? void 0 : _a.code) === DocumentValidator.LexingError; })) {\n                return diagnostics;\n            }\n            this.processParsingErrors(parseResult, diagnostics, options);\n            if (options.stopAfterParsingErrors && diagnostics.some(d => { var _a; return ((_a = d.data) === null || _a === void 0 ? void 0 : _a.code) === DocumentValidator.ParsingError; })) {\n                return diagnostics;\n            }\n            this.processLinkingErrors(document, diagnostics, options);\n            if (options.stopAfterLinkingErrors && diagnostics.some(d => { var _a; return ((_a = d.data) === null || _a === void 0 ? void 0 : _a.code) === DocumentValidator.LinkingError; })) {\n                return diagnostics;\n            }\n        }\n        // Process custom validations\n        try {\n            diagnostics.push(...await this.validateAst(parseResult.value, options, cancelToken));\n        }\n        catch (err) {\n            if ((0,_utils_promise_utils_js__WEBPACK_IMPORTED_MODULE_1__.isOperationCancelled)(err)) {\n                throw err;\n            }\n            console.error('An error occurred during validation:', err);\n        }\n        await (0,_utils_promise_utils_js__WEBPACK_IMPORTED_MODULE_1__.interruptAndCheck)(cancelToken);\n        return diagnostics;\n    }\n    processLexingErrors(parseResult, diagnostics, _options) {\n        var _a, _b, _c;\n        const lexerDiagnostics = [...parseResult.lexerErrors, ...(_b = (_a = parseResult.lexerReport) === null || _a === void 0 ? void 0 : _a.diagnostics) !== null && _b !== void 0 ? _b : []];\n        for (const lexerDiagnostic of lexerDiagnostics) {\n            const severity = (_c = lexerDiagnostic.severity) !== null && _c !== void 0 ? _c : 'error';\n            const diagnostic = {\n                severity: toDiagnosticSeverity(severity),\n                range: {\n                    start: {\n                        line: lexerDiagnostic.line - 1,\n                        character: lexerDiagnostic.column - 1\n                    },\n                    end: {\n                        line: lexerDiagnostic.line - 1,\n                        character: lexerDiagnostic.column + lexerDiagnostic.length - 1\n                    }\n                },\n                message: lexerDiagnostic.message,\n                data: toDiagnosticData(severity),\n                source: this.getSource()\n            };\n            diagnostics.push(diagnostic);\n        }\n    }\n    processParsingErrors(parseResult, diagnostics, _options) {\n        for (const parserError of parseResult.parserErrors) {\n            let range = undefined;\n            // We can run into the chevrotain error recovery here\n            // The token contained in the parser error might be automatically inserted\n            // In this case every position value will be `NaN`\n            if (isNaN(parserError.token.startOffset)) {\n                // Some special parser error types contain a `previousToken`\n                // We can simply append our diagnostic to that token\n                if ('previousToken' in parserError) {\n                    const token = parserError.previousToken;\n                    if (!isNaN(token.startOffset)) {\n                        const position = { line: token.endLine - 1, character: token.endColumn };\n                        range = { start: position, end: position };\n                    }\n                    else {\n                        // No valid prev token. Might be empty document or containing only hidden tokens.\n                        // Point to document start\n                        const position = { line: 0, character: 0 };\n                        range = { start: position, end: position };\n                    }\n                }\n            }\n            else {\n                range = (0,_utils_cst_utils_js__WEBPACK_IMPORTED_MODULE_2__.tokenToRange)(parserError.token);\n            }\n            if (range) {\n                const diagnostic = {\n                    severity: toDiagnosticSeverity('error'),\n                    range,\n                    message: parserError.message,\n                    data: (0,_validation_registry_js__WEBPACK_IMPORTED_MODULE_3__.diagnosticData)(DocumentValidator.ParsingError),\n                    source: this.getSource()\n                };\n                diagnostics.push(diagnostic);\n            }\n        }\n    }\n    processLinkingErrors(document, diagnostics, _options) {\n        for (const reference of document.references) {\n            const linkingError = reference.error;\n            if (linkingError) {\n                const info = {\n                    node: linkingError.container,\n                    property: linkingError.property,\n                    index: linkingError.index,\n                    data: {\n                        code: DocumentValidator.LinkingError,\n                        containerType: linkingError.container.$type,\n                        property: linkingError.property,\n                        refText: linkingError.reference.$refText\n                    }\n                };\n                diagnostics.push(this.toDiagnostic('error', linkingError.message, info));\n            }\n        }\n    }\n    async validateAst(rootNode, options, cancelToken = _utils_cancellation_js__WEBPACK_IMPORTED_MODULE_0__.CancellationToken.None) {\n        const validationItems = [];\n        const acceptor = (severity, message, info) => {\n            validationItems.push(this.toDiagnostic(severity, message, info));\n        };\n        await this.validateAstBefore(rootNode, options, acceptor, cancelToken);\n        await this.validateAstNodes(rootNode, options, acceptor, cancelToken);\n        await this.validateAstAfter(rootNode, options, acceptor, cancelToken);\n        return validationItems;\n    }\n    async validateAstBefore(rootNode, options, acceptor, cancelToken = _utils_cancellation_js__WEBPACK_IMPORTED_MODULE_0__.CancellationToken.None) {\n        var _a;\n        const checksBefore = this.validationRegistry.checksBefore;\n        for (const checkBefore of checksBefore) {\n            await (0,_utils_promise_utils_js__WEBPACK_IMPORTED_MODULE_1__.interruptAndCheck)(cancelToken);\n            await checkBefore(rootNode, acceptor, (_a = options.categories) !== null && _a !== void 0 ? _a : [], cancelToken);\n        }\n    }\n    async validateAstNodes(rootNode, options, acceptor, cancelToken = _utils_cancellation_js__WEBPACK_IMPORTED_MODULE_0__.CancellationToken.None) {\n        await Promise.all((0,_utils_ast_utils_js__WEBPACK_IMPORTED_MODULE_4__.streamAst)(rootNode).map(async (node) => {\n            await (0,_utils_promise_utils_js__WEBPACK_IMPORTED_MODULE_1__.interruptAndCheck)(cancelToken);\n            const checks = this.validationRegistry.getChecks(node.$type, options.categories);\n            for (const check of checks) {\n                await check(node, acceptor, cancelToken);\n            }\n        }));\n    }\n    async validateAstAfter(rootNode, options, acceptor, cancelToken = _utils_cancellation_js__WEBPACK_IMPORTED_MODULE_0__.CancellationToken.None) {\n        var _a;\n        const checksAfter = this.validationRegistry.checksAfter;\n        for (const checkAfter of checksAfter) {\n            await (0,_utils_promise_utils_js__WEBPACK_IMPORTED_MODULE_1__.interruptAndCheck)(cancelToken);\n            await checkAfter(rootNode, acceptor, (_a = options.categories) !== null && _a !== void 0 ? _a : [], cancelToken);\n        }\n    }\n    toDiagnostic(severity, message, info) {\n        return {\n            message,\n            range: getDiagnosticRange(info),\n            severity: toDiagnosticSeverity(severity),\n            code: info.code,\n            codeDescription: info.codeDescription,\n            tags: info.tags,\n            relatedInformation: info.relatedInformation,\n            data: info.data,\n            source: this.getSource()\n        };\n    }\n    getSource() {\n        return this.metadata.languageId;\n    }\n}\nfunction getDiagnosticRange(info) {\n    if (info.range) {\n        return info.range;\n    }\n    let cstNode;\n    if (typeof info.property === 'string') {\n        cstNode = (0,_utils_grammar_utils_js__WEBPACK_IMPORTED_MODULE_5__.findNodeForProperty)(info.node.$cstNode, info.property, info.index);\n    }\n    else if (typeof info.keyword === 'string') {\n        cstNode = (0,_utils_grammar_utils_js__WEBPACK_IMPORTED_MODULE_5__.findNodeForKeyword)(info.node.$cstNode, info.keyword, info.index);\n    }\n    cstNode !== null && cstNode !== void 0 ? cstNode : (cstNode = info.node.$cstNode);\n    if (!cstNode) {\n        return {\n            start: { line: 0, character: 0 },\n            end: { line: 0, character: 0 }\n        };\n    }\n    return cstNode.range;\n}\n/**\n * Transforms the diagnostic severity from the {@link LexingDiagnosticSeverity} format to LSP's `DiagnosticSeverity` format.\n *\n * @param severity The lexing diagnostic severity\n * @returns Diagnostic severity according to `vscode-languageserver-types/lib/esm/main.js#DiagnosticSeverity`\n */\nfunction toDiagnosticSeverity(severity) {\n    switch (severity) {\n        case 'error':\n            return 1;\n        case 'warning':\n            return 2;\n        case 'info':\n            return 3;\n        case 'hint':\n            return 4;\n        default:\n            throw new Error('Invalid diagnostic severity: ' + severity);\n    }\n}\nfunction toDiagnosticData(severity) {\n    switch (severity) {\n        case 'error':\n            return (0,_validation_registry_js__WEBPACK_IMPORTED_MODULE_3__.diagnosticData)(DocumentValidator.LexingError);\n        case 'warning':\n            return (0,_validation_registry_js__WEBPACK_IMPORTED_MODULE_3__.diagnosticData)(DocumentValidator.LexingWarning);\n        case 'info':\n            return (0,_validation_registry_js__WEBPACK_IMPORTED_MODULE_3__.diagnosticData)(DocumentValidator.LexingInfo);\n        case 'hint':\n            return (0,_validation_registry_js__WEBPACK_IMPORTED_MODULE_3__.diagnosticData)(DocumentValidator.LexingHint);\n        default:\n            throw new Error('Invalid diagnostic severity: ' + severity);\n    }\n}\nvar DocumentValidator;\n(function (DocumentValidator) {\n    DocumentValidator.LexingError = 'lexing-error';\n    DocumentValidator.LexingWarning = 'lexing-warning';\n    DocumentValidator.LexingInfo = 'lexing-info';\n    DocumentValidator.LexingHint = 'lexing-hint';\n    DocumentValidator.ParsingError = 'parsing-error';\n    DocumentValidator.LinkingError = 'linking-error';\n})(DocumentValidator || (DocumentValidator = {}));\n//# sourceMappingURL=document-validator.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/validation/document-validator.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/validation/validation-registry.js":
/*!******************************************************************************************************!*\
  !*** ../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/validation/validation-registry.js ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ValidationCategory: () => (/* binding */ ValidationCategory),\n/* harmony export */   ValidationRegistry: () => (/* binding */ ValidationRegistry),\n/* harmony export */   diagnosticData: () => (/* binding */ diagnosticData)\n/* harmony export */ });\n/* harmony import */ var _index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../index.js */ \"(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/errors.js\");\n/* harmony import */ var _utils_collections_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/collections.js */ \"(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/collections.js\");\n/* harmony import */ var _utils_promise_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/promise-utils.js */ \"(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/promise-utils.js\");\n/* harmony import */ var _utils_stream_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/stream.js */ \"(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/stream.js\");\n/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\n\n\n\n/**\n * Create DiagnosticData for a given diagnostic code. The result can be put into the `data` field of a DiagnosticInfo.\n */\nfunction diagnosticData(code) {\n    return { code };\n}\nvar ValidationCategory;\n(function (ValidationCategory) {\n    ValidationCategory.all = ['fast', 'slow', 'built-in'];\n})(ValidationCategory || (ValidationCategory = {}));\n/**\n * Manages a set of `ValidationCheck`s to be applied when documents are validated.\n */\nclass ValidationRegistry {\n    constructor(services) {\n        this.entries = new _utils_collections_js__WEBPACK_IMPORTED_MODULE_0__.MultiMap();\n        this.entriesBefore = [];\n        this.entriesAfter = [];\n        this.reflection = services.shared.AstReflection;\n    }\n    /**\n     * Register a set of validation checks. Each value in the record can be either a single validation check (i.e. a function)\n     * or an array of validation checks.\n     *\n     * @param checksRecord Set of validation checks to register.\n     * @param category Optional category for the validation checks (defaults to `'fast'`).\n     * @param thisObj Optional object to be used as `this` when calling the validation check functions.\n     */\n    register(checksRecord, thisObj = this, category = 'fast') {\n        if (category === 'built-in') {\n            throw new Error(\"The 'built-in' category is reserved for lexer, parser, and linker errors.\");\n        }\n        for (const [type, ch] of Object.entries(checksRecord)) {\n            const callbacks = ch;\n            if (Array.isArray(callbacks)) {\n                for (const check of callbacks) {\n                    const entry = {\n                        check: this.wrapValidationException(check, thisObj),\n                        category\n                    };\n                    this.addEntry(type, entry);\n                }\n            }\n            else if (typeof callbacks === 'function') {\n                const entry = {\n                    check: this.wrapValidationException(callbacks, thisObj),\n                    category\n                };\n                this.addEntry(type, entry);\n            }\n            else {\n                (0,_index_js__WEBPACK_IMPORTED_MODULE_1__.assertUnreachable)(callbacks);\n            }\n        }\n    }\n    wrapValidationException(check, thisObj) {\n        return async (node, accept, cancelToken) => {\n            await this.handleException(() => check.call(thisObj, node, accept, cancelToken), 'An error occurred during validation', accept, node);\n        };\n    }\n    async handleException(functionality, messageContext, accept, node) {\n        try {\n            await functionality();\n        }\n        catch (err) {\n            if ((0,_utils_promise_utils_js__WEBPACK_IMPORTED_MODULE_2__.isOperationCancelled)(err)) {\n                throw err;\n            }\n            console.error(`${messageContext}:`, err);\n            if (err instanceof Error && err.stack) {\n                console.error(err.stack);\n            }\n            const messageDetails = err instanceof Error ? err.message : String(err);\n            accept('error', `${messageContext}: ${messageDetails}`, { node });\n        }\n    }\n    addEntry(type, entry) {\n        if (type === 'AstNode') {\n            this.entries.add('AstNode', entry);\n            return;\n        }\n        for (const subtype of this.reflection.getAllSubTypes(type)) {\n            this.entries.add(subtype, entry);\n        }\n    }\n    getChecks(type, categories) {\n        let checks = (0,_utils_stream_js__WEBPACK_IMPORTED_MODULE_3__.stream)(this.entries.get(type))\n            .concat(this.entries.get('AstNode'));\n        if (categories) {\n            checks = checks.filter(entry => categories.includes(entry.category));\n        }\n        return checks.map(entry => entry.check);\n    }\n    /**\n     * Register logic which will be executed once before validating all the nodes of an AST/Langium document.\n     * This helps to prepare or initialize some information which are required or reusable for the following checks on the AstNodes.\n     *\n     * As an example, for validating unique fully-qualified names of nodes in the AST,\n     * here the map for mapping names to nodes could be established.\n     * During the usual checks on the nodes, they are put into this map with their name.\n     *\n     * Note that this approach makes validations stateful, which is relevant e.g. when cancelling the validation.\n     * Therefore it is recommended to clear stored information\n     * _before_ validating an AST to validate each AST unaffected from other ASTs\n     * AND _after_ validating the AST to free memory by information which are no longer used.\n     *\n     * @param checkBefore a set-up function which will be called once before actually validating an AST\n     * @param thisObj Optional object to be used as `this` when calling the validation check functions.\n     */\n    registerBeforeDocument(checkBefore, thisObj = this) {\n        this.entriesBefore.push(this.wrapPreparationException(checkBefore, 'An error occurred during set-up of the validation', thisObj));\n    }\n    /**\n     * Register logic which will be executed once after validating all the nodes of an AST/Langium document.\n     * This helps to finally evaluate information which are collected during the checks on the AstNodes.\n     *\n     * As an example, for validating unique fully-qualified names of nodes in the AST,\n     * here the map with all the collected nodes and their names is checked\n     * and validation hints are created for all nodes with the same name.\n     *\n     * Note that this approach makes validations stateful, which is relevant e.g. when cancelling the validation.\n     * Therefore it is recommended to clear stored information\n     * _before_ validating an AST to validate each AST unaffected from other ASTs\n     * AND _after_ validating the AST to free memory by information which are no longer used.\n     *\n     * @param checkBefore a set-up function which will be called once before actually validating an AST\n     * @param thisObj Optional object to be used as `this` when calling the validation check functions.\n     */\n    registerAfterDocument(checkAfter, thisObj = this) {\n        this.entriesAfter.push(this.wrapPreparationException(checkAfter, 'An error occurred during tear-down of the validation', thisObj));\n    }\n    wrapPreparationException(check, messageContext, thisObj) {\n        return async (rootNode, accept, categories, cancelToken) => {\n            await this.handleException(() => check.call(thisObj, rootNode, accept, categories, cancelToken), messageContext, accept, rootNode);\n        };\n    }\n    get checksBefore() {\n        return this.entriesBefore;\n    }\n    get checksAfter() {\n        return this.entriesAfter;\n    }\n}\n//# sourceMappingURL=validation-registry.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/validation/validation-registry.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/workspace/ast-descriptions.js":
/*!**************************************************************************************************!*\
  !*** ../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/workspace/ast-descriptions.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DefaultAstNodeDescriptionProvider: () => (/* binding */ DefaultAstNodeDescriptionProvider),\n/* harmony export */   DefaultReferenceDescriptionProvider: () => (/* binding */ DefaultReferenceDescriptionProvider)\n/* harmony export */ });\n/* harmony import */ var _utils_cancellation_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/cancellation.js */ \"(ssr)/../node_modules/.pnpm/vscode-jsonrpc@8.2.0/node_modules/vscode-jsonrpc/lib/common/cancellation.js\");\n/* harmony import */ var _syntax_tree_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../syntax-tree.js */ \"(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/syntax-tree.js\");\n/* harmony import */ var _utils_ast_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/ast-utils.js */ \"(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/ast-utils.js\");\n/* harmony import */ var _utils_cst_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/cst-utils.js */ \"(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/cst-utils.js\");\n/* harmony import */ var _utils_promise_utils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/promise-utils.js */ \"(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/promise-utils.js\");\n/* harmony import */ var _utils_uri_utils_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/uri-utils.js */ \"(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/uri-utils.js\");\n/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\n\n\n\n\n\nclass DefaultAstNodeDescriptionProvider {\n    constructor(services) {\n        this.astNodeLocator = services.workspace.AstNodeLocator;\n        this.nameProvider = services.references.NameProvider;\n    }\n    createDescription(node, name, document) {\n        const doc = document !== null && document !== void 0 ? document : (0,_utils_ast_utils_js__WEBPACK_IMPORTED_MODULE_0__.getDocument)(node);\n        name !== null && name !== void 0 ? name : (name = this.nameProvider.getName(node));\n        const path = this.astNodeLocator.getAstNodePath(node);\n        if (!name) {\n            throw new Error(`Node at path ${path} has no name.`);\n        }\n        let nameNodeSegment;\n        const nameSegmentGetter = () => { var _a; return nameNodeSegment !== null && nameNodeSegment !== void 0 ? nameNodeSegment : (nameNodeSegment = (0,_utils_cst_utils_js__WEBPACK_IMPORTED_MODULE_1__.toDocumentSegment)((_a = this.nameProvider.getNameNode(node)) !== null && _a !== void 0 ? _a : node.$cstNode)); };\n        return {\n            node,\n            name,\n            get nameSegment() {\n                return nameSegmentGetter();\n            },\n            selectionSegment: (0,_utils_cst_utils_js__WEBPACK_IMPORTED_MODULE_1__.toDocumentSegment)(node.$cstNode),\n            type: node.$type,\n            documentUri: doc.uri,\n            path\n        };\n    }\n}\nclass DefaultReferenceDescriptionProvider {\n    constructor(services) {\n        this.nodeLocator = services.workspace.AstNodeLocator;\n    }\n    async createDescriptions(document, cancelToken = _utils_cancellation_js__WEBPACK_IMPORTED_MODULE_2__.CancellationToken.None) {\n        const descr = [];\n        const rootNode = document.parseResult.value;\n        for (const astNode of (0,_utils_ast_utils_js__WEBPACK_IMPORTED_MODULE_0__.streamAst)(rootNode)) {\n            await (0,_utils_promise_utils_js__WEBPACK_IMPORTED_MODULE_3__.interruptAndCheck)(cancelToken);\n            (0,_utils_ast_utils_js__WEBPACK_IMPORTED_MODULE_0__.streamReferences)(astNode).filter(refInfo => !(0,_syntax_tree_js__WEBPACK_IMPORTED_MODULE_4__.isLinkingError)(refInfo)).forEach(refInfo => {\n                // TODO: Consider logging a warning or throw an exception when DocumentState is < than Linked\n                const description = this.createDescription(refInfo);\n                if (description) {\n                    descr.push(description);\n                }\n            });\n        }\n        return descr;\n    }\n    createDescription(refInfo) {\n        const targetNodeDescr = refInfo.reference.$nodeDescription;\n        const refCstNode = refInfo.reference.$refNode;\n        if (!targetNodeDescr || !refCstNode) {\n            return undefined;\n        }\n        const docUri = (0,_utils_ast_utils_js__WEBPACK_IMPORTED_MODULE_0__.getDocument)(refInfo.container).uri;\n        return {\n            sourceUri: docUri,\n            sourcePath: this.nodeLocator.getAstNodePath(refInfo.container),\n            targetUri: targetNodeDescr.documentUri,\n            targetPath: targetNodeDescr.path,\n            segment: (0,_utils_cst_utils_js__WEBPACK_IMPORTED_MODULE_1__.toDocumentSegment)(refCstNode),\n            local: _utils_uri_utils_js__WEBPACK_IMPORTED_MODULE_5__.UriUtils.equals(targetNodeDescr.documentUri, docUri)\n        };\n    }\n}\n//# sourceMappingURL=ast-descriptions.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2xhbmdpdW1AMy4zLjEvbm9kZV9tb2R1bGVzL2xhbmdpdW0vbGliL3dvcmtzcGFjZS9hc3QtZGVzY3JpcHRpb25zLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUM2RDtBQUNWO0FBQzhCO0FBQ3ZCO0FBQ0k7QUFDYjtBQUMxQztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwRUFBMEUsZ0VBQVc7QUFDckY7QUFDQTtBQUNBO0FBQ0EsNENBQTRDLE1BQU07QUFDbEQ7QUFDQTtBQUNBLDBDQUEwQyxRQUFRLHFHQUFxRyxzRUFBaUI7QUFDeEs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYiw4QkFBOEIsc0VBQWlCO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EscURBQXFELHFFQUFpQjtBQUN0RTtBQUNBO0FBQ0EsOEJBQThCLDhEQUFTO0FBQ3ZDLGtCQUFrQiwwRUFBaUI7QUFDbkMsWUFBWSxxRUFBZ0IsNkJBQTZCLCtEQUFjO0FBQ3ZFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLGdFQUFXO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsc0VBQWlCO0FBQ3RDLG1CQUFtQix5REFBUTtBQUMzQjtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL2V0aGFua2ltL05lc3Rvci9tZWRmZXRjaC5qcy9ub2RlX21vZHVsZXMvLnBucG0vbGFuZ2l1bUAzLjMuMS9ub2RlX21vZHVsZXMvbGFuZ2l1bS9saWIvd29ya3NwYWNlL2FzdC1kZXNjcmlwdGlvbnMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuICogQ29weXJpZ2h0IDIwMjEgVHlwZUZveCBHbWJIXG4gKiBUaGlzIHByb2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzIGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0aGVcbiAqIHRlcm1zIG9mIHRoZSBNSVQgTGljZW5zZSwgd2hpY2ggaXMgYXZhaWxhYmxlIGluIHRoZSBwcm9qZWN0IHJvb3QuXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuaW1wb3J0IHsgQ2FuY2VsbGF0aW9uVG9rZW4gfSBmcm9tICcuLi91dGlscy9jYW5jZWxsYXRpb24uanMnO1xuaW1wb3J0IHsgaXNMaW5raW5nRXJyb3IgfSBmcm9tICcuLi9zeW50YXgtdHJlZS5qcyc7XG5pbXBvcnQgeyBnZXREb2N1bWVudCwgc3RyZWFtQXN0LCBzdHJlYW1SZWZlcmVuY2VzIH0gZnJvbSAnLi4vdXRpbHMvYXN0LXV0aWxzLmpzJztcbmltcG9ydCB7IHRvRG9jdW1lbnRTZWdtZW50IH0gZnJvbSAnLi4vdXRpbHMvY3N0LXV0aWxzLmpzJztcbmltcG9ydCB7IGludGVycnVwdEFuZENoZWNrIH0gZnJvbSAnLi4vdXRpbHMvcHJvbWlzZS11dGlscy5qcyc7XG5pbXBvcnQgeyBVcmlVdGlscyB9IGZyb20gJy4uL3V0aWxzL3VyaS11dGlscy5qcyc7XG5leHBvcnQgY2xhc3MgRGVmYXVsdEFzdE5vZGVEZXNjcmlwdGlvblByb3ZpZGVyIHtcbiAgICBjb25zdHJ1Y3RvcihzZXJ2aWNlcykge1xuICAgICAgICB0aGlzLmFzdE5vZGVMb2NhdG9yID0gc2VydmljZXMud29ya3NwYWNlLkFzdE5vZGVMb2NhdG9yO1xuICAgICAgICB0aGlzLm5hbWVQcm92aWRlciA9IHNlcnZpY2VzLnJlZmVyZW5jZXMuTmFtZVByb3ZpZGVyO1xuICAgIH1cbiAgICBjcmVhdGVEZXNjcmlwdGlvbihub2RlLCBuYW1lLCBkb2N1bWVudCkge1xuICAgICAgICBjb25zdCBkb2MgPSBkb2N1bWVudCAhPT0gbnVsbCAmJiBkb2N1bWVudCAhPT0gdm9pZCAwID8gZG9jdW1lbnQgOiBnZXREb2N1bWVudChub2RlKTtcbiAgICAgICAgbmFtZSAhPT0gbnVsbCAmJiBuYW1lICE9PSB2b2lkIDAgPyBuYW1lIDogKG5hbWUgPSB0aGlzLm5hbWVQcm92aWRlci5nZXROYW1lKG5vZGUpKTtcbiAgICAgICAgY29uc3QgcGF0aCA9IHRoaXMuYXN0Tm9kZUxvY2F0b3IuZ2V0QXN0Tm9kZVBhdGgobm9kZSk7XG4gICAgICAgIGlmICghbmFtZSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBOb2RlIGF0IHBhdGggJHtwYXRofSBoYXMgbm8gbmFtZS5gKTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgbmFtZU5vZGVTZWdtZW50O1xuICAgICAgICBjb25zdCBuYW1lU2VnbWVudEdldHRlciA9ICgpID0+IHsgdmFyIF9hOyByZXR1cm4gbmFtZU5vZGVTZWdtZW50ICE9PSBudWxsICYmIG5hbWVOb2RlU2VnbWVudCAhPT0gdm9pZCAwID8gbmFtZU5vZGVTZWdtZW50IDogKG5hbWVOb2RlU2VnbWVudCA9IHRvRG9jdW1lbnRTZWdtZW50KChfYSA9IHRoaXMubmFtZVByb3ZpZGVyLmdldE5hbWVOb2RlKG5vZGUpKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBub2RlLiRjc3ROb2RlKSk7IH07XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBub2RlLFxuICAgICAgICAgICAgbmFtZSxcbiAgICAgICAgICAgIGdldCBuYW1lU2VnbWVudCgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmFtZVNlZ21lbnRHZXR0ZXIoKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzZWxlY3Rpb25TZWdtZW50OiB0b0RvY3VtZW50U2VnbWVudChub2RlLiRjc3ROb2RlKSxcbiAgICAgICAgICAgIHR5cGU6IG5vZGUuJHR5cGUsXG4gICAgICAgICAgICBkb2N1bWVudFVyaTogZG9jLnVyaSxcbiAgICAgICAgICAgIHBhdGhcbiAgICAgICAgfTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgRGVmYXVsdFJlZmVyZW5jZURlc2NyaXB0aW9uUHJvdmlkZXIge1xuICAgIGNvbnN0cnVjdG9yKHNlcnZpY2VzKSB7XG4gICAgICAgIHRoaXMubm9kZUxvY2F0b3IgPSBzZXJ2aWNlcy53b3Jrc3BhY2UuQXN0Tm9kZUxvY2F0b3I7XG4gICAgfVxuICAgIGFzeW5jIGNyZWF0ZURlc2NyaXB0aW9ucyhkb2N1bWVudCwgY2FuY2VsVG9rZW4gPSBDYW5jZWxsYXRpb25Ub2tlbi5Ob25lKSB7XG4gICAgICAgIGNvbnN0IGRlc2NyID0gW107XG4gICAgICAgIGNvbnN0IHJvb3ROb2RlID0gZG9jdW1lbnQucGFyc2VSZXN1bHQudmFsdWU7XG4gICAgICAgIGZvciAoY29uc3QgYXN0Tm9kZSBvZiBzdHJlYW1Bc3Qocm9vdE5vZGUpKSB7XG4gICAgICAgICAgICBhd2FpdCBpbnRlcnJ1cHRBbmRDaGVjayhjYW5jZWxUb2tlbik7XG4gICAgICAgICAgICBzdHJlYW1SZWZlcmVuY2VzKGFzdE5vZGUpLmZpbHRlcihyZWZJbmZvID0+ICFpc0xpbmtpbmdFcnJvcihyZWZJbmZvKSkuZm9yRWFjaChyZWZJbmZvID0+IHtcbiAgICAgICAgICAgICAgICAvLyBUT0RPOiBDb25zaWRlciBsb2dnaW5nIGEgd2FybmluZyBvciB0aHJvdyBhbiBleGNlcHRpb24gd2hlbiBEb2N1bWVudFN0YXRlIGlzIDwgdGhhbiBMaW5rZWRcbiAgICAgICAgICAgICAgICBjb25zdCBkZXNjcmlwdGlvbiA9IHRoaXMuY3JlYXRlRGVzY3JpcHRpb24ocmVmSW5mbyk7XG4gICAgICAgICAgICAgICAgaWYgKGRlc2NyaXB0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlc2NyLnB1c2goZGVzY3JpcHRpb24pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkZXNjcjtcbiAgICB9XG4gICAgY3JlYXRlRGVzY3JpcHRpb24ocmVmSW5mbykge1xuICAgICAgICBjb25zdCB0YXJnZXROb2RlRGVzY3IgPSByZWZJbmZvLnJlZmVyZW5jZS4kbm9kZURlc2NyaXB0aW9uO1xuICAgICAgICBjb25zdCByZWZDc3ROb2RlID0gcmVmSW5mby5yZWZlcmVuY2UuJHJlZk5vZGU7XG4gICAgICAgIGlmICghdGFyZ2V0Tm9kZURlc2NyIHx8ICFyZWZDc3ROb2RlKSB7XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGRvY1VyaSA9IGdldERvY3VtZW50KHJlZkluZm8uY29udGFpbmVyKS51cmk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzb3VyY2VVcmk6IGRvY1VyaSxcbiAgICAgICAgICAgIHNvdXJjZVBhdGg6IHRoaXMubm9kZUxvY2F0b3IuZ2V0QXN0Tm9kZVBhdGgocmVmSW5mby5jb250YWluZXIpLFxuICAgICAgICAgICAgdGFyZ2V0VXJpOiB0YXJnZXROb2RlRGVzY3IuZG9jdW1lbnRVcmksXG4gICAgICAgICAgICB0YXJnZXRQYXRoOiB0YXJnZXROb2RlRGVzY3IucGF0aCxcbiAgICAgICAgICAgIHNlZ21lbnQ6IHRvRG9jdW1lbnRTZWdtZW50KHJlZkNzdE5vZGUpLFxuICAgICAgICAgICAgbG9jYWw6IFVyaVV0aWxzLmVxdWFscyh0YXJnZXROb2RlRGVzY3IuZG9jdW1lbnRVcmksIGRvY1VyaSlcbiAgICAgICAgfTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hc3QtZGVzY3JpcHRpb25zLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/workspace/ast-descriptions.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/workspace/ast-node-locator.js":
/*!**************************************************************************************************!*\
  !*** ../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/workspace/ast-node-locator.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DefaultAstNodeLocator: () => (/* binding */ DefaultAstNodeLocator)\n/* harmony export */ });\n/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\nclass DefaultAstNodeLocator {\n    constructor() {\n        this.segmentSeparator = '/';\n        this.indexSeparator = '@';\n    }\n    getAstNodePath(node) {\n        if (node.$container) {\n            const containerPath = this.getAstNodePath(node.$container);\n            const newSegment = this.getPathSegment(node);\n            const nodePath = containerPath + this.segmentSeparator + newSegment;\n            return nodePath;\n        }\n        return '';\n    }\n    getPathSegment({ $containerProperty, $containerIndex }) {\n        if (!$containerProperty) {\n            throw new Error(\"Missing '$containerProperty' in AST node.\");\n        }\n        if ($containerIndex !== undefined) {\n            return $containerProperty + this.indexSeparator + $containerIndex;\n        }\n        return $containerProperty;\n    }\n    getAstNode(node, path) {\n        const segments = path.split(this.segmentSeparator);\n        return segments.reduce((previousValue, currentValue) => {\n            if (!previousValue || currentValue.length === 0) {\n                return previousValue;\n            }\n            const propertyIndex = currentValue.indexOf(this.indexSeparator);\n            if (propertyIndex > 0) {\n                const property = currentValue.substring(0, propertyIndex);\n                const arrayIndex = parseInt(currentValue.substring(propertyIndex + 1));\n                const array = previousValue[property];\n                return array === null || array === void 0 ? void 0 : array[arrayIndex];\n            }\n            return previousValue[currentValue];\n        }, node);\n    }\n}\n//# sourceMappingURL=ast-node-locator.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2xhbmdpdW1AMy4zLjEvbm9kZV9tb2R1bGVzL2xhbmdpdW0vbGliL3dvcmtzcGFjZS9hc3Qtbm9kZS1sb2NhdG9yLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQixxQ0FBcUM7QUFDMUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvZXRoYW5raW0vTmVzdG9yL21lZGZldGNoLmpzL25vZGVfbW9kdWxlcy8ucG5wbS9sYW5naXVtQDMuMy4xL25vZGVfbW9kdWxlcy9sYW5naXVtL2xpYi93b3Jrc3BhY2UvYXN0LW5vZGUtbG9jYXRvci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gKiBDb3B5cmlnaHQgMjAyMSBUeXBlRm94IEdtYkhcbiAqIFRoaXMgcHJvZ3JhbSBhbmQgdGhlIGFjY29tcGFueWluZyBtYXRlcmlhbHMgYXJlIG1hZGUgYXZhaWxhYmxlIHVuZGVyIHRoZVxuICogdGVybXMgb2YgdGhlIE1JVCBMaWNlbnNlLCB3aGljaCBpcyBhdmFpbGFibGUgaW4gdGhlIHByb2plY3Qgcm9vdC5cbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5leHBvcnQgY2xhc3MgRGVmYXVsdEFzdE5vZGVMb2NhdG9yIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5zZWdtZW50U2VwYXJhdG9yID0gJy8nO1xuICAgICAgICB0aGlzLmluZGV4U2VwYXJhdG9yID0gJ0AnO1xuICAgIH1cbiAgICBnZXRBc3ROb2RlUGF0aChub2RlKSB7XG4gICAgICAgIGlmIChub2RlLiRjb250YWluZXIpIHtcbiAgICAgICAgICAgIGNvbnN0IGNvbnRhaW5lclBhdGggPSB0aGlzLmdldEFzdE5vZGVQYXRoKG5vZGUuJGNvbnRhaW5lcik7XG4gICAgICAgICAgICBjb25zdCBuZXdTZWdtZW50ID0gdGhpcy5nZXRQYXRoU2VnbWVudChub2RlKTtcbiAgICAgICAgICAgIGNvbnN0IG5vZGVQYXRoID0gY29udGFpbmVyUGF0aCArIHRoaXMuc2VnbWVudFNlcGFyYXRvciArIG5ld1NlZ21lbnQ7XG4gICAgICAgICAgICByZXR1cm4gbm9kZVBhdGg7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICcnO1xuICAgIH1cbiAgICBnZXRQYXRoU2VnbWVudCh7ICRjb250YWluZXJQcm9wZXJ0eSwgJGNvbnRhaW5lckluZGV4IH0pIHtcbiAgICAgICAgaWYgKCEkY29udGFpbmVyUHJvcGVydHkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIk1pc3NpbmcgJyRjb250YWluZXJQcm9wZXJ0eScgaW4gQVNUIG5vZGUuXCIpO1xuICAgICAgICB9XG4gICAgICAgIGlmICgkY29udGFpbmVySW5kZXggIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuICRjb250YWluZXJQcm9wZXJ0eSArIHRoaXMuaW5kZXhTZXBhcmF0b3IgKyAkY29udGFpbmVySW5kZXg7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICRjb250YWluZXJQcm9wZXJ0eTtcbiAgICB9XG4gICAgZ2V0QXN0Tm9kZShub2RlLCBwYXRoKSB7XG4gICAgICAgIGNvbnN0IHNlZ21lbnRzID0gcGF0aC5zcGxpdCh0aGlzLnNlZ21lbnRTZXBhcmF0b3IpO1xuICAgICAgICByZXR1cm4gc2VnbWVudHMucmVkdWNlKChwcmV2aW91c1ZhbHVlLCBjdXJyZW50VmFsdWUpID0+IHtcbiAgICAgICAgICAgIGlmICghcHJldmlvdXNWYWx1ZSB8fCBjdXJyZW50VmFsdWUubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHByZXZpb3VzVmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBwcm9wZXJ0eUluZGV4ID0gY3VycmVudFZhbHVlLmluZGV4T2YodGhpcy5pbmRleFNlcGFyYXRvcik7XG4gICAgICAgICAgICBpZiAocHJvcGVydHlJbmRleCA+IDApIHtcbiAgICAgICAgICAgICAgICBjb25zdCBwcm9wZXJ0eSA9IGN1cnJlbnRWYWx1ZS5zdWJzdHJpbmcoMCwgcHJvcGVydHlJbmRleCk7XG4gICAgICAgICAgICAgICAgY29uc3QgYXJyYXlJbmRleCA9IHBhcnNlSW50KGN1cnJlbnRWYWx1ZS5zdWJzdHJpbmcocHJvcGVydHlJbmRleCArIDEpKTtcbiAgICAgICAgICAgICAgICBjb25zdCBhcnJheSA9IHByZXZpb3VzVmFsdWVbcHJvcGVydHldO1xuICAgICAgICAgICAgICAgIHJldHVybiBhcnJheSA9PT0gbnVsbCB8fCBhcnJheSA9PT0gdm9pZCAwID8gdm9pZCAwIDogYXJyYXlbYXJyYXlJbmRleF07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcHJldmlvdXNWYWx1ZVtjdXJyZW50VmFsdWVdO1xuICAgICAgICB9LCBub2RlKTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hc3Qtbm9kZS1sb2NhdG9yLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/workspace/ast-node-locator.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/workspace/configuration.js":
/*!***********************************************************************************************!*\
  !*** ../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/workspace/configuration.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DefaultConfigurationProvider: () => (/* binding */ DefaultConfigurationProvider)\n/* harmony export */ });\n/* harmony import */ var _utils_event_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/event.js */ \"(ssr)/../node_modules/.pnpm/vscode-jsonrpc@8.2.0/node_modules/vscode-jsonrpc/lib/common/events.js\");\n/* harmony import */ var _utils_promise_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/promise-utils.js */ \"(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/promise-utils.js\");\n/******************************************************************************\n * Copyright 2022 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\n\n/**\n * Base configuration provider for building up other configuration providers\n */\nclass DefaultConfigurationProvider {\n    constructor(services) {\n        this._ready = new _utils_promise_utils_js__WEBPACK_IMPORTED_MODULE_0__.Deferred();\n        this.settings = {};\n        this.workspaceConfig = false;\n        this.onConfigurationSectionUpdateEmitter = new _utils_event_js__WEBPACK_IMPORTED_MODULE_1__.Emitter();\n        this.serviceRegistry = services.ServiceRegistry;\n    }\n    get ready() {\n        return this._ready.promise;\n    }\n    initialize(params) {\n        var _a, _b;\n        this.workspaceConfig = (_b = (_a = params.capabilities.workspace) === null || _a === void 0 ? void 0 : _a.configuration) !== null && _b !== void 0 ? _b : false;\n    }\n    async initialized(params) {\n        if (this.workspaceConfig) {\n            if (params.register) {\n                // params.register(...) is a function to be provided by the calling language server for the sake of\n                //  decoupling this implementation from the concrete LSP implementations, specifically the LSP Connection\n                const languages = this.serviceRegistry.all;\n                params.register({\n                    // Listen to configuration changes for all languages\n                    section: languages.map(lang => this.toSectionName(lang.LanguageMetaData.languageId))\n                });\n            }\n            if (params.fetchConfiguration) {\n                // params.fetchConfiguration(...) is a function to be provided by the calling language server for the sake of\n                //  decoupling this implementation from the concrete LSP implementations, specifically the LSP Connection\n                const configToUpdate = this.serviceRegistry.all.map(lang => ({\n                    // Fetch the configuration changes for all languages\n                    section: this.toSectionName(lang.LanguageMetaData.languageId)\n                }));\n                // get workspace configurations (default scope URI)\n                const configs = await params.fetchConfiguration(configToUpdate);\n                configToUpdate.forEach((conf, idx) => {\n                    this.updateSectionConfiguration(conf.section, configs[idx]);\n                });\n            }\n        }\n        this._ready.resolve();\n    }\n    /**\n     *  Updates the cached configurations using the `change` notification parameters.\n     *\n     * @param change The parameters of a change configuration notification.\n     * `settings` property of the change object could be expressed as `Record<string, Record<string, any>>`\n     */\n    updateConfiguration(change) {\n        if (!change.settings) {\n            return;\n        }\n        Object.keys(change.settings).forEach(section => {\n            const configuration = change.settings[section];\n            this.updateSectionConfiguration(section, configuration);\n            this.onConfigurationSectionUpdateEmitter.fire({ section, configuration });\n        });\n    }\n    updateSectionConfiguration(section, configuration) {\n        this.settings[section] = configuration;\n    }\n    /**\n    * Returns a configuration value stored for the given language.\n    *\n    * @param language The language id\n    * @param configuration Configuration name\n    */\n    async getConfiguration(language, configuration) {\n        await this.ready;\n        const sectionName = this.toSectionName(language);\n        if (this.settings[sectionName]) {\n            return this.settings[sectionName][configuration];\n        }\n    }\n    toSectionName(languageId) {\n        return `${languageId}`;\n    }\n    get onConfigurationSectionUpdate() {\n        return this.onConfigurationSectionUpdateEmitter.event;\n    }\n}\n//# sourceMappingURL=configuration.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2xhbmdpdW1AMy4zLjEvbm9kZV9tb2R1bGVzL2xhbmdpdW0vbGliL3dvcmtzcGFjZS9jb25maWd1cmF0aW9uLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDNEM7QUFDUztBQUNyRDtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0EsMEJBQTBCLDZEQUFRO0FBQ2xDO0FBQ0E7QUFDQSx1REFBdUQsb0RBQU87QUFDOUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0REFBNEQsd0JBQXdCO0FBQ3BGLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsV0FBVztBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9Vc2Vycy9ldGhhbmtpbS9OZXN0b3IvbWVkZmV0Y2guanMvbm9kZV9tb2R1bGVzLy5wbnBtL2xhbmdpdW1AMy4zLjEvbm9kZV9tb2R1bGVzL2xhbmdpdW0vbGliL3dvcmtzcGFjZS9jb25maWd1cmF0aW9uLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAqIENvcHlyaWdodCAyMDIyIFR5cGVGb3ggR21iSFxuICogVGhpcyBwcm9ncmFtIGFuZCB0aGUgYWNjb21wYW55aW5nIG1hdGVyaWFscyBhcmUgbWFkZSBhdmFpbGFibGUgdW5kZXIgdGhlXG4gKiB0ZXJtcyBvZiB0aGUgTUlUIExpY2Vuc2UsIHdoaWNoIGlzIGF2YWlsYWJsZSBpbiB0aGUgcHJvamVjdCByb290LlxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbmltcG9ydCB7IEVtaXR0ZXIgfSBmcm9tICcuLi91dGlscy9ldmVudC5qcyc7XG5pbXBvcnQgeyBEZWZlcnJlZCB9IGZyb20gJy4uL3V0aWxzL3Byb21pc2UtdXRpbHMuanMnO1xuLyoqXG4gKiBCYXNlIGNvbmZpZ3VyYXRpb24gcHJvdmlkZXIgZm9yIGJ1aWxkaW5nIHVwIG90aGVyIGNvbmZpZ3VyYXRpb24gcHJvdmlkZXJzXG4gKi9cbmV4cG9ydCBjbGFzcyBEZWZhdWx0Q29uZmlndXJhdGlvblByb3ZpZGVyIHtcbiAgICBjb25zdHJ1Y3RvcihzZXJ2aWNlcykge1xuICAgICAgICB0aGlzLl9yZWFkeSA9IG5ldyBEZWZlcnJlZCgpO1xuICAgICAgICB0aGlzLnNldHRpbmdzID0ge307XG4gICAgICAgIHRoaXMud29ya3NwYWNlQ29uZmlnID0gZmFsc2U7XG4gICAgICAgIHRoaXMub25Db25maWd1cmF0aW9uU2VjdGlvblVwZGF0ZUVtaXR0ZXIgPSBuZXcgRW1pdHRlcigpO1xuICAgICAgICB0aGlzLnNlcnZpY2VSZWdpc3RyeSA9IHNlcnZpY2VzLlNlcnZpY2VSZWdpc3RyeTtcbiAgICB9XG4gICAgZ2V0IHJlYWR5KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcmVhZHkucHJvbWlzZTtcbiAgICB9XG4gICAgaW5pdGlhbGl6ZShwYXJhbXMpIHtcbiAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgdGhpcy53b3Jrc3BhY2VDb25maWcgPSAoX2IgPSAoX2EgPSBwYXJhbXMuY2FwYWJpbGl0aWVzLndvcmtzcGFjZSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmNvbmZpZ3VyYXRpb24pICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IGZhbHNlO1xuICAgIH1cbiAgICBhc3luYyBpbml0aWFsaXplZChwYXJhbXMpIHtcbiAgICAgICAgaWYgKHRoaXMud29ya3NwYWNlQ29uZmlnKSB7XG4gICAgICAgICAgICBpZiAocGFyYW1zLnJlZ2lzdGVyKSB7XG4gICAgICAgICAgICAgICAgLy8gcGFyYW1zLnJlZ2lzdGVyKC4uLikgaXMgYSBmdW5jdGlvbiB0byBiZSBwcm92aWRlZCBieSB0aGUgY2FsbGluZyBsYW5ndWFnZSBzZXJ2ZXIgZm9yIHRoZSBzYWtlIG9mXG4gICAgICAgICAgICAgICAgLy8gIGRlY291cGxpbmcgdGhpcyBpbXBsZW1lbnRhdGlvbiBmcm9tIHRoZSBjb25jcmV0ZSBMU1AgaW1wbGVtZW50YXRpb25zLCBzcGVjaWZpY2FsbHkgdGhlIExTUCBDb25uZWN0aW9uXG4gICAgICAgICAgICAgICAgY29uc3QgbGFuZ3VhZ2VzID0gdGhpcy5zZXJ2aWNlUmVnaXN0cnkuYWxsO1xuICAgICAgICAgICAgICAgIHBhcmFtcy5yZWdpc3Rlcih7XG4gICAgICAgICAgICAgICAgICAgIC8vIExpc3RlbiB0byBjb25maWd1cmF0aW9uIGNoYW5nZXMgZm9yIGFsbCBsYW5ndWFnZXNcbiAgICAgICAgICAgICAgICAgICAgc2VjdGlvbjogbGFuZ3VhZ2VzLm1hcChsYW5nID0+IHRoaXMudG9TZWN0aW9uTmFtZShsYW5nLkxhbmd1YWdlTWV0YURhdGEubGFuZ3VhZ2VJZCkpXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocGFyYW1zLmZldGNoQ29uZmlndXJhdGlvbikge1xuICAgICAgICAgICAgICAgIC8vIHBhcmFtcy5mZXRjaENvbmZpZ3VyYXRpb24oLi4uKSBpcyBhIGZ1bmN0aW9uIHRvIGJlIHByb3ZpZGVkIGJ5IHRoZSBjYWxsaW5nIGxhbmd1YWdlIHNlcnZlciBmb3IgdGhlIHNha2Ugb2ZcbiAgICAgICAgICAgICAgICAvLyAgZGVjb3VwbGluZyB0aGlzIGltcGxlbWVudGF0aW9uIGZyb20gdGhlIGNvbmNyZXRlIExTUCBpbXBsZW1lbnRhdGlvbnMsIHNwZWNpZmljYWxseSB0aGUgTFNQIENvbm5lY3Rpb25cbiAgICAgICAgICAgICAgICBjb25zdCBjb25maWdUb1VwZGF0ZSA9IHRoaXMuc2VydmljZVJlZ2lzdHJ5LmFsbC5tYXAobGFuZyA9PiAoe1xuICAgICAgICAgICAgICAgICAgICAvLyBGZXRjaCB0aGUgY29uZmlndXJhdGlvbiBjaGFuZ2VzIGZvciBhbGwgbGFuZ3VhZ2VzXG4gICAgICAgICAgICAgICAgICAgIHNlY3Rpb246IHRoaXMudG9TZWN0aW9uTmFtZShsYW5nLkxhbmd1YWdlTWV0YURhdGEubGFuZ3VhZ2VJZClcbiAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgLy8gZ2V0IHdvcmtzcGFjZSBjb25maWd1cmF0aW9ucyAoZGVmYXVsdCBzY29wZSBVUkkpXG4gICAgICAgICAgICAgICAgY29uc3QgY29uZmlncyA9IGF3YWl0IHBhcmFtcy5mZXRjaENvbmZpZ3VyYXRpb24oY29uZmlnVG9VcGRhdGUpO1xuICAgICAgICAgICAgICAgIGNvbmZpZ1RvVXBkYXRlLmZvckVhY2goKGNvbmYsIGlkeCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZVNlY3Rpb25Db25maWd1cmF0aW9uKGNvbmYuc2VjdGlvbiwgY29uZmlnc1tpZHhdKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9yZWFkeS5yZXNvbHZlKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqICBVcGRhdGVzIHRoZSBjYWNoZWQgY29uZmlndXJhdGlvbnMgdXNpbmcgdGhlIGBjaGFuZ2VgIG5vdGlmaWNhdGlvbiBwYXJhbWV0ZXJzLlxuICAgICAqXG4gICAgICogQHBhcmFtIGNoYW5nZSBUaGUgcGFyYW1ldGVycyBvZiBhIGNoYW5nZSBjb25maWd1cmF0aW9uIG5vdGlmaWNhdGlvbi5cbiAgICAgKiBgc2V0dGluZ3NgIHByb3BlcnR5IG9mIHRoZSBjaGFuZ2Ugb2JqZWN0IGNvdWxkIGJlIGV4cHJlc3NlZCBhcyBgUmVjb3JkPHN0cmluZywgUmVjb3JkPHN0cmluZywgYW55Pj5gXG4gICAgICovXG4gICAgdXBkYXRlQ29uZmlndXJhdGlvbihjaGFuZ2UpIHtcbiAgICAgICAgaWYgKCFjaGFuZ2Uuc2V0dGluZ3MpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBPYmplY3Qua2V5cyhjaGFuZ2Uuc2V0dGluZ3MpLmZvckVhY2goc2VjdGlvbiA9PiB7XG4gICAgICAgICAgICBjb25zdCBjb25maWd1cmF0aW9uID0gY2hhbmdlLnNldHRpbmdzW3NlY3Rpb25dO1xuICAgICAgICAgICAgdGhpcy51cGRhdGVTZWN0aW9uQ29uZmlndXJhdGlvbihzZWN0aW9uLCBjb25maWd1cmF0aW9uKTtcbiAgICAgICAgICAgIHRoaXMub25Db25maWd1cmF0aW9uU2VjdGlvblVwZGF0ZUVtaXR0ZXIuZmlyZSh7IHNlY3Rpb24sIGNvbmZpZ3VyYXRpb24gfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICB1cGRhdGVTZWN0aW9uQ29uZmlndXJhdGlvbihzZWN0aW9uLCBjb25maWd1cmF0aW9uKSB7XG4gICAgICAgIHRoaXMuc2V0dGluZ3Nbc2VjdGlvbl0gPSBjb25maWd1cmF0aW9uO1xuICAgIH1cbiAgICAvKipcbiAgICAqIFJldHVybnMgYSBjb25maWd1cmF0aW9uIHZhbHVlIHN0b3JlZCBmb3IgdGhlIGdpdmVuIGxhbmd1YWdlLlxuICAgICpcbiAgICAqIEBwYXJhbSBsYW5ndWFnZSBUaGUgbGFuZ3VhZ2UgaWRcbiAgICAqIEBwYXJhbSBjb25maWd1cmF0aW9uIENvbmZpZ3VyYXRpb24gbmFtZVxuICAgICovXG4gICAgYXN5bmMgZ2V0Q29uZmlndXJhdGlvbihsYW5ndWFnZSwgY29uZmlndXJhdGlvbikge1xuICAgICAgICBhd2FpdCB0aGlzLnJlYWR5O1xuICAgICAgICBjb25zdCBzZWN0aW9uTmFtZSA9IHRoaXMudG9TZWN0aW9uTmFtZShsYW5ndWFnZSk7XG4gICAgICAgIGlmICh0aGlzLnNldHRpbmdzW3NlY3Rpb25OYW1lXSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2V0dGluZ3Nbc2VjdGlvbk5hbWVdW2NvbmZpZ3VyYXRpb25dO1xuICAgICAgICB9XG4gICAgfVxuICAgIHRvU2VjdGlvbk5hbWUobGFuZ3VhZ2VJZCkge1xuICAgICAgICByZXR1cm4gYCR7bGFuZ3VhZ2VJZH1gO1xuICAgIH1cbiAgICBnZXQgb25Db25maWd1cmF0aW9uU2VjdGlvblVwZGF0ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMub25Db25maWd1cmF0aW9uU2VjdGlvblVwZGF0ZUVtaXR0ZXIuZXZlbnQ7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29uZmlndXJhdGlvbi5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/workspace/configuration.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/workspace/document-builder.js":
/*!**************************************************************************************************!*\
  !*** ../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/workspace/document-builder.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DefaultDocumentBuilder: () => (/* binding */ DefaultDocumentBuilder)\n/* harmony export */ });\n/* harmony import */ var _utils_cancellation_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/cancellation.js */ \"(ssr)/../node_modules/.pnpm/vscode-jsonrpc@8.2.0/node_modules/vscode-jsonrpc/lib/common/cancellation.js\");\n/* harmony import */ var _utils_disposable_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utils/disposable.js */ \"(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/disposable.js\");\n/* harmony import */ var _utils_collections_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/collections.js */ \"(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/collections.js\");\n/* harmony import */ var _utils_promise_utils_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/promise-utils.js */ \"(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/promise-utils.js\");\n/* harmony import */ var _utils_stream_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/stream.js */ \"(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/stream.js\");\n/* harmony import */ var _validation_validation_registry_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../validation/validation-registry.js */ \"(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/validation/validation-registry.js\");\n/* harmony import */ var _documents_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./documents.js */ \"(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/workspace/documents.js\");\n/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\n\n\n\n\n\n\nclass DefaultDocumentBuilder {\n    constructor(services) {\n        this.updateBuildOptions = {\n            // Default: run only the built-in validation checks and those in the _fast_ category (includes those without category)\n            validation: {\n                categories: ['built-in', 'fast']\n            }\n        };\n        this.updateListeners = [];\n        this.buildPhaseListeners = new _utils_collections_js__WEBPACK_IMPORTED_MODULE_0__.MultiMap();\n        this.documentPhaseListeners = new _utils_collections_js__WEBPACK_IMPORTED_MODULE_0__.MultiMap();\n        this.buildState = new Map();\n        this.documentBuildWaiters = new Map();\n        this.currentState = _documents_js__WEBPACK_IMPORTED_MODULE_1__.DocumentState.Changed;\n        this.langiumDocuments = services.workspace.LangiumDocuments;\n        this.langiumDocumentFactory = services.workspace.LangiumDocumentFactory;\n        this.textDocuments = services.workspace.TextDocuments;\n        this.indexManager = services.workspace.IndexManager;\n        this.serviceRegistry = services.ServiceRegistry;\n    }\n    async build(documents, options = {}, cancelToken = _utils_cancellation_js__WEBPACK_IMPORTED_MODULE_2__.CancellationToken.None) {\n        var _a, _b;\n        for (const document of documents) {\n            const key = document.uri.toString();\n            if (document.state === _documents_js__WEBPACK_IMPORTED_MODULE_1__.DocumentState.Validated) {\n                if (typeof options.validation === 'boolean' && options.validation) {\n                    // Force re-running all validation checks\n                    document.state = _documents_js__WEBPACK_IMPORTED_MODULE_1__.DocumentState.IndexedReferences;\n                    document.diagnostics = undefined;\n                    this.buildState.delete(key);\n                }\n                else if (typeof options.validation === 'object') {\n                    const buildState = this.buildState.get(key);\n                    const previousCategories = (_a = buildState === null || buildState === void 0 ? void 0 : buildState.result) === null || _a === void 0 ? void 0 : _a.validationChecks;\n                    if (previousCategories) {\n                        // Validation with explicit options was requested for a document that has already been partly validated.\n                        // In this case, we need to merge the previous validation categories with the new ones.\n                        const newCategories = (_b = options.validation.categories) !== null && _b !== void 0 ? _b : _validation_validation_registry_js__WEBPACK_IMPORTED_MODULE_3__.ValidationCategory.all;\n                        const categories = newCategories.filter(c => !previousCategories.includes(c));\n                        if (categories.length > 0) {\n                            this.buildState.set(key, {\n                                completed: false,\n                                options: {\n                                    validation: Object.assign(Object.assign({}, options.validation), { categories })\n                                },\n                                result: buildState.result\n                            });\n                            document.state = _documents_js__WEBPACK_IMPORTED_MODULE_1__.DocumentState.IndexedReferences;\n                        }\n                    }\n                }\n            }\n            else {\n                // Default: forget any previous build options\n                this.buildState.delete(key);\n            }\n        }\n        this.currentState = _documents_js__WEBPACK_IMPORTED_MODULE_1__.DocumentState.Changed;\n        await this.emitUpdate(documents.map(e => e.uri), []);\n        await this.buildDocuments(documents, options, cancelToken);\n    }\n    async update(changed, deleted, cancelToken = _utils_cancellation_js__WEBPACK_IMPORTED_MODULE_2__.CancellationToken.None) {\n        this.currentState = _documents_js__WEBPACK_IMPORTED_MODULE_1__.DocumentState.Changed;\n        // Remove all metadata of documents that are reported as deleted\n        for (const deletedUri of deleted) {\n            this.langiumDocuments.deleteDocument(deletedUri);\n            this.buildState.delete(deletedUri.toString());\n            this.indexManager.remove(deletedUri);\n        }\n        // Set the state of all changed documents to `Changed` so they are completely rebuilt\n        for (const changedUri of changed) {\n            const invalidated = this.langiumDocuments.invalidateDocument(changedUri);\n            if (!invalidated) {\n                // We create an unparsed, invalid document.\n                // This will be parsed as soon as we reach the first document builder phase.\n                // This allows to cancel the parsing process later in case we need it.\n                const newDocument = this.langiumDocumentFactory.fromModel({ $type: 'INVALID' }, changedUri);\n                newDocument.state = _documents_js__WEBPACK_IMPORTED_MODULE_1__.DocumentState.Changed;\n                this.langiumDocuments.addDocument(newDocument);\n            }\n            this.buildState.delete(changedUri.toString());\n        }\n        // Set the state of all documents that should be relinked to `ComputedScopes` (if not already lower)\n        const allChangedUris = (0,_utils_stream_js__WEBPACK_IMPORTED_MODULE_4__.stream)(changed).concat(deleted).map(uri => uri.toString()).toSet();\n        this.langiumDocuments.all\n            .filter(doc => !allChangedUris.has(doc.uri.toString()) && this.shouldRelink(doc, allChangedUris))\n            .forEach(doc => {\n            const linker = this.serviceRegistry.getServices(doc.uri).references.Linker;\n            linker.unlink(doc);\n            doc.state = Math.min(doc.state, _documents_js__WEBPACK_IMPORTED_MODULE_1__.DocumentState.ComputedScopes);\n            doc.diagnostics = undefined;\n        });\n        // Notify listeners of the update\n        await this.emitUpdate(changed, deleted);\n        // Only allow interrupting the execution after all state changes are done\n        await (0,_utils_promise_utils_js__WEBPACK_IMPORTED_MODULE_5__.interruptAndCheck)(cancelToken);\n        // Collect and sort all documents that we should rebuild\n        const rebuildDocuments = this.sortDocuments(this.langiumDocuments.all\n            .filter(doc => {\n            var _a;\n            // This includes those that were reported as changed and those that we selected for relinking\n            return doc.state < _documents_js__WEBPACK_IMPORTED_MODULE_1__.DocumentState.Linked\n                // This includes those for which a previous build has been cancelled\n                || !((_a = this.buildState.get(doc.uri.toString())) === null || _a === void 0 ? void 0 : _a.completed);\n        })\n            .toArray());\n        await this.buildDocuments(rebuildDocuments, this.updateBuildOptions, cancelToken);\n    }\n    async emitUpdate(changed, deleted) {\n        await Promise.all(this.updateListeners.map(listener => listener(changed, deleted)));\n    }\n    /**\n     * Sort the given documents by priority. By default, documents with an open text document are prioritized.\n     * This is useful to ensure that visible documents show their diagnostics before all other documents.\n     *\n     * This improves the responsiveness in large workspaces as users usually don't care about diagnostics\n     * in files that are currently not opened in the editor.\n     */\n    sortDocuments(documents) {\n        let left = 0;\n        let right = documents.length - 1;\n        while (left < right) {\n            while (left < documents.length && this.hasTextDocument(documents[left])) {\n                left++;\n            }\n            while (right >= 0 && !this.hasTextDocument(documents[right])) {\n                right--;\n            }\n            if (left < right) {\n                [documents[left], documents[right]] = [documents[right], documents[left]];\n            }\n        }\n        return documents;\n    }\n    hasTextDocument(doc) {\n        var _a;\n        return Boolean((_a = this.textDocuments) === null || _a === void 0 ? void 0 : _a.get(doc.uri));\n    }\n    /**\n     * Check whether the given document should be relinked after changes were found in the given URIs.\n     */\n    shouldRelink(document, changedUris) {\n        // Relink documents with linking errors -- maybe those references can be resolved now\n        if (document.references.some(ref => ref.error !== undefined)) {\n            return true;\n        }\n        // Check whether the document is affected by any of the changed URIs\n        return this.indexManager.isAffected(document, changedUris);\n    }\n    onUpdate(callback) {\n        this.updateListeners.push(callback);\n        return _utils_disposable_js__WEBPACK_IMPORTED_MODULE_6__.Disposable.create(() => {\n            const index = this.updateListeners.indexOf(callback);\n            if (index >= 0) {\n                this.updateListeners.splice(index, 1);\n            }\n        });\n    }\n    /**\n     * Build the given documents by stepping through all build phases. If a document's state indicates\n     * that a certain build phase is already done, the phase is skipped for that document.\n     *\n     * @param documents The documents to build.\n     * @param options the {@link BuildOptions} to use.\n     * @param cancelToken A cancellation token that can be used to cancel the build.\n     * @returns A promise that resolves when the build is done.\n     */\n    async buildDocuments(documents, options, cancelToken) {\n        this.prepareBuild(documents, options);\n        // 0. Parse content\n        await this.runCancelable(documents, _documents_js__WEBPACK_IMPORTED_MODULE_1__.DocumentState.Parsed, cancelToken, doc => this.langiumDocumentFactory.update(doc, cancelToken));\n        // 1. Index content\n        await this.runCancelable(documents, _documents_js__WEBPACK_IMPORTED_MODULE_1__.DocumentState.IndexedContent, cancelToken, doc => this.indexManager.updateContent(doc, cancelToken));\n        // 2. Compute scopes\n        await this.runCancelable(documents, _documents_js__WEBPACK_IMPORTED_MODULE_1__.DocumentState.ComputedScopes, cancelToken, async (doc) => {\n            const scopeComputation = this.serviceRegistry.getServices(doc.uri).references.ScopeComputation;\n            doc.precomputedScopes = await scopeComputation.computeLocalScopes(doc, cancelToken);\n        });\n        // 3. Linking\n        await this.runCancelable(documents, _documents_js__WEBPACK_IMPORTED_MODULE_1__.DocumentState.Linked, cancelToken, doc => {\n            const linker = this.serviceRegistry.getServices(doc.uri).references.Linker;\n            return linker.link(doc, cancelToken);\n        });\n        // 4. Index references\n        await this.runCancelable(documents, _documents_js__WEBPACK_IMPORTED_MODULE_1__.DocumentState.IndexedReferences, cancelToken, doc => this.indexManager.updateReferences(doc, cancelToken));\n        // 5. Validation\n        const toBeValidated = documents.filter(doc => this.shouldValidate(doc));\n        await this.runCancelable(toBeValidated, _documents_js__WEBPACK_IMPORTED_MODULE_1__.DocumentState.Validated, cancelToken, doc => this.validate(doc, cancelToken));\n        // If we've made it to this point without being cancelled, we can mark the build state as completed.\n        for (const doc of documents) {\n            const state = this.buildState.get(doc.uri.toString());\n            if (state) {\n                state.completed = true;\n            }\n        }\n    }\n    /**\n     * Runs prior to beginning the build process to update the {@link DocumentBuildState} for each document\n     *\n     * @param documents collection of documents to be built\n     * @param options the {@link BuildOptions} to use\n     */\n    prepareBuild(documents, options) {\n        for (const doc of documents) {\n            const key = doc.uri.toString();\n            const state = this.buildState.get(key);\n            // If the document has no previous build state, we set it. If it has one, but it's already marked\n            // as completed, we overwrite it. If the previous build was not completed, we keep its state\n            // and continue where it was cancelled.\n            if (!state || state.completed) {\n                this.buildState.set(key, {\n                    completed: false,\n                    options,\n                    result: state === null || state === void 0 ? void 0 : state.result\n                });\n            }\n        }\n    }\n    /**\n     * Runs a cancelable operation on a set of documents to bring them to a specified {@link DocumentState}.\n     *\n     * @param documents The array of documents to process.\n     * @param targetState The target {@link DocumentState} to bring the documents to.\n     * @param cancelToken A token that can be used to cancel the operation.\n     * @param callback A function to be called for each document.\n     * @returns A promise that resolves when all documents have been processed or the operation is canceled.\n     * @throws Will throw `OperationCancelled` if the operation is canceled via a `CancellationToken`.\n     */\n    async runCancelable(documents, targetState, cancelToken, callback) {\n        const filtered = documents.filter(doc => doc.state < targetState);\n        for (const document of filtered) {\n            await (0,_utils_promise_utils_js__WEBPACK_IMPORTED_MODULE_5__.interruptAndCheck)(cancelToken);\n            await callback(document);\n            document.state = targetState;\n            await this.notifyDocumentPhase(document, targetState, cancelToken);\n        }\n        // Do not use `filtered` here, as that will miss documents that have previously reached the current target state\n        // For example, this happens in case the cancellation triggers between the processing of two documents\n        // Or files that were picked up during the workspace initialization\n        const targetStateDocs = documents.filter(doc => doc.state === targetState);\n        await this.notifyBuildPhase(targetStateDocs, targetState, cancelToken);\n        this.currentState = targetState;\n    }\n    onBuildPhase(targetState, callback) {\n        this.buildPhaseListeners.add(targetState, callback);\n        return _utils_disposable_js__WEBPACK_IMPORTED_MODULE_6__.Disposable.create(() => {\n            this.buildPhaseListeners.delete(targetState, callback);\n        });\n    }\n    onDocumentPhase(targetState, callback) {\n        this.documentPhaseListeners.add(targetState, callback);\n        return _utils_disposable_js__WEBPACK_IMPORTED_MODULE_6__.Disposable.create(() => {\n            this.documentPhaseListeners.delete(targetState, callback);\n        });\n    }\n    waitUntil(state, uriOrToken, cancelToken) {\n        let uri = undefined;\n        if (uriOrToken && 'path' in uriOrToken) {\n            uri = uriOrToken;\n        }\n        else {\n            cancelToken = uriOrToken;\n        }\n        cancelToken !== null && cancelToken !== void 0 ? cancelToken : (cancelToken = _utils_cancellation_js__WEBPACK_IMPORTED_MODULE_2__.CancellationToken.None);\n        if (uri) {\n            const document = this.langiumDocuments.getDocument(uri);\n            if (document && document.state > state) {\n                return Promise.resolve(uri);\n            }\n        }\n        if (this.currentState >= state) {\n            return Promise.resolve(undefined);\n        }\n        else if (cancelToken.isCancellationRequested) {\n            return Promise.reject(_utils_promise_utils_js__WEBPACK_IMPORTED_MODULE_5__.OperationCancelled);\n        }\n        return new Promise((resolve, reject) => {\n            const buildDisposable = this.onBuildPhase(state, () => {\n                buildDisposable.dispose();\n                cancelDisposable.dispose();\n                if (uri) {\n                    const document = this.langiumDocuments.getDocument(uri);\n                    resolve(document === null || document === void 0 ? void 0 : document.uri);\n                }\n                else {\n                    resolve(undefined);\n                }\n            });\n            const cancelDisposable = cancelToken.onCancellationRequested(() => {\n                buildDisposable.dispose();\n                cancelDisposable.dispose();\n                reject(_utils_promise_utils_js__WEBPACK_IMPORTED_MODULE_5__.OperationCancelled);\n            });\n        });\n    }\n    async notifyDocumentPhase(document, state, cancelToken) {\n        const listeners = this.documentPhaseListeners.get(state);\n        const listenersCopy = listeners.slice();\n        for (const listener of listenersCopy) {\n            try {\n                await listener(document, cancelToken);\n            }\n            catch (err) {\n                // Ignore cancellation errors\n                // We want to finish the listeners before throwing\n                if (!(0,_utils_promise_utils_js__WEBPACK_IMPORTED_MODULE_5__.isOperationCancelled)(err)) {\n                    throw err;\n                }\n            }\n        }\n    }\n    async notifyBuildPhase(documents, state, cancelToken) {\n        if (documents.length === 0) {\n            // Don't notify when no document has been processed\n            return;\n        }\n        const listeners = this.buildPhaseListeners.get(state);\n        const listenersCopy = listeners.slice();\n        for (const listener of listenersCopy) {\n            await (0,_utils_promise_utils_js__WEBPACK_IMPORTED_MODULE_5__.interruptAndCheck)(cancelToken);\n            await listener(documents, cancelToken);\n        }\n    }\n    /**\n     * Determine whether the given document should be validated during a build. The default\n     * implementation checks the `validation` property of the build options. If it's set to `true`\n     * or a `ValidationOptions` object, the document is included in the validation phase.\n     */\n    shouldValidate(document) {\n        return Boolean(this.getBuildOptions(document).validation);\n    }\n    /**\n     * Run validation checks on the given document and store the resulting diagnostics in the document.\n     * If the document already contains diagnostics, the new ones are added to the list.\n     */\n    async validate(document, cancelToken) {\n        var _a, _b;\n        const validator = this.serviceRegistry.getServices(document.uri).validation.DocumentValidator;\n        const validationSetting = this.getBuildOptions(document).validation;\n        const options = typeof validationSetting === 'object' ? validationSetting : undefined;\n        const diagnostics = await validator.validateDocument(document, options, cancelToken);\n        if (document.diagnostics) {\n            document.diagnostics.push(...diagnostics);\n        }\n        else {\n            document.diagnostics = diagnostics;\n        }\n        // Store information about the executed validation in the build state\n        const state = this.buildState.get(document.uri.toString());\n        if (state) {\n            (_a = state.result) !== null && _a !== void 0 ? _a : (state.result = {});\n            const newCategories = (_b = options === null || options === void 0 ? void 0 : options.categories) !== null && _b !== void 0 ? _b : _validation_validation_registry_js__WEBPACK_IMPORTED_MODULE_3__.ValidationCategory.all;\n            if (state.result.validationChecks) {\n                state.result.validationChecks.push(...newCategories);\n            }\n            else {\n                state.result.validationChecks = [...newCategories];\n            }\n        }\n    }\n    getBuildOptions(document) {\n        var _a, _b;\n        return (_b = (_a = this.buildState.get(document.uri.toString())) === null || _a === void 0 ? void 0 : _a.options) !== null && _b !== void 0 ? _b : {};\n    }\n}\n//# sourceMappingURL=document-builder.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/workspace/document-builder.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/workspace/documents.js":
/*!*******************************************************************************************!*\
  !*** ../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/workspace/documents.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DefaultLangiumDocumentFactory: () => (/* binding */ DefaultLangiumDocumentFactory),\n/* harmony export */   DefaultLangiumDocuments: () => (/* binding */ DefaultLangiumDocuments),\n/* harmony export */   DocumentState: () => (/* binding */ DocumentState),\n/* harmony export */   TextDocument: () => (/* reexport safe */ vscode_languageserver_textdocument__WEBPACK_IMPORTED_MODULE_0__.TextDocument)\n/* harmony export */ });\n/* harmony import */ var vscode_languageserver_textdocument__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./documents.js */ \"(ssr)/../node_modules/.pnpm/vscode-languageserver-textdocument@1.0.12/node_modules/vscode-languageserver-textdocument/lib/esm/main.js\");\n/* harmony import */ var _utils_cancellation_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/cancellation.js */ \"(ssr)/../node_modules/.pnpm/vscode-jsonrpc@8.2.0/node_modules/vscode-jsonrpc/lib/common/cancellation.js\");\n/* harmony import */ var _utils_stream_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/stream.js */ \"(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/stream.js\");\n/* harmony import */ var _utils_uri_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/uri-utils.js */ \"(ssr)/../node_modules/.pnpm/vscode-uri@3.0.8/node_modules/vscode-uri/lib/esm/index.mjs\");\n/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n/**\n * Re-export 'TextDocument' from 'vscode-languageserver-textdocument' for convenience,\n *  including both type _and_ symbol (namespace), as we here and there also refer to the symbol,\n *  the overhead is very small, just a few kilobytes.\n * Everything else of that package (at the time contributing) is also defined\n *  in 'vscode-languageserver-protocol' or 'vscode-languageserver-types'.\n */\n\n\n\n\n\n/**\n * A document is subject to several phases that are run in predefined order. Any state value implies that\n * smaller state values are finished as well.\n */\nvar DocumentState;\n(function (DocumentState) {\n    /**\n     * The text content has changed and needs to be parsed again. The AST held by this outdated\n     * document instance is no longer valid.\n     */\n    DocumentState[DocumentState[\"Changed\"] = 0] = \"Changed\";\n    /**\n     * An AST has been created from the text content. The document structure can be traversed,\n     * but cross-references cannot be resolved yet. If necessary, the structure can be manipulated\n     * at this stage as a preprocessing step.\n     */\n    DocumentState[DocumentState[\"Parsed\"] = 1] = \"Parsed\";\n    /**\n     * The `IndexManager` service has processed AST nodes of this document. This means the\n     * exported symbols are available in the global scope and can be resolved from other documents.\n     */\n    DocumentState[DocumentState[\"IndexedContent\"] = 2] = \"IndexedContent\";\n    /**\n     * The `ScopeComputation` service has processed this document. This means the local symbols\n     * are stored in a MultiMap so they can be looked up by the `ScopeProvider` service.\n     * Once a document has reached this state, you may follow every reference - it will lazily\n     * resolve its `ref` property and yield either the target AST node or `undefined` in case\n     * the target is not in scope.\n     */\n    DocumentState[DocumentState[\"ComputedScopes\"] = 3] = \"ComputedScopes\";\n    /**\n     * The `Linker` service has processed this document. All outgoing references have been\n     * resolved or marked as erroneous.\n     */\n    DocumentState[DocumentState[\"Linked\"] = 4] = \"Linked\";\n    /**\n     * The `IndexManager` service has processed AST node references of this document. This is\n     * necessary to determine which documents are affected by a change in one of the workspace\n     * documents.\n     */\n    DocumentState[DocumentState[\"IndexedReferences\"] = 5] = \"IndexedReferences\";\n    /**\n     * The `DocumentValidator` service has processed this document. The language server listens\n     * to the results of this phase and sends diagnostics to the client.\n     */\n    DocumentState[DocumentState[\"Validated\"] = 6] = \"Validated\";\n})(DocumentState || (DocumentState = {}));\nclass DefaultLangiumDocumentFactory {\n    constructor(services) {\n        this.serviceRegistry = services.ServiceRegistry;\n        this.textDocuments = services.workspace.TextDocuments;\n        this.fileSystemProvider = services.workspace.FileSystemProvider;\n    }\n    async fromUri(uri, cancellationToken = _utils_cancellation_js__WEBPACK_IMPORTED_MODULE_1__.CancellationToken.None) {\n        const content = await this.fileSystemProvider.readFile(uri);\n        return this.createAsync(uri, content, cancellationToken);\n    }\n    fromTextDocument(textDocument, uri, token) {\n        uri = uri !== null && uri !== void 0 ? uri : _utils_uri_utils_js__WEBPACK_IMPORTED_MODULE_2__.URI.parse(textDocument.uri);\n        if (_utils_cancellation_js__WEBPACK_IMPORTED_MODULE_1__.CancellationToken.is(token)) {\n            return this.createAsync(uri, textDocument, token);\n        }\n        else {\n            return this.create(uri, textDocument, token);\n        }\n    }\n    fromString(text, uri, token) {\n        if (_utils_cancellation_js__WEBPACK_IMPORTED_MODULE_1__.CancellationToken.is(token)) {\n            return this.createAsync(uri, text, token);\n        }\n        else {\n            return this.create(uri, text, token);\n        }\n    }\n    fromModel(model, uri) {\n        return this.create(uri, { $model: model });\n    }\n    create(uri, content, options) {\n        if (typeof content === 'string') {\n            const parseResult = this.parse(uri, content, options);\n            return this.createLangiumDocument(parseResult, uri, undefined, content);\n        }\n        else if ('$model' in content) {\n            const parseResult = { value: content.$model, parserErrors: [], lexerErrors: [] };\n            return this.createLangiumDocument(parseResult, uri);\n        }\n        else {\n            const parseResult = this.parse(uri, content.getText(), options);\n            return this.createLangiumDocument(parseResult, uri, content);\n        }\n    }\n    async createAsync(uri, content, cancelToken) {\n        if (typeof content === 'string') {\n            const parseResult = await this.parseAsync(uri, content, cancelToken);\n            return this.createLangiumDocument(parseResult, uri, undefined, content);\n        }\n        else {\n            const parseResult = await this.parseAsync(uri, content.getText(), cancelToken);\n            return this.createLangiumDocument(parseResult, uri, content);\n        }\n    }\n    /**\n     * Create a LangiumDocument from a given parse result.\n     *\n     * A TextDocument is created on demand if it is not provided as argument here. Usually this\n     * should not be necessary because the main purpose of the TextDocument is to convert between\n     * text ranges and offsets, which is done solely in LSP request handling.\n     *\n     * With the introduction of {@link update} below this method is supposed to be mainly called\n     * during workspace initialization and on addition/recognition of new files, while changes in\n     * existing documents are processed via {@link update}.\n     */\n    createLangiumDocument(parseResult, uri, textDocument, text) {\n        let document;\n        if (textDocument) {\n            document = {\n                parseResult,\n                uri,\n                state: DocumentState.Parsed,\n                references: [],\n                textDocument\n            };\n        }\n        else {\n            const textDocumentGetter = this.createTextDocumentGetter(uri, text);\n            document = {\n                parseResult,\n                uri,\n                state: DocumentState.Parsed,\n                references: [],\n                get textDocument() {\n                    return textDocumentGetter();\n                }\n            };\n        }\n        parseResult.value.$document = document;\n        return document;\n    }\n    async update(document, cancellationToken) {\n        var _a, _b;\n        // The CST full text property contains the original text that was used to create the AST.\n        const oldText = (_a = document.parseResult.value.$cstNode) === null || _a === void 0 ? void 0 : _a.root.fullText;\n        const textDocument = (_b = this.textDocuments) === null || _b === void 0 ? void 0 : _b.get(document.uri.toString());\n        const text = textDocument ? textDocument.getText() : await this.fileSystemProvider.readFile(document.uri);\n        if (textDocument) {\n            Object.defineProperty(document, 'textDocument', {\n                value: textDocument\n            });\n        }\n        else {\n            const textDocumentGetter = this.createTextDocumentGetter(document.uri, text);\n            Object.defineProperty(document, 'textDocument', {\n                get: textDocumentGetter\n            });\n        }\n        // Some of these documents can be pretty large, so parsing them again can be quite expensive.\n        // Therefore, we only parse if the text has actually changed.\n        if (oldText !== text) {\n            document.parseResult = await this.parseAsync(document.uri, text, cancellationToken);\n            document.parseResult.value.$document = document;\n        }\n        document.state = DocumentState.Parsed;\n        return document;\n    }\n    parse(uri, text, options) {\n        const services = this.serviceRegistry.getServices(uri);\n        return services.parser.LangiumParser.parse(text, options);\n    }\n    parseAsync(uri, text, cancellationToken) {\n        const services = this.serviceRegistry.getServices(uri);\n        return services.parser.AsyncParser.parse(text, cancellationToken);\n    }\n    createTextDocumentGetter(uri, text) {\n        const serviceRegistry = this.serviceRegistry;\n        let textDoc = undefined;\n        return () => {\n            return textDoc !== null && textDoc !== void 0 ? textDoc : (textDoc = vscode_languageserver_textdocument__WEBPACK_IMPORTED_MODULE_0__.TextDocument.create(uri.toString(), serviceRegistry.getServices(uri).LanguageMetaData.languageId, 0, text !== null && text !== void 0 ? text : ''));\n        };\n    }\n}\nclass DefaultLangiumDocuments {\n    constructor(services) {\n        this.documentMap = new Map();\n        this.langiumDocumentFactory = services.workspace.LangiumDocumentFactory;\n        this.serviceRegistry = services.ServiceRegistry;\n    }\n    get all() {\n        return (0,_utils_stream_js__WEBPACK_IMPORTED_MODULE_3__.stream)(this.documentMap.values());\n    }\n    addDocument(document) {\n        const uriString = document.uri.toString();\n        if (this.documentMap.has(uriString)) {\n            throw new Error(`A document with the URI '${uriString}' is already present.`);\n        }\n        this.documentMap.set(uriString, document);\n    }\n    getDocument(uri) {\n        const uriString = uri.toString();\n        return this.documentMap.get(uriString);\n    }\n    async getOrCreateDocument(uri, cancellationToken) {\n        let document = this.getDocument(uri);\n        if (document) {\n            return document;\n        }\n        document = await this.langiumDocumentFactory.fromUri(uri, cancellationToken);\n        this.addDocument(document);\n        return document;\n    }\n    createDocument(uri, text, cancellationToken) {\n        if (cancellationToken) {\n            return this.langiumDocumentFactory.fromString(text, uri, cancellationToken).then(document => {\n                this.addDocument(document);\n                return document;\n            });\n        }\n        else {\n            const document = this.langiumDocumentFactory.fromString(text, uri);\n            this.addDocument(document);\n            return document;\n        }\n    }\n    hasDocument(uri) {\n        return this.documentMap.has(uri.toString());\n    }\n    invalidateDocument(uri) {\n        const uriString = uri.toString();\n        const langiumDoc = this.documentMap.get(uriString);\n        if (langiumDoc) {\n            const linker = this.serviceRegistry.getServices(uri).references.Linker;\n            linker.unlink(langiumDoc);\n            langiumDoc.state = DocumentState.Changed;\n            langiumDoc.precomputedScopes = undefined;\n            langiumDoc.diagnostics = undefined;\n        }\n        return langiumDoc;\n    }\n    deleteDocument(uri) {\n        const uriString = uri.toString();\n        const langiumDoc = this.documentMap.get(uriString);\n        if (langiumDoc) {\n            langiumDoc.state = DocumentState.Changed;\n            this.documentMap.delete(uriString);\n        }\n        return langiumDoc;\n    }\n}\n//# sourceMappingURL=documents.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2xhbmdpdW1AMy4zLjEvbm9kZV9tb2R1bGVzL2xhbmdpdW0vbGliL3dvcmtzcGFjZS9kb2N1bWVudHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDa0U7QUFDcEI7QUFDZTtBQUNqQjtBQUNBO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxzQ0FBc0M7QUFDaEM7QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkNBQTJDLHFFQUFpQjtBQUM1RDtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFEQUFxRCxvREFBRztBQUN4RCxZQUFZLHFFQUFpQjtBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVkscUVBQWlCO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDLGVBQWU7QUFDakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQ0FBa0M7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDLGNBQWM7QUFDL0M7QUFDQSw2Q0FBNkMsYUFBYTtBQUMxRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlGQUFpRiw0RUFBWTtBQUM3RjtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsd0RBQU07QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3REFBd0QsVUFBVTtBQUNsRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvZXRoYW5raW0vTmVzdG9yL21lZGZldGNoLmpzL25vZGVfbW9kdWxlcy8ucG5wbS9sYW5naXVtQDMuMy4xL25vZGVfbW9kdWxlcy9sYW5naXVtL2xpYi93b3Jrc3BhY2UvZG9jdW1lbnRzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAqIENvcHlyaWdodCAyMDIxIFR5cGVGb3ggR21iSFxuICogVGhpcyBwcm9ncmFtIGFuZCB0aGUgYWNjb21wYW55aW5nIG1hdGVyaWFscyBhcmUgbWFkZSBhdmFpbGFibGUgdW5kZXIgdGhlXG4gKiB0ZXJtcyBvZiB0aGUgTUlUIExpY2Vuc2UsIHdoaWNoIGlzIGF2YWlsYWJsZSBpbiB0aGUgcHJvamVjdCByb290LlxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKlxuICogUmUtZXhwb3J0ICdUZXh0RG9jdW1lbnQnIGZyb20gJ3ZzY29kZS1sYW5ndWFnZXNlcnZlci10ZXh0ZG9jdW1lbnQnIGZvciBjb252ZW5pZW5jZSxcbiAqICBpbmNsdWRpbmcgYm90aCB0eXBlIF9hbmRfIHN5bWJvbCAobmFtZXNwYWNlKSwgYXMgd2UgaGVyZSBhbmQgdGhlcmUgYWxzbyByZWZlciB0byB0aGUgc3ltYm9sLFxuICogIHRoZSBvdmVyaGVhZCBpcyB2ZXJ5IHNtYWxsLCBqdXN0IGEgZmV3IGtpbG9ieXRlcy5cbiAqIEV2ZXJ5dGhpbmcgZWxzZSBvZiB0aGF0IHBhY2thZ2UgKGF0IHRoZSB0aW1lIGNvbnRyaWJ1dGluZykgaXMgYWxzbyBkZWZpbmVkXG4gKiAgaW4gJ3ZzY29kZS1sYW5ndWFnZXNlcnZlci1wcm90b2NvbCcgb3IgJ3ZzY29kZS1sYW5ndWFnZXNlcnZlci10eXBlcycuXG4gKi9cbmV4cG9ydCB7IFRleHREb2N1bWVudCB9IGZyb20gJ3ZzY29kZS1sYW5ndWFnZXNlcnZlci10ZXh0ZG9jdW1lbnQnO1xuaW1wb3J0IHsgVGV4dERvY3VtZW50IH0gZnJvbSAnLi9kb2N1bWVudHMuanMnO1xuaW1wb3J0IHsgQ2FuY2VsbGF0aW9uVG9rZW4gfSBmcm9tICcuLi91dGlscy9jYW5jZWxsYXRpb24uanMnO1xuaW1wb3J0IHsgc3RyZWFtIH0gZnJvbSAnLi4vdXRpbHMvc3RyZWFtLmpzJztcbmltcG9ydCB7IFVSSSB9IGZyb20gJy4uL3V0aWxzL3VyaS11dGlscy5qcyc7XG4vKipcbiAqIEEgZG9jdW1lbnQgaXMgc3ViamVjdCB0byBzZXZlcmFsIHBoYXNlcyB0aGF0IGFyZSBydW4gaW4gcHJlZGVmaW5lZCBvcmRlci4gQW55IHN0YXRlIHZhbHVlIGltcGxpZXMgdGhhdFxuICogc21hbGxlciBzdGF0ZSB2YWx1ZXMgYXJlIGZpbmlzaGVkIGFzIHdlbGwuXG4gKi9cbmV4cG9ydCB2YXIgRG9jdW1lbnRTdGF0ZTtcbihmdW5jdGlvbiAoRG9jdW1lbnRTdGF0ZSkge1xuICAgIC8qKlxuICAgICAqIFRoZSB0ZXh0IGNvbnRlbnQgaGFzIGNoYW5nZWQgYW5kIG5lZWRzIHRvIGJlIHBhcnNlZCBhZ2Fpbi4gVGhlIEFTVCBoZWxkIGJ5IHRoaXMgb3V0ZGF0ZWRcbiAgICAgKiBkb2N1bWVudCBpbnN0YW5jZSBpcyBubyBsb25nZXIgdmFsaWQuXG4gICAgICovXG4gICAgRG9jdW1lbnRTdGF0ZVtEb2N1bWVudFN0YXRlW1wiQ2hhbmdlZFwiXSA9IDBdID0gXCJDaGFuZ2VkXCI7XG4gICAgLyoqXG4gICAgICogQW4gQVNUIGhhcyBiZWVuIGNyZWF0ZWQgZnJvbSB0aGUgdGV4dCBjb250ZW50LiBUaGUgZG9jdW1lbnQgc3RydWN0dXJlIGNhbiBiZSB0cmF2ZXJzZWQsXG4gICAgICogYnV0IGNyb3NzLXJlZmVyZW5jZXMgY2Fubm90IGJlIHJlc29sdmVkIHlldC4gSWYgbmVjZXNzYXJ5LCB0aGUgc3RydWN0dXJlIGNhbiBiZSBtYW5pcHVsYXRlZFxuICAgICAqIGF0IHRoaXMgc3RhZ2UgYXMgYSBwcmVwcm9jZXNzaW5nIHN0ZXAuXG4gICAgICovXG4gICAgRG9jdW1lbnRTdGF0ZVtEb2N1bWVudFN0YXRlW1wiUGFyc2VkXCJdID0gMV0gPSBcIlBhcnNlZFwiO1xuICAgIC8qKlxuICAgICAqIFRoZSBgSW5kZXhNYW5hZ2VyYCBzZXJ2aWNlIGhhcyBwcm9jZXNzZWQgQVNUIG5vZGVzIG9mIHRoaXMgZG9jdW1lbnQuIFRoaXMgbWVhbnMgdGhlXG4gICAgICogZXhwb3J0ZWQgc3ltYm9scyBhcmUgYXZhaWxhYmxlIGluIHRoZSBnbG9iYWwgc2NvcGUgYW5kIGNhbiBiZSByZXNvbHZlZCBmcm9tIG90aGVyIGRvY3VtZW50cy5cbiAgICAgKi9cbiAgICBEb2N1bWVudFN0YXRlW0RvY3VtZW50U3RhdGVbXCJJbmRleGVkQ29udGVudFwiXSA9IDJdID0gXCJJbmRleGVkQ29udGVudFwiO1xuICAgIC8qKlxuICAgICAqIFRoZSBgU2NvcGVDb21wdXRhdGlvbmAgc2VydmljZSBoYXMgcHJvY2Vzc2VkIHRoaXMgZG9jdW1lbnQuIFRoaXMgbWVhbnMgdGhlIGxvY2FsIHN5bWJvbHNcbiAgICAgKiBhcmUgc3RvcmVkIGluIGEgTXVsdGlNYXAgc28gdGhleSBjYW4gYmUgbG9va2VkIHVwIGJ5IHRoZSBgU2NvcGVQcm92aWRlcmAgc2VydmljZS5cbiAgICAgKiBPbmNlIGEgZG9jdW1lbnQgaGFzIHJlYWNoZWQgdGhpcyBzdGF0ZSwgeW91IG1heSBmb2xsb3cgZXZlcnkgcmVmZXJlbmNlIC0gaXQgd2lsbCBsYXppbHlcbiAgICAgKiByZXNvbHZlIGl0cyBgcmVmYCBwcm9wZXJ0eSBhbmQgeWllbGQgZWl0aGVyIHRoZSB0YXJnZXQgQVNUIG5vZGUgb3IgYHVuZGVmaW5lZGAgaW4gY2FzZVxuICAgICAqIHRoZSB0YXJnZXQgaXMgbm90IGluIHNjb3BlLlxuICAgICAqL1xuICAgIERvY3VtZW50U3RhdGVbRG9jdW1lbnRTdGF0ZVtcIkNvbXB1dGVkU2NvcGVzXCJdID0gM10gPSBcIkNvbXB1dGVkU2NvcGVzXCI7XG4gICAgLyoqXG4gICAgICogVGhlIGBMaW5rZXJgIHNlcnZpY2UgaGFzIHByb2Nlc3NlZCB0aGlzIGRvY3VtZW50LiBBbGwgb3V0Z29pbmcgcmVmZXJlbmNlcyBoYXZlIGJlZW5cbiAgICAgKiByZXNvbHZlZCBvciBtYXJrZWQgYXMgZXJyb25lb3VzLlxuICAgICAqL1xuICAgIERvY3VtZW50U3RhdGVbRG9jdW1lbnRTdGF0ZVtcIkxpbmtlZFwiXSA9IDRdID0gXCJMaW5rZWRcIjtcbiAgICAvKipcbiAgICAgKiBUaGUgYEluZGV4TWFuYWdlcmAgc2VydmljZSBoYXMgcHJvY2Vzc2VkIEFTVCBub2RlIHJlZmVyZW5jZXMgb2YgdGhpcyBkb2N1bWVudC4gVGhpcyBpc1xuICAgICAqIG5lY2Vzc2FyeSB0byBkZXRlcm1pbmUgd2hpY2ggZG9jdW1lbnRzIGFyZSBhZmZlY3RlZCBieSBhIGNoYW5nZSBpbiBvbmUgb2YgdGhlIHdvcmtzcGFjZVxuICAgICAqIGRvY3VtZW50cy5cbiAgICAgKi9cbiAgICBEb2N1bWVudFN0YXRlW0RvY3VtZW50U3RhdGVbXCJJbmRleGVkUmVmZXJlbmNlc1wiXSA9IDVdID0gXCJJbmRleGVkUmVmZXJlbmNlc1wiO1xuICAgIC8qKlxuICAgICAqIFRoZSBgRG9jdW1lbnRWYWxpZGF0b3JgIHNlcnZpY2UgaGFzIHByb2Nlc3NlZCB0aGlzIGRvY3VtZW50LiBUaGUgbGFuZ3VhZ2Ugc2VydmVyIGxpc3RlbnNcbiAgICAgKiB0byB0aGUgcmVzdWx0cyBvZiB0aGlzIHBoYXNlIGFuZCBzZW5kcyBkaWFnbm9zdGljcyB0byB0aGUgY2xpZW50LlxuICAgICAqL1xuICAgIERvY3VtZW50U3RhdGVbRG9jdW1lbnRTdGF0ZVtcIlZhbGlkYXRlZFwiXSA9IDZdID0gXCJWYWxpZGF0ZWRcIjtcbn0pKERvY3VtZW50U3RhdGUgfHwgKERvY3VtZW50U3RhdGUgPSB7fSkpO1xuZXhwb3J0IGNsYXNzIERlZmF1bHRMYW5naXVtRG9jdW1lbnRGYWN0b3J5IHtcbiAgICBjb25zdHJ1Y3RvcihzZXJ2aWNlcykge1xuICAgICAgICB0aGlzLnNlcnZpY2VSZWdpc3RyeSA9IHNlcnZpY2VzLlNlcnZpY2VSZWdpc3RyeTtcbiAgICAgICAgdGhpcy50ZXh0RG9jdW1lbnRzID0gc2VydmljZXMud29ya3NwYWNlLlRleHREb2N1bWVudHM7XG4gICAgICAgIHRoaXMuZmlsZVN5c3RlbVByb3ZpZGVyID0gc2VydmljZXMud29ya3NwYWNlLkZpbGVTeXN0ZW1Qcm92aWRlcjtcbiAgICB9XG4gICAgYXN5bmMgZnJvbVVyaSh1cmksIGNhbmNlbGxhdGlvblRva2VuID0gQ2FuY2VsbGF0aW9uVG9rZW4uTm9uZSkge1xuICAgICAgICBjb25zdCBjb250ZW50ID0gYXdhaXQgdGhpcy5maWxlU3lzdGVtUHJvdmlkZXIucmVhZEZpbGUodXJpKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlQXN5bmModXJpLCBjb250ZW50LCBjYW5jZWxsYXRpb25Ub2tlbik7XG4gICAgfVxuICAgIGZyb21UZXh0RG9jdW1lbnQodGV4dERvY3VtZW50LCB1cmksIHRva2VuKSB7XG4gICAgICAgIHVyaSA9IHVyaSAhPT0gbnVsbCAmJiB1cmkgIT09IHZvaWQgMCA/IHVyaSA6IFVSSS5wYXJzZSh0ZXh0RG9jdW1lbnQudXJpKTtcbiAgICAgICAgaWYgKENhbmNlbGxhdGlvblRva2VuLmlzKHRva2VuKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlQXN5bmModXJpLCB0ZXh0RG9jdW1lbnQsIHRva2VuKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNyZWF0ZSh1cmksIHRleHREb2N1bWVudCwgdG9rZW4pO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZyb21TdHJpbmcodGV4dCwgdXJpLCB0b2tlbikge1xuICAgICAgICBpZiAoQ2FuY2VsbGF0aW9uVG9rZW4uaXModG9rZW4pKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jcmVhdGVBc3luYyh1cmksIHRleHQsIHRva2VuKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNyZWF0ZSh1cmksIHRleHQsIHRva2VuKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmcm9tTW9kZWwobW9kZWwsIHVyaSkge1xuICAgICAgICByZXR1cm4gdGhpcy5jcmVhdGUodXJpLCB7ICRtb2RlbDogbW9kZWwgfSk7XG4gICAgfVxuICAgIGNyZWF0ZSh1cmksIGNvbnRlbnQsIG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgY29uc3QgcGFyc2VSZXN1bHQgPSB0aGlzLnBhcnNlKHVyaSwgY29udGVudCwgb3B0aW9ucyk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jcmVhdGVMYW5naXVtRG9jdW1lbnQocGFyc2VSZXN1bHQsIHVyaSwgdW5kZWZpbmVkLCBjb250ZW50KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICgnJG1vZGVsJyBpbiBjb250ZW50KSB7XG4gICAgICAgICAgICBjb25zdCBwYXJzZVJlc3VsdCA9IHsgdmFsdWU6IGNvbnRlbnQuJG1vZGVsLCBwYXJzZXJFcnJvcnM6IFtdLCBsZXhlckVycm9yczogW10gfTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNyZWF0ZUxhbmdpdW1Eb2N1bWVudChwYXJzZVJlc3VsdCwgdXJpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IHBhcnNlUmVzdWx0ID0gdGhpcy5wYXJzZSh1cmksIGNvbnRlbnQuZ2V0VGV4dCgpLCBvcHRpb25zKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNyZWF0ZUxhbmdpdW1Eb2N1bWVudChwYXJzZVJlc3VsdCwgdXJpLCBjb250ZW50KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBhc3luYyBjcmVhdGVBc3luYyh1cmksIGNvbnRlbnQsIGNhbmNlbFRva2VuKSB7XG4gICAgICAgIGlmICh0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIGNvbnN0IHBhcnNlUmVzdWx0ID0gYXdhaXQgdGhpcy5wYXJzZUFzeW5jKHVyaSwgY29udGVudCwgY2FuY2VsVG9rZW4pO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlTGFuZ2l1bURvY3VtZW50KHBhcnNlUmVzdWx0LCB1cmksIHVuZGVmaW5lZCwgY29udGVudCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBwYXJzZVJlc3VsdCA9IGF3YWl0IHRoaXMucGFyc2VBc3luYyh1cmksIGNvbnRlbnQuZ2V0VGV4dCgpLCBjYW5jZWxUb2tlbik7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jcmVhdGVMYW5naXVtRG9jdW1lbnQocGFyc2VSZXN1bHQsIHVyaSwgY29udGVudCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgTGFuZ2l1bURvY3VtZW50IGZyb20gYSBnaXZlbiBwYXJzZSByZXN1bHQuXG4gICAgICpcbiAgICAgKiBBIFRleHREb2N1bWVudCBpcyBjcmVhdGVkIG9uIGRlbWFuZCBpZiBpdCBpcyBub3QgcHJvdmlkZWQgYXMgYXJndW1lbnQgaGVyZS4gVXN1YWxseSB0aGlzXG4gICAgICogc2hvdWxkIG5vdCBiZSBuZWNlc3NhcnkgYmVjYXVzZSB0aGUgbWFpbiBwdXJwb3NlIG9mIHRoZSBUZXh0RG9jdW1lbnQgaXMgdG8gY29udmVydCBiZXR3ZWVuXG4gICAgICogdGV4dCByYW5nZXMgYW5kIG9mZnNldHMsIHdoaWNoIGlzIGRvbmUgc29sZWx5IGluIExTUCByZXF1ZXN0IGhhbmRsaW5nLlxuICAgICAqXG4gICAgICogV2l0aCB0aGUgaW50cm9kdWN0aW9uIG9mIHtAbGluayB1cGRhdGV9IGJlbG93IHRoaXMgbWV0aG9kIGlzIHN1cHBvc2VkIHRvIGJlIG1haW5seSBjYWxsZWRcbiAgICAgKiBkdXJpbmcgd29ya3NwYWNlIGluaXRpYWxpemF0aW9uIGFuZCBvbiBhZGRpdGlvbi9yZWNvZ25pdGlvbiBvZiBuZXcgZmlsZXMsIHdoaWxlIGNoYW5nZXMgaW5cbiAgICAgKiBleGlzdGluZyBkb2N1bWVudHMgYXJlIHByb2Nlc3NlZCB2aWEge0BsaW5rIHVwZGF0ZX0uXG4gICAgICovXG4gICAgY3JlYXRlTGFuZ2l1bURvY3VtZW50KHBhcnNlUmVzdWx0LCB1cmksIHRleHREb2N1bWVudCwgdGV4dCkge1xuICAgICAgICBsZXQgZG9jdW1lbnQ7XG4gICAgICAgIGlmICh0ZXh0RG9jdW1lbnQpIHtcbiAgICAgICAgICAgIGRvY3VtZW50ID0ge1xuICAgICAgICAgICAgICAgIHBhcnNlUmVzdWx0LFxuICAgICAgICAgICAgICAgIHVyaSxcbiAgICAgICAgICAgICAgICBzdGF0ZTogRG9jdW1lbnRTdGF0ZS5QYXJzZWQsXG4gICAgICAgICAgICAgICAgcmVmZXJlbmNlczogW10sXG4gICAgICAgICAgICAgICAgdGV4dERvY3VtZW50XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgdGV4dERvY3VtZW50R2V0dGVyID0gdGhpcy5jcmVhdGVUZXh0RG9jdW1lbnRHZXR0ZXIodXJpLCB0ZXh0KTtcbiAgICAgICAgICAgIGRvY3VtZW50ID0ge1xuICAgICAgICAgICAgICAgIHBhcnNlUmVzdWx0LFxuICAgICAgICAgICAgICAgIHVyaSxcbiAgICAgICAgICAgICAgICBzdGF0ZTogRG9jdW1lbnRTdGF0ZS5QYXJzZWQsXG4gICAgICAgICAgICAgICAgcmVmZXJlbmNlczogW10sXG4gICAgICAgICAgICAgICAgZ2V0IHRleHREb2N1bWVudCgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRleHREb2N1bWVudEdldHRlcigpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgcGFyc2VSZXN1bHQudmFsdWUuJGRvY3VtZW50ID0gZG9jdW1lbnQ7XG4gICAgICAgIHJldHVybiBkb2N1bWVudDtcbiAgICB9XG4gICAgYXN5bmMgdXBkYXRlKGRvY3VtZW50LCBjYW5jZWxsYXRpb25Ub2tlbikge1xuICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICAvLyBUaGUgQ1NUIGZ1bGwgdGV4dCBwcm9wZXJ0eSBjb250YWlucyB0aGUgb3JpZ2luYWwgdGV4dCB0aGF0IHdhcyB1c2VkIHRvIGNyZWF0ZSB0aGUgQVNULlxuICAgICAgICBjb25zdCBvbGRUZXh0ID0gKF9hID0gZG9jdW1lbnQucGFyc2VSZXN1bHQudmFsdWUuJGNzdE5vZGUpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5yb290LmZ1bGxUZXh0O1xuICAgICAgICBjb25zdCB0ZXh0RG9jdW1lbnQgPSAoX2IgPSB0aGlzLnRleHREb2N1bWVudHMpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5nZXQoZG9jdW1lbnQudXJpLnRvU3RyaW5nKCkpO1xuICAgICAgICBjb25zdCB0ZXh0ID0gdGV4dERvY3VtZW50ID8gdGV4dERvY3VtZW50LmdldFRleHQoKSA6IGF3YWl0IHRoaXMuZmlsZVN5c3RlbVByb3ZpZGVyLnJlYWRGaWxlKGRvY3VtZW50LnVyaSk7XG4gICAgICAgIGlmICh0ZXh0RG9jdW1lbnQpIHtcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShkb2N1bWVudCwgJ3RleHREb2N1bWVudCcsIHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogdGV4dERvY3VtZW50XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IHRleHREb2N1bWVudEdldHRlciA9IHRoaXMuY3JlYXRlVGV4dERvY3VtZW50R2V0dGVyKGRvY3VtZW50LnVyaSwgdGV4dCk7XG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZG9jdW1lbnQsICd0ZXh0RG9jdW1lbnQnLCB7XG4gICAgICAgICAgICAgICAgZ2V0OiB0ZXh0RG9jdW1lbnRHZXR0ZXJcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIC8vIFNvbWUgb2YgdGhlc2UgZG9jdW1lbnRzIGNhbiBiZSBwcmV0dHkgbGFyZ2UsIHNvIHBhcnNpbmcgdGhlbSBhZ2FpbiBjYW4gYmUgcXVpdGUgZXhwZW5zaXZlLlxuICAgICAgICAvLyBUaGVyZWZvcmUsIHdlIG9ubHkgcGFyc2UgaWYgdGhlIHRleHQgaGFzIGFjdHVhbGx5IGNoYW5nZWQuXG4gICAgICAgIGlmIChvbGRUZXh0ICE9PSB0ZXh0KSB7XG4gICAgICAgICAgICBkb2N1bWVudC5wYXJzZVJlc3VsdCA9IGF3YWl0IHRoaXMucGFyc2VBc3luYyhkb2N1bWVudC51cmksIHRleHQsIGNhbmNlbGxhdGlvblRva2VuKTtcbiAgICAgICAgICAgIGRvY3VtZW50LnBhcnNlUmVzdWx0LnZhbHVlLiRkb2N1bWVudCA9IGRvY3VtZW50O1xuICAgICAgICB9XG4gICAgICAgIGRvY3VtZW50LnN0YXRlID0gRG9jdW1lbnRTdGF0ZS5QYXJzZWQ7XG4gICAgICAgIHJldHVybiBkb2N1bWVudDtcbiAgICB9XG4gICAgcGFyc2UodXJpLCB0ZXh0LCBvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IHNlcnZpY2VzID0gdGhpcy5zZXJ2aWNlUmVnaXN0cnkuZ2V0U2VydmljZXModXJpKTtcbiAgICAgICAgcmV0dXJuIHNlcnZpY2VzLnBhcnNlci5MYW5naXVtUGFyc2VyLnBhcnNlKHRleHQsIG9wdGlvbnMpO1xuICAgIH1cbiAgICBwYXJzZUFzeW5jKHVyaSwgdGV4dCwgY2FuY2VsbGF0aW9uVG9rZW4pIHtcbiAgICAgICAgY29uc3Qgc2VydmljZXMgPSB0aGlzLnNlcnZpY2VSZWdpc3RyeS5nZXRTZXJ2aWNlcyh1cmkpO1xuICAgICAgICByZXR1cm4gc2VydmljZXMucGFyc2VyLkFzeW5jUGFyc2VyLnBhcnNlKHRleHQsIGNhbmNlbGxhdGlvblRva2VuKTtcbiAgICB9XG4gICAgY3JlYXRlVGV4dERvY3VtZW50R2V0dGVyKHVyaSwgdGV4dCkge1xuICAgICAgICBjb25zdCBzZXJ2aWNlUmVnaXN0cnkgPSB0aGlzLnNlcnZpY2VSZWdpc3RyeTtcbiAgICAgICAgbGV0IHRleHREb2MgPSB1bmRlZmluZWQ7XG4gICAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gdGV4dERvYyAhPT0gbnVsbCAmJiB0ZXh0RG9jICE9PSB2b2lkIDAgPyB0ZXh0RG9jIDogKHRleHREb2MgPSBUZXh0RG9jdW1lbnQuY3JlYXRlKHVyaS50b1N0cmluZygpLCBzZXJ2aWNlUmVnaXN0cnkuZ2V0U2VydmljZXModXJpKS5MYW5ndWFnZU1ldGFEYXRhLmxhbmd1YWdlSWQsIDAsIHRleHQgIT09IG51bGwgJiYgdGV4dCAhPT0gdm9pZCAwID8gdGV4dCA6ICcnKSk7XG4gICAgICAgIH07XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIERlZmF1bHRMYW5naXVtRG9jdW1lbnRzIHtcbiAgICBjb25zdHJ1Y3RvcihzZXJ2aWNlcykge1xuICAgICAgICB0aGlzLmRvY3VtZW50TWFwID0gbmV3IE1hcCgpO1xuICAgICAgICB0aGlzLmxhbmdpdW1Eb2N1bWVudEZhY3RvcnkgPSBzZXJ2aWNlcy53b3Jrc3BhY2UuTGFuZ2l1bURvY3VtZW50RmFjdG9yeTtcbiAgICAgICAgdGhpcy5zZXJ2aWNlUmVnaXN0cnkgPSBzZXJ2aWNlcy5TZXJ2aWNlUmVnaXN0cnk7XG4gICAgfVxuICAgIGdldCBhbGwoKSB7XG4gICAgICAgIHJldHVybiBzdHJlYW0odGhpcy5kb2N1bWVudE1hcC52YWx1ZXMoKSk7XG4gICAgfVxuICAgIGFkZERvY3VtZW50KGRvY3VtZW50KSB7XG4gICAgICAgIGNvbnN0IHVyaVN0cmluZyA9IGRvY3VtZW50LnVyaS50b1N0cmluZygpO1xuICAgICAgICBpZiAodGhpcy5kb2N1bWVudE1hcC5oYXModXJpU3RyaW5nKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBBIGRvY3VtZW50IHdpdGggdGhlIFVSSSAnJHt1cmlTdHJpbmd9JyBpcyBhbHJlYWR5IHByZXNlbnQuYCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5kb2N1bWVudE1hcC5zZXQodXJpU3RyaW5nLCBkb2N1bWVudCk7XG4gICAgfVxuICAgIGdldERvY3VtZW50KHVyaSkge1xuICAgICAgICBjb25zdCB1cmlTdHJpbmcgPSB1cmkudG9TdHJpbmcoKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuZG9jdW1lbnRNYXAuZ2V0KHVyaVN0cmluZyk7XG4gICAgfVxuICAgIGFzeW5jIGdldE9yQ3JlYXRlRG9jdW1lbnQodXJpLCBjYW5jZWxsYXRpb25Ub2tlbikge1xuICAgICAgICBsZXQgZG9jdW1lbnQgPSB0aGlzLmdldERvY3VtZW50KHVyaSk7XG4gICAgICAgIGlmIChkb2N1bWVudCkge1xuICAgICAgICAgICAgcmV0dXJuIGRvY3VtZW50O1xuICAgICAgICB9XG4gICAgICAgIGRvY3VtZW50ID0gYXdhaXQgdGhpcy5sYW5naXVtRG9jdW1lbnRGYWN0b3J5LmZyb21VcmkodXJpLCBjYW5jZWxsYXRpb25Ub2tlbik7XG4gICAgICAgIHRoaXMuYWRkRG9jdW1lbnQoZG9jdW1lbnQpO1xuICAgICAgICByZXR1cm4gZG9jdW1lbnQ7XG4gICAgfVxuICAgIGNyZWF0ZURvY3VtZW50KHVyaSwgdGV4dCwgY2FuY2VsbGF0aW9uVG9rZW4pIHtcbiAgICAgICAgaWYgKGNhbmNlbGxhdGlvblRva2VuKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5sYW5naXVtRG9jdW1lbnRGYWN0b3J5LmZyb21TdHJpbmcodGV4dCwgdXJpLCBjYW5jZWxsYXRpb25Ub2tlbikudGhlbihkb2N1bWVudCA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5hZGREb2N1bWVudChkb2N1bWVudCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGRvY3VtZW50O1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBkb2N1bWVudCA9IHRoaXMubGFuZ2l1bURvY3VtZW50RmFjdG9yeS5mcm9tU3RyaW5nKHRleHQsIHVyaSk7XG4gICAgICAgICAgICB0aGlzLmFkZERvY3VtZW50KGRvY3VtZW50KTtcbiAgICAgICAgICAgIHJldHVybiBkb2N1bWVudDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBoYXNEb2N1bWVudCh1cmkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZG9jdW1lbnRNYXAuaGFzKHVyaS50b1N0cmluZygpKTtcbiAgICB9XG4gICAgaW52YWxpZGF0ZURvY3VtZW50KHVyaSkge1xuICAgICAgICBjb25zdCB1cmlTdHJpbmcgPSB1cmkudG9TdHJpbmcoKTtcbiAgICAgICAgY29uc3QgbGFuZ2l1bURvYyA9IHRoaXMuZG9jdW1lbnRNYXAuZ2V0KHVyaVN0cmluZyk7XG4gICAgICAgIGlmIChsYW5naXVtRG9jKSB7XG4gICAgICAgICAgICBjb25zdCBsaW5rZXIgPSB0aGlzLnNlcnZpY2VSZWdpc3RyeS5nZXRTZXJ2aWNlcyh1cmkpLnJlZmVyZW5jZXMuTGlua2VyO1xuICAgICAgICAgICAgbGlua2VyLnVubGluayhsYW5naXVtRG9jKTtcbiAgICAgICAgICAgIGxhbmdpdW1Eb2Muc3RhdGUgPSBEb2N1bWVudFN0YXRlLkNoYW5nZWQ7XG4gICAgICAgICAgICBsYW5naXVtRG9jLnByZWNvbXB1dGVkU2NvcGVzID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgbGFuZ2l1bURvYy5kaWFnbm9zdGljcyA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbGFuZ2l1bURvYztcbiAgICB9XG4gICAgZGVsZXRlRG9jdW1lbnQodXJpKSB7XG4gICAgICAgIGNvbnN0IHVyaVN0cmluZyA9IHVyaS50b1N0cmluZygpO1xuICAgICAgICBjb25zdCBsYW5naXVtRG9jID0gdGhpcy5kb2N1bWVudE1hcC5nZXQodXJpU3RyaW5nKTtcbiAgICAgICAgaWYgKGxhbmdpdW1Eb2MpIHtcbiAgICAgICAgICAgIGxhbmdpdW1Eb2Muc3RhdGUgPSBEb2N1bWVudFN0YXRlLkNoYW5nZWQ7XG4gICAgICAgICAgICB0aGlzLmRvY3VtZW50TWFwLmRlbGV0ZSh1cmlTdHJpbmcpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBsYW5naXVtRG9jO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRvY3VtZW50cy5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/workspace/documents.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/workspace/file-system-provider.js":
/*!******************************************************************************************************!*\
  !*** ../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/workspace/file-system-provider.js ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EmptyFileSystem: () => (/* binding */ EmptyFileSystem),\n/* harmony export */   EmptyFileSystemProvider: () => (/* binding */ EmptyFileSystemProvider)\n/* harmony export */ });\n/******************************************************************************\n * Copyright 2022 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\nclass EmptyFileSystemProvider {\n    readFile() {\n        throw new Error('No file system is available.');\n    }\n    async readDirectory() {\n        return [];\n    }\n}\nconst EmptyFileSystem = {\n    fileSystemProvider: () => new EmptyFileSystemProvider()\n};\n//# sourceMappingURL=file-system-provider.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2xhbmdpdW1AMy4zLjEvbm9kZV9tb2R1bGVzL2xhbmdpdW0vbGliL3dvcmtzcGFjZS9maWxlLXN5c3RlbS1wcm92aWRlci5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9Vc2Vycy9ldGhhbmtpbS9OZXN0b3IvbWVkZmV0Y2guanMvbm9kZV9tb2R1bGVzLy5wbnBtL2xhbmdpdW1AMy4zLjEvbm9kZV9tb2R1bGVzL2xhbmdpdW0vbGliL3dvcmtzcGFjZS9maWxlLXN5c3RlbS1wcm92aWRlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gKiBDb3B5cmlnaHQgMjAyMiBUeXBlRm94IEdtYkhcbiAqIFRoaXMgcHJvZ3JhbSBhbmQgdGhlIGFjY29tcGFueWluZyBtYXRlcmlhbHMgYXJlIG1hZGUgYXZhaWxhYmxlIHVuZGVyIHRoZVxuICogdGVybXMgb2YgdGhlIE1JVCBMaWNlbnNlLCB3aGljaCBpcyBhdmFpbGFibGUgaW4gdGhlIHByb2plY3Qgcm9vdC5cbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5leHBvcnQgY2xhc3MgRW1wdHlGaWxlU3lzdGVtUHJvdmlkZXIge1xuICAgIHJlYWRGaWxlKCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIGZpbGUgc3lzdGVtIGlzIGF2YWlsYWJsZS4nKTtcbiAgICB9XG4gICAgYXN5bmMgcmVhZERpcmVjdG9yeSgpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbn1cbmV4cG9ydCBjb25zdCBFbXB0eUZpbGVTeXN0ZW0gPSB7XG4gICAgZmlsZVN5c3RlbVByb3ZpZGVyOiAoKSA9PiBuZXcgRW1wdHlGaWxlU3lzdGVtUHJvdmlkZXIoKVxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZpbGUtc3lzdGVtLXByb3ZpZGVyLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/workspace/file-system-provider.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/workspace/index-manager.js":
/*!***********************************************************************************************!*\
  !*** ../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/workspace/index-manager.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DefaultIndexManager: () => (/* binding */ DefaultIndexManager)\n/* harmony export */ });\n/* harmony import */ var _utils_ast_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/ast-utils.js */ \"(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/ast-utils.js\");\n/* harmony import */ var _utils_caching_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/caching.js */ \"(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/caching.js\");\n/* harmony import */ var _utils_cancellation_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/cancellation.js */ \"(ssr)/../node_modules/.pnpm/vscode-jsonrpc@8.2.0/node_modules/vscode-jsonrpc/lib/common/cancellation.js\");\n/* harmony import */ var _utils_stream_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/stream.js */ \"(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/stream.js\");\n/* harmony import */ var _utils_uri_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/uri-utils.js */ \"(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/uri-utils.js\");\n/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\n\n\n\n\nclass DefaultIndexManager {\n    constructor(services) {\n        /**\n         * The symbol index stores all `AstNodeDescription` items exported by a document.\n         * The key used in this map is the string representation of the specific document URI.\n         */\n        this.symbolIndex = new Map();\n        /**\n         * This is a cache for the `allElements()` method.\n         * It caches the descriptions from `symbolIndex` grouped by types.\n         */\n        this.symbolByTypeIndex = new _utils_caching_js__WEBPACK_IMPORTED_MODULE_0__.ContextCache();\n        /**\n         * This index keeps track of all `ReferenceDescription` items exported by a document.\n         * This is used to compute which elements are affected by a document change\n         * and for finding references to an AST node.\n         */\n        this.referenceIndex = new Map();\n        this.documents = services.workspace.LangiumDocuments;\n        this.serviceRegistry = services.ServiceRegistry;\n        this.astReflection = services.AstReflection;\n    }\n    findAllReferences(targetNode, astNodePath) {\n        const targetDocUri = (0,_utils_ast_utils_js__WEBPACK_IMPORTED_MODULE_1__.getDocument)(targetNode).uri;\n        const result = [];\n        this.referenceIndex.forEach(docRefs => {\n            docRefs.forEach(refDescr => {\n                if (_utils_uri_utils_js__WEBPACK_IMPORTED_MODULE_2__.UriUtils.equals(refDescr.targetUri, targetDocUri) && refDescr.targetPath === astNodePath) {\n                    result.push(refDescr);\n                }\n            });\n        });\n        return (0,_utils_stream_js__WEBPACK_IMPORTED_MODULE_3__.stream)(result);\n    }\n    allElements(nodeType, uris) {\n        let documentUris = (0,_utils_stream_js__WEBPACK_IMPORTED_MODULE_3__.stream)(this.symbolIndex.keys());\n        if (uris) {\n            documentUris = documentUris.filter(uri => !uris || uris.has(uri));\n        }\n        return documentUris\n            .map(uri => this.getFileDescriptions(uri, nodeType))\n            .flat();\n    }\n    getFileDescriptions(uri, nodeType) {\n        var _a;\n        if (!nodeType) {\n            return (_a = this.symbolIndex.get(uri)) !== null && _a !== void 0 ? _a : [];\n        }\n        const descriptions = this.symbolByTypeIndex.get(uri, nodeType, () => {\n            var _a;\n            const allFileDescriptions = (_a = this.symbolIndex.get(uri)) !== null && _a !== void 0 ? _a : [];\n            return allFileDescriptions.filter(e => this.astReflection.isSubtype(e.type, nodeType));\n        });\n        return descriptions;\n    }\n    remove(uri) {\n        const uriString = uri.toString();\n        this.symbolIndex.delete(uriString);\n        this.symbolByTypeIndex.clear(uriString);\n        this.referenceIndex.delete(uriString);\n    }\n    async updateContent(document, cancelToken = _utils_cancellation_js__WEBPACK_IMPORTED_MODULE_4__.CancellationToken.None) {\n        const services = this.serviceRegistry.getServices(document.uri);\n        const exports = await services.references.ScopeComputation.computeExports(document, cancelToken);\n        const uri = document.uri.toString();\n        this.symbolIndex.set(uri, exports);\n        this.symbolByTypeIndex.clear(uri);\n    }\n    async updateReferences(document, cancelToken = _utils_cancellation_js__WEBPACK_IMPORTED_MODULE_4__.CancellationToken.None) {\n        const services = this.serviceRegistry.getServices(document.uri);\n        const indexData = await services.workspace.ReferenceDescriptionProvider.createDescriptions(document, cancelToken);\n        this.referenceIndex.set(document.uri.toString(), indexData);\n    }\n    isAffected(document, changedUris) {\n        const references = this.referenceIndex.get(document.uri.toString());\n        if (!references) {\n            return false;\n        }\n        return references.some(ref => !ref.local && changedUris.has(ref.targetUri.toString()));\n    }\n}\n//# sourceMappingURL=index-manager.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2xhbmdpdW1AMy4zLjEvbm9kZV9tb2R1bGVzL2xhbmdpdW0vbGliL3dvcmtzcGFjZS9pbmRleC1tYW5hZ2VyLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDb0Q7QUFDRDtBQUNVO0FBQ2pCO0FBQ0s7QUFDMUM7QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFDQUFxQywyREFBWTtBQUNqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLGdFQUFXO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQix5REFBUTtBQUM1QjtBQUNBO0FBQ0EsYUFBYTtBQUNiLFNBQVM7QUFDVCxlQUFlLHdEQUFNO0FBQ3JCO0FBQ0E7QUFDQSwyQkFBMkIsd0RBQU07QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdEQUFnRCxxRUFBaUI7QUFDakU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbURBQW1ELHFFQUFpQjtBQUNwRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL2V0aGFua2ltL05lc3Rvci9tZWRmZXRjaC5qcy9ub2RlX21vZHVsZXMvLnBucG0vbGFuZ2l1bUAzLjMuMS9ub2RlX21vZHVsZXMvbGFuZ2l1bS9saWIvd29ya3NwYWNlL2luZGV4LW1hbmFnZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuICogQ29weXJpZ2h0IDIwMjEgVHlwZUZveCBHbWJIXG4gKiBUaGlzIHByb2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzIGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0aGVcbiAqIHRlcm1zIG9mIHRoZSBNSVQgTGljZW5zZSwgd2hpY2ggaXMgYXZhaWxhYmxlIGluIHRoZSBwcm9qZWN0IHJvb3QuXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuaW1wb3J0IHsgZ2V0RG9jdW1lbnQgfSBmcm9tICcuLi91dGlscy9hc3QtdXRpbHMuanMnO1xuaW1wb3J0IHsgQ29udGV4dENhY2hlIH0gZnJvbSAnLi4vdXRpbHMvY2FjaGluZy5qcyc7XG5pbXBvcnQgeyBDYW5jZWxsYXRpb25Ub2tlbiB9IGZyb20gJy4uL3V0aWxzL2NhbmNlbGxhdGlvbi5qcyc7XG5pbXBvcnQgeyBzdHJlYW0gfSBmcm9tICcuLi91dGlscy9zdHJlYW0uanMnO1xuaW1wb3J0IHsgVXJpVXRpbHMgfSBmcm9tICcuLi91dGlscy91cmktdXRpbHMuanMnO1xuZXhwb3J0IGNsYXNzIERlZmF1bHRJbmRleE1hbmFnZXIge1xuICAgIGNvbnN0cnVjdG9yKHNlcnZpY2VzKSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgc3ltYm9sIGluZGV4IHN0b3JlcyBhbGwgYEFzdE5vZGVEZXNjcmlwdGlvbmAgaXRlbXMgZXhwb3J0ZWQgYnkgYSBkb2N1bWVudC5cbiAgICAgICAgICogVGhlIGtleSB1c2VkIGluIHRoaXMgbWFwIGlzIHRoZSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhlIHNwZWNpZmljIGRvY3VtZW50IFVSSS5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuc3ltYm9sSW5kZXggPSBuZXcgTWFwKCk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGlzIGlzIGEgY2FjaGUgZm9yIHRoZSBgYWxsRWxlbWVudHMoKWAgbWV0aG9kLlxuICAgICAgICAgKiBJdCBjYWNoZXMgdGhlIGRlc2NyaXB0aW9ucyBmcm9tIGBzeW1ib2xJbmRleGAgZ3JvdXBlZCBieSB0eXBlcy5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuc3ltYm9sQnlUeXBlSW5kZXggPSBuZXcgQ29udGV4dENhY2hlKCk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGlzIGluZGV4IGtlZXBzIHRyYWNrIG9mIGFsbCBgUmVmZXJlbmNlRGVzY3JpcHRpb25gIGl0ZW1zIGV4cG9ydGVkIGJ5IGEgZG9jdW1lbnQuXG4gICAgICAgICAqIFRoaXMgaXMgdXNlZCB0byBjb21wdXRlIHdoaWNoIGVsZW1lbnRzIGFyZSBhZmZlY3RlZCBieSBhIGRvY3VtZW50IGNoYW5nZVxuICAgICAgICAgKiBhbmQgZm9yIGZpbmRpbmcgcmVmZXJlbmNlcyB0byBhbiBBU1Qgbm9kZS5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMucmVmZXJlbmNlSW5kZXggPSBuZXcgTWFwKCk7XG4gICAgICAgIHRoaXMuZG9jdW1lbnRzID0gc2VydmljZXMud29ya3NwYWNlLkxhbmdpdW1Eb2N1bWVudHM7XG4gICAgICAgIHRoaXMuc2VydmljZVJlZ2lzdHJ5ID0gc2VydmljZXMuU2VydmljZVJlZ2lzdHJ5O1xuICAgICAgICB0aGlzLmFzdFJlZmxlY3Rpb24gPSBzZXJ2aWNlcy5Bc3RSZWZsZWN0aW9uO1xuICAgIH1cbiAgICBmaW5kQWxsUmVmZXJlbmNlcyh0YXJnZXROb2RlLCBhc3ROb2RlUGF0aCkge1xuICAgICAgICBjb25zdCB0YXJnZXREb2NVcmkgPSBnZXREb2N1bWVudCh0YXJnZXROb2RlKS51cmk7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IFtdO1xuICAgICAgICB0aGlzLnJlZmVyZW5jZUluZGV4LmZvckVhY2goZG9jUmVmcyA9PiB7XG4gICAgICAgICAgICBkb2NSZWZzLmZvckVhY2gocmVmRGVzY3IgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChVcmlVdGlscy5lcXVhbHMocmVmRGVzY3IudGFyZ2V0VXJpLCB0YXJnZXREb2NVcmkpICYmIHJlZkRlc2NyLnRhcmdldFBhdGggPT09IGFzdE5vZGVQYXRoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKHJlZkRlc2NyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBzdHJlYW0ocmVzdWx0KTtcbiAgICB9XG4gICAgYWxsRWxlbWVudHMobm9kZVR5cGUsIHVyaXMpIHtcbiAgICAgICAgbGV0IGRvY3VtZW50VXJpcyA9IHN0cmVhbSh0aGlzLnN5bWJvbEluZGV4LmtleXMoKSk7XG4gICAgICAgIGlmICh1cmlzKSB7XG4gICAgICAgICAgICBkb2N1bWVudFVyaXMgPSBkb2N1bWVudFVyaXMuZmlsdGVyKHVyaSA9PiAhdXJpcyB8fCB1cmlzLmhhcyh1cmkpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZG9jdW1lbnRVcmlzXG4gICAgICAgICAgICAubWFwKHVyaSA9PiB0aGlzLmdldEZpbGVEZXNjcmlwdGlvbnModXJpLCBub2RlVHlwZSkpXG4gICAgICAgICAgICAuZmxhdCgpO1xuICAgIH1cbiAgICBnZXRGaWxlRGVzY3JpcHRpb25zKHVyaSwgbm9kZVR5cGUpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBpZiAoIW5vZGVUeXBlKSB7XG4gICAgICAgICAgICByZXR1cm4gKF9hID0gdGhpcy5zeW1ib2xJbmRleC5nZXQodXJpKSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogW107XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZGVzY3JpcHRpb25zID0gdGhpcy5zeW1ib2xCeVR5cGVJbmRleC5nZXQodXJpLCBub2RlVHlwZSwgKCkgPT4ge1xuICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgY29uc3QgYWxsRmlsZURlc2NyaXB0aW9ucyA9IChfYSA9IHRoaXMuc3ltYm9sSW5kZXguZ2V0KHVyaSkpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IFtdO1xuICAgICAgICAgICAgcmV0dXJuIGFsbEZpbGVEZXNjcmlwdGlvbnMuZmlsdGVyKGUgPT4gdGhpcy5hc3RSZWZsZWN0aW9uLmlzU3VidHlwZShlLnR5cGUsIG5vZGVUeXBlKSk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gZGVzY3JpcHRpb25zO1xuICAgIH1cbiAgICByZW1vdmUodXJpKSB7XG4gICAgICAgIGNvbnN0IHVyaVN0cmluZyA9IHVyaS50b1N0cmluZygpO1xuICAgICAgICB0aGlzLnN5bWJvbEluZGV4LmRlbGV0ZSh1cmlTdHJpbmcpO1xuICAgICAgICB0aGlzLnN5bWJvbEJ5VHlwZUluZGV4LmNsZWFyKHVyaVN0cmluZyk7XG4gICAgICAgIHRoaXMucmVmZXJlbmNlSW5kZXguZGVsZXRlKHVyaVN0cmluZyk7XG4gICAgfVxuICAgIGFzeW5jIHVwZGF0ZUNvbnRlbnQoZG9jdW1lbnQsIGNhbmNlbFRva2VuID0gQ2FuY2VsbGF0aW9uVG9rZW4uTm9uZSkge1xuICAgICAgICBjb25zdCBzZXJ2aWNlcyA9IHRoaXMuc2VydmljZVJlZ2lzdHJ5LmdldFNlcnZpY2VzKGRvY3VtZW50LnVyaSk7XG4gICAgICAgIGNvbnN0IGV4cG9ydHMgPSBhd2FpdCBzZXJ2aWNlcy5yZWZlcmVuY2VzLlNjb3BlQ29tcHV0YXRpb24uY29tcHV0ZUV4cG9ydHMoZG9jdW1lbnQsIGNhbmNlbFRva2VuKTtcbiAgICAgICAgY29uc3QgdXJpID0gZG9jdW1lbnQudXJpLnRvU3RyaW5nKCk7XG4gICAgICAgIHRoaXMuc3ltYm9sSW5kZXguc2V0KHVyaSwgZXhwb3J0cyk7XG4gICAgICAgIHRoaXMuc3ltYm9sQnlUeXBlSW5kZXguY2xlYXIodXJpKTtcbiAgICB9XG4gICAgYXN5bmMgdXBkYXRlUmVmZXJlbmNlcyhkb2N1bWVudCwgY2FuY2VsVG9rZW4gPSBDYW5jZWxsYXRpb25Ub2tlbi5Ob25lKSB7XG4gICAgICAgIGNvbnN0IHNlcnZpY2VzID0gdGhpcy5zZXJ2aWNlUmVnaXN0cnkuZ2V0U2VydmljZXMoZG9jdW1lbnQudXJpKTtcbiAgICAgICAgY29uc3QgaW5kZXhEYXRhID0gYXdhaXQgc2VydmljZXMud29ya3NwYWNlLlJlZmVyZW5jZURlc2NyaXB0aW9uUHJvdmlkZXIuY3JlYXRlRGVzY3JpcHRpb25zKGRvY3VtZW50LCBjYW5jZWxUb2tlbik7XG4gICAgICAgIHRoaXMucmVmZXJlbmNlSW5kZXguc2V0KGRvY3VtZW50LnVyaS50b1N0cmluZygpLCBpbmRleERhdGEpO1xuICAgIH1cbiAgICBpc0FmZmVjdGVkKGRvY3VtZW50LCBjaGFuZ2VkVXJpcykge1xuICAgICAgICBjb25zdCByZWZlcmVuY2VzID0gdGhpcy5yZWZlcmVuY2VJbmRleC5nZXQoZG9jdW1lbnQudXJpLnRvU3RyaW5nKCkpO1xuICAgICAgICBpZiAoIXJlZmVyZW5jZXMpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVmZXJlbmNlcy5zb21lKHJlZiA9PiAhcmVmLmxvY2FsICYmIGNoYW5nZWRVcmlzLmhhcyhyZWYudGFyZ2V0VXJpLnRvU3RyaW5nKCkpKTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC1tYW5hZ2VyLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/workspace/index-manager.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/workspace/workspace-lock.js":
/*!************************************************************************************************!*\
  !*** ../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/workspace/workspace-lock.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DefaultWorkspaceLock: () => (/* binding */ DefaultWorkspaceLock)\n/* harmony export */ });\n/* harmony import */ var _utils_cancellation_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/cancellation.js */ \"(ssr)/../node_modules/.pnpm/vscode-jsonrpc@8.2.0/node_modules/vscode-jsonrpc/lib/common/cancellation.js\");\n/* harmony import */ var _utils_promise_utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/promise-utils.js */ \"(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/promise-utils.js\");\n/******************************************************************************\n * Copyright 2023 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\n\nclass DefaultWorkspaceLock {\n    constructor() {\n        this.previousTokenSource = new _utils_cancellation_js__WEBPACK_IMPORTED_MODULE_0__.CancellationTokenSource();\n        this.writeQueue = [];\n        this.readQueue = [];\n        this.done = true;\n    }\n    write(action) {\n        this.cancelWrite();\n        const tokenSource = (0,_utils_promise_utils_js__WEBPACK_IMPORTED_MODULE_1__.startCancelableOperation)();\n        this.previousTokenSource = tokenSource;\n        return this.enqueue(this.writeQueue, action, tokenSource.token);\n    }\n    read(action) {\n        return this.enqueue(this.readQueue, action);\n    }\n    enqueue(queue, action, cancellationToken = _utils_cancellation_js__WEBPACK_IMPORTED_MODULE_0__.CancellationToken.None) {\n        const deferred = new _utils_promise_utils_js__WEBPACK_IMPORTED_MODULE_1__.Deferred();\n        const entry = {\n            action,\n            deferred,\n            cancellationToken\n        };\n        queue.push(entry);\n        this.performNextOperation();\n        return deferred.promise;\n    }\n    async performNextOperation() {\n        if (!this.done) {\n            return;\n        }\n        const entries = [];\n        if (this.writeQueue.length > 0) {\n            // Just perform the next write action\n            entries.push(this.writeQueue.shift());\n        }\n        else if (this.readQueue.length > 0) {\n            // Empty the read queue and perform all actions in parallel\n            entries.push(...this.readQueue.splice(0, this.readQueue.length));\n        }\n        else {\n            return;\n        }\n        this.done = false;\n        await Promise.all(entries.map(async ({ action, deferred, cancellationToken }) => {\n            try {\n                // Move the execution of the action to the next event loop tick via `Promise.resolve()`\n                const result = await Promise.resolve().then(() => action(cancellationToken));\n                deferred.resolve(result);\n            }\n            catch (err) {\n                if ((0,_utils_promise_utils_js__WEBPACK_IMPORTED_MODULE_1__.isOperationCancelled)(err)) {\n                    // If the operation was cancelled, we don't want to reject the promise\n                    deferred.resolve(undefined);\n                }\n                else {\n                    deferred.reject(err);\n                }\n            }\n        }));\n        this.done = true;\n        this.performNextOperation();\n    }\n    cancelWrite() {\n        this.previousTokenSource.cancel();\n    }\n}\n//# sourceMappingURL=workspace-lock.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2xhbmdpdW1AMy4zLjEvbm9kZV9tb2R1bGVzL2xhbmdpdW0vbGliL3dvcmtzcGFjZS93b3Jrc3BhY2UtbG9jay5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ3NGO0FBQ2U7QUFDOUY7QUFDUDtBQUNBLHVDQUF1QywyRUFBdUI7QUFDOUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLGlGQUF3QjtBQUNwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQ0FBK0MscUVBQWlCO0FBQ2hFLDZCQUE2Qiw2REFBUTtBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0NBQStDLHFDQUFxQztBQUNwRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsNkVBQW9CO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9Vc2Vycy9ldGhhbmtpbS9OZXN0b3IvbWVkZmV0Y2guanMvbm9kZV9tb2R1bGVzLy5wbnBtL2xhbmdpdW1AMy4zLjEvbm9kZV9tb2R1bGVzL2xhbmdpdW0vbGliL3dvcmtzcGFjZS93b3Jrc3BhY2UtbG9jay5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gKiBDb3B5cmlnaHQgMjAyMyBUeXBlRm94IEdtYkhcbiAqIFRoaXMgcHJvZ3JhbSBhbmQgdGhlIGFjY29tcGFueWluZyBtYXRlcmlhbHMgYXJlIG1hZGUgYXZhaWxhYmxlIHVuZGVyIHRoZVxuICogdGVybXMgb2YgdGhlIE1JVCBMaWNlbnNlLCB3aGljaCBpcyBhdmFpbGFibGUgaW4gdGhlIHByb2plY3Qgcm9vdC5cbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5pbXBvcnQgeyBDYW5jZWxsYXRpb25Ub2tlbiwgQ2FuY2VsbGF0aW9uVG9rZW5Tb3VyY2UgfSBmcm9tICcuLi91dGlscy9jYW5jZWxsYXRpb24uanMnO1xuaW1wb3J0IHsgRGVmZXJyZWQsIGlzT3BlcmF0aW9uQ2FuY2VsbGVkLCBzdGFydENhbmNlbGFibGVPcGVyYXRpb24gfSBmcm9tICcuLi91dGlscy9wcm9taXNlLXV0aWxzLmpzJztcbmV4cG9ydCBjbGFzcyBEZWZhdWx0V29ya3NwYWNlTG9jayB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMucHJldmlvdXNUb2tlblNvdXJjZSA9IG5ldyBDYW5jZWxsYXRpb25Ub2tlblNvdXJjZSgpO1xuICAgICAgICB0aGlzLndyaXRlUXVldWUgPSBbXTtcbiAgICAgICAgdGhpcy5yZWFkUXVldWUgPSBbXTtcbiAgICAgICAgdGhpcy5kb25lID0gdHJ1ZTtcbiAgICB9XG4gICAgd3JpdGUoYWN0aW9uKSB7XG4gICAgICAgIHRoaXMuY2FuY2VsV3JpdGUoKTtcbiAgICAgICAgY29uc3QgdG9rZW5Tb3VyY2UgPSBzdGFydENhbmNlbGFibGVPcGVyYXRpb24oKTtcbiAgICAgICAgdGhpcy5wcmV2aW91c1Rva2VuU291cmNlID0gdG9rZW5Tb3VyY2U7XG4gICAgICAgIHJldHVybiB0aGlzLmVucXVldWUodGhpcy53cml0ZVF1ZXVlLCBhY3Rpb24sIHRva2VuU291cmNlLnRva2VuKTtcbiAgICB9XG4gICAgcmVhZChhY3Rpb24pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZW5xdWV1ZSh0aGlzLnJlYWRRdWV1ZSwgYWN0aW9uKTtcbiAgICB9XG4gICAgZW5xdWV1ZShxdWV1ZSwgYWN0aW9uLCBjYW5jZWxsYXRpb25Ub2tlbiA9IENhbmNlbGxhdGlvblRva2VuLk5vbmUpIHtcbiAgICAgICAgY29uc3QgZGVmZXJyZWQgPSBuZXcgRGVmZXJyZWQoKTtcbiAgICAgICAgY29uc3QgZW50cnkgPSB7XG4gICAgICAgICAgICBhY3Rpb24sXG4gICAgICAgICAgICBkZWZlcnJlZCxcbiAgICAgICAgICAgIGNhbmNlbGxhdGlvblRva2VuXG4gICAgICAgIH07XG4gICAgICAgIHF1ZXVlLnB1c2goZW50cnkpO1xuICAgICAgICB0aGlzLnBlcmZvcm1OZXh0T3BlcmF0aW9uKCk7XG4gICAgICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xuICAgIH1cbiAgICBhc3luYyBwZXJmb3JtTmV4dE9wZXJhdGlvbigpIHtcbiAgICAgICAgaWYgKCF0aGlzLmRvbmUpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBlbnRyaWVzID0gW107XG4gICAgICAgIGlmICh0aGlzLndyaXRlUXVldWUubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgLy8gSnVzdCBwZXJmb3JtIHRoZSBuZXh0IHdyaXRlIGFjdGlvblxuICAgICAgICAgICAgZW50cmllcy5wdXNoKHRoaXMud3JpdGVRdWV1ZS5zaGlmdCgpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aGlzLnJlYWRRdWV1ZS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAvLyBFbXB0eSB0aGUgcmVhZCBxdWV1ZSBhbmQgcGVyZm9ybSBhbGwgYWN0aW9ucyBpbiBwYXJhbGxlbFxuICAgICAgICAgICAgZW50cmllcy5wdXNoKC4uLnRoaXMucmVhZFF1ZXVlLnNwbGljZSgwLCB0aGlzLnJlYWRRdWV1ZS5sZW5ndGgpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmRvbmUgPSBmYWxzZTtcbiAgICAgICAgYXdhaXQgUHJvbWlzZS5hbGwoZW50cmllcy5tYXAoYXN5bmMgKHsgYWN0aW9uLCBkZWZlcnJlZCwgY2FuY2VsbGF0aW9uVG9rZW4gfSkgPT4ge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAvLyBNb3ZlIHRoZSBleGVjdXRpb24gb2YgdGhlIGFjdGlvbiB0byB0aGUgbmV4dCBldmVudCBsb29wIHRpY2sgdmlhIGBQcm9taXNlLnJlc29sdmUoKWBcbiAgICAgICAgICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBQcm9taXNlLnJlc29sdmUoKS50aGVuKCgpID0+IGFjdGlvbihjYW5jZWxsYXRpb25Ub2tlbikpO1xuICAgICAgICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUocmVzdWx0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICBpZiAoaXNPcGVyYXRpb25DYW5jZWxsZWQoZXJyKSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBJZiB0aGUgb3BlcmF0aW9uIHdhcyBjYW5jZWxsZWQsIHdlIGRvbid0IHdhbnQgdG8gcmVqZWN0IHRoZSBwcm9taXNlXG4gICAgICAgICAgICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUodW5kZWZpbmVkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGRlZmVycmVkLnJlamVjdChlcnIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSkpO1xuICAgICAgICB0aGlzLmRvbmUgPSB0cnVlO1xuICAgICAgICB0aGlzLnBlcmZvcm1OZXh0T3BlcmF0aW9uKCk7XG4gICAgfVxuICAgIGNhbmNlbFdyaXRlKCkge1xuICAgICAgICB0aGlzLnByZXZpb3VzVG9rZW5Tb3VyY2UuY2FuY2VsKCk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9d29ya3NwYWNlLWxvY2suanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/workspace/workspace-lock.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/workspace/workspace-manager.js":
/*!***************************************************************************************************!*\
  !*** ../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/workspace/workspace-manager.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DefaultWorkspaceManager: () => (/* binding */ DefaultWorkspaceManager)\n/* harmony export */ });\n/* harmony import */ var _utils_cancellation_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/cancellation.js */ \"(ssr)/../node_modules/.pnpm/vscode-jsonrpc@8.2.0/node_modules/vscode-jsonrpc/lib/common/cancellation.js\");\n/* harmony import */ var _utils_promise_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/promise-utils.js */ \"(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/promise-utils.js\");\n/* harmony import */ var _utils_uri_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/uri-utils.js */ \"(ssr)/../node_modules/.pnpm/vscode-uri@3.0.8/node_modules/vscode-uri/lib/esm/index.mjs\");\n/* harmony import */ var _utils_uri_utils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/uri-utils.js */ \"(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/utils/uri-utils.js\");\n/******************************************************************************\n * Copyright 2022 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\n\n\nclass DefaultWorkspaceManager {\n    constructor(services) {\n        this.initialBuildOptions = {};\n        this._ready = new _utils_promise_utils_js__WEBPACK_IMPORTED_MODULE_0__.Deferred();\n        this.serviceRegistry = services.ServiceRegistry;\n        this.langiumDocuments = services.workspace.LangiumDocuments;\n        this.documentBuilder = services.workspace.DocumentBuilder;\n        this.fileSystemProvider = services.workspace.FileSystemProvider;\n        this.mutex = services.workspace.WorkspaceLock;\n    }\n    get ready() {\n        return this._ready.promise;\n    }\n    get workspaceFolders() {\n        return this.folders;\n    }\n    initialize(params) {\n        var _a;\n        this.folders = (_a = params.workspaceFolders) !== null && _a !== void 0 ? _a : undefined;\n    }\n    initialized(_params) {\n        // Initialize the workspace even if there are no workspace folders\n        // We still want to load additional documents (language library or similar) during initialization\n        return this.mutex.write(token => { var _a; return this.initializeWorkspace((_a = this.folders) !== null && _a !== void 0 ? _a : [], token); });\n    }\n    async initializeWorkspace(folders, cancelToken = _utils_cancellation_js__WEBPACK_IMPORTED_MODULE_1__.CancellationToken.None) {\n        const documents = await this.performStartup(folders);\n        // Only after creating all documents do we check whether we need to cancel the initialization\n        // The document builder will later pick up on all unprocessed documents\n        await (0,_utils_promise_utils_js__WEBPACK_IMPORTED_MODULE_0__.interruptAndCheck)(cancelToken);\n        await this.documentBuilder.build(documents, this.initialBuildOptions, cancelToken);\n    }\n    /**\n     * Performs the uninterruptable startup sequence of the workspace manager.\n     * This methods loads all documents in the workspace and other documents and returns them.\n     */\n    async performStartup(folders) {\n        const fileExtensions = this.serviceRegistry.all.flatMap(e => e.LanguageMetaData.fileExtensions);\n        const documents = [];\n        const collector = (document) => {\n            documents.push(document);\n            if (!this.langiumDocuments.hasDocument(document.uri)) {\n                this.langiumDocuments.addDocument(document);\n            }\n        };\n        // Even though we don't await the initialization of the workspace manager,\n        // we can still assume that all library documents and file documents are loaded by the time we start building documents.\n        // The mutex prevents anything from performing a workspace build until we check the cancellation token\n        await this.loadAdditionalDocuments(folders, collector);\n        await Promise.all(folders.map(wf => [wf, this.getRootFolder(wf)])\n            .map(async (entry) => this.traverseFolder(...entry, fileExtensions, collector)));\n        this._ready.resolve();\n        return documents;\n    }\n    /**\n     * Load all additional documents that shall be visible in the context of the given workspace\n     * folders and add them to the collector. This can be used to include built-in libraries of\n     * your language, which can be either loaded from provided files or constructed in memory.\n     */\n    loadAdditionalDocuments(_folders, _collector) {\n        return Promise.resolve();\n    }\n    /**\n     * Determine the root folder of the source documents in the given workspace folder.\n     * The default implementation returns the URI of the workspace folder, but you can override\n     * this to return a subfolder like `src` instead.\n     */\n    getRootFolder(workspaceFolder) {\n        return _utils_uri_utils_js__WEBPACK_IMPORTED_MODULE_2__.URI.parse(workspaceFolder.uri);\n    }\n    /**\n     * Traverse the file system folder identified by the given URI and its subfolders. All\n     * contained files that match the file extensions are added to the collector.\n     */\n    async traverseFolder(workspaceFolder, folderPath, fileExtensions, collector) {\n        const content = await this.fileSystemProvider.readDirectory(folderPath);\n        await Promise.all(content.map(async (entry) => {\n            if (this.includeEntry(workspaceFolder, entry, fileExtensions)) {\n                if (entry.isDirectory) {\n                    await this.traverseFolder(workspaceFolder, entry.uri, fileExtensions, collector);\n                }\n                else if (entry.isFile) {\n                    const document = await this.langiumDocuments.getOrCreateDocument(entry.uri);\n                    collector(document);\n                }\n            }\n        }));\n    }\n    /**\n     * Determine whether the given folder entry shall be included while indexing the workspace.\n     */\n    includeEntry(_workspaceFolder, entry, fileExtensions) {\n        const name = _utils_uri_utils_js__WEBPACK_IMPORTED_MODULE_3__.UriUtils.basename(entry.uri);\n        if (name.startsWith('.')) {\n            return false;\n        }\n        if (entry.isDirectory) {\n            return name !== 'node_modules' && name !== 'out';\n        }\n        else if (entry.isFile) {\n            const extname = _utils_uri_utils_js__WEBPACK_IMPORTED_MODULE_3__.UriUtils.extname(entry.uri);\n            return fileExtensions.includes(extname);\n        }\n        return false;\n    }\n}\n//# sourceMappingURL=workspace-manager.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/langium@3.3.1/node_modules/langium/lib/workspace/workspace-manager.js\n");

/***/ })

};
;