/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/antlr4@4.9.3";
exports.ids = ["vendor-chunks/antlr4@4.9.3"];
exports.modules = {

/***/ "(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/BufferedTokenStream.js":
/*!************************************************************************************************!*\
  !*** ../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/BufferedTokenStream.js ***!
  \************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nconst {Token} = __webpack_require__(/*! ./Token */ \"(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/Token.js\");\nconst Lexer = __webpack_require__(/*! ./Lexer */ \"(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/Lexer.js\");\nconst {Interval} = __webpack_require__(/*! ./IntervalSet */ \"(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/IntervalSet.js\");\n\n// this is just to keep meaningful parameter types to Parser\nclass TokenStream {}\n\n/**\n * This implementation of {@link TokenStream} loads tokens from a\n * {@link TokenSource} on-demand, and places the tokens in a buffer to provide\n * access to any previous token by index.\n *\n * <p>\n * This token stream ignores the value of {@link Token//getChannel}. If your\n * parser requires the token stream filter tokens to only those on a particular\n * channel, such as {@link Token//DEFAULT_CHANNEL} or\n * {@link Token//HIDDEN_CHANNEL}, use a filtering token stream such a\n * {@link CommonTokenStream}.</p>\n */\nclass BufferedTokenStream extends TokenStream {\n\tconstructor(tokenSource) {\n\n\t\tsuper();\n\t\t// The {@link TokenSource} from which tokens for this stream are fetched.\n\t\tthis.tokenSource = tokenSource;\n\t\t/**\n\t\t * A collection of all tokens fetched from the token source. The list is\n\t\t * considered a complete view of the input once {@link //fetchedEOF} is set\n\t\t * to {@code true}.\n\t\t */\n\t\tthis.tokens = [];\n\n\t\t/**\n\t\t * The index into {@link //tokens} of the current token (next token to\n\t\t * {@link //consume}). {@link //tokens}{@code [}{@link //p}{@code ]} should\n\t\t * be\n\t\t * {@link //LT LT(1)}.\n\t\t *\n\t\t * <p>This field is set to -1 when the stream is first constructed or when\n\t\t * {@link //setTokenSource} is called, indicating that the first token has\n\t\t * not yet been fetched from the token source. For additional information,\n\t\t * see the documentation of {@link IntStream} for a description of\n\t\t * Initializing Methods.</p>\n\t\t */\n\t\tthis.index = -1;\n\n\t\t/**\n\t\t * Indicates whether the {@link Token//EOF} token has been fetched from\n\t\t * {@link //tokenSource} and added to {@link //tokens}. This field improves\n\t\t * performance for the following cases:\n\t\t *\n\t\t * <ul>\n\t\t * <li>{@link //consume}: The lookahead check in {@link //consume} to\n\t\t * prevent\n\t\t * consuming the EOF symbol is optimized by checking the values of\n\t\t * {@link //fetchedEOF} and {@link //p} instead of calling {@link\n\t\t * //LA}.</li>\n\t\t * <li>{@link //fetch}: The check to prevent adding multiple EOF symbols\n\t\t * into\n\t\t * {@link //tokens} is trivial with this field.</li>\n\t\t * <ul>\n\t\t */\n\t\tthis.fetchedEOF = false;\n\t}\n\n\tmark() {\n\t\treturn 0;\n\t}\n\n\trelease(marker) {\n\t\t// no resources to release\n\t}\n\n\treset() {\n\t\tthis.seek(0);\n\t}\n\n\tseek(index) {\n\t\tthis.lazyInit();\n\t\tthis.index = this.adjustSeekIndex(index);\n\t}\n\n\tget(index) {\n\t\tthis.lazyInit();\n\t\treturn this.tokens[index];\n\t}\n\n\tconsume() {\n\t\tlet skipEofCheck = false;\n\t\tif (this.index >= 0) {\n\t\t\tif (this.fetchedEOF) {\n\t\t\t\t// the last token in tokens is EOF. skip check if p indexes any\n\t\t\t\t// fetched token except the last.\n\t\t\t\tskipEofCheck = this.index < this.tokens.length - 1;\n\t\t\t} else {\n\t\t\t\t// no EOF token in tokens. skip check if p indexes a fetched token.\n\t\t\t\tskipEofCheck = this.index < this.tokens.length;\n\t\t\t}\n\t\t} else {\n\t\t\t// not yet initialized\n\t\t\tskipEofCheck = false;\n\t\t}\n\t\tif (!skipEofCheck && this.LA(1) === Token.EOF) {\n\t\t\tthrow \"cannot consume EOF\";\n\t\t}\n\t\tif (this.sync(this.index + 1)) {\n\t\t\tthis.index = this.adjustSeekIndex(this.index + 1);\n\t\t}\n\t}\n\n\t/**\n\t * Make sure index {@code i} in tokens has a token.\n\t *\n\t * @return {Boolean} {@code true} if a token is located at index {@code i}, otherwise\n\t * {@code false}.\n\t * @see //get(int i)\n\t */\n\tsync(i) {\n\t\tconst n = i - this.tokens.length + 1; // how many more elements we need?\n\t\tif (n > 0) {\n\t\t\tconst fetched = this.fetch(n);\n\t\t\treturn fetched >= n;\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Add {@code n} elements to buffer.\n\t *\n\t * @return {Number} The actual number of elements added to the buffer.\n\t */\n\tfetch(n) {\n\t\tif (this.fetchedEOF) {\n\t\t\treturn 0;\n\t\t}\n\t\tfor (let i = 0; i < n; i++) {\n\t\t\tconst t = this.tokenSource.nextToken();\n\t\t\tt.tokenIndex = this.tokens.length;\n\t\t\tthis.tokens.push(t);\n\t\t\tif (t.type === Token.EOF) {\n\t\t\t\tthis.fetchedEOF = true;\n\t\t\t\treturn i + 1;\n\t\t\t}\n\t\t}\n\t\treturn n;\n\t}\n\n// Get all tokens from start..stop inclusively///\n\tgetTokens(start, stop, types) {\n\t\tif (types === undefined) {\n\t\t\ttypes = null;\n\t\t}\n\t\tif (start < 0 || stop < 0) {\n\t\t\treturn null;\n\t\t}\n\t\tthis.lazyInit();\n\t\tconst subset = [];\n\t\tif (stop >= this.tokens.length) {\n\t\t\tstop = this.tokens.length - 1;\n\t\t}\n\t\tfor (let i = start; i < stop; i++) {\n\t\t\tconst t = this.tokens[i];\n\t\t\tif (t.type === Token.EOF) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (types === null || types.contains(t.type)) {\n\t\t\t\tsubset.push(t);\n\t\t\t}\n\t\t}\n\t\treturn subset;\n\t}\n\n\tLA(i) {\n\t\treturn this.LT(i).type;\n\t}\n\n\tLB(k) {\n\t\tif (this.index - k < 0) {\n\t\t\treturn null;\n\t\t}\n\t\treturn this.tokens[this.index - k];\n\t}\n\n\tLT(k) {\n\t\tthis.lazyInit();\n\t\tif (k === 0) {\n\t\t\treturn null;\n\t\t}\n\t\tif (k < 0) {\n\t\t\treturn this.LB(-k);\n\t\t}\n\t\tconst i = this.index + k - 1;\n\t\tthis.sync(i);\n\t\tif (i >= this.tokens.length) { // return EOF token\n\t\t\t// EOF must be last token\n\t\t\treturn this.tokens[this.tokens.length - 1];\n\t\t}\n\t\treturn this.tokens[i];\n\t}\n\n\t/**\n\t * Allowed derived classes to modify the behavior of operations which change\n\t * the current stream position by adjusting the target token index of a seek\n\t * operation. The default implementation simply returns {@code i}. If an\n\t * exception is thrown in this method, the current stream index should not be\n\t * changed.\n\t *\n\t * <p>For example, {@link CommonTokenStream} overrides this method to ensure\n\t * that\n\t * the seek target is always an on-channel token.</p>\n\t *\n\t * @param {Number} i The target token index.\n\t * @return {Number} The adjusted target token index.\n\t */\n\tadjustSeekIndex(i) {\n\t\treturn i;\n\t}\n\n\tlazyInit() {\n\t\tif (this.index === -1) {\n\t\t\tthis.setup();\n\t\t}\n\t}\n\n\tsetup() {\n\t\tthis.sync(0);\n\t\tthis.index = this.adjustSeekIndex(0);\n\t}\n\n// Reset this token stream by setting its token source.///\n\tsetTokenSource(tokenSource) {\n\t\tthis.tokenSource = tokenSource;\n\t\tthis.tokens = [];\n\t\tthis.index = -1;\n\t\tthis.fetchedEOF = false;\n\t}\n\n\t/**\n\t * Given a starting index, return the index of the next token on channel.\n\t * Return i if tokens[i] is on channel. Return -1 if there are no tokens\n\t * on channel between i and EOF.\n\t */\n\tnextTokenOnChannel(i, channel) {\n\t\tthis.sync(i);\n\t\tif (i >= this.tokens.length) {\n\t\t\treturn -1;\n\t\t}\n\t\tlet token = this.tokens[i];\n\t\twhile (token.channel !== this.channel) {\n\t\t\tif (token.type === Token.EOF) {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t\ti += 1;\n\t\t\tthis.sync(i);\n\t\t\ttoken = this.tokens[i];\n\t\t}\n\t\treturn i;\n\t}\n\n\t/**\n\t * Given a starting index, return the index of the previous token on channel.\n\t * Return i if tokens[i] is on channel. Return -1 if there are no tokens\n\t * on channel between i and 0.\n\t */\n\tpreviousTokenOnChannel(i, channel) {\n\t\twhile (i >= 0 && this.tokens[i].channel !== channel) {\n\t\t\ti -= 1;\n\t\t}\n\t\treturn i;\n\t}\n\n\t/**\n\t * Collect all tokens on specified channel to the right of\n\t * the current token up until we see a token on DEFAULT_TOKEN_CHANNEL or\n\t * EOF. If channel is -1, find any non default channel token.\n\t */\n\tgetHiddenTokensToRight(tokenIndex,\n\t\t\tchannel) {\n\t\tif (channel === undefined) {\n\t\t\tchannel = -1;\n\t\t}\n\t\tthis.lazyInit();\n\t\tif (tokenIndex < 0 || tokenIndex >= this.tokens.length) {\n\t\t\tthrow \"\" + tokenIndex + \" not in 0..\" + this.tokens.length - 1;\n\t\t}\n\t\tconst nextOnChannel = this.nextTokenOnChannel(tokenIndex + 1, Lexer.DEFAULT_TOKEN_CHANNEL);\n\t\tconst from_ = tokenIndex + 1;\n\t\t// if none onchannel to right, nextOnChannel=-1 so set to = last token\n\t\tconst to = nextOnChannel === -1 ? this.tokens.length - 1 : nextOnChannel;\n\t\treturn this.filterForChannel(from_, to, channel);\n\t}\n\n\t/**\n\t * Collect all tokens on specified channel to the left of\n\t * the current token up until we see a token on DEFAULT_TOKEN_CHANNEL.\n\t * If channel is -1, find any non default channel token.\n\t */\n\tgetHiddenTokensToLeft(tokenIndex,\n\t\t\tchannel) {\n\t\tif (channel === undefined) {\n\t\t\tchannel = -1;\n\t\t}\n\t\tthis.lazyInit();\n\t\tif (tokenIndex < 0 || tokenIndex >= this.tokens.length) {\n\t\t\tthrow \"\" + tokenIndex + \" not in 0..\" + this.tokens.length - 1;\n\t\t}\n\t\tconst prevOnChannel = this.previousTokenOnChannel(tokenIndex - 1, Lexer.DEFAULT_TOKEN_CHANNEL);\n\t\tif (prevOnChannel === tokenIndex - 1) {\n\t\t\treturn null;\n\t\t}\n\t\t// if none on channel to left, prevOnChannel=-1 then from=0\n\t\tconst from_ = prevOnChannel + 1;\n\t\tconst to = tokenIndex - 1;\n\t\treturn this.filterForChannel(from_, to, channel);\n\t}\n\n\tfilterForChannel(left, right, channel) {\n\t\tconst hidden = [];\n\t\tfor (let i = left; i < right + 1; i++) {\n\t\t\tconst t = this.tokens[i];\n\t\t\tif (channel === -1) {\n\t\t\t\tif (t.channel !== Lexer.DEFAULT_TOKEN_CHANNEL) {\n\t\t\t\t\thidden.push(t);\n\t\t\t\t}\n\t\t\t} else if (t.channel === channel) {\n\t\t\t\thidden.push(t);\n\t\t\t}\n\t\t}\n\t\tif (hidden.length === 0) {\n\t\t\treturn null;\n\t\t}\n\t\treturn hidden;\n\t}\n\n\tgetSourceName() {\n\t\treturn this.tokenSource.getSourceName();\n\t}\n\n// Get the text of all tokens in this buffer.///\n\tgetText(interval) {\n\t\tthis.lazyInit();\n\t\tthis.fill();\n\t\tif (interval === undefined || interval === null) {\n\t\t\tinterval = new Interval(0, this.tokens.length - 1);\n\t\t}\n\t\tlet start = interval.start;\n\t\tif (start instanceof Token) {\n\t\t\tstart = start.tokenIndex;\n\t\t}\n\t\tlet stop = interval.stop;\n\t\tif (stop instanceof Token) {\n\t\t\tstop = stop.tokenIndex;\n\t\t}\n\t\tif (start === null || stop === null || start < 0 || stop < 0) {\n\t\t\treturn \"\";\n\t\t}\n\t\tif (stop >= this.tokens.length) {\n\t\t\tstop = this.tokens.length - 1;\n\t\t}\n\t\tlet s = \"\";\n\t\tfor (let i = start; i < stop + 1; i++) {\n\t\t\tconst t = this.tokens[i];\n\t\t\tif (t.type === Token.EOF) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\ts = s + t.text;\n\t\t}\n\t\treturn s;\n\t}\n\n// Get all tokens from lexer until EOF///\n\tfill() {\n\t\tthis.lazyInit();\n\t\twhile (this.fetch(1000) === 1000) {\n\t\t\tcontinue;\n\t\t}\n\t}\n}\n\n\nmodule.exports = BufferedTokenStream;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/BufferedTokenStream.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/CommonTokenFactory.js":
/*!***********************************************************************************************!*\
  !*** ../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/CommonTokenFactory.js ***!
  \***********************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nconst CommonToken = (__webpack_require__(/*! ./Token */ \"(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/Token.js\").CommonToken);\n\nclass TokenFactory {}\n\n/**\n * This default implementation of {@link TokenFactory} creates\n * {@link CommonToken} objects.\n */\nclass CommonTokenFactory extends TokenFactory {\n    constructor(copyText) {\n        super();\n        /**\n         * Indicates whether {@link CommonToken//setText} should be called after\n         * constructing tokens to explicitly set the text. This is useful for cases\n         * where the input stream might not be able to provide arbitrary substrings\n         * of text from the input after the lexer creates a token (e.g. the\n         * implementation of {@link CharStream//getText} in\n         * {@link UnbufferedCharStream} throws an\n         * {@link UnsupportedOperationException}). Explicitly setting the token text\n         * allows {@link Token//getText} to be called at any time regardless of the\n         * input stream implementation.\n         *\n         * <p>\n         * The default value is {@code false} to avoid the performance and memory\n         * overhead of copying text for every token unless explicitly requested.</p>\n         */\n        this.copyText = copyText===undefined ? false : copyText;\n    }\n\n    create(source, type, text, channel, start, stop, line, column) {\n        const t = new CommonToken(source, type, channel, start, stop);\n        t.line = line;\n        t.column = column;\n        if (text !==null) {\n            t.text = text;\n        } else if (this.copyText && source[1] !==null) {\n            t.text = source[1].getText(start,stop);\n        }\n        return t;\n    }\n\n    createThin(type, text) {\n        const t = new CommonToken(null, type);\n        t.text = text;\n        return t;\n    }\n}\n\n/**\n * The default {@link CommonTokenFactory} instance.\n *\n * <p>\n * This token factory does not explicitly copy token text when constructing\n * tokens.</p>\n */\nCommonTokenFactory.DEFAULT = new CommonTokenFactory();\n\nmodule.exports = CommonTokenFactory;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2FudGxyNEA0LjkuMy9ub2RlX21vZHVsZXMvYW50bHI0L3NyYy9hbnRscjQvQ29tbW9uVG9rZW5GYWN0b3J5LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLG9CQUFvQixvSUFBOEI7O0FBRWxEOztBQUVBO0FBQ0EsbUNBQW1DLG9CQUFvQjtBQUN2RCxJQUFJLG1CQUFtQjtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLDRCQUE0QjtBQUMxRDtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsMkJBQTJCO0FBQ3pELFlBQVksNEJBQTRCO0FBQ3hDLFlBQVksb0NBQW9DO0FBQ2hELG1CQUFtQixzQkFBc0I7QUFDekM7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDLGFBQWE7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGdCQUFnQiwwQkFBMEI7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBIiwic291cmNlcyI6WyIvVXNlcnMvZXRoYW5raW0vTmVzdG9yL21lZGZldGNoLmpzL25vZGVfbW9kdWxlcy8ucG5wbS9hbnRscjRANC45LjMvbm9kZV9tb2R1bGVzL2FudGxyNC9zcmMvYW50bHI0L0NvbW1vblRva2VuRmFjdG9yeS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiBDb3B5cmlnaHQgKGMpIDIwMTItMjAxNyBUaGUgQU5UTFIgUHJvamVjdC4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFVzZSBvZiB0aGlzIGZpbGUgaXMgZ292ZXJuZWQgYnkgdGhlIEJTRCAzLWNsYXVzZSBsaWNlbnNlIHRoYXRcbiAqIGNhbiBiZSBmb3VuZCBpbiB0aGUgTElDRU5TRS50eHQgZmlsZSBpbiB0aGUgcHJvamVjdCByb290LlxuICovXG5cbmNvbnN0IENvbW1vblRva2VuID0gcmVxdWlyZSgnLi9Ub2tlbicpLkNvbW1vblRva2VuO1xuXG5jbGFzcyBUb2tlbkZhY3Rvcnkge31cblxuLyoqXG4gKiBUaGlzIGRlZmF1bHQgaW1wbGVtZW50YXRpb24gb2Yge0BsaW5rIFRva2VuRmFjdG9yeX0gY3JlYXRlc1xuICoge0BsaW5rIENvbW1vblRva2VufSBvYmplY3RzLlxuICovXG5jbGFzcyBDb21tb25Ub2tlbkZhY3RvcnkgZXh0ZW5kcyBUb2tlbkZhY3Rvcnkge1xuICAgIGNvbnN0cnVjdG9yKGNvcHlUZXh0KSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBJbmRpY2F0ZXMgd2hldGhlciB7QGxpbmsgQ29tbW9uVG9rZW4vL3NldFRleHR9IHNob3VsZCBiZSBjYWxsZWQgYWZ0ZXJcbiAgICAgICAgICogY29uc3RydWN0aW5nIHRva2VucyB0byBleHBsaWNpdGx5IHNldCB0aGUgdGV4dC4gVGhpcyBpcyB1c2VmdWwgZm9yIGNhc2VzXG4gICAgICAgICAqIHdoZXJlIHRoZSBpbnB1dCBzdHJlYW0gbWlnaHQgbm90IGJlIGFibGUgdG8gcHJvdmlkZSBhcmJpdHJhcnkgc3Vic3RyaW5nc1xuICAgICAgICAgKiBvZiB0ZXh0IGZyb20gdGhlIGlucHV0IGFmdGVyIHRoZSBsZXhlciBjcmVhdGVzIGEgdG9rZW4gKGUuZy4gdGhlXG4gICAgICAgICAqIGltcGxlbWVudGF0aW9uIG9mIHtAbGluayBDaGFyU3RyZWFtLy9nZXRUZXh0fSBpblxuICAgICAgICAgKiB7QGxpbmsgVW5idWZmZXJlZENoYXJTdHJlYW19IHRocm93cyBhblxuICAgICAgICAgKiB7QGxpbmsgVW5zdXBwb3J0ZWRPcGVyYXRpb25FeGNlcHRpb259KS4gRXhwbGljaXRseSBzZXR0aW5nIHRoZSB0b2tlbiB0ZXh0XG4gICAgICAgICAqIGFsbG93cyB7QGxpbmsgVG9rZW4vL2dldFRleHR9IHRvIGJlIGNhbGxlZCBhdCBhbnkgdGltZSByZWdhcmRsZXNzIG9mIHRoZVxuICAgICAgICAgKiBpbnB1dCBzdHJlYW0gaW1wbGVtZW50YXRpb24uXG4gICAgICAgICAqXG4gICAgICAgICAqIDxwPlxuICAgICAgICAgKiBUaGUgZGVmYXVsdCB2YWx1ZSBpcyB7QGNvZGUgZmFsc2V9IHRvIGF2b2lkIHRoZSBwZXJmb3JtYW5jZSBhbmQgbWVtb3J5XG4gICAgICAgICAqIG92ZXJoZWFkIG9mIGNvcHlpbmcgdGV4dCBmb3IgZXZlcnkgdG9rZW4gdW5sZXNzIGV4cGxpY2l0bHkgcmVxdWVzdGVkLjwvcD5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuY29weVRleHQgPSBjb3B5VGV4dD09PXVuZGVmaW5lZCA/IGZhbHNlIDogY29weVRleHQ7XG4gICAgfVxuXG4gICAgY3JlYXRlKHNvdXJjZSwgdHlwZSwgdGV4dCwgY2hhbm5lbCwgc3RhcnQsIHN0b3AsIGxpbmUsIGNvbHVtbikge1xuICAgICAgICBjb25zdCB0ID0gbmV3IENvbW1vblRva2VuKHNvdXJjZSwgdHlwZSwgY2hhbm5lbCwgc3RhcnQsIHN0b3ApO1xuICAgICAgICB0LmxpbmUgPSBsaW5lO1xuICAgICAgICB0LmNvbHVtbiA9IGNvbHVtbjtcbiAgICAgICAgaWYgKHRleHQgIT09bnVsbCkge1xuICAgICAgICAgICAgdC50ZXh0ID0gdGV4dDtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLmNvcHlUZXh0ICYmIHNvdXJjZVsxXSAhPT1udWxsKSB7XG4gICAgICAgICAgICB0LnRleHQgPSBzb3VyY2VbMV0uZ2V0VGV4dChzdGFydCxzdG9wKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdDtcbiAgICB9XG5cbiAgICBjcmVhdGVUaGluKHR5cGUsIHRleHQpIHtcbiAgICAgICAgY29uc3QgdCA9IG5ldyBDb21tb25Ub2tlbihudWxsLCB0eXBlKTtcbiAgICAgICAgdC50ZXh0ID0gdGV4dDtcbiAgICAgICAgcmV0dXJuIHQ7XG4gICAgfVxufVxuXG4vKipcbiAqIFRoZSBkZWZhdWx0IHtAbGluayBDb21tb25Ub2tlbkZhY3Rvcnl9IGluc3RhbmNlLlxuICpcbiAqIDxwPlxuICogVGhpcyB0b2tlbiBmYWN0b3J5IGRvZXMgbm90IGV4cGxpY2l0bHkgY29weSB0b2tlbiB0ZXh0IHdoZW4gY29uc3RydWN0aW5nXG4gKiB0b2tlbnMuPC9wPlxuICovXG5Db21tb25Ub2tlbkZhY3RvcnkuREVGQVVMVCA9IG5ldyBDb21tb25Ub2tlbkZhY3RvcnkoKTtcblxubW9kdWxlLmV4cG9ydHMgPSBDb21tb25Ub2tlbkZhY3Rvcnk7XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/CommonTokenFactory.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/CommonTokenStream.js":
/*!**********************************************************************************************!*\
  !*** ../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/CommonTokenStream.js ***!
  \**********************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\n\nconst Token = (__webpack_require__(/*! ./Token */ \"(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/Token.js\").Token);\nconst BufferedTokenStream = __webpack_require__(/*! ./BufferedTokenStream */ \"(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/BufferedTokenStream.js\");\n\n/**\n * This class extends {@link BufferedTokenStream} with functionality to filter\n * token streams to tokens on a particular channel (tokens where\n * {@link Token//getChannel} returns a particular value).\n *\n * <p>\n * This token stream provides access to all tokens by index or when calling\n * methods like {@link //getText}. The channel filtering is only used for code\n * accessing tokens via the lookahead methods {@link //LA}, {@link //LT}, and\n * {@link //LB}.</p>\n *\n * <p>\n * By default, tokens are placed on the default channel\n * ({@link Token//DEFAULT_CHANNEL}), but may be reassigned by using the\n * {@code ->channel(HIDDEN)} lexer command, or by using an embedded action to\n * call {@link Lexer//setChannel}.\n * </p>\n *\n * <p>\n * Note: lexer rules which use the {@code ->skip} lexer command or call\n * {@link Lexer//skip} do not produce tokens at all, so input text matched by\n * such a rule will not be available as part of the token stream, regardless of\n * channel.</p>\n */\nclass CommonTokenStream extends BufferedTokenStream {\n    constructor(lexer, channel) {\n        super(lexer);\n        this.channel = channel===undefined ? Token.DEFAULT_CHANNEL : channel;\n    }\n\n    adjustSeekIndex(i) {\n        return this.nextTokenOnChannel(i, this.channel);\n    }\n\n    LB(k) {\n        if (k===0 || this.index-k<0) {\n            return null;\n        }\n        let i = this.index;\n        let n = 1;\n        // find k good tokens looking backwards\n        while (n <= k) {\n            // skip off-channel tokens\n            i = this.previousTokenOnChannel(i - 1, this.channel);\n            n += 1;\n        }\n        if (i < 0) {\n            return null;\n        }\n        return this.tokens[i];\n    }\n\n    LT(k) {\n        this.lazyInit();\n        if (k === 0) {\n            return null;\n        }\n        if (k < 0) {\n            return this.LB(-k);\n        }\n        let i = this.index;\n        let n = 1; // we know tokens[pos] is a good one\n        // find k good tokens\n        while (n < k) {\n            // skip off-channel tokens, but make sure to not look past EOF\n            if (this.sync(i + 1)) {\n                i = this.nextTokenOnChannel(i + 1, this.channel);\n            }\n            n += 1;\n        }\n        return this.tokens[i];\n    }\n\n    // Count EOF just once.\n    getNumberOfOnChannelTokens() {\n        let n = 0;\n        this.fill();\n        for (let i =0; i< this.tokens.length;i++) {\n            const t = this.tokens[i];\n            if( t.channel===this.channel) {\n                n += 1;\n            }\n            if( t.type===Token.EOF) {\n                break;\n            }\n        }\n        return n;\n    }\n}\n\nmodule.exports = CommonTokenStream;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2FudGxyNEA0LjkuMy9ub2RlX21vZHVsZXMvYW50bHI0L3NyYy9hbnRscjQvQ29tbW9uVG9rZW5TdHJlYW0uanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7OztBQUdBLGNBQWMsOEhBQXdCO0FBQ3RDLDRCQUE0QixtQkFBTyxDQUFDLDZIQUF1Qjs7QUFFM0Q7QUFDQSx1QkFBdUIsMkJBQTJCO0FBQ2xEO0FBQ0EsSUFBSSx5QkFBeUI7QUFDN0I7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLGdCQUFnQjtBQUNqQywrQ0FBK0MsV0FBVyxHQUFHLFdBQVc7QUFDeEUsSUFBSSxXQUFXO0FBQ2Y7QUFDQTtBQUNBO0FBQ0EsS0FBSyw2QkFBNkI7QUFDbEMsSUFBSSx5QkFBeUI7QUFDN0IsU0FBUyx3QkFBd0I7QUFDakM7QUFDQTtBQUNBO0FBQ0Esb0NBQW9DLGNBQWM7QUFDbEQsSUFBSSxtQkFBbUI7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUI7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsc0JBQXNCO0FBQzdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIi9Vc2Vycy9ldGhhbmtpbS9OZXN0b3IvbWVkZmV0Y2guanMvbm9kZV9tb2R1bGVzLy5wbnBtL2FudGxyNEA0LjkuMy9ub2RlX21vZHVsZXMvYW50bHI0L3NyYy9hbnRscjQvQ29tbW9uVG9rZW5TdHJlYW0uanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyogQ29weXJpZ2h0IChjKSAyMDEyLTIwMTcgVGhlIEFOVExSIFByb2plY3QuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBVc2Ugb2YgdGhpcyBmaWxlIGlzIGdvdmVybmVkIGJ5IHRoZSBCU0QgMy1jbGF1c2UgbGljZW5zZSB0aGF0XG4gKiBjYW4gYmUgZm91bmQgaW4gdGhlIExJQ0VOU0UudHh0IGZpbGUgaW4gdGhlIHByb2plY3Qgcm9vdC5cbiAqL1xuXG5cbmNvbnN0IFRva2VuID0gcmVxdWlyZSgnLi9Ub2tlbicpLlRva2VuO1xuY29uc3QgQnVmZmVyZWRUb2tlblN0cmVhbSA9IHJlcXVpcmUoJy4vQnVmZmVyZWRUb2tlblN0cmVhbScpO1xuXG4vKipcbiAqIFRoaXMgY2xhc3MgZXh0ZW5kcyB7QGxpbmsgQnVmZmVyZWRUb2tlblN0cmVhbX0gd2l0aCBmdW5jdGlvbmFsaXR5IHRvIGZpbHRlclxuICogdG9rZW4gc3RyZWFtcyB0byB0b2tlbnMgb24gYSBwYXJ0aWN1bGFyIGNoYW5uZWwgKHRva2VucyB3aGVyZVxuICoge0BsaW5rIFRva2VuLy9nZXRDaGFubmVsfSByZXR1cm5zIGEgcGFydGljdWxhciB2YWx1ZSkuXG4gKlxuICogPHA+XG4gKiBUaGlzIHRva2VuIHN0cmVhbSBwcm92aWRlcyBhY2Nlc3MgdG8gYWxsIHRva2VucyBieSBpbmRleCBvciB3aGVuIGNhbGxpbmdcbiAqIG1ldGhvZHMgbGlrZSB7QGxpbmsgLy9nZXRUZXh0fS4gVGhlIGNoYW5uZWwgZmlsdGVyaW5nIGlzIG9ubHkgdXNlZCBmb3IgY29kZVxuICogYWNjZXNzaW5nIHRva2VucyB2aWEgdGhlIGxvb2thaGVhZCBtZXRob2RzIHtAbGluayAvL0xBfSwge0BsaW5rIC8vTFR9LCBhbmRcbiAqIHtAbGluayAvL0xCfS48L3A+XG4gKlxuICogPHA+XG4gKiBCeSBkZWZhdWx0LCB0b2tlbnMgYXJlIHBsYWNlZCBvbiB0aGUgZGVmYXVsdCBjaGFubmVsXG4gKiAoe0BsaW5rIFRva2VuLy9ERUZBVUxUX0NIQU5ORUx9KSwgYnV0IG1heSBiZSByZWFzc2lnbmVkIGJ5IHVzaW5nIHRoZVxuICoge0Bjb2RlIC0+Y2hhbm5lbChISURERU4pfSBsZXhlciBjb21tYW5kLCBvciBieSB1c2luZyBhbiBlbWJlZGRlZCBhY3Rpb24gdG9cbiAqIGNhbGwge0BsaW5rIExleGVyLy9zZXRDaGFubmVsfS5cbiAqIDwvcD5cbiAqXG4gKiA8cD5cbiAqIE5vdGU6IGxleGVyIHJ1bGVzIHdoaWNoIHVzZSB0aGUge0Bjb2RlIC0+c2tpcH0gbGV4ZXIgY29tbWFuZCBvciBjYWxsXG4gKiB7QGxpbmsgTGV4ZXIvL3NraXB9IGRvIG5vdCBwcm9kdWNlIHRva2VucyBhdCBhbGwsIHNvIGlucHV0IHRleHQgbWF0Y2hlZCBieVxuICogc3VjaCBhIHJ1bGUgd2lsbCBub3QgYmUgYXZhaWxhYmxlIGFzIHBhcnQgb2YgdGhlIHRva2VuIHN0cmVhbSwgcmVnYXJkbGVzcyBvZlxuICogY2hhbm5lbC48L3A+XG4gKi9cbmNsYXNzIENvbW1vblRva2VuU3RyZWFtIGV4dGVuZHMgQnVmZmVyZWRUb2tlblN0cmVhbSB7XG4gICAgY29uc3RydWN0b3IobGV4ZXIsIGNoYW5uZWwpIHtcbiAgICAgICAgc3VwZXIobGV4ZXIpO1xuICAgICAgICB0aGlzLmNoYW5uZWwgPSBjaGFubmVsPT09dW5kZWZpbmVkID8gVG9rZW4uREVGQVVMVF9DSEFOTkVMIDogY2hhbm5lbDtcbiAgICB9XG5cbiAgICBhZGp1c3RTZWVrSW5kZXgoaSkge1xuICAgICAgICByZXR1cm4gdGhpcy5uZXh0VG9rZW5PbkNoYW5uZWwoaSwgdGhpcy5jaGFubmVsKTtcbiAgICB9XG5cbiAgICBMQihrKSB7XG4gICAgICAgIGlmIChrPT09MCB8fCB0aGlzLmluZGV4LWs8MCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGkgPSB0aGlzLmluZGV4O1xuICAgICAgICBsZXQgbiA9IDE7XG4gICAgICAgIC8vIGZpbmQgayBnb29kIHRva2VucyBsb29raW5nIGJhY2t3YXJkc1xuICAgICAgICB3aGlsZSAobiA8PSBrKSB7XG4gICAgICAgICAgICAvLyBza2lwIG9mZi1jaGFubmVsIHRva2Vuc1xuICAgICAgICAgICAgaSA9IHRoaXMucHJldmlvdXNUb2tlbk9uQ2hhbm5lbChpIC0gMSwgdGhpcy5jaGFubmVsKTtcbiAgICAgICAgICAgIG4gKz0gMTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaSA8IDApIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLnRva2Vuc1tpXTtcbiAgICB9XG5cbiAgICBMVChrKSB7XG4gICAgICAgIHRoaXMubGF6eUluaXQoKTtcbiAgICAgICAgaWYgKGsgPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGlmIChrIDwgMCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuTEIoLWspO1xuICAgICAgICB9XG4gICAgICAgIGxldCBpID0gdGhpcy5pbmRleDtcbiAgICAgICAgbGV0IG4gPSAxOyAvLyB3ZSBrbm93IHRva2Vuc1twb3NdIGlzIGEgZ29vZCBvbmVcbiAgICAgICAgLy8gZmluZCBrIGdvb2QgdG9rZW5zXG4gICAgICAgIHdoaWxlIChuIDwgaykge1xuICAgICAgICAgICAgLy8gc2tpcCBvZmYtY2hhbm5lbCB0b2tlbnMsIGJ1dCBtYWtlIHN1cmUgdG8gbm90IGxvb2sgcGFzdCBFT0ZcbiAgICAgICAgICAgIGlmICh0aGlzLnN5bmMoaSArIDEpKSB7XG4gICAgICAgICAgICAgICAgaSA9IHRoaXMubmV4dFRva2VuT25DaGFubmVsKGkgKyAxLCB0aGlzLmNoYW5uZWwpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbiArPSAxO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLnRva2Vuc1tpXTtcbiAgICB9XG5cbiAgICAvLyBDb3VudCBFT0YganVzdCBvbmNlLlxuICAgIGdldE51bWJlck9mT25DaGFubmVsVG9rZW5zKCkge1xuICAgICAgICBsZXQgbiA9IDA7XG4gICAgICAgIHRoaXMuZmlsbCgpO1xuICAgICAgICBmb3IgKGxldCBpID0wOyBpPCB0aGlzLnRva2Vucy5sZW5ndGg7aSsrKSB7XG4gICAgICAgICAgICBjb25zdCB0ID0gdGhpcy50b2tlbnNbaV07XG4gICAgICAgICAgICBpZiggdC5jaGFubmVsPT09dGhpcy5jaGFubmVsKSB7XG4gICAgICAgICAgICAgICAgbiArPSAxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYoIHQudHlwZT09PVRva2VuLkVPRikge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuO1xuICAgIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBDb21tb25Ub2tlblN0cmVhbTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/CommonTokenStream.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/InputStream.js":
/*!****************************************************************************************!*\
  !*** ../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/InputStream.js ***!
  \****************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nconst {Token} = __webpack_require__(/*! ./Token */ \"(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/Token.js\");\n__webpack_require__(/*! ./polyfills/codepointat */ \"(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/polyfills/codepointat.js\");\n__webpack_require__(/*! ./polyfills/fromcodepoint */ \"(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/polyfills/fromcodepoint.js\");\n\n/**\n * If decodeToUnicodeCodePoints is true, the input is treated\n * as a series of Unicode code points.\n *\n * Otherwise, the input is treated as a series of 16-bit UTF-16 code\n * units.\n */\nclass InputStream {\n\tconstructor(data, decodeToUnicodeCodePoints) {\n\t\tthis.name = \"<empty>\";\n\t\tthis.strdata = data;\n\t\tthis.decodeToUnicodeCodePoints = decodeToUnicodeCodePoints || false;\n\t\t// _loadString - Vacuum all input from a string and then treat it like a buffer.\n\t\tthis._index = 0;\n\t\tthis.data = [];\n\t\tif (this.decodeToUnicodeCodePoints) {\n\t\t\tfor (let i = 0; i < this.strdata.length; ) {\n\t\t\t\tconst codePoint = this.strdata.codePointAt(i);\n\t\t\t\tthis.data.push(codePoint);\n\t\t\t\ti += codePoint <= 0xFFFF ? 1 : 2;\n\t\t\t}\n\t\t} else {\n\t\t\tthis.data = new Array(this.strdata.length);\n\t\t\tfor (let i = 0; i < this.strdata.length; i++) {\n\t\t\t\tconst codeUnit = this.strdata.charCodeAt(i);\n\t\t\t\tthis.data[i] = codeUnit;\n\t\t\t}\n\t\t}\n\t\tthis._size = this.data.length;\n\t}\n\n\t/**\n\t * Reset the stream so that it's in the same state it was\n\t * when the object was created *except* the data array is not\n\t * touched.\n\t */\n\treset() {\n\t\tthis._index = 0;\n\t}\n\n\tconsume() {\n\t\tif (this._index >= this._size) {\n\t\t\t// assert this.LA(1) == Token.EOF\n\t\t\tthrow (\"cannot consume EOF\");\n\t\t}\n\t\tthis._index += 1;\n\t}\n\n\tLA(offset) {\n\t\tif (offset === 0) {\n\t\t\treturn 0; // undefined\n\t\t}\n\t\tif (offset < 0) {\n\t\t\toffset += 1; // e.g., translate LA(-1) to use offset=0\n\t\t}\n\t\tconst pos = this._index + offset - 1;\n\t\tif (pos < 0 || pos >= this._size) { // invalid\n\t\t\treturn Token.EOF;\n\t\t}\n\t\treturn this.data[pos];\n\t}\n\n\tLT(offset) {\n\t\treturn this.LA(offset);\n\t}\n\n// mark/release do nothing; we have entire buffer\n\tmark() {\n\t\treturn -1;\n\t}\n\n\trelease(marker) {\n\t}\n\n\t/**\n\t * consume() ahead until p==_index; can't just set p=_index as we must\n\t * update line and column. If we seek backwards, just set p\n\t */\n\tseek(_index) {\n\t\tif (_index <= this._index) {\n\t\t\tthis._index = _index; // just jump; don't update stream state (line,\n\t\t\t\t\t\t\t\t\t// ...)\n\t\t\treturn;\n\t\t}\n\t\t// seek forward\n\t\tthis._index = Math.min(_index, this._size);\n\t}\n\n\tgetText(start, stop) {\n\t\tif (stop >= this._size) {\n\t\t\tstop = this._size - 1;\n\t\t}\n\t\tif (start >= this._size) {\n\t\t\treturn \"\";\n\t\t} else {\n\t\t\tif (this.decodeToUnicodeCodePoints) {\n\t\t\t\tlet result = \"\";\n\t\t\t\tfor (let i = start; i <= stop; i++) {\n\t\t\t\t\tresult += String.fromCodePoint(this.data[i]);\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t} else {\n\t\t\t\treturn this.strdata.slice(start, stop + 1);\n\t\t\t}\n\t\t}\n\t}\n\n\ttoString() {\n\t\treturn this.strdata;\n\t}\n\n\tget index(){\n\t\treturn this._index;\n\t}\n\n\tget size(){\n\t\treturn this._size;\n\t}\n}\n\n\nmodule.exports = InputStream;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2FudGxyNEA0LjkuMy9ub2RlX21vZHVsZXMvYW50bHI0L3NyYy9hbnRscjQvSW5wdXRTdHJlYW0uanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBTyxPQUFPLEVBQUUsbUJBQU8sQ0FBQyxpR0FBUztBQUNqQyxtQkFBTyxDQUFDLGlJQUF5QjtBQUNqQyxtQkFBTyxDQUFDLHFJQUEyQjs7QUFFbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIseUJBQXlCO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0EsbUJBQW1CLHlCQUF5QjtBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBLHNDQUFzQztBQUN0QztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsNEJBQTRCO0FBQzVCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EscUNBQXFDO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCLGNBQWM7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0Esd0JBQXdCLFdBQVc7QUFDbkM7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7OztBQUdBIiwic291cmNlcyI6WyIvVXNlcnMvZXRoYW5raW0vTmVzdG9yL21lZGZldGNoLmpzL25vZGVfbW9kdWxlcy8ucG5wbS9hbnRscjRANC45LjMvbm9kZV9tb2R1bGVzL2FudGxyNC9zcmMvYW50bHI0L0lucHV0U3RyZWFtLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIENvcHlyaWdodCAoYykgMjAxMi0yMDE3IFRoZSBBTlRMUiBQcm9qZWN0LiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogVXNlIG9mIHRoaXMgZmlsZSBpcyBnb3Zlcm5lZCBieSB0aGUgQlNEIDMtY2xhdXNlIGxpY2Vuc2UgdGhhdFxuICogY2FuIGJlIGZvdW5kIGluIHRoZSBMSUNFTlNFLnR4dCBmaWxlIGluIHRoZSBwcm9qZWN0IHJvb3QuXG4gKi9cblxuY29uc3Qge1Rva2VufSA9IHJlcXVpcmUoJy4vVG9rZW4nKTtcbnJlcXVpcmUoJy4vcG9seWZpbGxzL2NvZGVwb2ludGF0Jyk7XG5yZXF1aXJlKCcuL3BvbHlmaWxscy9mcm9tY29kZXBvaW50Jyk7XG5cbi8qKlxuICogSWYgZGVjb2RlVG9Vbmljb2RlQ29kZVBvaW50cyBpcyB0cnVlLCB0aGUgaW5wdXQgaXMgdHJlYXRlZFxuICogYXMgYSBzZXJpZXMgb2YgVW5pY29kZSBjb2RlIHBvaW50cy5cbiAqXG4gKiBPdGhlcndpc2UsIHRoZSBpbnB1dCBpcyB0cmVhdGVkIGFzIGEgc2VyaWVzIG9mIDE2LWJpdCBVVEYtMTYgY29kZVxuICogdW5pdHMuXG4gKi9cbmNsYXNzIElucHV0U3RyZWFtIHtcblx0Y29uc3RydWN0b3IoZGF0YSwgZGVjb2RlVG9Vbmljb2RlQ29kZVBvaW50cykge1xuXHRcdHRoaXMubmFtZSA9IFwiPGVtcHR5PlwiO1xuXHRcdHRoaXMuc3RyZGF0YSA9IGRhdGE7XG5cdFx0dGhpcy5kZWNvZGVUb1VuaWNvZGVDb2RlUG9pbnRzID0gZGVjb2RlVG9Vbmljb2RlQ29kZVBvaW50cyB8fCBmYWxzZTtcblx0XHQvLyBfbG9hZFN0cmluZyAtIFZhY3V1bSBhbGwgaW5wdXQgZnJvbSBhIHN0cmluZyBhbmQgdGhlbiB0cmVhdCBpdCBsaWtlIGEgYnVmZmVyLlxuXHRcdHRoaXMuX2luZGV4ID0gMDtcblx0XHR0aGlzLmRhdGEgPSBbXTtcblx0XHRpZiAodGhpcy5kZWNvZGVUb1VuaWNvZGVDb2RlUG9pbnRzKSB7XG5cdFx0XHRmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuc3RyZGF0YS5sZW5ndGg7ICkge1xuXHRcdFx0XHRjb25zdCBjb2RlUG9pbnQgPSB0aGlzLnN0cmRhdGEuY29kZVBvaW50QXQoaSk7XG5cdFx0XHRcdHRoaXMuZGF0YS5wdXNoKGNvZGVQb2ludCk7XG5cdFx0XHRcdGkgKz0gY29kZVBvaW50IDw9IDB4RkZGRiA/IDEgOiAyO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aGlzLmRhdGEgPSBuZXcgQXJyYXkodGhpcy5zdHJkYXRhLmxlbmd0aCk7XG5cdFx0XHRmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuc3RyZGF0YS5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRjb25zdCBjb2RlVW5pdCA9IHRoaXMuc3RyZGF0YS5jaGFyQ29kZUF0KGkpO1xuXHRcdFx0XHR0aGlzLmRhdGFbaV0gPSBjb2RlVW5pdDtcblx0XHRcdH1cblx0XHR9XG5cdFx0dGhpcy5fc2l6ZSA9IHRoaXMuZGF0YS5sZW5ndGg7XG5cdH1cblxuXHQvKipcblx0ICogUmVzZXQgdGhlIHN0cmVhbSBzbyB0aGF0IGl0J3MgaW4gdGhlIHNhbWUgc3RhdGUgaXQgd2FzXG5cdCAqIHdoZW4gdGhlIG9iamVjdCB3YXMgY3JlYXRlZCAqZXhjZXB0KiB0aGUgZGF0YSBhcnJheSBpcyBub3Rcblx0ICogdG91Y2hlZC5cblx0ICovXG5cdHJlc2V0KCkge1xuXHRcdHRoaXMuX2luZGV4ID0gMDtcblx0fVxuXG5cdGNvbnN1bWUoKSB7XG5cdFx0aWYgKHRoaXMuX2luZGV4ID49IHRoaXMuX3NpemUpIHtcblx0XHRcdC8vIGFzc2VydCB0aGlzLkxBKDEpID09IFRva2VuLkVPRlxuXHRcdFx0dGhyb3cgKFwiY2Fubm90IGNvbnN1bWUgRU9GXCIpO1xuXHRcdH1cblx0XHR0aGlzLl9pbmRleCArPSAxO1xuXHR9XG5cblx0TEEob2Zmc2V0KSB7XG5cdFx0aWYgKG9mZnNldCA9PT0gMCkge1xuXHRcdFx0cmV0dXJuIDA7IC8vIHVuZGVmaW5lZFxuXHRcdH1cblx0XHRpZiAob2Zmc2V0IDwgMCkge1xuXHRcdFx0b2Zmc2V0ICs9IDE7IC8vIGUuZy4sIHRyYW5zbGF0ZSBMQSgtMSkgdG8gdXNlIG9mZnNldD0wXG5cdFx0fVxuXHRcdGNvbnN0IHBvcyA9IHRoaXMuX2luZGV4ICsgb2Zmc2V0IC0gMTtcblx0XHRpZiAocG9zIDwgMCB8fCBwb3MgPj0gdGhpcy5fc2l6ZSkgeyAvLyBpbnZhbGlkXG5cdFx0XHRyZXR1cm4gVG9rZW4uRU9GO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcy5kYXRhW3Bvc107XG5cdH1cblxuXHRMVChvZmZzZXQpIHtcblx0XHRyZXR1cm4gdGhpcy5MQShvZmZzZXQpO1xuXHR9XG5cbi8vIG1hcmsvcmVsZWFzZSBkbyBub3RoaW5nOyB3ZSBoYXZlIGVudGlyZSBidWZmZXJcblx0bWFyaygpIHtcblx0XHRyZXR1cm4gLTE7XG5cdH1cblxuXHRyZWxlYXNlKG1hcmtlcikge1xuXHR9XG5cblx0LyoqXG5cdCAqIGNvbnN1bWUoKSBhaGVhZCB1bnRpbCBwPT1faW5kZXg7IGNhbid0IGp1c3Qgc2V0IHA9X2luZGV4IGFzIHdlIG11c3Rcblx0ICogdXBkYXRlIGxpbmUgYW5kIGNvbHVtbi4gSWYgd2Ugc2VlayBiYWNrd2FyZHMsIGp1c3Qgc2V0IHBcblx0ICovXG5cdHNlZWsoX2luZGV4KSB7XG5cdFx0aWYgKF9pbmRleCA8PSB0aGlzLl9pbmRleCkge1xuXHRcdFx0dGhpcy5faW5kZXggPSBfaW5kZXg7IC8vIGp1c3QganVtcDsgZG9uJ3QgdXBkYXRlIHN0cmVhbSBzdGF0ZSAobGluZSxcblx0XHRcdFx0XHRcdFx0XHRcdC8vIC4uLilcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0Ly8gc2VlayBmb3J3YXJkXG5cdFx0dGhpcy5faW5kZXggPSBNYXRoLm1pbihfaW5kZXgsIHRoaXMuX3NpemUpO1xuXHR9XG5cblx0Z2V0VGV4dChzdGFydCwgc3RvcCkge1xuXHRcdGlmIChzdG9wID49IHRoaXMuX3NpemUpIHtcblx0XHRcdHN0b3AgPSB0aGlzLl9zaXplIC0gMTtcblx0XHR9XG5cdFx0aWYgKHN0YXJ0ID49IHRoaXMuX3NpemUpIHtcblx0XHRcdHJldHVybiBcIlwiO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRpZiAodGhpcy5kZWNvZGVUb1VuaWNvZGVDb2RlUG9pbnRzKSB7XG5cdFx0XHRcdGxldCByZXN1bHQgPSBcIlwiO1xuXHRcdFx0XHRmb3IgKGxldCBpID0gc3RhcnQ7IGkgPD0gc3RvcDsgaSsrKSB7XG5cdFx0XHRcdFx0cmVzdWx0ICs9IFN0cmluZy5mcm9tQ29kZVBvaW50KHRoaXMuZGF0YVtpXSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHJlc3VsdDtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHJldHVybiB0aGlzLnN0cmRhdGEuc2xpY2Uoc3RhcnQsIHN0b3AgKyAxKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHR0b1N0cmluZygpIHtcblx0XHRyZXR1cm4gdGhpcy5zdHJkYXRhO1xuXHR9XG5cblx0Z2V0IGluZGV4KCl7XG5cdFx0cmV0dXJuIHRoaXMuX2luZGV4O1xuXHR9XG5cblx0Z2V0IHNpemUoKXtcblx0XHRyZXR1cm4gdGhpcy5fc2l6ZTtcblx0fVxufVxuXG5cbm1vZHVsZS5leHBvcnRzID0gSW5wdXRTdHJlYW07XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/InputStream.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/IntervalSet.js":
/*!****************************************************************************************!*\
  !*** ../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/IntervalSet.js ***!
  \****************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nconst {Token} = __webpack_require__(/*! ./Token */ \"(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/Token.js\");\n\n/* stop is not included! */\nclass Interval {\n\n\tconstructor(start, stop) {\n\t\tthis.start = start;\n\t\tthis.stop = stop;\n\t}\n\n\tclone() {\n\t\treturn new Interval(this.start, this.stop);\n\t}\n\n\tcontains(item) {\n\t\treturn item >= this.start && item < this.stop;\n\t}\n\n\ttoString() {\n\t\tif(this.start===this.stop-1) {\n\t\t\treturn this.start.toString();\n\t\t} else {\n\t\t\treturn this.start.toString() + \"..\" + (this.stop-1).toString();\n\t\t}\n\t}\n\n\tget length(){\n\t\treturn this.stop - this.start;\n\t}\n}\n\n\nclass IntervalSet {\n\tconstructor() {\n\t\tthis.intervals = null;\n\t\tthis.readOnly = false;\n\t}\n\n\tfirst(v) {\n\t\tif (this.intervals === null || this.intervals.length===0) {\n\t\t\treturn Token.INVALID_TYPE;\n\t\t} else {\n\t\t\treturn this.intervals[0].start;\n\t\t}\n\t}\n\n\taddOne(v) {\n\t\tthis.addInterval(new Interval(v, v + 1));\n\t}\n\n\taddRange(l, h) {\n\t\tthis.addInterval(new Interval(l, h + 1));\n\t}\n\n\taddInterval(toAdd) {\n\t\tif (this.intervals === null) {\n\t\t\tthis.intervals = [];\n\t\t\tthis.intervals.push(toAdd.clone());\n\t\t} else {\n\t\t\t// find insert pos\n\t\t\tfor (let pos = 0; pos < this.intervals.length; pos++) {\n\t\t\t\tconst existing = this.intervals[pos];\n\t\t\t\t// distinct range -> insert\n\t\t\t\tif (toAdd.stop < existing.start) {\n\t\t\t\t\tthis.intervals.splice(pos, 0, toAdd);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t// contiguous range -> adjust\n\t\t\t\telse if (toAdd.stop === existing.start) {\n\t\t\t\t\tthis.intervals[pos] = new Interval(toAdd.start, existing.stop)\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t// overlapping range -> adjust and reduce\n\t\t\t\telse if (toAdd.start <= existing.stop) {\n\t\t\t\t\tthis.intervals[pos] = new Interval(Math.min(existing.start, toAdd.start), Math.max(existing.stop, toAdd.stop));\n\t\t\t\t\tthis.reduce(pos);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// greater than any existing\n\t\t\tthis.intervals.push(toAdd.clone());\n\t\t}\n\t}\n\n\taddSet(other) {\n\t\tif (other.intervals !== null) {\n\t\t\tother.intervals.forEach( toAdd => this.addInterval(toAdd), this);\n\t\t}\n\t\treturn this;\n\t}\n\n\treduce(pos) {\n\t\t// only need to reduce if pos is not the last\n\t\tif (pos < this.intervals.length - 1) {\n\t\t\tconst current = this.intervals[pos];\n\t\t\tconst next = this.intervals[pos + 1];\n\t\t\t// if next contained in current\n\t\t\tif (current.stop >= next.stop) {\n\t\t\t\tthis.intervals.splice(pos + 1, 1);\n\t\t\t\tthis.reduce(pos);\n\t\t\t} else if (current.stop >= next.start) {\n\t\t\t\tthis.intervals[pos] = new Interval(current.start, next.stop);\n\t\t\t\tthis.intervals.splice(pos + 1, 1);\n\t\t\t}\n\t\t}\n\t}\n\n\tcomplement(start, stop) {\n\t\tconst result = new IntervalSet();\n\t\tresult.addInterval(new Interval(start, stop + 1));\n\t\tif(this.intervals !== null)\n\t\t\tthis.intervals.forEach(toRemove => result.removeRange(toRemove));\n\t\treturn result;\n\t}\n\n\tcontains(item) {\n\t\tif (this.intervals === null) {\n\t\t\treturn false;\n\t\t} else {\n\t\t\tfor (let k = 0; k < this.intervals.length; k++) {\n\t\t\t\tif(this.intervals[k].contains(item)) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tremoveRange(toRemove) {\n\t\tif(toRemove.start===toRemove.stop-1) {\n\t\t\tthis.removeOne(toRemove.start);\n\t\t} else if (this.intervals !== null) {\n\t\t\tlet pos = 0;\n\t\t\tfor(let n=0; n<this.intervals.length; n++) {\n\t\t\t\tconst existing = this.intervals[pos];\n\t\t\t\t// intervals are ordered\n\t\t\t\tif (toRemove.stop<=existing.start) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t// check for including range, split it\n\t\t\t\telse if(toRemove.start>existing.start && toRemove.stop<existing.stop) {\n\t\t\t\t\tthis.intervals[pos] = new Interval(existing.start, toRemove.start);\n\t\t\t\t\tconst x = new Interval(toRemove.stop, existing.stop);\n\t\t\t\t\tthis.intervals.splice(pos, 0, x);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t// check for included range, remove it\n\t\t\t\telse if(toRemove.start<=existing.start && toRemove.stop>=existing.stop) {\n\t\t\t\t\tthis.intervals.splice(pos, 1);\n\t\t\t\t\tpos = pos - 1; // need another pass\n\t\t\t\t}\n\t\t\t\t// check for lower boundary\n\t\t\t\telse if(toRemove.start<existing.stop) {\n\t\t\t\t\tthis.intervals[pos] = new Interval(existing.start, toRemove.start);\n\t\t\t\t}\n\t\t\t\t// check for upper boundary\n\t\t\t\telse if(toRemove.stop<existing.stop) {\n\t\t\t\t\tthis.intervals[pos] = new Interval(toRemove.stop, existing.stop);\n\t\t\t\t}\n\t\t\t\tpos += 1;\n\t\t\t}\n\t\t}\n\t}\n\n\tremoveOne(value) {\n\t\tif (this.intervals !== null) {\n\t\t\tfor (let i = 0; i < this.intervals.length; i++) {\n\t\t\t\tconst existing = this.intervals[i];\n\t\t\t\t// intervals are ordered\n\t\t\t\tif (value < existing.start) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t// check for single value range\n\t\t\t\telse if (value === existing.start && value === existing.stop - 1) {\n\t\t\t\t\tthis.intervals.splice(i, 1);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t// check for lower boundary\n\t\t\t\telse if (value === existing.start) {\n\t\t\t\t\tthis.intervals[i] = new Interval(existing.start + 1, existing.stop);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t// check for upper boundary\n\t\t\t\telse if (value === existing.stop - 1) {\n\t\t\t\t\tthis.intervals[i] = new Interval(existing.start, existing.stop - 1);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t// split existing range\n\t\t\t\telse if (value < existing.stop - 1) {\n\t\t\t\t\tconst replace = new Interval(existing.start, value);\n\t\t\t\t\texisting.start = value + 1;\n\t\t\t\t\tthis.intervals.splice(i, 0, replace);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\ttoString(literalNames, symbolicNames, elemsAreChar) {\n\t\tliteralNames = literalNames || null;\n\t\tsymbolicNames = symbolicNames || null;\n\t\telemsAreChar = elemsAreChar || false;\n\t\tif (this.intervals === null) {\n\t\t\treturn \"{}\";\n\t\t} else if(literalNames!==null || symbolicNames!==null) {\n\t\t\treturn this.toTokenString(literalNames, symbolicNames);\n\t\t} else if(elemsAreChar) {\n\t\t\treturn this.toCharString();\n\t\t} else {\n\t\t\treturn this.toIndexString();\n\t\t}\n\t}\n\n\ttoCharString() {\n\t\tconst names = [];\n\t\tfor (let i = 0; i < this.intervals.length; i++) {\n\t\t\tconst existing = this.intervals[i];\n\t\t\tif(existing.stop===existing.start+1) {\n\t\t\t\tif ( existing.start===Token.EOF ) {\n\t\t\t\t\tnames.push(\"<EOF>\");\n\t\t\t\t} else {\n\t\t\t\t\tnames.push(\"'\" + String.fromCharCode(existing.start) + \"'\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tnames.push(\"'\" + String.fromCharCode(existing.start) + \"'..'\" + String.fromCharCode(existing.stop-1) + \"'\");\n\t\t\t}\n\t\t}\n\t\tif (names.length > 1) {\n\t\t\treturn \"{\" + names.join(\", \") + \"}\";\n\t\t} else {\n\t\t\treturn names[0];\n\t\t}\n\t}\n\n\ttoIndexString() {\n\t\tconst names = [];\n\t\tfor (let i = 0; i < this.intervals.length; i++) {\n\t\t\tconst existing = this.intervals[i];\n\t\t\tif(existing.stop===existing.start+1) {\n\t\t\t\tif ( existing.start===Token.EOF ) {\n\t\t\t\t\tnames.push(\"<EOF>\");\n\t\t\t\t} else {\n\t\t\t\t\tnames.push(existing.start.toString());\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tnames.push(existing.start.toString() + \"..\" + (existing.stop-1).toString());\n\t\t\t}\n\t\t}\n\t\tif (names.length > 1) {\n\t\t\treturn \"{\" + names.join(\", \") + \"}\";\n\t\t} else {\n\t\t\treturn names[0];\n\t\t}\n\t}\n\n\ttoTokenString(literalNames, symbolicNames) {\n\t\tconst names = [];\n\t\tfor (let i = 0; i < this.intervals.length; i++) {\n\t\t\tconst existing = this.intervals[i];\n\t\t\tfor (let j = existing.start; j < existing.stop; j++) {\n\t\t\t\tnames.push(this.elementName(literalNames, symbolicNames, j));\n\t\t\t}\n\t\t}\n\t\tif (names.length > 1) {\n\t\t\treturn \"{\" + names.join(\", \") + \"}\";\n\t\t} else {\n\t\t\treturn names[0];\n\t\t}\n\t}\n\n\telementName(literalNames, symbolicNames, token) {\n\t\tif (token === Token.EOF) {\n\t\t\treturn \"<EOF>\";\n\t\t} else if (token === Token.EPSILON) {\n\t\t\treturn \"<EPSILON>\";\n\t\t} else {\n\t\t\treturn literalNames[token] || symbolicNames[token];\n\t\t}\n\t}\n\n\tget length(){\n\t\treturn this.intervals.map( interval => interval.length ).reduce((acc, val) => acc + val);\n\t}\n}\n\nmodule.exports = {\n\tInterval,\n\tIntervalSet\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/IntervalSet.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/LL1Analyzer.js":
/*!****************************************************************************************!*\
  !*** ../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/LL1Analyzer.js ***!
  \****************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nconst {Set, BitSet} = __webpack_require__(/*! ./Utils */ \"(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/Utils.js\");\nconst {Token} = __webpack_require__(/*! ./Token */ \"(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/Token.js\");\nconst {ATNConfig} = __webpack_require__(/*! ./atn/ATNConfig */ \"(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/atn/ATNConfig.js\");\nconst {IntervalSet} = __webpack_require__(/*! ./IntervalSet */ \"(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/IntervalSet.js\");\nconst {RuleStopState} = __webpack_require__(/*! ./atn/ATNState */ \"(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/atn/ATNState.js\");\nconst {RuleTransition, NotSetTransition, WildcardTransition, AbstractPredicateTransition} = __webpack_require__(/*! ./atn/Transition */ \"(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/atn/Transition.js\");\nconst {predictionContextFromRuleContext, PredictionContext, SingletonPredictionContext} = __webpack_require__(/*! ./PredictionContext */ \"(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/PredictionContext.js\");\n\nclass LL1Analyzer {\n    constructor(atn) {\n        this.atn = atn;\n    }\n\n    /**\n     * Calculates the SLL(1) expected lookahead set for each outgoing transition\n     * of an {@link ATNState}. The returned array has one element for each\n     * outgoing transition in {@code s}. If the closure from transition\n     * <em>i</em> leads to a semantic predicate before matching a symbol, the\n     * element at index <em>i</em> of the result will be {@code null}.\n     *\n     * @param s the ATN state\n     * @return the expected symbols for each outgoing transition of {@code s}.\n     */\n    getDecisionLookahead(s) {\n        if (s === null) {\n            return null;\n        }\n        const count = s.transitions.length;\n        const look = [];\n        for(let alt=0; alt< count; alt++) {\n            look[alt] = new IntervalSet();\n            const lookBusy = new Set();\n            const seeThruPreds = false; // fail to get lookahead upon pred\n            this._LOOK(s.transition(alt).target, null, PredictionContext.EMPTY,\n                  look[alt], lookBusy, new BitSet(), seeThruPreds, false);\n            // Wipe out lookahead for this alternative if we found nothing\n            // or we had a predicate when we !seeThruPreds\n            if (look[alt].length===0 || look[alt].contains(LL1Analyzer.HIT_PRED)) {\n                look[alt] = null;\n            }\n        }\n        return look;\n    }\n\n    /**\n     * Compute set of tokens that can follow {@code s} in the ATN in the\n     * specified {@code ctx}.\n     *\n     * <p>If {@code ctx} is {@code null} and the end of the rule containing\n     * {@code s} is reached, {@link Token//EPSILON} is added to the result set.\n     * If {@code ctx} is not {@code null} and the end of the outermost rule is\n     * reached, {@link Token//EOF} is added to the result set.</p>\n     *\n     * @param s the ATN state\n     * @param stopState the ATN state to stop at. This can be a\n     * {@link BlockEndState} to detect epsilon paths through a closure.\n     * @param ctx the complete parser context, or {@code null} if the context\n     * should be ignored\n     *\n     * @return The set of tokens that can follow {@code s} in the ATN in the\n     * specified {@code ctx}.\n     */\n    LOOK(s, stopState, ctx) {\n        const r = new IntervalSet();\n        const seeThruPreds = true; // ignore preds; get all lookahead\n        ctx = ctx || null;\n        const lookContext = ctx!==null ? predictionContextFromRuleContext(s.atn, ctx) : null;\n        this._LOOK(s, stopState, lookContext, r, new Set(), new BitSet(), seeThruPreds, true);\n        return r;\n    }\n\n    /**\n     * Compute set of tokens that can follow {@code s} in the ATN in the\n     * specified {@code ctx}.\n     *\n     * <p>If {@code ctx} is {@code null} and {@code stopState} or the end of the\n     * rule containing {@code s} is reached, {@link Token//EPSILON} is added to\n     * the result set. If {@code ctx} is not {@code null} and {@code addEOF} is\n     * {@code true} and {@code stopState} or the end of the outermost rule is\n     * reached, {@link Token//EOF} is added to the result set.</p>\n     *\n     * @param s the ATN state.\n     * @param stopState the ATN state to stop at. This can be a\n     * {@link BlockEndState} to detect epsilon paths through a closure.\n     * @param ctx The outer context, or {@code null} if the outer context should\n     * not be used.\n     * @param look The result lookahead set.\n     * @param lookBusy A set used for preventing epsilon closures in the ATN\n     * from causing a stack overflow. Outside code should pass\n     * {@code new Set<ATNConfig>} for this argument.\n     * @param calledRuleStack A set used for preventing left recursion in the\n     * ATN from causing a stack overflow. Outside code should pass\n     * {@code new BitSet()} for this argument.\n     * @param seeThruPreds {@code true} to true semantic predicates as\n     * implicitly {@code true} and \"see through them\", otherwise {@code false}\n     * to treat semantic predicates as opaque and add {@link //HIT_PRED} to the\n     * result if one is encountered.\n     * @param addEOF Add {@link Token//EOF} to the result if the end of the\n     * outermost context is reached. This parameter has no effect if {@code ctx}\n     * is {@code null}.\n     */\n    _LOOK(s, stopState , ctx, look, lookBusy, calledRuleStack, seeThruPreds, addEOF) {\n        const c = new ATNConfig({state:s, alt:0, context: ctx}, null);\n        if (lookBusy.contains(c)) {\n            return;\n        }\n        lookBusy.add(c);\n        if (s === stopState) {\n            if (ctx ===null) {\n                look.addOne(Token.EPSILON);\n                return;\n            } else if (ctx.isEmpty() && addEOF) {\n                look.addOne(Token.EOF);\n                return;\n            }\n        }\n        if (s instanceof RuleStopState ) {\n            if (ctx ===null) {\n                look.addOne(Token.EPSILON);\n                return;\n            } else if (ctx.isEmpty() && addEOF) {\n                look.addOne(Token.EOF);\n                return;\n            }\n            if (ctx !== PredictionContext.EMPTY) {\n                const removed = calledRuleStack.contains(s.ruleIndex);\n                try {\n                    calledRuleStack.remove(s.ruleIndex);\n                    // run thru all possible stack tops in ctx\n                    for (let i = 0; i < ctx.length; i++) {\n                        const returnState = this.atn.states[ctx.getReturnState(i)];\n                        this._LOOK(returnState, stopState, ctx.getParent(i), look, lookBusy, calledRuleStack, seeThruPreds, addEOF);\n                    }\n                }finally {\n                    if (removed) {\n                        calledRuleStack.add(s.ruleIndex);\n                    }\n                }\n                return;\n            }\n        }\n        for(let j=0; j<s.transitions.length; j++) {\n            const t = s.transitions[j];\n            if (t.constructor === RuleTransition) {\n                if (calledRuleStack.contains(t.target.ruleIndex)) {\n                    continue;\n                }\n                const newContext = SingletonPredictionContext.create(ctx, t.followState.stateNumber);\n                try {\n                    calledRuleStack.add(t.target.ruleIndex);\n                    this._LOOK(t.target, stopState, newContext, look, lookBusy, calledRuleStack, seeThruPreds, addEOF);\n                } finally {\n                    calledRuleStack.remove(t.target.ruleIndex);\n                }\n            } else if (t instanceof AbstractPredicateTransition ) {\n                if (seeThruPreds) {\n                    this._LOOK(t.target, stopState, ctx, look, lookBusy, calledRuleStack, seeThruPreds, addEOF);\n                } else {\n                    look.addOne(LL1Analyzer.HIT_PRED);\n                }\n            } else if( t.isEpsilon) {\n                this._LOOK(t.target, stopState, ctx, look, lookBusy, calledRuleStack, seeThruPreds, addEOF);\n            } else if (t.constructor === WildcardTransition) {\n                look.addRange( Token.MIN_USER_TOKEN_TYPE, this.atn.maxTokenType );\n            } else {\n                let set = t.label;\n                if (set !== null) {\n                    if (t instanceof NotSetTransition) {\n                        set = set.complement(Token.MIN_USER_TOKEN_TYPE, this.atn.maxTokenType);\n                    }\n                    look.addSet(set);\n                }\n            }\n        }\n    }\n}\n\n/**\n * Special value added to the lookahead sets to indicate that we hit\n * a predicate during analysis if {@code seeThruPreds==false}.\n */\nLL1Analyzer.HIT_PRED = Token.INVALID_TYPE;\n\nmodule.exports = LL1Analyzer;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/LL1Analyzer.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/Lexer.js":
/*!**********************************************************************************!*\
  !*** ../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/Lexer.js ***!
  \**********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nconst {Token} = __webpack_require__(/*! ./Token */ \"(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/Token.js\");\nconst Recognizer = __webpack_require__(/*! ./Recognizer */ \"(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/Recognizer.js\");\nconst CommonTokenFactory = __webpack_require__(/*! ./CommonTokenFactory */ \"(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/CommonTokenFactory.js\");\nconst {RecognitionException} = __webpack_require__(/*! ./error/Errors */ \"(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/error/Errors.js\");\nconst {LexerNoViableAltException} = __webpack_require__(/*! ./error/Errors */ \"(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/error/Errors.js\");\n\nclass TokenSource {}\n\n/**\n * A lexer is recognizer that draws input symbols from a character stream.\n * lexer grammars result in a subclass of this object. A Lexer object\n * uses simplified match() and error recovery mechanisms in the interest of speed.\n */\nclass Lexer extends Recognizer {\n\tconstructor(input) {\n\t\tsuper();\n\t\tthis._input = input;\n\t\tthis._factory = CommonTokenFactory.DEFAULT;\n\t\tthis._tokenFactorySourcePair = [ this, input ];\n\n\t\tthis._interp = null; // child classes must populate this\n\n\t\t/**\n\t\t * The goal of all lexer rules/methods is to create a token object.\n\t\t * this is an instance variable as multiple rules may collaborate to\n\t\t * create a single token. nextToken will return this object after\n\t\t * matching lexer rule(s). If you subclass to allow multiple token\n\t\t * emissions, then set this to the last token to be matched or\n\t\t * something nonnull so that the auto token emit mechanism will not\n\t\t * emit another token.\n\t\t */\n\t\tthis._token = null;\n\n\t\t/**\n\t\t * What character index in the stream did the current token start at?\n\t\t * Needed, for example, to get the text for current token. Set at\n\t\t * the start of nextToken.\n\t\t */\n\t\tthis._tokenStartCharIndex = -1;\n\n\t\t// The line on which the first character of the token resides///\n\t\tthis._tokenStartLine = -1;\n\n\t\t// The character position of first character within the line///\n\t\tthis._tokenStartColumn = -1;\n\n\t\t// Once we see EOF on char stream, next token will be EOF.\n\t\t// If you have DONE : EOF ; then you see DONE EOF.\n\t\tthis._hitEOF = false;\n\n\t\t// The channel number for the current token///\n\t\tthis._channel = Token.DEFAULT_CHANNEL;\n\n\t\t// The token type for the current token///\n\t\tthis._type = Token.INVALID_TYPE;\n\n\t\tthis._modeStack = [];\n\t\tthis._mode = Lexer.DEFAULT_MODE;\n\n\t\t/**\n\t\t * You can set the text for the current token to override what is in\n\t\t * the input char buffer. Use setText() or can set this instance var.\n\t\t */\n\t\tthis._text = null;\n\t}\n\n\treset() {\n\t\t// wack Lexer state variables\n\t\tif (this._input !== null) {\n\t\t\tthis._input.seek(0); // rewind the input\n\t\t}\n\t\tthis._token = null;\n\t\tthis._type = Token.INVALID_TYPE;\n\t\tthis._channel = Token.DEFAULT_CHANNEL;\n\t\tthis._tokenStartCharIndex = -1;\n\t\tthis._tokenStartColumn = -1;\n\t\tthis._tokenStartLine = -1;\n\t\tthis._text = null;\n\n\t\tthis._hitEOF = false;\n\t\tthis._mode = Lexer.DEFAULT_MODE;\n\t\tthis._modeStack = [];\n\n\t\tthis._interp.reset();\n\t}\n\n// Return a token from this source; i.e., match a token on the char stream.\n\tnextToken() {\n\t\tif (this._input === null) {\n\t\t\tthrow \"nextToken requires a non-null input stream.\";\n\t\t}\n\n\t\t/**\n\t\t * Mark start location in char stream so unbuffered streams are\n\t\t * guaranteed at least have text of current token\n\t\t */\n\t\tconst tokenStartMarker = this._input.mark();\n\t\ttry {\n\t\t\twhile (true) {\n\t\t\t\tif (this._hitEOF) {\n\t\t\t\t\tthis.emitEOF();\n\t\t\t\t\treturn this._token;\n\t\t\t\t}\n\t\t\t\tthis._token = null;\n\t\t\t\tthis._channel = Token.DEFAULT_CHANNEL;\n\t\t\t\tthis._tokenStartCharIndex = this._input.index;\n\t\t\t\tthis._tokenStartColumn = this._interp.column;\n\t\t\t\tthis._tokenStartLine = this._interp.line;\n\t\t\t\tthis._text = null;\n\t\t\t\tlet continueOuter = false;\n\t\t\t\twhile (true) {\n\t\t\t\t\tthis._type = Token.INVALID_TYPE;\n\t\t\t\t\tlet ttype = Lexer.SKIP;\n\t\t\t\t\ttry {\n\t\t\t\t\t\tttype = this._interp.match(this._input, this._mode);\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tif(e instanceof RecognitionException) {\n\t\t\t\t\t\t\tthis.notifyListeners(e); // report error\n\t\t\t\t\t\t\tthis.recover(e);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconsole.log(e.stack);\n\t\t\t\t\t\t\tthrow e;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (this._input.LA(1) === Token.EOF) {\n\t\t\t\t\t\tthis._hitEOF = true;\n\t\t\t\t\t}\n\t\t\t\t\tif (this._type === Token.INVALID_TYPE) {\n\t\t\t\t\t\tthis._type = ttype;\n\t\t\t\t\t}\n\t\t\t\t\tif (this._type === Lexer.SKIP) {\n\t\t\t\t\t\tcontinueOuter = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tif (this._type !== Lexer.MORE) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (continueOuter) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif (this._token === null) {\n\t\t\t\t\tthis.emit();\n\t\t\t\t}\n\t\t\t\treturn this._token;\n\t\t\t}\n\t\t} finally {\n\t\t\t// make sure we release marker after match or\n\t\t\t// unbuffered char stream will keep buffering\n\t\t\tthis._input.release(tokenStartMarker);\n\t\t}\n\t}\n\n\t/**\n\t * Instruct the lexer to skip creating a token for current lexer rule\n\t * and look for another token. nextToken() knows to keep looking when\n\t * a lexer rule finishes with token set to SKIP_TOKEN. Recall that\n\t * if token==null at end of any token rule, it creates one for you\n\t * and emits it.\n\t */\n\tskip() {\n\t\tthis._type = Lexer.SKIP;\n\t}\n\n\tmore() {\n\t\tthis._type = Lexer.MORE;\n\t}\n\n\tmode(m) {\n\t\tthis._mode = m;\n\t}\n\n\tpushMode(m) {\n\t\tif (this._interp.debug) {\n\t\t\tconsole.log(\"pushMode \" + m);\n\t\t}\n\t\tthis._modeStack.push(this._mode);\n\t\tthis.mode(m);\n\t}\n\n\tpopMode() {\n\t\tif (this._modeStack.length === 0) {\n\t\t\tthrow \"Empty Stack\";\n\t\t}\n\t\tif (this._interp.debug) {\n\t\t\tconsole.log(\"popMode back to \" + this._modeStack.slice(0, -1));\n\t\t}\n\t\tthis.mode(this._modeStack.pop());\n\t\treturn this._mode;\n\t}\n\n\t/**\n\t * By default does not support multiple emits per nextToken invocation\n\t * for efficiency reasons. Subclass and override this method, nextToken,\n\t * and getToken (to push tokens into a list and pull from that list\n\t * rather than a single variable as this implementation does).\n\t */\n\temitToken(token) {\n\t\tthis._token = token;\n\t}\n\n\t/**\n\t * The standard method called to automatically emit a token at the\n\t * outermost lexical rule. The token object should point into the\n\t * char buffer start..stop. If there is a text override in 'text',\n\t * use that to set the token's text. Override this method to emit\n\t * custom Token objects or provide a new factory.\n\t */\n\temit() {\n\t\tconst t = this._factory.create(this._tokenFactorySourcePair, this._type,\n\t\t\t\tthis._text, this._channel, this._tokenStartCharIndex, this\n\t\t\t\t\t\t.getCharIndex() - 1, this._tokenStartLine,\n\t\t\t\tthis._tokenStartColumn);\n\t\tthis.emitToken(t);\n\t\treturn t;\n\t}\n\n\temitEOF() {\n\t\tconst cpos = this.column;\n\t\tconst lpos = this.line;\n\t\tconst eof = this._factory.create(this._tokenFactorySourcePair, Token.EOF,\n\t\t\t\tnull, Token.DEFAULT_CHANNEL, this._input.index,\n\t\t\t\tthis._input.index - 1, lpos, cpos);\n\t\tthis.emitToken(eof);\n\t\treturn eof;\n\t}\n\n// What is the index of the current character of lookahead?///\n\tgetCharIndex() {\n\t\treturn this._input.index;\n\t}\n\n\t/**\n\t * Return a list of all Token objects in input char stream.\n\t * Forces load of all tokens. Does not include EOF token.\n\t */\n\tgetAllTokens() {\n\t\tconst tokens = [];\n\t\tlet t = this.nextToken();\n\t\twhile (t.type !== Token.EOF) {\n\t\t\ttokens.push(t);\n\t\t\tt = this.nextToken();\n\t\t}\n\t\treturn tokens;\n\t}\n\n\tnotifyListeners(e) {\n\t\tconst start = this._tokenStartCharIndex;\n\t\tconst stop = this._input.index;\n\t\tconst text = this._input.getText(start, stop);\n\t\tconst msg = \"token recognition error at: '\" + this.getErrorDisplay(text) + \"'\";\n\t\tconst listener = this.getErrorListenerDispatch();\n\t\tlistener.syntaxError(this, null, this._tokenStartLine,\n\t\t\t\tthis._tokenStartColumn, msg, e);\n\t}\n\n\tgetErrorDisplay(s) {\n\t\tconst d = [];\n\t\tfor (let i = 0; i < s.length; i++) {\n\t\t\td.push(s[i]);\n\t\t}\n\t\treturn d.join('');\n\t}\n\n\tgetErrorDisplayForChar(c) {\n\t\tif (c.charCodeAt(0) === Token.EOF) {\n\t\t\treturn \"<EOF>\";\n\t\t} else if (c === '\\n') {\n\t\t\treturn \"\\\\n\";\n\t\t} else if (c === '\\t') {\n\t\t\treturn \"\\\\t\";\n\t\t} else if (c === '\\r') {\n\t\t\treturn \"\\\\r\";\n\t\t} else {\n\t\t\treturn c;\n\t\t}\n\t}\n\n\tgetCharErrorDisplay(c) {\n\t\treturn \"'\" + this.getErrorDisplayForChar(c) + \"'\";\n\t}\n\n\t/**\n\t * Lexers can normally match any char in it's vocabulary after matching\n\t * a token, so do the easy thing and just kill a character and hope\n\t * it all works out. You can instead use the rule invocation stack\n\t * to do sophisticated error recovery if you are in a fragment rule.\n\t */\n\trecover(re) {\n\t\tif (this._input.LA(1) !== Token.EOF) {\n\t\t\tif (re instanceof LexerNoViableAltException) {\n\t\t\t\t// skip a char and try again\n\t\t\t\tthis._interp.consume(this._input);\n\t\t\t} else {\n\t\t\t\t// TODO: Do we lose character or line position information?\n\t\t\t\tthis._input.consume();\n\t\t\t}\n\t\t}\n\t}\n\n\tget inputStream(){\n\t\treturn this._input;\n\t}\n\n\tset inputStream(input) {\n\t\tthis._input = null;\n\t\tthis._tokenFactorySourcePair = [ this, this._input ];\n\t\tthis.reset();\n\t\tthis._input = input;\n\t\tthis._tokenFactorySourcePair = [ this, this._input ];\n\t}\n\n\tget sourceName(){\n\t\treturn this._input.sourceName;\n\t}\n\n\tget type(){\n\t\treturn this._type;\n\t}\n\n\tset type(type) {\n\t\tthis._type = type;\n\t}\n\n\tget line(){\n\t\treturn this._interp.line;\n\t}\n\n\tset line(line) {\n\t\tthis._interp.line = line;\n\t}\n\n\tget column(){\n\t\treturn this._interp.column;\n\t}\n\n\tset column(column) {\n\t\tthis._interp.column = column;\n\t}\n\n\tget text(){\n\t\tif (this._text !== null) {\n\t\t\treturn this._text;\n\t\t} else {\n\t\t\treturn this._interp.getText(this._input);\n\t\t}\n\t}\n\n\tset text(text) {\n\t\tthis._text = text;\n\t}\n}\n\n\n\n\nLexer.DEFAULT_MODE = 0;\nLexer.MORE = -2;\nLexer.SKIP = -3;\n\nLexer.DEFAULT_TOKEN_CHANNEL = Token.DEFAULT_CHANNEL;\nLexer.HIDDEN = Token.HIDDEN_CHANNEL;\nLexer.MIN_CHAR_VALUE = 0x0000;\nLexer.MAX_CHAR_VALUE = 0x10FFFF;\n\n// Set the char stream and reset the lexer\n\n\nmodule.exports = Lexer;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/Lexer.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/Parser.js":
/*!***********************************************************************************!*\
  !*** ../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/Parser.js ***!
  \***********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nconst {Token} = __webpack_require__(/*! ./Token */ \"(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/Token.js\");\nconst {ParseTreeListener, TerminalNode, ErrorNode} = __webpack_require__(/*! ./tree/Tree */ \"(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/tree/Tree.js\");\nconst Recognizer = __webpack_require__(/*! ./Recognizer */ \"(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/Recognizer.js\");\nconst {DefaultErrorStrategy} = __webpack_require__(/*! ./error/ErrorStrategy */ \"(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/error/ErrorStrategy.js\");\nconst ATNDeserializer = __webpack_require__(/*! ./atn/ATNDeserializer */ \"(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/atn/ATNDeserializer.js\");\nconst ATNDeserializationOptions = __webpack_require__(/*! ./atn/ATNDeserializationOptions */ \"(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/atn/ATNDeserializationOptions.js\");\nconst Lexer = __webpack_require__(/*! ./Lexer */ \"(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/Lexer.js\");\n\nclass TraceListener extends ParseTreeListener {\n\tconstructor(parser) {\n\t\tsuper();\n\t\tthis.parser = parser;\n\t}\n\n\tenterEveryRule(ctx) {\n\t\tconsole.log(\"enter   \" + this.parser.ruleNames[ctx.ruleIndex] + \", LT(1)=\" + this.parser._input.LT(1).text);\n\t}\n\n\tvisitTerminal(node) {\n\t\tconsole.log(\"consume \" + node.symbol + \" rule \" + this.parser.ruleNames[this.parser._ctx.ruleIndex]);\n\t}\n\n\texitEveryRule(ctx) {\n\t\tconsole.log(\"exit    \" + this.parser.ruleNames[ctx.ruleIndex] + \", LT(1)=\" + this.parser._input.LT(1).text);\n\t}\n}\n\nclass Parser extends Recognizer {\n\t/**\n\t * this is all the parsing support code essentially; most of it is error\n\t * recovery stuff.\n\t */\n\tconstructor(input) {\n\t\tsuper();\n\t\t// The input stream.\n\t\tthis._input = null;\n\t\t/**\n\t\t * The error handling strategy for the parser. The default value is a new\n\t\t * instance of {@link DefaultErrorStrategy}.\n\t\t */\n\t\tthis._errHandler = new DefaultErrorStrategy();\n\t\tthis._precedenceStack = [];\n\t\tthis._precedenceStack.push(0);\n\t\t/**\n\t\t * The {@link ParserRuleContext} object for the currently executing rule.\n\t\t * this is always non-null during the parsing process.\n\t\t */\n\t\tthis._ctx = null;\n\t\t/**\n\t\t * Specifies whether or not the parser should construct a parse tree during\n\t\t * the parsing process. The default value is {@code true}.\n\t\t */\n\t\tthis.buildParseTrees = true;\n\t\t/**\n\t\t * When {@link //setTrace}{@code (true)} is called, a reference to the\n\t\t * {@link TraceListener} is stored here so it can be easily removed in a\n\t\t * later call to {@link //setTrace}{@code (false)}. The listener itself is\n\t\t * implemented as a parser listener so this field is not directly used by\n\t\t * other parser methods.\n\t\t */\n\t\tthis._tracer = null;\n\t\t/**\n\t\t * The list of {@link ParseTreeListener} listeners registered to receive\n\t\t * events during the parse.\n\t\t */\n\t\tthis._parseListeners = null;\n\t\t/**\n\t\t * The number of syntax errors reported during parsing. this value is\n\t\t * incremented each time {@link //notifyErrorListeners} is called.\n\t\t */\n\t\tthis._syntaxErrors = 0;\n\t\tthis.setInputStream(input);\n\t}\n\n\t// reset the parser's state\n\treset() {\n\t\tif (this._input !== null) {\n\t\t\tthis._input.seek(0);\n\t\t}\n\t\tthis._errHandler.reset(this);\n\t\tthis._ctx = null;\n\t\tthis._syntaxErrors = 0;\n\t\tthis.setTrace(false);\n\t\tthis._precedenceStack = [];\n\t\tthis._precedenceStack.push(0);\n\t\tif (this._interp !== null) {\n\t\t\tthis._interp.reset();\n\t\t}\n\t}\n\n\t/**\n\t * Match current input symbol against {@code ttype}. If the symbol type\n\t * matches, {@link ANTLRErrorStrategy//reportMatch} and {@link //consume} are\n\t * called to complete the match process.\n\t *\n\t * <p>If the symbol type does not match,\n\t * {@link ANTLRErrorStrategy//recoverInline} is called on the current error\n\t * strategy to attempt recovery. If {@link //getBuildParseTree} is\n\t * {@code true} and the token index of the symbol returned by\n\t * {@link ANTLRErrorStrategy//recoverInline} is -1, the symbol is added to\n\t * the parse tree by calling {@link ParserRuleContext//addErrorNode}.</p>\n\t *\n\t * @param ttype the token type to match\n\t * @return the matched symbol\n\t * @throws RecognitionException if the current input symbol did not match\n\t * {@code ttype} and the error strategy could not recover from the\n\t * mismatched symbol\n\t */\n\tmatch(ttype) {\n\t\tlet t = this.getCurrentToken();\n\t\tif (t.type === ttype) {\n\t\t\tthis._errHandler.reportMatch(this);\n\t\t\tthis.consume();\n\t\t} else {\n\t\t\tt = this._errHandler.recoverInline(this);\n\t\t\tif (this.buildParseTrees && t.tokenIndex === -1) {\n\t\t\t\t// we must have conjured up a new token during single token\n\t\t\t\t// insertion\n\t\t\t\t// if it's not the current symbol\n\t\t\t\tthis._ctx.addErrorNode(t);\n\t\t\t}\n\t\t}\n\t\treturn t;\n\t}\n\n\t/**\n\t * Match current input symbol as a wildcard. If the symbol type matches\n\t * (i.e. has a value greater than 0), {@link ANTLRErrorStrategy//reportMatch}\n\t * and {@link //consume} are called to complete the match process.\n\t *\n\t * <p>If the symbol type does not match,\n\t * {@link ANTLRErrorStrategy//recoverInline} is called on the current error\n\t * strategy to attempt recovery. If {@link //getBuildParseTree} is\n\t * {@code true} and the token index of the symbol returned by\n\t * {@link ANTLRErrorStrategy//recoverInline} is -1, the symbol is added to\n\t * the parse tree by calling {@link ParserRuleContext//addErrorNode}.</p>\n\t *\n\t * @return the matched symbol\n\t * @throws RecognitionException if the current input symbol did not match\n\t * a wildcard and the error strategy could not recover from the mismatched\n\t * symbol\n\t */\n\tmatchWildcard() {\n\t\tlet t = this.getCurrentToken();\n\t\tif (t.type > 0) {\n\t\t\tthis._errHandler.reportMatch(this);\n\t\t\tthis.consume();\n\t\t} else {\n\t\t\tt = this._errHandler.recoverInline(this);\n\t\t\tif (this._buildParseTrees && t.tokenIndex === -1) {\n\t\t\t\t// we must have conjured up a new token during single token\n\t\t\t\t// insertion\n\t\t\t\t// if it's not the current symbol\n\t\t\t\tthis._ctx.addErrorNode(t);\n\t\t\t}\n\t\t}\n\t\treturn t;\n\t}\n\n\tgetParseListeners() {\n\t\treturn this._parseListeners || [];\n\t}\n\n\t/**\n\t * Registers {@code listener} to receive events during the parsing process.\n\t *\n\t * <p>To support output-preserving grammar transformations (including but not\n\t * limited to left-recursion removal, automated left-factoring, and\n\t * optimized code generation), calls to listener methods during the parse\n\t * may differ substantially from calls made by\n\t * {@link ParseTreeWalker//DEFAULT} used after the parse is complete. In\n\t * particular, rule entry and exit events may occur in a different order\n\t * during the parse than after the parser. In addition, calls to certain\n\t * rule entry methods may be omitted.</p>\n\t *\n\t * <p>With the following specific exceptions, calls to listener events are\n\t * <em>deterministic</em>, i.e. for identical input the calls to listener\n\t * methods will be the same.</p>\n\t *\n\t * <ul>\n\t * <li>Alterations to the grammar used to generate code may change the\n\t * behavior of the listener calls.</li>\n\t * <li>Alterations to the command line options passed to ANTLR 4 when\n\t * generating the parser may change the behavior of the listener calls.</li>\n\t * <li>Changing the version of the ANTLR Tool used to generate the parser\n\t * may change the behavior of the listener calls.</li>\n\t * </ul>\n\t *\n\t * @param listener the listener to add\n\t *\n\t * @throws NullPointerException if {@code} listener is {@code null}\n\t */\n\taddParseListener(listener) {\n\t\tif (listener === null) {\n\t\t\tthrow \"listener\";\n\t\t}\n\t\tif (this._parseListeners === null) {\n\t\t\tthis._parseListeners = [];\n\t\t}\n\t\tthis._parseListeners.push(listener);\n\t}\n\n\t/**\n\t * Remove {@code listener} from the list of parse listeners.\n\t *\n\t * <p>If {@code listener} is {@code null} or has not been added as a parse\n\t * listener, this method does nothing.</p>\n\t * @param listener the listener to remove\n\t */\n\tremoveParseListener(listener) {\n\t\tif (this._parseListeners !== null) {\n\t\t\tconst idx = this._parseListeners.indexOf(listener);\n\t\t\tif (idx >= 0) {\n\t\t\t\tthis._parseListeners.splice(idx, 1);\n\t\t\t}\n\t\t\tif (this._parseListeners.length === 0) {\n\t\t\t\tthis._parseListeners = null;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Remove all parse listeners.\n\tremoveParseListeners() {\n\t\tthis._parseListeners = null;\n\t}\n\n\t// Notify any parse listeners of an enter rule event.\n\ttriggerEnterRuleEvent() {\n\t\tif (this._parseListeners !== null) {\n\t\t\tconst ctx = this._ctx;\n\t\t\tthis._parseListeners.forEach(function(listener) {\n\t\t\t\tlistener.enterEveryRule(ctx);\n\t\t\t\tctx.enterRule(listener);\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * Notify any parse listeners of an exit rule event.\n\t * @see //addParseListener\n\t */\n\ttriggerExitRuleEvent() {\n\t\tif (this._parseListeners !== null) {\n\t\t\t// reverse order walk of listeners\n\t\t\tconst ctx = this._ctx;\n\t\t\tthis._parseListeners.slice(0).reverse().forEach(function(listener) {\n\t\t\t\tctx.exitRule(listener);\n\t\t\t\tlistener.exitEveryRule(ctx);\n\t\t\t});\n\t\t}\n\t}\n\n\tgetTokenFactory() {\n\t\treturn this._input.tokenSource._factory;\n\t}\n\n\t// Tell our token source and error strategy about a new way to create tokens.\n\tsetTokenFactory(factory) {\n\t\tthis._input.tokenSource._factory = factory;\n\t}\n\n\t/**\n\t * The ATN with bypass alternatives is expensive to create so we create it\n\t * lazily.\n\t *\n\t * @throws UnsupportedOperationException if the current parser does not\n\t * implement the {@link //getSerializedATN()} method.\n\t */\n\tgetATNWithBypassAlts() {\n\t\tconst serializedAtn = this.getSerializedATN();\n\t\tif (serializedAtn === null) {\n\t\t\tthrow \"The current parser does not support an ATN with bypass alternatives.\";\n\t\t}\n\t\tlet result = this.bypassAltsAtnCache[serializedAtn];\n\t\tif (result === null) {\n\t\t\tconst deserializationOptions = new ATNDeserializationOptions();\n\t\t\tdeserializationOptions.generateRuleBypassTransitions = true;\n\t\t\tresult = new ATNDeserializer(deserializationOptions)\n\t\t\t\t\t.deserialize(serializedAtn);\n\t\t\tthis.bypassAltsAtnCache[serializedAtn] = result;\n\t\t}\n\t\treturn result;\n\t}\n\n\t/**\n\t * The preferred method of getting a tree pattern. For example, here's a\n\t * sample use:\n\t *\n\t * <pre>\n\t * ParseTree t = parser.expr();\n\t * ParseTreePattern p = parser.compileParseTreePattern(\"&lt;ID&gt;+0\",\n\t * MyParser.RULE_expr);\n\t * ParseTreeMatch m = p.match(t);\n\t * String id = m.get(\"ID\");\n\t * </pre>\n\t */\n\tcompileParseTreePattern(pattern, patternRuleIndex, lexer) {\n\t\tlexer = lexer || null;\n\t\tif (lexer === null) {\n\t\t\tif (this.getTokenStream() !== null) {\n\t\t\t\tconst tokenSource = this.getTokenStream().tokenSource;\n\t\t\t\tif (tokenSource instanceof Lexer) {\n\t\t\t\t\tlexer = tokenSource;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (lexer === null) {\n\t\t\tthrow \"Parser can't discover a lexer to use\";\n\t\t}\n\t\tconst m = new ParseTreePatternMatcher(lexer, this);\n\t\treturn m.compile(pattern, patternRuleIndex);\n\t}\n\n\tgetInputStream() {\n\t\treturn this.getTokenStream();\n\t}\n\n\tsetInputStream(input) {\n\t\tthis.setTokenStream(input);\n\t}\n\n\tgetTokenStream() {\n\t\treturn this._input;\n\t}\n\n\t// Set the token stream and reset the parser.\n\tsetTokenStream(input) {\n\t\tthis._input = null;\n\t\tthis.reset();\n\t\tthis._input = input;\n\t}\n\n\t/**\n\t * Match needs to return the current input symbol, which gets put\n\t * into the label for the associated token ref; e.g., x=ID.\n\t */\n\tgetCurrentToken() {\n\t\treturn this._input.LT(1);\n\t}\n\n\tnotifyErrorListeners(msg, offendingToken, err) {\n\t\toffendingToken = offendingToken || null;\n\t\terr = err || null;\n\t\tif (offendingToken === null) {\n\t\t\toffendingToken = this.getCurrentToken();\n\t\t}\n\t\tthis._syntaxErrors += 1;\n\t\tconst line = offendingToken.line;\n\t\tconst column = offendingToken.column;\n\t\tconst listener = this.getErrorListenerDispatch();\n\t\tlistener.syntaxError(this, offendingToken, line, column, msg, err);\n\t}\n\n\t/**\n\t * Consume and return the {@linkplain //getCurrentToken current symbol}.\n\t *\n\t * <p>E.g., given the following input with {@code A} being the current\n\t * lookahead symbol, this function moves the cursor to {@code B} and returns\n\t * {@code A}.</p>\n\t *\n\t * <pre>\n\t * A B\n\t * ^\n\t * </pre>\n\t *\n\t * If the parser is not in error recovery mode, the consumed symbol is added\n\t * to the parse tree using {@link ParserRuleContext//addChild(Token)}, and\n\t * {@link ParseTreeListener//visitTerminal} is called on any parse listeners.\n\t * If the parser <em>is</em> in error recovery mode, the consumed symbol is\n\t * added to the parse tree using\n\t * {@link ParserRuleContext//addErrorNode(Token)}, and\n\t * {@link ParseTreeListener//visitErrorNode} is called on any parse\n\t * listeners.\n\t */\n\tconsume() {\n\t\tconst o = this.getCurrentToken();\n\t\tif (o.type !== Token.EOF) {\n\t\t\tthis.getInputStream().consume();\n\t\t}\n\t\tconst hasListener = this._parseListeners !== null && this._parseListeners.length > 0;\n\t\tif (this.buildParseTrees || hasListener) {\n\t\t\tlet node;\n\t\t\tif (this._errHandler.inErrorRecoveryMode(this)) {\n\t\t\t\tnode = this._ctx.addErrorNode(o);\n\t\t\t} else {\n\t\t\t\tnode = this._ctx.addTokenNode(o);\n\t\t\t}\n\t\t\tnode.invokingState = this.state;\n\t\t\tif (hasListener) {\n\t\t\t\tthis._parseListeners.forEach(function(listener) {\n\t\t\t\t\tif (node instanceof ErrorNode || (node.isErrorNode !== undefined && node.isErrorNode())) {\n\t\t\t\t\t\tlistener.visitErrorNode(node);\n\t\t\t\t\t} else if (node instanceof TerminalNode) {\n\t\t\t\t\t\tlistener.visitTerminal(node);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\treturn o;\n\t}\n\n\taddContextToParseTree() {\n\t\t// add current context to parent if we have a parent\n\t\tif (this._ctx.parentCtx !== null) {\n\t\t\tthis._ctx.parentCtx.addChild(this._ctx);\n\t\t}\n\t}\n\n\t/**\n\t * Always called by generated parsers upon entry to a rule. Access field\n\t * {@link //_ctx} get the current context.\n\t */\n\tenterRule(localctx, state, ruleIndex) {\n\t\tthis.state = state;\n\t\tthis._ctx = localctx;\n\t\tthis._ctx.start = this._input.LT(1);\n\t\tif (this.buildParseTrees) {\n\t\t\tthis.addContextToParseTree();\n\t\t}\n\t\tthis.triggerEnterRuleEvent();\n\t}\n\n\texitRule() {\n\t\tthis._ctx.stop = this._input.LT(-1);\n\t\t// trigger event on _ctx, before it reverts to parent\n\t\tthis.triggerExitRuleEvent();\n\t\tthis.state = this._ctx.invokingState;\n\t\tthis._ctx = this._ctx.parentCtx;\n\t}\n\n\tenterOuterAlt(localctx, altNum) {\n\t\tlocalctx.setAltNumber(altNum);\n\t\t// if we have new localctx, make sure we replace existing ctx\n\t\t// that is previous child of parse tree\n\t\tif (this.buildParseTrees && this._ctx !== localctx) {\n\t\t\tif (this._ctx.parentCtx !== null) {\n\t\t\t\tthis._ctx.parentCtx.removeLastChild();\n\t\t\t\tthis._ctx.parentCtx.addChild(localctx);\n\t\t\t}\n\t\t}\n\t\tthis._ctx = localctx;\n\t}\n\n\t/**\n\t * Get the precedence level for the top-most precedence rule.\n\t *\n\t * @return The precedence level for the top-most precedence rule, or -1 if\n\t * the parser context is not nested within a precedence rule.\n\t */\n\tgetPrecedence() {\n\t\tif (this._precedenceStack.length === 0) {\n\t\t\treturn -1;\n\t\t} else {\n\t\t\treturn this._precedenceStack[this._precedenceStack.length-1];\n\t\t}\n\t}\n\n\tenterRecursionRule(localctx, state, ruleIndex, precedence) {\n\t   this.state = state;\n\t   this._precedenceStack.push(precedence);\n\t   this._ctx = localctx;\n\t   this._ctx.start = this._input.LT(1);\n\t   this.triggerEnterRuleEvent(); // simulates rule entry for left-recursive rules\n   }\n\n\t// Like {@link //enterRule} but for recursive rules.\n\tpushNewRecursionContext(localctx, state, ruleIndex) {\n\t\tconst previous = this._ctx;\n\t\tprevious.parentCtx = localctx;\n\t\tprevious.invokingState = state;\n\t\tprevious.stop = this._input.LT(-1);\n\n\t\tthis._ctx = localctx;\n\t\tthis._ctx.start = previous.start;\n\t\tif (this.buildParseTrees) {\n\t\t\tthis._ctx.addChild(previous);\n\t\t}\n\t\tthis.triggerEnterRuleEvent(); // simulates rule entry for left-recursive rules\n\t}\n\n\tunrollRecursionContexts(parentCtx) {\n\t\tthis._precedenceStack.pop();\n\t\tthis._ctx.stop = this._input.LT(-1);\n\t\tconst retCtx = this._ctx; // save current ctx (return value)\n\t\t// unroll so _ctx is as it was before call to recursive method\n\t\tconst parseListeners = this.getParseListeners();\n\t\tif (parseListeners !== null && parseListeners.length > 0) {\n\t\t\twhile (this._ctx !== parentCtx) {\n\t\t\t\tthis.triggerExitRuleEvent();\n\t\t\t\tthis._ctx = this._ctx.parentCtx;\n\t\t\t}\n\t\t} else {\n\t\t\tthis._ctx = parentCtx;\n\t\t}\n\t\t// hook into tree\n\t\tretCtx.parentCtx = parentCtx;\n\t\tif (this.buildParseTrees && parentCtx !== null) {\n\t\t\t// add return ctx into invoking rule's tree\n\t\t\tparentCtx.addChild(retCtx);\n\t\t}\n\t}\n\n\tgetInvokingContext(ruleIndex) {\n\t\tlet ctx = this._ctx;\n\t\twhile (ctx !== null) {\n\t\t\tif (ctx.ruleIndex === ruleIndex) {\n\t\t\t\treturn ctx;\n\t\t\t}\n\t\t\tctx = ctx.parentCtx;\n\t\t}\n\t\treturn null;\n\t}\n\n\tprecpred(localctx, precedence) {\n\t\treturn precedence >= this._precedenceStack[this._precedenceStack.length-1];\n\t}\n\n\tinContext(context) {\n\t\t// TODO: useful in parser?\n\t\treturn false;\n\t}\n\n\t/**\n\t * Checks whether or not {@code symbol} can follow the current state in the\n\t * ATN. The behavior of this method is equivalent to the following, but is\n\t * implemented such that the complete context-sensitive follow set does not\n\t * need to be explicitly constructed.\n\t *\n\t * <pre>\n\t * return getExpectedTokens().contains(symbol);\n\t * </pre>\n\t *\n\t * @param symbol the symbol type to check\n\t * @return {@code true} if {@code symbol} can follow the current state in\n\t * the ATN, otherwise {@code false}.\n\t */\n\tisExpectedToken(symbol) {\n\t\tconst atn = this._interp.atn;\n\t\tlet ctx = this._ctx;\n\t\tconst s = atn.states[this.state];\n\t\tlet following = atn.nextTokens(s);\n\t\tif (following.contains(symbol)) {\n\t\t\treturn true;\n\t\t}\n\t\tif (!following.contains(Token.EPSILON)) {\n\t\t\treturn false;\n\t\t}\n\t\twhile (ctx !== null && ctx.invokingState >= 0 && following.contains(Token.EPSILON)) {\n\t\t\tconst invokingState = atn.states[ctx.invokingState];\n\t\t\tconst rt = invokingState.transitions[0];\n\t\t\tfollowing = atn.nextTokens(rt.followState);\n\t\t\tif (following.contains(symbol)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tctx = ctx.parentCtx;\n\t\t}\n\t\tif (following.contains(Token.EPSILON) && symbol === Token.EOF) {\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/**\n\t * Computes the set of input symbols which could follow the current parser\n\t * state and context, as given by {@link //getState} and {@link //getContext},\n\t * respectively.\n\t *\n\t * @see ATN//getExpectedTokens(int, RuleContext)\n\t */\n\tgetExpectedTokens() {\n\t\treturn this._interp.atn.getExpectedTokens(this.state, this._ctx);\n\t}\n\n\tgetExpectedTokensWithinCurrentRule() {\n\t\tconst atn = this._interp.atn;\n\t\tconst s = atn.states[this.state];\n\t\treturn atn.nextTokens(s);\n\t}\n\n\t// Get a rule's index (i.e., {@code RULE_ruleName} field) or -1 if not found.\n\tgetRuleIndex(ruleName) {\n\t\tconst ruleIndex = this.getRuleIndexMap()[ruleName];\n\t\tif (ruleIndex !== null) {\n\t\t\treturn ruleIndex;\n\t\t} else {\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\t/**\n\t * Return List&lt;String&gt; of the rule names in your parser instance\n\t * leading up to a call to the current rule. You could override if\n\t * you want more details such as the file/line info of where\n\t * in the ATN a rule is invoked.\n\t *\n\t * this is very useful for error messages.\n\t */\n\tgetRuleInvocationStack(p) {\n\t\tp = p || null;\n\t\tif (p === null) {\n\t\t\tp = this._ctx;\n\t\t}\n\t\tconst stack = [];\n\t\twhile (p !== null) {\n\t\t\t// compute what follows who invoked us\n\t\t\tconst ruleIndex = p.ruleIndex;\n\t\t\tif (ruleIndex < 0) {\n\t\t\t\tstack.push(\"n/a\");\n\t\t\t} else {\n\t\t\t\tstack.push(this.ruleNames[ruleIndex]);\n\t\t\t}\n\t\t\tp = p.parentCtx;\n\t\t}\n\t\treturn stack;\n\t}\n\n\t// For debugging and other purposes.\n\tgetDFAStrings() {\n\t\treturn this._interp.decisionToDFA.toString();\n\t}\n\n\t// For debugging and other purposes.\n\tdumpDFA() {\n\t\tlet seenOne = false;\n\t\tfor (let i = 0; i < this._interp.decisionToDFA.length; i++) {\n\t\t\tconst dfa = this._interp.decisionToDFA[i];\n\t\t\tif (dfa.states.length > 0) {\n\t\t\t\tif (seenOne) {\n\t\t\t\t\tconsole.log();\n\t\t\t\t}\n\t\t\t\tthis.printer.println(\"Decision \" + dfa.decision + \":\");\n\t\t\t\tthis.printer.print(dfa.toString(this.literalNames, this.symbolicNames));\n\t\t\t\tseenOne = true;\n\t\t\t}\n\t\t}\n\t}\n\n\t/*\n\t\t\"\t\t\tprinter = function() {\\r\\n\" +\n\t\t\"\t\t\t\tthis.println = function(s) { document.getElementById('output') += s + '\\\\n'; }\\r\\n\" +\n\t\t\"\t\t\t\tthis.print = function(s) { document.getElementById('output') += s; }\\r\\n\" +\n\t\t\"\t\t\t};\\r\\n\" +\n\t\t*/\n\tgetSourceName() {\n\t\treturn this._input.sourceName;\n\t}\n\n\t/**\n\t * During a parse is sometimes useful to listen in on the rule entry and exit\n\t * events as well as token matches. this is for quick and dirty debugging.\n\t */\n\tsetTrace(trace) {\n\t\tif (!trace) {\n\t\t\tthis.removeParseListener(this._tracer);\n\t\t\tthis._tracer = null;\n\t\t} else {\n\t\t\tif (this._tracer !== null) {\n\t\t\t\tthis.removeParseListener(this._tracer);\n\t\t\t}\n\t\t\tthis._tracer = new TraceListener(this);\n\t\t\tthis.addParseListener(this._tracer);\n\t\t}\n\t}\n}\n\n/**\n * this field maps from the serialized ATN string to the deserialized {@link\n * ATN} with\n * bypass alternatives.\n *\n * @see ATNDeserializationOptions//isGenerateRuleBypassTransitions()\n */\nParser.bypassAltsAtnCache = {};\n\nmodule.exports = Parser;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2FudGxyNEA0LjkuMy9ub2RlX21vZHVsZXMvYW50bHI0L3NyYy9hbnRscjQvUGFyc2VyLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU8sT0FBTyxFQUFFLG1CQUFPLENBQUMsaUdBQVM7QUFDakMsT0FBTyw0Q0FBNEMsRUFBRSxtQkFBTyxDQUFDLHlHQUFhO0FBQzFFLG1CQUFtQixtQkFBTyxDQUFDLDJHQUFjO0FBQ3pDLE9BQU8sc0JBQXNCLEVBQUUsbUJBQU8sQ0FBQyw2SEFBdUI7QUFDOUQsd0JBQXdCLG1CQUFPLENBQUMsNkhBQXVCO0FBQ3ZELGtDQUFrQyxtQkFBTyxDQUFDLGlKQUFpQztBQUMzRSxjQUFjLG1CQUFPLENBQUMsaUdBQVM7O0FBRS9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0Esc0RBQXNEO0FBQ3REO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsMkJBQTJCO0FBQzdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVLHlCQUF5QjtBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0RBQWdELFdBQVc7QUFDM0Q7QUFDQTtBQUNBO0FBQ0EsV0FBVyxrQkFBa0IsY0FBYztBQUMzQyxNQUFNLHFCQUFxQjtBQUMzQixvQkFBb0Isa0JBQWtCLGNBQWM7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQix5QkFBeUI7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0Qiw4QkFBOEI7QUFDMUQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0Esd0NBQXdDLFlBQVk7QUFDcEQsY0FBYyx1Q0FBdUMsS0FBSyxpQkFBaUI7QUFDM0U7QUFDQTtBQUNBO0FBQ0EsS0FBSyx5Q0FBeUM7QUFDOUMsc0NBQXNDLDJCQUEyQjtBQUNqRSxLQUFLLFlBQVk7QUFDakIsS0FBSyx5Q0FBeUM7QUFDOUMsK0JBQStCLHNDQUFzQztBQUNyRTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUssYUFBYTtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0Esd0NBQXdDO0FBQ3hDLFNBQVMsaUJBQWlCO0FBQzFCO0FBQ0E7QUFDQSxLQUFLLHlDQUF5QztBQUM5QyxzQ0FBc0MsMkJBQTJCO0FBQ2pFLEtBQUssWUFBWTtBQUNqQixLQUFLLHlDQUF5QztBQUM5QywrQkFBK0Isc0NBQXNDO0FBQ3JFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsZUFBZSxnQkFBZ0I7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUssZ0NBQWdDO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUNBQXFDLE9BQU8sYUFBYTtBQUN6RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLFlBQVksZ0JBQWdCO0FBQzVCO0FBQ0EsV0FBVyxnQkFBZ0IsSUFBSSxZQUFZO0FBQzNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsNEJBQTRCO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZEQUE2RCxNQUFNO0FBQ25FO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGlEQUFpRDtBQUNqRDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSw0QkFBNEIsNENBQTRDO0FBQ3hFO0FBQ0EsNkNBQTZDLFNBQVM7QUFDdEQseURBQXlELFNBQVM7QUFDbEUsS0FBSyxRQUFRO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIseUNBQXlDO0FBQ3RFLEtBQUssd0NBQXdDO0FBQzdDO0FBQ0E7QUFDQSxLQUFLLDZDQUE2QztBQUNsRCxLQUFLLHlDQUF5QztBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEtBQUssY0FBYztBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDO0FBQ2xDOztBQUVBLFVBQVUsbUJBQW1CO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQztBQUNoQzs7QUFFQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEI7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLDJCQUEyQixjQUFjO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsWUFBWSxJQUFJLGNBQWM7QUFDM0Msd0JBQXdCLFlBQVk7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLG9DQUFvQyxrQkFBa0IsS0FBSyxtQkFBbUI7QUFDOUU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSwrQkFBK0IscUJBQXFCO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLG1CQUFtQixXQUFXO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQix1Q0FBdUM7QUFDekQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLDRCQUE0QjtBQUM1QixvQ0FBb0MsaURBQWlEO0FBQ3JGLGtDQUFrQyx5Q0FBeUM7QUFDM0UsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLHVFQUF1RTtBQUN2RSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsiL1VzZXJzL2V0aGFua2ltL05lc3Rvci9tZWRmZXRjaC5qcy9ub2RlX21vZHVsZXMvLnBucG0vYW50bHI0QDQuOS4zL25vZGVfbW9kdWxlcy9hbnRscjQvc3JjL2FudGxyNC9QYXJzZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyogQ29weXJpZ2h0IChjKSAyMDEyLTIwMTcgVGhlIEFOVExSIFByb2plY3QuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBVc2Ugb2YgdGhpcyBmaWxlIGlzIGdvdmVybmVkIGJ5IHRoZSBCU0QgMy1jbGF1c2UgbGljZW5zZSB0aGF0XG4gKiBjYW4gYmUgZm91bmQgaW4gdGhlIExJQ0VOU0UudHh0IGZpbGUgaW4gdGhlIHByb2plY3Qgcm9vdC5cbiAqL1xuXG5jb25zdCB7VG9rZW59ID0gcmVxdWlyZSgnLi9Ub2tlbicpO1xuY29uc3Qge1BhcnNlVHJlZUxpc3RlbmVyLCBUZXJtaW5hbE5vZGUsIEVycm9yTm9kZX0gPSByZXF1aXJlKCcuL3RyZWUvVHJlZScpO1xuY29uc3QgUmVjb2duaXplciA9IHJlcXVpcmUoJy4vUmVjb2duaXplcicpO1xuY29uc3Qge0RlZmF1bHRFcnJvclN0cmF0ZWd5fSA9IHJlcXVpcmUoJy4vZXJyb3IvRXJyb3JTdHJhdGVneScpO1xuY29uc3QgQVRORGVzZXJpYWxpemVyID0gcmVxdWlyZSgnLi9hdG4vQVRORGVzZXJpYWxpemVyJyk7XG5jb25zdCBBVE5EZXNlcmlhbGl6YXRpb25PcHRpb25zID0gcmVxdWlyZSgnLi9hdG4vQVRORGVzZXJpYWxpemF0aW9uT3B0aW9ucycpO1xuY29uc3QgTGV4ZXIgPSByZXF1aXJlKCcuL0xleGVyJyk7XG5cbmNsYXNzIFRyYWNlTGlzdGVuZXIgZXh0ZW5kcyBQYXJzZVRyZWVMaXN0ZW5lciB7XG5cdGNvbnN0cnVjdG9yKHBhcnNlcikge1xuXHRcdHN1cGVyKCk7XG5cdFx0dGhpcy5wYXJzZXIgPSBwYXJzZXI7XG5cdH1cblxuXHRlbnRlckV2ZXJ5UnVsZShjdHgpIHtcblx0XHRjb25zb2xlLmxvZyhcImVudGVyICAgXCIgKyB0aGlzLnBhcnNlci5ydWxlTmFtZXNbY3R4LnJ1bGVJbmRleF0gKyBcIiwgTFQoMSk9XCIgKyB0aGlzLnBhcnNlci5faW5wdXQuTFQoMSkudGV4dCk7XG5cdH1cblxuXHR2aXNpdFRlcm1pbmFsKG5vZGUpIHtcblx0XHRjb25zb2xlLmxvZyhcImNvbnN1bWUgXCIgKyBub2RlLnN5bWJvbCArIFwiIHJ1bGUgXCIgKyB0aGlzLnBhcnNlci5ydWxlTmFtZXNbdGhpcy5wYXJzZXIuX2N0eC5ydWxlSW5kZXhdKTtcblx0fVxuXG5cdGV4aXRFdmVyeVJ1bGUoY3R4KSB7XG5cdFx0Y29uc29sZS5sb2coXCJleGl0ICAgIFwiICsgdGhpcy5wYXJzZXIucnVsZU5hbWVzW2N0eC5ydWxlSW5kZXhdICsgXCIsIExUKDEpPVwiICsgdGhpcy5wYXJzZXIuX2lucHV0LkxUKDEpLnRleHQpO1xuXHR9XG59XG5cbmNsYXNzIFBhcnNlciBleHRlbmRzIFJlY29nbml6ZXIge1xuXHQvKipcblx0ICogdGhpcyBpcyBhbGwgdGhlIHBhcnNpbmcgc3VwcG9ydCBjb2RlIGVzc2VudGlhbGx5OyBtb3N0IG9mIGl0IGlzIGVycm9yXG5cdCAqIHJlY292ZXJ5IHN0dWZmLlxuXHQgKi9cblx0Y29uc3RydWN0b3IoaW5wdXQpIHtcblx0XHRzdXBlcigpO1xuXHRcdC8vIFRoZSBpbnB1dCBzdHJlYW0uXG5cdFx0dGhpcy5faW5wdXQgPSBudWxsO1xuXHRcdC8qKlxuXHRcdCAqIFRoZSBlcnJvciBoYW5kbGluZyBzdHJhdGVneSBmb3IgdGhlIHBhcnNlci4gVGhlIGRlZmF1bHQgdmFsdWUgaXMgYSBuZXdcblx0XHQgKiBpbnN0YW5jZSBvZiB7QGxpbmsgRGVmYXVsdEVycm9yU3RyYXRlZ3l9LlxuXHRcdCAqL1xuXHRcdHRoaXMuX2VyckhhbmRsZXIgPSBuZXcgRGVmYXVsdEVycm9yU3RyYXRlZ3koKTtcblx0XHR0aGlzLl9wcmVjZWRlbmNlU3RhY2sgPSBbXTtcblx0XHR0aGlzLl9wcmVjZWRlbmNlU3RhY2sucHVzaCgwKTtcblx0XHQvKipcblx0XHQgKiBUaGUge0BsaW5rIFBhcnNlclJ1bGVDb250ZXh0fSBvYmplY3QgZm9yIHRoZSBjdXJyZW50bHkgZXhlY3V0aW5nIHJ1bGUuXG5cdFx0ICogdGhpcyBpcyBhbHdheXMgbm9uLW51bGwgZHVyaW5nIHRoZSBwYXJzaW5nIHByb2Nlc3MuXG5cdFx0ICovXG5cdFx0dGhpcy5fY3R4ID0gbnVsbDtcblx0XHQvKipcblx0XHQgKiBTcGVjaWZpZXMgd2hldGhlciBvciBub3QgdGhlIHBhcnNlciBzaG91bGQgY29uc3RydWN0IGEgcGFyc2UgdHJlZSBkdXJpbmdcblx0XHQgKiB0aGUgcGFyc2luZyBwcm9jZXNzLiBUaGUgZGVmYXVsdCB2YWx1ZSBpcyB7QGNvZGUgdHJ1ZX0uXG5cdFx0ICovXG5cdFx0dGhpcy5idWlsZFBhcnNlVHJlZXMgPSB0cnVlO1xuXHRcdC8qKlxuXHRcdCAqIFdoZW4ge0BsaW5rIC8vc2V0VHJhY2V9e0Bjb2RlICh0cnVlKX0gaXMgY2FsbGVkLCBhIHJlZmVyZW5jZSB0byB0aGVcblx0XHQgKiB7QGxpbmsgVHJhY2VMaXN0ZW5lcn0gaXMgc3RvcmVkIGhlcmUgc28gaXQgY2FuIGJlIGVhc2lseSByZW1vdmVkIGluIGFcblx0XHQgKiBsYXRlciBjYWxsIHRvIHtAbGluayAvL3NldFRyYWNlfXtAY29kZSAoZmFsc2UpfS4gVGhlIGxpc3RlbmVyIGl0c2VsZiBpc1xuXHRcdCAqIGltcGxlbWVudGVkIGFzIGEgcGFyc2VyIGxpc3RlbmVyIHNvIHRoaXMgZmllbGQgaXMgbm90IGRpcmVjdGx5IHVzZWQgYnlcblx0XHQgKiBvdGhlciBwYXJzZXIgbWV0aG9kcy5cblx0XHQgKi9cblx0XHR0aGlzLl90cmFjZXIgPSBudWxsO1xuXHRcdC8qKlxuXHRcdCAqIFRoZSBsaXN0IG9mIHtAbGluayBQYXJzZVRyZWVMaXN0ZW5lcn0gbGlzdGVuZXJzIHJlZ2lzdGVyZWQgdG8gcmVjZWl2ZVxuXHRcdCAqIGV2ZW50cyBkdXJpbmcgdGhlIHBhcnNlLlxuXHRcdCAqL1xuXHRcdHRoaXMuX3BhcnNlTGlzdGVuZXJzID0gbnVsbDtcblx0XHQvKipcblx0XHQgKiBUaGUgbnVtYmVyIG9mIHN5bnRheCBlcnJvcnMgcmVwb3J0ZWQgZHVyaW5nIHBhcnNpbmcuIHRoaXMgdmFsdWUgaXNcblx0XHQgKiBpbmNyZW1lbnRlZCBlYWNoIHRpbWUge0BsaW5rIC8vbm90aWZ5RXJyb3JMaXN0ZW5lcnN9IGlzIGNhbGxlZC5cblx0XHQgKi9cblx0XHR0aGlzLl9zeW50YXhFcnJvcnMgPSAwO1xuXHRcdHRoaXMuc2V0SW5wdXRTdHJlYW0oaW5wdXQpO1xuXHR9XG5cblx0Ly8gcmVzZXQgdGhlIHBhcnNlcidzIHN0YXRlXG5cdHJlc2V0KCkge1xuXHRcdGlmICh0aGlzLl9pbnB1dCAhPT0gbnVsbCkge1xuXHRcdFx0dGhpcy5faW5wdXQuc2VlaygwKTtcblx0XHR9XG5cdFx0dGhpcy5fZXJySGFuZGxlci5yZXNldCh0aGlzKTtcblx0XHR0aGlzLl9jdHggPSBudWxsO1xuXHRcdHRoaXMuX3N5bnRheEVycm9ycyA9IDA7XG5cdFx0dGhpcy5zZXRUcmFjZShmYWxzZSk7XG5cdFx0dGhpcy5fcHJlY2VkZW5jZVN0YWNrID0gW107XG5cdFx0dGhpcy5fcHJlY2VkZW5jZVN0YWNrLnB1c2goMCk7XG5cdFx0aWYgKHRoaXMuX2ludGVycCAhPT0gbnVsbCkge1xuXHRcdFx0dGhpcy5faW50ZXJwLnJlc2V0KCk7XG5cdFx0fVxuXHR9XG5cblx0LyoqXG5cdCAqIE1hdGNoIGN1cnJlbnQgaW5wdXQgc3ltYm9sIGFnYWluc3Qge0Bjb2RlIHR0eXBlfS4gSWYgdGhlIHN5bWJvbCB0eXBlXG5cdCAqIG1hdGNoZXMsIHtAbGluayBBTlRMUkVycm9yU3RyYXRlZ3kvL3JlcG9ydE1hdGNofSBhbmQge0BsaW5rIC8vY29uc3VtZX0gYXJlXG5cdCAqIGNhbGxlZCB0byBjb21wbGV0ZSB0aGUgbWF0Y2ggcHJvY2Vzcy5cblx0ICpcblx0ICogPHA+SWYgdGhlIHN5bWJvbCB0eXBlIGRvZXMgbm90IG1hdGNoLFxuXHQgKiB7QGxpbmsgQU5UTFJFcnJvclN0cmF0ZWd5Ly9yZWNvdmVySW5saW5lfSBpcyBjYWxsZWQgb24gdGhlIGN1cnJlbnQgZXJyb3Jcblx0ICogc3RyYXRlZ3kgdG8gYXR0ZW1wdCByZWNvdmVyeS4gSWYge0BsaW5rIC8vZ2V0QnVpbGRQYXJzZVRyZWV9IGlzXG5cdCAqIHtAY29kZSB0cnVlfSBhbmQgdGhlIHRva2VuIGluZGV4IG9mIHRoZSBzeW1ib2wgcmV0dXJuZWQgYnlcblx0ICoge0BsaW5rIEFOVExSRXJyb3JTdHJhdGVneS8vcmVjb3ZlcklubGluZX0gaXMgLTEsIHRoZSBzeW1ib2wgaXMgYWRkZWQgdG9cblx0ICogdGhlIHBhcnNlIHRyZWUgYnkgY2FsbGluZyB7QGxpbmsgUGFyc2VyUnVsZUNvbnRleHQvL2FkZEVycm9yTm9kZX0uPC9wPlxuXHQgKlxuXHQgKiBAcGFyYW0gdHR5cGUgdGhlIHRva2VuIHR5cGUgdG8gbWF0Y2hcblx0ICogQHJldHVybiB0aGUgbWF0Y2hlZCBzeW1ib2xcblx0ICogQHRocm93cyBSZWNvZ25pdGlvbkV4Y2VwdGlvbiBpZiB0aGUgY3VycmVudCBpbnB1dCBzeW1ib2wgZGlkIG5vdCBtYXRjaFxuXHQgKiB7QGNvZGUgdHR5cGV9IGFuZCB0aGUgZXJyb3Igc3RyYXRlZ3kgY291bGQgbm90IHJlY292ZXIgZnJvbSB0aGVcblx0ICogbWlzbWF0Y2hlZCBzeW1ib2xcblx0ICovXG5cdG1hdGNoKHR0eXBlKSB7XG5cdFx0bGV0IHQgPSB0aGlzLmdldEN1cnJlbnRUb2tlbigpO1xuXHRcdGlmICh0LnR5cGUgPT09IHR0eXBlKSB7XG5cdFx0XHR0aGlzLl9lcnJIYW5kbGVyLnJlcG9ydE1hdGNoKHRoaXMpO1xuXHRcdFx0dGhpcy5jb25zdW1lKCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHQgPSB0aGlzLl9lcnJIYW5kbGVyLnJlY292ZXJJbmxpbmUodGhpcyk7XG5cdFx0XHRpZiAodGhpcy5idWlsZFBhcnNlVHJlZXMgJiYgdC50b2tlbkluZGV4ID09PSAtMSkge1xuXHRcdFx0XHQvLyB3ZSBtdXN0IGhhdmUgY29uanVyZWQgdXAgYSBuZXcgdG9rZW4gZHVyaW5nIHNpbmdsZSB0b2tlblxuXHRcdFx0XHQvLyBpbnNlcnRpb25cblx0XHRcdFx0Ly8gaWYgaXQncyBub3QgdGhlIGN1cnJlbnQgc3ltYm9sXG5cdFx0XHRcdHRoaXMuX2N0eC5hZGRFcnJvck5vZGUodCk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiB0O1xuXHR9XG5cblx0LyoqXG5cdCAqIE1hdGNoIGN1cnJlbnQgaW5wdXQgc3ltYm9sIGFzIGEgd2lsZGNhcmQuIElmIHRoZSBzeW1ib2wgdHlwZSBtYXRjaGVzXG5cdCAqIChpLmUuIGhhcyBhIHZhbHVlIGdyZWF0ZXIgdGhhbiAwKSwge0BsaW5rIEFOVExSRXJyb3JTdHJhdGVneS8vcmVwb3J0TWF0Y2h9XG5cdCAqIGFuZCB7QGxpbmsgLy9jb25zdW1lfSBhcmUgY2FsbGVkIHRvIGNvbXBsZXRlIHRoZSBtYXRjaCBwcm9jZXNzLlxuXHQgKlxuXHQgKiA8cD5JZiB0aGUgc3ltYm9sIHR5cGUgZG9lcyBub3QgbWF0Y2gsXG5cdCAqIHtAbGluayBBTlRMUkVycm9yU3RyYXRlZ3kvL3JlY292ZXJJbmxpbmV9IGlzIGNhbGxlZCBvbiB0aGUgY3VycmVudCBlcnJvclxuXHQgKiBzdHJhdGVneSB0byBhdHRlbXB0IHJlY292ZXJ5LiBJZiB7QGxpbmsgLy9nZXRCdWlsZFBhcnNlVHJlZX0gaXNcblx0ICoge0Bjb2RlIHRydWV9IGFuZCB0aGUgdG9rZW4gaW5kZXggb2YgdGhlIHN5bWJvbCByZXR1cm5lZCBieVxuXHQgKiB7QGxpbmsgQU5UTFJFcnJvclN0cmF0ZWd5Ly9yZWNvdmVySW5saW5lfSBpcyAtMSwgdGhlIHN5bWJvbCBpcyBhZGRlZCB0b1xuXHQgKiB0aGUgcGFyc2UgdHJlZSBieSBjYWxsaW5nIHtAbGluayBQYXJzZXJSdWxlQ29udGV4dC8vYWRkRXJyb3JOb2RlfS48L3A+XG5cdCAqXG5cdCAqIEByZXR1cm4gdGhlIG1hdGNoZWQgc3ltYm9sXG5cdCAqIEB0aHJvd3MgUmVjb2duaXRpb25FeGNlcHRpb24gaWYgdGhlIGN1cnJlbnQgaW5wdXQgc3ltYm9sIGRpZCBub3QgbWF0Y2hcblx0ICogYSB3aWxkY2FyZCBhbmQgdGhlIGVycm9yIHN0cmF0ZWd5IGNvdWxkIG5vdCByZWNvdmVyIGZyb20gdGhlIG1pc21hdGNoZWRcblx0ICogc3ltYm9sXG5cdCAqL1xuXHRtYXRjaFdpbGRjYXJkKCkge1xuXHRcdGxldCB0ID0gdGhpcy5nZXRDdXJyZW50VG9rZW4oKTtcblx0XHRpZiAodC50eXBlID4gMCkge1xuXHRcdFx0dGhpcy5fZXJySGFuZGxlci5yZXBvcnRNYXRjaCh0aGlzKTtcblx0XHRcdHRoaXMuY29uc3VtZSgpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0ID0gdGhpcy5fZXJySGFuZGxlci5yZWNvdmVySW5saW5lKHRoaXMpO1xuXHRcdFx0aWYgKHRoaXMuX2J1aWxkUGFyc2VUcmVlcyAmJiB0LnRva2VuSW5kZXggPT09IC0xKSB7XG5cdFx0XHRcdC8vIHdlIG11c3QgaGF2ZSBjb25qdXJlZCB1cCBhIG5ldyB0b2tlbiBkdXJpbmcgc2luZ2xlIHRva2VuXG5cdFx0XHRcdC8vIGluc2VydGlvblxuXHRcdFx0XHQvLyBpZiBpdCdzIG5vdCB0aGUgY3VycmVudCBzeW1ib2xcblx0XHRcdFx0dGhpcy5fY3R4LmFkZEVycm9yTm9kZSh0KTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIHQ7XG5cdH1cblxuXHRnZXRQYXJzZUxpc3RlbmVycygpIHtcblx0XHRyZXR1cm4gdGhpcy5fcGFyc2VMaXN0ZW5lcnMgfHwgW107XG5cdH1cblxuXHQvKipcblx0ICogUmVnaXN0ZXJzIHtAY29kZSBsaXN0ZW5lcn0gdG8gcmVjZWl2ZSBldmVudHMgZHVyaW5nIHRoZSBwYXJzaW5nIHByb2Nlc3MuXG5cdCAqXG5cdCAqIDxwPlRvIHN1cHBvcnQgb3V0cHV0LXByZXNlcnZpbmcgZ3JhbW1hciB0cmFuc2Zvcm1hdGlvbnMgKGluY2x1ZGluZyBidXQgbm90XG5cdCAqIGxpbWl0ZWQgdG8gbGVmdC1yZWN1cnNpb24gcmVtb3ZhbCwgYXV0b21hdGVkIGxlZnQtZmFjdG9yaW5nLCBhbmRcblx0ICogb3B0aW1pemVkIGNvZGUgZ2VuZXJhdGlvbiksIGNhbGxzIHRvIGxpc3RlbmVyIG1ldGhvZHMgZHVyaW5nIHRoZSBwYXJzZVxuXHQgKiBtYXkgZGlmZmVyIHN1YnN0YW50aWFsbHkgZnJvbSBjYWxscyBtYWRlIGJ5XG5cdCAqIHtAbGluayBQYXJzZVRyZWVXYWxrZXIvL0RFRkFVTFR9IHVzZWQgYWZ0ZXIgdGhlIHBhcnNlIGlzIGNvbXBsZXRlLiBJblxuXHQgKiBwYXJ0aWN1bGFyLCBydWxlIGVudHJ5IGFuZCBleGl0IGV2ZW50cyBtYXkgb2NjdXIgaW4gYSBkaWZmZXJlbnQgb3JkZXJcblx0ICogZHVyaW5nIHRoZSBwYXJzZSB0aGFuIGFmdGVyIHRoZSBwYXJzZXIuIEluIGFkZGl0aW9uLCBjYWxscyB0byBjZXJ0YWluXG5cdCAqIHJ1bGUgZW50cnkgbWV0aG9kcyBtYXkgYmUgb21pdHRlZC48L3A+XG5cdCAqXG5cdCAqIDxwPldpdGggdGhlIGZvbGxvd2luZyBzcGVjaWZpYyBleGNlcHRpb25zLCBjYWxscyB0byBsaXN0ZW5lciBldmVudHMgYXJlXG5cdCAqIDxlbT5kZXRlcm1pbmlzdGljPC9lbT4sIGkuZS4gZm9yIGlkZW50aWNhbCBpbnB1dCB0aGUgY2FsbHMgdG8gbGlzdGVuZXJcblx0ICogbWV0aG9kcyB3aWxsIGJlIHRoZSBzYW1lLjwvcD5cblx0ICpcblx0ICogPHVsPlxuXHQgKiA8bGk+QWx0ZXJhdGlvbnMgdG8gdGhlIGdyYW1tYXIgdXNlZCB0byBnZW5lcmF0ZSBjb2RlIG1heSBjaGFuZ2UgdGhlXG5cdCAqIGJlaGF2aW9yIG9mIHRoZSBsaXN0ZW5lciBjYWxscy48L2xpPlxuXHQgKiA8bGk+QWx0ZXJhdGlvbnMgdG8gdGhlIGNvbW1hbmQgbGluZSBvcHRpb25zIHBhc3NlZCB0byBBTlRMUiA0IHdoZW5cblx0ICogZ2VuZXJhdGluZyB0aGUgcGFyc2VyIG1heSBjaGFuZ2UgdGhlIGJlaGF2aW9yIG9mIHRoZSBsaXN0ZW5lciBjYWxscy48L2xpPlxuXHQgKiA8bGk+Q2hhbmdpbmcgdGhlIHZlcnNpb24gb2YgdGhlIEFOVExSIFRvb2wgdXNlZCB0byBnZW5lcmF0ZSB0aGUgcGFyc2VyXG5cdCAqIG1heSBjaGFuZ2UgdGhlIGJlaGF2aW9yIG9mIHRoZSBsaXN0ZW5lciBjYWxscy48L2xpPlxuXHQgKiA8L3VsPlxuXHQgKlxuXHQgKiBAcGFyYW0gbGlzdGVuZXIgdGhlIGxpc3RlbmVyIHRvIGFkZFxuXHQgKlxuXHQgKiBAdGhyb3dzIE51bGxQb2ludGVyRXhjZXB0aW9uIGlmIHtAY29kZX0gbGlzdGVuZXIgaXMge0Bjb2RlIG51bGx9XG5cdCAqL1xuXHRhZGRQYXJzZUxpc3RlbmVyKGxpc3RlbmVyKSB7XG5cdFx0aWYgKGxpc3RlbmVyID09PSBudWxsKSB7XG5cdFx0XHR0aHJvdyBcImxpc3RlbmVyXCI7XG5cdFx0fVxuXHRcdGlmICh0aGlzLl9wYXJzZUxpc3RlbmVycyA9PT0gbnVsbCkge1xuXHRcdFx0dGhpcy5fcGFyc2VMaXN0ZW5lcnMgPSBbXTtcblx0XHR9XG5cdFx0dGhpcy5fcGFyc2VMaXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7XG5cdH1cblxuXHQvKipcblx0ICogUmVtb3ZlIHtAY29kZSBsaXN0ZW5lcn0gZnJvbSB0aGUgbGlzdCBvZiBwYXJzZSBsaXN0ZW5lcnMuXG5cdCAqXG5cdCAqIDxwPklmIHtAY29kZSBsaXN0ZW5lcn0gaXMge0Bjb2RlIG51bGx9IG9yIGhhcyBub3QgYmVlbiBhZGRlZCBhcyBhIHBhcnNlXG5cdCAqIGxpc3RlbmVyLCB0aGlzIG1ldGhvZCBkb2VzIG5vdGhpbmcuPC9wPlxuXHQgKiBAcGFyYW0gbGlzdGVuZXIgdGhlIGxpc3RlbmVyIHRvIHJlbW92ZVxuXHQgKi9cblx0cmVtb3ZlUGFyc2VMaXN0ZW5lcihsaXN0ZW5lcikge1xuXHRcdGlmICh0aGlzLl9wYXJzZUxpc3RlbmVycyAhPT0gbnVsbCkge1xuXHRcdFx0Y29uc3QgaWR4ID0gdGhpcy5fcGFyc2VMaXN0ZW5lcnMuaW5kZXhPZihsaXN0ZW5lcik7XG5cdFx0XHRpZiAoaWR4ID49IDApIHtcblx0XHRcdFx0dGhpcy5fcGFyc2VMaXN0ZW5lcnMuc3BsaWNlKGlkeCwgMSk7XG5cdFx0XHR9XG5cdFx0XHRpZiAodGhpcy5fcGFyc2VMaXN0ZW5lcnMubGVuZ3RoID09PSAwKSB7XG5cdFx0XHRcdHRoaXMuX3BhcnNlTGlzdGVuZXJzID0gbnVsbDtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBSZW1vdmUgYWxsIHBhcnNlIGxpc3RlbmVycy5cblx0cmVtb3ZlUGFyc2VMaXN0ZW5lcnMoKSB7XG5cdFx0dGhpcy5fcGFyc2VMaXN0ZW5lcnMgPSBudWxsO1xuXHR9XG5cblx0Ly8gTm90aWZ5IGFueSBwYXJzZSBsaXN0ZW5lcnMgb2YgYW4gZW50ZXIgcnVsZSBldmVudC5cblx0dHJpZ2dlckVudGVyUnVsZUV2ZW50KCkge1xuXHRcdGlmICh0aGlzLl9wYXJzZUxpc3RlbmVycyAhPT0gbnVsbCkge1xuXHRcdFx0Y29uc3QgY3R4ID0gdGhpcy5fY3R4O1xuXHRcdFx0dGhpcy5fcGFyc2VMaXN0ZW5lcnMuZm9yRWFjaChmdW5jdGlvbihsaXN0ZW5lcikge1xuXHRcdFx0XHRsaXN0ZW5lci5lbnRlckV2ZXJ5UnVsZShjdHgpO1xuXHRcdFx0XHRjdHguZW50ZXJSdWxlKGxpc3RlbmVyKTtcblx0XHRcdH0pO1xuXHRcdH1cblx0fVxuXG5cdC8qKlxuXHQgKiBOb3RpZnkgYW55IHBhcnNlIGxpc3RlbmVycyBvZiBhbiBleGl0IHJ1bGUgZXZlbnQuXG5cdCAqIEBzZWUgLy9hZGRQYXJzZUxpc3RlbmVyXG5cdCAqL1xuXHR0cmlnZ2VyRXhpdFJ1bGVFdmVudCgpIHtcblx0XHRpZiAodGhpcy5fcGFyc2VMaXN0ZW5lcnMgIT09IG51bGwpIHtcblx0XHRcdC8vIHJldmVyc2Ugb3JkZXIgd2FsayBvZiBsaXN0ZW5lcnNcblx0XHRcdGNvbnN0IGN0eCA9IHRoaXMuX2N0eDtcblx0XHRcdHRoaXMuX3BhcnNlTGlzdGVuZXJzLnNsaWNlKDApLnJldmVyc2UoKS5mb3JFYWNoKGZ1bmN0aW9uKGxpc3RlbmVyKSB7XG5cdFx0XHRcdGN0eC5leGl0UnVsZShsaXN0ZW5lcik7XG5cdFx0XHRcdGxpc3RlbmVyLmV4aXRFdmVyeVJ1bGUoY3R4KTtcblx0XHRcdH0pO1xuXHRcdH1cblx0fVxuXG5cdGdldFRva2VuRmFjdG9yeSgpIHtcblx0XHRyZXR1cm4gdGhpcy5faW5wdXQudG9rZW5Tb3VyY2UuX2ZhY3Rvcnk7XG5cdH1cblxuXHQvLyBUZWxsIG91ciB0b2tlbiBzb3VyY2UgYW5kIGVycm9yIHN0cmF0ZWd5IGFib3V0IGEgbmV3IHdheSB0byBjcmVhdGUgdG9rZW5zLlxuXHRzZXRUb2tlbkZhY3RvcnkoZmFjdG9yeSkge1xuXHRcdHRoaXMuX2lucHV0LnRva2VuU291cmNlLl9mYWN0b3J5ID0gZmFjdG9yeTtcblx0fVxuXG5cdC8qKlxuXHQgKiBUaGUgQVROIHdpdGggYnlwYXNzIGFsdGVybmF0aXZlcyBpcyBleHBlbnNpdmUgdG8gY3JlYXRlIHNvIHdlIGNyZWF0ZSBpdFxuXHQgKiBsYXppbHkuXG5cdCAqXG5cdCAqIEB0aHJvd3MgVW5zdXBwb3J0ZWRPcGVyYXRpb25FeGNlcHRpb24gaWYgdGhlIGN1cnJlbnQgcGFyc2VyIGRvZXMgbm90XG5cdCAqIGltcGxlbWVudCB0aGUge0BsaW5rIC8vZ2V0U2VyaWFsaXplZEFUTigpfSBtZXRob2QuXG5cdCAqL1xuXHRnZXRBVE5XaXRoQnlwYXNzQWx0cygpIHtcblx0XHRjb25zdCBzZXJpYWxpemVkQXRuID0gdGhpcy5nZXRTZXJpYWxpemVkQVROKCk7XG5cdFx0aWYgKHNlcmlhbGl6ZWRBdG4gPT09IG51bGwpIHtcblx0XHRcdHRocm93IFwiVGhlIGN1cnJlbnQgcGFyc2VyIGRvZXMgbm90IHN1cHBvcnQgYW4gQVROIHdpdGggYnlwYXNzIGFsdGVybmF0aXZlcy5cIjtcblx0XHR9XG5cdFx0bGV0IHJlc3VsdCA9IHRoaXMuYnlwYXNzQWx0c0F0bkNhY2hlW3NlcmlhbGl6ZWRBdG5dO1xuXHRcdGlmIChyZXN1bHQgPT09IG51bGwpIHtcblx0XHRcdGNvbnN0IGRlc2VyaWFsaXphdGlvbk9wdGlvbnMgPSBuZXcgQVRORGVzZXJpYWxpemF0aW9uT3B0aW9ucygpO1xuXHRcdFx0ZGVzZXJpYWxpemF0aW9uT3B0aW9ucy5nZW5lcmF0ZVJ1bGVCeXBhc3NUcmFuc2l0aW9ucyA9IHRydWU7XG5cdFx0XHRyZXN1bHQgPSBuZXcgQVRORGVzZXJpYWxpemVyKGRlc2VyaWFsaXphdGlvbk9wdGlvbnMpXG5cdFx0XHRcdFx0LmRlc2VyaWFsaXplKHNlcmlhbGl6ZWRBdG4pO1xuXHRcdFx0dGhpcy5ieXBhc3NBbHRzQXRuQ2FjaGVbc2VyaWFsaXplZEF0bl0gPSByZXN1bHQ7XG5cdFx0fVxuXHRcdHJldHVybiByZXN1bHQ7XG5cdH1cblxuXHQvKipcblx0ICogVGhlIHByZWZlcnJlZCBtZXRob2Qgb2YgZ2V0dGluZyBhIHRyZWUgcGF0dGVybi4gRm9yIGV4YW1wbGUsIGhlcmUncyBhXG5cdCAqIHNhbXBsZSB1c2U6XG5cdCAqXG5cdCAqIDxwcmU+XG5cdCAqIFBhcnNlVHJlZSB0ID0gcGFyc2VyLmV4cHIoKTtcblx0ICogUGFyc2VUcmVlUGF0dGVybiBwID0gcGFyc2VyLmNvbXBpbGVQYXJzZVRyZWVQYXR0ZXJuKFwiJmx0O0lEJmd0OyswXCIsXG5cdCAqIE15UGFyc2VyLlJVTEVfZXhwcik7XG5cdCAqIFBhcnNlVHJlZU1hdGNoIG0gPSBwLm1hdGNoKHQpO1xuXHQgKiBTdHJpbmcgaWQgPSBtLmdldChcIklEXCIpO1xuXHQgKiA8L3ByZT5cblx0ICovXG5cdGNvbXBpbGVQYXJzZVRyZWVQYXR0ZXJuKHBhdHRlcm4sIHBhdHRlcm5SdWxlSW5kZXgsIGxleGVyKSB7XG5cdFx0bGV4ZXIgPSBsZXhlciB8fCBudWxsO1xuXHRcdGlmIChsZXhlciA9PT0gbnVsbCkge1xuXHRcdFx0aWYgKHRoaXMuZ2V0VG9rZW5TdHJlYW0oKSAhPT0gbnVsbCkge1xuXHRcdFx0XHRjb25zdCB0b2tlblNvdXJjZSA9IHRoaXMuZ2V0VG9rZW5TdHJlYW0oKS50b2tlblNvdXJjZTtcblx0XHRcdFx0aWYgKHRva2VuU291cmNlIGluc3RhbmNlb2YgTGV4ZXIpIHtcblx0XHRcdFx0XHRsZXhlciA9IHRva2VuU291cmNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGlmIChsZXhlciA9PT0gbnVsbCkge1xuXHRcdFx0dGhyb3cgXCJQYXJzZXIgY2FuJ3QgZGlzY292ZXIgYSBsZXhlciB0byB1c2VcIjtcblx0XHR9XG5cdFx0Y29uc3QgbSA9IG5ldyBQYXJzZVRyZWVQYXR0ZXJuTWF0Y2hlcihsZXhlciwgdGhpcyk7XG5cdFx0cmV0dXJuIG0uY29tcGlsZShwYXR0ZXJuLCBwYXR0ZXJuUnVsZUluZGV4KTtcblx0fVxuXG5cdGdldElucHV0U3RyZWFtKCkge1xuXHRcdHJldHVybiB0aGlzLmdldFRva2VuU3RyZWFtKCk7XG5cdH1cblxuXHRzZXRJbnB1dFN0cmVhbShpbnB1dCkge1xuXHRcdHRoaXMuc2V0VG9rZW5TdHJlYW0oaW5wdXQpO1xuXHR9XG5cblx0Z2V0VG9rZW5TdHJlYW0oKSB7XG5cdFx0cmV0dXJuIHRoaXMuX2lucHV0O1xuXHR9XG5cblx0Ly8gU2V0IHRoZSB0b2tlbiBzdHJlYW0gYW5kIHJlc2V0IHRoZSBwYXJzZXIuXG5cdHNldFRva2VuU3RyZWFtKGlucHV0KSB7XG5cdFx0dGhpcy5faW5wdXQgPSBudWxsO1xuXHRcdHRoaXMucmVzZXQoKTtcblx0XHR0aGlzLl9pbnB1dCA9IGlucHV0O1xuXHR9XG5cblx0LyoqXG5cdCAqIE1hdGNoIG5lZWRzIHRvIHJldHVybiB0aGUgY3VycmVudCBpbnB1dCBzeW1ib2wsIHdoaWNoIGdldHMgcHV0XG5cdCAqIGludG8gdGhlIGxhYmVsIGZvciB0aGUgYXNzb2NpYXRlZCB0b2tlbiByZWY7IGUuZy4sIHg9SUQuXG5cdCAqL1xuXHRnZXRDdXJyZW50VG9rZW4oKSB7XG5cdFx0cmV0dXJuIHRoaXMuX2lucHV0LkxUKDEpO1xuXHR9XG5cblx0bm90aWZ5RXJyb3JMaXN0ZW5lcnMobXNnLCBvZmZlbmRpbmdUb2tlbiwgZXJyKSB7XG5cdFx0b2ZmZW5kaW5nVG9rZW4gPSBvZmZlbmRpbmdUb2tlbiB8fCBudWxsO1xuXHRcdGVyciA9IGVyciB8fCBudWxsO1xuXHRcdGlmIChvZmZlbmRpbmdUb2tlbiA9PT0gbnVsbCkge1xuXHRcdFx0b2ZmZW5kaW5nVG9rZW4gPSB0aGlzLmdldEN1cnJlbnRUb2tlbigpO1xuXHRcdH1cblx0XHR0aGlzLl9zeW50YXhFcnJvcnMgKz0gMTtcblx0XHRjb25zdCBsaW5lID0gb2ZmZW5kaW5nVG9rZW4ubGluZTtcblx0XHRjb25zdCBjb2x1bW4gPSBvZmZlbmRpbmdUb2tlbi5jb2x1bW47XG5cdFx0Y29uc3QgbGlzdGVuZXIgPSB0aGlzLmdldEVycm9yTGlzdGVuZXJEaXNwYXRjaCgpO1xuXHRcdGxpc3RlbmVyLnN5bnRheEVycm9yKHRoaXMsIG9mZmVuZGluZ1Rva2VuLCBsaW5lLCBjb2x1bW4sIG1zZywgZXJyKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBDb25zdW1lIGFuZCByZXR1cm4gdGhlIHtAbGlua3BsYWluIC8vZ2V0Q3VycmVudFRva2VuIGN1cnJlbnQgc3ltYm9sfS5cblx0ICpcblx0ICogPHA+RS5nLiwgZ2l2ZW4gdGhlIGZvbGxvd2luZyBpbnB1dCB3aXRoIHtAY29kZSBBfSBiZWluZyB0aGUgY3VycmVudFxuXHQgKiBsb29rYWhlYWQgc3ltYm9sLCB0aGlzIGZ1bmN0aW9uIG1vdmVzIHRoZSBjdXJzb3IgdG8ge0Bjb2RlIEJ9IGFuZCByZXR1cm5zXG5cdCAqIHtAY29kZSBBfS48L3A+XG5cdCAqXG5cdCAqIDxwcmU+XG5cdCAqIEEgQlxuXHQgKiBeXG5cdCAqIDwvcHJlPlxuXHQgKlxuXHQgKiBJZiB0aGUgcGFyc2VyIGlzIG5vdCBpbiBlcnJvciByZWNvdmVyeSBtb2RlLCB0aGUgY29uc3VtZWQgc3ltYm9sIGlzIGFkZGVkXG5cdCAqIHRvIHRoZSBwYXJzZSB0cmVlIHVzaW5nIHtAbGluayBQYXJzZXJSdWxlQ29udGV4dC8vYWRkQ2hpbGQoVG9rZW4pfSwgYW5kXG5cdCAqIHtAbGluayBQYXJzZVRyZWVMaXN0ZW5lci8vdmlzaXRUZXJtaW5hbH0gaXMgY2FsbGVkIG9uIGFueSBwYXJzZSBsaXN0ZW5lcnMuXG5cdCAqIElmIHRoZSBwYXJzZXIgPGVtPmlzPC9lbT4gaW4gZXJyb3IgcmVjb3ZlcnkgbW9kZSwgdGhlIGNvbnN1bWVkIHN5bWJvbCBpc1xuXHQgKiBhZGRlZCB0byB0aGUgcGFyc2UgdHJlZSB1c2luZ1xuXHQgKiB7QGxpbmsgUGFyc2VyUnVsZUNvbnRleHQvL2FkZEVycm9yTm9kZShUb2tlbil9LCBhbmRcblx0ICoge0BsaW5rIFBhcnNlVHJlZUxpc3RlbmVyLy92aXNpdEVycm9yTm9kZX0gaXMgY2FsbGVkIG9uIGFueSBwYXJzZVxuXHQgKiBsaXN0ZW5lcnMuXG5cdCAqL1xuXHRjb25zdW1lKCkge1xuXHRcdGNvbnN0IG8gPSB0aGlzLmdldEN1cnJlbnRUb2tlbigpO1xuXHRcdGlmIChvLnR5cGUgIT09IFRva2VuLkVPRikge1xuXHRcdFx0dGhpcy5nZXRJbnB1dFN0cmVhbSgpLmNvbnN1bWUoKTtcblx0XHR9XG5cdFx0Y29uc3QgaGFzTGlzdGVuZXIgPSB0aGlzLl9wYXJzZUxpc3RlbmVycyAhPT0gbnVsbCAmJiB0aGlzLl9wYXJzZUxpc3RlbmVycy5sZW5ndGggPiAwO1xuXHRcdGlmICh0aGlzLmJ1aWxkUGFyc2VUcmVlcyB8fCBoYXNMaXN0ZW5lcikge1xuXHRcdFx0bGV0IG5vZGU7XG5cdFx0XHRpZiAodGhpcy5fZXJySGFuZGxlci5pbkVycm9yUmVjb3ZlcnlNb2RlKHRoaXMpKSB7XG5cdFx0XHRcdG5vZGUgPSB0aGlzLl9jdHguYWRkRXJyb3JOb2RlKG8pO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0bm9kZSA9IHRoaXMuX2N0eC5hZGRUb2tlbk5vZGUobyk7XG5cdFx0XHR9XG5cdFx0XHRub2RlLmludm9raW5nU3RhdGUgPSB0aGlzLnN0YXRlO1xuXHRcdFx0aWYgKGhhc0xpc3RlbmVyKSB7XG5cdFx0XHRcdHRoaXMuX3BhcnNlTGlzdGVuZXJzLmZvckVhY2goZnVuY3Rpb24obGlzdGVuZXIpIHtcblx0XHRcdFx0XHRpZiAobm9kZSBpbnN0YW5jZW9mIEVycm9yTm9kZSB8fCAobm9kZS5pc0Vycm9yTm9kZSAhPT0gdW5kZWZpbmVkICYmIG5vZGUuaXNFcnJvck5vZGUoKSkpIHtcblx0XHRcdFx0XHRcdGxpc3RlbmVyLnZpc2l0RXJyb3JOb2RlKG5vZGUpO1xuXHRcdFx0XHRcdH0gZWxzZSBpZiAobm9kZSBpbnN0YW5jZW9mIFRlcm1pbmFsTm9kZSkge1xuXHRcdFx0XHRcdFx0bGlzdGVuZXIudmlzaXRUZXJtaW5hbChub2RlKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gbztcblx0fVxuXG5cdGFkZENvbnRleHRUb1BhcnNlVHJlZSgpIHtcblx0XHQvLyBhZGQgY3VycmVudCBjb250ZXh0IHRvIHBhcmVudCBpZiB3ZSBoYXZlIGEgcGFyZW50XG5cdFx0aWYgKHRoaXMuX2N0eC5wYXJlbnRDdHggIT09IG51bGwpIHtcblx0XHRcdHRoaXMuX2N0eC5wYXJlbnRDdHguYWRkQ2hpbGQodGhpcy5fY3R4KTtcblx0XHR9XG5cdH1cblxuXHQvKipcblx0ICogQWx3YXlzIGNhbGxlZCBieSBnZW5lcmF0ZWQgcGFyc2VycyB1cG9uIGVudHJ5IHRvIGEgcnVsZS4gQWNjZXNzIGZpZWxkXG5cdCAqIHtAbGluayAvL19jdHh9IGdldCB0aGUgY3VycmVudCBjb250ZXh0LlxuXHQgKi9cblx0ZW50ZXJSdWxlKGxvY2FsY3R4LCBzdGF0ZSwgcnVsZUluZGV4KSB7XG5cdFx0dGhpcy5zdGF0ZSA9IHN0YXRlO1xuXHRcdHRoaXMuX2N0eCA9IGxvY2FsY3R4O1xuXHRcdHRoaXMuX2N0eC5zdGFydCA9IHRoaXMuX2lucHV0LkxUKDEpO1xuXHRcdGlmICh0aGlzLmJ1aWxkUGFyc2VUcmVlcykge1xuXHRcdFx0dGhpcy5hZGRDb250ZXh0VG9QYXJzZVRyZWUoKTtcblx0XHR9XG5cdFx0dGhpcy50cmlnZ2VyRW50ZXJSdWxlRXZlbnQoKTtcblx0fVxuXG5cdGV4aXRSdWxlKCkge1xuXHRcdHRoaXMuX2N0eC5zdG9wID0gdGhpcy5faW5wdXQuTFQoLTEpO1xuXHRcdC8vIHRyaWdnZXIgZXZlbnQgb24gX2N0eCwgYmVmb3JlIGl0IHJldmVydHMgdG8gcGFyZW50XG5cdFx0dGhpcy50cmlnZ2VyRXhpdFJ1bGVFdmVudCgpO1xuXHRcdHRoaXMuc3RhdGUgPSB0aGlzLl9jdHguaW52b2tpbmdTdGF0ZTtcblx0XHR0aGlzLl9jdHggPSB0aGlzLl9jdHgucGFyZW50Q3R4O1xuXHR9XG5cblx0ZW50ZXJPdXRlckFsdChsb2NhbGN0eCwgYWx0TnVtKSB7XG5cdFx0bG9jYWxjdHguc2V0QWx0TnVtYmVyKGFsdE51bSk7XG5cdFx0Ly8gaWYgd2UgaGF2ZSBuZXcgbG9jYWxjdHgsIG1ha2Ugc3VyZSB3ZSByZXBsYWNlIGV4aXN0aW5nIGN0eFxuXHRcdC8vIHRoYXQgaXMgcHJldmlvdXMgY2hpbGQgb2YgcGFyc2UgdHJlZVxuXHRcdGlmICh0aGlzLmJ1aWxkUGFyc2VUcmVlcyAmJiB0aGlzLl9jdHggIT09IGxvY2FsY3R4KSB7XG5cdFx0XHRpZiAodGhpcy5fY3R4LnBhcmVudEN0eCAhPT0gbnVsbCkge1xuXHRcdFx0XHR0aGlzLl9jdHgucGFyZW50Q3R4LnJlbW92ZUxhc3RDaGlsZCgpO1xuXHRcdFx0XHR0aGlzLl9jdHgucGFyZW50Q3R4LmFkZENoaWxkKGxvY2FsY3R4KTtcblx0XHRcdH1cblx0XHR9XG5cdFx0dGhpcy5fY3R4ID0gbG9jYWxjdHg7XG5cdH1cblxuXHQvKipcblx0ICogR2V0IHRoZSBwcmVjZWRlbmNlIGxldmVsIGZvciB0aGUgdG9wLW1vc3QgcHJlY2VkZW5jZSBydWxlLlxuXHQgKlxuXHQgKiBAcmV0dXJuIFRoZSBwcmVjZWRlbmNlIGxldmVsIGZvciB0aGUgdG9wLW1vc3QgcHJlY2VkZW5jZSBydWxlLCBvciAtMSBpZlxuXHQgKiB0aGUgcGFyc2VyIGNvbnRleHQgaXMgbm90IG5lc3RlZCB3aXRoaW4gYSBwcmVjZWRlbmNlIHJ1bGUuXG5cdCAqL1xuXHRnZXRQcmVjZWRlbmNlKCkge1xuXHRcdGlmICh0aGlzLl9wcmVjZWRlbmNlU3RhY2subGVuZ3RoID09PSAwKSB7XG5cdFx0XHRyZXR1cm4gLTE7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJldHVybiB0aGlzLl9wcmVjZWRlbmNlU3RhY2tbdGhpcy5fcHJlY2VkZW5jZVN0YWNrLmxlbmd0aC0xXTtcblx0XHR9XG5cdH1cblxuXHRlbnRlclJlY3Vyc2lvblJ1bGUobG9jYWxjdHgsIHN0YXRlLCBydWxlSW5kZXgsIHByZWNlZGVuY2UpIHtcblx0ICAgdGhpcy5zdGF0ZSA9IHN0YXRlO1xuXHQgICB0aGlzLl9wcmVjZWRlbmNlU3RhY2sucHVzaChwcmVjZWRlbmNlKTtcblx0ICAgdGhpcy5fY3R4ID0gbG9jYWxjdHg7XG5cdCAgIHRoaXMuX2N0eC5zdGFydCA9IHRoaXMuX2lucHV0LkxUKDEpO1xuXHQgICB0aGlzLnRyaWdnZXJFbnRlclJ1bGVFdmVudCgpOyAvLyBzaW11bGF0ZXMgcnVsZSBlbnRyeSBmb3IgbGVmdC1yZWN1cnNpdmUgcnVsZXNcbiAgIH1cblxuXHQvLyBMaWtlIHtAbGluayAvL2VudGVyUnVsZX0gYnV0IGZvciByZWN1cnNpdmUgcnVsZXMuXG5cdHB1c2hOZXdSZWN1cnNpb25Db250ZXh0KGxvY2FsY3R4LCBzdGF0ZSwgcnVsZUluZGV4KSB7XG5cdFx0Y29uc3QgcHJldmlvdXMgPSB0aGlzLl9jdHg7XG5cdFx0cHJldmlvdXMucGFyZW50Q3R4ID0gbG9jYWxjdHg7XG5cdFx0cHJldmlvdXMuaW52b2tpbmdTdGF0ZSA9IHN0YXRlO1xuXHRcdHByZXZpb3VzLnN0b3AgPSB0aGlzLl9pbnB1dC5MVCgtMSk7XG5cblx0XHR0aGlzLl9jdHggPSBsb2NhbGN0eDtcblx0XHR0aGlzLl9jdHguc3RhcnQgPSBwcmV2aW91cy5zdGFydDtcblx0XHRpZiAodGhpcy5idWlsZFBhcnNlVHJlZXMpIHtcblx0XHRcdHRoaXMuX2N0eC5hZGRDaGlsZChwcmV2aW91cyk7XG5cdFx0fVxuXHRcdHRoaXMudHJpZ2dlckVudGVyUnVsZUV2ZW50KCk7IC8vIHNpbXVsYXRlcyBydWxlIGVudHJ5IGZvciBsZWZ0LXJlY3Vyc2l2ZSBydWxlc1xuXHR9XG5cblx0dW5yb2xsUmVjdXJzaW9uQ29udGV4dHMocGFyZW50Q3R4KSB7XG5cdFx0dGhpcy5fcHJlY2VkZW5jZVN0YWNrLnBvcCgpO1xuXHRcdHRoaXMuX2N0eC5zdG9wID0gdGhpcy5faW5wdXQuTFQoLTEpO1xuXHRcdGNvbnN0IHJldEN0eCA9IHRoaXMuX2N0eDsgLy8gc2F2ZSBjdXJyZW50IGN0eCAocmV0dXJuIHZhbHVlKVxuXHRcdC8vIHVucm9sbCBzbyBfY3R4IGlzIGFzIGl0IHdhcyBiZWZvcmUgY2FsbCB0byByZWN1cnNpdmUgbWV0aG9kXG5cdFx0Y29uc3QgcGFyc2VMaXN0ZW5lcnMgPSB0aGlzLmdldFBhcnNlTGlzdGVuZXJzKCk7XG5cdFx0aWYgKHBhcnNlTGlzdGVuZXJzICE9PSBudWxsICYmIHBhcnNlTGlzdGVuZXJzLmxlbmd0aCA+IDApIHtcblx0XHRcdHdoaWxlICh0aGlzLl9jdHggIT09IHBhcmVudEN0eCkge1xuXHRcdFx0XHR0aGlzLnRyaWdnZXJFeGl0UnVsZUV2ZW50KCk7XG5cdFx0XHRcdHRoaXMuX2N0eCA9IHRoaXMuX2N0eC5wYXJlbnRDdHg7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRoaXMuX2N0eCA9IHBhcmVudEN0eDtcblx0XHR9XG5cdFx0Ly8gaG9vayBpbnRvIHRyZWVcblx0XHRyZXRDdHgucGFyZW50Q3R4ID0gcGFyZW50Q3R4O1xuXHRcdGlmICh0aGlzLmJ1aWxkUGFyc2VUcmVlcyAmJiBwYXJlbnRDdHggIT09IG51bGwpIHtcblx0XHRcdC8vIGFkZCByZXR1cm4gY3R4IGludG8gaW52b2tpbmcgcnVsZSdzIHRyZWVcblx0XHRcdHBhcmVudEN0eC5hZGRDaGlsZChyZXRDdHgpO1xuXHRcdH1cblx0fVxuXG5cdGdldEludm9raW5nQ29udGV4dChydWxlSW5kZXgpIHtcblx0XHRsZXQgY3R4ID0gdGhpcy5fY3R4O1xuXHRcdHdoaWxlIChjdHggIT09IG51bGwpIHtcblx0XHRcdGlmIChjdHgucnVsZUluZGV4ID09PSBydWxlSW5kZXgpIHtcblx0XHRcdFx0cmV0dXJuIGN0eDtcblx0XHRcdH1cblx0XHRcdGN0eCA9IGN0eC5wYXJlbnRDdHg7XG5cdFx0fVxuXHRcdHJldHVybiBudWxsO1xuXHR9XG5cblx0cHJlY3ByZWQobG9jYWxjdHgsIHByZWNlZGVuY2UpIHtcblx0XHRyZXR1cm4gcHJlY2VkZW5jZSA+PSB0aGlzLl9wcmVjZWRlbmNlU3RhY2tbdGhpcy5fcHJlY2VkZW5jZVN0YWNrLmxlbmd0aC0xXTtcblx0fVxuXG5cdGluQ29udGV4dChjb250ZXh0KSB7XG5cdFx0Ly8gVE9ETzogdXNlZnVsIGluIHBhcnNlcj9cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHQvKipcblx0ICogQ2hlY2tzIHdoZXRoZXIgb3Igbm90IHtAY29kZSBzeW1ib2x9IGNhbiBmb2xsb3cgdGhlIGN1cnJlbnQgc3RhdGUgaW4gdGhlXG5cdCAqIEFUTi4gVGhlIGJlaGF2aW9yIG9mIHRoaXMgbWV0aG9kIGlzIGVxdWl2YWxlbnQgdG8gdGhlIGZvbGxvd2luZywgYnV0IGlzXG5cdCAqIGltcGxlbWVudGVkIHN1Y2ggdGhhdCB0aGUgY29tcGxldGUgY29udGV4dC1zZW5zaXRpdmUgZm9sbG93IHNldCBkb2VzIG5vdFxuXHQgKiBuZWVkIHRvIGJlIGV4cGxpY2l0bHkgY29uc3RydWN0ZWQuXG5cdCAqXG5cdCAqIDxwcmU+XG5cdCAqIHJldHVybiBnZXRFeHBlY3RlZFRva2VucygpLmNvbnRhaW5zKHN5bWJvbCk7XG5cdCAqIDwvcHJlPlxuXHQgKlxuXHQgKiBAcGFyYW0gc3ltYm9sIHRoZSBzeW1ib2wgdHlwZSB0byBjaGVja1xuXHQgKiBAcmV0dXJuIHtAY29kZSB0cnVlfSBpZiB7QGNvZGUgc3ltYm9sfSBjYW4gZm9sbG93IHRoZSBjdXJyZW50IHN0YXRlIGluXG5cdCAqIHRoZSBBVE4sIG90aGVyd2lzZSB7QGNvZGUgZmFsc2V9LlxuXHQgKi9cblx0aXNFeHBlY3RlZFRva2VuKHN5bWJvbCkge1xuXHRcdGNvbnN0IGF0biA9IHRoaXMuX2ludGVycC5hdG47XG5cdFx0bGV0IGN0eCA9IHRoaXMuX2N0eDtcblx0XHRjb25zdCBzID0gYXRuLnN0YXRlc1t0aGlzLnN0YXRlXTtcblx0XHRsZXQgZm9sbG93aW5nID0gYXRuLm5leHRUb2tlbnMocyk7XG5cdFx0aWYgKGZvbGxvd2luZy5jb250YWlucyhzeW1ib2wpKSB7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9XG5cdFx0aWYgKCFmb2xsb3dpbmcuY29udGFpbnMoVG9rZW4uRVBTSUxPTikpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cdFx0d2hpbGUgKGN0eCAhPT0gbnVsbCAmJiBjdHguaW52b2tpbmdTdGF0ZSA+PSAwICYmIGZvbGxvd2luZy5jb250YWlucyhUb2tlbi5FUFNJTE9OKSkge1xuXHRcdFx0Y29uc3QgaW52b2tpbmdTdGF0ZSA9IGF0bi5zdGF0ZXNbY3R4Lmludm9raW5nU3RhdGVdO1xuXHRcdFx0Y29uc3QgcnQgPSBpbnZva2luZ1N0YXRlLnRyYW5zaXRpb25zWzBdO1xuXHRcdFx0Zm9sbG93aW5nID0gYXRuLm5leHRUb2tlbnMocnQuZm9sbG93U3RhdGUpO1xuXHRcdFx0aWYgKGZvbGxvd2luZy5jb250YWlucyhzeW1ib2wpKSB7XG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fVxuXHRcdFx0Y3R4ID0gY3R4LnBhcmVudEN0eDtcblx0XHR9XG5cdFx0aWYgKGZvbGxvd2luZy5jb250YWlucyhUb2tlbi5FUFNJTE9OKSAmJiBzeW1ib2wgPT09IFRva2VuLkVPRikge1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cdH1cblxuXHQvKipcblx0ICogQ29tcHV0ZXMgdGhlIHNldCBvZiBpbnB1dCBzeW1ib2xzIHdoaWNoIGNvdWxkIGZvbGxvdyB0aGUgY3VycmVudCBwYXJzZXJcblx0ICogc3RhdGUgYW5kIGNvbnRleHQsIGFzIGdpdmVuIGJ5IHtAbGluayAvL2dldFN0YXRlfSBhbmQge0BsaW5rIC8vZ2V0Q29udGV4dH0sXG5cdCAqIHJlc3BlY3RpdmVseS5cblx0ICpcblx0ICogQHNlZSBBVE4vL2dldEV4cGVjdGVkVG9rZW5zKGludCwgUnVsZUNvbnRleHQpXG5cdCAqL1xuXHRnZXRFeHBlY3RlZFRva2VucygpIHtcblx0XHRyZXR1cm4gdGhpcy5faW50ZXJwLmF0bi5nZXRFeHBlY3RlZFRva2Vucyh0aGlzLnN0YXRlLCB0aGlzLl9jdHgpO1xuXHR9XG5cblx0Z2V0RXhwZWN0ZWRUb2tlbnNXaXRoaW5DdXJyZW50UnVsZSgpIHtcblx0XHRjb25zdCBhdG4gPSB0aGlzLl9pbnRlcnAuYXRuO1xuXHRcdGNvbnN0IHMgPSBhdG4uc3RhdGVzW3RoaXMuc3RhdGVdO1xuXHRcdHJldHVybiBhdG4ubmV4dFRva2VucyhzKTtcblx0fVxuXG5cdC8vIEdldCBhIHJ1bGUncyBpbmRleCAoaS5lLiwge0Bjb2RlIFJVTEVfcnVsZU5hbWV9IGZpZWxkKSBvciAtMSBpZiBub3QgZm91bmQuXG5cdGdldFJ1bGVJbmRleChydWxlTmFtZSkge1xuXHRcdGNvbnN0IHJ1bGVJbmRleCA9IHRoaXMuZ2V0UnVsZUluZGV4TWFwKClbcnVsZU5hbWVdO1xuXHRcdGlmIChydWxlSW5kZXggIT09IG51bGwpIHtcblx0XHRcdHJldHVybiBydWxlSW5kZXg7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJldHVybiAtMTtcblx0XHR9XG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJuIExpc3QmbHQ7U3RyaW5nJmd0OyBvZiB0aGUgcnVsZSBuYW1lcyBpbiB5b3VyIHBhcnNlciBpbnN0YW5jZVxuXHQgKiBsZWFkaW5nIHVwIHRvIGEgY2FsbCB0byB0aGUgY3VycmVudCBydWxlLiBZb3UgY291bGQgb3ZlcnJpZGUgaWZcblx0ICogeW91IHdhbnQgbW9yZSBkZXRhaWxzIHN1Y2ggYXMgdGhlIGZpbGUvbGluZSBpbmZvIG9mIHdoZXJlXG5cdCAqIGluIHRoZSBBVE4gYSBydWxlIGlzIGludm9rZWQuXG5cdCAqXG5cdCAqIHRoaXMgaXMgdmVyeSB1c2VmdWwgZm9yIGVycm9yIG1lc3NhZ2VzLlxuXHQgKi9cblx0Z2V0UnVsZUludm9jYXRpb25TdGFjayhwKSB7XG5cdFx0cCA9IHAgfHwgbnVsbDtcblx0XHRpZiAocCA9PT0gbnVsbCkge1xuXHRcdFx0cCA9IHRoaXMuX2N0eDtcblx0XHR9XG5cdFx0Y29uc3Qgc3RhY2sgPSBbXTtcblx0XHR3aGlsZSAocCAhPT0gbnVsbCkge1xuXHRcdFx0Ly8gY29tcHV0ZSB3aGF0IGZvbGxvd3Mgd2hvIGludm9rZWQgdXNcblx0XHRcdGNvbnN0IHJ1bGVJbmRleCA9IHAucnVsZUluZGV4O1xuXHRcdFx0aWYgKHJ1bGVJbmRleCA8IDApIHtcblx0XHRcdFx0c3RhY2sucHVzaChcIm4vYVwiKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHN0YWNrLnB1c2godGhpcy5ydWxlTmFtZXNbcnVsZUluZGV4XSk7XG5cdFx0XHR9XG5cdFx0XHRwID0gcC5wYXJlbnRDdHg7XG5cdFx0fVxuXHRcdHJldHVybiBzdGFjaztcblx0fVxuXG5cdC8vIEZvciBkZWJ1Z2dpbmcgYW5kIG90aGVyIHB1cnBvc2VzLlxuXHRnZXRERkFTdHJpbmdzKCkge1xuXHRcdHJldHVybiB0aGlzLl9pbnRlcnAuZGVjaXNpb25Ub0RGQS50b1N0cmluZygpO1xuXHR9XG5cblx0Ly8gRm9yIGRlYnVnZ2luZyBhbmQgb3RoZXIgcHVycG9zZXMuXG5cdGR1bXBERkEoKSB7XG5cdFx0bGV0IHNlZW5PbmUgPSBmYWxzZTtcblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX2ludGVycC5kZWNpc2lvblRvREZBLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRjb25zdCBkZmEgPSB0aGlzLl9pbnRlcnAuZGVjaXNpb25Ub0RGQVtpXTtcblx0XHRcdGlmIChkZmEuc3RhdGVzLmxlbmd0aCA+IDApIHtcblx0XHRcdFx0aWYgKHNlZW5PbmUpIHtcblx0XHRcdFx0XHRjb25zb2xlLmxvZygpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHRoaXMucHJpbnRlci5wcmludGxuKFwiRGVjaXNpb24gXCIgKyBkZmEuZGVjaXNpb24gKyBcIjpcIik7XG5cdFx0XHRcdHRoaXMucHJpbnRlci5wcmludChkZmEudG9TdHJpbmcodGhpcy5saXRlcmFsTmFtZXMsIHRoaXMuc3ltYm9saWNOYW1lcykpO1xuXHRcdFx0XHRzZWVuT25lID0gdHJ1ZTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvKlxuXHRcdFwiXHRcdFx0cHJpbnRlciA9IGZ1bmN0aW9uKCkge1xcclxcblwiICtcblx0XHRcIlx0XHRcdFx0dGhpcy5wcmludGxuID0gZnVuY3Rpb24ocykgeyBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnb3V0cHV0JykgKz0gcyArICdcXFxcbic7IH1cXHJcXG5cIiArXG5cdFx0XCJcdFx0XHRcdHRoaXMucHJpbnQgPSBmdW5jdGlvbihzKSB7IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdvdXRwdXQnKSArPSBzOyB9XFxyXFxuXCIgK1xuXHRcdFwiXHRcdFx0fTtcXHJcXG5cIiArXG5cdFx0Ki9cblx0Z2V0U291cmNlTmFtZSgpIHtcblx0XHRyZXR1cm4gdGhpcy5faW5wdXQuc291cmNlTmFtZTtcblx0fVxuXG5cdC8qKlxuXHQgKiBEdXJpbmcgYSBwYXJzZSBpcyBzb21ldGltZXMgdXNlZnVsIHRvIGxpc3RlbiBpbiBvbiB0aGUgcnVsZSBlbnRyeSBhbmQgZXhpdFxuXHQgKiBldmVudHMgYXMgd2VsbCBhcyB0b2tlbiBtYXRjaGVzLiB0aGlzIGlzIGZvciBxdWljayBhbmQgZGlydHkgZGVidWdnaW5nLlxuXHQgKi9cblx0c2V0VHJhY2UodHJhY2UpIHtcblx0XHRpZiAoIXRyYWNlKSB7XG5cdFx0XHR0aGlzLnJlbW92ZVBhcnNlTGlzdGVuZXIodGhpcy5fdHJhY2VyKTtcblx0XHRcdHRoaXMuX3RyYWNlciA9IG51bGw7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGlmICh0aGlzLl90cmFjZXIgIT09IG51bGwpIHtcblx0XHRcdFx0dGhpcy5yZW1vdmVQYXJzZUxpc3RlbmVyKHRoaXMuX3RyYWNlcik7XG5cdFx0XHR9XG5cdFx0XHR0aGlzLl90cmFjZXIgPSBuZXcgVHJhY2VMaXN0ZW5lcih0aGlzKTtcblx0XHRcdHRoaXMuYWRkUGFyc2VMaXN0ZW5lcih0aGlzLl90cmFjZXIpO1xuXHRcdH1cblx0fVxufVxuXG4vKipcbiAqIHRoaXMgZmllbGQgbWFwcyBmcm9tIHRoZSBzZXJpYWxpemVkIEFUTiBzdHJpbmcgdG8gdGhlIGRlc2VyaWFsaXplZCB7QGxpbmtcbiAqIEFUTn0gd2l0aFxuICogYnlwYXNzIGFsdGVybmF0aXZlcy5cbiAqXG4gKiBAc2VlIEFUTkRlc2VyaWFsaXphdGlvbk9wdGlvbnMvL2lzR2VuZXJhdGVSdWxlQnlwYXNzVHJhbnNpdGlvbnMoKVxuICovXG5QYXJzZXIuYnlwYXNzQWx0c0F0bkNhY2hlID0ge307XG5cbm1vZHVsZS5leHBvcnRzID0gUGFyc2VyO1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/Parser.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/ParserRuleContext.js":
/*!**********************************************************************************************!*\
  !*** ../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/ParserRuleContext.js ***!
  \**********************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nconst RuleContext = __webpack_require__(/*! ./RuleContext */ \"(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/RuleContext.js\");\nconst Tree = __webpack_require__(/*! ./tree/Tree */ \"(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/tree/Tree.js\");\nconst INVALID_INTERVAL = Tree.INVALID_INTERVAL;\nconst TerminalNode = Tree.TerminalNode;\nconst TerminalNodeImpl = Tree.TerminalNodeImpl;\nconst ErrorNodeImpl = Tree.ErrorNodeImpl;\nconst Interval = (__webpack_require__(/*! ./IntervalSet */ \"(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/IntervalSet.js\").Interval);\n\n/**\n * A rule invocation record for parsing.\n *\n *  Contains all of the information about the current rule not stored in the\n *  RuleContext. It handles parse tree children list, Any ATN state\n *  tracing, and the default values available for rule indications:\n *  start, stop, rule index, current alt number, current\n *  ATN state.\n *\n *  Subclasses made for each rule and grammar track the parameters,\n *  return values, locals, and labels specific to that rule. These\n *  are the objects that are returned from rules.\n *\n *  Note text is not an actual field of a rule return value; it is computed\n *  from start and stop using the input stream's toString() method.  I\n *  could add a ctor to this so that we can pass in and store the input\n *  stream, but I'm not sure we want to do that.  It would seem to be undefined\n *  to get the .text property anyway if the rule matches tokens from multiple\n *  input streams.\n *\n *  I do not use getters for fields of objects that are used simply to\n *  group values such as this aggregate.  The getters/setters are there to\n *  satisfy the superclass interface.\n */\nclass ParserRuleContext extends RuleContext {\n\tconstructor(parent, invokingStateNumber) {\n\t\tparent = parent || null;\n\t\tinvokingStateNumber = invokingStateNumber || null;\n\t\tsuper(parent, invokingStateNumber);\n\t\tthis.ruleIndex = -1;\n\t\t/**\n\t\t * If we are debugging or building a parse tree for a visitor,\n\t\t * we need to track all of the tokens and rule invocations associated\n\t\t * with this rule's context. This is empty for parsing w/o tree constr.\n\t\t * operation because we don't the need to track the details about\n\t\t * how we parse this rule.\n\t\t */\n\t\tthis.children = null;\n\t\tthis.start = null;\n\t\tthis.stop = null;\n\t\t/**\n\t\t * The exception that forced this rule to return. If the rule successfully\n\t\t * completed, this is {@code null}.\n\t\t */\n\t\tthis.exception = null;\n\t}\n\n\t// COPY a ctx (I'm deliberately not using copy constructor)\n\tcopyFrom(ctx) {\n\t\t// from RuleContext\n\t\tthis.parentCtx = ctx.parentCtx;\n\t\tthis.invokingState = ctx.invokingState;\n\t\tthis.children = null;\n\t\tthis.start = ctx.start;\n\t\tthis.stop = ctx.stop;\n\t\t// copy any error nodes to alt label node\n\t\tif(ctx.children) {\n\t\t\tthis.children = [];\n\t\t\t// reset parent pointer for any error nodes\n\t\t\tctx.children.map(function(child) {\n\t\t\t\tif (child instanceof ErrorNodeImpl) {\n\t\t\t\t\tthis.children.push(child);\n\t\t\t\t\tchild.parentCtx = this;\n\t\t\t\t}\n\t\t\t}, this);\n\t\t}\n\t}\n\n\t// Double dispatch methods for listeners\n\tenterRule(listener) {\n\t}\n\n\texitRule(listener) {\n\t}\n\n\t// Does not set parent link; other add methods do that\n\taddChild(child) {\n\t\tif (this.children === null) {\n\t\t\tthis.children = [];\n\t\t}\n\t\tthis.children.push(child);\n\t\treturn child;\n\t}\n\n\t/** Used by enterOuterAlt to toss out a RuleContext previously added as\n\t * we entered a rule. If we have // label, we will need to remove\n\t * generic ruleContext object.\n\t */\n\tremoveLastChild() {\n\t\tif (this.children !== null) {\n\t\t\tthis.children.pop();\n\t\t}\n\t}\n\n\taddTokenNode(token) {\n\t\tconst node = new TerminalNodeImpl(token);\n\t\tthis.addChild(node);\n\t\tnode.parentCtx = this;\n\t\treturn node;\n\t}\n\n\taddErrorNode(badToken) {\n\t\tconst node = new ErrorNodeImpl(badToken);\n\t\tthis.addChild(node);\n\t\tnode.parentCtx = this;\n\t\treturn node;\n\t}\n\n\tgetChild(i, type) {\n\t\ttype = type || null;\n\t\tif (this.children === null || i < 0 || i >= this.children.length) {\n\t\t\treturn null;\n\t\t}\n\t\tif (type === null) {\n\t\t\treturn this.children[i];\n\t\t} else {\n\t\t\tfor(let j=0; j<this.children.length; j++) {\n\t\t\t\tconst child = this.children[j];\n\t\t\t\tif(child instanceof type) {\n\t\t\t\t\tif(i===0) {\n\t\t\t\t\t\treturn child;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ti -= 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\t}\n\n\tgetToken(ttype, i) {\n\t\tif (this.children === null || i < 0 || i >= this.children.length) {\n\t\t\treturn null;\n\t\t}\n\t\tfor(let j=0; j<this.children.length; j++) {\n\t\t\tconst child = this.children[j];\n\t\t\tif (child instanceof TerminalNode) {\n\t\t\t\tif (child.symbol.type === ttype) {\n\t\t\t\t\tif(i===0) {\n\t\t\t\t\t\treturn child;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ti -= 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\tgetTokens(ttype ) {\n\t\tif (this.children=== null) {\n\t\t\treturn [];\n\t\t} else {\n\t\t\tconst tokens = [];\n\t\t\tfor(let j=0; j<this.children.length; j++) {\n\t\t\t\tconst child = this.children[j];\n\t\t\t\tif (child instanceof TerminalNode) {\n\t\t\t\t\tif (child.symbol.type === ttype) {\n\t\t\t\t\t\ttokens.push(child);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn tokens;\n\t\t}\n\t}\n\n\tgetTypedRuleContext(ctxType, i) {\n\t\treturn this.getChild(i, ctxType);\n\t}\n\n\tgetTypedRuleContexts(ctxType) {\n\t\tif (this.children=== null) {\n\t\t\treturn [];\n\t\t} else {\n\t\t\tconst contexts = [];\n\t\t\tfor(let j=0; j<this.children.length; j++) {\n\t\t\t\tconst child = this.children[j];\n\t\t\t\tif (child instanceof ctxType) {\n\t\t\t\t\tcontexts.push(child);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn contexts;\n\t\t}\n\t}\n\n\tgetChildCount() {\n\t\tif (this.children=== null) {\n\t\t\treturn 0;\n\t\t} else {\n\t\t\treturn this.children.length;\n\t\t}\n\t}\n\n\tgetSourceInterval() {\n\t\tif( this.start === null || this.stop === null) {\n\t\t\treturn INVALID_INTERVAL;\n\t\t} else {\n\t\t\treturn new Interval(this.start.tokenIndex, this.stop.tokenIndex);\n\t\t}\n\t}\n}\n\nRuleContext.EMPTY = new ParserRuleContext();\n\nclass InterpreterRuleContext extends ParserRuleContext {\n\tconstructor(parent, invokingStateNumber, ruleIndex) {\n\t\tsuper(parent, invokingStateNumber);\n\t\tthis.ruleIndex = ruleIndex;\n\t}\n}\n\nmodule.exports = ParserRuleContext;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/ParserRuleContext.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/PredictionContext.js":
/*!**********************************************************************************************!*\
  !*** ../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/PredictionContext.js ***!
  \**********************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nconst RuleContext = __webpack_require__(/*! ./RuleContext */ \"(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/RuleContext.js\");\nconst {Hash, Map, equalArrays} = __webpack_require__(/*! ./Utils */ \"(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/Utils.js\");\n\nclass PredictionContext {\n\n\tconstructor(cachedHashCode) {\n\t\tthis.cachedHashCode = cachedHashCode;\n\t}\n\n\t/**\n\t * Stores the computed hash code of this {@link PredictionContext}. The hash\n\t * code is computed in parts to match the following reference algorithm.\n\t *\n\t * <pre>\n\t * private int referenceHashCode() {\n\t * int hash = {@link MurmurHash//initialize MurmurHash.initialize}({@link\n\t * //INITIAL_HASH});\n\t *\n\t * for (int i = 0; i &lt; {@link //size()}; i++) {\n\t * hash = {@link MurmurHash//update MurmurHash.update}(hash, {@link //getParent\n\t * getParent}(i));\n\t * }\n\t *\n\t * for (int i = 0; i &lt; {@link //size()}; i++) {\n\t * hash = {@link MurmurHash//update MurmurHash.update}(hash, {@link\n\t * //getReturnState getReturnState}(i));\n\t * }\n\t *\n\t * hash = {@link MurmurHash//finish MurmurHash.finish}(hash, 2// {@link\n\t * //size()});\n\t * return hash;\n\t * }\n\t * </pre>\n\t * This means only the {@link //EMPTY} context is in set.\n\t */\n\tisEmpty() {\n\t\treturn this === PredictionContext.EMPTY;\n\t}\n\n\thasEmptyPath() {\n\t\treturn this.getReturnState(this.length - 1) === PredictionContext.EMPTY_RETURN_STATE;\n\t}\n\n\thashCode() {\n\t\treturn this.cachedHashCode;\n\t}\n\n\tupdateHashCode(hash) {\n\t\thash.update(this.cachedHashCode);\n\t}\n}\n\n/**\n * Represents {@code $} in local context prediction, which means wildcard.\n * {@code//+x =//}.\n */\nPredictionContext.EMPTY = null;\n\n/**\n * Represents {@code $} in an array in full context mode, when {@code $}\n * doesn't mean wildcard: {@code $ + x = [$,x]}. Here,\n * {@code $} = {@link //EMPTY_RETURN_STATE}.\n */\nPredictionContext.EMPTY_RETURN_STATE = 0x7FFFFFFF;\n\nPredictionContext.globalNodeCount = 1;\nPredictionContext.id = PredictionContext.globalNodeCount;\n\n\n/*\nfunction calculateHashString(parent, returnState) {\n\treturn \"\" + parent + returnState;\n}\n*/\n\n/**\n * Used to cache {@link PredictionContext} objects. Its used for the shared\n * context cash associated with contexts in DFA states. This cache\n * can be used for both lexers and parsers.\n */\nclass PredictionContextCache {\n\n\tconstructor() {\n\t\tthis.cache = new Map();\n\t}\n\n\t/**\n\t * Add a context to the cache and return it. If the context already exists,\n\t * return that one instead and do not add a new context to the cache.\n\t * Protect shared cache from unsafe thread access.\n\t */\n\tadd(ctx) {\n\t\tif (ctx === PredictionContext.EMPTY) {\n\t\t\treturn PredictionContext.EMPTY;\n\t\t}\n\t\tconst existing = this.cache.get(ctx) || null;\n\t\tif (existing !== null) {\n\t\t\treturn existing;\n\t\t}\n\t\tthis.cache.put(ctx, ctx);\n\t\treturn ctx;\n\t}\n\n\tget(ctx) {\n\t\treturn this.cache.get(ctx) || null;\n\t}\n\n\tget length(){\n\t\treturn this.cache.length;\n\t}\n}\n\n\nclass SingletonPredictionContext extends PredictionContext {\n\n\tconstructor(parent, returnState) {\n\t\tlet hashCode = 0;\n\t\tconst hash = new Hash();\n\t\tif(parent !== null) {\n\t\t\thash.update(parent, returnState);\n\t\t} else {\n\t\t\thash.update(1);\n\t\t}\n\t\thashCode = hash.finish();\n\t\tsuper(hashCode);\n\t\tthis.parentCtx = parent;\n\t\tthis.returnState = returnState;\n\t}\n\n\tgetParent(index) {\n\t\treturn this.parentCtx;\n\t}\n\n\tgetReturnState(index) {\n\t\treturn this.returnState;\n\t}\n\n\tequals(other) {\n\t\tif (this === other) {\n\t\t\treturn true;\n\t\t} else if (!(other instanceof SingletonPredictionContext)) {\n\t\t\treturn false;\n\t\t} else if (this.hashCode() !== other.hashCode()) {\n\t\t\treturn false; // can't be same if hash is different\n\t\t} else {\n\t\t\tif(this.returnState !== other.returnState)\n\t\t\t\treturn false;\n\t\t\telse if(this.parentCtx==null)\n\t\t\t\treturn other.parentCtx==null\n\t\t\telse\n\t\t\t\treturn this.parentCtx.equals(other.parentCtx);\n\t\t}\n\t}\n\n\ttoString() {\n\t\tconst up = this.parentCtx === null ? \"\" : this.parentCtx.toString();\n\t\tif (up.length === 0) {\n\t\t\tif (this.returnState === PredictionContext.EMPTY_RETURN_STATE) {\n\t\t\t\treturn \"$\";\n\t\t\t} else {\n\t\t\t\treturn \"\" + this.returnState;\n\t\t\t}\n\t\t} else {\n\t\t\treturn \"\" + this.returnState + \" \" + up;\n\t\t}\n\t}\n\n\tget length(){\n\t\treturn 1;\n\t}\n\n\tstatic create(parent, returnState) {\n\t\tif (returnState === PredictionContext.EMPTY_RETURN_STATE && parent === null) {\n\t\t\t// someone can pass in the bits of an array ctx that mean $\n\t\t\treturn PredictionContext.EMPTY;\n\t\t} else {\n\t\t\treturn new SingletonPredictionContext(parent, returnState);\n\t\t}\n\t}\n}\n\nclass EmptyPredictionContext extends SingletonPredictionContext {\n\n\tconstructor() {\n\t\tsuper(null, PredictionContext.EMPTY_RETURN_STATE);\n\t}\n\n\tisEmpty() {\n\t\treturn true;\n\t}\n\n\tgetParent(index) {\n\t\treturn null;\n\t}\n\n\tgetReturnState(index) {\n\t\treturn this.returnState;\n\t}\n\n\tequals(other) {\n\t\treturn this === other;\n\t}\n\n\ttoString() {\n\t\treturn \"$\";\n\t}\n}\n\n\nPredictionContext.EMPTY = new EmptyPredictionContext();\n\nclass ArrayPredictionContext extends PredictionContext {\n\n\tconstructor(parents, returnStates) {\n\t\t/**\n\t\t * Parent can be null only if full ctx mode and we make an array\n\t\t * from {@link //EMPTY} and non-empty. We merge {@link //EMPTY} by using\n\t\t * null parent and\n\t\t * returnState == {@link //EMPTY_RETURN_STATE}.\n\t\t */\n\t\tconst h = new Hash();\n\t\th.update(parents, returnStates);\n\t\tconst hashCode = h.finish();\n\t\tsuper(hashCode);\n\t\tthis.parents = parents;\n\t\tthis.returnStates = returnStates;\n\t\treturn this;\n\t}\n\n\tisEmpty() {\n\t\t// since EMPTY_RETURN_STATE can only appear in the last position, we\n\t\t// don't need to verify that size==1\n\t\treturn this.returnStates[0] === PredictionContext.EMPTY_RETURN_STATE;\n\t}\n\n\tgetParent(index) {\n\t\treturn this.parents[index];\n\t}\n\n\tgetReturnState(index) {\n\t\treturn this.returnStates[index];\n\t}\n\n\tequals(other) {\n\t\tif (this === other) {\n\t\t\treturn true;\n\t\t} else if (!(other instanceof ArrayPredictionContext)) {\n\t\t\treturn false;\n\t\t} else if (this.hashCode() !== other.hashCode()) {\n\t\t\treturn false; // can't be same if hash is different\n\t\t} else {\n\t\t\treturn equalArrays(this.returnStates, other.returnStates) &&\n\t\t\t\tequalArrays(this.parents, other.parents);\n\t\t}\n\t}\n\n\ttoString() {\n\t\tif (this.isEmpty()) {\n\t\t\treturn \"[]\";\n\t\t} else {\n\t\t\tlet s = \"[\";\n\t\t\tfor (let i = 0; i < this.returnStates.length; i++) {\n\t\t\t\tif (i > 0) {\n\t\t\t\t\ts = s + \", \";\n\t\t\t\t}\n\t\t\t\tif (this.returnStates[i] === PredictionContext.EMPTY_RETURN_STATE) {\n\t\t\t\t\ts = s + \"$\";\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\ts = s + this.returnStates[i];\n\t\t\t\tif (this.parents[i] !== null) {\n\t\t\t\t\ts = s + \" \" + this.parents[i];\n\t\t\t\t} else {\n\t\t\t\t\ts = s + \"null\";\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn s + \"]\";\n\t\t}\n\t}\n\n\tget length(){\n\t\treturn this.returnStates.length;\n\t}\n}\n\n\n/**\n * Convert a {@link RuleContext} tree to a {@link PredictionContext} graph.\n * Return {@link //EMPTY} if {@code outerContext} is empty or null.\n */\nfunction predictionContextFromRuleContext(atn, outerContext) {\n\tif (outerContext === undefined || outerContext === null) {\n\t\touterContext = RuleContext.EMPTY;\n\t}\n\t// if we are in RuleContext of start rule, s, then PredictionContext\n\t// is EMPTY. Nobody called us. (if we are empty, return empty)\n\tif (outerContext.parentCtx === null || outerContext === RuleContext.EMPTY) {\n\t\treturn PredictionContext.EMPTY;\n\t}\n\t// If we have a parent, convert it to a PredictionContext graph\n\tconst parent = predictionContextFromRuleContext(atn, outerContext.parentCtx);\n\tconst state = atn.states[outerContext.invokingState];\n\tconst transition = state.transitions[0];\n\treturn SingletonPredictionContext.create(parent, transition.followState.stateNumber);\n}\n/*\nfunction calculateListsHashString(parents, returnStates) {\n\tconst s = \"\";\n\tparents.map(function(p) {\n\t\ts = s + p;\n\t});\n\treturnStates.map(function(r) {\n\t\ts = s + r;\n\t});\n\treturn s;\n}\n*/\nfunction merge(a, b, rootIsWildcard, mergeCache) {\n\t// share same graph if both same\n\tif (a === b) {\n\t\treturn a;\n\t}\n\tif (a instanceof SingletonPredictionContext && b instanceof SingletonPredictionContext) {\n\t\treturn mergeSingletons(a, b, rootIsWildcard, mergeCache);\n\t}\n\t// At least one of a or b is array\n\t// If one is $ and rootIsWildcard, return $ as// wildcard\n\tif (rootIsWildcard) {\n\t\tif (a instanceof EmptyPredictionContext) {\n\t\t\treturn a;\n\t\t}\n\t\tif (b instanceof EmptyPredictionContext) {\n\t\t\treturn b;\n\t\t}\n\t}\n\t// convert singleton so both are arrays to normalize\n\tif (a instanceof SingletonPredictionContext) {\n\t\ta = new ArrayPredictionContext([a.getParent()], [a.returnState]);\n\t}\n\tif (b instanceof SingletonPredictionContext) {\n\t\tb = new ArrayPredictionContext([b.getParent()], [b.returnState]);\n\t}\n\treturn mergeArrays(a, b, rootIsWildcard, mergeCache);\n}\n\n/**\n * Merge two {@link SingletonPredictionContext} instances.\n *\n * <p>Stack tops equal, parents merge is same; return left graph.<br>\n * <embed src=\"images/SingletonMerge_SameRootSamePar.svg\"\n * type=\"image/svg+xml\"/></p>\n *\n * <p>Same stack top, parents differ; merge parents giving array node, then\n * remainders of those graphs. A new root node is created to point to the\n * merged parents.<br>\n * <embed src=\"images/SingletonMerge_SameRootDiffPar.svg\"\n * type=\"image/svg+xml\"/></p>\n *\n * <p>Different stack tops pointing to same parent. Make array node for the\n * root where both element in the root point to the same (original)\n * parent.<br>\n * <embed src=\"images/SingletonMerge_DiffRootSamePar.svg\"\n * type=\"image/svg+xml\"/></p>\n *\n * <p>Different stack tops pointing to different parents. Make array node for\n * the root where each element points to the corresponding original\n * parent.<br>\n * <embed src=\"images/SingletonMerge_DiffRootDiffPar.svg\"\n * type=\"image/svg+xml\"/></p>\n *\n * @param a the first {@link SingletonPredictionContext}\n * @param b the second {@link SingletonPredictionContext}\n * @param rootIsWildcard {@code true} if this is a local-context merge,\n * otherwise false to indicate a full-context merge\n * @param mergeCache\n */\nfunction mergeSingletons(a, b, rootIsWildcard, mergeCache) {\n\tif (mergeCache !== null) {\n\t\tlet previous = mergeCache.get(a, b);\n\t\tif (previous !== null) {\n\t\t\treturn previous;\n\t\t}\n\t\tprevious = mergeCache.get(b, a);\n\t\tif (previous !== null) {\n\t\t\treturn previous;\n\t\t}\n\t}\n\n\tconst rootMerge = mergeRoot(a, b, rootIsWildcard);\n\tif (rootMerge !== null) {\n\t\tif (mergeCache !== null) {\n\t\t\tmergeCache.set(a, b, rootMerge);\n\t\t}\n\t\treturn rootMerge;\n\t}\n\tif (a.returnState === b.returnState) {\n\t\tconst parent = merge(a.parentCtx, b.parentCtx, rootIsWildcard, mergeCache);\n\t\t// if parent is same as existing a or b parent or reduced to a parent,\n\t\t// return it\n\t\tif (parent === a.parentCtx) {\n\t\t\treturn a; // ax + bx = ax, if a=b\n\t\t}\n\t\tif (parent === b.parentCtx) {\n\t\t\treturn b; // ax + bx = bx, if a=b\n\t\t}\n\t\t// else: ax + ay = a'[x,y]\n\t\t// merge parents x and y, giving array node with x,y then remainders\n\t\t// of those graphs. dup a, a' points at merged array\n\t\t// new joined parent so create new singleton pointing to it, a'\n\t\tconst spc = SingletonPredictionContext.create(parent, a.returnState);\n\t\tif (mergeCache !== null) {\n\t\t\tmergeCache.set(a, b, spc);\n\t\t}\n\t\treturn spc;\n\t} else { // a != b payloads differ\n\t\t// see if we can collapse parents due to $+x parents if local ctx\n\t\tlet singleParent = null;\n\t\tif (a === b || (a.parentCtx !== null && a.parentCtx === b.parentCtx)) { // ax +\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// bx =\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// [a,b]x\n\t\t\tsingleParent = a.parentCtx;\n\t\t}\n\t\tif (singleParent !== null) { // parents are same\n\t\t\t// sort payloads and use same parent\n\t\t\tconst payloads = [ a.returnState, b.returnState ];\n\t\t\tif (a.returnState > b.returnState) {\n\t\t\t\tpayloads[0] = b.returnState;\n\t\t\t\tpayloads[1] = a.returnState;\n\t\t\t}\n\t\t\tconst parents = [ singleParent, singleParent ];\n\t\t\tconst apc = new ArrayPredictionContext(parents, payloads);\n\t\t\tif (mergeCache !== null) {\n\t\t\t\tmergeCache.set(a, b, apc);\n\t\t\t}\n\t\t\treturn apc;\n\t\t}\n\t\t// parents differ and can't merge them. Just pack together\n\t\t// into array; can't merge.\n\t\t// ax + by = [ax,by]\n\t\tconst payloads = [ a.returnState, b.returnState ];\n\t\tlet parents = [ a.parentCtx, b.parentCtx ];\n\t\tif (a.returnState > b.returnState) { // sort by payload\n\t\t\tpayloads[0] = b.returnState;\n\t\t\tpayloads[1] = a.returnState;\n\t\t\tparents = [ b.parentCtx, a.parentCtx ];\n\t\t}\n\t\tconst a_ = new ArrayPredictionContext(parents, payloads);\n\t\tif (mergeCache !== null) {\n\t\t\tmergeCache.set(a, b, a_);\n\t\t}\n\t\treturn a_;\n\t}\n}\n\n/**\n * Handle case where at least one of {@code a} or {@code b} is\n * {@link //EMPTY}. In the following diagrams, the symbol {@code $} is used\n * to represent {@link //EMPTY}.\n *\n * <h2>Local-Context Merges</h2>\n *\n * <p>These local-context merge operations are used when {@code rootIsWildcard}\n * is true.</p>\n *\n * <p>{@link //EMPTY} is superset of any graph; return {@link //EMPTY}.<br>\n * <embed src=\"images/LocalMerge_EmptyRoot.svg\" type=\"image/svg+xml\"/></p>\n *\n * <p>{@link //EMPTY} and anything is {@code //EMPTY}, so merged parent is\n * {@code //EMPTY}; return left graph.<br>\n * <embed src=\"images/LocalMerge_EmptyParent.svg\" type=\"image/svg+xml\"/></p>\n *\n * <p>Special case of last merge if local context.<br>\n * <embed src=\"images/LocalMerge_DiffRoots.svg\" type=\"image/svg+xml\"/></p>\n *\n * <h2>Full-Context Merges</h2>\n *\n * <p>These full-context merge operations are used when {@code rootIsWildcard}\n * is false.</p>\n *\n * <p><embed src=\"images/FullMerge_EmptyRoots.svg\" type=\"image/svg+xml\"/></p>\n *\n * <p>Must keep all contexts; {@link //EMPTY} in array is a special value (and\n * null parent).<br>\n * <embed src=\"images/FullMerge_EmptyRoot.svg\" type=\"image/svg+xml\"/></p>\n *\n * <p><embed src=\"images/FullMerge_SameRoot.svg\" type=\"image/svg+xml\"/></p>\n *\n * @param a the first {@link SingletonPredictionContext}\n * @param b the second {@link SingletonPredictionContext}\n * @param rootIsWildcard {@code true} if this is a local-context merge,\n * otherwise false to indicate a full-context merge\n */\nfunction mergeRoot(a, b, rootIsWildcard) {\n\tif (rootIsWildcard) {\n\t\tif (a === PredictionContext.EMPTY) {\n\t\t\treturn PredictionContext.EMPTY; // // + b =//\n\t\t}\n\t\tif (b === PredictionContext.EMPTY) {\n\t\t\treturn PredictionContext.EMPTY; // a +// =//\n\t\t}\n\t} else {\n\t\tif (a === PredictionContext.EMPTY && b === PredictionContext.EMPTY) {\n\t\t\treturn PredictionContext.EMPTY; // $ + $ = $\n\t\t} else if (a === PredictionContext.EMPTY) { // $ + x = [$,x]\n\t\t\tconst payloads = [ b.returnState,\n\t\t\t\t\tPredictionContext.EMPTY_RETURN_STATE ];\n\t\t\tconst parents = [ b.parentCtx, null ];\n\t\t\treturn new ArrayPredictionContext(parents, payloads);\n\t\t} else if (b === PredictionContext.EMPTY) { // x + $ = [$,x] ($ is always first if present)\n\t\t\tconst payloads = [ a.returnState, PredictionContext.EMPTY_RETURN_STATE ];\n\t\t\tconst parents = [ a.parentCtx, null ];\n\t\t\treturn new ArrayPredictionContext(parents, payloads);\n\t\t}\n\t}\n\treturn null;\n}\n\n/**\n * Merge two {@link ArrayPredictionContext} instances.\n *\n * <p>Different tops, different parents.<br>\n * <embed src=\"images/ArrayMerge_DiffTopDiffPar.svg\" type=\"image/svg+xml\"/></p>\n *\n * <p>Shared top, same parents.<br>\n * <embed src=\"images/ArrayMerge_ShareTopSamePar.svg\" type=\"image/svg+xml\"/></p>\n *\n * <p>Shared top, different parents.<br>\n * <embed src=\"images/ArrayMerge_ShareTopDiffPar.svg\" type=\"image/svg+xml\"/></p>\n *\n * <p>Shared top, all shared parents.<br>\n * <embed src=\"images/ArrayMerge_ShareTopSharePar.svg\"\n * type=\"image/svg+xml\"/></p>\n *\n * <p>Equal tops, merge parents and reduce top to\n * {@link SingletonPredictionContext}.<br>\n * <embed src=\"images/ArrayMerge_EqualTop.svg\" type=\"image/svg+xml\"/></p>\n */\nfunction mergeArrays(a, b, rootIsWildcard, mergeCache) {\n\tif (mergeCache !== null) {\n\t\tlet previous = mergeCache.get(a, b);\n\t\tif (previous !== null) {\n\t\t\treturn previous;\n\t\t}\n\t\tprevious = mergeCache.get(b, a);\n\t\tif (previous !== null) {\n\t\t\treturn previous;\n\t\t}\n\t}\n\t// merge sorted payloads a + b => M\n\tlet i = 0; // walks a\n\tlet j = 0; // walks b\n\tlet k = 0; // walks target M array\n\n\tlet mergedReturnStates = [];\n\tlet mergedParents = [];\n\t// walk and merge to yield mergedParents, mergedReturnStates\n\twhile (i < a.returnStates.length && j < b.returnStates.length) {\n\t\tconst a_parent = a.parents[i];\n\t\tconst b_parent = b.parents[j];\n\t\tif (a.returnStates[i] === b.returnStates[j]) {\n\t\t\t// same payload (stack tops are equal), must yield merged singleton\n\t\t\tconst payload = a.returnStates[i];\n\t\t\t// $+$ = $\n\t\t\tconst bothDollars = payload === PredictionContext.EMPTY_RETURN_STATE &&\n\t\t\t\t\ta_parent === null && b_parent === null;\n\t\t\tconst ax_ax = (a_parent !== null && b_parent !== null && a_parent === b_parent); // ax+ax\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// ->\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// ax\n\t\t\tif (bothDollars || ax_ax) {\n\t\t\t\tmergedParents[k] = a_parent; // choose left\n\t\t\t\tmergedReturnStates[k] = payload;\n\t\t\t} else { // ax+ay -> a'[x,y]\n\t\t\t\tmergedParents[k] = merge(a_parent, b_parent, rootIsWildcard, mergeCache);\n\t\t\t\tmergedReturnStates[k] = payload;\n\t\t\t}\n\t\t\ti += 1; // hop over left one as usual\n\t\t\tj += 1; // but also skip one in right side since we merge\n\t\t} else if (a.returnStates[i] < b.returnStates[j]) { // copy a[i] to M\n\t\t\tmergedParents[k] = a_parent;\n\t\t\tmergedReturnStates[k] = a.returnStates[i];\n\t\t\ti += 1;\n\t\t} else { // b > a, copy b[j] to M\n\t\t\tmergedParents[k] = b_parent;\n\t\t\tmergedReturnStates[k] = b.returnStates[j];\n\t\t\tj += 1;\n\t\t}\n\t\tk += 1;\n\t}\n\t// copy over any payloads remaining in either array\n\tif (i < a.returnStates.length) {\n\t\tfor (let p = i; p < a.returnStates.length; p++) {\n\t\t\tmergedParents[k] = a.parents[p];\n\t\t\tmergedReturnStates[k] = a.returnStates[p];\n\t\t\tk += 1;\n\t\t}\n\t} else {\n\t\tfor (let p = j; p < b.returnStates.length; p++) {\n\t\t\tmergedParents[k] = b.parents[p];\n\t\t\tmergedReturnStates[k] = b.returnStates[p];\n\t\t\tk += 1;\n\t\t}\n\t}\n\t// trim merged if we combined a few that had same stack tops\n\tif (k < mergedParents.length) { // write index < last position; trim\n\t\tif (k === 1) { // for just one merged element, return singleton top\n\t\t\tconst a_ = SingletonPredictionContext.create(mergedParents[0],\n\t\t\t\t\tmergedReturnStates[0]);\n\t\t\tif (mergeCache !== null) {\n\t\t\t\tmergeCache.set(a, b, a_);\n\t\t\t}\n\t\t\treturn a_;\n\t\t}\n\t\tmergedParents = mergedParents.slice(0, k);\n\t\tmergedReturnStates = mergedReturnStates.slice(0, k);\n\t}\n\n\tconst M = new ArrayPredictionContext(mergedParents, mergedReturnStates);\n\n\t// if we created same array as a or b, return that instead\n\t// TODO: track whether this is possible above during merge sort for speed\n\tif (M === a) {\n\t\tif (mergeCache !== null) {\n\t\t\tmergeCache.set(a, b, a);\n\t\t}\n\t\treturn a;\n\t}\n\tif (M === b) {\n\t\tif (mergeCache !== null) {\n\t\t\tmergeCache.set(a, b, b);\n\t\t}\n\t\treturn b;\n\t}\n\tcombineCommonParents(mergedParents);\n\n\tif (mergeCache !== null) {\n\t\tmergeCache.set(a, b, M);\n\t}\n\treturn M;\n}\n\n/**\n * Make pass over all <em>M</em> {@code parents}; merge any {@code equals()}\n * ones.\n */\nfunction combineCommonParents(parents) {\n\tconst uniqueParents = new Map();\n\n\tfor (let p = 0; p < parents.length; p++) {\n\t\tconst parent = parents[p];\n\t\tif (!(uniqueParents.containsKey(parent))) {\n\t\t\tuniqueParents.put(parent, parent);\n\t\t}\n\t}\n\tfor (let q = 0; q < parents.length; q++) {\n\t\tparents[q] = uniqueParents.get(parents[q]);\n\t}\n}\n\nfunction getCachedPredictionContext(context, contextCache, visited) {\n\tif (context.isEmpty()) {\n\t\treturn context;\n\t}\n\tlet existing = visited.get(context) || null;\n\tif (existing !== null) {\n\t\treturn existing;\n\t}\n\texisting = contextCache.get(context);\n\tif (existing !== null) {\n\t\tvisited.put(context, existing);\n\t\treturn existing;\n\t}\n\tlet changed = false;\n\tlet parents = [];\n\tfor (let i = 0; i < parents.length; i++) {\n\t\tconst parent = getCachedPredictionContext(context.getParent(i), contextCache, visited);\n\t\tif (changed || parent !== context.getParent(i)) {\n\t\t\tif (!changed) {\n\t\t\t\tparents = [];\n\t\t\t\tfor (let j = 0; j < context.length; j++) {\n\t\t\t\t\tparents[j] = context.getParent(j);\n\t\t\t\t}\n\t\t\t\tchanged = true;\n\t\t\t}\n\t\t\tparents[i] = parent;\n\t\t}\n\t}\n\tif (!changed) {\n\t\tcontextCache.add(context);\n\t\tvisited.put(context, context);\n\t\treturn context;\n\t}\n\tlet updated = null;\n\tif (parents.length === 0) {\n\t\tupdated = PredictionContext.EMPTY;\n\t} else if (parents.length === 1) {\n\t\tupdated = SingletonPredictionContext.create(parents[0], context\n\t\t\t\t.getReturnState(0));\n\t} else {\n\t\tupdated = new ArrayPredictionContext(parents, context.returnStates);\n\t}\n\tcontextCache.add(updated);\n\tvisited.put(updated, updated);\n\tvisited.put(context, updated);\n\n\treturn updated;\n}\n\n// ter's recursive version of Sam's getAllNodes()\nfunction getAllContextNodes(context, nodes, visited) {\n\tif (nodes === null) {\n\t\tnodes = [];\n\t\treturn getAllContextNodes(context, nodes, visited);\n\t} else if (visited === null) {\n\t\tvisited = new Map();\n\t\treturn getAllContextNodes(context, nodes, visited);\n\t} else {\n\t\tif (context === null || visited.containsKey(context)) {\n\t\t\treturn nodes;\n\t\t}\n\t\tvisited.put(context, context);\n\t\tnodes.push(context);\n\t\tfor (let i = 0; i < context.length; i++) {\n\t\t\tgetAllContextNodes(context.getParent(i), nodes, visited);\n\t\t}\n\t\treturn nodes;\n\t}\n}\n\nmodule.exports = {\n\tmerge,\n\tPredictionContext,\n\tPredictionContextCache,\n\tSingletonPredictionContext,\n\tpredictionContextFromRuleContext,\n\tgetCachedPredictionContext\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/PredictionContext.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/Recognizer.js":
/*!***************************************************************************************!*\
  !*** ../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/Recognizer.js ***!
  \***************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nconst {Token} = __webpack_require__(/*! ./Token */ \"(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/Token.js\");\nconst {ConsoleErrorListener} = __webpack_require__(/*! ./error/ErrorListener */ \"(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/error/ErrorListener.js\");\nconst {ProxyErrorListener} = __webpack_require__(/*! ./error/ErrorListener */ \"(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/error/ErrorListener.js\");\n\nclass Recognizer {\n    constructor() {\n        this._listeners = [ ConsoleErrorListener.INSTANCE ];\n        this._interp = null;\n        this._stateNumber = -1;\n    }\n\n    checkVersion(toolVersion) {\n        const runtimeVersion = \"4.9.3\";\n        if (runtimeVersion!==toolVersion) {\n            console.log(\"ANTLR runtime and generated code versions disagree: \"+runtimeVersion+\"!=\"+toolVersion);\n        }\n    }\n\n    addErrorListener(listener) {\n        this._listeners.push(listener);\n    }\n\n    removeErrorListeners() {\n        this._listeners = [];\n    }\n\n    getLiteralNames() {\n        return Object.getPrototypeOf(this).constructor.literalNames || [];\n    }\n\n    getSymbolicNames() {\n        return Object.getPrototypeOf(this).constructor.symbolicNames || [];\n    }\n\n    getTokenNames() {\n        if(!this.tokenNames) {\n            const literalNames = this.getLiteralNames();\n            const symbolicNames = this.getSymbolicNames();\n            const length = literalNames.length > symbolicNames.length ? literalNames.length : symbolicNames.length;\n            this.tokenNames = [];\n            for(let i=0; i<length; i++) {\n                this.tokenNames[i] = literalNames[i] || symbolicNames[i] || \"<INVALID\";\n            }\n        }\n        return this.tokenNames;\n    }\n\n    getTokenTypeMap() {\n        const tokenNames = this.getTokenNames();\n        if (tokenNames===null) {\n            throw(\"The current recognizer does not provide a list of token names.\");\n        }\n        let result = this.tokenTypeMapCache[tokenNames];\n        if(result===undefined) {\n            result = tokenNames.reduce(function(o, k, i) { o[k] = i; });\n            result.EOF = Token.EOF;\n            this.tokenTypeMapCache[tokenNames] = result;\n        }\n        return result;\n    }\n\n    /**\n     * Get a map from rule names to rule indexes.\n     * <p>Used for XPath and tree pattern compilation.</p>\n     */\n    getRuleIndexMap() {\n        const ruleNames = this.ruleNames;\n        if (ruleNames===null) {\n            throw(\"The current recognizer does not provide a list of rule names.\");\n        }\n        let result = this.ruleIndexMapCache[ruleNames]; // todo: should it be Recognizer.ruleIndexMapCache ?\n        if(result===undefined) {\n            result = ruleNames.reduce(function(o, k, i) { o[k] = i; });\n            this.ruleIndexMapCache[ruleNames] = result;\n        }\n        return result;\n    }\n\n    getTokenType(tokenName) {\n        const ttype = this.getTokenTypeMap()[tokenName];\n        if (ttype !==undefined) {\n            return ttype;\n        } else {\n            return Token.INVALID_TYPE;\n        }\n    }\n\n    // What is the error header, normally line/character position information?\n    getErrorHeader(e) {\n        const line = e.getOffendingToken().line;\n        const column = e.getOffendingToken().column;\n        return \"line \" + line + \":\" + column;\n    }\n\n    /**\n     * How should a token be displayed in an error message? The default\n     * is to display just the text, but during development you might\n     * want to have a lot of information spit out.  Override in that case\n     * to use t.toString() (which, for CommonToken, dumps everything about\n     * the token). This is better than forcing you to override a method in\n     * your token objects because you don't have to go modify your lexer\n     * so that it creates a new Java type.\n     *\n     * @deprecated This method is not called by the ANTLR 4 Runtime. Specific\n     * implementations of {@link ANTLRErrorStrategy} may provide a similar\n     * feature when necessary. For example, see\n     * {@link DefaultErrorStrategy//getTokenErrorDisplay}.*/\n    getTokenErrorDisplay(t) {\n        if (t===null) {\n            return \"<no token>\";\n        }\n        let s = t.text;\n        if (s===null) {\n            if (t.type===Token.EOF) {\n                s = \"<EOF>\";\n            } else {\n                s = \"<\" + t.type + \">\";\n            }\n        }\n        s = s.replace(\"\\n\",\"\\\\n\").replace(\"\\r\",\"\\\\r\").replace(\"\\t\",\"\\\\t\");\n        return \"'\" + s + \"'\";\n    }\n\n    getErrorListenerDispatch() {\n        return new ProxyErrorListener(this._listeners);\n    }\n\n    /**\n     * subclass needs to override these if there are sempreds or actions\n     * that the ATN interp needs to execute\n     */\n    sempred(localctx, ruleIndex, actionIndex) {\n        return true;\n    }\n\n    precpred(localctx , precedence) {\n        return true;\n    }\n\n    get state(){\n        return this._stateNumber;\n    }\n\n    set state(state) {\n        this._stateNumber = state;\n    }\n}\n\nRecognizer.tokenTypeMapCache = {};\nRecognizer.ruleIndexMapCache = {};\n\nmodule.exports = Recognizer;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/Recognizer.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/RuleContext.js":
/*!****************************************************************************************!*\
  !*** ../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/RuleContext.js ***!
  \****************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nconst {RuleNode} = __webpack_require__(/*! ./tree/Tree */ \"(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/tree/Tree.js\");\nconst {INVALID_INTERVAL} = __webpack_require__(/*! ./tree/Tree */ \"(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/tree/Tree.js\");\nconst Trees = __webpack_require__(/*! ./tree/Trees */ \"(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/tree/Trees.js\");\n\nclass RuleContext extends RuleNode {\n\t/** A rule context is a record of a single rule invocation. It knows\n\t * which context invoked it, if any. If there is no parent context, then\n\t * naturally the invoking state is not valid.  The parent link\n\t * provides a chain upwards from the current rule invocation to the root\n\t * of the invocation tree, forming a stack. We actually carry no\n\t * information about the rule associated with this context (except\n\t * when parsing). We keep only the state number of the invoking state from\n\t * the ATN submachine that invoked this. Contrast this with the s\n\t * pointer inside ParserRuleContext that tracks the current state\n\t * being \"executed\" for the current rule.\n\t *\n\t * The parent contexts are useful for computing lookahead sets and\n\t * getting error information.\n\t *\n\t * These objects are used during parsing and prediction.\n\t * For the special case of parsers, we use the subclass\n\t * ParserRuleContext.\n\t *\n\t * @see ParserRuleContext\n\t */\n\tconstructor(parent, invokingState) {\n\t\t// What context invoked this rule?\n\t\tsuper();\n\t\tthis.parentCtx = parent || null;\n\t\t/**\n\t\t * What state invoked the rule associated with this context?\n\t\t * The \"return address\" is the followState of invokingState\n\t\t * If parent is null, this should be -1.\n\t\t */\n\t\tthis.invokingState = invokingState || -1;\n\t}\n\n\tdepth() {\n\t\tlet n = 0;\n\t\tlet p = this;\n\t\twhile (p !== null) {\n\t\t\tp = p.parentCtx;\n\t\t\tn += 1;\n\t\t}\n\t\treturn n;\n\t}\n\n\t/**\n\t * A context is empty if there is no invoking state; meaning nobody call\n\t * current context.\n\t */\n\tisEmpty() {\n\t\treturn this.invokingState === -1;\n\t}\n\n// satisfy the ParseTree / SyntaxTree interface\n\tgetSourceInterval() {\n\t\treturn INVALID_INTERVAL;\n\t}\n\n\tgetRuleContext() {\n\t\treturn this;\n\t}\n\n\tgetPayload() {\n\t\treturn this;\n\t}\n\n\t/**\n\t * Return the combined text of all child nodes. This method only considers\n\t * tokens which have been added to the parse tree.\n\t * <p>\n\t * Since tokens on hidden channels (e.g. whitespace or comments) are not\n\t * added to the parse trees, they will not appear in the output of this\n\t * method.\n\t */\n\tgetText() {\n\t\tif (this.getChildCount() === 0) {\n\t\t\treturn \"\";\n\t\t} else {\n\t\t\treturn this.children.map(function(child) {\n\t\t\t\treturn child.getText();\n\t\t\t}).join(\"\");\n\t\t}\n\t}\n\n\t/**\n\t * For rule associated with this parse tree internal node, return\n\t * the outer alternative number used to match the input. Default\n\t * implementation does not compute nor store this alt num. Create\n\t * a subclass of ParserRuleContext with backing field and set\n\t * option contextSuperClass.\n\t * to set it.\n\t */\n\tgetAltNumber() {\n\t    // use constant value of ATN.INVALID_ALT_NUMBER to avoid circular dependency\n\t    return 0;\n    }\n\n\t/**\n\t * Set the outer alternative number for this context node. Default\n\t * implementation does nothing to avoid backing field overhead for\n\t * trees that don't need it.  Create\n\t * a subclass of ParserRuleContext with backing field and set\n\t * option contextSuperClass.\n\t */\n\tsetAltNumber(altNumber) { }\n\n\tgetChild(i) {\n\t\treturn null;\n\t}\n\n\tgetChildCount() {\n\t\treturn 0;\n\t}\n\n\taccept(visitor) {\n\t\treturn visitor.visitChildren(this);\n\t}\n\n\t/**\n\t * Print out a whole tree, not just a node, in LISP format\n\t * (root child1 .. childN). Print just a node if this is a leaf.\n\t */\n\ttoStringTree(ruleNames, recog) {\n\t\treturn Trees.toStringTree(this, ruleNames, recog);\n\t}\n\n\ttoString(ruleNames, stop) {\n\t\truleNames = ruleNames || null;\n\t\tstop = stop || null;\n\t\tlet p = this;\n\t\tlet s = \"[\";\n\t\twhile (p !== null && p !== stop) {\n\t\t\tif (ruleNames === null) {\n\t\t\t\tif (!p.isEmpty()) {\n\t\t\t\t\ts += p.invokingState;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst ri = p.ruleIndex;\n\t\t\t\tconst ruleName = (ri >= 0 && ri < ruleNames.length) ? ruleNames[ri]\n\t\t\t\t\t\t: \"\" + ri;\n\t\t\t\ts += ruleName;\n\t\t\t}\n\t\t\tif (p.parentCtx !== null && (ruleNames !== null || !p.parentCtx.isEmpty())) {\n\t\t\t\ts += \" \";\n\t\t\t}\n\t\t\tp = p.parentCtx;\n\t\t}\n\t\ts += \"]\";\n\t\treturn s;\n\t}\n}\n\nmodule.exports = RuleContext;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2FudGxyNEA0LjkuMy9ub2RlX21vZHVsZXMvYW50bHI0L3NyYy9hbnRscjQvUnVsZUNvbnRleHQuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBTyxVQUFVLEVBQUUsbUJBQU8sQ0FBQyx5R0FBYTtBQUN4QyxPQUFPLGtCQUFrQixFQUFFLG1CQUFPLENBQUMseUdBQWE7QUFDaEQsY0FBYyxtQkFBTyxDQUFDLDJHQUFjOztBQUVwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLHNEQUFzRDtBQUN0RDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsiL1VzZXJzL2V0aGFua2ltL05lc3Rvci9tZWRmZXRjaC5qcy9ub2RlX21vZHVsZXMvLnBucG0vYW50bHI0QDQuOS4zL25vZGVfbW9kdWxlcy9hbnRscjQvc3JjL2FudGxyNC9SdWxlQ29udGV4dC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiBDb3B5cmlnaHQgKGMpIDIwMTItMjAxNyBUaGUgQU5UTFIgUHJvamVjdC4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFVzZSBvZiB0aGlzIGZpbGUgaXMgZ292ZXJuZWQgYnkgdGhlIEJTRCAzLWNsYXVzZSBsaWNlbnNlIHRoYXRcbiAqIGNhbiBiZSBmb3VuZCBpbiB0aGUgTElDRU5TRS50eHQgZmlsZSBpbiB0aGUgcHJvamVjdCByb290LlxuICovXG5cbmNvbnN0IHtSdWxlTm9kZX0gPSByZXF1aXJlKCcuL3RyZWUvVHJlZScpO1xuY29uc3Qge0lOVkFMSURfSU5URVJWQUx9ID0gcmVxdWlyZSgnLi90cmVlL1RyZWUnKTtcbmNvbnN0IFRyZWVzID0gcmVxdWlyZSgnLi90cmVlL1RyZWVzJyk7XG5cbmNsYXNzIFJ1bGVDb250ZXh0IGV4dGVuZHMgUnVsZU5vZGUge1xuXHQvKiogQSBydWxlIGNvbnRleHQgaXMgYSByZWNvcmQgb2YgYSBzaW5nbGUgcnVsZSBpbnZvY2F0aW9uLiBJdCBrbm93c1xuXHQgKiB3aGljaCBjb250ZXh0IGludm9rZWQgaXQsIGlmIGFueS4gSWYgdGhlcmUgaXMgbm8gcGFyZW50IGNvbnRleHQsIHRoZW5cblx0ICogbmF0dXJhbGx5IHRoZSBpbnZva2luZyBzdGF0ZSBpcyBub3QgdmFsaWQuICBUaGUgcGFyZW50IGxpbmtcblx0ICogcHJvdmlkZXMgYSBjaGFpbiB1cHdhcmRzIGZyb20gdGhlIGN1cnJlbnQgcnVsZSBpbnZvY2F0aW9uIHRvIHRoZSByb290XG5cdCAqIG9mIHRoZSBpbnZvY2F0aW9uIHRyZWUsIGZvcm1pbmcgYSBzdGFjay4gV2UgYWN0dWFsbHkgY2Fycnkgbm9cblx0ICogaW5mb3JtYXRpb24gYWJvdXQgdGhlIHJ1bGUgYXNzb2NpYXRlZCB3aXRoIHRoaXMgY29udGV4dCAoZXhjZXB0XG5cdCAqIHdoZW4gcGFyc2luZykuIFdlIGtlZXAgb25seSB0aGUgc3RhdGUgbnVtYmVyIG9mIHRoZSBpbnZva2luZyBzdGF0ZSBmcm9tXG5cdCAqIHRoZSBBVE4gc3VibWFjaGluZSB0aGF0IGludm9rZWQgdGhpcy4gQ29udHJhc3QgdGhpcyB3aXRoIHRoZSBzXG5cdCAqIHBvaW50ZXIgaW5zaWRlIFBhcnNlclJ1bGVDb250ZXh0IHRoYXQgdHJhY2tzIHRoZSBjdXJyZW50IHN0YXRlXG5cdCAqIGJlaW5nIFwiZXhlY3V0ZWRcIiBmb3IgdGhlIGN1cnJlbnQgcnVsZS5cblx0ICpcblx0ICogVGhlIHBhcmVudCBjb250ZXh0cyBhcmUgdXNlZnVsIGZvciBjb21wdXRpbmcgbG9va2FoZWFkIHNldHMgYW5kXG5cdCAqIGdldHRpbmcgZXJyb3IgaW5mb3JtYXRpb24uXG5cdCAqXG5cdCAqIFRoZXNlIG9iamVjdHMgYXJlIHVzZWQgZHVyaW5nIHBhcnNpbmcgYW5kIHByZWRpY3Rpb24uXG5cdCAqIEZvciB0aGUgc3BlY2lhbCBjYXNlIG9mIHBhcnNlcnMsIHdlIHVzZSB0aGUgc3ViY2xhc3Ncblx0ICogUGFyc2VyUnVsZUNvbnRleHQuXG5cdCAqXG5cdCAqIEBzZWUgUGFyc2VyUnVsZUNvbnRleHRcblx0ICovXG5cdGNvbnN0cnVjdG9yKHBhcmVudCwgaW52b2tpbmdTdGF0ZSkge1xuXHRcdC8vIFdoYXQgY29udGV4dCBpbnZva2VkIHRoaXMgcnVsZT9cblx0XHRzdXBlcigpO1xuXHRcdHRoaXMucGFyZW50Q3R4ID0gcGFyZW50IHx8IG51bGw7XG5cdFx0LyoqXG5cdFx0ICogV2hhdCBzdGF0ZSBpbnZva2VkIHRoZSBydWxlIGFzc29jaWF0ZWQgd2l0aCB0aGlzIGNvbnRleHQ/XG5cdFx0ICogVGhlIFwicmV0dXJuIGFkZHJlc3NcIiBpcyB0aGUgZm9sbG93U3RhdGUgb2YgaW52b2tpbmdTdGF0ZVxuXHRcdCAqIElmIHBhcmVudCBpcyBudWxsLCB0aGlzIHNob3VsZCBiZSAtMS5cblx0XHQgKi9cblx0XHR0aGlzLmludm9raW5nU3RhdGUgPSBpbnZva2luZ1N0YXRlIHx8IC0xO1xuXHR9XG5cblx0ZGVwdGgoKSB7XG5cdFx0bGV0IG4gPSAwO1xuXHRcdGxldCBwID0gdGhpcztcblx0XHR3aGlsZSAocCAhPT0gbnVsbCkge1xuXHRcdFx0cCA9IHAucGFyZW50Q3R4O1xuXHRcdFx0biArPSAxO1xuXHRcdH1cblx0XHRyZXR1cm4gbjtcblx0fVxuXG5cdC8qKlxuXHQgKiBBIGNvbnRleHQgaXMgZW1wdHkgaWYgdGhlcmUgaXMgbm8gaW52b2tpbmcgc3RhdGU7IG1lYW5pbmcgbm9ib2R5IGNhbGxcblx0ICogY3VycmVudCBjb250ZXh0LlxuXHQgKi9cblx0aXNFbXB0eSgpIHtcblx0XHRyZXR1cm4gdGhpcy5pbnZva2luZ1N0YXRlID09PSAtMTtcblx0fVxuXG4vLyBzYXRpc2Z5IHRoZSBQYXJzZVRyZWUgLyBTeW50YXhUcmVlIGludGVyZmFjZVxuXHRnZXRTb3VyY2VJbnRlcnZhbCgpIHtcblx0XHRyZXR1cm4gSU5WQUxJRF9JTlRFUlZBTDtcblx0fVxuXG5cdGdldFJ1bGVDb250ZXh0KCkge1xuXHRcdHJldHVybiB0aGlzO1xuXHR9XG5cblx0Z2V0UGF5bG9hZCgpIHtcblx0XHRyZXR1cm4gdGhpcztcblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm4gdGhlIGNvbWJpbmVkIHRleHQgb2YgYWxsIGNoaWxkIG5vZGVzLiBUaGlzIG1ldGhvZCBvbmx5IGNvbnNpZGVyc1xuXHQgKiB0b2tlbnMgd2hpY2ggaGF2ZSBiZWVuIGFkZGVkIHRvIHRoZSBwYXJzZSB0cmVlLlxuXHQgKiA8cD5cblx0ICogU2luY2UgdG9rZW5zIG9uIGhpZGRlbiBjaGFubmVscyAoZS5nLiB3aGl0ZXNwYWNlIG9yIGNvbW1lbnRzKSBhcmUgbm90XG5cdCAqIGFkZGVkIHRvIHRoZSBwYXJzZSB0cmVlcywgdGhleSB3aWxsIG5vdCBhcHBlYXIgaW4gdGhlIG91dHB1dCBvZiB0aGlzXG5cdCAqIG1ldGhvZC5cblx0ICovXG5cdGdldFRleHQoKSB7XG5cdFx0aWYgKHRoaXMuZ2V0Q2hpbGRDb3VudCgpID09PSAwKSB7XG5cdFx0XHRyZXR1cm4gXCJcIjtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cmV0dXJuIHRoaXMuY2hpbGRyZW4ubWFwKGZ1bmN0aW9uKGNoaWxkKSB7XG5cdFx0XHRcdHJldHVybiBjaGlsZC5nZXRUZXh0KCk7XG5cdFx0XHR9KS5qb2luKFwiXCIpO1xuXHRcdH1cblx0fVxuXG5cdC8qKlxuXHQgKiBGb3IgcnVsZSBhc3NvY2lhdGVkIHdpdGggdGhpcyBwYXJzZSB0cmVlIGludGVybmFsIG5vZGUsIHJldHVyblxuXHQgKiB0aGUgb3V0ZXIgYWx0ZXJuYXRpdmUgbnVtYmVyIHVzZWQgdG8gbWF0Y2ggdGhlIGlucHV0LiBEZWZhdWx0XG5cdCAqIGltcGxlbWVudGF0aW9uIGRvZXMgbm90IGNvbXB1dGUgbm9yIHN0b3JlIHRoaXMgYWx0IG51bS4gQ3JlYXRlXG5cdCAqIGEgc3ViY2xhc3Mgb2YgUGFyc2VyUnVsZUNvbnRleHQgd2l0aCBiYWNraW5nIGZpZWxkIGFuZCBzZXRcblx0ICogb3B0aW9uIGNvbnRleHRTdXBlckNsYXNzLlxuXHQgKiB0byBzZXQgaXQuXG5cdCAqL1xuXHRnZXRBbHROdW1iZXIoKSB7XG5cdCAgICAvLyB1c2UgY29uc3RhbnQgdmFsdWUgb2YgQVROLklOVkFMSURfQUxUX05VTUJFUiB0byBhdm9pZCBjaXJjdWxhciBkZXBlbmRlbmN5XG5cdCAgICByZXR1cm4gMDtcbiAgICB9XG5cblx0LyoqXG5cdCAqIFNldCB0aGUgb3V0ZXIgYWx0ZXJuYXRpdmUgbnVtYmVyIGZvciB0aGlzIGNvbnRleHQgbm9kZS4gRGVmYXVsdFxuXHQgKiBpbXBsZW1lbnRhdGlvbiBkb2VzIG5vdGhpbmcgdG8gYXZvaWQgYmFja2luZyBmaWVsZCBvdmVyaGVhZCBmb3Jcblx0ICogdHJlZXMgdGhhdCBkb24ndCBuZWVkIGl0LiAgQ3JlYXRlXG5cdCAqIGEgc3ViY2xhc3Mgb2YgUGFyc2VyUnVsZUNvbnRleHQgd2l0aCBiYWNraW5nIGZpZWxkIGFuZCBzZXRcblx0ICogb3B0aW9uIGNvbnRleHRTdXBlckNsYXNzLlxuXHQgKi9cblx0c2V0QWx0TnVtYmVyKGFsdE51bWJlcikgeyB9XG5cblx0Z2V0Q2hpbGQoaSkge1xuXHRcdHJldHVybiBudWxsO1xuXHR9XG5cblx0Z2V0Q2hpbGRDb3VudCgpIHtcblx0XHRyZXR1cm4gMDtcblx0fVxuXG5cdGFjY2VwdCh2aXNpdG9yKSB7XG5cdFx0cmV0dXJuIHZpc2l0b3IudmlzaXRDaGlsZHJlbih0aGlzKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBQcmludCBvdXQgYSB3aG9sZSB0cmVlLCBub3QganVzdCBhIG5vZGUsIGluIExJU1AgZm9ybWF0XG5cdCAqIChyb290IGNoaWxkMSAuLiBjaGlsZE4pLiBQcmludCBqdXN0IGEgbm9kZSBpZiB0aGlzIGlzIGEgbGVhZi5cblx0ICovXG5cdHRvU3RyaW5nVHJlZShydWxlTmFtZXMsIHJlY29nKSB7XG5cdFx0cmV0dXJuIFRyZWVzLnRvU3RyaW5nVHJlZSh0aGlzLCBydWxlTmFtZXMsIHJlY29nKTtcblx0fVxuXG5cdHRvU3RyaW5nKHJ1bGVOYW1lcywgc3RvcCkge1xuXHRcdHJ1bGVOYW1lcyA9IHJ1bGVOYW1lcyB8fCBudWxsO1xuXHRcdHN0b3AgPSBzdG9wIHx8IG51bGw7XG5cdFx0bGV0IHAgPSB0aGlzO1xuXHRcdGxldCBzID0gXCJbXCI7XG5cdFx0d2hpbGUgKHAgIT09IG51bGwgJiYgcCAhPT0gc3RvcCkge1xuXHRcdFx0aWYgKHJ1bGVOYW1lcyA9PT0gbnVsbCkge1xuXHRcdFx0XHRpZiAoIXAuaXNFbXB0eSgpKSB7XG5cdFx0XHRcdFx0cyArPSBwLmludm9raW5nU3RhdGU7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGNvbnN0IHJpID0gcC5ydWxlSW5kZXg7XG5cdFx0XHRcdGNvbnN0IHJ1bGVOYW1lID0gKHJpID49IDAgJiYgcmkgPCBydWxlTmFtZXMubGVuZ3RoKSA/IHJ1bGVOYW1lc1tyaV1cblx0XHRcdFx0XHRcdDogXCJcIiArIHJpO1xuXHRcdFx0XHRzICs9IHJ1bGVOYW1lO1xuXHRcdFx0fVxuXHRcdFx0aWYgKHAucGFyZW50Q3R4ICE9PSBudWxsICYmIChydWxlTmFtZXMgIT09IG51bGwgfHwgIXAucGFyZW50Q3R4LmlzRW1wdHkoKSkpIHtcblx0XHRcdFx0cyArPSBcIiBcIjtcblx0XHRcdH1cblx0XHRcdHAgPSBwLnBhcmVudEN0eDtcblx0XHR9XG5cdFx0cyArPSBcIl1cIjtcblx0XHRyZXR1cm4gcztcblx0fVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFJ1bGVDb250ZXh0O1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/RuleContext.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/Token.js":
/*!**********************************************************************************!*\
  !*** ../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/Token.js ***!
  \**********************************************************************************/
/***/ ((module) => {

eval("/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\n/**\n * A token has properties: text, type, line, character position in the line\n * (so we can ignore tabs), token channel, index, and source from which\n * we obtained this token.\n */\nclass Token {\n\tconstructor() {\n\t\tthis.source = null;\n\t\tthis.type = null; // token type of the token\n\t\tthis.channel = null; // The parser ignores everything not on DEFAULT_CHANNEL\n\t\tthis.start = null; // optional; return -1 if not implemented.\n\t\tthis.stop = null; // optional; return -1 if not implemented.\n\t\tthis.tokenIndex = null; // from 0..n-1 of the token object in the input stream\n\t\tthis.line = null; // line=1..n of the 1st character\n\t\tthis.column = null; // beginning of the line at which it occurs, 0..n-1\n\t\tthis._text = null; // text of the token.\n\t}\n\n\tgetTokenSource() {\n\t\treturn this.source[0];\n\t}\n\n\tgetInputStream() {\n\t\treturn this.source[1];\n\t}\n\n\tget text(){\n\t\treturn this._text;\n\t}\n\n\tset text(text) {\n\t\tthis._text = text;\n\t}\n}\n\nToken.INVALID_TYPE = 0;\n\n/**\n * During lookahead operations, this \"token\" signifies we hit rule end ATN state\n * and did not follow it despite needing to.\n */\nToken.EPSILON = -2;\n\nToken.MIN_USER_TOKEN_TYPE = 1;\n\nToken.EOF = -1;\n\n/**\n * All tokens go to the parser (unless skip() is called in that rule)\n * on a particular \"channel\". The parser tunes to a particular channel\n * so that whitespace etc... can go to the parser on a \"hidden\" channel.\n */\nToken.DEFAULT_CHANNEL = 0;\n\n/**\n * Anything on different channel than DEFAULT_CHANNEL is not parsed\n * by parser.\n */\nToken.HIDDEN_CHANNEL = 1;\n\n\nclass CommonToken extends Token {\n\tconstructor(source, type, channel, start, stop) {\n\t\tsuper();\n\t\tthis.source = source !== undefined ? source : CommonToken.EMPTY_SOURCE;\n\t\tthis.type = type !== undefined ? type : null;\n\t\tthis.channel = channel !== undefined ? channel : Token.DEFAULT_CHANNEL;\n\t\tthis.start = start !== undefined ? start : -1;\n\t\tthis.stop = stop !== undefined ? stop : -1;\n\t\tthis.tokenIndex = -1;\n\t\tif (this.source[0] !== null) {\n\t\t\tthis.line = source[0].line;\n\t\t\tthis.column = source[0].column;\n\t\t} else {\n\t\t\tthis.column = -1;\n\t\t}\n\t}\n\n\t/**\n\t * Constructs a new {@link CommonToken} as a copy of another {@link Token}.\n\t *\n\t * <p>\n\t * If {@code oldToken} is also a {@link CommonToken} instance, the newly\n\t * constructed token will share a reference to the {@link //text} field and\n\t * the {@link Pair} stored in {@link //source}. Otherwise, {@link //text} will\n\t * be assigned the result of calling {@link //getText}, and {@link //source}\n\t * will be constructed from the result of {@link Token//getTokenSource} and\n\t * {@link Token//getInputStream}.</p>\n\t *\n\t * @param oldToken The token to copy.\n\t */\n\tclone() {\n\t\tconst t = new CommonToken(this.source, this.type, this.channel, this.start, this.stop);\n\t\tt.tokenIndex = this.tokenIndex;\n\t\tt.line = this.line;\n\t\tt.column = this.column;\n\t\tt.text = this.text;\n\t\treturn t;\n\t}\n\n\ttoString() {\n\t\tlet txt = this.text;\n\t\tif (txt !== null) {\n\t\t\ttxt = txt.replace(/\\n/g, \"\\\\n\").replace(/\\r/g, \"\\\\r\").replace(/\\t/g, \"\\\\t\");\n\t\t} else {\n\t\t\ttxt = \"<no text>\";\n\t\t}\n\t\treturn \"[@\" + this.tokenIndex + \",\" + this.start + \":\" + this.stop + \"='\" +\n\t\t\t\ttxt + \"',<\" + this.type + \">\" +\n\t\t\t\t(this.channel > 0 ? \",channel=\" + this.channel : \"\") + \",\" +\n\t\t\t\tthis.line + \":\" + this.column + \"]\";\n\t}\n\n\tget text(){\n\t\tif (this._text !== null) {\n\t\t\treturn this._text;\n\t\t}\n\t\tconst input = this.getInputStream();\n\t\tif (input === null) {\n\t\t\treturn null;\n\t\t}\n\t\tconst n = input.size;\n\t\tif (this.start < n && this.stop < n) {\n\t\t\treturn input.getText(this.start, this.stop);\n\t\t} else {\n\t\t\treturn \"<EOF>\";\n\t\t}\n\t}\n\n\tset text(text) {\n\t\tthis._text = text;\n\t}\n}\n\n/**\n * An empty {@link Pair} which is used as the default value of\n * {@link //source} for tokens that do not have a source.\n */\nCommonToken.EMPTY_SOURCE = [ null, null ];\n\nmodule.exports = {\n\tToken,\n\tCommonToken\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2FudGxyNEA0LjkuMy9ub2RlX21vZHVsZXMvYW50bHI0L3NyYy9hbnRscjQvVG9rZW4uanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQjtBQUNwQix1QkFBdUI7QUFDdkIscUJBQXFCLGFBQWE7QUFDbEMsb0JBQW9CLGFBQWE7QUFDakMsMEJBQTBCO0FBQzFCLG9CQUFvQjtBQUNwQixzQkFBc0I7QUFDdEIscUJBQXFCO0FBQ3JCOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxzQkFBc0IsbUJBQW1CLHNCQUFzQixZQUFZO0FBQzNFO0FBQ0E7QUFDQSxRQUFRLGdCQUFnQixXQUFXLG1CQUFtQjtBQUN0RCxxREFBcUQsY0FBYztBQUNuRSxTQUFTLFlBQVksV0FBVyxlQUFlLGNBQWMsY0FBYztBQUMzRSx1Q0FBdUMsZ0JBQWdCLE9BQU87QUFDOUQsNENBQTRDLDZCQUE2QjtBQUN6RSxLQUFLLDRCQUE0QjtBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsYUFBYSxZQUFZO0FBQ3pCLElBQUksZ0JBQWdCO0FBQ3BCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9Vc2Vycy9ldGhhbmtpbS9OZXN0b3IvbWVkZmV0Y2guanMvbm9kZV9tb2R1bGVzLy5wbnBtL2FudGxyNEA0LjkuMy9ub2RlX21vZHVsZXMvYW50bHI0L3NyYy9hbnRscjQvVG9rZW4uanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyogQ29weXJpZ2h0IChjKSAyMDEyLTIwMTcgVGhlIEFOVExSIFByb2plY3QuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBVc2Ugb2YgdGhpcyBmaWxlIGlzIGdvdmVybmVkIGJ5IHRoZSBCU0QgMy1jbGF1c2UgbGljZW5zZSB0aGF0XG4gKiBjYW4gYmUgZm91bmQgaW4gdGhlIExJQ0VOU0UudHh0IGZpbGUgaW4gdGhlIHByb2plY3Qgcm9vdC5cbiAqL1xuXG4vKipcbiAqIEEgdG9rZW4gaGFzIHByb3BlcnRpZXM6IHRleHQsIHR5cGUsIGxpbmUsIGNoYXJhY3RlciBwb3NpdGlvbiBpbiB0aGUgbGluZVxuICogKHNvIHdlIGNhbiBpZ25vcmUgdGFicyksIHRva2VuIGNoYW5uZWwsIGluZGV4LCBhbmQgc291cmNlIGZyb20gd2hpY2hcbiAqIHdlIG9idGFpbmVkIHRoaXMgdG9rZW4uXG4gKi9cbmNsYXNzIFRva2VuIHtcblx0Y29uc3RydWN0b3IoKSB7XG5cdFx0dGhpcy5zb3VyY2UgPSBudWxsO1xuXHRcdHRoaXMudHlwZSA9IG51bGw7IC8vIHRva2VuIHR5cGUgb2YgdGhlIHRva2VuXG5cdFx0dGhpcy5jaGFubmVsID0gbnVsbDsgLy8gVGhlIHBhcnNlciBpZ25vcmVzIGV2ZXJ5dGhpbmcgbm90IG9uIERFRkFVTFRfQ0hBTk5FTFxuXHRcdHRoaXMuc3RhcnQgPSBudWxsOyAvLyBvcHRpb25hbDsgcmV0dXJuIC0xIGlmIG5vdCBpbXBsZW1lbnRlZC5cblx0XHR0aGlzLnN0b3AgPSBudWxsOyAvLyBvcHRpb25hbDsgcmV0dXJuIC0xIGlmIG5vdCBpbXBsZW1lbnRlZC5cblx0XHR0aGlzLnRva2VuSW5kZXggPSBudWxsOyAvLyBmcm9tIDAuLm4tMSBvZiB0aGUgdG9rZW4gb2JqZWN0IGluIHRoZSBpbnB1dCBzdHJlYW1cblx0XHR0aGlzLmxpbmUgPSBudWxsOyAvLyBsaW5lPTEuLm4gb2YgdGhlIDFzdCBjaGFyYWN0ZXJcblx0XHR0aGlzLmNvbHVtbiA9IG51bGw7IC8vIGJlZ2lubmluZyBvZiB0aGUgbGluZSBhdCB3aGljaCBpdCBvY2N1cnMsIDAuLm4tMVxuXHRcdHRoaXMuX3RleHQgPSBudWxsOyAvLyB0ZXh0IG9mIHRoZSB0b2tlbi5cblx0fVxuXG5cdGdldFRva2VuU291cmNlKCkge1xuXHRcdHJldHVybiB0aGlzLnNvdXJjZVswXTtcblx0fVxuXG5cdGdldElucHV0U3RyZWFtKCkge1xuXHRcdHJldHVybiB0aGlzLnNvdXJjZVsxXTtcblx0fVxuXG5cdGdldCB0ZXh0KCl7XG5cdFx0cmV0dXJuIHRoaXMuX3RleHQ7XG5cdH1cblxuXHRzZXQgdGV4dCh0ZXh0KSB7XG5cdFx0dGhpcy5fdGV4dCA9IHRleHQ7XG5cdH1cbn1cblxuVG9rZW4uSU5WQUxJRF9UWVBFID0gMDtcblxuLyoqXG4gKiBEdXJpbmcgbG9va2FoZWFkIG9wZXJhdGlvbnMsIHRoaXMgXCJ0b2tlblwiIHNpZ25pZmllcyB3ZSBoaXQgcnVsZSBlbmQgQVROIHN0YXRlXG4gKiBhbmQgZGlkIG5vdCBmb2xsb3cgaXQgZGVzcGl0ZSBuZWVkaW5nIHRvLlxuICovXG5Ub2tlbi5FUFNJTE9OID0gLTI7XG5cblRva2VuLk1JTl9VU0VSX1RPS0VOX1RZUEUgPSAxO1xuXG5Ub2tlbi5FT0YgPSAtMTtcblxuLyoqXG4gKiBBbGwgdG9rZW5zIGdvIHRvIHRoZSBwYXJzZXIgKHVubGVzcyBza2lwKCkgaXMgY2FsbGVkIGluIHRoYXQgcnVsZSlcbiAqIG9uIGEgcGFydGljdWxhciBcImNoYW5uZWxcIi4gVGhlIHBhcnNlciB0dW5lcyB0byBhIHBhcnRpY3VsYXIgY2hhbm5lbFxuICogc28gdGhhdCB3aGl0ZXNwYWNlIGV0Yy4uLiBjYW4gZ28gdG8gdGhlIHBhcnNlciBvbiBhIFwiaGlkZGVuXCIgY2hhbm5lbC5cbiAqL1xuVG9rZW4uREVGQVVMVF9DSEFOTkVMID0gMDtcblxuLyoqXG4gKiBBbnl0aGluZyBvbiBkaWZmZXJlbnQgY2hhbm5lbCB0aGFuIERFRkFVTFRfQ0hBTk5FTCBpcyBub3QgcGFyc2VkXG4gKiBieSBwYXJzZXIuXG4gKi9cblRva2VuLkhJRERFTl9DSEFOTkVMID0gMTtcblxuXG5jbGFzcyBDb21tb25Ub2tlbiBleHRlbmRzIFRva2VuIHtcblx0Y29uc3RydWN0b3Ioc291cmNlLCB0eXBlLCBjaGFubmVsLCBzdGFydCwgc3RvcCkge1xuXHRcdHN1cGVyKCk7XG5cdFx0dGhpcy5zb3VyY2UgPSBzb3VyY2UgIT09IHVuZGVmaW5lZCA/IHNvdXJjZSA6IENvbW1vblRva2VuLkVNUFRZX1NPVVJDRTtcblx0XHR0aGlzLnR5cGUgPSB0eXBlICE9PSB1bmRlZmluZWQgPyB0eXBlIDogbnVsbDtcblx0XHR0aGlzLmNoYW5uZWwgPSBjaGFubmVsICE9PSB1bmRlZmluZWQgPyBjaGFubmVsIDogVG9rZW4uREVGQVVMVF9DSEFOTkVMO1xuXHRcdHRoaXMuc3RhcnQgPSBzdGFydCAhPT0gdW5kZWZpbmVkID8gc3RhcnQgOiAtMTtcblx0XHR0aGlzLnN0b3AgPSBzdG9wICE9PSB1bmRlZmluZWQgPyBzdG9wIDogLTE7XG5cdFx0dGhpcy50b2tlbkluZGV4ID0gLTE7XG5cdFx0aWYgKHRoaXMuc291cmNlWzBdICE9PSBudWxsKSB7XG5cdFx0XHR0aGlzLmxpbmUgPSBzb3VyY2VbMF0ubGluZTtcblx0XHRcdHRoaXMuY29sdW1uID0gc291cmNlWzBdLmNvbHVtbjtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpcy5jb2x1bW4gPSAtMTtcblx0XHR9XG5cdH1cblxuXHQvKipcblx0ICogQ29uc3RydWN0cyBhIG5ldyB7QGxpbmsgQ29tbW9uVG9rZW59IGFzIGEgY29weSBvZiBhbm90aGVyIHtAbGluayBUb2tlbn0uXG5cdCAqXG5cdCAqIDxwPlxuXHQgKiBJZiB7QGNvZGUgb2xkVG9rZW59IGlzIGFsc28gYSB7QGxpbmsgQ29tbW9uVG9rZW59IGluc3RhbmNlLCB0aGUgbmV3bHlcblx0ICogY29uc3RydWN0ZWQgdG9rZW4gd2lsbCBzaGFyZSBhIHJlZmVyZW5jZSB0byB0aGUge0BsaW5rIC8vdGV4dH0gZmllbGQgYW5kXG5cdCAqIHRoZSB7QGxpbmsgUGFpcn0gc3RvcmVkIGluIHtAbGluayAvL3NvdXJjZX0uIE90aGVyd2lzZSwge0BsaW5rIC8vdGV4dH0gd2lsbFxuXHQgKiBiZSBhc3NpZ25lZCB0aGUgcmVzdWx0IG9mIGNhbGxpbmcge0BsaW5rIC8vZ2V0VGV4dH0sIGFuZCB7QGxpbmsgLy9zb3VyY2V9XG5cdCAqIHdpbGwgYmUgY29uc3RydWN0ZWQgZnJvbSB0aGUgcmVzdWx0IG9mIHtAbGluayBUb2tlbi8vZ2V0VG9rZW5Tb3VyY2V9IGFuZFxuXHQgKiB7QGxpbmsgVG9rZW4vL2dldElucHV0U3RyZWFtfS48L3A+XG5cdCAqXG5cdCAqIEBwYXJhbSBvbGRUb2tlbiBUaGUgdG9rZW4gdG8gY29weS5cblx0ICovXG5cdGNsb25lKCkge1xuXHRcdGNvbnN0IHQgPSBuZXcgQ29tbW9uVG9rZW4odGhpcy5zb3VyY2UsIHRoaXMudHlwZSwgdGhpcy5jaGFubmVsLCB0aGlzLnN0YXJ0LCB0aGlzLnN0b3ApO1xuXHRcdHQudG9rZW5JbmRleCA9IHRoaXMudG9rZW5JbmRleDtcblx0XHR0LmxpbmUgPSB0aGlzLmxpbmU7XG5cdFx0dC5jb2x1bW4gPSB0aGlzLmNvbHVtbjtcblx0XHR0LnRleHQgPSB0aGlzLnRleHQ7XG5cdFx0cmV0dXJuIHQ7XG5cdH1cblxuXHR0b1N0cmluZygpIHtcblx0XHRsZXQgdHh0ID0gdGhpcy50ZXh0O1xuXHRcdGlmICh0eHQgIT09IG51bGwpIHtcblx0XHRcdHR4dCA9IHR4dC5yZXBsYWNlKC9cXG4vZywgXCJcXFxcblwiKS5yZXBsYWNlKC9cXHIvZywgXCJcXFxcclwiKS5yZXBsYWNlKC9cXHQvZywgXCJcXFxcdFwiKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dHh0ID0gXCI8bm8gdGV4dD5cIjtcblx0XHR9XG5cdFx0cmV0dXJuIFwiW0BcIiArIHRoaXMudG9rZW5JbmRleCArIFwiLFwiICsgdGhpcy5zdGFydCArIFwiOlwiICsgdGhpcy5zdG9wICsgXCI9J1wiICtcblx0XHRcdFx0dHh0ICsgXCInLDxcIiArIHRoaXMudHlwZSArIFwiPlwiICtcblx0XHRcdFx0KHRoaXMuY2hhbm5lbCA+IDAgPyBcIixjaGFubmVsPVwiICsgdGhpcy5jaGFubmVsIDogXCJcIikgKyBcIixcIiArXG5cdFx0XHRcdHRoaXMubGluZSArIFwiOlwiICsgdGhpcy5jb2x1bW4gKyBcIl1cIjtcblx0fVxuXG5cdGdldCB0ZXh0KCl7XG5cdFx0aWYgKHRoaXMuX3RleHQgIT09IG51bGwpIHtcblx0XHRcdHJldHVybiB0aGlzLl90ZXh0O1xuXHRcdH1cblx0XHRjb25zdCBpbnB1dCA9IHRoaXMuZ2V0SW5wdXRTdHJlYW0oKTtcblx0XHRpZiAoaW5wdXQgPT09IG51bGwpIHtcblx0XHRcdHJldHVybiBudWxsO1xuXHRcdH1cblx0XHRjb25zdCBuID0gaW5wdXQuc2l6ZTtcblx0XHRpZiAodGhpcy5zdGFydCA8IG4gJiYgdGhpcy5zdG9wIDwgbikge1xuXHRcdFx0cmV0dXJuIGlucHV0LmdldFRleHQodGhpcy5zdGFydCwgdGhpcy5zdG9wKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cmV0dXJuIFwiPEVPRj5cIjtcblx0XHR9XG5cdH1cblxuXHRzZXQgdGV4dCh0ZXh0KSB7XG5cdFx0dGhpcy5fdGV4dCA9IHRleHQ7XG5cdH1cbn1cblxuLyoqXG4gKiBBbiBlbXB0eSB7QGxpbmsgUGFpcn0gd2hpY2ggaXMgdXNlZCBhcyB0aGUgZGVmYXVsdCB2YWx1ZSBvZlxuICoge0BsaW5rIC8vc291cmNlfSBmb3IgdG9rZW5zIHRoYXQgZG8gbm90IGhhdmUgYSBzb3VyY2UuXG4gKi9cbkNvbW1vblRva2VuLkVNUFRZX1NPVVJDRSA9IFsgbnVsbCwgbnVsbCBdO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcblx0VG9rZW4sXG5cdENvbW1vblRva2VuXG59XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/Token.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/Utils.js":
/*!**********************************************************************************!*\
  !*** ../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/Utils.js ***!
  \**********************************************************************************/
/***/ ((module) => {

eval("/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nfunction valueToString(v) {\n    return v === null ? \"null\" : v;\n}\n\nfunction arrayToString(a) {\n    return Array.isArray(a) ? (\"[\" + a.map(valueToString).join(\", \") + \"]\") : \"null\";\n}\n\nString.prototype.seed = String.prototype.seed || Math.round(Math.random() * Math.pow(2, 32));\n\nString.prototype.hashCode = function () {\n    const key = this.toString();\n    let h1b, k1;\n\n    const remainder = key.length & 3; // key.length % 4\n    const bytes = key.length - remainder;\n    let h1 = String.prototype.seed;\n    const c1 = 0xcc9e2d51;\n    const c2 = 0x1b873593;\n    let i = 0;\n\n    while (i < bytes) {\n        k1 =\n            ((key.charCodeAt(i) & 0xff)) |\n            ((key.charCodeAt(++i) & 0xff) << 8) |\n            ((key.charCodeAt(++i) & 0xff) << 16) |\n            ((key.charCodeAt(++i) & 0xff) << 24);\n        ++i;\n\n        k1 = ((((k1 & 0xffff) * c1) + ((((k1 >>> 16) * c1) & 0xffff) << 16))) & 0xffffffff;\n        k1 = (k1 << 15) | (k1 >>> 17);\n        k1 = ((((k1 & 0xffff) * c2) + ((((k1 >>> 16) * c2) & 0xffff) << 16))) & 0xffffffff;\n\n        h1 ^= k1;\n        h1 = (h1 << 13) | (h1 >>> 19);\n        h1b = ((((h1 & 0xffff) * 5) + ((((h1 >>> 16) * 5) & 0xffff) << 16))) & 0xffffffff;\n        h1 = (((h1b & 0xffff) + 0x6b64) + ((((h1b >>> 16) + 0xe654) & 0xffff) << 16));\n    }\n\n    k1 = 0;\n\n    switch (remainder) {\n        case 3:\n            k1 ^= (key.charCodeAt(i + 2) & 0xff) << 16;\n        case 2:\n            k1 ^= (key.charCodeAt(i + 1) & 0xff) << 8;\n        case 1:\n            k1 ^= (key.charCodeAt(i) & 0xff);\n\n            k1 = (((k1 & 0xffff) * c1) + ((((k1 >>> 16) * c1) & 0xffff) << 16)) & 0xffffffff;\n            k1 = (k1 << 15) | (k1 >>> 17);\n            k1 = (((k1 & 0xffff) * c2) + ((((k1 >>> 16) * c2) & 0xffff) << 16)) & 0xffffffff;\n            h1 ^= k1;\n    }\n\n    h1 ^= key.length;\n\n    h1 ^= h1 >>> 16;\n    h1 = (((h1 & 0xffff) * 0x85ebca6b) + ((((h1 >>> 16) * 0x85ebca6b) & 0xffff) << 16)) & 0xffffffff;\n    h1 ^= h1 >>> 13;\n    h1 = ((((h1 & 0xffff) * 0xc2b2ae35) + ((((h1 >>> 16) * 0xc2b2ae35) & 0xffff) << 16))) & 0xffffffff;\n    h1 ^= h1 >>> 16;\n\n    return h1 >>> 0;\n};\n\nfunction standardEqualsFunction(a, b) {\n    return a ? a.equals(b) : a==b;\n}\n\nfunction standardHashCodeFunction(a) {\n    return a ? a.hashCode() : -1;\n}\n\nclass Set {\n    constructor(hashFunction, equalsFunction) {\n        this.data = {};\n        this.hashFunction = hashFunction || standardHashCodeFunction;\n        this.equalsFunction = equalsFunction || standardEqualsFunction;\n    }\n\n    add(value) {\n        const hash = this.hashFunction(value);\n        const key = \"hash_\" + hash;\n        if (key in this.data) {\n            const values = this.data[key];\n            for (let i = 0; i < values.length; i++) {\n                if (this.equalsFunction(value, values[i])) {\n                    return values[i];\n                }\n            }\n            values.push(value);\n            return value;\n        } else {\n            this.data[key] = [value];\n            return value;\n        }\n    }\n\n    contains(value) {\n        return this.get(value) != null;\n    }\n\n    get(value) {\n        const hash = this.hashFunction(value);\n        const key = \"hash_\" + hash;\n        if (key in this.data) {\n            const values = this.data[key];\n            for (let i = 0; i < values.length; i++) {\n                if (this.equalsFunction(value, values[i])) {\n                    return values[i];\n                }\n            }\n        }\n        return null;\n    }\n\n    values() {\n        let l = [];\n        for (const key in this.data) {\n            if (key.indexOf(\"hash_\") === 0) {\n                l = l.concat(this.data[key]);\n            }\n        }\n        return l;\n    }\n\n    toString() {\n        return arrayToString(this.values());\n    }\n\n    get length(){\n        let l = 0;\n        for (const key in this.data) {\n            if (key.indexOf(\"hash_\") === 0) {\n                l = l + this.data[key].length;\n            }\n        }\n        return l;\n    }\n}\n\n\nclass BitSet {\n    constructor() {\n        this.data = [];\n    }\n\n    add(value) {\n        this.data[value] = true;\n    }\n\n    or(set) {\n        const bits = this;\n        Object.keys(set.data).map(function (alt) {\n            bits.add(alt);\n        });\n    }\n\n    remove(value) {\n        delete this.data[value];\n    }\n\n    contains(value) {\n        return this.data[value] === true;\n    }\n\n    values() {\n        return Object.keys(this.data);\n    }\n\n    minValue() {\n        return Math.min.apply(null, this.values());\n    }\n\n    hashCode() {\n        const hash = new Hash();\n        hash.update(this.values());\n        return hash.finish();\n    }\n\n    equals(other) {\n        if (!(other instanceof BitSet)) {\n            return false;\n        }\n        return this.hashCode() === other.hashCode();\n    }\n\n    toString() {\n        return \"{\" + this.values().join(\", \") + \"}\";\n    }\n\n    get length(){\n        return this.values().length;\n    }\n}\n\n\nclass Map {\n    constructor(hashFunction, equalsFunction) {\n        this.data = {};\n        this.hashFunction = hashFunction || standardHashCodeFunction;\n        this.equalsFunction = equalsFunction || standardEqualsFunction;\n    }\n\n    put(key, value) {\n        const hashKey = \"hash_\" + this.hashFunction(key);\n        if (hashKey in this.data) {\n            const entries = this.data[hashKey];\n            for (let i = 0; i < entries.length; i++) {\n                const entry = entries[i];\n                if (this.equalsFunction(key, entry.key)) {\n                    const oldValue = entry.value;\n                    entry.value = value;\n                    return oldValue;\n                }\n            }\n            entries.push({key:key, value:value});\n            return value;\n        } else {\n            this.data[hashKey] = [{key:key, value:value}];\n            return value;\n        }\n    }\n\n    containsKey(key) {\n        const hashKey = \"hash_\" + this.hashFunction(key);\n        if(hashKey in this.data) {\n            const entries = this.data[hashKey];\n            for (let i = 0; i < entries.length; i++) {\n                const entry = entries[i];\n                if (this.equalsFunction(key, entry.key))\n                    return true;\n            }\n        }\n        return false;\n    }\n\n    get(key) {\n        const hashKey = \"hash_\" + this.hashFunction(key);\n        if(hashKey in this.data) {\n            const entries = this.data[hashKey];\n            for (let i = 0; i < entries.length; i++) {\n                const entry = entries[i];\n                if (this.equalsFunction(key, entry.key))\n                    return entry.value;\n            }\n        }\n        return null;\n    }\n\n    entries() {\n        let l = [];\n        for (const key in this.data) {\n            if (key.indexOf(\"hash_\") === 0) {\n                l = l.concat(this.data[key]);\n            }\n        }\n        return l;\n    }\n\n    getKeys() {\n        return this.entries().map(function(e) {\n            return e.key;\n        });\n    }\n\n    getValues() {\n        return this.entries().map(function(e) {\n                return e.value;\n        });\n    }\n\n    toString() {\n        const ss = this.entries().map(function(entry) {\n            return '{' + entry.key + ':' + entry.value + '}';\n        });\n        return '[' + ss.join(\", \") + ']';\n    }\n\n    get length(){\n        let l = 0;\n        for (const hashKey in this.data) {\n            if (hashKey.indexOf(\"hash_\") === 0) {\n                l = l + this.data[hashKey].length;\n            }\n        }\n        return l;\n    }\n}\n\n\nclass AltDict {\n    constructor() {\n        this.data = {};\n    }\n\n    get(key) {\n        key = \"k-\" + key;\n        if (key in this.data) {\n            return this.data[key];\n        } else {\n            return null;\n        }\n    }\n\n    put(key, value) {\n        key = \"k-\" + key;\n        this.data[key] = value;\n    }\n\n    values() {\n        const data = this.data;\n        const keys = Object.keys(this.data);\n        return keys.map(function (key) {\n            return data[key];\n        });\n    }\n}\n\n\nclass DoubleDict {\n    constructor(defaultMapCtor) {\n        this.defaultMapCtor = defaultMapCtor || Map;\n        this.cacheMap = new this.defaultMapCtor();\n    }\n\n    get(a, b) {\n        const d = this.cacheMap.get(a) || null;\n        return d === null ? null : (d.get(b) || null);\n    }\n\n    set(a, b, o) {\n        let d = this.cacheMap.get(a) || null;\n        if (d === null) {\n            d = new this.defaultMapCtor();\n            this.cacheMap.put(a, d);\n        }\n        d.put(b, o);\n    }\n}\n\nclass Hash {\n    constructor() {\n        this.count = 0;\n        this.hash = 0;\n    }\n\n    update() {\n        for(let i=0;i<arguments.length;i++) {\n            const value = arguments[i];\n            if (value == null)\n                continue;\n            if(Array.isArray(value))\n                this.update.apply(this, value);\n            else {\n                let k = 0;\n                switch (typeof(value)) {\n                    case 'undefined':\n                    case 'function':\n                        continue;\n                    case 'number':\n                    case 'boolean':\n                        k = value;\n                        break;\n                    case 'string':\n                        k = value.hashCode();\n                        break;\n                    default:\n                        if(value.updateHashCode)\n                            value.updateHashCode(this);\n                        else\n                            console.log(\"No updateHashCode for \" + value.toString())\n                        continue;\n                }\n                k = k * 0xCC9E2D51;\n                k = (k << 15) | (k >>> (32 - 15));\n                k = k * 0x1B873593;\n                this.count = this.count + 1;\n                let hash = this.hash ^ k;\n                hash = (hash << 13) | (hash >>> (32 - 13));\n                hash = hash * 5 + 0xE6546B64;\n                this.hash = hash;\n            }\n        }\n    }\n\n    finish() {\n        let hash = this.hash ^ (this.count * 4);\n        hash = hash ^ (hash >>> 16);\n        hash = hash * 0x85EBCA6B;\n        hash = hash ^ (hash >>> 13);\n        hash = hash * 0xC2B2AE35;\n        hash = hash ^ (hash >>> 16);\n        return hash;\n    }\n}\n\nfunction hashStuff() {\n    const hash = new Hash();\n    hash.update.apply(hash, arguments);\n    return hash.finish();\n}\n\n\nfunction escapeWhitespace(s, escapeSpaces) {\n    s = s.replace(/\\t/g, \"\\\\t\")\n         .replace(/\\n/g, \"\\\\n\")\n         .replace(/\\r/g, \"\\\\r\");\n    if (escapeSpaces) {\n        s = s.replace(/ /g, \"\\u00B7\");\n    }\n    return s;\n}\n\nfunction titleCase(str) {\n    return str.replace(/\\w\\S*/g, function (txt) {\n        return txt.charAt(0).toUpperCase() + txt.substr(1);\n    });\n}\n\nfunction equalArrays(a, b) {\n    if (!Array.isArray(a) || !Array.isArray(b))\n        return false;\n    if (a === b)\n        return true;\n    if (a.length !== b.length)\n        return false;\n    for (let i = 0; i < a.length; i++) {\n        if (a[i] === b[i])\n            continue;\n        if (!a[i].equals || !a[i].equals(b[i]))\n            return false;\n    }\n    return true;\n}\n\nmodule.exports = {\n    Hash,\n    Set,\n    Map,\n    BitSet,\n    AltDict,\n    DoubleDict,\n    hashStuff,\n    escapeWhitespace,\n    arrayToString,\n    titleCase,\n    equalArrays\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2FudGxyNEA0LjkuMy9ub2RlX21vZHVsZXMvYW50bHI0L3NyYy9hbnRscjQvVXRpbHMuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsc0NBQXNDO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QixtQkFBbUI7QUFDL0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLG1CQUFtQjtBQUMvQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsaUJBQWlCLGlDQUFpQztBQUNsRDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLG9CQUFvQjtBQUNoRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQixxQkFBcUI7QUFDL0M7QUFDQSxVQUFVO0FBQ1YsbUNBQW1DLHFCQUFxQjtBQUN4RDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsb0JBQW9CO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLG9CQUFvQjtBQUNoRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDs7QUFFQTtBQUNBO0FBQ0EscUJBQXFCLHNDQUFzQztBQUMzRCxTQUFTO0FBQ1Q7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLG9CQUFvQixtQkFBbUI7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsY0FBYztBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL2V0aGFua2ltL05lc3Rvci9tZWRmZXRjaC5qcy9ub2RlX21vZHVsZXMvLnBucG0vYW50bHI0QDQuOS4zL25vZGVfbW9kdWxlcy9hbnRscjQvc3JjL2FudGxyNC9VdGlscy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiBDb3B5cmlnaHQgKGMpIDIwMTItMjAxNyBUaGUgQU5UTFIgUHJvamVjdC4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFVzZSBvZiB0aGlzIGZpbGUgaXMgZ292ZXJuZWQgYnkgdGhlIEJTRCAzLWNsYXVzZSBsaWNlbnNlIHRoYXRcbiAqIGNhbiBiZSBmb3VuZCBpbiB0aGUgTElDRU5TRS50eHQgZmlsZSBpbiB0aGUgcHJvamVjdCByb290LlxuICovXG5cbmZ1bmN0aW9uIHZhbHVlVG9TdHJpbmcodikge1xuICAgIHJldHVybiB2ID09PSBudWxsID8gXCJudWxsXCIgOiB2O1xufVxuXG5mdW5jdGlvbiBhcnJheVRvU3RyaW5nKGEpIHtcbiAgICByZXR1cm4gQXJyYXkuaXNBcnJheShhKSA/IChcIltcIiArIGEubWFwKHZhbHVlVG9TdHJpbmcpLmpvaW4oXCIsIFwiKSArIFwiXVwiKSA6IFwibnVsbFwiO1xufVxuXG5TdHJpbmcucHJvdG90eXBlLnNlZWQgPSBTdHJpbmcucHJvdG90eXBlLnNlZWQgfHwgTWF0aC5yb3VuZChNYXRoLnJhbmRvbSgpICogTWF0aC5wb3coMiwgMzIpKTtcblxuU3RyaW5nLnByb3RvdHlwZS5oYXNoQ29kZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBjb25zdCBrZXkgPSB0aGlzLnRvU3RyaW5nKCk7XG4gICAgbGV0IGgxYiwgazE7XG5cbiAgICBjb25zdCByZW1haW5kZXIgPSBrZXkubGVuZ3RoICYgMzsgLy8ga2V5Lmxlbmd0aCAlIDRcbiAgICBjb25zdCBieXRlcyA9IGtleS5sZW5ndGggLSByZW1haW5kZXI7XG4gICAgbGV0IGgxID0gU3RyaW5nLnByb3RvdHlwZS5zZWVkO1xuICAgIGNvbnN0IGMxID0gMHhjYzllMmQ1MTtcbiAgICBjb25zdCBjMiA9IDB4MWI4NzM1OTM7XG4gICAgbGV0IGkgPSAwO1xuXG4gICAgd2hpbGUgKGkgPCBieXRlcykge1xuICAgICAgICBrMSA9XG4gICAgICAgICAgICAoKGtleS5jaGFyQ29kZUF0KGkpICYgMHhmZikpIHxcbiAgICAgICAgICAgICgoa2V5LmNoYXJDb2RlQXQoKytpKSAmIDB4ZmYpIDw8IDgpIHxcbiAgICAgICAgICAgICgoa2V5LmNoYXJDb2RlQXQoKytpKSAmIDB4ZmYpIDw8IDE2KSB8XG4gICAgICAgICAgICAoKGtleS5jaGFyQ29kZUF0KCsraSkgJiAweGZmKSA8PCAyNCk7XG4gICAgICAgICsraTtcblxuICAgICAgICBrMSA9ICgoKChrMSAmIDB4ZmZmZikgKiBjMSkgKyAoKCgoazEgPj4+IDE2KSAqIGMxKSAmIDB4ZmZmZikgPDwgMTYpKSkgJiAweGZmZmZmZmZmO1xuICAgICAgICBrMSA9IChrMSA8PCAxNSkgfCAoazEgPj4+IDE3KTtcbiAgICAgICAgazEgPSAoKCgoazEgJiAweGZmZmYpICogYzIpICsgKCgoKGsxID4+PiAxNikgKiBjMikgJiAweGZmZmYpIDw8IDE2KSkpICYgMHhmZmZmZmZmZjtcblxuICAgICAgICBoMSBePSBrMTtcbiAgICAgICAgaDEgPSAoaDEgPDwgMTMpIHwgKGgxID4+PiAxOSk7XG4gICAgICAgIGgxYiA9ICgoKChoMSAmIDB4ZmZmZikgKiA1KSArICgoKChoMSA+Pj4gMTYpICogNSkgJiAweGZmZmYpIDw8IDE2KSkpICYgMHhmZmZmZmZmZjtcbiAgICAgICAgaDEgPSAoKChoMWIgJiAweGZmZmYpICsgMHg2YjY0KSArICgoKChoMWIgPj4+IDE2KSArIDB4ZTY1NCkgJiAweGZmZmYpIDw8IDE2KSk7XG4gICAgfVxuXG4gICAgazEgPSAwO1xuXG4gICAgc3dpdGNoIChyZW1haW5kZXIpIHtcbiAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgazEgXj0gKGtleS5jaGFyQ29kZUF0KGkgKyAyKSAmIDB4ZmYpIDw8IDE2O1xuICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICBrMSBePSAoa2V5LmNoYXJDb2RlQXQoaSArIDEpICYgMHhmZikgPDwgODtcbiAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgazEgXj0gKGtleS5jaGFyQ29kZUF0KGkpICYgMHhmZik7XG5cbiAgICAgICAgICAgIGsxID0gKCgoazEgJiAweGZmZmYpICogYzEpICsgKCgoKGsxID4+PiAxNikgKiBjMSkgJiAweGZmZmYpIDw8IDE2KSkgJiAweGZmZmZmZmZmO1xuICAgICAgICAgICAgazEgPSAoazEgPDwgMTUpIHwgKGsxID4+PiAxNyk7XG4gICAgICAgICAgICBrMSA9ICgoKGsxICYgMHhmZmZmKSAqIGMyKSArICgoKChrMSA+Pj4gMTYpICogYzIpICYgMHhmZmZmKSA8PCAxNikpICYgMHhmZmZmZmZmZjtcbiAgICAgICAgICAgIGgxIF49IGsxO1xuICAgIH1cblxuICAgIGgxIF49IGtleS5sZW5ndGg7XG5cbiAgICBoMSBePSBoMSA+Pj4gMTY7XG4gICAgaDEgPSAoKChoMSAmIDB4ZmZmZikgKiAweDg1ZWJjYTZiKSArICgoKChoMSA+Pj4gMTYpICogMHg4NWViY2E2YikgJiAweGZmZmYpIDw8IDE2KSkgJiAweGZmZmZmZmZmO1xuICAgIGgxIF49IGgxID4+PiAxMztcbiAgICBoMSA9ICgoKChoMSAmIDB4ZmZmZikgKiAweGMyYjJhZTM1KSArICgoKChoMSA+Pj4gMTYpICogMHhjMmIyYWUzNSkgJiAweGZmZmYpIDw8IDE2KSkpICYgMHhmZmZmZmZmZjtcbiAgICBoMSBePSBoMSA+Pj4gMTY7XG5cbiAgICByZXR1cm4gaDEgPj4+IDA7XG59O1xuXG5mdW5jdGlvbiBzdGFuZGFyZEVxdWFsc0Z1bmN0aW9uKGEsIGIpIHtcbiAgICByZXR1cm4gYSA/IGEuZXF1YWxzKGIpIDogYT09Yjtcbn1cblxuZnVuY3Rpb24gc3RhbmRhcmRIYXNoQ29kZUZ1bmN0aW9uKGEpIHtcbiAgICByZXR1cm4gYSA/IGEuaGFzaENvZGUoKSA6IC0xO1xufVxuXG5jbGFzcyBTZXQge1xuICAgIGNvbnN0cnVjdG9yKGhhc2hGdW5jdGlvbiwgZXF1YWxzRnVuY3Rpb24pIHtcbiAgICAgICAgdGhpcy5kYXRhID0ge307XG4gICAgICAgIHRoaXMuaGFzaEZ1bmN0aW9uID0gaGFzaEZ1bmN0aW9uIHx8IHN0YW5kYXJkSGFzaENvZGVGdW5jdGlvbjtcbiAgICAgICAgdGhpcy5lcXVhbHNGdW5jdGlvbiA9IGVxdWFsc0Z1bmN0aW9uIHx8IHN0YW5kYXJkRXF1YWxzRnVuY3Rpb247XG4gICAgfVxuXG4gICAgYWRkKHZhbHVlKSB7XG4gICAgICAgIGNvbnN0IGhhc2ggPSB0aGlzLmhhc2hGdW5jdGlvbih2YWx1ZSk7XG4gICAgICAgIGNvbnN0IGtleSA9IFwiaGFzaF9cIiArIGhhc2g7XG4gICAgICAgIGlmIChrZXkgaW4gdGhpcy5kYXRhKSB7XG4gICAgICAgICAgICBjb25zdCB2YWx1ZXMgPSB0aGlzLmRhdGFba2V5XTtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdmFsdWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZXF1YWxzRnVuY3Rpb24odmFsdWUsIHZhbHVlc1tpXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlc1tpXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YWx1ZXMucHVzaCh2YWx1ZSk7XG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmRhdGFba2V5XSA9IFt2YWx1ZV07XG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjb250YWlucyh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXQodmFsdWUpICE9IG51bGw7XG4gICAgfVxuXG4gICAgZ2V0KHZhbHVlKSB7XG4gICAgICAgIGNvbnN0IGhhc2ggPSB0aGlzLmhhc2hGdW5jdGlvbih2YWx1ZSk7XG4gICAgICAgIGNvbnN0IGtleSA9IFwiaGFzaF9cIiArIGhhc2g7XG4gICAgICAgIGlmIChrZXkgaW4gdGhpcy5kYXRhKSB7XG4gICAgICAgICAgICBjb25zdCB2YWx1ZXMgPSB0aGlzLmRhdGFba2V5XTtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdmFsdWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZXF1YWxzRnVuY3Rpb24odmFsdWUsIHZhbHVlc1tpXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlc1tpXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgdmFsdWVzKCkge1xuICAgICAgICBsZXQgbCA9IFtdO1xuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiB0aGlzLmRhdGEpIHtcbiAgICAgICAgICAgIGlmIChrZXkuaW5kZXhPZihcImhhc2hfXCIpID09PSAwKSB7XG4gICAgICAgICAgICAgICAgbCA9IGwuY29uY2F0KHRoaXMuZGF0YVtrZXldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbDtcbiAgICB9XG5cbiAgICB0b1N0cmluZygpIHtcbiAgICAgICAgcmV0dXJuIGFycmF5VG9TdHJpbmcodGhpcy52YWx1ZXMoKSk7XG4gICAgfVxuXG4gICAgZ2V0IGxlbmd0aCgpe1xuICAgICAgICBsZXQgbCA9IDA7XG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIHRoaXMuZGF0YSkge1xuICAgICAgICAgICAgaWYgKGtleS5pbmRleE9mKFwiaGFzaF9cIikgPT09IDApIHtcbiAgICAgICAgICAgICAgICBsID0gbCArIHRoaXMuZGF0YVtrZXldLmxlbmd0aDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbDtcbiAgICB9XG59XG5cblxuY2xhc3MgQml0U2V0IHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5kYXRhID0gW107XG4gICAgfVxuXG4gICAgYWRkKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuZGF0YVt2YWx1ZV0gPSB0cnVlO1xuICAgIH1cblxuICAgIG9yKHNldCkge1xuICAgICAgICBjb25zdCBiaXRzID0gdGhpcztcbiAgICAgICAgT2JqZWN0LmtleXMoc2V0LmRhdGEpLm1hcChmdW5jdGlvbiAoYWx0KSB7XG4gICAgICAgICAgICBiaXRzLmFkZChhbHQpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICByZW1vdmUodmFsdWUpIHtcbiAgICAgICAgZGVsZXRlIHRoaXMuZGF0YVt2YWx1ZV07XG4gICAgfVxuXG4gICAgY29udGFpbnModmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGF0YVt2YWx1ZV0gPT09IHRydWU7XG4gICAgfVxuXG4gICAgdmFsdWVzKCkge1xuICAgICAgICByZXR1cm4gT2JqZWN0LmtleXModGhpcy5kYXRhKTtcbiAgICB9XG5cbiAgICBtaW5WYWx1ZSgpIHtcbiAgICAgICAgcmV0dXJuIE1hdGgubWluLmFwcGx5KG51bGwsIHRoaXMudmFsdWVzKCkpO1xuICAgIH1cblxuICAgIGhhc2hDb2RlKCkge1xuICAgICAgICBjb25zdCBoYXNoID0gbmV3IEhhc2goKTtcbiAgICAgICAgaGFzaC51cGRhdGUodGhpcy52YWx1ZXMoKSk7XG4gICAgICAgIHJldHVybiBoYXNoLmZpbmlzaCgpO1xuICAgIH1cblxuICAgIGVxdWFscyhvdGhlcikge1xuICAgICAgICBpZiAoIShvdGhlciBpbnN0YW5jZW9mIEJpdFNldCkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5oYXNoQ29kZSgpID09PSBvdGhlci5oYXNoQ29kZSgpO1xuICAgIH1cblxuICAgIHRvU3RyaW5nKCkge1xuICAgICAgICByZXR1cm4gXCJ7XCIgKyB0aGlzLnZhbHVlcygpLmpvaW4oXCIsIFwiKSArIFwifVwiO1xuICAgIH1cblxuICAgIGdldCBsZW5ndGgoKXtcbiAgICAgICAgcmV0dXJuIHRoaXMudmFsdWVzKCkubGVuZ3RoO1xuICAgIH1cbn1cblxuXG5jbGFzcyBNYXAge1xuICAgIGNvbnN0cnVjdG9yKGhhc2hGdW5jdGlvbiwgZXF1YWxzRnVuY3Rpb24pIHtcbiAgICAgICAgdGhpcy5kYXRhID0ge307XG4gICAgICAgIHRoaXMuaGFzaEZ1bmN0aW9uID0gaGFzaEZ1bmN0aW9uIHx8IHN0YW5kYXJkSGFzaENvZGVGdW5jdGlvbjtcbiAgICAgICAgdGhpcy5lcXVhbHNGdW5jdGlvbiA9IGVxdWFsc0Z1bmN0aW9uIHx8IHN0YW5kYXJkRXF1YWxzRnVuY3Rpb247XG4gICAgfVxuXG4gICAgcHV0KGtleSwgdmFsdWUpIHtcbiAgICAgICAgY29uc3QgaGFzaEtleSA9IFwiaGFzaF9cIiArIHRoaXMuaGFzaEZ1bmN0aW9uKGtleSk7XG4gICAgICAgIGlmIChoYXNoS2V5IGluIHRoaXMuZGF0YSkge1xuICAgICAgICAgICAgY29uc3QgZW50cmllcyA9IHRoaXMuZGF0YVtoYXNoS2V5XTtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZW50cmllcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGNvbnN0IGVudHJ5ID0gZW50cmllc1tpXTtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5lcXVhbHNGdW5jdGlvbihrZXksIGVudHJ5LmtleSkpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgb2xkVmFsdWUgPSBlbnRyeS52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgZW50cnkudmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG9sZFZhbHVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVudHJpZXMucHVzaCh7a2V5OmtleSwgdmFsdWU6dmFsdWV9KTtcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuZGF0YVtoYXNoS2V5XSA9IFt7a2V5OmtleSwgdmFsdWU6dmFsdWV9XTtcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNvbnRhaW5zS2V5KGtleSkge1xuICAgICAgICBjb25zdCBoYXNoS2V5ID0gXCJoYXNoX1wiICsgdGhpcy5oYXNoRnVuY3Rpb24oa2V5KTtcbiAgICAgICAgaWYoaGFzaEtleSBpbiB0aGlzLmRhdGEpIHtcbiAgICAgICAgICAgIGNvbnN0IGVudHJpZXMgPSB0aGlzLmRhdGFbaGFzaEtleV07XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGVudHJpZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBjb25zdCBlbnRyeSA9IGVudHJpZXNbaV07XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZXF1YWxzRnVuY3Rpb24oa2V5LCBlbnRyeS5rZXkpKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgZ2V0KGtleSkge1xuICAgICAgICBjb25zdCBoYXNoS2V5ID0gXCJoYXNoX1wiICsgdGhpcy5oYXNoRnVuY3Rpb24oa2V5KTtcbiAgICAgICAgaWYoaGFzaEtleSBpbiB0aGlzLmRhdGEpIHtcbiAgICAgICAgICAgIGNvbnN0IGVudHJpZXMgPSB0aGlzLmRhdGFbaGFzaEtleV07XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGVudHJpZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBjb25zdCBlbnRyeSA9IGVudHJpZXNbaV07XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZXF1YWxzRnVuY3Rpb24oa2V5LCBlbnRyeS5rZXkpKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZW50cnkudmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgZW50cmllcygpIHtcbiAgICAgICAgbGV0IGwgPSBbXTtcbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gdGhpcy5kYXRhKSB7XG4gICAgICAgICAgICBpZiAoa2V5LmluZGV4T2YoXCJoYXNoX1wiKSA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGwgPSBsLmNvbmNhdCh0aGlzLmRhdGFba2V5XSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGw7XG4gICAgfVxuXG4gICAgZ2V0S2V5cygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZW50cmllcygpLm1hcChmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICByZXR1cm4gZS5rZXk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGdldFZhbHVlcygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZW50cmllcygpLm1hcChmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGUudmFsdWU7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHRvU3RyaW5nKCkge1xuICAgICAgICBjb25zdCBzcyA9IHRoaXMuZW50cmllcygpLm1hcChmdW5jdGlvbihlbnRyeSkge1xuICAgICAgICAgICAgcmV0dXJuICd7JyArIGVudHJ5LmtleSArICc6JyArIGVudHJ5LnZhbHVlICsgJ30nO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuICdbJyArIHNzLmpvaW4oXCIsIFwiKSArICddJztcbiAgICB9XG5cbiAgICBnZXQgbGVuZ3RoKCl7XG4gICAgICAgIGxldCBsID0gMDtcbiAgICAgICAgZm9yIChjb25zdCBoYXNoS2V5IGluIHRoaXMuZGF0YSkge1xuICAgICAgICAgICAgaWYgKGhhc2hLZXkuaW5kZXhPZihcImhhc2hfXCIpID09PSAwKSB7XG4gICAgICAgICAgICAgICAgbCA9IGwgKyB0aGlzLmRhdGFbaGFzaEtleV0ubGVuZ3RoO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBsO1xuICAgIH1cbn1cblxuXG5jbGFzcyBBbHREaWN0IHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5kYXRhID0ge307XG4gICAgfVxuXG4gICAgZ2V0KGtleSkge1xuICAgICAgICBrZXkgPSBcImstXCIgKyBrZXk7XG4gICAgICAgIGlmIChrZXkgaW4gdGhpcy5kYXRhKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5kYXRhW2tleV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1dChrZXksIHZhbHVlKSB7XG4gICAgICAgIGtleSA9IFwiay1cIiArIGtleTtcbiAgICAgICAgdGhpcy5kYXRhW2tleV0gPSB2YWx1ZTtcbiAgICB9XG5cbiAgICB2YWx1ZXMoKSB7XG4gICAgICAgIGNvbnN0IGRhdGEgPSB0aGlzLmRhdGE7XG4gICAgICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyh0aGlzLmRhdGEpO1xuICAgICAgICByZXR1cm4ga2V5cy5tYXAoZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgICAgcmV0dXJuIGRhdGFba2V5XTtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuXG5cbmNsYXNzIERvdWJsZURpY3Qge1xuICAgIGNvbnN0cnVjdG9yKGRlZmF1bHRNYXBDdG9yKSB7XG4gICAgICAgIHRoaXMuZGVmYXVsdE1hcEN0b3IgPSBkZWZhdWx0TWFwQ3RvciB8fCBNYXA7XG4gICAgICAgIHRoaXMuY2FjaGVNYXAgPSBuZXcgdGhpcy5kZWZhdWx0TWFwQ3RvcigpO1xuICAgIH1cblxuICAgIGdldChhLCBiKSB7XG4gICAgICAgIGNvbnN0IGQgPSB0aGlzLmNhY2hlTWFwLmdldChhKSB8fCBudWxsO1xuICAgICAgICByZXR1cm4gZCA9PT0gbnVsbCA/IG51bGwgOiAoZC5nZXQoYikgfHwgbnVsbCk7XG4gICAgfVxuXG4gICAgc2V0KGEsIGIsIG8pIHtcbiAgICAgICAgbGV0IGQgPSB0aGlzLmNhY2hlTWFwLmdldChhKSB8fCBudWxsO1xuICAgICAgICBpZiAoZCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgZCA9IG5ldyB0aGlzLmRlZmF1bHRNYXBDdG9yKCk7XG4gICAgICAgICAgICB0aGlzLmNhY2hlTWFwLnB1dChhLCBkKTtcbiAgICAgICAgfVxuICAgICAgICBkLnB1dChiLCBvKTtcbiAgICB9XG59XG5cbmNsYXNzIEhhc2gge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLmNvdW50ID0gMDtcbiAgICAgICAgdGhpcy5oYXNoID0gMDtcbiAgICB9XG5cbiAgICB1cGRhdGUoKSB7XG4gICAgICAgIGZvcihsZXQgaT0wO2k8YXJndW1lbnRzLmxlbmd0aDtpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gYXJndW1lbnRzW2ldO1xuICAgICAgICAgICAgaWYgKHZhbHVlID09IG51bGwpXG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICBpZihBcnJheS5pc0FycmF5KHZhbHVlKSlcbiAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZS5hcHBseSh0aGlzLCB2YWx1ZSk7XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBsZXQgayA9IDA7XG4gICAgICAgICAgICAgICAgc3dpdGNoICh0eXBlb2YodmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ3VuZGVmaW5lZCc6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2Z1bmN0aW9uJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdudW1iZXInOlxuICAgICAgICAgICAgICAgICAgICBjYXNlICdib29sZWFuJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGsgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdzdHJpbmcnOlxuICAgICAgICAgICAgICAgICAgICAgICAgayA9IHZhbHVlLmhhc2hDb2RlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKHZhbHVlLnVwZGF0ZUhhc2hDb2RlKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlLnVwZGF0ZUhhc2hDb2RlKHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiTm8gdXBkYXRlSGFzaENvZGUgZm9yIFwiICsgdmFsdWUudG9TdHJpbmcoKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBrID0gayAqIDB4Q0M5RTJENTE7XG4gICAgICAgICAgICAgICAgayA9IChrIDw8IDE1KSB8IChrID4+PiAoMzIgLSAxNSkpO1xuICAgICAgICAgICAgICAgIGsgPSBrICogMHgxQjg3MzU5MztcbiAgICAgICAgICAgICAgICB0aGlzLmNvdW50ID0gdGhpcy5jb3VudCArIDE7XG4gICAgICAgICAgICAgICAgbGV0IGhhc2ggPSB0aGlzLmhhc2ggXiBrO1xuICAgICAgICAgICAgICAgIGhhc2ggPSAoaGFzaCA8PCAxMykgfCAoaGFzaCA+Pj4gKDMyIC0gMTMpKTtcbiAgICAgICAgICAgICAgICBoYXNoID0gaGFzaCAqIDUgKyAweEU2NTQ2QjY0O1xuICAgICAgICAgICAgICAgIHRoaXMuaGFzaCA9IGhhc2g7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmaW5pc2goKSB7XG4gICAgICAgIGxldCBoYXNoID0gdGhpcy5oYXNoIF4gKHRoaXMuY291bnQgKiA0KTtcbiAgICAgICAgaGFzaCA9IGhhc2ggXiAoaGFzaCA+Pj4gMTYpO1xuICAgICAgICBoYXNoID0gaGFzaCAqIDB4ODVFQkNBNkI7XG4gICAgICAgIGhhc2ggPSBoYXNoIF4gKGhhc2ggPj4+IDEzKTtcbiAgICAgICAgaGFzaCA9IGhhc2ggKiAweEMyQjJBRTM1O1xuICAgICAgICBoYXNoID0gaGFzaCBeIChoYXNoID4+PiAxNik7XG4gICAgICAgIHJldHVybiBoYXNoO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gaGFzaFN0dWZmKCkge1xuICAgIGNvbnN0IGhhc2ggPSBuZXcgSGFzaCgpO1xuICAgIGhhc2gudXBkYXRlLmFwcGx5KGhhc2gsIGFyZ3VtZW50cyk7XG4gICAgcmV0dXJuIGhhc2guZmluaXNoKCk7XG59XG5cblxuZnVuY3Rpb24gZXNjYXBlV2hpdGVzcGFjZShzLCBlc2NhcGVTcGFjZXMpIHtcbiAgICBzID0gcy5yZXBsYWNlKC9cXHQvZywgXCJcXFxcdFwiKVxuICAgICAgICAgLnJlcGxhY2UoL1xcbi9nLCBcIlxcXFxuXCIpXG4gICAgICAgICAucmVwbGFjZSgvXFxyL2csIFwiXFxcXHJcIik7XG4gICAgaWYgKGVzY2FwZVNwYWNlcykge1xuICAgICAgICBzID0gcy5yZXBsYWNlKC8gL2csIFwiXFx1MDBCN1wiKTtcbiAgICB9XG4gICAgcmV0dXJuIHM7XG59XG5cbmZ1bmN0aW9uIHRpdGxlQ2FzZShzdHIpIHtcbiAgICByZXR1cm4gc3RyLnJlcGxhY2UoL1xcd1xcUyovZywgZnVuY3Rpb24gKHR4dCkge1xuICAgICAgICByZXR1cm4gdHh0LmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgdHh0LnN1YnN0cigxKTtcbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gZXF1YWxBcnJheXMoYSwgYikge1xuICAgIGlmICghQXJyYXkuaXNBcnJheShhKSB8fCAhQXJyYXkuaXNBcnJheShiKSlcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIGlmIChhID09PSBiKVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICBpZiAoYS5sZW5ndGggIT09IGIubGVuZ3RoKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChhW2ldID09PSBiW2ldKVxuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIGlmICghYVtpXS5lcXVhbHMgfHwgIWFbaV0uZXF1YWxzKGJbaV0pKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgSGFzaCxcbiAgICBTZXQsXG4gICAgTWFwLFxuICAgIEJpdFNldCxcbiAgICBBbHREaWN0LFxuICAgIERvdWJsZURpY3QsXG4gICAgaGFzaFN0dWZmLFxuICAgIGVzY2FwZVdoaXRlc3BhY2UsXG4gICAgYXJyYXlUb1N0cmluZyxcbiAgICB0aXRsZUNhc2UsXG4gICAgZXF1YWxBcnJheXNcbn1cbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/Utils.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/atn/ATN.js":
/*!************************************************************************************!*\
  !*** ../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/atn/ATN.js ***!
  \************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nconst LL1Analyzer = __webpack_require__(/*! ./../LL1Analyzer */ \"(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/LL1Analyzer.js\");\nconst {IntervalSet} = __webpack_require__(/*! ./../IntervalSet */ \"(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/IntervalSet.js\");\nconst {Token} = __webpack_require__(/*! ./../Token */ \"(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/Token.js\");\n\nclass ATN {\n\n    constructor(grammarType , maxTokenType) {\n        /**\n         * Used for runtime deserialization of ATNs from strings\n         * The type of the ATN.\n        */\n        this.grammarType = grammarType;\n        // The maximum value for any symbol recognized by a transition in the ATN.\n        this.maxTokenType = maxTokenType;\n        this.states = [];\n        /**\n         * Each subrule/rule is a decision point and we must track them so we\n         * can go back later and build DFA predictors for them.  This includes\n         * all the rules, subrules, optional blocks, ()+, ()* etc...\n         */\n        this.decisionToState = [];\n        // Maps from rule index to starting state number.\n        this.ruleToStartState = [];\n        // Maps from rule index to stop state number.\n        this.ruleToStopState = null;\n        this.modeNameToStartState = {};\n        /**\n         * For lexer ATNs, this maps the rule index to the resulting token type.\n         * For parser ATNs, this maps the rule index to the generated bypass token\n         * type if the {@link ATNDeserializationOptions//isGenerateRuleBypassTransitions}\n         * deserialization option was specified; otherwise, this is {@code null}\n         */\n        this.ruleToTokenType = null;\n        /**\n         * For lexer ATNs, this is an array of {@link LexerAction} objects which may\n         * be referenced by action transitions in the ATN\n         */\n        this.lexerActions = null;\n        this.modeToStartState = [];\n    }\n\n    /**\n     * Compute the set of valid tokens that can occur starting in state {@code s}.\n     * If {@code ctx} is null, the set of tokens will not include what can follow\n     * the rule surrounding {@code s}. In other words, the set will be\n     * restricted to tokens reachable staying within {@code s}'s rule\n     */\n    nextTokensInContext(s, ctx) {\n        const anal = new LL1Analyzer(this);\n        return anal.LOOK(s, null, ctx);\n    }\n\n    /**\n     * Compute the set of valid tokens that can occur starting in {@code s} and\n     * staying in same rule. {@link Token//EPSILON} is in set if we reach end of\n     * rule\n     */\n    nextTokensNoContext(s) {\n        if (s.nextTokenWithinRule !== null ) {\n            return s.nextTokenWithinRule;\n        }\n        s.nextTokenWithinRule = this.nextTokensInContext(s, null);\n        s.nextTokenWithinRule.readOnly = true;\n        return s.nextTokenWithinRule;\n    }\n\n    nextTokens(s, ctx) {\n        if ( ctx===undefined ) {\n            return this.nextTokensNoContext(s);\n        } else {\n            return this.nextTokensInContext(s, ctx);\n        }\n    }\n\n    addState(state) {\n        if ( state !== null ) {\n            state.atn = this;\n            state.stateNumber = this.states.length;\n        }\n        this.states.push(state);\n    }\n\n    removeState(state) {\n        this.states[state.stateNumber] = null; // just free mem, don't shift states in list\n    }\n\n    defineDecisionState(s) {\n        this.decisionToState.push(s);\n        s.decision = this.decisionToState.length-1;\n        return s.decision;\n    }\n\n    getDecisionState(decision) {\n        if (this.decisionToState.length===0) {\n            return null;\n        } else {\n            return this.decisionToState[decision];\n        }\n    }\n\n    /**\n     * Computes the set of input symbols which could follow ATN state number\n     * {@code stateNumber} in the specified full {@code context}. This method\n     * considers the complete parser context, but does not evaluate semantic\n     * predicates (i.e. all predicates encountered during the calculation are\n     * assumed true). If a path in the ATN exists from the starting state to the\n     * {@link RuleStopState} of the outermost context without matching any\n     * symbols, {@link Token//EOF} is added to the returned set.\n     *\n     * <p>If {@code context} is {@code null}, it is treated as\n     * {@link ParserRuleContext//EMPTY}.</p>\n     *\n     * @param stateNumber the ATN state number\n     * @param ctx the full parse context\n     *\n     * @return {IntervalSet} The set of potentially valid input symbols which could follow the\n     * specified state in the specified context.\n     *\n     * @throws IllegalArgumentException if the ATN does not contain a state with\n     * number {@code stateNumber}\n     */\n    getExpectedTokens(stateNumber, ctx ) {\n        if ( stateNumber < 0 || stateNumber >= this.states.length ) {\n            throw(\"Invalid state number.\");\n        }\n        const s = this.states[stateNumber];\n        let following = this.nextTokens(s);\n        if (!following.contains(Token.EPSILON)) {\n            return following;\n        }\n        const expected = new IntervalSet();\n        expected.addSet(following);\n        expected.removeOne(Token.EPSILON);\n        while (ctx !== null && ctx.invokingState >= 0 && following.contains(Token.EPSILON)) {\n            const invokingState = this.states[ctx.invokingState];\n            const rt = invokingState.transitions[0];\n            following = this.nextTokens(rt.followState);\n            expected.addSet(following);\n            expected.removeOne(Token.EPSILON);\n            ctx = ctx.parentCtx;\n        }\n        if (following.contains(Token.EPSILON)) {\n            expected.addOne(Token.EOF);\n        }\n        return expected;\n    }\n}\n\nATN.INVALID_ALT_NUMBER = 0;\n\nmodule.exports = ATN;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/atn/ATN.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/atn/ATNConfig.js":
/*!******************************************************************************************!*\
  !*** ../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/atn/ATNConfig.js ***!
  \******************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nconst {DecisionState} = __webpack_require__(/*! ./ATNState */ \"(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/atn/ATNState.js\");\nconst {SemanticContext} = __webpack_require__(/*! ./SemanticContext */ \"(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/atn/SemanticContext.js\");\nconst {Hash} = __webpack_require__(/*! ../Utils */ \"(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/Utils.js\");\n\n\nfunction checkParams(params, isCfg) {\n\tif(params===null) {\n\t\tconst result = { state:null, alt:null, context:null, semanticContext:null };\n\t\tif(isCfg) {\n\t\t\tresult.reachesIntoOuterContext = 0;\n\t\t}\n\t\treturn result;\n\t} else {\n\t\tconst props = {};\n\t\tprops.state = params.state || null;\n\t\tprops.alt = (params.alt === undefined) ? null : params.alt;\n\t\tprops.context = params.context || null;\n\t\tprops.semanticContext = params.semanticContext || null;\n\t\tif(isCfg) {\n\t\t\tprops.reachesIntoOuterContext = params.reachesIntoOuterContext || 0;\n\t\t\tprops.precedenceFilterSuppressed = params.precedenceFilterSuppressed || false;\n\t\t}\n\t\treturn props;\n\t}\n}\n\nclass ATNConfig {\n    /**\n     * @param {Object} params A tuple: (ATN state, predicted alt, syntactic, semantic context).\n     * The syntactic context is a graph-structured stack node whose\n     * path(s) to the root is the rule invocation(s)\n     * chain used to arrive at the state.  The semantic context is\n     * the tree of semantic predicates encountered before reaching\n     * an ATN state\n     */\n    constructor(params, config) {\n        this.checkContext(params, config);\n        params = checkParams(params);\n        config = checkParams(config, true);\n        // The ATN state associated with this configuration///\n        this.state = params.state!==null ? params.state : config.state;\n        // What alt (or lexer rule) is predicted by this configuration///\n        this.alt = params.alt!==null ? params.alt : config.alt;\n        /**\n         * The stack of invoking states leading to the rule/states associated\n         * with this config.  We track only those contexts pushed during\n         * execution of the ATN simulator\n         */\n        this.context = params.context!==null ? params.context : config.context;\n        this.semanticContext = params.semanticContext!==null ? params.semanticContext :\n            (config.semanticContext!==null ? config.semanticContext : SemanticContext.NONE);\n        // TODO: make it a boolean then\n        /**\n         * We cannot execute predicates dependent upon local context unless\n         * we know for sure we are in the correct context. Because there is\n         * no way to do this efficiently, we simply cannot evaluate\n         * dependent predicates unless we are in the rule that initially\n         * invokes the ATN simulator.\n         * closure() tracks the depth of how far we dip into the\n         * outer context: depth &gt; 0.  Note that it may not be totally\n         * accurate depth since I don't ever decrement\n         */\n        this.reachesIntoOuterContext = config.reachesIntoOuterContext;\n        this.precedenceFilterSuppressed = config.precedenceFilterSuppressed;\n    }\n\n    checkContext(params, config) {\n        if((params.context===null || params.context===undefined) &&\n                (config===null || config.context===null || config.context===undefined)) {\n            this.context = null;\n        }\n    }\n\n    hashCode() {\n        const hash = new Hash();\n        this.updateHashCode(hash);\n        return hash.finish();\n    }\n\n    updateHashCode(hash) {\n        hash.update(this.state.stateNumber, this.alt, this.context, this.semanticContext);\n    }\n\n    /**\n     * An ATN configuration is equal to another if both have\n     * the same state, they predict the same alternative, and\n     * syntactic/semantic contexts are the same\n     */\n    equals(other) {\n        if (this === other) {\n            return true;\n        } else if (! (other instanceof ATNConfig)) {\n            return false;\n        } else {\n            return this.state.stateNumber===other.state.stateNumber &&\n                this.alt===other.alt &&\n                (this.context===null ? other.context===null : this.context.equals(other.context)) &&\n                this.semanticContext.equals(other.semanticContext) &&\n                this.precedenceFilterSuppressed===other.precedenceFilterSuppressed;\n        }\n    }\n\n    hashCodeForConfigSet() {\n        const hash = new Hash();\n        hash.update(this.state.stateNumber, this.alt, this.semanticContext);\n        return hash.finish();\n    }\n\n    equalsForConfigSet(other) {\n        if (this === other) {\n            return true;\n        } else if (! (other instanceof ATNConfig)) {\n            return false;\n        } else {\n            return this.state.stateNumber===other.state.stateNumber &&\n                this.alt===other.alt &&\n                this.semanticContext.equals(other.semanticContext);\n        }\n    }\n\n    toString() {\n        return \"(\" + this.state + \",\" + this.alt +\n            (this.context!==null ? \",[\" + this.context.toString() + \"]\" : \"\") +\n            (this.semanticContext !== SemanticContext.NONE ?\n                    (\",\" + this.semanticContext.toString())\n                    : \"\") +\n            (this.reachesIntoOuterContext>0 ?\n                    (\",up=\" + this.reachesIntoOuterContext)\n                    : \"\") + \")\";\n    }\n}\n\n\nclass LexerATNConfig extends ATNConfig {\n    constructor(params, config) {\n        super(params, config);\n\n        // This is the backing field for {@link //getLexerActionExecutor}.\n        const lexerActionExecutor = params.lexerActionExecutor || null;\n        this.lexerActionExecutor = lexerActionExecutor || (config!==null ? config.lexerActionExecutor : null);\n        this.passedThroughNonGreedyDecision = config!==null ? this.checkNonGreedyDecision(config, this.state) : false;\n        this.hashCodeForConfigSet = LexerATNConfig.prototype.hashCode;\n        this.equalsForConfigSet = LexerATNConfig.prototype.equals;\n        return this;\n    }\n\n    updateHashCode(hash) {\n        hash.update(this.state.stateNumber, this.alt, this.context, this.semanticContext, this.passedThroughNonGreedyDecision, this.lexerActionExecutor);\n    }\n\n    equals(other) {\n        return this === other ||\n                (other instanceof LexerATNConfig &&\n                this.passedThroughNonGreedyDecision === other.passedThroughNonGreedyDecision &&\n                (this.lexerActionExecutor ? this.lexerActionExecutor.equals(other.lexerActionExecutor) : !other.lexerActionExecutor) &&\n                super.equals(other));\n    }\n\n    checkNonGreedyDecision(source, target) {\n        return source.passedThroughNonGreedyDecision ||\n            (target instanceof DecisionState) && target.nonGreedy;\n    }\n}\n\n\nmodule.exports.ATNConfig = ATNConfig;\nmodule.exports.LexerATNConfig = LexerATNConfig;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2FudGxyNEA0LjkuMy9ub2RlX21vZHVsZXMvYW50bHI0L3NyYy9hbnRscjQvYXRuL0FUTkNvbmZpZy5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPLGVBQWUsRUFBRSxtQkFBTyxDQUFDLDJHQUFZO0FBQzVDLE9BQU8saUJBQWlCLEVBQUUsbUJBQU8sQ0FBQyx5SEFBbUI7QUFDckQsT0FBTyxNQUFNLEVBQUUsbUJBQU8sQ0FBQyxrR0FBVTs7O0FBR2pDO0FBQ0E7QUFDQSxtQkFBbUI7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxlQUFlLFFBQVE7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUNBQXFDO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7O0FBRUEsMENBQTBDLCtCQUErQjtBQUN6RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0Esd0JBQXdCO0FBQ3hCLDZCQUE2QiIsInNvdXJjZXMiOlsiL1VzZXJzL2V0aGFua2ltL05lc3Rvci9tZWRmZXRjaC5qcy9ub2RlX21vZHVsZXMvLnBucG0vYW50bHI0QDQuOS4zL25vZGVfbW9kdWxlcy9hbnRscjQvc3JjL2FudGxyNC9hdG4vQVROQ29uZmlnLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIENvcHlyaWdodCAoYykgMjAxMi0yMDE3IFRoZSBBTlRMUiBQcm9qZWN0LiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogVXNlIG9mIHRoaXMgZmlsZSBpcyBnb3Zlcm5lZCBieSB0aGUgQlNEIDMtY2xhdXNlIGxpY2Vuc2UgdGhhdFxuICogY2FuIGJlIGZvdW5kIGluIHRoZSBMSUNFTlNFLnR4dCBmaWxlIGluIHRoZSBwcm9qZWN0IHJvb3QuXG4gKi9cblxuY29uc3Qge0RlY2lzaW9uU3RhdGV9ID0gcmVxdWlyZSgnLi9BVE5TdGF0ZScpO1xuY29uc3Qge1NlbWFudGljQ29udGV4dH0gPSByZXF1aXJlKCcuL1NlbWFudGljQ29udGV4dCcpO1xuY29uc3Qge0hhc2h9ID0gcmVxdWlyZShcIi4uL1V0aWxzXCIpO1xuXG5cbmZ1bmN0aW9uIGNoZWNrUGFyYW1zKHBhcmFtcywgaXNDZmcpIHtcblx0aWYocGFyYW1zPT09bnVsbCkge1xuXHRcdGNvbnN0IHJlc3VsdCA9IHsgc3RhdGU6bnVsbCwgYWx0Om51bGwsIGNvbnRleHQ6bnVsbCwgc2VtYW50aWNDb250ZXh0Om51bGwgfTtcblx0XHRpZihpc0NmZykge1xuXHRcdFx0cmVzdWx0LnJlYWNoZXNJbnRvT3V0ZXJDb250ZXh0ID0gMDtcblx0XHR9XG5cdFx0cmV0dXJuIHJlc3VsdDtcblx0fSBlbHNlIHtcblx0XHRjb25zdCBwcm9wcyA9IHt9O1xuXHRcdHByb3BzLnN0YXRlID0gcGFyYW1zLnN0YXRlIHx8IG51bGw7XG5cdFx0cHJvcHMuYWx0ID0gKHBhcmFtcy5hbHQgPT09IHVuZGVmaW5lZCkgPyBudWxsIDogcGFyYW1zLmFsdDtcblx0XHRwcm9wcy5jb250ZXh0ID0gcGFyYW1zLmNvbnRleHQgfHwgbnVsbDtcblx0XHRwcm9wcy5zZW1hbnRpY0NvbnRleHQgPSBwYXJhbXMuc2VtYW50aWNDb250ZXh0IHx8IG51bGw7XG5cdFx0aWYoaXNDZmcpIHtcblx0XHRcdHByb3BzLnJlYWNoZXNJbnRvT3V0ZXJDb250ZXh0ID0gcGFyYW1zLnJlYWNoZXNJbnRvT3V0ZXJDb250ZXh0IHx8IDA7XG5cdFx0XHRwcm9wcy5wcmVjZWRlbmNlRmlsdGVyU3VwcHJlc3NlZCA9IHBhcmFtcy5wcmVjZWRlbmNlRmlsdGVyU3VwcHJlc3NlZCB8fCBmYWxzZTtcblx0XHR9XG5cdFx0cmV0dXJuIHByb3BzO1xuXHR9XG59XG5cbmNsYXNzIEFUTkNvbmZpZyB7XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHBhcmFtcyBBIHR1cGxlOiAoQVROIHN0YXRlLCBwcmVkaWN0ZWQgYWx0LCBzeW50YWN0aWMsIHNlbWFudGljIGNvbnRleHQpLlxuICAgICAqIFRoZSBzeW50YWN0aWMgY29udGV4dCBpcyBhIGdyYXBoLXN0cnVjdHVyZWQgc3RhY2sgbm9kZSB3aG9zZVxuICAgICAqIHBhdGgocykgdG8gdGhlIHJvb3QgaXMgdGhlIHJ1bGUgaW52b2NhdGlvbihzKVxuICAgICAqIGNoYWluIHVzZWQgdG8gYXJyaXZlIGF0IHRoZSBzdGF0ZS4gIFRoZSBzZW1hbnRpYyBjb250ZXh0IGlzXG4gICAgICogdGhlIHRyZWUgb2Ygc2VtYW50aWMgcHJlZGljYXRlcyBlbmNvdW50ZXJlZCBiZWZvcmUgcmVhY2hpbmdcbiAgICAgKiBhbiBBVE4gc3RhdGVcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihwYXJhbXMsIGNvbmZpZykge1xuICAgICAgICB0aGlzLmNoZWNrQ29udGV4dChwYXJhbXMsIGNvbmZpZyk7XG4gICAgICAgIHBhcmFtcyA9IGNoZWNrUGFyYW1zKHBhcmFtcyk7XG4gICAgICAgIGNvbmZpZyA9IGNoZWNrUGFyYW1zKGNvbmZpZywgdHJ1ZSk7XG4gICAgICAgIC8vIFRoZSBBVE4gc3RhdGUgYXNzb2NpYXRlZCB3aXRoIHRoaXMgY29uZmlndXJhdGlvbi8vL1xuICAgICAgICB0aGlzLnN0YXRlID0gcGFyYW1zLnN0YXRlIT09bnVsbCA/IHBhcmFtcy5zdGF0ZSA6IGNvbmZpZy5zdGF0ZTtcbiAgICAgICAgLy8gV2hhdCBhbHQgKG9yIGxleGVyIHJ1bGUpIGlzIHByZWRpY3RlZCBieSB0aGlzIGNvbmZpZ3VyYXRpb24vLy9cbiAgICAgICAgdGhpcy5hbHQgPSBwYXJhbXMuYWx0IT09bnVsbCA/IHBhcmFtcy5hbHQgOiBjb25maWcuYWx0O1xuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIHN0YWNrIG9mIGludm9raW5nIHN0YXRlcyBsZWFkaW5nIHRvIHRoZSBydWxlL3N0YXRlcyBhc3NvY2lhdGVkXG4gICAgICAgICAqIHdpdGggdGhpcyBjb25maWcuICBXZSB0cmFjayBvbmx5IHRob3NlIGNvbnRleHRzIHB1c2hlZCBkdXJpbmdcbiAgICAgICAgICogZXhlY3V0aW9uIG9mIHRoZSBBVE4gc2ltdWxhdG9yXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmNvbnRleHQgPSBwYXJhbXMuY29udGV4dCE9PW51bGwgPyBwYXJhbXMuY29udGV4dCA6IGNvbmZpZy5jb250ZXh0O1xuICAgICAgICB0aGlzLnNlbWFudGljQ29udGV4dCA9IHBhcmFtcy5zZW1hbnRpY0NvbnRleHQhPT1udWxsID8gcGFyYW1zLnNlbWFudGljQ29udGV4dCA6XG4gICAgICAgICAgICAoY29uZmlnLnNlbWFudGljQ29udGV4dCE9PW51bGwgPyBjb25maWcuc2VtYW50aWNDb250ZXh0IDogU2VtYW50aWNDb250ZXh0Lk5PTkUpO1xuICAgICAgICAvLyBUT0RPOiBtYWtlIGl0IGEgYm9vbGVhbiB0aGVuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBXZSBjYW5ub3QgZXhlY3V0ZSBwcmVkaWNhdGVzIGRlcGVuZGVudCB1cG9uIGxvY2FsIGNvbnRleHQgdW5sZXNzXG4gICAgICAgICAqIHdlIGtub3cgZm9yIHN1cmUgd2UgYXJlIGluIHRoZSBjb3JyZWN0IGNvbnRleHQuIEJlY2F1c2UgdGhlcmUgaXNcbiAgICAgICAgICogbm8gd2F5IHRvIGRvIHRoaXMgZWZmaWNpZW50bHksIHdlIHNpbXBseSBjYW5ub3QgZXZhbHVhdGVcbiAgICAgICAgICogZGVwZW5kZW50IHByZWRpY2F0ZXMgdW5sZXNzIHdlIGFyZSBpbiB0aGUgcnVsZSB0aGF0IGluaXRpYWxseVxuICAgICAgICAgKiBpbnZva2VzIHRoZSBBVE4gc2ltdWxhdG9yLlxuICAgICAgICAgKiBjbG9zdXJlKCkgdHJhY2tzIHRoZSBkZXB0aCBvZiBob3cgZmFyIHdlIGRpcCBpbnRvIHRoZVxuICAgICAgICAgKiBvdXRlciBjb250ZXh0OiBkZXB0aCAmZ3Q7IDAuICBOb3RlIHRoYXQgaXQgbWF5IG5vdCBiZSB0b3RhbGx5XG4gICAgICAgICAqIGFjY3VyYXRlIGRlcHRoIHNpbmNlIEkgZG9uJ3QgZXZlciBkZWNyZW1lbnRcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMucmVhY2hlc0ludG9PdXRlckNvbnRleHQgPSBjb25maWcucmVhY2hlc0ludG9PdXRlckNvbnRleHQ7XG4gICAgICAgIHRoaXMucHJlY2VkZW5jZUZpbHRlclN1cHByZXNzZWQgPSBjb25maWcucHJlY2VkZW5jZUZpbHRlclN1cHByZXNzZWQ7XG4gICAgfVxuXG4gICAgY2hlY2tDb250ZXh0KHBhcmFtcywgY29uZmlnKSB7XG4gICAgICAgIGlmKChwYXJhbXMuY29udGV4dD09PW51bGwgfHwgcGFyYW1zLmNvbnRleHQ9PT11bmRlZmluZWQpICYmXG4gICAgICAgICAgICAgICAgKGNvbmZpZz09PW51bGwgfHwgY29uZmlnLmNvbnRleHQ9PT1udWxsIHx8IGNvbmZpZy5jb250ZXh0PT09dW5kZWZpbmVkKSkge1xuICAgICAgICAgICAgdGhpcy5jb250ZXh0ID0gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGhhc2hDb2RlKCkge1xuICAgICAgICBjb25zdCBoYXNoID0gbmV3IEhhc2goKTtcbiAgICAgICAgdGhpcy51cGRhdGVIYXNoQ29kZShoYXNoKTtcbiAgICAgICAgcmV0dXJuIGhhc2guZmluaXNoKCk7XG4gICAgfVxuXG4gICAgdXBkYXRlSGFzaENvZGUoaGFzaCkge1xuICAgICAgICBoYXNoLnVwZGF0ZSh0aGlzLnN0YXRlLnN0YXRlTnVtYmVyLCB0aGlzLmFsdCwgdGhpcy5jb250ZXh0LCB0aGlzLnNlbWFudGljQ29udGV4dCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQW4gQVROIGNvbmZpZ3VyYXRpb24gaXMgZXF1YWwgdG8gYW5vdGhlciBpZiBib3RoIGhhdmVcbiAgICAgKiB0aGUgc2FtZSBzdGF0ZSwgdGhleSBwcmVkaWN0IHRoZSBzYW1lIGFsdGVybmF0aXZlLCBhbmRcbiAgICAgKiBzeW50YWN0aWMvc2VtYW50aWMgY29udGV4dHMgYXJlIHRoZSBzYW1lXG4gICAgICovXG4gICAgZXF1YWxzKG90aGVyKSB7XG4gICAgICAgIGlmICh0aGlzID09PSBvdGhlcikge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0gZWxzZSBpZiAoISAob3RoZXIgaW5zdGFuY2VvZiBBVE5Db25maWcpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zdGF0ZS5zdGF0ZU51bWJlcj09PW90aGVyLnN0YXRlLnN0YXRlTnVtYmVyICYmXG4gICAgICAgICAgICAgICAgdGhpcy5hbHQ9PT1vdGhlci5hbHQgJiZcbiAgICAgICAgICAgICAgICAodGhpcy5jb250ZXh0PT09bnVsbCA/IG90aGVyLmNvbnRleHQ9PT1udWxsIDogdGhpcy5jb250ZXh0LmVxdWFscyhvdGhlci5jb250ZXh0KSkgJiZcbiAgICAgICAgICAgICAgICB0aGlzLnNlbWFudGljQ29udGV4dC5lcXVhbHMob3RoZXIuc2VtYW50aWNDb250ZXh0KSAmJlxuICAgICAgICAgICAgICAgIHRoaXMucHJlY2VkZW5jZUZpbHRlclN1cHByZXNzZWQ9PT1vdGhlci5wcmVjZWRlbmNlRmlsdGVyU3VwcHJlc3NlZDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGhhc2hDb2RlRm9yQ29uZmlnU2V0KCkge1xuICAgICAgICBjb25zdCBoYXNoID0gbmV3IEhhc2goKTtcbiAgICAgICAgaGFzaC51cGRhdGUodGhpcy5zdGF0ZS5zdGF0ZU51bWJlciwgdGhpcy5hbHQsIHRoaXMuc2VtYW50aWNDb250ZXh0KTtcbiAgICAgICAgcmV0dXJuIGhhc2guZmluaXNoKCk7XG4gICAgfVxuXG4gICAgZXF1YWxzRm9yQ29uZmlnU2V0KG90aGVyKSB7XG4gICAgICAgIGlmICh0aGlzID09PSBvdGhlcikge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0gZWxzZSBpZiAoISAob3RoZXIgaW5zdGFuY2VvZiBBVE5Db25maWcpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zdGF0ZS5zdGF0ZU51bWJlcj09PW90aGVyLnN0YXRlLnN0YXRlTnVtYmVyICYmXG4gICAgICAgICAgICAgICAgdGhpcy5hbHQ9PT1vdGhlci5hbHQgJiZcbiAgICAgICAgICAgICAgICB0aGlzLnNlbWFudGljQ29udGV4dC5lcXVhbHMob3RoZXIuc2VtYW50aWNDb250ZXh0KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHRvU3RyaW5nKCkge1xuICAgICAgICByZXR1cm4gXCIoXCIgKyB0aGlzLnN0YXRlICsgXCIsXCIgKyB0aGlzLmFsdCArXG4gICAgICAgICAgICAodGhpcy5jb250ZXh0IT09bnVsbCA/IFwiLFtcIiArIHRoaXMuY29udGV4dC50b1N0cmluZygpICsgXCJdXCIgOiBcIlwiKSArXG4gICAgICAgICAgICAodGhpcy5zZW1hbnRpY0NvbnRleHQgIT09IFNlbWFudGljQ29udGV4dC5OT05FID9cbiAgICAgICAgICAgICAgICAgICAgKFwiLFwiICsgdGhpcy5zZW1hbnRpY0NvbnRleHQudG9TdHJpbmcoKSlcbiAgICAgICAgICAgICAgICAgICAgOiBcIlwiKSArXG4gICAgICAgICAgICAodGhpcy5yZWFjaGVzSW50b091dGVyQ29udGV4dD4wID9cbiAgICAgICAgICAgICAgICAgICAgKFwiLHVwPVwiICsgdGhpcy5yZWFjaGVzSW50b091dGVyQ29udGV4dClcbiAgICAgICAgICAgICAgICAgICAgOiBcIlwiKSArIFwiKVwiO1xuICAgIH1cbn1cblxuXG5jbGFzcyBMZXhlckFUTkNvbmZpZyBleHRlbmRzIEFUTkNvbmZpZyB7XG4gICAgY29uc3RydWN0b3IocGFyYW1zLCBjb25maWcpIHtcbiAgICAgICAgc3VwZXIocGFyYW1zLCBjb25maWcpO1xuXG4gICAgICAgIC8vIFRoaXMgaXMgdGhlIGJhY2tpbmcgZmllbGQgZm9yIHtAbGluayAvL2dldExleGVyQWN0aW9uRXhlY3V0b3J9LlxuICAgICAgICBjb25zdCBsZXhlckFjdGlvbkV4ZWN1dG9yID0gcGFyYW1zLmxleGVyQWN0aW9uRXhlY3V0b3IgfHwgbnVsbDtcbiAgICAgICAgdGhpcy5sZXhlckFjdGlvbkV4ZWN1dG9yID0gbGV4ZXJBY3Rpb25FeGVjdXRvciB8fCAoY29uZmlnIT09bnVsbCA/IGNvbmZpZy5sZXhlckFjdGlvbkV4ZWN1dG9yIDogbnVsbCk7XG4gICAgICAgIHRoaXMucGFzc2VkVGhyb3VnaE5vbkdyZWVkeURlY2lzaW9uID0gY29uZmlnIT09bnVsbCA/IHRoaXMuY2hlY2tOb25HcmVlZHlEZWNpc2lvbihjb25maWcsIHRoaXMuc3RhdGUpIDogZmFsc2U7XG4gICAgICAgIHRoaXMuaGFzaENvZGVGb3JDb25maWdTZXQgPSBMZXhlckFUTkNvbmZpZy5wcm90b3R5cGUuaGFzaENvZGU7XG4gICAgICAgIHRoaXMuZXF1YWxzRm9yQ29uZmlnU2V0ID0gTGV4ZXJBVE5Db25maWcucHJvdG90eXBlLmVxdWFscztcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgdXBkYXRlSGFzaENvZGUoaGFzaCkge1xuICAgICAgICBoYXNoLnVwZGF0ZSh0aGlzLnN0YXRlLnN0YXRlTnVtYmVyLCB0aGlzLmFsdCwgdGhpcy5jb250ZXh0LCB0aGlzLnNlbWFudGljQ29udGV4dCwgdGhpcy5wYXNzZWRUaHJvdWdoTm9uR3JlZWR5RGVjaXNpb24sIHRoaXMubGV4ZXJBY3Rpb25FeGVjdXRvcik7XG4gICAgfVxuXG4gICAgZXF1YWxzKG90aGVyKSB7XG4gICAgICAgIHJldHVybiB0aGlzID09PSBvdGhlciB8fFxuICAgICAgICAgICAgICAgIChvdGhlciBpbnN0YW5jZW9mIExleGVyQVROQ29uZmlnICYmXG4gICAgICAgICAgICAgICAgdGhpcy5wYXNzZWRUaHJvdWdoTm9uR3JlZWR5RGVjaXNpb24gPT09IG90aGVyLnBhc3NlZFRocm91Z2hOb25HcmVlZHlEZWNpc2lvbiAmJlxuICAgICAgICAgICAgICAgICh0aGlzLmxleGVyQWN0aW9uRXhlY3V0b3IgPyB0aGlzLmxleGVyQWN0aW9uRXhlY3V0b3IuZXF1YWxzKG90aGVyLmxleGVyQWN0aW9uRXhlY3V0b3IpIDogIW90aGVyLmxleGVyQWN0aW9uRXhlY3V0b3IpICYmXG4gICAgICAgICAgICAgICAgc3VwZXIuZXF1YWxzKG90aGVyKSk7XG4gICAgfVxuXG4gICAgY2hlY2tOb25HcmVlZHlEZWNpc2lvbihzb3VyY2UsIHRhcmdldCkge1xuICAgICAgICByZXR1cm4gc291cmNlLnBhc3NlZFRocm91Z2hOb25HcmVlZHlEZWNpc2lvbiB8fFxuICAgICAgICAgICAgKHRhcmdldCBpbnN0YW5jZW9mIERlY2lzaW9uU3RhdGUpICYmIHRhcmdldC5ub25HcmVlZHk7XG4gICAgfVxufVxuXG5cbm1vZHVsZS5leHBvcnRzLkFUTkNvbmZpZyA9IEFUTkNvbmZpZztcbm1vZHVsZS5leHBvcnRzLkxleGVyQVROQ29uZmlnID0gTGV4ZXJBVE5Db25maWc7XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/atn/ATNConfig.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/atn/ATNConfigSet.js":
/*!*********************************************************************************************!*\
  !*** ../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/atn/ATNConfigSet.js ***!
  \*********************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nconst ATN = __webpack_require__(/*! ./ATN */ \"(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/atn/ATN.js\");\nconst Utils = __webpack_require__(/*! ./../Utils */ \"(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/Utils.js\");\nconst {SemanticContext} = __webpack_require__(/*! ./SemanticContext */ \"(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/atn/SemanticContext.js\");\nconst {merge} = __webpack_require__(/*! ./../PredictionContext */ \"(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/PredictionContext.js\");\n\nfunction hashATNConfig(c) {\n\treturn c.hashCodeForConfigSet();\n}\n\nfunction equalATNConfigs(a, b) {\n\tif ( a===b ) {\n\t\treturn true;\n\t} else if ( a===null || b===null ) {\n\t\treturn false;\n\t} else\n       return a.equalsForConfigSet(b);\n }\n\n/**\n * Specialized {@link Set}{@code <}{@link ATNConfig}{@code >} that can track\n * info about the set, with support for combining similar configurations using a\n * graph-structured stack\n */\nclass ATNConfigSet {\n\tconstructor(fullCtx) {\n\t\t/**\n\t\t * The reason that we need this is because we don't want the hash map to use\n\t\t * the standard hash code and equals. We need all configurations with the\n\t\t * same\n\t\t * {@code (s,i,_,semctx)} to be equal. Unfortunately, this key effectively\n\t\t * doubles\n\t\t * the number of objects associated with ATNConfigs. The other solution is\n\t\t * to\n\t\t * use a hash table that lets us specify the equals/hashcode operation.\n\t\t * All configs but hashed by (s, i, _, pi) not including context. Wiped out\n\t\t * when we go readonly as this set becomes a DFA state\n\t\t */\n\t\tthis.configLookup = new Utils.Set(hashATNConfig, equalATNConfigs);\n\t\t/**\n\t\t * Indicates that this configuration set is part of a full context\n\t\t * LL prediction. It will be used to determine how to merge $. With SLL\n\t\t * it's a wildcard whereas it is not for LL context merge\n\t\t */\n\t\tthis.fullCtx = fullCtx === undefined ? true : fullCtx;\n\t\t/**\n\t\t * Indicates that the set of configurations is read-only. Do not\n\t\t * allow any code to manipulate the set; DFA states will point at\n\t\t * the sets and they must not change. This does not protect the other\n\t\t * fields; in particular, conflictingAlts is set after\n\t\t * we've made this readonly\n\t\t */\n\t\tthis.readOnly = false;\n\t\t// Track the elements as they are added to the set; supports get(i)///\n\t\tthis.configs = [];\n\n\t\t// TODO: these fields make me pretty uncomfortable but nice to pack up info\n\t\t// together, saves recomputation\n\t\t// TODO: can we track conflicts as they are added to save scanning configs\n\t\t// later?\n\t\tthis.uniqueAlt = 0;\n\t\tthis.conflictingAlts = null;\n\n\t\t/**\n\t\t * Used in parser and lexer. In lexer, it indicates we hit a pred\n\t\t * while computing a closure operation. Don't make a DFA state from this\n\t\t */\n\t\tthis.hasSemanticContext = false;\n\t\tthis.dipsIntoOuterContext = false;\n\n\t\tthis.cachedHashCode = -1;\n\t}\n\n\t/**\n\t * Adding a new config means merging contexts with existing configs for\n\t * {@code (s, i, pi, _)}, where {@code s} is the\n\t * {@link ATNConfig//state}, {@code i} is the {@link ATNConfig//alt}, and\n\t * {@code pi} is the {@link ATNConfig//semanticContext}. We use\n\t * {@code (s,i,pi)} as key.\n\t *\n\t * <p>This method updates {@link //dipsIntoOuterContext} and\n\t * {@link //hasSemanticContext} when necessary.</p>\n\t */\n\tadd(config, mergeCache) {\n\t\tif (mergeCache === undefined) {\n\t\t\tmergeCache = null;\n\t\t}\n\t\tif (this.readOnly) {\n\t\t\tthrow \"This set is readonly\";\n\t\t}\n\t\tif (config.semanticContext !== SemanticContext.NONE) {\n\t\t\tthis.hasSemanticContext = true;\n\t\t}\n\t\tif (config.reachesIntoOuterContext > 0) {\n\t\t\tthis.dipsIntoOuterContext = true;\n\t\t}\n\t\tconst existing = this.configLookup.add(config);\n\t\tif (existing === config) {\n\t\t\tthis.cachedHashCode = -1;\n\t\t\tthis.configs.push(config); // track order here\n\t\t\treturn true;\n\t\t}\n\t\t// a previous (s,i,pi,_), merge with it and save result\n\t\tconst rootIsWildcard = !this.fullCtx;\n\t\tconst merged = merge(existing.context, config.context, rootIsWildcard, mergeCache);\n\t\t/**\n\t\t * no need to check for existing.context, config.context in cache\n\t\t * since only way to create new graphs is \"call rule\" and here. We\n\t\t * cache at both places\n\t\t */\n\t\texisting.reachesIntoOuterContext = Math.max( existing.reachesIntoOuterContext, config.reachesIntoOuterContext);\n\t\t// make sure to preserve the precedence filter suppression during the merge\n\t\tif (config.precedenceFilterSuppressed) {\n\t\t\texisting.precedenceFilterSuppressed = true;\n\t\t}\n\t\texisting.context = merged; // replace context; no need to alt mapping\n\t\treturn true;\n\t}\n\n\tgetStates() {\n\t\tconst states = new Utils.Set();\n\t\tfor (let i = 0; i < this.configs.length; i++) {\n\t\t\tstates.add(this.configs[i].state);\n\t\t}\n\t\treturn states;\n\t}\n\n\tgetPredicates() {\n\t\tconst preds = [];\n\t\tfor (let i = 0; i < this.configs.length; i++) {\n\t\t\tconst c = this.configs[i].semanticContext;\n\t\t\tif (c !== SemanticContext.NONE) {\n\t\t\t\tpreds.push(c.semanticContext);\n\t\t\t}\n\t\t}\n\t\treturn preds;\n\t}\n\n\toptimizeConfigs(interpreter) {\n\t\tif (this.readOnly) {\n\t\t\tthrow \"This set is readonly\";\n\t\t}\n\t\tif (this.configLookup.length === 0) {\n\t\t\treturn;\n\t\t}\n\t\tfor (let i = 0; i < this.configs.length; i++) {\n\t\t\tconst config = this.configs[i];\n\t\t\tconfig.context = interpreter.getCachedContext(config.context);\n\t\t}\n\t}\n\n\taddAll(coll) {\n\t\tfor (let i = 0; i < coll.length; i++) {\n\t\t\tthis.add(coll[i]);\n\t\t}\n\t\treturn false;\n\t}\n\n\tequals(other) {\n\t\treturn this === other ||\n\t\t\t(other instanceof ATNConfigSet &&\n\t\t\tUtils.equalArrays(this.configs, other.configs) &&\n\t\t\tthis.fullCtx === other.fullCtx &&\n\t\t\tthis.uniqueAlt === other.uniqueAlt &&\n\t\t\tthis.conflictingAlts === other.conflictingAlts &&\n\t\t\tthis.hasSemanticContext === other.hasSemanticContext &&\n\t\t\tthis.dipsIntoOuterContext === other.dipsIntoOuterContext);\n\t}\n\n\thashCode() {\n\t\tconst hash = new Utils.Hash();\n\t\thash.update(this.configs);\n\t\treturn hash.finish();\n\t}\n\n\tupdateHashCode(hash) {\n\t\tif (this.readOnly) {\n\t\t\tif (this.cachedHashCode === -1) {\n\t\t\t\tthis.cachedHashCode = this.hashCode();\n\t\t\t}\n\t\t\thash.update(this.cachedHashCode);\n\t\t} else {\n\t\t\thash.update(this.hashCode());\n\t\t}\n\t}\n\n\tisEmpty() {\n\t\treturn this.configs.length === 0;\n\t}\n\n\tcontains(item) {\n\t\tif (this.configLookup === null) {\n\t\t\tthrow \"This method is not implemented for readonly sets.\";\n\t\t}\n\t\treturn this.configLookup.contains(item);\n\t}\n\n\tcontainsFast(item) {\n\t\tif (this.configLookup === null) {\n\t\t\tthrow \"This method is not implemented for readonly sets.\";\n\t\t}\n\t\treturn this.configLookup.containsFast(item);\n\t}\n\n\tclear() {\n\t\tif (this.readOnly) {\n\t\t\tthrow \"This set is readonly\";\n\t\t}\n\t\tthis.configs = [];\n\t\tthis.cachedHashCode = -1;\n\t\tthis.configLookup = new Utils.Set();\n\t}\n\n\tsetReadonly(readOnly) {\n\t\tthis.readOnly = readOnly;\n\t\tif (readOnly) {\n\t\t\tthis.configLookup = null; // can't mod, no need for lookup cache\n\t\t}\n\t}\n\n\ttoString() {\n\t\treturn Utils.arrayToString(this.configs) +\n\t\t\t(this.hasSemanticContext ? \",hasSemanticContext=\" + this.hasSemanticContext : \"\") +\n\t\t\t(this.uniqueAlt !== ATN.INVALID_ALT_NUMBER ? \",uniqueAlt=\" + this.uniqueAlt : \"\") +\n\t\t\t(this.conflictingAlts !== null ? \",conflictingAlts=\" + this.conflictingAlts : \"\") +\n\t\t\t(this.dipsIntoOuterContext ? \",dipsIntoOuterContext\" : \"\");\n\t}\n\n\tget items(){\n\t\treturn this.configs;\n\t}\n\n\tget length(){\n\t\treturn this.configs.length;\n\t}\n}\n\n\nclass OrderedATNConfigSet extends ATNConfigSet {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.configLookup = new Utils.Set();\n\t}\n}\n\nmodule.exports = {\n\tATNConfigSet,\n\tOrderedATNConfigSet\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/atn/ATNConfigSet.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/atn/ATNDeserializationOptions.js":
/*!**********************************************************************************************************!*\
  !*** ../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/atn/ATNDeserializationOptions.js ***!
  \**********************************************************************************************************/
/***/ ((module) => {

eval("/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nclass ATNDeserializationOptions {\n\tconstructor(copyFrom) {\n\t\tif(copyFrom===undefined) {\n\t\t\tcopyFrom = null;\n\t\t}\n\t\tthis.readOnly = false;\n\t\tthis.verifyATN = copyFrom===null ? true : copyFrom.verifyATN;\n\t\tthis.generateRuleBypassTransitions = copyFrom===null ? false : copyFrom.generateRuleBypassTransitions;\n\t}\n}\n\nATNDeserializationOptions.defaultOptions = new ATNDeserializationOptions();\nATNDeserializationOptions.defaultOptions.readOnly = true;\n\n//    def __setattr__(self, key, value):\n//        if key!=\"readOnly\" and self.readOnly:\n//            raise Exception(\"The object is read only.\")\n//        super(type(self), self).__setattr__(key,value)\n\nmodule.exports = ATNDeserializationOptions\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2FudGxyNEA0LjkuMy9ub2RlX21vZHVsZXMvYW50bHI0L3NyYy9hbnRscjQvYXRuL0FUTkRlc2VyaWFsaXphdGlvbk9wdGlvbnMuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsiL1VzZXJzL2V0aGFua2ltL05lc3Rvci9tZWRmZXRjaC5qcy9ub2RlX21vZHVsZXMvLnBucG0vYW50bHI0QDQuOS4zL25vZGVfbW9kdWxlcy9hbnRscjQvc3JjL2FudGxyNC9hdG4vQVRORGVzZXJpYWxpemF0aW9uT3B0aW9ucy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiBDb3B5cmlnaHQgKGMpIDIwMTItMjAxNyBUaGUgQU5UTFIgUHJvamVjdC4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFVzZSBvZiB0aGlzIGZpbGUgaXMgZ292ZXJuZWQgYnkgdGhlIEJTRCAzLWNsYXVzZSBsaWNlbnNlIHRoYXRcbiAqIGNhbiBiZSBmb3VuZCBpbiB0aGUgTElDRU5TRS50eHQgZmlsZSBpbiB0aGUgcHJvamVjdCByb290LlxuICovXG5cbmNsYXNzIEFUTkRlc2VyaWFsaXphdGlvbk9wdGlvbnMge1xuXHRjb25zdHJ1Y3Rvcihjb3B5RnJvbSkge1xuXHRcdGlmKGNvcHlGcm9tPT09dW5kZWZpbmVkKSB7XG5cdFx0XHRjb3B5RnJvbSA9IG51bGw7XG5cdFx0fVxuXHRcdHRoaXMucmVhZE9ubHkgPSBmYWxzZTtcblx0XHR0aGlzLnZlcmlmeUFUTiA9IGNvcHlGcm9tPT09bnVsbCA/IHRydWUgOiBjb3B5RnJvbS52ZXJpZnlBVE47XG5cdFx0dGhpcy5nZW5lcmF0ZVJ1bGVCeXBhc3NUcmFuc2l0aW9ucyA9IGNvcHlGcm9tPT09bnVsbCA/IGZhbHNlIDogY29weUZyb20uZ2VuZXJhdGVSdWxlQnlwYXNzVHJhbnNpdGlvbnM7XG5cdH1cbn1cblxuQVRORGVzZXJpYWxpemF0aW9uT3B0aW9ucy5kZWZhdWx0T3B0aW9ucyA9IG5ldyBBVE5EZXNlcmlhbGl6YXRpb25PcHRpb25zKCk7XG5BVE5EZXNlcmlhbGl6YXRpb25PcHRpb25zLmRlZmF1bHRPcHRpb25zLnJlYWRPbmx5ID0gdHJ1ZTtcblxuLy8gICAgZGVmIF9fc2V0YXR0cl9fKHNlbGYsIGtleSwgdmFsdWUpOlxuLy8gICAgICAgIGlmIGtleSE9XCJyZWFkT25seVwiIGFuZCBzZWxmLnJlYWRPbmx5OlxuLy8gICAgICAgICAgICByYWlzZSBFeGNlcHRpb24oXCJUaGUgb2JqZWN0IGlzIHJlYWQgb25seS5cIilcbi8vICAgICAgICBzdXBlcih0eXBlKHNlbGYpLCBzZWxmKS5fX3NldGF0dHJfXyhrZXksdmFsdWUpXG5cbm1vZHVsZS5leHBvcnRzID0gQVRORGVzZXJpYWxpemF0aW9uT3B0aW9uc1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/atn/ATNDeserializationOptions.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/atn/ATNDeserializer.js":
/*!************************************************************************************************!*\
  !*** ../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/atn/ATNDeserializer.js ***!
  \************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nconst {Token} = __webpack_require__(/*! ./../Token */ \"(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/Token.js\");\nconst ATN = __webpack_require__(/*! ./ATN */ \"(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/atn/ATN.js\");\nconst ATNType = __webpack_require__(/*! ./ATNType */ \"(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/atn/ATNType.js\");\n\nconst {\n    ATNState,\n    BasicState,\n    DecisionState,\n    BlockStartState,\n    BlockEndState,\n    LoopEndState,\n    RuleStartState,\n    RuleStopState,\n    TokensStartState,\n    PlusLoopbackState,\n    StarLoopbackState,\n    StarLoopEntryState,\n    PlusBlockStartState,\n    StarBlockStartState,\n    BasicBlockStartState\n} = __webpack_require__(/*! ./ATNState */ \"(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/atn/ATNState.js\");\n\nconst {\n    Transition,\n    AtomTransition,\n    SetTransition,\n    NotSetTransition,\n    RuleTransition,\n    RangeTransition,\n    ActionTransition,\n    EpsilonTransition,\n    WildcardTransition,\n    PredicateTransition,\n    PrecedencePredicateTransition\n} = __webpack_require__(/*! ./Transition */ \"(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/atn/Transition.js\")\n\nconst {IntervalSet} = __webpack_require__(/*! ./../IntervalSet */ \"(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/IntervalSet.js\");\nconst ATNDeserializationOptions = __webpack_require__(/*! ./ATNDeserializationOptions */ \"(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/atn/ATNDeserializationOptions.js\");\n\nconst {\n    LexerActionType,\n    LexerSkipAction,\n    LexerChannelAction,\n    LexerCustomAction,\n    LexerMoreAction,\n    LexerTypeAction,\n    LexerPushModeAction,\n    LexerPopModeAction,\n    LexerModeAction,\n} = __webpack_require__(/*! ./LexerAction */ \"(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/atn/LexerAction.js\");\n\n// This is the earliest supported serialized UUID.\n// stick to serialized version for now, we don't need a UUID instance\nconst BASE_SERIALIZED_UUID = \"AADB8D7E-AEEF-4415-AD2B-8204D6CF042E\";\n\n//\n// This UUID indicates the serialized ATN contains two sets of\n// IntervalSets, where the second set's values are encoded as\n// 32-bit integers to support the full Unicode SMP range up to U+10FFFF.\n//\nconst ADDED_UNICODE_SMP = \"59627784-3BE5-417A-B9EB-8131A7286089\";\n\n// This list contains all of the currently supported UUIDs, ordered by when\n// the feature first appeared in this branch.\nconst SUPPORTED_UUIDS = [ BASE_SERIALIZED_UUID, ADDED_UNICODE_SMP ];\n\nconst SERIALIZED_VERSION = 3;\n\n// This is the current serialized UUID.\nconst SERIALIZED_UUID = ADDED_UNICODE_SMP;\n\nfunction initArray( length, value) {\n\tconst tmp = [];\n\ttmp[length-1] = value;\n\treturn tmp.map(function(i) {return value;});\n}\n\nclass ATNDeserializer {\n    constructor(options) {\n\n        if ( options=== undefined || options === null ) {\n            options = ATNDeserializationOptions.defaultOptions;\n        }\n        this.deserializationOptions = options;\n        this.stateFactories = null;\n        this.actionFactories = null;\n    }\n\n    /**\n     * Determines if a particular serialized representation of an ATN supports\n     * a particular feature, identified by the {@link UUID} used for serializing\n     * the ATN at the time the feature was first introduced.\n     *\n     * @param feature The {@link UUID} marking the first time the feature was\n     * supported in the serialized ATN.\n     * @param actualUuid The {@link UUID} of the actual serialized ATN which is\n     * currently being deserialized.\n     * @return {@code true} if the {@code actualUuid} value represents a\n     * serialized ATN at or after the feature identified by {@code feature} was\n     * introduced; otherwise, {@code false}.\n    */\n    isFeatureSupported(feature, actualUuid) {\n        const idx1 = SUPPORTED_UUIDS.indexOf(feature);\n        if (idx1<0) {\n            return false;\n        }\n        const idx2 = SUPPORTED_UUIDS.indexOf(actualUuid);\n        return idx2 >= idx1;\n    }\n\n    deserialize(data) {\n        this.reset(data);\n        this.checkVersion();\n        this.checkUUID();\n        const atn = this.readATN();\n        this.readStates(atn);\n        this.readRules(atn);\n        this.readModes(atn);\n        const sets = [];\n        // First, deserialize sets with 16-bit arguments <= U+FFFF.\n        this.readSets(atn, sets, this.readInt.bind(this));\n        // Next, if the ATN was serialized with the Unicode SMP feature,\n        // deserialize sets with 32-bit arguments <= U+10FFFF.\n        if (this.isFeatureSupported(ADDED_UNICODE_SMP, this.uuid)) {\n            this.readSets(atn, sets, this.readInt32.bind(this));\n        }\n        this.readEdges(atn, sets);\n        this.readDecisions(atn);\n        this.readLexerActions(atn);\n        this.markPrecedenceDecisions(atn);\n        this.verifyATN(atn);\n        if (this.deserializationOptions.generateRuleBypassTransitions && atn.grammarType === ATNType.PARSER ) {\n            this.generateRuleBypassTransitions(atn);\n            // re-verify after modification\n            this.verifyATN(atn);\n        }\n        return atn;\n    }\n\n    reset(data) {\n        const adjust = function(c) {\n            const v = c.charCodeAt(0);\n            return v>1  ? v-2 : v + 65534;\n        };\n        const temp = data.split(\"\").map(adjust);\n        // don't adjust the first value since that's the version number\n        temp[0] = data.charCodeAt(0);\n        this.data = temp;\n        this.pos = 0;\n    }\n\n    checkVersion() {\n        const version = this.readInt();\n        if ( version !== SERIALIZED_VERSION ) {\n            throw (\"Could not deserialize ATN with version \" + version + \" (expected \" + SERIALIZED_VERSION + \").\");\n        }\n    }\n\n    checkUUID() {\n        const uuid = this.readUUID();\n        if (SUPPORTED_UUIDS.indexOf(uuid)<0) {\n            throw (\"Could not deserialize ATN with UUID: \" + uuid +\n                            \" (expected \" + SERIALIZED_UUID + \" or a legacy UUID).\", uuid, SERIALIZED_UUID);\n        }\n        this.uuid = uuid;\n    }\n\n    readATN() {\n        const grammarType = this.readInt();\n        const maxTokenType = this.readInt();\n        return new ATN(grammarType, maxTokenType);\n    }\n\n    readStates(atn) {\n        let j, pair, stateNumber;\n        const  loopBackStateNumbers = [];\n        const  endStateNumbers = [];\n        const  nstates = this.readInt();\n        for(let i=0; i<nstates; i++) {\n            const  stype = this.readInt();\n            // ignore bad type of states\n            if (stype===ATNState.INVALID_TYPE) {\n                atn.addState(null);\n                continue;\n            }\n            let ruleIndex = this.readInt();\n            if (ruleIndex === 0xFFFF) {\n                ruleIndex = -1;\n            }\n            const  s = this.stateFactory(stype, ruleIndex);\n            if (stype === ATNState.LOOP_END) { // special case\n                const  loopBackStateNumber = this.readInt();\n                loopBackStateNumbers.push([s, loopBackStateNumber]);\n            } else if(s instanceof BlockStartState) {\n                const  endStateNumber = this.readInt();\n                endStateNumbers.push([s, endStateNumber]);\n            }\n            atn.addState(s);\n        }\n        // delay the assignment of loop back and end states until we know all the\n        // state instances have been initialized\n        for (j=0; j<loopBackStateNumbers.length; j++) {\n            pair = loopBackStateNumbers[j];\n            pair[0].loopBackState = atn.states[pair[1]];\n        }\n\n        for (j=0; j<endStateNumbers.length; j++) {\n            pair = endStateNumbers[j];\n            pair[0].endState = atn.states[pair[1]];\n        }\n\n        let numNonGreedyStates = this.readInt();\n        for (j=0; j<numNonGreedyStates; j++) {\n            stateNumber = this.readInt();\n            atn.states[stateNumber].nonGreedy = true;\n        }\n\n        let numPrecedenceStates = this.readInt();\n        for (j=0; j<numPrecedenceStates; j++) {\n            stateNumber = this.readInt();\n            atn.states[stateNumber].isPrecedenceRule = true;\n        }\n    }\n\n    readRules(atn) {\n        let i;\n        const nrules = this.readInt();\n        if (atn.grammarType === ATNType.LEXER ) {\n            atn.ruleToTokenType = initArray(nrules, 0);\n        }\n        atn.ruleToStartState = initArray(nrules, 0);\n        for (i=0; i<nrules; i++) {\n            const s = this.readInt();\n            atn.ruleToStartState[i] = atn.states[s];\n            if ( atn.grammarType === ATNType.LEXER ) {\n                let tokenType = this.readInt();\n                if (tokenType === 0xFFFF) {\n                    tokenType = Token.EOF;\n                }\n                atn.ruleToTokenType[i] = tokenType;\n            }\n        }\n        atn.ruleToStopState = initArray(nrules, 0);\n        for (i=0; i<atn.states.length; i++) {\n            const state = atn.states[i];\n            if (!(state instanceof RuleStopState)) {\n                continue;\n            }\n            atn.ruleToStopState[state.ruleIndex] = state;\n            atn.ruleToStartState[state.ruleIndex].stopState = state;\n        }\n    }\n\n    readModes(atn) {\n        const nmodes = this.readInt();\n        for (let i=0; i<nmodes; i++) {\n            let s = this.readInt();\n            atn.modeToStartState.push(atn.states[s]);\n        }\n    }\n\n    readSets(atn, sets, readUnicode) {\n        const m = this.readInt();\n        for (let i=0; i<m; i++) {\n            const iset = new IntervalSet();\n            sets.push(iset);\n            const n = this.readInt();\n            const containsEof = this.readInt();\n            if (containsEof!==0) {\n                iset.addOne(-1);\n            }\n            for (let j=0; j<n; j++) {\n                const i1 = readUnicode();\n                const i2 = readUnicode();\n                iset.addRange(i1, i2);\n            }\n        }\n    }\n\n    readEdges(atn, sets) {\n        let i, j, state, trans, target;\n        const nedges = this.readInt();\n        for (i=0; i<nedges; i++) {\n            const src = this.readInt();\n            const trg = this.readInt();\n            const ttype = this.readInt();\n            const arg1 = this.readInt();\n            const arg2 = this.readInt();\n            const arg3 = this.readInt();\n            trans = this.edgeFactory(atn, ttype, src, trg, arg1, arg2, arg3, sets);\n            const srcState = atn.states[src];\n            srcState.addTransition(trans);\n        }\n        // edges for rule stop states can be derived, so they aren't serialized\n        for (i=0; i<atn.states.length; i++) {\n            state = atn.states[i];\n            for (j=0; j<state.transitions.length; j++) {\n                const t = state.transitions[j];\n                if (!(t instanceof RuleTransition)) {\n                    continue;\n                }\n                let outermostPrecedenceReturn = -1;\n                if (atn.ruleToStartState[t.target.ruleIndex].isPrecedenceRule) {\n                    if (t.precedence === 0) {\n                        outermostPrecedenceReturn = t.target.ruleIndex;\n                    }\n                }\n\n                trans = new EpsilonTransition(t.followState, outermostPrecedenceReturn);\n                atn.ruleToStopState[t.target.ruleIndex].addTransition(trans);\n            }\n        }\n\n        for (i=0; i<atn.states.length; i++) {\n            state = atn.states[i];\n            if (state instanceof BlockStartState) {\n                // we need to know the end state to set its start state\n                if (state.endState === null) {\n                    throw (\"IllegalState\");\n                }\n                // block end states can only be associated to a single block start\n                // state\n                if ( state.endState.startState !== null) {\n                    throw (\"IllegalState\");\n                }\n                state.endState.startState = state;\n            }\n            if (state instanceof PlusLoopbackState) {\n                for (j=0; j<state.transitions.length; j++) {\n                    target = state.transitions[j].target;\n                    if (target instanceof PlusBlockStartState) {\n                        target.loopBackState = state;\n                    }\n                }\n            } else if (state instanceof StarLoopbackState) {\n                for (j=0; j<state.transitions.length; j++) {\n                    target = state.transitions[j].target;\n                    if (target instanceof StarLoopEntryState) {\n                        target.loopBackState = state;\n                    }\n                }\n            }\n        }\n    }\n\n    readDecisions(atn) {\n        const ndecisions = this.readInt();\n        for (let i=0; i<ndecisions; i++) {\n            const s = this.readInt();\n            const decState = atn.states[s];\n            atn.decisionToState.push(decState);\n            decState.decision = i;\n        }\n    }\n\n    readLexerActions(atn) {\n        if (atn.grammarType === ATNType.LEXER) {\n            const count = this.readInt();\n            atn.lexerActions = initArray(count, null);\n            for (let i=0; i<count; i++) {\n                const actionType = this.readInt();\n                let data1 = this.readInt();\n                if (data1 === 0xFFFF) {\n                    data1 = -1;\n                }\n                let data2 = this.readInt();\n                if (data2 === 0xFFFF) {\n                    data2 = -1;\n                }\n\n                atn.lexerActions[i] = this.lexerActionFactory(actionType, data1, data2);\n            }\n        }\n    }\n\n    generateRuleBypassTransitions(atn) {\n        let i;\n        const count = atn.ruleToStartState.length;\n        for(i=0; i<count; i++) {\n            atn.ruleToTokenType[i] = atn.maxTokenType + i + 1;\n        }\n        for(i=0; i<count; i++) {\n            this.generateRuleBypassTransition(atn, i);\n        }\n    }\n\n    generateRuleBypassTransition(atn, idx) {\n        let i, state;\n        const bypassStart = new BasicBlockStartState();\n        bypassStart.ruleIndex = idx;\n        atn.addState(bypassStart);\n\n        const bypassStop = new BlockEndState();\n        bypassStop.ruleIndex = idx;\n        atn.addState(bypassStop);\n\n        bypassStart.endState = bypassStop;\n        atn.defineDecisionState(bypassStart);\n\n        bypassStop.startState = bypassStart;\n\n        let excludeTransition = null;\n        let endState = null;\n\n        if (atn.ruleToStartState[idx].isPrecedenceRule) {\n            // wrap from the beginning of the rule to the StarLoopEntryState\n            endState = null;\n            for(i=0; i<atn.states.length; i++) {\n                state = atn.states[i];\n                if (this.stateIsEndStateFor(state, idx)) {\n                    endState = state;\n                    excludeTransition = state.loopBackState.transitions[0];\n                    break;\n                }\n            }\n            if (excludeTransition === null) {\n                throw (\"Couldn't identify final state of the precedence rule prefix section.\");\n            }\n        } else {\n            endState = atn.ruleToStopState[idx];\n        }\n\n        // all non-excluded transitions that currently target end state need to\n        // target blockEnd instead\n        for(i=0; i<atn.states.length; i++) {\n            state = atn.states[i];\n            for(let j=0; j<state.transitions.length; j++) {\n                const transition = state.transitions[j];\n                if (transition === excludeTransition) {\n                    continue;\n                }\n                if (transition.target === endState) {\n                    transition.target = bypassStop;\n                }\n            }\n        }\n\n        // all transitions leaving the rule start state need to leave blockStart\n        // instead\n        const ruleToStartState = atn.ruleToStartState[idx];\n        const count = ruleToStartState.transitions.length;\n        while ( count > 0) {\n            bypassStart.addTransition(ruleToStartState.transitions[count-1]);\n            ruleToStartState.transitions = ruleToStartState.transitions.slice(-1);\n        }\n        // link the new states\n        atn.ruleToStartState[idx].addTransition(new EpsilonTransition(bypassStart));\n        bypassStop.addTransition(new EpsilonTransition(endState));\n\n        const matchState = new BasicState();\n        atn.addState(matchState);\n        matchState.addTransition(new AtomTransition(bypassStop, atn.ruleToTokenType[idx]));\n        bypassStart.addTransition(new EpsilonTransition(matchState));\n    }\n\n    stateIsEndStateFor(state, idx) {\n        if ( state.ruleIndex !== idx) {\n            return null;\n        }\n        if (!( state instanceof StarLoopEntryState)) {\n            return null;\n        }\n        const maybeLoopEndState = state.transitions[state.transitions.length - 1].target;\n        if (!( maybeLoopEndState instanceof LoopEndState)) {\n            return null;\n        }\n        if (maybeLoopEndState.epsilonOnlyTransitions &&\n            (maybeLoopEndState.transitions[0].target instanceof RuleStopState)) {\n            return state;\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * Analyze the {@link StarLoopEntryState} states in the specified ATN to set\n     * the {@link StarLoopEntryState//isPrecedenceDecision} field to the\n     * correct value.\n     * @param atn The ATN.\n     */\n    markPrecedenceDecisions(atn) {\n        for(let i=0; i<atn.states.length; i++) {\n            const state = atn.states[i];\n            if (!( state instanceof StarLoopEntryState)) {\n                continue;\n            }\n            // We analyze the ATN to determine if this ATN decision state is the\n            // decision for the closure block that determines whether a\n            // precedence rule should continue or complete.\n            if ( atn.ruleToStartState[state.ruleIndex].isPrecedenceRule) {\n                const maybeLoopEndState = state.transitions[state.transitions.length - 1].target;\n                if (maybeLoopEndState instanceof LoopEndState) {\n                    if ( maybeLoopEndState.epsilonOnlyTransitions &&\n                            (maybeLoopEndState.transitions[0].target instanceof RuleStopState)) {\n                        state.isPrecedenceDecision = true;\n                    }\n                }\n            }\n        }\n    }\n\n    verifyATN(atn) {\n        if (!this.deserializationOptions.verifyATN) {\n            return;\n        }\n        // verify assumptions\n        for(let i=0; i<atn.states.length; i++) {\n            const state = atn.states[i];\n            if (state === null) {\n                continue;\n            }\n            this.checkCondition(state.epsilonOnlyTransitions || state.transitions.length <= 1);\n            if (state instanceof PlusBlockStartState) {\n                this.checkCondition(state.loopBackState !== null);\n            } else  if (state instanceof StarLoopEntryState) {\n                this.checkCondition(state.loopBackState !== null);\n                this.checkCondition(state.transitions.length === 2);\n                if (state.transitions[0].target instanceof StarBlockStartState) {\n                    this.checkCondition(state.transitions[1].target instanceof LoopEndState);\n                    this.checkCondition(!state.nonGreedy);\n                } else if (state.transitions[0].target instanceof LoopEndState) {\n                    this.checkCondition(state.transitions[1].target instanceof StarBlockStartState);\n                    this.checkCondition(state.nonGreedy);\n                } else {\n                    throw(\"IllegalState\");\n                }\n            } else if (state instanceof StarLoopbackState) {\n                this.checkCondition(state.transitions.length === 1);\n                this.checkCondition(state.transitions[0].target instanceof StarLoopEntryState);\n            } else if (state instanceof LoopEndState) {\n                this.checkCondition(state.loopBackState !== null);\n            } else if (state instanceof RuleStartState) {\n                this.checkCondition(state.stopState !== null);\n            } else if (state instanceof BlockStartState) {\n                this.checkCondition(state.endState !== null);\n            } else if (state instanceof BlockEndState) {\n                this.checkCondition(state.startState !== null);\n            } else if (state instanceof DecisionState) {\n                this.checkCondition(state.transitions.length <= 1 || state.decision >= 0);\n            } else {\n                this.checkCondition(state.transitions.length <= 1 || (state instanceof RuleStopState));\n            }\n        }\n    }\n\n    checkCondition(condition, message) {\n        if (!condition) {\n            if (message === undefined || message===null) {\n                message = \"IllegalState\";\n            }\n            throw (message);\n        }\n    }\n\n    readInt() {\n        return this.data[this.pos++];\n    }\n\n    readInt32() {\n        const low = this.readInt();\n        const high = this.readInt();\n        return low | (high << 16);\n    }\n\n    readLong() {\n        const low = this.readInt32();\n        const high = this.readInt32();\n        return (low & 0x00000000FFFFFFFF) | (high << 32);\n    }\n\n    readUUID() {\n        const bb = [];\n        for(let i=7;i>=0;i--) {\n            const int = this.readInt();\n            /* jshint bitwise: false */\n            bb[(2*i)+1] = int & 0xFF;\n            bb[2*i] = (int >> 8) & 0xFF;\n        }\n        return byteToHex[bb[0]] + byteToHex[bb[1]] +\n        byteToHex[bb[2]] + byteToHex[bb[3]] + '-' +\n        byteToHex[bb[4]] + byteToHex[bb[5]] + '-' +\n        byteToHex[bb[6]] + byteToHex[bb[7]] + '-' +\n        byteToHex[bb[8]] + byteToHex[bb[9]] + '-' +\n        byteToHex[bb[10]] + byteToHex[bb[11]] +\n        byteToHex[bb[12]] + byteToHex[bb[13]] +\n        byteToHex[bb[14]] + byteToHex[bb[15]];\n    }\n\n    edgeFactory(atn, type, src, trg, arg1, arg2, arg3, sets) {\n        const target = atn.states[trg];\n        switch(type) {\n        case Transition.EPSILON:\n            return new EpsilonTransition(target);\n        case Transition.RANGE:\n            return arg3 !== 0 ? new RangeTransition(target, Token.EOF, arg2) : new RangeTransition(target, arg1, arg2);\n        case Transition.RULE:\n            return new RuleTransition(atn.states[arg1], arg2, arg3, target);\n        case Transition.PREDICATE:\n            return new PredicateTransition(target, arg1, arg2, arg3 !== 0);\n        case Transition.PRECEDENCE:\n            return new PrecedencePredicateTransition(target, arg1);\n        case Transition.ATOM:\n            return arg3 !== 0 ? new AtomTransition(target, Token.EOF) : new AtomTransition(target, arg1);\n        case Transition.ACTION:\n            return new ActionTransition(target, arg1, arg2, arg3 !== 0);\n        case Transition.SET:\n            return new SetTransition(target, sets[arg1]);\n        case Transition.NOT_SET:\n            return new NotSetTransition(target, sets[arg1]);\n        case Transition.WILDCARD:\n            return new WildcardTransition(target);\n        default:\n            throw \"The specified transition type: \" + type + \" is not valid.\";\n        }\n    }\n\n    stateFactory(type, ruleIndex) {\n        if (this.stateFactories === null) {\n            const sf = [];\n            sf[ATNState.INVALID_TYPE] = null;\n            sf[ATNState.BASIC] = () => new BasicState();\n            sf[ATNState.RULE_START] = () => new RuleStartState();\n            sf[ATNState.BLOCK_START] = () => new BasicBlockStartState();\n            sf[ATNState.PLUS_BLOCK_START] = () => new PlusBlockStartState();\n            sf[ATNState.STAR_BLOCK_START] = () => new StarBlockStartState();\n            sf[ATNState.TOKEN_START] = () => new TokensStartState();\n            sf[ATNState.RULE_STOP] = () => new RuleStopState();\n            sf[ATNState.BLOCK_END] = () => new BlockEndState();\n            sf[ATNState.STAR_LOOP_BACK] = () => new StarLoopbackState();\n            sf[ATNState.STAR_LOOP_ENTRY] = () => new StarLoopEntryState();\n            sf[ATNState.PLUS_LOOP_BACK] = () => new PlusLoopbackState();\n            sf[ATNState.LOOP_END] = () => new LoopEndState();\n            this.stateFactories = sf;\n        }\n        if (type>this.stateFactories.length || this.stateFactories[type] === null) {\n            throw(\"The specified state type \" + type + \" is not valid.\");\n        } else {\n            const s = this.stateFactories[type]();\n            if (s!==null) {\n                s.ruleIndex = ruleIndex;\n                return s;\n            }\n        }\n    }\n\n    lexerActionFactory(type, data1, data2) {\n        if (this.actionFactories === null) {\n            const af = [];\n            af[LexerActionType.CHANNEL] = (data1, data2) => new LexerChannelAction(data1);\n            af[LexerActionType.CUSTOM] = (data1, data2) => new LexerCustomAction(data1, data2);\n            af[LexerActionType.MODE] = (data1, data2) => new LexerModeAction(data1);\n            af[LexerActionType.MORE] = (data1, data2) => LexerMoreAction.INSTANCE;\n            af[LexerActionType.POP_MODE] = (data1, data2) => LexerPopModeAction.INSTANCE;\n            af[LexerActionType.PUSH_MODE] = (data1, data2) => new LexerPushModeAction(data1);\n            af[LexerActionType.SKIP] = (data1, data2) => LexerSkipAction.INSTANCE;\n            af[LexerActionType.TYPE] = (data1, data2) => new LexerTypeAction(data1);\n            this.actionFactories = af;\n        }\n        if (type>this.actionFactories.length || this.actionFactories[type] === null) {\n            throw(\"The specified lexer action type \" + type + \" is not valid.\");\n        } else {\n            return this.actionFactories[type](data1, data2);\n        }\n    }\n}\n\nfunction createByteToHex() {\n\tconst bth = [];\n\tfor (let i = 0; i < 256; i++) {\n\t\tbth[i] = (i + 0x100).toString(16).substr(1).toUpperCase();\n\t}\n\treturn bth;\n}\n\nconst byteToHex = createByteToHex();\n\n\nmodule.exports = ATNDeserializer;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/atn/ATNDeserializer.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/atn/ATNSimulator.js":
/*!*********************************************************************************************!*\
  !*** ../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/atn/ATNSimulator.js ***!
  \*********************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nconst {DFAState} = __webpack_require__(/*! ./../dfa/DFAState */ \"(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/dfa/DFAState.js\");\nconst {ATNConfigSet} = __webpack_require__(/*! ./ATNConfigSet */ \"(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/atn/ATNConfigSet.js\");\nconst {getCachedPredictionContext} = __webpack_require__(/*! ./../PredictionContext */ \"(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/PredictionContext.js\");\nconst {Map} = __webpack_require__(/*! ./../Utils */ \"(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/Utils.js\");\n\nclass ATNSimulator {\n    constructor(atn, sharedContextCache) {\n        /**\n         * The context cache maps all PredictionContext objects that are ==\n         * to a single cached copy. This cache is shared across all contexts\n         * in all ATNConfigs in all DFA states.  We rebuild each ATNConfigSet\n         * to use only cached nodes/graphs in addDFAState(). We don't want to\n         * fill this during closure() since there are lots of contexts that\n         * pop up but are not used ever again. It also greatly slows down closure().\n         *\n         * <p>This cache makes a huge difference in memory and a little bit in speed.\n         * For the Java grammar on java.*, it dropped the memory requirements\n         * at the end from 25M to 16M. We don't store any of the full context\n         * graphs in the DFA because they are limited to local context only,\n         * but apparently there's a lot of repetition there as well. We optimize\n         * the config contexts before storing the config set in the DFA states\n         * by literally rebuilding them with cached subgraphs only.</p>\n         *\n         * <p>I tried a cache for use during closure operations, that was\n         * whacked after each adaptivePredict(). It cost a little bit\n         * more time I think and doesn't save on the overall footprint\n         * so it's not worth the complexity.</p>\n         */\n        this.atn = atn;\n        this.sharedContextCache = sharedContextCache;\n        return this;\n    }\n\n    getCachedContext(context) {\n        if (this.sharedContextCache ===null) {\n            return context;\n        }\n        const visited = new Map();\n        return getCachedPredictionContext(context, this.sharedContextCache, visited);\n    }\n}\n\n// Must distinguish between missing edge and edge we know leads nowhere///\nATNSimulator.ERROR = new DFAState(0x7FFFFFFF, new ATNConfigSet());\n\n\nmodule.exports = ATNSimulator;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2FudGxyNEA0LjkuMy9ub2RlX21vZHVsZXMvYW50bHI0L3NyYy9hbnRscjQvYXRuL0FUTlNpbXVsYXRvci5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPLFVBQVUsRUFBRSxtQkFBTyxDQUFDLGtIQUFtQjtBQUM5QyxPQUFPLGNBQWMsRUFBRSxtQkFBTyxDQUFDLG1IQUFnQjtBQUMvQyxPQUFPLDRCQUE0QixFQUFFLG1CQUFPLENBQUMsNEhBQXdCO0FBQ3JFLE9BQU8sS0FBSyxFQUFFLG1CQUFPLENBQUMsb0dBQVk7O0FBRWxDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7OztBQUdBIiwic291cmNlcyI6WyIvVXNlcnMvZXRoYW5raW0vTmVzdG9yL21lZGZldGNoLmpzL25vZGVfbW9kdWxlcy8ucG5wbS9hbnRscjRANC45LjMvbm9kZV9tb2R1bGVzL2FudGxyNC9zcmMvYW50bHI0L2F0bi9BVE5TaW11bGF0b3IuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyogQ29weXJpZ2h0IChjKSAyMDEyLTIwMTcgVGhlIEFOVExSIFByb2plY3QuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBVc2Ugb2YgdGhpcyBmaWxlIGlzIGdvdmVybmVkIGJ5IHRoZSBCU0QgMy1jbGF1c2UgbGljZW5zZSB0aGF0XG4gKiBjYW4gYmUgZm91bmQgaW4gdGhlIExJQ0VOU0UudHh0IGZpbGUgaW4gdGhlIHByb2plY3Qgcm9vdC5cbiAqL1xuXG5jb25zdCB7REZBU3RhdGV9ID0gcmVxdWlyZSgnLi8uLi9kZmEvREZBU3RhdGUnKTtcbmNvbnN0IHtBVE5Db25maWdTZXR9ID0gcmVxdWlyZSgnLi9BVE5Db25maWdTZXQnKTtcbmNvbnN0IHtnZXRDYWNoZWRQcmVkaWN0aW9uQ29udGV4dH0gPSByZXF1aXJlKCcuLy4uL1ByZWRpY3Rpb25Db250ZXh0Jyk7XG5jb25zdCB7TWFwfSA9IHJlcXVpcmUoJy4vLi4vVXRpbHMnKTtcblxuY2xhc3MgQVROU2ltdWxhdG9yIHtcbiAgICBjb25zdHJ1Y3RvcihhdG4sIHNoYXJlZENvbnRleHRDYWNoZSkge1xuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIGNvbnRleHQgY2FjaGUgbWFwcyBhbGwgUHJlZGljdGlvbkNvbnRleHQgb2JqZWN0cyB0aGF0IGFyZSA9PVxuICAgICAgICAgKiB0byBhIHNpbmdsZSBjYWNoZWQgY29weS4gVGhpcyBjYWNoZSBpcyBzaGFyZWQgYWNyb3NzIGFsbCBjb250ZXh0c1xuICAgICAgICAgKiBpbiBhbGwgQVROQ29uZmlncyBpbiBhbGwgREZBIHN0YXRlcy4gIFdlIHJlYnVpbGQgZWFjaCBBVE5Db25maWdTZXRcbiAgICAgICAgICogdG8gdXNlIG9ubHkgY2FjaGVkIG5vZGVzL2dyYXBocyBpbiBhZGRERkFTdGF0ZSgpLiBXZSBkb24ndCB3YW50IHRvXG4gICAgICAgICAqIGZpbGwgdGhpcyBkdXJpbmcgY2xvc3VyZSgpIHNpbmNlIHRoZXJlIGFyZSBsb3RzIG9mIGNvbnRleHRzIHRoYXRcbiAgICAgICAgICogcG9wIHVwIGJ1dCBhcmUgbm90IHVzZWQgZXZlciBhZ2Fpbi4gSXQgYWxzbyBncmVhdGx5IHNsb3dzIGRvd24gY2xvc3VyZSgpLlxuICAgICAgICAgKlxuICAgICAgICAgKiA8cD5UaGlzIGNhY2hlIG1ha2VzIGEgaHVnZSBkaWZmZXJlbmNlIGluIG1lbW9yeSBhbmQgYSBsaXR0bGUgYml0IGluIHNwZWVkLlxuICAgICAgICAgKiBGb3IgdGhlIEphdmEgZ3JhbW1hciBvbiBqYXZhLiosIGl0IGRyb3BwZWQgdGhlIG1lbW9yeSByZXF1aXJlbWVudHNcbiAgICAgICAgICogYXQgdGhlIGVuZCBmcm9tIDI1TSB0byAxNk0uIFdlIGRvbid0IHN0b3JlIGFueSBvZiB0aGUgZnVsbCBjb250ZXh0XG4gICAgICAgICAqIGdyYXBocyBpbiB0aGUgREZBIGJlY2F1c2UgdGhleSBhcmUgbGltaXRlZCB0byBsb2NhbCBjb250ZXh0IG9ubHksXG4gICAgICAgICAqIGJ1dCBhcHBhcmVudGx5IHRoZXJlJ3MgYSBsb3Qgb2YgcmVwZXRpdGlvbiB0aGVyZSBhcyB3ZWxsLiBXZSBvcHRpbWl6ZVxuICAgICAgICAgKiB0aGUgY29uZmlnIGNvbnRleHRzIGJlZm9yZSBzdG9yaW5nIHRoZSBjb25maWcgc2V0IGluIHRoZSBERkEgc3RhdGVzXG4gICAgICAgICAqIGJ5IGxpdGVyYWxseSByZWJ1aWxkaW5nIHRoZW0gd2l0aCBjYWNoZWQgc3ViZ3JhcGhzIG9ubHkuPC9wPlxuICAgICAgICAgKlxuICAgICAgICAgKiA8cD5JIHRyaWVkIGEgY2FjaGUgZm9yIHVzZSBkdXJpbmcgY2xvc3VyZSBvcGVyYXRpb25zLCB0aGF0IHdhc1xuICAgICAgICAgKiB3aGFja2VkIGFmdGVyIGVhY2ggYWRhcHRpdmVQcmVkaWN0KCkuIEl0IGNvc3QgYSBsaXR0bGUgYml0XG4gICAgICAgICAqIG1vcmUgdGltZSBJIHRoaW5rIGFuZCBkb2Vzbid0IHNhdmUgb24gdGhlIG92ZXJhbGwgZm9vdHByaW50XG4gICAgICAgICAqIHNvIGl0J3Mgbm90IHdvcnRoIHRoZSBjb21wbGV4aXR5LjwvcD5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuYXRuID0gYXRuO1xuICAgICAgICB0aGlzLnNoYXJlZENvbnRleHRDYWNoZSA9IHNoYXJlZENvbnRleHRDYWNoZTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZ2V0Q2FjaGVkQ29udGV4dChjb250ZXh0KSB7XG4gICAgICAgIGlmICh0aGlzLnNoYXJlZENvbnRleHRDYWNoZSA9PT1udWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gY29udGV4dDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB2aXNpdGVkID0gbmV3IE1hcCgpO1xuICAgICAgICByZXR1cm4gZ2V0Q2FjaGVkUHJlZGljdGlvbkNvbnRleHQoY29udGV4dCwgdGhpcy5zaGFyZWRDb250ZXh0Q2FjaGUsIHZpc2l0ZWQpO1xuICAgIH1cbn1cblxuLy8gTXVzdCBkaXN0aW5ndWlzaCBiZXR3ZWVuIG1pc3NpbmcgZWRnZSBhbmQgZWRnZSB3ZSBrbm93IGxlYWRzIG5vd2hlcmUvLy9cbkFUTlNpbXVsYXRvci5FUlJPUiA9IG5ldyBERkFTdGF0ZSgweDdGRkZGRkZGLCBuZXcgQVROQ29uZmlnU2V0KCkpO1xuXG5cbm1vZHVsZS5leHBvcnRzID0gQVROU2ltdWxhdG9yO1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/atn/ATNSimulator.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/atn/ATNState.js":
/*!*****************************************************************************************!*\
  !*** ../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/atn/ATNState.js ***!
  \*****************************************************************************************/
/***/ ((module) => {

eval("/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nconst INITIAL_NUM_TRANSITIONS = 4;\n\n/**\n * The following images show the relation of states and\n * {@link ATNState//transitions} for various grammar constructs.\n *\n * <ul>\n *\n * <li>Solid edges marked with an &//0949; indicate a required\n * {@link EpsilonTransition}.</li>\n *\n * <li>Dashed edges indicate locations where any transition derived from\n * {@link Transition} might appear.</li>\n *\n * <li>Dashed nodes are place holders for either a sequence of linked\n * {@link BasicState} states or the inclusion of a block representing a nested\n * construct in one of the forms below.</li>\n *\n * <li>Nodes showing multiple outgoing alternatives with a {@code ...} support\n * any number of alternatives (one or more). Nodes without the {@code ...} only\n * support the exact number of alternatives shown in the diagram.</li>\n *\n * </ul>\n *\n * <h2>Basic Blocks</h2>\n *\n * <h3>Rule</h3>\n *\n * <embed src=\"images/Rule.svg\" type=\"image/svg+xml\"/>\n *\n * <h3>Block of 1 or more alternatives</h3>\n *\n * <embed src=\"images/Block.svg\" type=\"image/svg+xml\"/>\n *\n * <h2>Greedy Loops</h2>\n *\n * <h3>Greedy Closure: {@code (...)*}</h3>\n *\n * <embed src=\"images/ClosureGreedy.svg\" type=\"image/svg+xml\"/>\n *\n * <h3>Greedy Positive Closure: {@code (...)+}</h3>\n *\n * <embed src=\"images/PositiveClosureGreedy.svg\" type=\"image/svg+xml\"/>\n *\n * <h3>Greedy Optional: {@code (...)?}</h3>\n *\n * <embed src=\"images/OptionalGreedy.svg\" type=\"image/svg+xml\"/>\n *\n * <h2>Non-Greedy Loops</h2>\n *\n * <h3>Non-Greedy Closure: {@code (...)*?}</h3>\n *\n * <embed src=\"images/ClosureNonGreedy.svg\" type=\"image/svg+xml\"/>\n *\n * <h3>Non-Greedy Positive Closure: {@code (...)+?}</h3>\n *\n * <embed src=\"images/PositiveClosureNonGreedy.svg\" type=\"image/svg+xml\"/>\n *\n * <h3>Non-Greedy Optional: {@code (...)??}</h3>\n *\n * <embed src=\"images/OptionalNonGreedy.svg\" type=\"image/svg+xml\"/>\n */\nclass ATNState {\n    constructor() {\n        // Which ATN are we in?\n        this.atn = null;\n        this.stateNumber = ATNState.INVALID_STATE_NUMBER;\n        this.stateType = null;\n        this.ruleIndex = 0; // at runtime, we don't have Rule objects\n        this.epsilonOnlyTransitions = false;\n        // Track the transitions emanating from this ATN state.\n        this.transitions = [];\n        // Used to cache lookahead during parsing, not used during construction\n        this.nextTokenWithinRule = null;\n    }\n\n    toString() {\n        return this.stateNumber;\n    }\n\n    equals(other) {\n        if (other instanceof ATNState) {\n            return this.stateNumber===other.stateNumber;\n        } else {\n            return false;\n        }\n    }\n\n    isNonGreedyExitState() {\n        return false;\n    }\n\n    addTransition(trans, index) {\n        if(index===undefined) {\n            index = -1;\n        }\n        if (this.transitions.length===0) {\n            this.epsilonOnlyTransitions = trans.isEpsilon;\n        } else if(this.epsilonOnlyTransitions !== trans.isEpsilon) {\n            this.epsilonOnlyTransitions = false;\n        }\n        if (index===-1) {\n            this.transitions.push(trans);\n        } else {\n            this.transitions.splice(index, 1, trans);\n        }\n    }\n}\n\n// constants for serialization\nATNState.INVALID_TYPE = 0;\nATNState.BASIC = 1;\nATNState.RULE_START = 2;\nATNState.BLOCK_START = 3;\nATNState.PLUS_BLOCK_START = 4;\nATNState.STAR_BLOCK_START = 5;\nATNState.TOKEN_START = 6;\nATNState.RULE_STOP = 7;\nATNState.BLOCK_END = 8;\nATNState.STAR_LOOP_BACK = 9;\nATNState.STAR_LOOP_ENTRY = 10;\nATNState.PLUS_LOOP_BACK = 11;\nATNState.LOOP_END = 12;\n\nATNState.serializationNames = [\n            \"INVALID\",\n            \"BASIC\",\n            \"RULE_START\",\n            \"BLOCK_START\",\n            \"PLUS_BLOCK_START\",\n            \"STAR_BLOCK_START\",\n            \"TOKEN_START\",\n            \"RULE_STOP\",\n            \"BLOCK_END\",\n            \"STAR_LOOP_BACK\",\n            \"STAR_LOOP_ENTRY\",\n            \"PLUS_LOOP_BACK\",\n            \"LOOP_END\" ];\n\nATNState.INVALID_STATE_NUMBER = -1;\n\n\nclass BasicState extends ATNState {\n    constructor() {\n        super();\n        this.stateType = ATNState.BASIC;\n    }\n}\n\nclass DecisionState extends ATNState {\n    constructor() {\n        super();\n        this.decision = -1;\n        this.nonGreedy = false;\n        return this;\n    }\n}\n\n/**\n *  The start of a regular {@code (...)} block\n */\nclass BlockStartState extends DecisionState {\n    constructor() {\n        super();\n        this.endState = null;\n        return this;\n    }\n}\n\nclass BasicBlockStartState extends BlockStartState {\n    constructor() {\n        super();\n        this.stateType = ATNState.BLOCK_START;\n        return this;\n    }\n}\n\n/**\n * Terminal node of a simple {@code (a|b|c)} block\n */\nclass BlockEndState extends ATNState {\n    constructor() {\n        super();\n        this.stateType = ATNState.BLOCK_END;\n        this.startState = null;\n        return this;\n    }\n}\n\n/**\n * The last node in the ATN for a rule, unless that rule is the start symbol.\n * In that case, there is one transition to EOF. Later, we might encode\n * references to all calls to this rule to compute FOLLOW sets for\n * error handling\n */\nclass RuleStopState extends ATNState {\n    constructor() {\n        super();\n        this.stateType = ATNState.RULE_STOP;\n        return this;\n    }\n}\n\nclass RuleStartState extends ATNState {\n    constructor() {\n        super();\n        this.stateType = ATNState.RULE_START;\n        this.stopState = null;\n        this.isPrecedenceRule = false;\n        return this;\n    }\n}\n\n/**\n * Decision state for {@code A+} and {@code (A|B)+}.  It has two transitions:\n * one to the loop back to start of the block and one to exit.\n */\nclass PlusLoopbackState extends DecisionState {\n    constructor() {\n        super();\n        this.stateType = ATNState.PLUS_LOOP_BACK;\n        return this;\n    }\n}\n\n/**\n * Start of {@code (A|B|...)+} loop. Technically a decision state, but\n * we don't use for code generation; somebody might need it, so I'm defining\n * it for completeness. In reality, the {@link PlusLoopbackState} node is the\n * real decision-making note for {@code A+}\n */\nclass PlusBlockStartState extends BlockStartState {\n    constructor() {\n        super();\n        this.stateType = ATNState.PLUS_BLOCK_START;\n        this.loopBackState = null;\n        return this;\n    }\n}\n\n/**\n * The block that begins a closure loop\n */\nclass StarBlockStartState extends BlockStartState {\n    constructor() {\n        super();\n        this.stateType = ATNState.STAR_BLOCK_START;\n        return this;\n    }\n}\n\nclass StarLoopbackState extends ATNState {\n    constructor() {\n        super();\n        this.stateType = ATNState.STAR_LOOP_BACK;\n        return this;\n    }\n}\n\nclass StarLoopEntryState extends DecisionState {\n    constructor() {\n        super();\n        this.stateType = ATNState.STAR_LOOP_ENTRY;\n        this.loopBackState = null;\n        // Indicates whether this state can benefit from a precedence DFA during SLL decision making.\n        this.isPrecedenceDecision = null;\n        return this;\n    }\n}\n\n/**\n * Mark the end of a * or + loop\n */\nclass LoopEndState extends ATNState {\n    constructor() {\n        super();\n        this.stateType = ATNState.LOOP_END;\n        this.loopBackState = null;\n        return this;\n    }\n}\n\n/**\n * The Tokens rule start state linking to each lexer rule start state\n */\nclass TokensStartState extends DecisionState {\n    constructor() {\n        super();\n        this.stateType = ATNState.TOKEN_START;\n        return this;\n    }\n}\n\nmodule.exports = {\n    ATNState,\n    BasicState,\n    DecisionState,\n    BlockStartState,\n    BlockEndState,\n    LoopEndState,\n    RuleStartState,\n    RuleStopState,\n    TokensStartState,\n    PlusLoopbackState,\n    StarLoopbackState,\n    StarLoopEntryState,\n    PlusBlockStartState,\n    StarBlockStartState,\n    BasicBlockStartState\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/atn/ATNState.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/atn/ATNType.js":
/*!****************************************************************************************!*\
  !*** ../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/atn/ATNType.js ***!
  \****************************************************************************************/
/***/ ((module) => {

eval("/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\n/**\n * Represents the type of recognizer an ATN applies to\n */\nmodule.exports = {\n    LEXER: 0,\n    PARSER: 1\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2FudGxyNEA0LjkuMy9ub2RlX21vZHVsZXMvYW50bHI0L3NyYy9hbnRscjQvYXRuL0FUTlR5cGUuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9Vc2Vycy9ldGhhbmtpbS9OZXN0b3IvbWVkZmV0Y2guanMvbm9kZV9tb2R1bGVzLy5wbnBtL2FudGxyNEA0LjkuMy9ub2RlX21vZHVsZXMvYW50bHI0L3NyYy9hbnRscjQvYXRuL0FUTlR5cGUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyogQ29weXJpZ2h0IChjKSAyMDEyLTIwMTcgVGhlIEFOVExSIFByb2plY3QuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBVc2Ugb2YgdGhpcyBmaWxlIGlzIGdvdmVybmVkIGJ5IHRoZSBCU0QgMy1jbGF1c2UgbGljZW5zZSB0aGF0XG4gKiBjYW4gYmUgZm91bmQgaW4gdGhlIExJQ0VOU0UudHh0IGZpbGUgaW4gdGhlIHByb2plY3Qgcm9vdC5cbiAqL1xuXG4vKipcbiAqIFJlcHJlc2VudHMgdGhlIHR5cGUgb2YgcmVjb2duaXplciBhbiBBVE4gYXBwbGllcyB0b1xuICovXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgICBMRVhFUjogMCxcbiAgICBQQVJTRVI6IDFcbn07XG5cbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/atn/ATNType.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/atn/LexerATNSimulator.js":
/*!**************************************************************************************************!*\
  !*** ../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/atn/LexerATNSimulator.js ***!
  \**************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nconst {Token} = __webpack_require__(/*! ./../Token */ \"(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/Token.js\");\nconst Lexer = __webpack_require__(/*! ./../Lexer */ \"(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/Lexer.js\");\nconst ATN = __webpack_require__(/*! ./ATN */ \"(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/atn/ATN.js\");\nconst ATNSimulator = __webpack_require__(/*! ./ATNSimulator */ \"(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/atn/ATNSimulator.js\");\nconst {DFAState} = __webpack_require__(/*! ./../dfa/DFAState */ \"(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/dfa/DFAState.js\");\nconst {OrderedATNConfigSet} = __webpack_require__(/*! ./ATNConfigSet */ \"(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/atn/ATNConfigSet.js\");\nconst {PredictionContext} = __webpack_require__(/*! ./../PredictionContext */ \"(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/PredictionContext.js\");\nconst {SingletonPredictionContext} = __webpack_require__(/*! ./../PredictionContext */ \"(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/PredictionContext.js\");\nconst {RuleStopState} = __webpack_require__(/*! ./ATNState */ \"(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/atn/ATNState.js\");\nconst {LexerATNConfig} = __webpack_require__(/*! ./ATNConfig */ \"(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/atn/ATNConfig.js\");\nconst {Transition} = __webpack_require__(/*! ./Transition */ \"(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/atn/Transition.js\");\nconst LexerActionExecutor = __webpack_require__(/*! ./LexerActionExecutor */ \"(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/atn/LexerActionExecutor.js\");\nconst {LexerNoViableAltException} = __webpack_require__(/*! ./../error/Errors */ \"(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/error/Errors.js\");\n\nfunction resetSimState(sim) {\n\tsim.index = -1;\n\tsim.line = 0;\n\tsim.column = -1;\n\tsim.dfaState = null;\n}\n\nclass SimState {\n\tconstructor() {\n\t\tresetSimState(this);\n\t}\n\n\treset() {\n\t\tresetSimState(this);\n\t}\n}\n\nclass LexerATNSimulator extends ATNSimulator {\n\t/**\n\t * When we hit an accept state in either the DFA or the ATN, we\n\t * have to notify the character stream to start buffering characters\n\t * via {@link IntStream//mark} and record the current state. The current sim state\n\t * includes the current index into the input, the current line,\n\t * and current character position in that line. Note that the Lexer is\n\t * tracking the starting line and characterization of the token. These\n\t * variables track the \"state\" of the simulator when it hits an accept state.\n\t *\n\t * <p>We track these variables separately for the DFA and ATN simulation\n\t * because the DFA simulation often has to fail over to the ATN\n\t * simulation. If the ATN simulation fails, we need the DFA to fall\n\t * back to its previously accepted state, if any. If the ATN succeeds,\n\t * then the ATN does the accept and the DFA simulator that invoked it\n\t * can simply return the predicted token type.</p>\n\t */\n\tconstructor(recog, atn, decisionToDFA, sharedContextCache) {\n\t\tsuper(atn, sharedContextCache);\n\t\tthis.decisionToDFA = decisionToDFA;\n\t\tthis.recog = recog;\n\t\t/**\n\t\t * The current token's starting index into the character stream.\n\t\t * Shared across DFA to ATN simulation in case the ATN fails and the\n\t\t * DFA did not have a previous accept state. In this case, we use the\n\t\t * ATN-generated exception object\n\t\t */\n\t\tthis.startIndex = -1;\n\t\t// line number 1..n within the input///\n\t\tthis.line = 1;\n\t\t/**\n\t\t * The index of the character relative to the beginning of the line\n\t\t * 0..n-1\n\t\t */\n\t\tthis.column = 0;\n\t\tthis.mode = Lexer.DEFAULT_MODE;\n\t\t/**\n\t\t * Used during DFA/ATN exec to record the most recent accept configuration\n\t\t * info\n\t\t */\n\t\tthis.prevAccept = new SimState();\n\t}\n\n\tcopyState(simulator) {\n\t\tthis.column = simulator.column;\n\t\tthis.line = simulator.line;\n\t\tthis.mode = simulator.mode;\n\t\tthis.startIndex = simulator.startIndex;\n\t}\n\n\tmatch(input, mode) {\n\t\tthis.match_calls += 1;\n\t\tthis.mode = mode;\n\t\tconst mark = input.mark();\n\t\ttry {\n\t\t\tthis.startIndex = input.index;\n\t\t\tthis.prevAccept.reset();\n\t\t\tconst dfa = this.decisionToDFA[mode];\n\t\t\tif (dfa.s0 === null) {\n\t\t\t\treturn this.matchATN(input);\n\t\t\t} else {\n\t\t\t\treturn this.execATN(input, dfa.s0);\n\t\t\t}\n\t\t} finally {\n\t\t\tinput.release(mark);\n\t\t}\n\t}\n\n\treset() {\n\t\tthis.prevAccept.reset();\n\t\tthis.startIndex = -1;\n\t\tthis.line = 1;\n\t\tthis.column = 0;\n\t\tthis.mode = Lexer.DEFAULT_MODE;\n\t}\n\n\tmatchATN(input) {\n\t\tconst startState = this.atn.modeToStartState[this.mode];\n\n\t\tif (LexerATNSimulator.debug) {\n\t\t\tconsole.log(\"matchATN mode \" + this.mode + \" start: \" + startState);\n\t\t}\n\t\tconst old_mode = this.mode;\n\t\tconst s0_closure = this.computeStartState(input, startState);\n\t\tconst suppressEdge = s0_closure.hasSemanticContext;\n\t\ts0_closure.hasSemanticContext = false;\n\n\t\tconst next = this.addDFAState(s0_closure);\n\t\tif (!suppressEdge) {\n\t\t\tthis.decisionToDFA[this.mode].s0 = next;\n\t\t}\n\n\t\tconst predict = this.execATN(input, next);\n\n\t\tif (LexerATNSimulator.debug) {\n\t\t\tconsole.log(\"DFA after matchATN: \" + this.decisionToDFA[old_mode].toLexerString());\n\t\t}\n\t\treturn predict;\n\t}\n\n\texecATN(input, ds0) {\n\t\tif (LexerATNSimulator.debug) {\n\t\t\tconsole.log(\"start state closure=\" + ds0.configs);\n\t\t}\n\t\tif (ds0.isAcceptState) {\n\t\t\t// allow zero-length tokens\n\t\t\tthis.captureSimState(this.prevAccept, input, ds0);\n\t\t}\n\t\tlet t = input.LA(1);\n\t\tlet s = ds0; // s is current/from DFA state\n\n\t\twhile (true) { // while more work\n\t\t\tif (LexerATNSimulator.debug) {\n\t\t\t\tconsole.log(\"execATN loop starting closure: \" + s.configs);\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * As we move src->trg, src->trg, we keep track of the previous trg to\n\t\t\t * avoid looking up the DFA state again, which is expensive.\n\t\t\t * If the previous target was already part of the DFA, we might\n\t\t\t * be able to avoid doing a reach operation upon t. If s!=null,\n\t\t\t * it means that semantic predicates didn't prevent us from\n\t\t\t * creating a DFA state. Once we know s!=null, we check to see if\n\t\t\t * the DFA state has an edge already for t. If so, we can just reuse\n\t\t\t * it's configuration set; there's no point in re-computing it.\n\t\t\t * This is kind of like doing DFA simulation within the ATN\n\t\t\t * simulation because DFA simulation is really just a way to avoid\n\t\t\t * computing reach/closure sets. Technically, once we know that\n\t\t\t * we have a previously added DFA state, we could jump over to\n\t\t\t * the DFA simulator. But, that would mean popping back and forth\n\t\t\t * a lot and making things more complicated algorithmically.\n\t\t\t * This optimization makes a lot of sense for loops within DFA.\n\t\t\t * A character will take us back to an existing DFA state\n\t\t\t * that already has lots of edges out of it. e.g., .* in comments.\n\t\t\t * print(\"Target for:\" + str(s) + \" and:\" + str(t))\n\t\t\t */\n\t\t\tlet target = this.getExistingTargetState(s, t);\n\t\t\t// print(\"Existing:\" + str(target))\n\t\t\tif (target === null) {\n\t\t\t\ttarget = this.computeTargetState(input, s, t);\n\t\t\t\t// print(\"Computed:\" + str(target))\n\t\t\t}\n\t\t\tif (target === ATNSimulator.ERROR) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t// If this is a consumable input element, make sure to consume before\n\t\t\t// capturing the accept state so the input index, line, and char\n\t\t\t// position accurately reflect the state of the interpreter at the\n\t\t\t// end of the token.\n\t\t\tif (t !== Token.EOF) {\n\t\t\t\tthis.consume(input);\n\t\t\t}\n\t\t\tif (target.isAcceptState) {\n\t\t\t\tthis.captureSimState(this.prevAccept, input, target);\n\t\t\t\tif (t === Token.EOF) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tt = input.LA(1);\n\t\t\ts = target; // flip; current DFA target becomes new src/from state\n\t\t}\n\t\treturn this.failOrAccept(this.prevAccept, input, s.configs, t);\n\t}\n\n\t/**\n\t * Get an existing target state for an edge in the DFA. If the target state\n\t * for the edge has not yet been computed or is otherwise not available,\n\t * this method returns {@code null}.\n\t *\n\t * @param s The current DFA state\n\t * @param t The next input symbol\n\t * @return The existing target DFA state for the given input symbol\n\t * {@code t}, or {@code null} if the target state for this edge is not\n\t * already cached\n\t */\n\tgetExistingTargetState(s, t) {\n\t\tif (s.edges === null || t < LexerATNSimulator.MIN_DFA_EDGE || t > LexerATNSimulator.MAX_DFA_EDGE) {\n\t\t\treturn null;\n\t\t}\n\n\t\tlet target = s.edges[t - LexerATNSimulator.MIN_DFA_EDGE];\n\t\tif(target===undefined) {\n\t\t\ttarget = null;\n\t\t}\n\t\tif (LexerATNSimulator.debug && target !== null) {\n\t\t\tconsole.log(\"reuse state \" + s.stateNumber + \" edge to \" + target.stateNumber);\n\t\t}\n\t\treturn target;\n\t}\n\n\t/**\n\t * Compute a target state for an edge in the DFA, and attempt to add the\n\t * computed state and corresponding edge to the DFA.\n\t *\n\t * @param input The input stream\n\t * @param s The current DFA state\n\t * @param t The next input symbol\n\t *\n\t * @return The computed target DFA state for the given input symbol\n\t * {@code t}. If {@code t} does not lead to a valid DFA state, this method\n\t * returns {@link //ERROR}.\n\t */\n\tcomputeTargetState(input, s, t) {\n\t\tconst reach = new OrderedATNConfigSet();\n\t\t// if we don't find an existing DFA state\n\t\t// Fill reach starting from closure, following t transitions\n\t\tthis.getReachableConfigSet(input, s.configs, reach, t);\n\n\t\tif (reach.items.length === 0) { // we got nowhere on t from s\n\t\t\tif (!reach.hasSemanticContext) {\n\t\t\t\t// we got nowhere on t, don't throw out this knowledge; it'd\n\t\t\t\t// cause a failover from DFA later.\n\t\t\t\tthis.addDFAEdge(s, t, ATNSimulator.ERROR);\n\t\t\t}\n\t\t\t// stop when we can't match any more char\n\t\t\treturn ATNSimulator.ERROR;\n\t\t}\n\t\t// Add an edge from s to target DFA found/created for reach\n\t\treturn this.addDFAEdge(s, t, null, reach);\n\t}\n\n\tfailOrAccept(prevAccept, input, reach, t) {\n\t\tif (this.prevAccept.dfaState !== null) {\n\t\t\tconst lexerActionExecutor = prevAccept.dfaState.lexerActionExecutor;\n\t\t\tthis.accept(input, lexerActionExecutor, this.startIndex,\n\t\t\t\t\tprevAccept.index, prevAccept.line, prevAccept.column);\n\t\t\treturn prevAccept.dfaState.prediction;\n\t\t} else {\n\t\t\t// if no accept and EOF is first char, return EOF\n\t\t\tif (t === Token.EOF && input.index === this.startIndex) {\n\t\t\t\treturn Token.EOF;\n\t\t\t}\n\t\t\tthrow new LexerNoViableAltException(this.recog, input, this.startIndex, reach);\n\t\t}\n\t}\n\n\t/**\n\t * Given a starting configuration set, figure out all ATN configurations\n\t * we can reach upon input {@code t}. Parameter {@code reach} is a return\n\t * parameter.\n\t */\n\tgetReachableConfigSet(input, closure,\n\t\t\treach, t) {\n\t\t// this is used to skip processing for configs which have a lower priority\n\t\t// than a config that already reached an accept state for the same rule\n\t\tlet skipAlt = ATN.INVALID_ALT_NUMBER;\n\t\tfor (let i = 0; i < closure.items.length; i++) {\n\t\t\tconst cfg = closure.items[i];\n\t\t\tconst currentAltReachedAcceptState = (cfg.alt === skipAlt);\n\t\t\tif (currentAltReachedAcceptState && cfg.passedThroughNonGreedyDecision) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (LexerATNSimulator.debug) {\n\t\t\t\tconsole.log(\"testing %s at %s\\n\", this.getTokenName(t), cfg\n\t\t\t\t\t\t.toString(this.recog, true));\n\t\t\t}\n\t\t\tfor (let j = 0; j < cfg.state.transitions.length; j++) {\n\t\t\t\tconst trans = cfg.state.transitions[j]; // for each transition\n\t\t\t\tconst target = this.getReachableTarget(trans, t);\n\t\t\t\tif (target !== null) {\n\t\t\t\t\tlet lexerActionExecutor = cfg.lexerActionExecutor;\n\t\t\t\t\tif (lexerActionExecutor !== null) {\n\t\t\t\t\t\tlexerActionExecutor = lexerActionExecutor.fixOffsetBeforeMatch(input.index - this.startIndex);\n\t\t\t\t\t}\n\t\t\t\t\tconst treatEofAsEpsilon = (t === Token.EOF);\n\t\t\t\t\tconst config = new LexerATNConfig({state:target, lexerActionExecutor:lexerActionExecutor}, cfg);\n\t\t\t\t\tif (this.closure(input, config, reach,\n\t\t\t\t\t\t\tcurrentAltReachedAcceptState, true, treatEofAsEpsilon)) {\n\t\t\t\t\t\t// any remaining configs for this alt have a lower priority\n\t\t\t\t\t\t// than the one that just reached an accept state.\n\t\t\t\t\t\tskipAlt = cfg.alt;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\taccept(input, lexerActionExecutor,\n\t\t\t   startIndex, index, line, charPos) {\n\t\t   if (LexerATNSimulator.debug) {\n\t\t\t   console.log(\"ACTION %s\\n\", lexerActionExecutor);\n\t\t   }\n\t\t   // seek to after last char in token\n\t\t   input.seek(index);\n\t\t   this.line = line;\n\t\t   this.column = charPos;\n\t\t   if (lexerActionExecutor !== null && this.recog !== null) {\n\t\t\t   lexerActionExecutor.execute(this.recog, input, startIndex);\n\t\t   }\n\t   }\n\n\tgetReachableTarget(trans, t) {\n\t\tif (trans.matches(t, 0, Lexer.MAX_CHAR_VALUE)) {\n\t\t\treturn trans.target;\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\tcomputeStartState(input, p) {\n\t\tconst initialContext = PredictionContext.EMPTY;\n\t\tconst configs = new OrderedATNConfigSet();\n\t\tfor (let i = 0; i < p.transitions.length; i++) {\n\t\t\tconst target = p.transitions[i].target;\n\t\t\tconst cfg = new LexerATNConfig({state:target, alt:i+1, context:initialContext}, null);\n\t\t\tthis.closure(input, cfg, configs, false, false, false);\n\t\t}\n\t\treturn configs;\n\t}\n\n\t/**\n\t * Since the alternatives within any lexer decision are ordered by\n\t * preference, this method stops pursuing the closure as soon as an accept\n\t * state is reached. After the first accept state is reached by depth-first\n\t * search from {@code config}, all other (potentially reachable) states for\n\t * this rule would have a lower priority.\n\t *\n\t * @return {Boolean} {@code true} if an accept state is reached, otherwise\n\t * {@code false}.\n\t */\n\tclosure(input, config, configs,\n\t\t\tcurrentAltReachedAcceptState, speculative, treatEofAsEpsilon) {\n\t\tlet cfg = null;\n\t\tif (LexerATNSimulator.debug) {\n\t\t\tconsole.log(\"closure(\" + config.toString(this.recog, true) + \")\");\n\t\t}\n\t\tif (config.state instanceof RuleStopState) {\n\t\t\tif (LexerATNSimulator.debug) {\n\t\t\t\tif (this.recog !== null) {\n\t\t\t\t\tconsole.log(\"closure at %s rule stop %s\\n\", this.recog.ruleNames[config.state.ruleIndex], config);\n\t\t\t\t} else {\n\t\t\t\t\tconsole.log(\"closure at rule stop %s\\n\", config);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (config.context === null || config.context.hasEmptyPath()) {\n\t\t\t\tif (config.context === null || config.context.isEmpty()) {\n\t\t\t\t\tconfigs.add(config);\n\t\t\t\t\treturn true;\n\t\t\t\t} else {\n\t\t\t\t\tconfigs.add(new LexerATNConfig({ state:config.state, context:PredictionContext.EMPTY}, config));\n\t\t\t\t\tcurrentAltReachedAcceptState = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (config.context !== null && !config.context.isEmpty()) {\n\t\t\t\tfor (let i = 0; i < config.context.length; i++) {\n\t\t\t\t\tif (config.context.getReturnState(i) !== PredictionContext.EMPTY_RETURN_STATE) {\n\t\t\t\t\t\tconst newContext = config.context.getParent(i); // \"pop\" return state\n\t\t\t\t\t\tconst returnState = this.atn.states[config.context.getReturnState(i)];\n\t\t\t\t\t\tcfg = new LexerATNConfig({ state:returnState, context:newContext }, config);\n\t\t\t\t\t\tcurrentAltReachedAcceptState = this.closure(input, cfg,\n\t\t\t\t\t\t\t\tconfigs, currentAltReachedAcceptState, speculative,\n\t\t\t\t\t\t\t\ttreatEofAsEpsilon);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn currentAltReachedAcceptState;\n\t\t}\n\t\t// optimization\n\t\tif (!config.state.epsilonOnlyTransitions) {\n\t\t\tif (!currentAltReachedAcceptState || !config.passedThroughNonGreedyDecision) {\n\t\t\t\tconfigs.add(config);\n\t\t\t}\n\t\t}\n\t\tfor (let j = 0; j < config.state.transitions.length; j++) {\n\t\t\tconst trans = config.state.transitions[j];\n\t\t\tcfg = this.getEpsilonTarget(input, config, trans, configs, speculative, treatEofAsEpsilon);\n\t\t\tif (cfg !== null) {\n\t\t\t\tcurrentAltReachedAcceptState = this.closure(input, cfg, configs,\n\t\t\t\t\t\tcurrentAltReachedAcceptState, speculative, treatEofAsEpsilon);\n\t\t\t}\n\t\t}\n\t\treturn currentAltReachedAcceptState;\n\t}\n\n\t// side-effect: can alter configs.hasSemanticContext\n\tgetEpsilonTarget(input, config, trans,\n\t\t\tconfigs, speculative, treatEofAsEpsilon) {\n\t\tlet cfg = null;\n\t\tif (trans.serializationType === Transition.RULE) {\n\t\t\tconst newContext = SingletonPredictionContext.create(config.context, trans.followState.stateNumber);\n\t\t\tcfg = new LexerATNConfig( { state:trans.target, context:newContext}, config);\n\t\t} else if (trans.serializationType === Transition.PRECEDENCE) {\n\t\t\tthrow \"Precedence predicates are not supported in lexers.\";\n\t\t} else if (trans.serializationType === Transition.PREDICATE) {\n\t\t\t// Track traversing semantic predicates. If we traverse,\n\t\t\t// we cannot add a DFA state for this \"reach\" computation\n\t\t\t// because the DFA would not test the predicate again in the\n\t\t\t// future. Rather than creating collections of semantic predicates\n\t\t\t// like v3 and testing them on prediction, v4 will test them on the\n\t\t\t// fly all the time using the ATN not the DFA. This is slower but\n\t\t\t// semantically it's not used that often. One of the key elements to\n\t\t\t// this predicate mechanism is not adding DFA states that see\n\t\t\t// predicates immediately afterwards in the ATN. For example,\n\n\t\t\t// a : ID {p1}? | ID {p2}? ;\n\n\t\t\t// should create the start state for rule 'a' (to save start state\n\t\t\t// competition), but should not create target of ID state. The\n\t\t\t// collection of ATN states the following ID references includes\n\t\t\t// states reached by traversing predicates. Since this is when we\n\t\t\t// test them, we cannot cash the DFA state target of ID.\n\n\t\t\tif (LexerATNSimulator.debug) {\n\t\t\t\tconsole.log(\"EVAL rule \" + trans.ruleIndex + \":\" + trans.predIndex);\n\t\t\t}\n\t\t\tconfigs.hasSemanticContext = true;\n\t\t\tif (this.evaluatePredicate(input, trans.ruleIndex, trans.predIndex, speculative)) {\n\t\t\t\tcfg = new LexerATNConfig({ state:trans.target}, config);\n\t\t\t}\n\t\t} else if (trans.serializationType === Transition.ACTION) {\n\t\t\tif (config.context === null || config.context.hasEmptyPath()) {\n\t\t\t\t// execute actions anywhere in the start rule for a token.\n\t\t\t\t//\n\t\t\t\t// TODO: if the entry rule is invoked recursively, some\n\t\t\t\t// actions may be executed during the recursive call. The\n\t\t\t\t// problem can appear when hasEmptyPath() is true but\n\t\t\t\t// isEmpty() is false. In this case, the config needs to be\n\t\t\t\t// split into two contexts - one with just the empty path\n\t\t\t\t// and another with everything but the empty path.\n\t\t\t\t// Unfortunately, the current algorithm does not allow\n\t\t\t\t// getEpsilonTarget to return two configurations, so\n\t\t\t\t// additional modifications are needed before we can support\n\t\t\t\t// the split operation.\n\t\t\t\tconst lexerActionExecutor = LexerActionExecutor.append(config.lexerActionExecutor,\n\t\t\t\t\t\tthis.atn.lexerActions[trans.actionIndex]);\n\t\t\t\tcfg = new LexerATNConfig({ state:trans.target, lexerActionExecutor:lexerActionExecutor }, config);\n\t\t\t} else {\n\t\t\t\t// ignore actions in referenced rules\n\t\t\t\tcfg = new LexerATNConfig( { state:trans.target}, config);\n\t\t\t}\n\t\t} else if (trans.serializationType === Transition.EPSILON) {\n\t\t\tcfg = new LexerATNConfig({ state:trans.target}, config);\n\t\t} else if (trans.serializationType === Transition.ATOM ||\n\t\t\t\t\ttrans.serializationType === Transition.RANGE ||\n\t\t\t\t\ttrans.serializationType === Transition.SET) {\n\t\t\tif (treatEofAsEpsilon) {\n\t\t\t\tif (trans.matches(Token.EOF, 0, Lexer.MAX_CHAR_VALUE)) {\n\t\t\t\t\tcfg = new LexerATNConfig( { state:trans.target }, config);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn cfg;\n\t}\n\n\t/**\n\t * Evaluate a predicate specified in the lexer.\n\t *\n\t * <p>If {@code speculative} is {@code true}, this method was called before\n\t * {@link //consume} for the matched character. This method should call\n\t * {@link //consume} before evaluating the predicate to ensure position\n\t * sensitive values, including {@link Lexer//getText}, {@link Lexer//getLine},\n\t * and {@link Lexer//getcolumn}, properly reflect the current\n\t * lexer state. This method should restore {@code input} and the simulator\n\t * to the original state before returning (i.e. undo the actions made by the\n\t * call to {@link //consume}.</p>\n\t *\n\t * @param input The input stream.\n\t * @param ruleIndex The rule containing the predicate.\n\t * @param predIndex The index of the predicate within the rule.\n\t * @param speculative {@code true} if the current index in {@code input} is\n\t * one character before the predicate's location.\n\t *\n\t * @return {@code true} if the specified predicate evaluates to\n\t * {@code true}.\n\t */\n\tevaluatePredicate(input, ruleIndex,\n\t\t\tpredIndex, speculative) {\n\t\t// assume true if no recognizer was provided\n\t\tif (this.recog === null) {\n\t\t\treturn true;\n\t\t}\n\t\tif (!speculative) {\n\t\t\treturn this.recog.sempred(null, ruleIndex, predIndex);\n\t\t}\n\t\tconst savedcolumn = this.column;\n\t\tconst savedLine = this.line;\n\t\tconst index = input.index;\n\t\tconst marker = input.mark();\n\t\ttry {\n\t\t\tthis.consume(input);\n\t\t\treturn this.recog.sempred(null, ruleIndex, predIndex);\n\t\t} finally {\n\t\t\tthis.column = savedcolumn;\n\t\t\tthis.line = savedLine;\n\t\t\tinput.seek(index);\n\t\t\tinput.release(marker);\n\t\t}\n\t}\n\n\tcaptureSimState(settings, input, dfaState) {\n\t\tsettings.index = input.index;\n\t\tsettings.line = this.line;\n\t\tsettings.column = this.column;\n\t\tsettings.dfaState = dfaState;\n\t}\n\n\taddDFAEdge(from_, tk, to, cfgs) {\n\t\tif (to === undefined) {\n\t\t\tto = null;\n\t\t}\n\t\tif (cfgs === undefined) {\n\t\t\tcfgs = null;\n\t\t}\n\t\tif (to === null && cfgs !== null) {\n\t\t\t// leading to this call, ATNConfigSet.hasSemanticContext is used as a\n\t\t\t// marker indicating dynamic predicate evaluation makes this edge\n\t\t\t// dependent on the specific input sequence, so the static edge in the\n\t\t\t// DFA should be omitted. The target DFAState is still created since\n\t\t\t// execATN has the ability to resynchronize with the DFA state cache\n\t\t\t// following the predicate evaluation step.\n\t\t\t//\n\t\t\t// TJP notes: next time through the DFA, we see a pred again and eval.\n\t\t\t// If that gets us to a previously created (but dangling) DFA\n\t\t\t// state, we can continue in pure DFA mode from there.\n\t\t\t// /\n\t\t\tconst suppressEdge = cfgs.hasSemanticContext;\n\t\t\tcfgs.hasSemanticContext = false;\n\n\t\t\tto = this.addDFAState(cfgs);\n\n\t\t\tif (suppressEdge) {\n\t\t\t\treturn to;\n\t\t\t}\n\t\t}\n\t\t// add the edge\n\t\tif (tk < LexerATNSimulator.MIN_DFA_EDGE || tk > LexerATNSimulator.MAX_DFA_EDGE) {\n\t\t\t// Only track edges within the DFA bounds\n\t\t\treturn to;\n\t\t}\n\t\tif (LexerATNSimulator.debug) {\n\t\t\tconsole.log(\"EDGE \" + from_ + \" -> \" + to + \" upon \" + tk);\n\t\t}\n\t\tif (from_.edges === null) {\n\t\t\t// make room for tokens 1..n and -1 masquerading as index 0\n\t\t\tfrom_.edges = [];\n\t\t}\n\t\tfrom_.edges[tk - LexerATNSimulator.MIN_DFA_EDGE] = to; // connect\n\n\t\treturn to;\n\t}\n\n\t/**\n\t * Add a new DFA state if there isn't one with this set of\n\t * configurations already. This method also detects the first\n\t * configuration containing an ATN rule stop state. Later, when\n\t * traversing the DFA, we will know which rule to accept.\n\t */\n\taddDFAState(configs) {\n\t\tconst proposed = new DFAState(null, configs);\n\t\tlet firstConfigWithRuleStopState = null;\n\t\tfor (let i = 0; i < configs.items.length; i++) {\n\t\t\tconst cfg = configs.items[i];\n\t\t\tif (cfg.state instanceof RuleStopState) {\n\t\t\t\tfirstConfigWithRuleStopState = cfg;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (firstConfigWithRuleStopState !== null) {\n\t\t\tproposed.isAcceptState = true;\n\t\t\tproposed.lexerActionExecutor = firstConfigWithRuleStopState.lexerActionExecutor;\n\t\t\tproposed.prediction = this.atn.ruleToTokenType[firstConfigWithRuleStopState.state.ruleIndex];\n\t\t}\n\t\tconst dfa = this.decisionToDFA[this.mode];\n\t\tconst existing = dfa.states.get(proposed);\n\t\tif (existing!==null) {\n\t\t\treturn existing;\n\t\t}\n\t\tconst newState = proposed;\n\t\tnewState.stateNumber = dfa.states.length;\n\t\tconfigs.setReadonly(true);\n\t\tnewState.configs = configs;\n\t\tdfa.states.add(newState);\n\t\treturn newState;\n\t}\n\n\tgetDFA(mode) {\n\t\treturn this.decisionToDFA[mode];\n\t}\n\n// Get the text matched so far for the current token.\n\tgetText(input) {\n\t\t// index is first lookahead char, don't include.\n\t\treturn input.getText(this.startIndex, input.index - 1);\n\t}\n\n\tconsume(input) {\n\t\tconst curChar = input.LA(1);\n\t\tif (curChar === \"\\n\".charCodeAt(0)) {\n\t\t\tthis.line += 1;\n\t\t\tthis.column = 0;\n\t\t} else {\n\t\t\tthis.column += 1;\n\t\t}\n\t\tinput.consume();\n\t}\n\n\tgetTokenName(tt) {\n\t\tif (tt === -1) {\n\t\t\treturn \"EOF\";\n\t\t} else {\n\t\t\treturn \"'\" + String.fromCharCode(tt) + \"'\";\n\t\t}\n\t}\n}\n\nLexerATNSimulator.debug = false;\nLexerATNSimulator.dfa_debug = false;\n\nLexerATNSimulator.MIN_DFA_EDGE = 0;\nLexerATNSimulator.MAX_DFA_EDGE = 127; // forces unicode to stay in ATN\n\nLexerATNSimulator.match_calls = 0;\n\nmodule.exports = LexerATNSimulator;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/atn/LexerATNSimulator.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/atn/LexerAction.js":
/*!********************************************************************************************!*\
  !*** ../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/atn/LexerAction.js ***!
  \********************************************************************************************/
/***/ ((module) => {

eval("/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nconst LexerActionType = {\n    // The type of a {@link LexerChannelAction} action.\n    CHANNEL: 0,\n    // The type of a {@link LexerCustomAction} action\n    CUSTOM: 1,\n    // The type of a {@link LexerModeAction} action.\n    MODE: 2,\n    //The type of a {@link LexerMoreAction} action.\n    MORE: 3,\n    //The type of a {@link LexerPopModeAction} action.\n    POP_MODE: 4,\n    //The type of a {@link LexerPushModeAction} action.\n    PUSH_MODE: 5,\n    //The type of a {@link LexerSkipAction} action.\n    SKIP: 6,\n    //The type of a {@link LexerTypeAction} action.\n    TYPE: 7\n}\n\nclass LexerAction {\n    constructor(action) {\n        this.actionType = action;\n        this.isPositionDependent = false;\n    }\n\n    hashCode() {\n        const hash = new Hash();\n        this.updateHashCode(hash);\n        return hash.finish()\n    }\n\n    updateHashCode(hash) {\n        hash.update(this.actionType);\n    }\n\n    equals(other) {\n        return this === other;\n    }\n}\n\n\n/**\n * Implements the {@code skip} lexer action by calling {@link Lexer//skip}.\n *\n * <p>The {@code skip} command does not have any parameters, so this action is\n * implemented as a singleton instance exposed by {@link //INSTANCE}.</p>\n */\nclass LexerSkipAction extends LexerAction {\n    constructor() {\n        super(LexerActionType.SKIP);\n    }\n\n    execute(lexer) {\n        lexer.skip();\n    }\n\n    toString() {\n        return \"skip\";\n    }\n}\n\n// Provides a singleton instance of this parameterless lexer action.\nLexerSkipAction.INSTANCE = new LexerSkipAction();\n\n/**\n * Implements the {@code type} lexer action by calling {@link Lexer//setType}\n * with the assigned type\n */\nclass LexerTypeAction extends LexerAction {\n    constructor(type) {\n        super(LexerActionType.TYPE);\n        this.type = type;\n    }\n\n    execute(lexer) {\n        lexer.type = this.type;\n    }\n\n    updateHashCode(hash) {\n        hash.update(this.actionType, this.type);\n    }\n\n    equals(other) {\n        if(this === other) {\n            return true;\n        } else if (! (other instanceof LexerTypeAction)) {\n            return false;\n        } else {\n            return this.type === other.type;\n        }\n    }\n\n    toString() {\n        return \"type(\" + this.type + \")\";\n    }\n}\n\n\n/**\n * Implements the {@code pushMode} lexer action by calling\n * {@link Lexer//pushMode} with the assigned mode\n */\nclass LexerPushModeAction extends LexerAction {\n    constructor(mode) {\n        super(LexerActionType.PUSH_MODE);\n        this.mode = mode;\n    }\n\n    /**\n     * <p>This action is implemented by calling {@link Lexer//pushMode} with the\n     * value provided by {@link //getMode}.</p>\n     */\n    execute(lexer) {\n        lexer.pushMode(this.mode);\n    }\n\n    updateHashCode(hash) {\n        hash.update(this.actionType, this.mode);\n    }\n\n    equals(other) {\n        if (this === other) {\n            return true;\n        } else if (! (other instanceof LexerPushModeAction)) {\n            return false;\n        } else {\n            return this.mode === other.mode;\n        }\n    }\n\n    toString() {\n        return \"pushMode(\" + this.mode + \")\";\n    }\n}\n\n/**\n * Implements the {@code popMode} lexer action by calling {@link Lexer//popMode}.\n *\n * <p>The {@code popMode} command does not have any parameters, so this action is\n * implemented as a singleton instance exposed by {@link //INSTANCE}.</p>\n */\nclass LexerPopModeAction extends LexerAction {\n    constructor() {\n        super(LexerActionType.POP_MODE);\n    }\n\n    /**\n     * <p>This action is implemented by calling {@link Lexer//popMode}.</p>\n     */\n    execute(lexer) {\n        lexer.popMode();\n    }\n\n    toString() {\n        return \"popMode\";\n    }\n}\n\nLexerPopModeAction.INSTANCE = new LexerPopModeAction();\n\n/**\n * Implements the {@code more} lexer action by calling {@link Lexer//more}.\n *\n * <p>The {@code more} command does not have any parameters, so this action is\n * implemented as a singleton instance exposed by {@link //INSTANCE}.</p>\n */\nclass LexerMoreAction extends LexerAction {\n    constructor() {\n        super(LexerActionType.MORE);\n    }\n\n    /**\n     * <p>This action is implemented by calling {@link Lexer//popMode}.</p>\n     */\n    execute(lexer) {\n        lexer.more();\n    }\n\n    toString() {\n        return \"more\";\n    }\n}\n\nLexerMoreAction.INSTANCE = new LexerMoreAction();\n\n\n/**\n * Implements the {@code mode} lexer action by calling {@link Lexer//mode} with\n * the assigned mode\n */\nclass LexerModeAction extends LexerAction {\n    constructor(mode) {\n        super(LexerActionType.MODE);\n        this.mode = mode;\n    }\n\n    /**\n     * <p>This action is implemented by calling {@link Lexer//mode} with the\n     * value provided by {@link //getMode}.</p>\n     */\n    execute(lexer) {\n        lexer.mode(this.mode);\n    }\n\n    updateHashCode(hash) {\n        hash.update(this.actionType, this.mode);\n    }\n\n    equals(other) {\n        if (this === other) {\n            return true;\n        } else if (! (other instanceof LexerModeAction)) {\n            return false;\n        } else {\n            return this.mode === other.mode;\n        }\n    }\n\n    toString() {\n        return \"mode(\" + this.mode + \")\";\n    }\n}\n\n/**\n * Executes a custom lexer action by calling {@link Recognizer//action} with the\n * rule and action indexes assigned to the custom action. The implementation of\n * a custom action is added to the generated code for the lexer in an override\n * of {@link Recognizer//action} when the grammar is compiled.\n *\n * <p>This class may represent embedded actions created with the <code>{...}</code>\n * syntax in ANTLR 4, as well as actions created for lexer commands where the\n * command argument could not be evaluated when the grammar was compiled.</p>\n */\nclass LexerCustomAction extends LexerAction {\n    /**\n     * Constructs a custom lexer action with the specified rule and action\n     * indexes.\n     *\n     * @param ruleIndex The rule index to use for calls to\n     * {@link Recognizer//action}.\n     * @param actionIndex The action index to use for calls to\n     * {@link Recognizer//action}.\n     */\n    constructor(ruleIndex, actionIndex) {\n        super(LexerActionType.CUSTOM);\n        this.ruleIndex = ruleIndex;\n        this.actionIndex = actionIndex;\n        this.isPositionDependent = true;\n    }\n\n    /**\n     * <p>Custom actions are implemented by calling {@link Lexer//action} with the\n     * appropriate rule and action indexes.</p>\n     */\n    execute(lexer) {\n        lexer.action(null, this.ruleIndex, this.actionIndex);\n    }\n\n    updateHashCode(hash) {\n        hash.update(this.actionType, this.ruleIndex, this.actionIndex);\n    }\n\n    equals(other) {\n        if (this === other) {\n            return true;\n        } else if (! (other instanceof LexerCustomAction)) {\n            return false;\n        } else {\n            return this.ruleIndex === other.ruleIndex && this.actionIndex === other.actionIndex;\n        }\n    }\n}\n\n/**\n * Implements the {@code channel} lexer action by calling\n * {@link Lexer//setChannel} with the assigned channel.\n * Constructs a new {@code channel} action with the specified channel value.\n * @param channel The channel value to pass to {@link Lexer//setChannel}\n */\nclass LexerChannelAction extends LexerAction {\n    constructor(channel) {\n        super(LexerActionType.CHANNEL);\n        this.channel = channel;\n    }\n\n    /**\n     * <p>This action is implemented by calling {@link Lexer//setChannel} with the\n     * value provided by {@link //getChannel}.</p>\n     */\n    execute(lexer) {\n        lexer._channel = this.channel;\n    }\n\n    updateHashCode(hash) {\n        hash.update(this.actionType, this.channel);\n    }\n\n    equals(other) {\n        if (this === other) {\n            return true;\n        } else if (! (other instanceof LexerChannelAction)) {\n            return false;\n        } else {\n            return this.channel === other.channel;\n        }\n    }\n\n    toString() {\n        return \"channel(\" + this.channel + \")\";\n    }\n}\n\n\n/**\n * This implementation of {@link LexerAction} is used for tracking input offsets\n * for position-dependent actions within a {@link LexerActionExecutor}.\n *\n * <p>This action is not serialized as part of the ATN, and is only required for\n * position-dependent lexer actions which appear at a location other than the\n * end of a rule. For more information about DFA optimizations employed for\n * lexer actions, see {@link LexerActionExecutor//append} and\n * {@link LexerActionExecutor//fixOffsetBeforeMatch}.</p>\n *\n * Constructs a new indexed custom action by associating a character offset\n * with a {@link LexerAction}.\n *\n * <p>Note: This class is only required for lexer actions for which\n * {@link LexerAction//isPositionDependent} returns {@code true}.</p>\n *\n * @param offset The offset into the input {@link CharStream}, relative to\n * the token start index, at which the specified lexer action should be\n * executed.\n * @param action The lexer action to execute at a particular offset in the\n * input {@link CharStream}.\n */\nclass LexerIndexedCustomAction extends LexerAction {\n    constructor(offset, action) {\n        super(action.actionType);\n        this.offset = offset;\n        this.action = action;\n        this.isPositionDependent = true;\n    }\n\n    /**\n     * <p>This method calls {@link //execute} on the result of {@link //getAction}\n     * using the provided {@code lexer}.</p>\n     */\n    execute(lexer) {\n        // assume the input stream position was properly set by the calling code\n        this.action.execute(lexer);\n    }\n\n    updateHashCode(hash) {\n        hash.update(this.actionType, this.offset, this.action);\n    }\n\n    equals(other) {\n        if (this === other) {\n            return true;\n        } else if (! (other instanceof LexerIndexedCustomAction)) {\n            return false;\n        } else {\n            return this.offset === other.offset && this.action === other.action;\n        }\n    }\n}\n\nmodule.exports = {\n    LexerActionType,\n    LexerSkipAction,\n    LexerChannelAction,\n    LexerCustomAction,\n    LexerIndexedCustomAction,\n    LexerMoreAction,\n    LexerTypeAction,\n    LexerPushModeAction,\n    LexerPopModeAction,\n    LexerModeAction\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/atn/LexerAction.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/atn/LexerActionExecutor.js":
/*!****************************************************************************************************!*\
  !*** ../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/atn/LexerActionExecutor.js ***!
  \****************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nconst {hashStuff} = __webpack_require__(/*! ../Utils */ \"(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/Utils.js\");\nconst {LexerIndexedCustomAction} = __webpack_require__(/*! ./LexerAction */ \"(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/atn/LexerAction.js\");\n\nclass LexerActionExecutor {\n\t/**\n\t * Represents an executor for a sequence of lexer actions which traversed during\n\t * the matching operation of a lexer rule (token).\n\t *\n\t * <p>The executor tracks position information for position-dependent lexer actions\n\t * efficiently, ensuring that actions appearing only at the end of the rule do\n\t * not cause bloating of the {@link DFA} created for the lexer.</p>\n\t */\n\tconstructor(lexerActions) {\n\t\tthis.lexerActions = lexerActions === null ? [] : lexerActions;\n\t\t/**\n\t\t * Caches the result of {@link //hashCode} since the hash code is an element\n\t\t * of the performance-critical {@link LexerATNConfig//hashCode} operation\n\t\t */\n\t\tthis.cachedHashCode = hashStuff(lexerActions); // \"\".join([str(la) for la in\n\t\t// lexerActions]))\n\t\treturn this;\n\t}\n\n\t/**\n\t * Creates a {@link LexerActionExecutor} which encodes the current offset\n\t * for position-dependent lexer actions.\n\t *\n\t * <p>Normally, when the executor encounters lexer actions where\n\t * {@link LexerAction//isPositionDependent} returns {@code true}, it calls\n\t * {@link IntStream//seek} on the input {@link CharStream} to set the input\n\t * position to the <em>end</em> of the current token. This behavior provides\n\t * for efficient DFA representation of lexer actions which appear at the end\n\t * of a lexer rule, even when the lexer rule matches a variable number of\n\t * characters.</p>\n\t *\n\t * <p>Prior to traversing a match transition in the ATN, the current offset\n\t * from the token start index is assigned to all position-dependent lexer\n\t * actions which have not already been assigned a fixed offset. By storing\n\t * the offsets relative to the token start index, the DFA representation of\n\t * lexer actions which appear in the middle of tokens remains efficient due\n\t * to sharing among tokens of the same length, regardless of their absolute\n\t * position in the input stream.</p>\n\t *\n\t * <p>If the current executor already has offsets assigned to all\n\t * position-dependent lexer actions, the method returns {@code this}.</p>\n\t *\n\t * @param offset The current offset to assign to all position-dependent\n\t * lexer actions which do not already have offsets assigned.\n\t *\n\t * @return {LexerActionExecutor} A {@link LexerActionExecutor} which stores input stream offsets\n\t * for all position-dependent lexer actions.\n\t */\n\tfixOffsetBeforeMatch(offset) {\n\t\tlet updatedLexerActions = null;\n\t\tfor (let i = 0; i < this.lexerActions.length; i++) {\n\t\t\tif (this.lexerActions[i].isPositionDependent &&\n\t\t\t\t\t!(this.lexerActions[i] instanceof LexerIndexedCustomAction)) {\n\t\t\t\tif (updatedLexerActions === null) {\n\t\t\t\t\tupdatedLexerActions = this.lexerActions.concat([]);\n\t\t\t\t}\n\t\t\t\tupdatedLexerActions[i] = new LexerIndexedCustomAction(offset,\n\t\t\t\t\t\tthis.lexerActions[i]);\n\t\t\t}\n\t\t}\n\t\tif (updatedLexerActions === null) {\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn new LexerActionExecutor(updatedLexerActions);\n\t\t}\n\t}\n\n\t/**\n\t * Execute the actions encapsulated by this executor within the context of a\n\t * particular {@link Lexer}.\n\t *\n\t * <p>This method calls {@link IntStream//seek} to set the position of the\n\t * {@code input} {@link CharStream} prior to calling\n\t * {@link LexerAction//execute} on a position-dependent action. Before the\n\t * method returns, the input position will be restored to the same position\n\t * it was in when the method was invoked.</p>\n\t *\n\t * @param lexer The lexer instance.\n\t * @param input The input stream which is the source for the current token.\n\t * When this method is called, the current {@link IntStream//index} for\n\t * {@code input} should be the start of the following token, i.e. 1\n\t * character past the end of the current token.\n\t * @param startIndex The token start index. This value may be passed to\n\t * {@link IntStream//seek} to set the {@code input} position to the beginning\n\t * of the token.\n\t */\n\texecute(lexer, input, startIndex) {\n\t\tlet requiresSeek = false;\n\t\tconst stopIndex = input.index;\n\t\ttry {\n\t\t\tfor (let i = 0; i < this.lexerActions.length; i++) {\n\t\t\t\tlet lexerAction = this.lexerActions[i];\n\t\t\t\tif (lexerAction instanceof LexerIndexedCustomAction) {\n\t\t\t\t\tconst offset = lexerAction.offset;\n\t\t\t\t\tinput.seek(startIndex + offset);\n\t\t\t\t\tlexerAction = lexerAction.action;\n\t\t\t\t\trequiresSeek = (startIndex + offset) !== stopIndex;\n\t\t\t\t} else if (lexerAction.isPositionDependent) {\n\t\t\t\t\tinput.seek(stopIndex);\n\t\t\t\t\trequiresSeek = false;\n\t\t\t\t}\n\t\t\t\tlexerAction.execute(lexer);\n\t\t\t}\n\t\t} finally {\n\t\t\tif (requiresSeek) {\n\t\t\t\tinput.seek(stopIndex);\n\t\t\t}\n\t\t}\n\t}\n\n\thashCode() {\n\t\treturn this.cachedHashCode;\n\t}\n\n\tupdateHashCode(hash) {\n\t\thash.update(this.cachedHashCode);\n\t}\n\n\tequals(other) {\n\t\tif (this === other) {\n\t\t\treturn true;\n\t\t} else if (!(other instanceof LexerActionExecutor)) {\n\t\t\treturn false;\n\t\t} else if (this.cachedHashCode != other.cachedHashCode) {\n\t\t\treturn false;\n\t\t} else if (this.lexerActions.length != other.lexerActions.length) {\n\t\t\treturn false;\n\t\t} else {\n\t\t\tconst numActions = this.lexerActions.length\n\t\t\tfor (let idx = 0; idx < numActions; ++idx) {\n\t\t\t\tif (!this.lexerActions[idx].equals(other.lexerActions[idx])) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t}\n\n\t/**\n\t * Creates a {@link LexerActionExecutor} which executes the actions for\n\t * the input {@code lexerActionExecutor} followed by a specified\n\t * {@code lexerAction}.\n\t *\n\t * @param lexerActionExecutor The executor for actions already traversed by\n\t * the lexer while matching a token within a particular\n\t * {@link LexerATNConfig}. If this is {@code null}, the method behaves as\n\t * though it were an empty executor.\n\t * @param lexerAction The lexer action to execute after the actions\n\t * specified in {@code lexerActionExecutor}.\n\t *\n\t * @return {LexerActionExecutor} A {@link LexerActionExecutor} for executing the combine actions\n\t * of {@code lexerActionExecutor} and {@code lexerAction}.\n\t */\n\tstatic append(lexerActionExecutor, lexerAction) {\n\t\tif (lexerActionExecutor === null) {\n\t\t\treturn new LexerActionExecutor([ lexerAction ]);\n\t\t}\n\t\tconst lexerActions = lexerActionExecutor.lexerActions.concat([ lexerAction ]);\n\t\treturn new LexerActionExecutor(lexerActions);\n\t}\n}\n\n\nmodule.exports = LexerActionExecutor;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2FudGxyNEA0LjkuMy9ub2RlX21vZHVsZXMvYW50bHI0L3NyYy9hbnRscjQvYXRuL0xleGVyQWN0aW9uRXhlY3V0b3IuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBTyxXQUFXLEVBQUUsbUJBQU8sQ0FBQyxrR0FBVTtBQUN0QyxPQUFPLDBCQUEwQixFQUFFLG1CQUFPLENBQUMsaUhBQWU7O0FBRTFEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCLFdBQVc7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkIsa0JBQWtCO0FBQzdDLGtDQUFrQyxnQ0FBZ0M7QUFDbEU7QUFDQSxpREFBaUQ7QUFDakQ7QUFDQTtBQUNBOztBQUVBO0FBQ0EsZUFBZSwyQkFBMkI7QUFDMUM7QUFDQTtBQUNBO0FBQ0EsS0FBSyx3Q0FBd0MsU0FBUyxXQUFXO0FBQ2pFLEtBQUssdUJBQXVCLGNBQWMsa0JBQWtCO0FBQzVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwREFBMEQsV0FBVztBQUNyRTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEscUJBQXFCLEdBQUcsMkJBQTJCO0FBQ2hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLDhCQUE4QjtBQUNoRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsZ0JBQWdCLFlBQVk7QUFDNUI7QUFDQSwwQkFBMEIsdUJBQXVCO0FBQ2pELEtBQUssY0FBYyxrQkFBa0I7QUFDckMsS0FBSyw0QkFBNEI7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZDQUE2Qyx3QkFBd0I7QUFDckUsS0FBSyxhQUFhO0FBQ2xCO0FBQ0E7QUFDQSxLQUFLLHVCQUF1QixZQUFZLGFBQWE7QUFDckQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLDhCQUE4QjtBQUNqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0EsSUFBSTtBQUNKO0FBQ0EsSUFBSTtBQUNKO0FBQ0EsSUFBSTtBQUNKO0FBQ0EscUJBQXFCLGtCQUFrQjtBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGVBQWUsMkJBQTJCO0FBQzFDLGVBQWUsMkJBQTJCO0FBQzFDLEtBQUssa0JBQWtCO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBLEtBQUsscUJBQXFCLGNBQWMsV0FBVztBQUNuRDtBQUNBO0FBQ0Esa0JBQWtCLDBCQUEwQjtBQUM1QztBQUNBLGFBQWEscUJBQXFCLEdBQUcsMkJBQTJCO0FBQ2hFLFFBQVEsMkJBQTJCLEtBQUssa0JBQWtCO0FBQzFEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0EiLCJzb3VyY2VzIjpbIi9Vc2Vycy9ldGhhbmtpbS9OZXN0b3IvbWVkZmV0Y2guanMvbm9kZV9tb2R1bGVzLy5wbnBtL2FudGxyNEA0LjkuMy9ub2RlX21vZHVsZXMvYW50bHI0L3NyYy9hbnRscjQvYXRuL0xleGVyQWN0aW9uRXhlY3V0b3IuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyogQ29weXJpZ2h0IChjKSAyMDEyLTIwMTcgVGhlIEFOVExSIFByb2plY3QuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBVc2Ugb2YgdGhpcyBmaWxlIGlzIGdvdmVybmVkIGJ5IHRoZSBCU0QgMy1jbGF1c2UgbGljZW5zZSB0aGF0XG4gKiBjYW4gYmUgZm91bmQgaW4gdGhlIExJQ0VOU0UudHh0IGZpbGUgaW4gdGhlIHByb2plY3Qgcm9vdC5cbiAqL1xuXG5jb25zdCB7aGFzaFN0dWZmfSA9IHJlcXVpcmUoXCIuLi9VdGlsc1wiKTtcbmNvbnN0IHtMZXhlckluZGV4ZWRDdXN0b21BY3Rpb259ID0gcmVxdWlyZSgnLi9MZXhlckFjdGlvbicpO1xuXG5jbGFzcyBMZXhlckFjdGlvbkV4ZWN1dG9yIHtcblx0LyoqXG5cdCAqIFJlcHJlc2VudHMgYW4gZXhlY3V0b3IgZm9yIGEgc2VxdWVuY2Ugb2YgbGV4ZXIgYWN0aW9ucyB3aGljaCB0cmF2ZXJzZWQgZHVyaW5nXG5cdCAqIHRoZSBtYXRjaGluZyBvcGVyYXRpb24gb2YgYSBsZXhlciBydWxlICh0b2tlbikuXG5cdCAqXG5cdCAqIDxwPlRoZSBleGVjdXRvciB0cmFja3MgcG9zaXRpb24gaW5mb3JtYXRpb24gZm9yIHBvc2l0aW9uLWRlcGVuZGVudCBsZXhlciBhY3Rpb25zXG5cdCAqIGVmZmljaWVudGx5LCBlbnN1cmluZyB0aGF0IGFjdGlvbnMgYXBwZWFyaW5nIG9ubHkgYXQgdGhlIGVuZCBvZiB0aGUgcnVsZSBkb1xuXHQgKiBub3QgY2F1c2UgYmxvYXRpbmcgb2YgdGhlIHtAbGluayBERkF9IGNyZWF0ZWQgZm9yIHRoZSBsZXhlci48L3A+XG5cdCAqL1xuXHRjb25zdHJ1Y3RvcihsZXhlckFjdGlvbnMpIHtcblx0XHR0aGlzLmxleGVyQWN0aW9ucyA9IGxleGVyQWN0aW9ucyA9PT0gbnVsbCA/IFtdIDogbGV4ZXJBY3Rpb25zO1xuXHRcdC8qKlxuXHRcdCAqIENhY2hlcyB0aGUgcmVzdWx0IG9mIHtAbGluayAvL2hhc2hDb2RlfSBzaW5jZSB0aGUgaGFzaCBjb2RlIGlzIGFuIGVsZW1lbnRcblx0XHQgKiBvZiB0aGUgcGVyZm9ybWFuY2UtY3JpdGljYWwge0BsaW5rIExleGVyQVROQ29uZmlnLy9oYXNoQ29kZX0gb3BlcmF0aW9uXG5cdFx0ICovXG5cdFx0dGhpcy5jYWNoZWRIYXNoQ29kZSA9IGhhc2hTdHVmZihsZXhlckFjdGlvbnMpOyAvLyBcIlwiLmpvaW4oW3N0cihsYSkgZm9yIGxhIGluXG5cdFx0Ly8gbGV4ZXJBY3Rpb25zXSkpXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cblxuXHQvKipcblx0ICogQ3JlYXRlcyBhIHtAbGluayBMZXhlckFjdGlvbkV4ZWN1dG9yfSB3aGljaCBlbmNvZGVzIHRoZSBjdXJyZW50IG9mZnNldFxuXHQgKiBmb3IgcG9zaXRpb24tZGVwZW5kZW50IGxleGVyIGFjdGlvbnMuXG5cdCAqXG5cdCAqIDxwPk5vcm1hbGx5LCB3aGVuIHRoZSBleGVjdXRvciBlbmNvdW50ZXJzIGxleGVyIGFjdGlvbnMgd2hlcmVcblx0ICoge0BsaW5rIExleGVyQWN0aW9uLy9pc1Bvc2l0aW9uRGVwZW5kZW50fSByZXR1cm5zIHtAY29kZSB0cnVlfSwgaXQgY2FsbHNcblx0ICoge0BsaW5rIEludFN0cmVhbS8vc2Vla30gb24gdGhlIGlucHV0IHtAbGluayBDaGFyU3RyZWFtfSB0byBzZXQgdGhlIGlucHV0XG5cdCAqIHBvc2l0aW9uIHRvIHRoZSA8ZW0+ZW5kPC9lbT4gb2YgdGhlIGN1cnJlbnQgdG9rZW4uIFRoaXMgYmVoYXZpb3IgcHJvdmlkZXNcblx0ICogZm9yIGVmZmljaWVudCBERkEgcmVwcmVzZW50YXRpb24gb2YgbGV4ZXIgYWN0aW9ucyB3aGljaCBhcHBlYXIgYXQgdGhlIGVuZFxuXHQgKiBvZiBhIGxleGVyIHJ1bGUsIGV2ZW4gd2hlbiB0aGUgbGV4ZXIgcnVsZSBtYXRjaGVzIGEgdmFyaWFibGUgbnVtYmVyIG9mXG5cdCAqIGNoYXJhY3RlcnMuPC9wPlxuXHQgKlxuXHQgKiA8cD5QcmlvciB0byB0cmF2ZXJzaW5nIGEgbWF0Y2ggdHJhbnNpdGlvbiBpbiB0aGUgQVROLCB0aGUgY3VycmVudCBvZmZzZXRcblx0ICogZnJvbSB0aGUgdG9rZW4gc3RhcnQgaW5kZXggaXMgYXNzaWduZWQgdG8gYWxsIHBvc2l0aW9uLWRlcGVuZGVudCBsZXhlclxuXHQgKiBhY3Rpb25zIHdoaWNoIGhhdmUgbm90IGFscmVhZHkgYmVlbiBhc3NpZ25lZCBhIGZpeGVkIG9mZnNldC4gQnkgc3RvcmluZ1xuXHQgKiB0aGUgb2Zmc2V0cyByZWxhdGl2ZSB0byB0aGUgdG9rZW4gc3RhcnQgaW5kZXgsIHRoZSBERkEgcmVwcmVzZW50YXRpb24gb2Zcblx0ICogbGV4ZXIgYWN0aW9ucyB3aGljaCBhcHBlYXIgaW4gdGhlIG1pZGRsZSBvZiB0b2tlbnMgcmVtYWlucyBlZmZpY2llbnQgZHVlXG5cdCAqIHRvIHNoYXJpbmcgYW1vbmcgdG9rZW5zIG9mIHRoZSBzYW1lIGxlbmd0aCwgcmVnYXJkbGVzcyBvZiB0aGVpciBhYnNvbHV0ZVxuXHQgKiBwb3NpdGlvbiBpbiB0aGUgaW5wdXQgc3RyZWFtLjwvcD5cblx0ICpcblx0ICogPHA+SWYgdGhlIGN1cnJlbnQgZXhlY3V0b3IgYWxyZWFkeSBoYXMgb2Zmc2V0cyBhc3NpZ25lZCB0byBhbGxcblx0ICogcG9zaXRpb24tZGVwZW5kZW50IGxleGVyIGFjdGlvbnMsIHRoZSBtZXRob2QgcmV0dXJucyB7QGNvZGUgdGhpc30uPC9wPlxuXHQgKlxuXHQgKiBAcGFyYW0gb2Zmc2V0IFRoZSBjdXJyZW50IG9mZnNldCB0byBhc3NpZ24gdG8gYWxsIHBvc2l0aW9uLWRlcGVuZGVudFxuXHQgKiBsZXhlciBhY3Rpb25zIHdoaWNoIGRvIG5vdCBhbHJlYWR5IGhhdmUgb2Zmc2V0cyBhc3NpZ25lZC5cblx0ICpcblx0ICogQHJldHVybiB7TGV4ZXJBY3Rpb25FeGVjdXRvcn0gQSB7QGxpbmsgTGV4ZXJBY3Rpb25FeGVjdXRvcn0gd2hpY2ggc3RvcmVzIGlucHV0IHN0cmVhbSBvZmZzZXRzXG5cdCAqIGZvciBhbGwgcG9zaXRpb24tZGVwZW5kZW50IGxleGVyIGFjdGlvbnMuXG5cdCAqL1xuXHRmaXhPZmZzZXRCZWZvcmVNYXRjaChvZmZzZXQpIHtcblx0XHRsZXQgdXBkYXRlZExleGVyQWN0aW9ucyA9IG51bGw7XG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmxleGVyQWN0aW9ucy5sZW5ndGg7IGkrKykge1xuXHRcdFx0aWYgKHRoaXMubGV4ZXJBY3Rpb25zW2ldLmlzUG9zaXRpb25EZXBlbmRlbnQgJiZcblx0XHRcdFx0XHQhKHRoaXMubGV4ZXJBY3Rpb25zW2ldIGluc3RhbmNlb2YgTGV4ZXJJbmRleGVkQ3VzdG9tQWN0aW9uKSkge1xuXHRcdFx0XHRpZiAodXBkYXRlZExleGVyQWN0aW9ucyA9PT0gbnVsbCkge1xuXHRcdFx0XHRcdHVwZGF0ZWRMZXhlckFjdGlvbnMgPSB0aGlzLmxleGVyQWN0aW9ucy5jb25jYXQoW10pO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHVwZGF0ZWRMZXhlckFjdGlvbnNbaV0gPSBuZXcgTGV4ZXJJbmRleGVkQ3VzdG9tQWN0aW9uKG9mZnNldCxcblx0XHRcdFx0XHRcdHRoaXMubGV4ZXJBY3Rpb25zW2ldKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0aWYgKHVwZGF0ZWRMZXhlckFjdGlvbnMgPT09IG51bGwpIHtcblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZXR1cm4gbmV3IExleGVyQWN0aW9uRXhlY3V0b3IodXBkYXRlZExleGVyQWN0aW9ucyk7XG5cdFx0fVxuXHR9XG5cblx0LyoqXG5cdCAqIEV4ZWN1dGUgdGhlIGFjdGlvbnMgZW5jYXBzdWxhdGVkIGJ5IHRoaXMgZXhlY3V0b3Igd2l0aGluIHRoZSBjb250ZXh0IG9mIGFcblx0ICogcGFydGljdWxhciB7QGxpbmsgTGV4ZXJ9LlxuXHQgKlxuXHQgKiA8cD5UaGlzIG1ldGhvZCBjYWxscyB7QGxpbmsgSW50U3RyZWFtLy9zZWVrfSB0byBzZXQgdGhlIHBvc2l0aW9uIG9mIHRoZVxuXHQgKiB7QGNvZGUgaW5wdXR9IHtAbGluayBDaGFyU3RyZWFtfSBwcmlvciB0byBjYWxsaW5nXG5cdCAqIHtAbGluayBMZXhlckFjdGlvbi8vZXhlY3V0ZX0gb24gYSBwb3NpdGlvbi1kZXBlbmRlbnQgYWN0aW9uLiBCZWZvcmUgdGhlXG5cdCAqIG1ldGhvZCByZXR1cm5zLCB0aGUgaW5wdXQgcG9zaXRpb24gd2lsbCBiZSByZXN0b3JlZCB0byB0aGUgc2FtZSBwb3NpdGlvblxuXHQgKiBpdCB3YXMgaW4gd2hlbiB0aGUgbWV0aG9kIHdhcyBpbnZva2VkLjwvcD5cblx0ICpcblx0ICogQHBhcmFtIGxleGVyIFRoZSBsZXhlciBpbnN0YW5jZS5cblx0ICogQHBhcmFtIGlucHV0IFRoZSBpbnB1dCBzdHJlYW0gd2hpY2ggaXMgdGhlIHNvdXJjZSBmb3IgdGhlIGN1cnJlbnQgdG9rZW4uXG5cdCAqIFdoZW4gdGhpcyBtZXRob2QgaXMgY2FsbGVkLCB0aGUgY3VycmVudCB7QGxpbmsgSW50U3RyZWFtLy9pbmRleH0gZm9yXG5cdCAqIHtAY29kZSBpbnB1dH0gc2hvdWxkIGJlIHRoZSBzdGFydCBvZiB0aGUgZm9sbG93aW5nIHRva2VuLCBpLmUuIDFcblx0ICogY2hhcmFjdGVyIHBhc3QgdGhlIGVuZCBvZiB0aGUgY3VycmVudCB0b2tlbi5cblx0ICogQHBhcmFtIHN0YXJ0SW5kZXggVGhlIHRva2VuIHN0YXJ0IGluZGV4LiBUaGlzIHZhbHVlIG1heSBiZSBwYXNzZWQgdG9cblx0ICoge0BsaW5rIEludFN0cmVhbS8vc2Vla30gdG8gc2V0IHRoZSB7QGNvZGUgaW5wdXR9IHBvc2l0aW9uIHRvIHRoZSBiZWdpbm5pbmdcblx0ICogb2YgdGhlIHRva2VuLlxuXHQgKi9cblx0ZXhlY3V0ZShsZXhlciwgaW5wdXQsIHN0YXJ0SW5kZXgpIHtcblx0XHRsZXQgcmVxdWlyZXNTZWVrID0gZmFsc2U7XG5cdFx0Y29uc3Qgc3RvcEluZGV4ID0gaW5wdXQuaW5kZXg7XG5cdFx0dHJ5IHtcblx0XHRcdGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5sZXhlckFjdGlvbnMubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0bGV0IGxleGVyQWN0aW9uID0gdGhpcy5sZXhlckFjdGlvbnNbaV07XG5cdFx0XHRcdGlmIChsZXhlckFjdGlvbiBpbnN0YW5jZW9mIExleGVySW5kZXhlZEN1c3RvbUFjdGlvbikge1xuXHRcdFx0XHRcdGNvbnN0IG9mZnNldCA9IGxleGVyQWN0aW9uLm9mZnNldDtcblx0XHRcdFx0XHRpbnB1dC5zZWVrKHN0YXJ0SW5kZXggKyBvZmZzZXQpO1xuXHRcdFx0XHRcdGxleGVyQWN0aW9uID0gbGV4ZXJBY3Rpb24uYWN0aW9uO1xuXHRcdFx0XHRcdHJlcXVpcmVzU2VlayA9IChzdGFydEluZGV4ICsgb2Zmc2V0KSAhPT0gc3RvcEluZGV4O1xuXHRcdFx0XHR9IGVsc2UgaWYgKGxleGVyQWN0aW9uLmlzUG9zaXRpb25EZXBlbmRlbnQpIHtcblx0XHRcdFx0XHRpbnB1dC5zZWVrKHN0b3BJbmRleCk7XG5cdFx0XHRcdFx0cmVxdWlyZXNTZWVrID0gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdFx0bGV4ZXJBY3Rpb24uZXhlY3V0ZShsZXhlcik7XG5cdFx0XHR9XG5cdFx0fSBmaW5hbGx5IHtcblx0XHRcdGlmIChyZXF1aXJlc1NlZWspIHtcblx0XHRcdFx0aW5wdXQuc2VlayhzdG9wSW5kZXgpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdGhhc2hDb2RlKCkge1xuXHRcdHJldHVybiB0aGlzLmNhY2hlZEhhc2hDb2RlO1xuXHR9XG5cblx0dXBkYXRlSGFzaENvZGUoaGFzaCkge1xuXHRcdGhhc2gudXBkYXRlKHRoaXMuY2FjaGVkSGFzaENvZGUpO1xuXHR9XG5cblx0ZXF1YWxzKG90aGVyKSB7XG5cdFx0aWYgKHRoaXMgPT09IG90aGVyKSB7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9IGVsc2UgaWYgKCEob3RoZXIgaW5zdGFuY2VvZiBMZXhlckFjdGlvbkV4ZWN1dG9yKSkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH0gZWxzZSBpZiAodGhpcy5jYWNoZWRIYXNoQ29kZSAhPSBvdGhlci5jYWNoZWRIYXNoQ29kZSkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH0gZWxzZSBpZiAodGhpcy5sZXhlckFjdGlvbnMubGVuZ3RoICE9IG90aGVyLmxleGVyQWN0aW9ucy5sZW5ndGgpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Y29uc3QgbnVtQWN0aW9ucyA9IHRoaXMubGV4ZXJBY3Rpb25zLmxlbmd0aFxuXHRcdFx0Zm9yIChsZXQgaWR4ID0gMDsgaWR4IDwgbnVtQWN0aW9uczsgKytpZHgpIHtcblx0XHRcdFx0aWYgKCF0aGlzLmxleGVyQWN0aW9uc1tpZHhdLmVxdWFscyhvdGhlci5sZXhlckFjdGlvbnNbaWR4XSkpIHtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblx0fVxuXG5cdC8qKlxuXHQgKiBDcmVhdGVzIGEge0BsaW5rIExleGVyQWN0aW9uRXhlY3V0b3J9IHdoaWNoIGV4ZWN1dGVzIHRoZSBhY3Rpb25zIGZvclxuXHQgKiB0aGUgaW5wdXQge0Bjb2RlIGxleGVyQWN0aW9uRXhlY3V0b3J9IGZvbGxvd2VkIGJ5IGEgc3BlY2lmaWVkXG5cdCAqIHtAY29kZSBsZXhlckFjdGlvbn0uXG5cdCAqXG5cdCAqIEBwYXJhbSBsZXhlckFjdGlvbkV4ZWN1dG9yIFRoZSBleGVjdXRvciBmb3IgYWN0aW9ucyBhbHJlYWR5IHRyYXZlcnNlZCBieVxuXHQgKiB0aGUgbGV4ZXIgd2hpbGUgbWF0Y2hpbmcgYSB0b2tlbiB3aXRoaW4gYSBwYXJ0aWN1bGFyXG5cdCAqIHtAbGluayBMZXhlckFUTkNvbmZpZ30uIElmIHRoaXMgaXMge0Bjb2RlIG51bGx9LCB0aGUgbWV0aG9kIGJlaGF2ZXMgYXNcblx0ICogdGhvdWdoIGl0IHdlcmUgYW4gZW1wdHkgZXhlY3V0b3IuXG5cdCAqIEBwYXJhbSBsZXhlckFjdGlvbiBUaGUgbGV4ZXIgYWN0aW9uIHRvIGV4ZWN1dGUgYWZ0ZXIgdGhlIGFjdGlvbnNcblx0ICogc3BlY2lmaWVkIGluIHtAY29kZSBsZXhlckFjdGlvbkV4ZWN1dG9yfS5cblx0ICpcblx0ICogQHJldHVybiB7TGV4ZXJBY3Rpb25FeGVjdXRvcn0gQSB7QGxpbmsgTGV4ZXJBY3Rpb25FeGVjdXRvcn0gZm9yIGV4ZWN1dGluZyB0aGUgY29tYmluZSBhY3Rpb25zXG5cdCAqIG9mIHtAY29kZSBsZXhlckFjdGlvbkV4ZWN1dG9yfSBhbmQge0Bjb2RlIGxleGVyQWN0aW9ufS5cblx0ICovXG5cdHN0YXRpYyBhcHBlbmQobGV4ZXJBY3Rpb25FeGVjdXRvciwgbGV4ZXJBY3Rpb24pIHtcblx0XHRpZiAobGV4ZXJBY3Rpb25FeGVjdXRvciA9PT0gbnVsbCkge1xuXHRcdFx0cmV0dXJuIG5ldyBMZXhlckFjdGlvbkV4ZWN1dG9yKFsgbGV4ZXJBY3Rpb24gXSk7XG5cdFx0fVxuXHRcdGNvbnN0IGxleGVyQWN0aW9ucyA9IGxleGVyQWN0aW9uRXhlY3V0b3IubGV4ZXJBY3Rpb25zLmNvbmNhdChbIGxleGVyQWN0aW9uIF0pO1xuXHRcdHJldHVybiBuZXcgTGV4ZXJBY3Rpb25FeGVjdXRvcihsZXhlckFjdGlvbnMpO1xuXHR9XG59XG5cblxubW9kdWxlLmV4cG9ydHMgPSBMZXhlckFjdGlvbkV4ZWN1dG9yO1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/atn/LexerActionExecutor.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/atn/ParserATNSimulator.js":
/*!***************************************************************************************************!*\
  !*** ../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/atn/ParserATNSimulator.js ***!
  \***************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nconst Utils = __webpack_require__(/*! ./../Utils */ \"(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/Utils.js\");\nconst {Set, BitSet, DoubleDict} = Utils;\n\nconst ATN = __webpack_require__(/*! ./ATN */ \"(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/atn/ATN.js\");\nconst {ATNState, RuleStopState} = __webpack_require__(/*! ./ATNState */ \"(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/atn/ATNState.js\");\n\nconst {ATNConfig} = __webpack_require__(/*! ./ATNConfig */ \"(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/atn/ATNConfig.js\");\nconst {ATNConfigSet} = __webpack_require__(/*! ./ATNConfigSet */ \"(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/atn/ATNConfigSet.js\");\nconst {Token} = __webpack_require__(/*! ./../Token */ \"(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/Token.js\");\nconst {DFAState, PredPrediction} = __webpack_require__(/*! ./../dfa/DFAState */ \"(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/dfa/DFAState.js\");\nconst ATNSimulator = __webpack_require__(/*! ./ATNSimulator */ \"(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/atn/ATNSimulator.js\");\nconst PredictionMode = __webpack_require__(/*! ./PredictionMode */ \"(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/atn/PredictionMode.js\");\nconst RuleContext = __webpack_require__(/*! ./../RuleContext */ \"(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/RuleContext.js\");\nconst ParserRuleContext = __webpack_require__(/*! ./../ParserRuleContext */ \"(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/ParserRuleContext.js\");\nconst {SemanticContext} = __webpack_require__(/*! ./SemanticContext */ \"(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/atn/SemanticContext.js\");\nconst {PredictionContext} = __webpack_require__(/*! ./../PredictionContext */ \"(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/PredictionContext.js\");\nconst {Interval} = __webpack_require__(/*! ./../IntervalSet */ \"(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/IntervalSet.js\");\nconst {Transition, SetTransition, NotSetTransition, RuleTransition, ActionTransition} = __webpack_require__(/*! ./Transition */ \"(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/atn/Transition.js\");\nconst {NoViableAltException} = __webpack_require__(/*! ./../error/Errors */ \"(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/error/Errors.js\");\nconst {SingletonPredictionContext, predictionContextFromRuleContext} = __webpack_require__(/*! ./../PredictionContext */ \"(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/PredictionContext.js\");\n\n\n/**\n * The embodiment of the adaptive LL(*), ALL(*), parsing strategy.\n *\n * <p>\n * The basic complexity of the adaptive strategy makes it harder to understand.\n * We begin with ATN simulation to build paths in a DFA. Subsequent prediction\n * requests go through the DFA first. If they reach a state without an edge for\n * the current symbol, the algorithm fails over to the ATN simulation to\n * complete the DFA path for the current input (until it finds a conflict state\n * or uniquely predicting state).</p>\n *\n * <p>\n * All of that is done without using the outer context because we want to create\n * a DFA that is not dependent upon the rule invocation stack when we do a\n * prediction. One DFA works in all contexts. We avoid using context not\n * necessarily because it's slower, although it can be, but because of the DFA\n * caching problem. The closure routine only considers the rule invocation stack\n * created during prediction beginning in the decision rule. For example, if\n * prediction occurs without invoking another rule's ATN, there are no context\n * stacks in the configurations. When lack of context leads to a conflict, we\n * don't know if it's an ambiguity or a weakness in the strong LL(*) parsing\n * strategy (versus full LL(*)).</p>\n *\n * <p>\n * When SLL yields a configuration set with conflict, we rewind the input and\n * retry the ATN simulation, this time using full outer context without adding\n * to the DFA. Configuration context stacks will be the full invocation stacks\n * from the start rule. If we get a conflict using full context, then we can\n * definitively say we have a true ambiguity for that input sequence. If we\n * don't get a conflict, it implies that the decision is sensitive to the outer\n * context. (It is not context-sensitive in the sense of context-sensitive\n * grammars.)</p>\n *\n * <p>\n * The next time we reach this DFA state with an SLL conflict, through DFA\n * simulation, we will again retry the ATN simulation using full context mode.\n * This is slow because we can't save the results and have to \"interpret\" the\n * ATN each time we get that input.</p>\n *\n * <p>\n * <strong>CACHING FULL CONTEXT PREDICTIONS</strong></p>\n *\n * <p>\n * We could cache results from full context to predicted alternative easily and\n * that saves a lot of time but doesn't work in presence of predicates. The set\n * of visible predicates from the ATN start state changes depending on the\n * context, because closure can fall off the end of a rule. I tried to cache\n * tuples (stack context, semantic context, predicted alt) but it was slower\n * than interpreting and much more complicated. Also required a huge amount of\n * memory. The goal is not to create the world's fastest parser anyway. I'd like\n * to keep this algorithm simple. By launching multiple threads, we can improve\n * the speed of parsing across a large number of files.</p>\n *\n * <p>\n * There is no strict ordering between the amount of input used by SLL vs LL,\n * which makes it really hard to build a cache for full context. Let's say that\n * we have input A B C that leads to an SLL conflict with full context X. That\n * implies that using X we might only use A B but we could also use A B C D to\n * resolve conflict. Input A B C D could predict alternative 1 in one position\n * in the input and A B C E could predict alternative 2 in another position in\n * input. The conflicting SLL configurations could still be non-unique in the\n * full context prediction, which would lead us to requiring more input than the\n * original A B C.\tTo make a\tprediction cache work, we have to track\tthe exact\n * input\tused during the previous prediction. That amounts to a cache that maps\n * X to a specific DFA for that context.</p>\n *\n * <p>\n * Something should be done for left-recursive expression predictions. They are\n * likely LL(1) + pred eval. Easier to do the whole SLL unless error and retry\n * with full LL thing Sam does.</p>\n *\n * <p>\n * <strong>AVOIDING FULL CONTEXT PREDICTION</strong></p>\n *\n * <p>\n * We avoid doing full context retry when the outer context is empty, we did not\n * dip into the outer context by falling off the end of the decision state rule,\n * or when we force SLL mode.</p>\n *\n * <p>\n * As an example of the not dip into outer context case, consider as super\n * constructor calls versus function calls. One grammar might look like\n * this:</p>\n *\n * <pre>\n * ctorBody\n *   : '{' superCall? stat* '}'\n *   ;\n * </pre>\n *\n * <p>\n * Or, you might see something like</p>\n *\n * <pre>\n * stat\n *   : superCall ';'\n *   | expression ';'\n *   | ...\n *   ;\n * </pre>\n *\n * <p>\n * In both cases I believe that no closure operations will dip into the outer\n * context. In the first case ctorBody in the worst case will stop at the '}'.\n * In the 2nd case it should stop at the ';'. Both cases should stay within the\n * entry rule and not dip into the outer context.</p>\n *\n * <p>\n * <strong>PREDICATES</strong></p>\n *\n * <p>\n * Predicates are always evaluated if present in either SLL or LL both. SLL and\n * LL simulation deals with predicates differently. SLL collects predicates as\n * it performs closure operations like ANTLR v3 did. It delays predicate\n * evaluation until it reaches and accept state. This allows us to cache the SLL\n * ATN simulation whereas, if we had evaluated predicates on-the-fly during\n * closure, the DFA state configuration sets would be different and we couldn't\n * build up a suitable DFA.</p>\n *\n * <p>\n * When building a DFA accept state during ATN simulation, we evaluate any\n * predicates and return the sole semantically valid alternative. If there is\n * more than 1 alternative, we report an ambiguity. If there are 0 alternatives,\n * we throw an exception. Alternatives without predicates act like they have\n * true predicates. The simple way to think about it is to strip away all\n * alternatives with false predicates and choose the minimum alternative that\n * remains.</p>\n *\n * <p>\n * When we start in the DFA and reach an accept state that's predicated, we test\n * those and return the minimum semantically viable alternative. If no\n * alternatives are viable, we throw an exception.</p>\n *\n * <p>\n * During full LL ATN simulation, closure always evaluates predicates and\n * on-the-fly. This is crucial to reducing the configuration set size during\n * closure. It hits a landmine when parsing with the Java grammar, for example,\n * without this on-the-fly evaluation.</p>\n *\n * <p>\n * <strong>SHARING DFA</strong></p>\n *\n * <p>\n * All instances of the same parser share the same decision DFAs through a\n * static field. Each instance gets its own ATN simulator but they share the\n * same {@link //decisionToDFA} field. They also share a\n * {@link PredictionContextCache} object that makes sure that all\n * {@link PredictionContext} objects are shared among the DFA states. This makes\n * a big size difference.</p>\n *\n * <p>\n * <strong>THREAD SAFETY</strong></p>\n *\n * <p>\n * The {@link ParserATNSimulator} locks on the {@link //decisionToDFA} field when\n * it adds a new DFA object to that array. {@link //addDFAEdge}\n * locks on the DFA for the current decision when setting the\n * {@link DFAState//edges} field. {@link //addDFAState} locks on\n * the DFA for the current decision when looking up a DFA state to see if it\n * already exists. We must make sure that all requests to add DFA states that\n * are equivalent result in the same shared DFA object. This is because lots of\n * threads will be trying to update the DFA at once. The\n * {@link //addDFAState} method also locks inside the DFA lock\n * but this time on the shared context cache when it rebuilds the\n * configurations' {@link PredictionContext} objects using cached\n * subgraphs/nodes. No other locking occurs, even during DFA simulation. This is\n * safe as long as we can guarantee that all threads referencing\n * {@code s.edge[t]} get the same physical target {@link DFAState}, or\n * {@code null}. Once into the DFA, the DFA simulation does not reference the\n * {@link DFA//states} map. It follows the {@link DFAState//edges} field to new\n * targets. The DFA simulator will either find {@link DFAState//edges} to be\n * {@code null}, to be non-{@code null} and {@code dfa.edges[t]} null, or\n * {@code dfa.edges[t]} to be non-null. The\n * {@link //addDFAEdge} method could be racing to set the field\n * but in either case the DFA simulator works; if {@code null}, and requests ATN\n * simulation. It could also race trying to get {@code dfa.edges[t]}, but either\n * way it will work because it's not doing a test and set operation.</p>\n *\n * <p>\n * <strong>Starting with SLL then failing to combined SLL/LL (Two-Stage\n * Parsing)</strong></p>\n *\n * <p>\n * Sam pointed out that if SLL does not give a syntax error, then there is no\n * point in doing full LL, which is slower. We only have to try LL if we get a\n * syntax error. For maximum speed, Sam starts the parser set to pure SLL\n * mode with the {@link BailErrorStrategy}:</p>\n *\n * <pre>\n * parser.{@link Parser//getInterpreter() getInterpreter()}.{@link //setPredictionMode setPredictionMode}{@code (}{@link PredictionMode//SLL}{@code )};\n * parser.{@link Parser//setErrorHandler setErrorHandler}(new {@link BailErrorStrategy}());\n * </pre>\n *\n * <p>\n * If it does not get a syntax error, then we're done. If it does get a syntax\n * error, we need to retry with the combined SLL/LL strategy.</p>\n *\n * <p>\n * The reason this works is as follows. If there are no SLL conflicts, then the\n * grammar is SLL (at least for that input set). If there is an SLL conflict,\n * the full LL analysis must yield a set of viable alternatives which is a\n * subset of the alternatives reported by SLL. If the LL set is a singleton,\n * then the grammar is LL but not SLL. If the LL set is the same size as the SLL\n * set, the decision is SLL. If the LL set has size &gt; 1, then that decision\n * is truly ambiguous on the current input. If the LL set is smaller, then the\n * SLL conflict resolution might choose an alternative that the full LL would\n * rule out as a possibility based upon better context information. If that's\n * the case, then the SLL parse will definitely get an error because the full LL\n * analysis says it's not viable. If SLL conflict resolution chooses an\n * alternative within the LL set, them both SLL and LL would choose the same\n * alternative because they both choose the minimum of multiple conflicting\n * alternatives.</p>\n *\n * <p>\n * Let's say we have a set of SLL conflicting alternatives {@code {1, 2, 3}} and\n * a smaller LL set called <em>s</em>. If <em>s</em> is {@code {2, 3}}, then SLL\n * parsing will get an error because SLL will pursue alternative 1. If\n * <em>s</em> is {@code {1, 2}} or {@code {1, 3}} then both SLL and LL will\n * choose the same alternative because alternative one is the minimum of either\n * set. If <em>s</em> is {@code {2}} or {@code {3}} then SLL will get a syntax\n * error. If <em>s</em> is {@code {1}} then SLL will succeed.</p>\n *\n * <p>\n * Of course, if the input is invalid, then we will get an error for sure in\n * both SLL and LL parsing. Erroneous input will therefore require 2 passes over\n * the input.</p>\n */\nclass ParserATNSimulator extends ATNSimulator {\n    constructor(parser, atn, decisionToDFA, sharedContextCache) {\n        super(atn, sharedContextCache);\n        this.parser = parser;\n        this.decisionToDFA = decisionToDFA;\n        // SLL, LL, or LL + exact ambig detection?//\n        this.predictionMode = PredictionMode.LL;\n        // LAME globals to avoid parameters!!!!! I need these down deep in predTransition\n        this._input = null;\n        this._startIndex = 0;\n        this._outerContext = null;\n        this._dfa = null;\n        /**\n         * Each prediction operation uses a cache for merge of prediction contexts.\n         *  Don't keep around as it wastes huge amounts of memory. DoubleKeyMap\n         *  isn't synchronized but we're ok since two threads shouldn't reuse same\n         *  parser/atnsim object because it can only handle one input at a time.\n         *  This maps graphs a and b to merged result c. (a,b)&rarr;c. We can avoid\n         *  the merge if we ever see a and b again.  Note that (b,a)&rarr;c should\n         *  also be examined during cache lookup.\n         */\n        this.mergeCache = null;\n        this.debug = false;\n        this.debug_closure = false;\n        this.debug_add = false;\n        this.debug_list_atn_decisions = false;\n        this.dfa_debug = false;\n        this.retry_debug = false;\n    }\n\n    reset() {}\n\n    adaptivePredict(input, decision, outerContext) {\n        if (this.debug || this.debug_list_atn_decisions) {\n            console.log(\"adaptivePredict decision \" + decision +\n                                   \" exec LA(1)==\" + this.getLookaheadName(input) +\n                                   \" line \" + input.LT(1).line + \":\" +\n                                   input.LT(1).column);\n        }\n        this._input = input;\n        this._startIndex = input.index;\n        this._outerContext = outerContext;\n\n        const dfa = this.decisionToDFA[decision];\n        this._dfa = dfa;\n        const m = input.mark();\n        const index = input.index;\n\n        // Now we are certain to have a specific decision's DFA\n        // But, do we still need an initial state?\n        try {\n            let s0;\n            if (dfa.precedenceDfa) {\n                // the start state for a precedence DFA depends on the current\n                // parser precedence, and is provided by a DFA method.\n                s0 = dfa.getPrecedenceStartState(this.parser.getPrecedence());\n            } else {\n                // the start state for a \"regular\" DFA is just s0\n                s0 = dfa.s0;\n            }\n            if (s0===null) {\n                if (outerContext===null) {\n                    outerContext = RuleContext.EMPTY;\n                }\n                if (this.debug || this.debug_list_atn_decisions) {\n                    console.log(\"predictATN decision \" + dfa.decision +\n                                       \" exec LA(1)==\" + this.getLookaheadName(input) +\n                                       \", outerContext=\" + outerContext.toString(this.parser.ruleNames));\n                }\n\n                const fullCtx = false;\n                let s0_closure = this.computeStartState(dfa.atnStartState, RuleContext.EMPTY, fullCtx);\n\n                if( dfa.precedenceDfa) {\n                    // If this is a precedence DFA, we use applyPrecedenceFilter\n                    // to convert the computed start state to a precedence start\n                    // state. We then use DFA.setPrecedenceStartState to set the\n                    // appropriate start state for the precedence level rather\n                    // than simply setting DFA.s0.\n                    //\n                    dfa.s0.configs = s0_closure; // not used for prediction but useful to know start configs anyway\n                    s0_closure = this.applyPrecedenceFilter(s0_closure);\n                    s0 = this.addDFAState(dfa, new DFAState(null, s0_closure));\n                    dfa.setPrecedenceStartState(this.parser.getPrecedence(), s0);\n                } else {\n                    s0 = this.addDFAState(dfa, new DFAState(null, s0_closure));\n                    dfa.s0 = s0;\n                }\n            }\n            const alt = this.execATN(dfa, s0, input, index, outerContext);\n            if (this.debug) {\n                console.log(\"DFA after predictATN: \" + dfa.toString(this.parser.literalNames, this.parser.symbolicNames));\n            }\n            return alt;\n        } finally {\n            this._dfa = null;\n            this.mergeCache = null; // wack cache after each prediction\n            input.seek(index);\n            input.release(m);\n        }\n    }\n\n    /**\n     * Performs ATN simulation to compute a predicted alternative based\n     *  upon the remaining input, but also updates the DFA cache to avoid\n     *  having to traverse the ATN again for the same input sequence.\n     *\n     * There are some key conditions we're looking for after computing a new\n     * set of ATN configs (proposed DFA state):\n     *       if the set is empty, there is no viable alternative for current symbol\n     *       does the state uniquely predict an alternative?\n     *       does the state have a conflict that would prevent us from\n     *         putting it on the work list?\n     *\n     * We also have some key operations to do:\n     *       add an edge from previous DFA state to potentially new DFA state, D,\n     *         upon current symbol but only if adding to work list, which means in all\n     *         cases except no viable alternative (and possibly non-greedy decisions?)\n     *       collecting predicates and adding semantic context to DFA accept states\n     *       adding rule context to context-sensitive DFA accept states\n     *       consuming an input symbol\n     *       reporting a conflict\n     *       reporting an ambiguity\n     *       reporting a context sensitivity\n     *       reporting insufficient predicates\n     *\n     * cover these cases:\n     *    dead end\n     *    single alt\n     *    single alt + preds\n     *    conflict\n     *    conflict + preds\n     *\n     */\n    execATN(dfa, s0, input, startIndex, outerContext ) {\n        if (this.debug || this.debug_list_atn_decisions) {\n            console.log(\"execATN decision \" + dfa.decision +\n                    \" exec LA(1)==\" + this.getLookaheadName(input) +\n                    \" line \" + input.LT(1).line + \":\" + input.LT(1).column);\n        }\n        let alt;\n        let previousD = s0;\n\n        if (this.debug) {\n            console.log(\"s0 = \" + s0);\n        }\n        let t = input.LA(1);\n        while(true) { // while more work\n            let D = this.getExistingTargetState(previousD, t);\n            if(D===null) {\n                D = this.computeTargetState(dfa, previousD, t);\n            }\n            if(D===ATNSimulator.ERROR) {\n                // if any configs in previous dipped into outer context, that\n                // means that input up to t actually finished entry rule\n                // at least for SLL decision. Full LL doesn't dip into outer\n                // so don't need special case.\n                // We will get an error no matter what so delay until after\n                // decision; better error message. Also, no reachable target\n                // ATN states in SLL implies LL will also get nowhere.\n                // If conflict in states that dip out, choose min since we\n                // will get error no matter what.\n                const e = this.noViableAlt(input, outerContext, previousD.configs, startIndex);\n                input.seek(startIndex);\n                alt = this.getSynValidOrSemInvalidAltThatFinishedDecisionEntryRule(previousD.configs, outerContext);\n                if(alt!==ATN.INVALID_ALT_NUMBER) {\n                    return alt;\n                } else {\n                    throw e;\n                }\n            }\n            if(D.requiresFullContext && this.predictionMode !== PredictionMode.SLL) {\n                // IF PREDS, MIGHT RESOLVE TO SINGLE ALT => SLL (or syntax error)\n                let conflictingAlts = null;\n                if (D.predicates!==null) {\n                    if (this.debug) {\n                        console.log(\"DFA state has preds in DFA sim LL failover\");\n                    }\n                    const conflictIndex = input.index;\n                    if(conflictIndex !== startIndex) {\n                        input.seek(startIndex);\n                    }\n                    conflictingAlts = this.evalSemanticContext(D.predicates, outerContext, true);\n                    if (conflictingAlts.length===1) {\n                        if(this.debug) {\n                            console.log(\"Full LL avoided\");\n                        }\n                        return conflictingAlts.minValue();\n                    }\n                    if (conflictIndex !== startIndex) {\n                        // restore the index so reporting the fallback to full\n                        // context occurs with the index at the correct spot\n                        input.seek(conflictIndex);\n                    }\n                }\n                if (this.dfa_debug) {\n                    console.log(\"ctx sensitive state \" + outerContext +\" in \" + D);\n                }\n                const fullCtx = true;\n                const s0_closure = this.computeStartState(dfa.atnStartState, outerContext, fullCtx);\n                this.reportAttemptingFullContext(dfa, conflictingAlts, D.configs, startIndex, input.index);\n                alt = this.execATNWithFullContext(dfa, D, s0_closure, input, startIndex, outerContext);\n                return alt;\n            }\n            if (D.isAcceptState) {\n                if (D.predicates===null) {\n                    return D.prediction;\n                }\n                const stopIndex = input.index;\n                input.seek(startIndex);\n                const alts = this.evalSemanticContext(D.predicates, outerContext, true);\n                if (alts.length===0) {\n                    throw this.noViableAlt(input, outerContext, D.configs, startIndex);\n                } else if (alts.length===1) {\n                    return alts.minValue();\n                } else {\n                    // report ambiguity after predicate evaluation to make sure the correct set of ambig alts is reported.\n                    this.reportAmbiguity(dfa, D, startIndex, stopIndex, false, alts, D.configs);\n                    return alts.minValue();\n                }\n            }\n            previousD = D;\n\n            if (t !== Token.EOF) {\n                input.consume();\n                t = input.LA(1);\n            }\n        }\n    }\n\n    /**\n     * Get an existing target state for an edge in the DFA. If the target state\n     * for the edge has not yet been computed or is otherwise not available,\n     * this method returns {@code null}.\n     *\n     * @param previousD The current DFA state\n     * @param t The next input symbol\n     * @return The existing target DFA state for the given input symbol\n     * {@code t}, or {@code null} if the target state for this edge is not\n     * already cached\n     */\n    getExistingTargetState(previousD, t) {\n        const edges = previousD.edges;\n        if (edges===null) {\n            return null;\n        } else {\n            return edges[t + 1] || null;\n        }\n    }\n\n    /**\n     * Compute a target state for an edge in the DFA, and attempt to add the\n     * computed state and corresponding edge to the DFA.\n     *\n     * @param dfa The DFA\n     * @param previousD The current DFA state\n     * @param t The next input symbol\n     *\n     * @return The computed target DFA state for the given input symbol\n     * {@code t}. If {@code t} does not lead to a valid DFA state, this method\n     * returns {@link //ERROR\n     */\n    computeTargetState(dfa, previousD, t) {\n       const reach = this.computeReachSet(previousD.configs, t, false);\n        if(reach===null) {\n            this.addDFAEdge(dfa, previousD, t, ATNSimulator.ERROR);\n            return ATNSimulator.ERROR;\n        }\n        // create new target state; we'll add to DFA after it's complete\n        let D = new DFAState(null, reach);\n\n        const predictedAlt = this.getUniqueAlt(reach);\n\n        if (this.debug) {\n            const altSubSets = PredictionMode.getConflictingAltSubsets(reach);\n            console.log(\"SLL altSubSets=\" + Utils.arrayToString(altSubSets) +\n                        /*\", previous=\" + previousD.configs + */\n                        \", configs=\" + reach +\n                        \", predict=\" + predictedAlt +\n                        \", allSubsetsConflict=\" +\n                        PredictionMode.allSubsetsConflict(altSubSets) + \", conflictingAlts=\" +\n                        this.getConflictingAlts(reach));\n        }\n        if (predictedAlt!==ATN.INVALID_ALT_NUMBER) {\n            // NO CONFLICT, UNIQUELY PREDICTED ALT\n            D.isAcceptState = true;\n            D.configs.uniqueAlt = predictedAlt;\n            D.prediction = predictedAlt;\n        } else if (PredictionMode.hasSLLConflictTerminatingPrediction(this.predictionMode, reach)) {\n            // MORE THAN ONE VIABLE ALTERNATIVE\n            D.configs.conflictingAlts = this.getConflictingAlts(reach);\n            D.requiresFullContext = true;\n            // in SLL-only mode, we will stop at this state and return the minimum alt\n            D.isAcceptState = true;\n            D.prediction = D.configs.conflictingAlts.minValue();\n        }\n        if (D.isAcceptState && D.configs.hasSemanticContext) {\n            this.predicateDFAState(D, this.atn.getDecisionState(dfa.decision));\n            if( D.predicates!==null) {\n                D.prediction = ATN.INVALID_ALT_NUMBER;\n            }\n        }\n        // all adds to dfa are done after we've created full D state\n        D = this.addDFAEdge(dfa, previousD, t, D);\n        return D;\n    }\n\n    predicateDFAState(dfaState, decisionState) {\n        // We need to test all predicates, even in DFA states that\n        // uniquely predict alternative.\n        const nalts = decisionState.transitions.length;\n        // Update DFA so reach becomes accept state with (predicate,alt)\n        // pairs if preds found for conflicting alts\n        const altsToCollectPredsFrom = this.getConflictingAltsOrUniqueAlt(dfaState.configs);\n        const altToPred = this.getPredsForAmbigAlts(altsToCollectPredsFrom, dfaState.configs, nalts);\n        if (altToPred!==null) {\n            dfaState.predicates = this.getPredicatePredictions(altsToCollectPredsFrom, altToPred);\n            dfaState.prediction = ATN.INVALID_ALT_NUMBER; // make sure we use preds\n        } else {\n            // There are preds in configs but they might go away\n            // when OR'd together like {p}? || NONE == NONE. If neither\n            // alt has preds, resolve to min alt\n            dfaState.prediction = altsToCollectPredsFrom.minValue();\n        }\n    }\n\n// comes back with reach.uniqueAlt set to a valid alt\n    execATNWithFullContext(dfa, D, // how far we got before failing over\n                                         s0,\n                                         input,\n                                         startIndex,\n                                         outerContext) {\n        if (this.debug || this.debug_list_atn_decisions) {\n            console.log(\"execATNWithFullContext \"+s0);\n        }\n        const fullCtx = true;\n        let foundExactAmbig = false;\n        let reach;\n        let previous = s0;\n        input.seek(startIndex);\n        let t = input.LA(1);\n        let predictedAlt = -1;\n        while (true) { // while more work\n            reach = this.computeReachSet(previous, t, fullCtx);\n            if (reach===null) {\n                // if any configs in previous dipped into outer context, that\n                // means that input up to t actually finished entry rule\n                // at least for LL decision. Full LL doesn't dip into outer\n                // so don't need special case.\n                // We will get an error no matter what so delay until after\n                // decision; better error message. Also, no reachable target\n                // ATN states in SLL implies LL will also get nowhere.\n                // If conflict in states that dip out, choose min since we\n                // will get error no matter what.\n                const e = this.noViableAlt(input, outerContext, previous, startIndex);\n                input.seek(startIndex);\n                const alt = this.getSynValidOrSemInvalidAltThatFinishedDecisionEntryRule(previous, outerContext);\n                if(alt!==ATN.INVALID_ALT_NUMBER) {\n                    return alt;\n                } else {\n                    throw e;\n                }\n            }\n            const altSubSets = PredictionMode.getConflictingAltSubsets(reach);\n            if(this.debug) {\n                console.log(\"LL altSubSets=\" + altSubSets + \", predict=\" +\n                      PredictionMode.getUniqueAlt(altSubSets) + \", resolvesToJustOneViableAlt=\" +\n                      PredictionMode.resolvesToJustOneViableAlt(altSubSets));\n            }\n            reach.uniqueAlt = this.getUniqueAlt(reach);\n            // unique prediction?\n            if(reach.uniqueAlt!==ATN.INVALID_ALT_NUMBER) {\n                predictedAlt = reach.uniqueAlt;\n                break;\n            } else if (this.predictionMode !== PredictionMode.LL_EXACT_AMBIG_DETECTION) {\n                predictedAlt = PredictionMode.resolvesToJustOneViableAlt(altSubSets);\n                if(predictedAlt !== ATN.INVALID_ALT_NUMBER) {\n                    break;\n                }\n            } else {\n                // In exact ambiguity mode, we never try to terminate early.\n                // Just keeps scarfing until we know what the conflict is\n                if (PredictionMode.allSubsetsConflict(altSubSets) && PredictionMode.allSubsetsEqual(altSubSets)) {\n                    foundExactAmbig = true;\n                    predictedAlt = PredictionMode.getSingleViableAlt(altSubSets);\n                    break;\n                }\n                // else there are multiple non-conflicting subsets or\n                // we're not sure what the ambiguity is yet.\n                // So, keep going.\n            }\n            previous = reach;\n            if( t !== Token.EOF) {\n                input.consume();\n                t = input.LA(1);\n            }\n        }\n        // If the configuration set uniquely predicts an alternative,\n        // without conflict, then we know that it's a full LL decision\n        // not SLL.\n        if (reach.uniqueAlt !== ATN.INVALID_ALT_NUMBER ) {\n            this.reportContextSensitivity(dfa, predictedAlt, reach, startIndex, input.index);\n            return predictedAlt;\n        }\n        // We do not check predicates here because we have checked them\n        // on-the-fly when doing full context prediction.\n\n        //\n        // In non-exact ambiguity detection mode, we might\tactually be able to\n        // detect an exact ambiguity, but I'm not going to spend the cycles\n        // needed to check. We only emit ambiguity warnings in exact ambiguity\n        // mode.\n        //\n        // For example, we might know that we have conflicting configurations.\n        // But, that does not mean that there is no way forward without a\n        // conflict. It's possible to have nonconflicting alt subsets as in:\n\n        // altSubSets=[{1, 2}, {1, 2}, {1}, {1, 2}]\n\n        // from\n        //\n        //    [(17,1,[5 $]), (13,1,[5 10 $]), (21,1,[5 10 $]), (11,1,[$]),\n        //     (13,2,[5 10 $]), (21,2,[5 10 $]), (11,2,[$])]\n        //\n        // In this case, (17,1,[5 $]) indicates there is some next sequence that\n        // would resolve this without conflict to alternative 1. Any other viable\n        // next sequence, however, is associated with a conflict.  We stop\n        // looking for input because no amount of further lookahead will alter\n        // the fact that we should predict alternative 1.  We just can't say for\n        // sure that there is an ambiguity without looking further.\n\n        this.reportAmbiguity(dfa, D, startIndex, input.index, foundExactAmbig, null, reach);\n\n        return predictedAlt;\n    }\n\n    computeReachSet(closure, t, fullCtx) {\n        if (this.debug) {\n            console.log(\"in computeReachSet, starting closure: \" + closure);\n        }\n        if( this.mergeCache===null) {\n            this.mergeCache = new DoubleDict();\n        }\n        const intermediate = new ATNConfigSet(fullCtx);\n\n        // Configurations already in a rule stop state indicate reaching the end\n        // of the decision rule (local context) or end of the start rule (full\n        // context). Once reached, these configurations are never updated by a\n        // closure operation, so they are handled separately for the performance\n        // advantage of having a smaller intermediate set when calling closure.\n        //\n        // For full-context reach operations, separate handling is required to\n        // ensure that the alternative matching the longest overall sequence is\n        // chosen when multiple such configurations can match the input.\n\n        let skippedStopStates = null;\n\n        // First figure out where we can reach on input t\n        for (let i=0; i<closure.items.length;i++) {\n            const c = closure.items[i];\n            if(this.debug) {\n                console.log(\"testing \" + this.getTokenName(t) + \" at \" + c);\n            }\n            if (c.state instanceof RuleStopState) {\n                if (fullCtx || t === Token.EOF) {\n                    if (skippedStopStates===null) {\n                        skippedStopStates = [];\n                    }\n                    skippedStopStates.push(c);\n                    if(this.debug_add) {\n                        console.log(\"added \" + c + \" to skippedStopStates\");\n                    }\n                }\n                continue;\n            }\n            for(let j=0;j<c.state.transitions.length;j++) {\n                const trans = c.state.transitions[j];\n                const target = this.getReachableTarget(trans, t);\n                if (target!==null) {\n                    const cfg = new ATNConfig({state:target}, c);\n                    intermediate.add(cfg, this.mergeCache);\n                    if(this.debug_add) {\n                        console.log(\"added \" + cfg + \" to intermediate\");\n                    }\n                }\n            }\n        }\n        // Now figure out where the reach operation can take us...\n        let reach = null;\n\n        // This block optimizes the reach operation for intermediate sets which\n        // trivially indicate a termination state for the overall\n        // adaptivePredict operation.\n        //\n        // The conditions assume that intermediate\n        // contains all configurations relevant to the reach set, but this\n        // condition is not true when one or more configurations have been\n        // withheld in skippedStopStates, or when the current symbol is EOF.\n        //\n        if (skippedStopStates===null && t!==Token.EOF) {\n            if (intermediate.items.length===1) {\n                // Don't pursue the closure if there is just one state.\n                // It can only have one alternative; just add to result\n                // Also don't pursue the closure if there is unique alternative\n                // among the configurations.\n                reach = intermediate;\n            } else if (this.getUniqueAlt(intermediate)!==ATN.INVALID_ALT_NUMBER) {\n                // Also don't pursue the closure if there is unique alternative\n                // among the configurations.\n                reach = intermediate;\n            }\n        }\n        // If the reach set could not be trivially determined, perform a closure\n        // operation on the intermediate set to compute its initial value.\n        //\n        if (reach===null) {\n            reach = new ATNConfigSet(fullCtx);\n            const closureBusy = new Set();\n            const treatEofAsEpsilon = t === Token.EOF;\n            for (let k=0; k<intermediate.items.length;k++) {\n                this.closure(intermediate.items[k], reach, closureBusy, false, fullCtx, treatEofAsEpsilon);\n            }\n        }\n        if (t === Token.EOF) {\n            // After consuming EOF no additional input is possible, so we are\n            // only interested in configurations which reached the end of the\n            // decision rule (local context) or end of the start rule (full\n            // context). Update reach to contain only these configurations. This\n            // handles both explicit EOF transitions in the grammar and implicit\n            // EOF transitions following the end of the decision or start rule.\n            //\n            // When reach==intermediate, no closure operation was performed. In\n            // this case, removeAllConfigsNotInRuleStopState needs to check for\n            // reachable rule stop states as well as configurations already in\n            // a rule stop state.\n            //\n            // This is handled before the configurations in skippedStopStates,\n            // because any configurations potentially added from that list are\n            // already guaranteed to meet this condition whether or not it's\n            // required.\n            //\n            reach = this.removeAllConfigsNotInRuleStopState(reach, reach === intermediate);\n        }\n        // If skippedStopStates!==null, then it contains at least one\n        // configuration. For full-context reach operations, these\n        // configurations reached the end of the start rule, in which case we\n        // only add them back to reach if no configuration during the current\n        // closure operation reached such a state. This ensures adaptivePredict\n        // chooses an alternative matching the longest overall sequence when\n        // multiple alternatives are viable.\n        //\n        if (skippedStopStates!==null && ( (! fullCtx) || (! PredictionMode.hasConfigInRuleStopState(reach)))) {\n            for (let l=0; l<skippedStopStates.length;l++) {\n                reach.add(skippedStopStates[l], this.mergeCache);\n            }\n        }\n        if (reach.items.length===0) {\n            return null;\n        } else {\n            return reach;\n        }\n    }\n\n    /**\n     * Return a configuration set containing only the configurations from\n     * {@code configs} which are in a {@link RuleStopState}. If all\n     * configurations in {@code configs} are already in a rule stop state, this\n     * method simply returns {@code configs}.\n     *\n     * <p>When {@code lookToEndOfRule} is true, this method uses\n     * {@link ATN//nextTokens} for each configuration in {@code configs} which is\n     * not already in a rule stop state to see if a rule stop state is reachable\n     * from the configuration via epsilon-only transitions.</p>\n     *\n     * @param configs the configuration set to update\n     * @param lookToEndOfRule when true, this method checks for rule stop states\n     * reachable by epsilon-only transitions from each configuration in\n     * {@code configs}.\n     *\n     * @return {@code configs} if all configurations in {@code configs} are in a\n     * rule stop state, otherwise return a new configuration set containing only\n     * the configurations from {@code configs} which are in a rule stop state\n     */\n    removeAllConfigsNotInRuleStopState(configs, lookToEndOfRule) {\n        if (PredictionMode.allConfigsInRuleStopStates(configs)) {\n            return configs;\n        }\n        const result = new ATNConfigSet(configs.fullCtx);\n        for(let i=0; i<configs.items.length;i++) {\n            const config = configs.items[i];\n            if (config.state instanceof RuleStopState) {\n                result.add(config, this.mergeCache);\n                continue;\n            }\n            if (lookToEndOfRule && config.state.epsilonOnlyTransitions) {\n                const nextTokens = this.atn.nextTokens(config.state);\n                if (nextTokens.contains(Token.EPSILON)) {\n                    const endOfRuleState = this.atn.ruleToStopState[config.state.ruleIndex];\n                    result.add(new ATNConfig({state:endOfRuleState}, config), this.mergeCache);\n                }\n            }\n        }\n        return result;\n    }\n\n    computeStartState(p, ctx, fullCtx) {\n        // always at least the implicit call to start rule\n        const initialContext = predictionContextFromRuleContext(this.atn, ctx);\n        const configs = new ATNConfigSet(fullCtx);\n        for(let i=0;i<p.transitions.length;i++) {\n            const target = p.transitions[i].target;\n            const c = new ATNConfig({ state:target, alt:i+1, context:initialContext }, null);\n            const closureBusy = new Set();\n            this.closure(c, configs, closureBusy, true, fullCtx, false);\n        }\n        return configs;\n    }\n\n    /**\n     * This method transforms the start state computed by\n     * {@link //computeStartState} to the special start state used by a\n     * precedence DFA for a particular precedence value. The transformation\n     * process applies the following changes to the start state's configuration\n     * set.\n     *\n     * <ol>\n     * <li>Evaluate the precedence predicates for each configuration using\n     * {@link SemanticContext//evalPrecedence}.</li>\n     * <li>Remove all configurations which predict an alternative greater than\n     * 1, for which another configuration that predicts alternative 1 is in the\n     * same ATN state with the same prediction context. This transformation is\n     * valid for the following reasons:\n     * <ul>\n     * <li>The closure block cannot contain any epsilon transitions which bypass\n     * the body of the closure, so all states reachable via alternative 1 are\n     * part of the precedence alternatives of the transformed left-recursive\n     * rule.</li>\n     * <li>The \"primary\" portion of a left recursive rule cannot contain an\n     * epsilon transition, so the only way an alternative other than 1 can exist\n     * in a state that is also reachable via alternative 1 is by nesting calls\n     * to the left-recursive rule, with the outer calls not being at the\n     * preferred precedence level.</li>\n     * </ul>\n     * </li>\n     * </ol>\n     *\n     * <p>\n     * The prediction context must be considered by this filter to address\n     * situations like the following.\n     * </p>\n     * <code>\n     * <pre>\n     * grammar TA;\n     * prog: statement* EOF;\n     * statement: letterA | statement letterA 'b' ;\n     * letterA: 'a';\n     * </pre>\n     * </code>\n     * <p>\n     * If the above grammar, the ATN state immediately before the token\n     * reference {@code 'a'} in {@code letterA} is reachable from the left edge\n     * of both the primary and closure blocks of the left-recursive rule\n     * {@code statement}. The prediction context associated with each of these\n     * configurations distinguishes between them, and prevents the alternative\n     * which stepped out to {@code prog} (and then back in to {@code statement}\n     * from being eliminated by the filter.\n     * </p>\n     *\n     * @param configs The configuration set computed by\n     * {@link //computeStartState} as the start state for the DFA.\n     * @return The transformed configuration set representing the start state\n     * for a precedence DFA at a particular precedence level (determined by\n     * calling {@link Parser//getPrecedence})\n     */\n    applyPrecedenceFilter(configs) {\n        let config;\n        const statesFromAlt1 = [];\n        const configSet = new ATNConfigSet(configs.fullCtx);\n        for(let i=0; i<configs.items.length; i++) {\n            config = configs.items[i];\n            // handle alt 1 first\n            if (config.alt !== 1) {\n                continue;\n            }\n            const updatedContext = config.semanticContext.evalPrecedence(this.parser, this._outerContext);\n            if (updatedContext===null) {\n                // the configuration was eliminated\n                continue;\n            }\n            statesFromAlt1[config.state.stateNumber] = config.context;\n            if (updatedContext !== config.semanticContext) {\n                configSet.add(new ATNConfig({semanticContext:updatedContext}, config), this.mergeCache);\n            } else {\n                configSet.add(config, this.mergeCache);\n            }\n        }\n        for(let i=0; i<configs.items.length; i++) {\n            config = configs.items[i];\n            if (config.alt === 1) {\n                // already handled\n                continue;\n            }\n            // In the future, this elimination step could be updated to also\n            // filter the prediction context for alternatives predicting alt>1\n            // (basically a graph subtraction algorithm).\n            if (!config.precedenceFilterSuppressed) {\n                const context = statesFromAlt1[config.state.stateNumber] || null;\n                if (context!==null && context.equals(config.context)) {\n                    // eliminated\n                    continue;\n                }\n            }\n            configSet.add(config, this.mergeCache);\n        }\n        return configSet;\n    }\n\n    getReachableTarget(trans, ttype) {\n        if (trans.matches(ttype, 0, this.atn.maxTokenType)) {\n            return trans.target;\n        } else {\n            return null;\n        }\n    }\n\n    getPredsForAmbigAlts(ambigAlts, configs, nalts) {\n        // REACH=[1|1|[]|0:0, 1|2|[]|0:1]\n        // altToPred starts as an array of all null contexts. The entry at index i\n        // corresponds to alternative i. altToPred[i] may have one of three values:\n        //   1. null: no ATNConfig c is found such that c.alt==i\n        //   2. SemanticContext.NONE: At least one ATNConfig c exists such that\n        //      c.alt==i and c.semanticContext==SemanticContext.NONE. In other words,\n        //      alt i has at least one unpredicated config.\n        //   3. Non-NONE Semantic Context: There exists at least one, and for all\n        //      ATNConfig c such that c.alt==i, c.semanticContext!=SemanticContext.NONE.\n        //\n        // From this, it is clear that NONE||anything==NONE.\n        //\n        let altToPred = [];\n        for(let i=0;i<configs.items.length;i++) {\n            const c = configs.items[i];\n            if(ambigAlts.contains( c.alt )) {\n                altToPred[c.alt] = SemanticContext.orContext(altToPred[c.alt] || null, c.semanticContext);\n            }\n        }\n        let nPredAlts = 0;\n        for (let i =1;i< nalts+1;i++) {\n            const pred = altToPred[i] || null;\n            if (pred===null) {\n                altToPred[i] = SemanticContext.NONE;\n            } else if (pred !== SemanticContext.NONE) {\n                nPredAlts += 1;\n            }\n        }\n        // nonambig alts are null in altToPred\n        if (nPredAlts===0) {\n            altToPred = null;\n        }\n        if (this.debug) {\n            console.log(\"getPredsForAmbigAlts result \" + Utils.arrayToString(altToPred));\n        }\n        return altToPred;\n    }\n\n    getPredicatePredictions(ambigAlts, altToPred) {\n        const pairs = [];\n        let containsPredicate = false;\n        for (let i=1; i<altToPred.length;i++) {\n            const pred = altToPred[i];\n            // unpredicated is indicated by SemanticContext.NONE\n            if( ambigAlts!==null && ambigAlts.contains( i )) {\n                pairs.push(new PredPrediction(pred, i));\n            }\n            if (pred !== SemanticContext.NONE) {\n                containsPredicate = true;\n            }\n        }\n        if (! containsPredicate) {\n            return null;\n        }\n        return pairs;\n    }\n\n    /**\n     * This method is used to improve the localization of error messages by\n     * choosing an alternative rather than throwing a\n     * {@link NoViableAltException} in particular prediction scenarios where the\n     * {@link //ERROR} state was reached during ATN simulation.\n     *\n     * <p>\n     * The default implementation of this method uses the following\n     * algorithm to identify an ATN configuration which successfully parsed the\n     * decision entry rule. Choosing such an alternative ensures that the\n     * {@link ParserRuleContext} returned by the calling rule will be complete\n     * and valid, and the syntax error will be reported later at a more\n     * localized location.</p>\n     *\n     * <ul>\n     * <li>If a syntactically valid path or paths reach the end of the decision rule and\n     * they are semantically valid if predicated, return the min associated alt.</li>\n     * <li>Else, if a semantically invalid but syntactically valid path exist\n     * or paths exist, return the minimum associated alt.\n     * </li>\n     * <li>Otherwise, return {@link ATN//INVALID_ALT_NUMBER}.</li>\n     * </ul>\n     *\n     * <p>\n     * In some scenarios, the algorithm described above could predict an\n     * alternative which will result in a {@link FailedPredicateException} in\n     * the parser. Specifically, this could occur if the <em>only</em> configuration\n     * capable of successfully parsing to the end of the decision rule is\n     * blocked by a semantic predicate. By choosing this alternative within\n     * {@link //adaptivePredict} instead of throwing a\n     * {@link NoViableAltException}, the resulting\n     * {@link FailedPredicateException} in the parser will identify the specific\n     * predicate which is preventing the parser from successfully parsing the\n     * decision rule, which helps developers identify and correct logic errors\n     * in semantic predicates.\n     * </p>\n     *\n     * @param configs The ATN configurations which were valid immediately before\n     * the {@link //ERROR} state was reached\n     * @param outerContext The is the \\gamma_0 initial parser context from the paper\n     * or the parser stack at the instant before prediction commences.\n     *\n     * @return The value to return from {@link //adaptivePredict}, or\n     * {@link ATN//INVALID_ALT_NUMBER} if a suitable alternative was not\n     * identified and {@link //adaptivePredict} should report an error instead\n     */\n    getSynValidOrSemInvalidAltThatFinishedDecisionEntryRule(configs, outerContext) {\n        const cfgs = this.splitAccordingToSemanticValidity(configs, outerContext);\n        const semValidConfigs = cfgs[0];\n        const semInvalidConfigs = cfgs[1];\n        let alt = this.getAltThatFinishedDecisionEntryRule(semValidConfigs);\n        if (alt!==ATN.INVALID_ALT_NUMBER) { // semantically/syntactically viable path exists\n            return alt;\n        }\n        // Is there a syntactically valid path with a failed pred?\n        if (semInvalidConfigs.items.length>0) {\n            alt = this.getAltThatFinishedDecisionEntryRule(semInvalidConfigs);\n            if (alt!==ATN.INVALID_ALT_NUMBER) { // syntactically viable path exists\n                return alt;\n            }\n        }\n        return ATN.INVALID_ALT_NUMBER;\n    }\n\n    getAltThatFinishedDecisionEntryRule(configs) {\n        const alts = [];\n        for(let i=0;i<configs.items.length; i++) {\n            const c = configs.items[i];\n            if (c.reachesIntoOuterContext>0 || ((c.state instanceof RuleStopState) && c.context.hasEmptyPath())) {\n                if(alts.indexOf(c.alt)<0) {\n                    alts.push(c.alt);\n                }\n            }\n        }\n        if (alts.length===0) {\n            return ATN.INVALID_ALT_NUMBER;\n        } else {\n            return Math.min.apply(null, alts);\n        }\n    }\n\n    /**\n     * Walk the list of configurations and split them according to\n     * those that have preds evaluating to true/false.  If no pred, assume\n     * true pred and include in succeeded set.  Returns Pair of sets.\n     *\n     * Create a new set so as not to alter the incoming parameter.\n     *\n     * Assumption: the input stream has been restored to the starting point\n     * prediction, which is where predicates need to evaluate.*/\n    splitAccordingToSemanticValidity( configs, outerContext) {\n        const succeeded = new ATNConfigSet(configs.fullCtx);\n        const failed = new ATNConfigSet(configs.fullCtx);\n        for(let i=0;i<configs.items.length; i++) {\n            const c = configs.items[i];\n            if (c.semanticContext !== SemanticContext.NONE) {\n                const predicateEvaluationResult = c.semanticContext.evaluate(this.parser, outerContext);\n                if (predicateEvaluationResult) {\n                    succeeded.add(c);\n                } else {\n                    failed.add(c);\n                }\n            } else {\n                succeeded.add(c);\n            }\n        }\n        return [succeeded, failed];\n    }\n\n    /**\n     * Look through a list of predicate/alt pairs, returning alts for the\n     * pairs that win. A {@code NONE} predicate indicates an alt containing an\n     * unpredicated config which behaves as \"always true.\" If !complete\n     * then we stop at the first predicate that evaluates to true. This\n     * includes pairs with null predicates.\n     */\n    evalSemanticContext(predPredictions, outerContext, complete) {\n        const predictions = new BitSet();\n        for(let i=0;i<predPredictions.length;i++) {\n            const pair = predPredictions[i];\n            if (pair.pred === SemanticContext.NONE) {\n                predictions.add(pair.alt);\n                if (! complete) {\n                    break;\n                }\n                continue;\n            }\n            const predicateEvaluationResult = pair.pred.evaluate(this.parser, outerContext);\n            if (this.debug || this.dfa_debug) {\n                console.log(\"eval pred \" + pair + \"=\" + predicateEvaluationResult);\n            }\n            if (predicateEvaluationResult) {\n                if (this.debug || this.dfa_debug) {\n                    console.log(\"PREDICT \" + pair.alt);\n                }\n                predictions.add(pair.alt);\n                if (! complete) {\n                    break;\n                }\n            }\n        }\n        return predictions;\n    }\n\n// TODO: If we are doing predicates, there is no point in pursuing\n//     closure operations if we reach a DFA state that uniquely predicts\n//     alternative. We will not be caching that DFA state and it is a\n//     waste to pursue the closure. Might have to advance when we do\n//     ambig detection thought :(\n//\n    closure(config, configs, closureBusy, collectPredicates, fullCtx, treatEofAsEpsilon) {\n        const initialDepth = 0;\n        this.closureCheckingStopState(config, configs, closureBusy, collectPredicates,\n                                 fullCtx, initialDepth, treatEofAsEpsilon);\n    }\n\n    closureCheckingStopState(config, configs, closureBusy, collectPredicates, fullCtx, depth, treatEofAsEpsilon) {\n        if (this.debug || this.debug_closure) {\n            console.log(\"closure(\" + config.toString(this.parser,true) + \")\");\n            // console.log(\"configs(\" + configs.toString() + \")\");\n            if(config.reachesIntoOuterContext>50) {\n                throw \"problem\";\n            }\n        }\n        if (config.state instanceof RuleStopState) {\n            // We hit rule end. If we have context info, use it\n            // run thru all possible stack tops in ctx\n            if (! config.context.isEmpty()) {\n                for (let i =0; i<config.context.length; i++) {\n                    if (config.context.getReturnState(i) === PredictionContext.EMPTY_RETURN_STATE) {\n                        if (fullCtx) {\n                            configs.add(new ATNConfig({state:config.state, context:PredictionContext.EMPTY}, config), this.mergeCache);\n                            continue;\n                        } else {\n                            // we have no context info, just chase follow links (if greedy)\n                            if (this.debug) {\n                                console.log(\"FALLING off rule \" + this.getRuleName(config.state.ruleIndex));\n                            }\n                            this.closure_(config, configs, closureBusy, collectPredicates,\n                                     fullCtx, depth, treatEofAsEpsilon);\n                        }\n                        continue;\n                    }\n                    const returnState = this.atn.states[config.context.getReturnState(i)];\n                    const newContext = config.context.getParent(i); // \"pop\" return state\n                    const parms = {state:returnState, alt:config.alt, context:newContext, semanticContext:config.semanticContext};\n                    const c = new ATNConfig(parms, null);\n                    // While we have context to pop back from, we may have\n                    // gotten that context AFTER having falling off a rule.\n                    // Make sure we track that we are now out of context.\n                    c.reachesIntoOuterContext = config.reachesIntoOuterContext;\n                    this.closureCheckingStopState(c, configs, closureBusy, collectPredicates, fullCtx, depth - 1, treatEofAsEpsilon);\n                }\n                return;\n            } else if( fullCtx) {\n                // reached end of start rule\n                configs.add(config, this.mergeCache);\n                return;\n            } else {\n                // else if we have no context info, just chase follow links (if greedy)\n                if (this.debug) {\n                    console.log(\"FALLING off rule \" + this.getRuleName(config.state.ruleIndex));\n                }\n            }\n        }\n        this.closure_(config, configs, closureBusy, collectPredicates, fullCtx, depth, treatEofAsEpsilon);\n    }\n\n    // Do the actual work of walking epsilon edges//\n    closure_(config, configs, closureBusy, collectPredicates, fullCtx, depth, treatEofAsEpsilon) {\n        const p = config.state;\n        // optimization\n        if (! p.epsilonOnlyTransitions) {\n            configs.add(config, this.mergeCache);\n            // make sure to not return here, because EOF transitions can act as\n            // both epsilon transitions and non-epsilon transitions.\n        }\n        for(let i = 0;i<p.transitions.length; i++) {\n            if(i === 0 && this.canDropLoopEntryEdgeInLeftRecursiveRule(config))\n                continue;\n\n            const t = p.transitions[i];\n            const continueCollecting = collectPredicates && !(t instanceof ActionTransition);\n            const c = this.getEpsilonTarget(config, t, continueCollecting, depth === 0, fullCtx, treatEofAsEpsilon);\n            if (c!==null) {\n                let newDepth = depth;\n                if ( config.state instanceof RuleStopState) {\n                    // target fell off end of rule; mark resulting c as having dipped into outer context\n                    // We can't get here if incoming config was rule stop and we had context\n                    // track how far we dip into outer context.  Might\n                    // come in handy and we avoid evaluating context dependent\n                    // preds if this is > 0.\n                    if (this._dfa !== null && this._dfa.precedenceDfa) {\n                        if (t.outermostPrecedenceReturn === this._dfa.atnStartState.ruleIndex) {\n                            c.precedenceFilterSuppressed = true;\n                        }\n                    }\n\n                    c.reachesIntoOuterContext += 1;\n                    if (closureBusy.add(c)!==c) {\n                        // avoid infinite recursion for right-recursive rules\n                        continue;\n                    }\n                    configs.dipsIntoOuterContext = true; // TODO: can remove? only care when we add to set per middle of this method\n                    newDepth -= 1;\n                    if (this.debug) {\n                        console.log(\"dips into outer ctx: \" + c);\n                    }\n                } else {\n                    if (!t.isEpsilon && closureBusy.add(c)!==c){\n                        // avoid infinite recursion for EOF* and EOF+\n                        continue;\n                    }\n                    if (t instanceof RuleTransition) {\n                        // latch when newDepth goes negative - once we step out of the entry context we can't return\n                        if (newDepth >= 0) {\n                            newDepth += 1;\n                        }\n                    }\n                }\n                this.closureCheckingStopState(c, configs, closureBusy, continueCollecting, fullCtx, newDepth, treatEofAsEpsilon);\n            }\n        }\n    }\n\n    canDropLoopEntryEdgeInLeftRecursiveRule(config) {\n        // return False\n        const p = config.state;\n        // First check to see if we are in StarLoopEntryState generated during\n        // left-recursion elimination. For efficiency, also check if\n        // the context has an empty stack case. If so, it would mean\n        // global FOLLOW so we can't perform optimization\n        // Are we the special loop entry/exit state? or SLL wildcard\n        if(p.stateType !== ATNState.STAR_LOOP_ENTRY)\n            return false;\n        if(p.stateType !== ATNState.STAR_LOOP_ENTRY || !p.isPrecedenceDecision ||\n               config.context.isEmpty() || config.context.hasEmptyPath())\n            return false;\n\n        // Require all return states to return back to the same rule that p is in.\n        const numCtxs = config.context.length;\n        for(let i=0; i<numCtxs; i++) { // for each stack context\n            const returnState = this.atn.states[config.context.getReturnState(i)];\n            if (returnState.ruleIndex !== p.ruleIndex)\n                return false;\n        }\n\n        const decisionStartState = p.transitions[0].target;\n        const blockEndStateNum = decisionStartState.endState.stateNumber;\n        const blockEndState = this.atn.states[blockEndStateNum];\n\n        // Verify that the top of each stack context leads to loop entry/exit\n        // state through epsilon edges and w/o leaving rule.\n        for(let i=0; i<numCtxs; i++) { // for each stack context\n            const returnStateNumber = config.context.getReturnState(i);\n            const returnState = this.atn.states[returnStateNumber];\n            // all states must have single outgoing epsilon edge\n            if (returnState.transitions.length !== 1 || !returnState.transitions[0].isEpsilon)\n                return false;\n\n            // Look for prefix op case like 'not expr', (' type ')' expr\n            const returnStateTarget = returnState.transitions[0].target;\n            if ( returnState.stateType === ATNState.BLOCK_END && returnStateTarget === p )\n                continue;\n\n            // Look for 'expr op expr' or case where expr's return state is block end\n            // of (...)* internal block; the block end points to loop back\n            // which points to p but we don't need to check that\n            if ( returnState === blockEndState )\n                continue;\n\n            // Look for ternary expr ? expr : expr. The return state points at block end,\n            // which points at loop entry state\n            if ( returnStateTarget === blockEndState )\n                continue;\n\n            // Look for complex prefix 'between expr and expr' case where 2nd expr's\n            // return state points at block end state of (...)* internal block\n            if (returnStateTarget.stateType === ATNState.BLOCK_END && returnStateTarget.transitions.length === 1\n                    && returnStateTarget.transitions[0].isEpsilon && returnStateTarget.transitions[0].target === p)\n                continue;\n\n            // anything else ain't conforming\n            return false;\n        }\n        return true;\n    }\n\n    getRuleName(index) {\n        if (this.parser!==null && index>=0) {\n            return this.parser.ruleNames[index];\n        } else {\n            return \"<rule \" + index + \">\";\n        }\n    }\n\n    getEpsilonTarget(config, t, collectPredicates, inContext, fullCtx, treatEofAsEpsilon) {\n        switch(t.serializationType) {\n        case Transition.RULE:\n            return this.ruleTransition(config, t);\n        case Transition.PRECEDENCE:\n            return this.precedenceTransition(config, t, collectPredicates, inContext, fullCtx);\n        case Transition.PREDICATE:\n            return this.predTransition(config, t, collectPredicates, inContext, fullCtx);\n        case Transition.ACTION:\n            return this.actionTransition(config, t);\n        case Transition.EPSILON:\n            return new ATNConfig({state:t.target}, config);\n        case Transition.ATOM:\n        case Transition.RANGE:\n        case Transition.SET:\n            // EOF transitions act like epsilon transitions after the first EOF\n            // transition is traversed\n            if (treatEofAsEpsilon) {\n                if (t.matches(Token.EOF, 0, 1)) {\n                    return new ATNConfig({state: t.target}, config);\n                }\n            }\n            return null;\n        default:\n            return null;\n        }\n    }\n\n    actionTransition(config, t) {\n        if (this.debug) {\n            const index = t.actionIndex === -1 ? 65535 : t.actionIndex;\n            console.log(\"ACTION edge \" + t.ruleIndex + \":\" + index);\n        }\n        return new ATNConfig({state:t.target}, config);\n    }\n\n    precedenceTransition(config, pt, collectPredicates, inContext, fullCtx) {\n        if (this.debug) {\n            console.log(\"PRED (collectPredicates=\" + collectPredicates + \") \" +\n                    pt.precedence + \">=_p, ctx dependent=true\");\n            if (this.parser!==null) {\n                console.log(\"context surrounding pred is \" + Utils.arrayToString(this.parser.getRuleInvocationStack()));\n            }\n        }\n        let c = null;\n        if (collectPredicates && inContext) {\n            if (fullCtx) {\n                // In full context mode, we can evaluate predicates on-the-fly\n                // during closure, which dramatically reduces the size of\n                // the config sets. It also obviates the need to test predicates\n                // later during conflict resolution.\n                const currentPosition = this._input.index;\n                this._input.seek(this._startIndex);\n                const predSucceeds = pt.getPredicate().evaluate(this.parser, this._outerContext);\n                this._input.seek(currentPosition);\n                if (predSucceeds) {\n                    c = new ATNConfig({state:pt.target}, config); // no pred context\n                }\n            } else {\n                const newSemCtx = SemanticContext.andContext(config.semanticContext, pt.getPredicate());\n                c = new ATNConfig({state:pt.target, semanticContext:newSemCtx}, config);\n            }\n        } else {\n            c = new ATNConfig({state:pt.target}, config);\n        }\n        if (this.debug) {\n            console.log(\"config from pred transition=\" + c);\n        }\n        return c;\n    }\n\n    predTransition(config, pt, collectPredicates, inContext, fullCtx) {\n        if (this.debug) {\n            console.log(\"PRED (collectPredicates=\" + collectPredicates + \") \" + pt.ruleIndex +\n                    \":\" + pt.predIndex + \", ctx dependent=\" + pt.isCtxDependent);\n            if (this.parser!==null) {\n                console.log(\"context surrounding pred is \" + Utils.arrayToString(this.parser.getRuleInvocationStack()));\n            }\n        }\n        let c = null;\n        if (collectPredicates && ((pt.isCtxDependent && inContext) || ! pt.isCtxDependent)) {\n            if (fullCtx) {\n                // In full context mode, we can evaluate predicates on-the-fly\n                // during closure, which dramatically reduces the size of\n                // the config sets. It also obviates the need to test predicates\n                // later during conflict resolution.\n                const currentPosition = this._input.index;\n                this._input.seek(this._startIndex);\n                const predSucceeds = pt.getPredicate().evaluate(this.parser, this._outerContext);\n                this._input.seek(currentPosition);\n                if (predSucceeds) {\n                    c = new ATNConfig({state:pt.target}, config); // no pred context\n                }\n            } else {\n                const newSemCtx = SemanticContext.andContext(config.semanticContext, pt.getPredicate());\n                c = new ATNConfig({state:pt.target, semanticContext:newSemCtx}, config);\n            }\n        } else {\n            c = new ATNConfig({state:pt.target}, config);\n        }\n        if (this.debug) {\n            console.log(\"config from pred transition=\" + c);\n        }\n        return c;\n    }\n\n    ruleTransition(config, t) {\n        if (this.debug) {\n            console.log(\"CALL rule \" + this.getRuleName(t.target.ruleIndex) + \", ctx=\" + config.context);\n        }\n        const returnState = t.followState;\n        const newContext = SingletonPredictionContext.create(config.context, returnState.stateNumber);\n        return new ATNConfig({state:t.target, context:newContext}, config );\n    }\n\n    getConflictingAlts(configs) {\n        const altsets = PredictionMode.getConflictingAltSubsets(configs);\n        return PredictionMode.getAlts(altsets);\n    }\n\n    /**\n     * Sam pointed out a problem with the previous definition, v3, of\n     * ambiguous states. If we have another state associated with conflicting\n     * alternatives, we should keep going. For example, the following grammar\n     *\n     * s : (ID | ID ID?) ';' ;\n     *\n     * When the ATN simulation reaches the state before ';', it has a DFA\n     * state that looks like: [12|1|[], 6|2|[], 12|2|[]]. Naturally\n     * 12|1|[] and 12|2|[] conflict, but we cannot stop processing this node\n     * because alternative to has another way to continue, via [6|2|[]].\n     * The key is that we have a single state that has config's only associated\n     * with a single alternative, 2, and crucially the state transitions\n     * among the configurations are all non-epsilon transitions. That means\n     * we don't consider any conflicts that include alternative 2. So, we\n     * ignore the conflict between alts 1 and 2. We ignore a set of\n     * conflicting alts when there is an intersection with an alternative\n     * associated with a single alt state in the state&rarr;config-list map.\n     *\n     * It's also the case that we might have two conflicting configurations but\n     * also a 3rd nonconflicting configuration for a different alternative:\n     * [1|1|[], 1|2|[], 8|3|[]]. This can come about from grammar:\n     *\n     * a : A | A | A B ;\n     *\n     * After matching input A, we reach the stop state for rule A, state 1.\n     * State 8 is the state right before B. Clearly alternatives 1 and 2\n     * conflict and no amount of further lookahead will separate the two.\n     * However, alternative 3 will be able to continue and so we do not\n     * stop working on this state. In the previous example, we're concerned\n     * with states associated with the conflicting alternatives. Here alt\n     * 3 is not associated with the conflicting configs, but since we can continue\n     * looking for input reasonably, I don't declare the state done. We\n     * ignore a set of conflicting alts when we have an alternative\n     * that we still need to pursue\n     */\n    getConflictingAltsOrUniqueAlt(configs) {\n        let conflictingAlts = null;\n        if (configs.uniqueAlt!== ATN.INVALID_ALT_NUMBER) {\n            conflictingAlts = new BitSet();\n            conflictingAlts.add(configs.uniqueAlt);\n        } else {\n            conflictingAlts = configs.conflictingAlts;\n        }\n        return conflictingAlts;\n    }\n\n    getTokenName(t) {\n        if (t===Token.EOF) {\n            return \"EOF\";\n        }\n        if( this.parser!==null && this.parser.literalNames!==null) {\n            if (t >= this.parser.literalNames.length && t >= this.parser.symbolicNames.length) {\n                console.log(\"\" + t + \" ttype out of range: \" + this.parser.literalNames);\n                console.log(\"\" + this.parser.getInputStream().getTokens());\n            } else {\n                const name = this.parser.literalNames[t] || this.parser.symbolicNames[t];\n                return name + \"<\" + t + \">\";\n            }\n        }\n        return \"\" + t;\n    }\n\n    getLookaheadName(input) {\n        return this.getTokenName(input.LA(1));\n    }\n\n    /**\n     * Used for debugging in adaptivePredict around execATN but I cut\n     * it out for clarity now that alg. works well. We can leave this\n     * \"dead\" code for a bit\n     */\n    dumpDeadEndConfigs(nvae) {\n        console.log(\"dead end configs: \");\n        const decs = nvae.getDeadEndConfigs();\n        for(let i=0; i<decs.length; i++) {\n            const c = decs[i];\n            let trans = \"no edges\";\n            if (c.state.transitions.length>0) {\n                const t = c.state.transitions[0];\n                if (t instanceof AtomTransition) {\n                    trans = \"Atom \"+ this.getTokenName(t.label);\n                } else if (t instanceof SetTransition) {\n                    const neg = (t instanceof NotSetTransition);\n                    trans = (neg ? \"~\" : \"\") + \"Set \" + t.set;\n                }\n            }\n            console.error(c.toString(this.parser, true) + \":\" + trans);\n        }\n    }\n\n    noViableAlt(input, outerContext, configs, startIndex) {\n        return new NoViableAltException(this.parser, input, input.get(startIndex), input.LT(1), configs, outerContext);\n    }\n\n    getUniqueAlt(configs) {\n        let alt = ATN.INVALID_ALT_NUMBER;\n        for(let i=0;i<configs.items.length;i++) {\n            const c = configs.items[i];\n            if (alt === ATN.INVALID_ALT_NUMBER) {\n                alt = c.alt // found first alt\n            } else if( c.alt!==alt) {\n                return ATN.INVALID_ALT_NUMBER;\n            }\n        }\n        return alt;\n    }\n\n    /**\n     * Add an edge to the DFA, if possible. This method calls\n     * {@link //addDFAState} to ensure the {@code to} state is present in the\n     * DFA. If {@code from} is {@code null}, or if {@code t} is outside the\n     * range of edges that can be represented in the DFA tables, this method\n     * returns without adding the edge to the DFA.\n     *\n     * <p>If {@code to} is {@code null}, this method returns {@code null}.\n     * Otherwise, this method returns the {@link DFAState} returned by calling\n     * {@link //addDFAState} for the {@code to} state.</p>\n     *\n     * @param dfa The DFA\n     * @param from_ The source state for the edge\n     * @param t The input symbol\n     * @param to The target state for the edge\n     *\n     * @return If {@code to} is {@code null}, this method returns {@code null};\n     * otherwise this method returns the result of calling {@link //addDFAState}\n     * on {@code to}\n     */\n    addDFAEdge(dfa, from_, t, to) {\n        if( this.debug) {\n            console.log(\"EDGE \" + from_ + \" -> \" + to + \" upon \" + this.getTokenName(t));\n        }\n        if (to===null) {\n            return null;\n        }\n        to = this.addDFAState(dfa, to); // used existing if possible not incoming\n        if (from_===null || t < -1 || t > this.atn.maxTokenType) {\n            return to;\n        }\n        if (from_.edges===null) {\n            from_.edges = [];\n        }\n        from_.edges[t+1] = to; // connect\n\n        if (this.debug) {\n            const literalNames = this.parser===null ? null : this.parser.literalNames;\n            const symbolicNames = this.parser===null ? null : this.parser.symbolicNames;\n            console.log(\"DFA=\\n\" + dfa.toString(literalNames, symbolicNames));\n        }\n        return to;\n    }\n\n    /**\n     * Add state {@code D} to the DFA if it is not already present, and return\n     * the actual instance stored in the DFA. If a state equivalent to {@code D}\n     * is already in the DFA, the existing state is returned. Otherwise this\n     * method returns {@code D} after adding it to the DFA.\n     *\n     * <p>If {@code D} is {@link //ERROR}, this method returns {@link //ERROR} and\n     * does not change the DFA.</p>\n     *\n     * @param dfa The dfa\n     * @param D The DFA state to add\n     * @return The state stored in the DFA. This will be either the existing\n     * state if {@code D} is already in the DFA, or {@code D} itself if the\n     * state was not already present\n     */\n    addDFAState(dfa, D) {\n        if (D === ATNSimulator.ERROR) {\n            return D;\n        }\n        const existing = dfa.states.get(D);\n        if(existing!==null) {\n            return existing;\n        }\n        D.stateNumber = dfa.states.length;\n        if (! D.configs.readOnly) {\n            D.configs.optimizeConfigs(this);\n            D.configs.setReadonly(true);\n        }\n        dfa.states.add(D);\n        if (this.debug) {\n            console.log(\"adding new DFA state: \" + D);\n        }\n        return D;\n    }\n\n    reportAttemptingFullContext(dfa, conflictingAlts, configs, startIndex, stopIndex) {\n        if (this.debug || this.retry_debug) {\n            const interval = new Interval(startIndex, stopIndex + 1);\n            console.log(\"reportAttemptingFullContext decision=\" + dfa.decision + \":\" + configs +\n                               \", input=\" + this.parser.getTokenStream().getText(interval));\n        }\n        if (this.parser!==null) {\n            this.parser.getErrorListenerDispatch().reportAttemptingFullContext(this.parser, dfa, startIndex, stopIndex, conflictingAlts, configs);\n        }\n    }\n\n    reportContextSensitivity(dfa, prediction, configs, startIndex, stopIndex) {\n        if (this.debug || this.retry_debug) {\n            const interval = new Interval(startIndex, stopIndex + 1);\n            console.log(\"reportContextSensitivity decision=\" + dfa.decision + \":\" + configs +\n                               \", input=\" + this.parser.getTokenStream().getText(interval));\n        }\n        if (this.parser!==null) {\n            this.parser.getErrorListenerDispatch().reportContextSensitivity(this.parser, dfa, startIndex, stopIndex, prediction, configs);\n        }\n    }\n\n    // If context sensitive parsing, we know it's ambiguity not conflict//\n    reportAmbiguity(dfa, D, startIndex, stopIndex,\n                                   exact, ambigAlts, configs ) {\n        if (this.debug || this.retry_debug) {\n            const interval = new Interval(startIndex, stopIndex + 1);\n            console.log(\"reportAmbiguity \" + ambigAlts + \":\" + configs +\n                               \", input=\" + this.parser.getTokenStream().getText(interval));\n        }\n        if (this.parser!==null) {\n            this.parser.getErrorListenerDispatch().reportAmbiguity(this.parser, dfa, startIndex, stopIndex, exact, ambigAlts, configs);\n        }\n    }\n}\n\nmodule.exports = ParserATNSimulator;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/atn/ParserATNSimulator.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/atn/PredictionMode.js":
/*!***********************************************************************************************!*\
  !*** ../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/atn/PredictionMode.js ***!
  \***********************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nconst {Map, BitSet, AltDict, hashStuff} = __webpack_require__(/*! ./../Utils */ \"(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/Utils.js\");\nconst ATN = __webpack_require__(/*! ./ATN */ \"(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/atn/ATN.js\");\nconst {RuleStopState} = __webpack_require__(/*! ./ATNState */ \"(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/atn/ATNState.js\");\nconst {ATNConfigSet} = __webpack_require__(/*! ./ATNConfigSet */ \"(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/atn/ATNConfigSet.js\");\nconst {ATNConfig} = __webpack_require__(/*! ./ATNConfig */ \"(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/atn/ATNConfig.js\");\nconst {SemanticContext} = __webpack_require__(/*! ./SemanticContext */ \"(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/atn/SemanticContext.js\");\n\n/**\n * This enumeration defines the prediction modes available in ANTLR 4 along with\n * utility methods for analyzing configuration sets for conflicts and/or\n * ambiguities.\n */\nconst PredictionMode = {\n    /**\n     * The SLL(*) prediction mode. This prediction mode ignores the current\n     * parser context when making predictions. This is the fastest prediction\n     * mode, and provides correct results for many grammars. This prediction\n     * mode is more powerful than the prediction mode provided by ANTLR 3, but\n     * may result in syntax errors for grammar and input combinations which are\n     * not SLL.\n     *\n     * <p>\n     * When using this prediction mode, the parser will either return a correct\n     * parse tree (i.e. the same parse tree that would be returned with the\n     * {@link //LL} prediction mode), or it will report a syntax error. If a\n     * syntax error is encountered when using the {@link //SLL} prediction mode,\n     * it may be due to either an actual syntax error in the input or indicate\n     * that the particular combination of grammar and input requires the more\n     * powerful {@link //LL} prediction abilities to complete successfully.</p>\n     *\n     * <p>\n     * This prediction mode does not provide any guarantees for prediction\n     * behavior for syntactically-incorrect inputs.</p>\n     */\n    SLL: 0,\n\n    /**\n     * The LL(*) prediction mode. This prediction mode allows the current parser\n     * context to be used for resolving SLL conflicts that occur during\n     * prediction. This is the fastest prediction mode that guarantees correct\n     * parse results for all combinations of grammars with syntactically correct\n     * inputs.\n     *\n     * <p>\n     * When using this prediction mode, the parser will make correct decisions\n     * for all syntactically-correct grammar and input combinations. However, in\n     * cases where the grammar is truly ambiguous this prediction mode might not\n     * report a precise answer for <em>exactly which</em> alternatives are\n     * ambiguous.</p>\n     *\n     * <p>\n     * This prediction mode does not provide any guarantees for prediction\n     * behavior for syntactically-incorrect inputs.</p>\n     */\n    LL: 1,\n\n    /**\n     *\n     * The LL(*) prediction mode with exact ambiguity detection. In addition to\n     * the correctness guarantees provided by the {@link //LL} prediction mode,\n     * this prediction mode instructs the prediction algorithm to determine the\n     * complete and exact set of ambiguous alternatives for every ambiguous\n     * decision encountered while parsing.\n     *\n     * <p>\n     * This prediction mode may be used for diagnosing ambiguities during\n     * grammar development. Due to the performance overhead of calculating sets\n     * of ambiguous alternatives, this prediction mode should be avoided when\n     * the exact results are not necessary.</p>\n     *\n     * <p>\n     * This prediction mode does not provide any guarantees for prediction\n     * behavior for syntactically-incorrect inputs.</p>\n     */\n    LL_EXACT_AMBIG_DETECTION: 2,\n\n    /**\n     *\n     * Computes the SLL prediction termination condition.\n     *\n     * <p>\n     * This method computes the SLL prediction termination condition for both of\n     * the following cases.</p>\n     *\n     * <ul>\n     * <li>The usual SLL+LL fallback upon SLL conflict</li>\n     * <li>Pure SLL without LL fallback</li>\n     * </ul>\n     *\n     * <p><strong>COMBINED SLL+LL PARSING</strong></p>\n     *\n     * <p>When LL-fallback is enabled upon SLL conflict, correct predictions are\n     * ensured regardless of how the termination condition is computed by this\n     * method. Due to the substantially higher cost of LL prediction, the\n     * prediction should only fall back to LL when the additional lookahead\n     * cannot lead to a unique SLL prediction.</p>\n     *\n     * <p>Assuming combined SLL+LL parsing, an SLL configuration set with only\n     * conflicting subsets should fall back to full LL, even if the\n     * configuration sets don't resolve to the same alternative (e.g.\n     * {@code {1,2}} and {@code {3,4}}. If there is at least one non-conflicting\n     * configuration, SLL could continue with the hopes that more lookahead will\n     * resolve via one of those non-conflicting configurations.</p>\n     *\n     * <p>Here's the prediction termination rule them: SLL (for SLL+LL parsing)\n     * stops when it sees only conflicting configuration subsets. In contrast,\n     * full LL keeps going when there is uncertainty.</p>\n     *\n     * <p><strong>HEURISTIC</strong></p>\n     *\n     * <p>As a heuristic, we stop prediction when we see any conflicting subset\n     * unless we see a state that only has one alternative associated with it.\n     * The single-alt-state thing lets prediction continue upon rules like\n     * (otherwise, it would admit defeat too soon):</p>\n     *\n     * <p>{@code [12|1|[], 6|2|[], 12|2|[]]. s : (ID | ID ID?) ';' ;}</p>\n     *\n     * <p>When the ATN simulation reaches the state before {@code ';'}, it has a\n     * DFA state that looks like: {@code [12|1|[], 6|2|[], 12|2|[]]}. Naturally\n     * {@code 12|1|[]} and {@code 12|2|[]} conflict, but we cannot stop\n     * processing this node because alternative to has another way to continue,\n     * via {@code [6|2|[]]}.</p>\n     *\n     * <p>It also let's us continue for this rule:</p>\n     *\n     * <p>{@code [1|1|[], 1|2|[], 8|3|[]] a : A | A | A B ;}</p>\n     *\n     * <p>After matching input A, we reach the stop state for rule A, state 1.\n     * State 8 is the state right before B. Clearly alternatives 1 and 2\n     * conflict and no amount of further lookahead will separate the two.\n     * However, alternative 3 will be able to continue and so we do not stop\n     * working on this state. In the previous example, we're concerned with\n     * states associated with the conflicting alternatives. Here alt 3 is not\n     * associated with the conflicting configs, but since we can continue\n     * looking for input reasonably, don't declare the state done.</p>\n     *\n     * <p><strong>PURE SLL PARSING</strong></p>\n     *\n     * <p>To handle pure SLL parsing, all we have to do is make sure that we\n     * combine stack contexts for configurations that differ only by semantic\n     * predicate. From there, we can do the usual SLL termination heuristic.</p>\n     *\n     * <p><strong>PREDICATES IN SLL+LL PARSING</strong></p>\n     *\n     * <p>SLL decisions don't evaluate predicates until after they reach DFA stop\n     * states because they need to create the DFA cache that works in all\n     * semantic situations. In contrast, full LL evaluates predicates collected\n     * during start state computation so it can ignore predicates thereafter.\n     * This means that SLL termination detection can totally ignore semantic\n     * predicates.</p>\n     *\n     * <p>Implementation-wise, {@link ATNConfigSet} combines stack contexts but not\n     * semantic predicate contexts so we might see two configurations like the\n     * following.</p>\n     *\n     * <p>{@code (s, 1, x, {}), (s, 1, x', {p})}</p>\n     *\n     * <p>Before testing these configurations against others, we have to merge\n     * {@code x} and {@code x'} (without modifying the existing configurations).\n     * For example, we test {@code (x+x')==x''} when looking for conflicts in\n     * the following configurations.</p>\n     *\n     * <p>{@code (s, 1, x, {}), (s, 1, x', {p}), (s, 2, x'', {})}</p>\n     *\n     * <p>If the configuration set has predicates (as indicated by\n     * {@link ATNConfigSet//hasSemanticContext}), this algorithm makes a copy of\n     * the configurations to strip out all of the predicates so that a standard\n     * {@link ATNConfigSet} will merge everything ignoring predicates.</p>\n     */\n    hasSLLConflictTerminatingPrediction: function( mode, configs) {\n        // Configs in rule stop states indicate reaching the end of the decision\n        // rule (local context) or end of start rule (full context). If all\n        // configs meet this condition, then none of the configurations is able\n        // to match additional input so we terminate prediction.\n        //\n        if (PredictionMode.allConfigsInRuleStopStates(configs)) {\n            return true;\n        }\n        // pure SLL mode parsing\n        if (mode === PredictionMode.SLL) {\n            // Don't bother with combining configs from different semantic\n            // contexts if we can fail over to full LL; costs more time\n            // since we'll often fail over anyway.\n            if (configs.hasSemanticContext) {\n                // dup configs, tossing out semantic predicates\n                const dup = new ATNConfigSet();\n                for(let i=0;i<configs.items.length;i++) {\n                    let c = configs.items[i];\n                    c = new ATNConfig({semanticContext:SemanticContext.NONE}, c);\n                    dup.add(c);\n                }\n                configs = dup;\n            }\n            // now we have combined contexts for configs with dissimilar preds\n        }\n        // pure SLL or combined SLL+LL mode parsing\n        const altsets = PredictionMode.getConflictingAltSubsets(configs);\n        return PredictionMode.hasConflictingAltSet(altsets) && !PredictionMode.hasStateAssociatedWithOneAlt(configs);\n    },\n\n    /**\n     * Checks if any configuration in {@code configs} is in a\n     * {@link RuleStopState}. Configurations meeting this condition have reached\n     * the end of the decision rule (local context) or end of start rule (full\n     * context).\n     *\n     * @param configs the configuration set to test\n     * @return {@code true} if any configuration in {@code configs} is in a\n     * {@link RuleStopState}, otherwise {@code false}\n     */\n    hasConfigInRuleStopState: function(configs) {\n        for(let i=0;i<configs.items.length;i++) {\n            const c = configs.items[i];\n            if (c.state instanceof RuleStopState) {\n                return true;\n            }\n        }\n        return false;\n    },\n\n    /**\n     * Checks if all configurations in {@code configs} are in a\n     * {@link RuleStopState}. Configurations meeting this condition have reached\n     * the end of the decision rule (local context) or end of start rule (full\n     * context).\n     *\n     * @param configs the configuration set to test\n     * @return {@code true} if all configurations in {@code configs} are in a\n     * {@link RuleStopState}, otherwise {@code false}\n     */\n    allConfigsInRuleStopStates: function(configs) {\n        for(let i=0;i<configs.items.length;i++) {\n            const c = configs.items[i];\n            if (!(c.state instanceof RuleStopState)) {\n                return false;\n            }\n        }\n        return true;\n    },\n\n    /**\n     *\n     * Full LL prediction termination.\n     *\n     * <p>Can we stop looking ahead during ATN simulation or is there some\n     * uncertainty as to which alternative we will ultimately pick, after\n     * consuming more input? Even if there are partial conflicts, we might know\n     * that everything is going to resolve to the same minimum alternative. That\n     * means we can stop since no more lookahead will change that fact. On the\n     * other hand, there might be multiple conflicts that resolve to different\n     * minimums. That means we need more look ahead to decide which of those\n     * alternatives we should predict.</p>\n     *\n     * <p>The basic idea is to split the set of configurations {@code C}, into\n     * conflicting subsets {@code (s, _, ctx, _)} and singleton subsets with\n     * non-conflicting configurations. Two configurations conflict if they have\n     * identical {@link ATNConfig//state} and {@link ATNConfig//context} values\n     * but different {@link ATNConfig//alt} value, e.g. {@code (s, i, ctx, _)}\n     * and {@code (s, j, ctx, _)} for {@code i!=j}.</p>\n     *\n     * <p>Reduce these configuration subsets to the set of possible alternatives.\n     * You can compute the alternative subsets in one pass as follows:</p>\n     *\n     * <p>{@code A_s,ctx = {i | (s, i, ctx, _)}} for each configuration in\n     * {@code C} holding {@code s} and {@code ctx} fixed.</p>\n     *\n     * <p>Or in pseudo-code, for each configuration {@code c} in {@code C}:</p>\n     *\n     * <pre>\n     * map[c] U= c.{@link ATNConfig//alt alt} // map hash/equals uses s and x, not\n     * alt and not pred\n     * </pre>\n     *\n     * <p>The values in {@code map} are the set of {@code A_s,ctx} sets.</p>\n     *\n     * <p>If {@code |A_s,ctx|=1} then there is no conflict associated with\n     * {@code s} and {@code ctx}.</p>\n     *\n     * <p>Reduce the subsets to singletons by choosing a minimum of each subset. If\n     * the union of these alternative subsets is a singleton, then no amount of\n     * more lookahead will help us. We will always pick that alternative. If,\n     * however, there is more than one alternative, then we are uncertain which\n     * alternative to predict and must continue looking for resolution. We may\n     * or may not discover an ambiguity in the future, even if there are no\n     * conflicting subsets this round.</p>\n     *\n     * <p>The biggest sin is to terminate early because it means we've made a\n     * decision but were uncertain as to the eventual outcome. We haven't used\n     * enough lookahead. On the other hand, announcing a conflict too late is no\n     * big deal; you will still have the conflict. It's just inefficient. It\n     * might even look until the end of file.</p>\n     *\n     * <p>No special consideration for semantic predicates is required because\n     * predicates are evaluated on-the-fly for full LL prediction, ensuring that\n     * no configuration contains a semantic context during the termination\n     * check.</p>\n     *\n     * <p><strong>CONFLICTING CONFIGS</strong></p>\n     *\n     * <p>Two configurations {@code (s, i, x)} and {@code (s, j, x')}, conflict\n     * when {@code i!=j} but {@code x=x'}. Because we merge all\n     * {@code (s, i, _)} configurations together, that means that there are at\n     * most {@code n} configurations associated with state {@code s} for\n     * {@code n} possible alternatives in the decision. The merged stacks\n     * complicate the comparison of configuration contexts {@code x} and\n     * {@code x'}. Sam checks to see if one is a subset of the other by calling\n     * merge and checking to see if the merged result is either {@code x} or\n     * {@code x'}. If the {@code x} associated with lowest alternative {@code i}\n     * is the superset, then {@code i} is the only possible prediction since the\n     * others resolve to {@code min(i)} as well. However, if {@code x} is\n     * associated with {@code j>i} then at least one stack configuration for\n     * {@code j} is not in conflict with alternative {@code i}. The algorithm\n     * should keep going, looking for more lookahead due to the uncertainty.</p>\n     *\n     * <p>For simplicity, I'm doing a equality check between {@code x} and\n     * {@code x'} that lets the algorithm continue to consume lookahead longer\n     * than necessary. The reason I like the equality is of course the\n     * simplicity but also because that is the test you need to detect the\n     * alternatives that are actually in conflict.</p>\n     *\n     * <p><strong>CONTINUE/STOP RULE</strong></p>\n     *\n     * <p>Continue if union of resolved alternative sets from non-conflicting and\n     * conflicting alternative subsets has more than one alternative. We are\n     * uncertain about which alternative to predict.</p>\n     *\n     * <p>The complete set of alternatives, {@code [i for (_,i,_)]}, tells us which\n     * alternatives are still in the running for the amount of input we've\n     * consumed at this point. The conflicting sets let us to strip away\n     * configurations that won't lead to more states because we resolve\n     * conflicts to the configuration with a minimum alternate for the\n     * conflicting set.</p>\n     *\n     * <p><strong>CASES</strong></p>\n     *\n     * <ul>\n     *\n     * <li>no conflicts and more than 1 alternative in set =&gt; continue</li>\n     *\n     * <li> {@code (s, 1, x)}, {@code (s, 2, x)}, {@code (s, 3, z)},\n     * {@code (s', 1, y)}, {@code (s', 2, y)} yields non-conflicting set\n     * {@code {3}} U conflicting sets {@code min({1,2})} U {@code min({1,2})} =\n     * {@code {1,3}} =&gt; continue\n     * </li>\n     *\n     * <li>{@code (s, 1, x)}, {@code (s, 2, x)}, {@code (s', 1, y)},\n     * {@code (s', 2, y)}, {@code (s'', 1, z)} yields non-conflicting set\n     * {@code {1}} U conflicting sets {@code min({1,2})} U {@code min({1,2})} =\n     * {@code {1}} =&gt; stop and predict 1</li>\n     *\n     * <li>{@code (s, 1, x)}, {@code (s, 2, x)}, {@code (s', 1, y)},\n     * {@code (s', 2, y)} yields conflicting, reduced sets {@code {1}} U\n     * {@code {1}} = {@code {1}} =&gt; stop and predict 1, can announce\n     * ambiguity {@code {1,2}}</li>\n     *\n     * <li>{@code (s, 1, x)}, {@code (s, 2, x)}, {@code (s', 2, y)},\n     * {@code (s', 3, y)} yields conflicting, reduced sets {@code {1}} U\n     * {@code {2}} = {@code {1,2}} =&gt; continue</li>\n     *\n     * <li>{@code (s, 1, x)}, {@code (s, 2, x)}, {@code (s', 3, y)},\n     * {@code (s', 4, y)} yields conflicting, reduced sets {@code {1}} U\n     * {@code {3}} = {@code {1,3}} =&gt; continue</li>\n     *\n     * </ul>\n     *\n     * <p><strong>EXACT AMBIGUITY DETECTION</strong></p>\n     *\n     * <p>If all states report the same conflicting set of alternatives, then we\n     * know we have the exact ambiguity set.</p>\n     *\n     * <p><code>|A_<em>i</em>|&gt;1</code> and\n     * <code>A_<em>i</em> = A_<em>j</em></code> for all <em>i</em>, <em>j</em>.</p>\n     *\n     * <p>In other words, we continue examining lookahead until all {@code A_i}\n     * have more than one alternative and all {@code A_i} are the same. If\n     * {@code A={{1,2}, {1,3}}}, then regular LL prediction would terminate\n     * because the resolved set is {@code {1}}. To determine what the real\n     * ambiguity is, we have to know whether the ambiguity is between one and\n     * two or one and three so we keep going. We can only stop prediction when\n     * we need exact ambiguity detection when the sets look like\n     * {@code A={{1,2}}} or {@code {{1,2},{1,2}}}, etc...</p>\n     */\n    resolvesToJustOneViableAlt: function(altsets) {\n        return PredictionMode.getSingleViableAlt(altsets);\n    },\n\n    /**\n     * Determines if every alternative subset in {@code altsets} contains more\n     * than one alternative.\n     *\n     * @param altsets a collection of alternative subsets\n     * @return {@code true} if every {@link BitSet} in {@code altsets} has\n     * {@link BitSet//cardinality cardinality} &gt; 1, otherwise {@code false}\n     */\n    allSubsetsConflict: function(altsets) {\n        return ! PredictionMode.hasNonConflictingAltSet(altsets);\n    },\n    /**\n     * Determines if any single alternative subset in {@code altsets} contains\n     * exactly one alternative.\n     *\n     * @param altsets a collection of alternative subsets\n     * @return {@code true} if {@code altsets} contains a {@link BitSet} with\n     * {@link BitSet//cardinality cardinality} 1, otherwise {@code false}\n     */\n    hasNonConflictingAltSet: function(altsets) {\n        for(let i=0;i<altsets.length;i++) {\n            const alts = altsets[i];\n            if (alts.length===1) {\n                return true;\n            }\n        }\n        return false;\n    },\n\n\n    /**\n     * Determines if any single alternative subset in {@code altsets} contains\n     * more than one alternative.\n     *\n     * @param altsets a collection of alternative subsets\n     * @return {@code true} if {@code altsets} contains a {@link BitSet} with\n     * {@link BitSet//cardinality cardinality} &gt; 1, otherwise {@code false}\n     */\n    hasConflictingAltSet: function(altsets) {\n        for(let i=0;i<altsets.length;i++) {\n            const alts = altsets[i];\n            if (alts.length>1) {\n                return true;\n            }\n        }\n        return false;\n    },\n\n\n    /**\n     * Determines if every alternative subset in {@code altsets} is equivalent.\n     *\n     * @param altsets a collection of alternative subsets\n     * @return {@code true} if every member of {@code altsets} is equal to the\n     * others, otherwise {@code false}\n     */\n    allSubsetsEqual: function(altsets) {\n        let first = null;\n        for(let i=0;i<altsets.length;i++) {\n            const alts = altsets[i];\n            if (first === null) {\n                first = alts;\n            } else if (alts!==first) {\n                return false;\n            }\n        }\n        return true;\n    },\n\n\n    /**\n     * Returns the unique alternative predicted by all alternative subsets in\n     * {@code altsets}. If no such alternative exists, this method returns\n     * {@link ATN//INVALID_ALT_NUMBER}.\n     *\n     * @param altsets a collection of alternative subsets\n     */\n    getUniqueAlt: function(altsets) {\n        const all = PredictionMode.getAlts(altsets);\n        if (all.length===1) {\n            return all.minValue();\n        } else {\n            return ATN.INVALID_ALT_NUMBER;\n        }\n    },\n\n    /**\n     * Gets the complete set of represented alternatives for a collection of\n     * alternative subsets. This method returns the union of each {@link BitSet}\n     * in {@code altsets}.\n     *\n     * @param altsets a collection of alternative subsets\n     * @return the set of represented alternatives in {@code altsets}\n     */\n    getAlts: function(altsets) {\n        const all = new BitSet();\n        altsets.map( function(alts) { all.or(alts); });\n        return all;\n    },\n\n    /**\n     * This function gets the conflicting alt subsets from a configuration set.\n     * For each configuration {@code c} in {@code configs}:\n     *\n     * <pre>\n     * map[c] U= c.{@link ATNConfig//alt alt} // map hash/equals uses s and x, not\n     * alt and not pred\n     * </pre>\n     */\n    getConflictingAltSubsets: function(configs) {\n        const configToAlts = new Map();\n        configToAlts.hashFunction = function(cfg) { hashStuff(cfg.state.stateNumber, cfg.context); };\n        configToAlts.equalsFunction = function(c1, c2) { return c1.state.stateNumber === c2.state.stateNumber && c1.context.equals(c2.context);};\n        configs.items.map(function(cfg) {\n            let alts = configToAlts.get(cfg);\n            if (alts === null) {\n                alts = new BitSet();\n                configToAlts.put(cfg, alts);\n            }\n            alts.add(cfg.alt);\n        });\n        return configToAlts.getValues();\n    },\n\n    /**\n     * Get a map from state to alt subset from a configuration set. For each\n     * configuration {@code c} in {@code configs}:\n     *\n     * <pre>\n     * map[c.{@link ATNConfig//state state}] U= c.{@link ATNConfig//alt alt}\n     * </pre>\n     */\n    getStateToAltMap: function(configs) {\n        const m = new AltDict();\n        configs.items.map(function(c) {\n            let alts = m.get(c.state);\n            if (alts === null) {\n                alts = new BitSet();\n                m.put(c.state, alts);\n            }\n            alts.add(c.alt);\n        });\n        return m;\n    },\n\n    hasStateAssociatedWithOneAlt: function(configs) {\n        const values = PredictionMode.getStateToAltMap(configs).values();\n        for(let i=0;i<values.length;i++) {\n            if (values[i].length===1) {\n                return true;\n            }\n        }\n        return false;\n    },\n\n    getSingleViableAlt: function(altsets) {\n        let result = null;\n        for(let i=0;i<altsets.length;i++) {\n            const alts = altsets[i];\n            const minAlt = alts.minValue();\n            if(result===null) {\n                result = minAlt;\n            } else if(result!==minAlt) { // more than 1 viable alt\n                return ATN.INVALID_ALT_NUMBER;\n            }\n        }\n        return result;\n    }\n};\n\nmodule.exports = PredictionMode;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/atn/PredictionMode.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/atn/SemanticContext.js":
/*!************************************************************************************************!*\
  !*** ../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/atn/SemanticContext.js ***!
  \************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nconst { Set, Hash, equalArrays } = __webpack_require__(/*! ./../Utils */ \"(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/Utils.js\");\n\n/**\n * A tree structure used to record the semantic context in which\n * an ATN configuration is valid.  It's either a single predicate,\n * a conjunction {@code p1&&p2}, or a sum of products {@code p1||p2}.\n *\n * <p>I have scoped the {@link AND}, {@link OR}, and {@link Predicate} subclasses of\n * {@link SemanticContext} within the scope of this outer class.</p>\n */\nclass SemanticContext {\n\n\thashCode() {\n\t\tconst hash = new Hash();\n\t\tthis.updateHashCode(hash);\n\t\treturn hash.finish();\n\t}\n\n\t/**\n\t * For context independent predicates, we evaluate them without a local\n\t * context (i.e., null context). That way, we can evaluate them without\n\t * having to create proper rule-specific context during prediction (as\n\t * opposed to the parser, which creates them naturally). In a practical\n\t * sense, this avoids a cast exception from RuleContext to myruleContext.\n\t *\n\t * <p>For context dependent predicates, we must pass in a local context so that\n\t * references such as $arg evaluate properly as _localctx.arg. We only\n\t * capture context dependent predicates in the context in which we begin\n\t * prediction, so we passed in the outer context here in case of context\n\t * dependent predicate evaluation.</p>\n\t */\n\tevaluate(parser, outerContext) {}\n\n\t/**\n\t * Evaluate the precedence predicates for the context and reduce the result.\n\t *\n\t * @param parser The parser instance.\n\t * @param outerContext The current parser context object.\n\t * @return The simplified semantic context after precedence predicates are\n\t * evaluated, which will be one of the following values.\n\t * <ul>\n\t * <li>{@link //NONE}: if the predicate simplifies to {@code true} after\n\t * precedence predicates are evaluated.</li>\n\t * <li>{@code null}: if the predicate simplifies to {@code false} after\n\t * precedence predicates are evaluated.</li>\n\t * <li>{@code this}: if the semantic context is not changed as a result of\n\t * precedence predicate evaluation.</li>\n\t * <li>A non-{@code null} {@link SemanticContext}: the new simplified\n\t * semantic context after precedence predicates are evaluated.</li>\n\t * </ul>\n\t */\n\tevalPrecedence(parser, outerContext) {\n\t\treturn this;\n\t}\n\n\tstatic andContext(a, b) {\n\t\tif (a === null || a === SemanticContext.NONE) {\n\t\t\treturn b;\n\t\t}\n\t\tif (b === null || b === SemanticContext.NONE) {\n\t\t\treturn a;\n\t\t}\n\t\tconst result = new AND(a, b);\n\t\tif (result.opnds.length === 1) {\n\t\t\treturn result.opnds[0];\n\t\t} else {\n\t\t\treturn result;\n\t\t}\n\t}\n\n\tstatic orContext(a, b) {\n\t\tif (a === null) {\n\t\t\treturn b;\n\t\t}\n\t\tif (b === null) {\n\t\t\treturn a;\n\t\t}\n\t\tif (a === SemanticContext.NONE || b === SemanticContext.NONE) {\n\t\t\treturn SemanticContext.NONE;\n\t\t}\n\t\tconst result = new OR(a, b);\n\t\tif (result.opnds.length === 1) {\n\t\t\treturn result.opnds[0];\n\t\t} else {\n\t\t\treturn result;\n\t\t}\n\t}\n}\n\n\nclass Predicate extends SemanticContext {\n\n\tconstructor(ruleIndex, predIndex, isCtxDependent) {\n\t\tsuper();\n\t\tthis.ruleIndex = ruleIndex === undefined ? -1 : ruleIndex;\n\t\tthis.predIndex = predIndex === undefined ? -1 : predIndex;\n\t\tthis.isCtxDependent = isCtxDependent === undefined ? false : isCtxDependent; // e.g., $i ref in pred\n\t}\n\n\tevaluate(parser, outerContext) {\n\t\tconst localctx = this.isCtxDependent ? outerContext : null;\n\t\treturn parser.sempred(localctx, this.ruleIndex, this.predIndex);\n\t}\n\n\tupdateHashCode(hash) {\n\t\thash.update(this.ruleIndex, this.predIndex, this.isCtxDependent);\n\t}\n\n\tequals(other) {\n\t\tif (this === other) {\n\t\t\treturn true;\n\t\t} else if (!(other instanceof Predicate)) {\n\t\t\treturn false;\n\t\t} else {\n\t\t\treturn this.ruleIndex === other.ruleIndex &&\n\t\t\t\t\tthis.predIndex === other.predIndex &&\n\t\t\t\t\tthis.isCtxDependent === other.isCtxDependent;\n\t\t}\n\t}\n\n\ttoString() {\n\t\treturn \"{\" + this.ruleIndex + \":\" + this.predIndex + \"}?\";\n\t}\n}\n\n/**\n * The default {@link SemanticContext}, which is semantically equivalent to\n * a predicate of the form {@code {true}?}\n */\nSemanticContext.NONE = new Predicate();\n\n\nclass PrecedencePredicate extends SemanticContext {\n\n\tconstructor(precedence) {\n\t\tsuper();\n\t\tthis.precedence = precedence === undefined ? 0 : precedence;\n\t}\n\n\tevaluate(parser, outerContext) {\n\t\treturn parser.precpred(outerContext, this.precedence);\n\t}\n\n\tevalPrecedence(parser, outerContext) {\n\t\tif (parser.precpred(outerContext, this.precedence)) {\n\t\t\treturn SemanticContext.NONE;\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\tcompareTo(other) {\n\t\treturn this.precedence - other.precedence;\n\t}\n\n\tupdateHashCode(hash) {\n\t\thash.update(this.precedence);\n\t}\n\n\tequals(other) {\n\t\tif (this === other) {\n\t\t\treturn true;\n\t\t} else if (!(other instanceof PrecedencePredicate)) {\n\t\t\treturn false;\n\t\t} else {\n\t\t\treturn this.precedence === other.precedence;\n\t\t}\n\t}\n\n\ttoString() {\n\t\treturn \"{\" + this.precedence + \">=prec}?\";\n\t}\n\n\tstatic filterPrecedencePredicates(set) {\n\t\tconst result = [];\n\t\tset.values().map( function(context) {\n\t\t\tif (context instanceof PrecedencePredicate) {\n\t\t\t\tresult.push(context);\n\t\t\t}\n\t\t});\n\t\treturn result;\n\t}\n}\n\nclass AND extends SemanticContext {\n\t/**\n\t * A semantic context which is true whenever none of the contained contexts\n\t * is false\n\t */\n\tconstructor(a, b) {\n\t\tsuper();\n\t\tconst operands = new Set();\n\t\tif (a instanceof AND) {\n\t\t\ta.opnds.map(function(o) {\n\t\t\t\toperands.add(o);\n\t\t\t});\n\t\t} else {\n\t\t\toperands.add(a);\n\t\t}\n\t\tif (b instanceof AND) {\n\t\t\tb.opnds.map(function(o) {\n\t\t\t\toperands.add(o);\n\t\t\t});\n\t\t} else {\n\t\t\toperands.add(b);\n\t\t}\n\t\tconst precedencePredicates = PrecedencePredicate.filterPrecedencePredicates(operands);\n\t\tif (precedencePredicates.length > 0) {\n\t\t\t// interested in the transition with the lowest precedence\n\t\t\tlet reduced = null;\n\t\t\tprecedencePredicates.map( function(p) {\n\t\t\t\tif(reduced===null || p.precedence<reduced.precedence) {\n\t\t\t\t\treduced = p;\n\t\t\t\t}\n\t\t\t});\n\t\t\toperands.add(reduced);\n\t\t}\n\t\tthis.opnds = Array.from(operands.values());\n\t}\n\n\tequals(other) {\n\t\tif (this === other) {\n\t\t\treturn true;\n\t\t} else if (!(other instanceof AND)) {\n\t\t\treturn false;\n\t\t} else {\n\t\t\treturn equalArrays(this.opnds, other.opnds);\n\t\t}\n\t}\n\n\tupdateHashCode(hash) {\n\t\thash.update(this.opnds, \"AND\");\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>\n\t * The evaluation of predicates by this context is short-circuiting, but\n\t * unordered.</p>\n\t */\n\tevaluate(parser, outerContext) {\n\t\tfor (let i = 0; i < this.opnds.length; i++) {\n\t\t\tif (!this.opnds[i].evaluate(parser, outerContext)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\tevalPrecedence(parser, outerContext) {\n\t\tlet differs = false;\n\t\tconst operands = [];\n\t\tfor (let i = 0; i < this.opnds.length; i++) {\n\t\t\tconst context = this.opnds[i];\n\t\t\tconst evaluated = context.evalPrecedence(parser, outerContext);\n\t\t\tdiffers |= (evaluated !== context);\n\t\t\tif (evaluated === null) {\n\t\t\t\t// The AND context is false if any element is false\n\t\t\t\treturn null;\n\t\t\t} else if (evaluated !== SemanticContext.NONE) {\n\t\t\t\t// Reduce the result by skipping true elements\n\t\t\t\toperands.push(evaluated);\n\t\t\t}\n\t\t}\n\t\tif (!differs) {\n\t\t\treturn this;\n\t\t}\n\t\tif (operands.length === 0) {\n\t\t\t// all elements were true, so the AND context is true\n\t\t\treturn SemanticContext.NONE;\n\t\t}\n\t\tlet result = null;\n\t\toperands.map(function(o) {\n\t\t\tresult = result === null ? o : SemanticContext.andContext(result, o);\n\t\t});\n\t\treturn result;\n\t}\n\n\ttoString() {\n\t\tconst s = this.opnds.map(o => o.toString());\n\t\treturn (s.length > 3 ? s.slice(3) : s).join(\"&&\");\n\t}\n}\n\n\nclass OR extends SemanticContext {\n\t/**\n\t * A semantic context which is true whenever at least one of the contained\n\t * contexts is true\n\t */\n\tconstructor(a, b) {\n\t\tsuper();\n\t\tconst operands = new Set();\n\t\tif (a instanceof OR) {\n\t\t\ta.opnds.map(function(o) {\n\t\t\t\toperands.add(o);\n\t\t\t});\n\t\t} else {\n\t\t\toperands.add(a);\n\t\t}\n\t\tif (b instanceof OR) {\n\t\t\tb.opnds.map(function(o) {\n\t\t\t\toperands.add(o);\n\t\t\t});\n\t\t} else {\n\t\t\toperands.add(b);\n\t\t}\n\n\t\tconst precedencePredicates = PrecedencePredicate.filterPrecedencePredicates(operands);\n\t\tif (precedencePredicates.length > 0) {\n\t\t\t// interested in the transition with the highest precedence\n\t\t\tconst s = precedencePredicates.sort(function(a, b) {\n\t\t\t\treturn a.compareTo(b);\n\t\t\t});\n\t\t\tconst reduced = s[s.length-1];\n\t\t\toperands.add(reduced);\n\t\t}\n\t\tthis.opnds = Array.from(operands.values());\n\t}\n\n\tequals(other) {\n\t\tif (this === other) {\n\t\t\treturn true;\n\t\t} else if (!(other instanceof OR)) {\n\t\t\treturn false;\n\t\t} else {\n\t\t\treturn equalArrays(this.opnds, other.opnds);\n\t\t}\n\t}\n\n\tupdateHashCode(hash) {\n\t\thash.update(this.opnds, \"OR\");\n\t}\n\n\t/**\n\t * <p>\n\t * The evaluation of predicates by this context is short-circuiting, but\n\t * unordered.</p>\n\t */\n\tevaluate(parser, outerContext) {\n\t\tfor (let i = 0; i < this.opnds.length; i++) {\n\t\t\tif (this.opnds[i].evaluate(parser, outerContext)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\tevalPrecedence(parser, outerContext) {\n\t\tlet differs = false;\n\t\tconst operands = [];\n\t\tfor (let i = 0; i < this.opnds.length; i++) {\n\t\t\tconst context = this.opnds[i];\n\t\t\tconst evaluated = context.evalPrecedence(parser, outerContext);\n\t\t\tdiffers |= (evaluated !== context);\n\t\t\tif (evaluated === SemanticContext.NONE) {\n\t\t\t\t// The OR context is true if any element is true\n\t\t\t\treturn SemanticContext.NONE;\n\t\t\t} else if (evaluated !== null) {\n\t\t\t\t// Reduce the result by skipping false elements\n\t\t\t\toperands.push(evaluated);\n\t\t\t}\n\t\t}\n\t\tif (!differs) {\n\t\t\treturn this;\n\t\t}\n\t\tif (operands.length === 0) {\n\t\t\t// all elements were false, so the OR context is false\n\t\t\treturn null;\n\t\t}\n\t\tconst result = null;\n\t\toperands.map(function(o) {\n\t\t\treturn result === null ? o : SemanticContext.orContext(result, o);\n\t\t});\n\t\treturn result;\n\t}\n\n\ttoString() {\n\t\tconst s = this.opnds.map(o => o.toString());\n\t\treturn (s.length > 3 ? s.slice(3) : s).join(\"||\");\n\t}\n}\n\nmodule.exports = {\n\tSemanticContext,\n\tPrecedencePredicate,\n\tPredicate\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/atn/SemanticContext.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/atn/Transition.js":
/*!*******************************************************************************************!*\
  !*** ../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/atn/Transition.js ***!
  \*******************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nconst {Token} = __webpack_require__(/*! ./../Token */ \"(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/Token.js\");\nconst {IntervalSet} = __webpack_require__(/*! ./../IntervalSet */ \"(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/IntervalSet.js\");\nconst {Predicate, PrecedencePredicate} = __webpack_require__(/*! ./SemanticContext */ \"(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/atn/SemanticContext.js\");\n\n/**\n * An ATN transition between any two ATN states.  Subclasses define\n * atom, set, epsilon, action, predicate, rule transitions.\n *\n * <p>This is a one way link.  It emanates from a state (usually via a list of\n * transitions) and has a target state.</p>\n *\n * <p>Since we never have to change the ATN transitions once we construct it,\n * we can fix these transitions as specific classes. The DFA transitions\n * on the other hand need to update the labels as it adds transitions to\n * the states. We'll use the term Edge for the DFA to distinguish them from\n * ATN transitions.</p>\n */\nclass Transition {\n    constructor(target) {\n        // The target of this transition.\n        if (target===undefined || target===null) {\n            throw \"target cannot be null.\";\n        }\n        this.target = target;\n        // Are we epsilon, action, sempred?\n        this.isEpsilon = false;\n        this.label = null;\n    }\n}\n\n// constants for serialization\n\nTransition.EPSILON = 1;\nTransition.RANGE = 2;\nTransition.RULE = 3;\n// e.g., {isType(input.LT(1))}?\nTransition.PREDICATE = 4;\nTransition.ATOM = 5;\nTransition.ACTION = 6;\n// ~(A|B) or ~atom, wildcard, which convert to next 2\nTransition.SET = 7;\nTransition.NOT_SET = 8;\nTransition.WILDCARD = 9;\nTransition.PRECEDENCE = 10;\n\nTransition.serializationNames = [\n            \"INVALID\",\n            \"EPSILON\",\n            \"RANGE\",\n            \"RULE\",\n            \"PREDICATE\",\n            \"ATOM\",\n            \"ACTION\",\n            \"SET\",\n            \"NOT_SET\",\n            \"WILDCARD\",\n            \"PRECEDENCE\"\n        ];\n\nTransition.serializationTypes = {\n        EpsilonTransition: Transition.EPSILON,\n        RangeTransition: Transition.RANGE,\n        RuleTransition: Transition.RULE,\n        PredicateTransition: Transition.PREDICATE,\n        AtomTransition: Transition.ATOM,\n        ActionTransition: Transition.ACTION,\n        SetTransition: Transition.SET,\n        NotSetTransition: Transition.NOT_SET,\n        WildcardTransition: Transition.WILDCARD,\n        PrecedencePredicateTransition: Transition.PRECEDENCE\n    };\n\n\n// TODO: make all transitions sets? no, should remove set edges\n\nclass AtomTransition extends Transition {\n    constructor(target, label) {\n        super(target);\n        // The token type or character value; or, signifies special label.\n        this.label_ = label;\n        this.label = this.makeLabel();\n        this.serializationType = Transition.ATOM;\n    }\n\n    makeLabel() {\n        const s = new IntervalSet();\n        s.addOne(this.label_);\n        return s;\n    }\n\n    matches(symbol, minVocabSymbol, maxVocabSymbol) {\n        return this.label_ === symbol;\n    }\n\n    toString() {\n        return this.label_;\n    }\n}\n\n\nclass RuleTransition extends Transition {\n    constructor(ruleStart, ruleIndex, precedence, followState) {\n        super(ruleStart);\n        // ptr to the rule definition object for this rule ref\n        this.ruleIndex = ruleIndex;\n        this.precedence = precedence;\n        // what node to begin computations following ref to rule\n        this.followState = followState;\n        this.serializationType = Transition.RULE;\n        this.isEpsilon = true;\n    }\n\n    matches(symbol, minVocabSymbol, maxVocabSymbol) {\n        return false;\n    }\n}\n\nclass EpsilonTransition extends Transition {\n    constructor(target, outermostPrecedenceReturn) {\n        super(target);\n        this.serializationType = Transition.EPSILON;\n        this.isEpsilon = true;\n        this.outermostPrecedenceReturn = outermostPrecedenceReturn;\n    }\n\n    matches(symbol, minVocabSymbol, maxVocabSymbol) {\n        return false;\n    }\n\n    toString() {\n        return \"epsilon\";\n    }\n}\n\n\nclass RangeTransition extends Transition {\n    constructor(target, start, stop) {\n        super(target);\n        this.serializationType = Transition.RANGE;\n        this.start = start;\n        this.stop = stop;\n        this.label = this.makeLabel();\n    }\n\n    makeLabel() {\n        const s = new IntervalSet();\n        s.addRange(this.start, this.stop);\n        return s;\n    }\n\n    matches(symbol, minVocabSymbol, maxVocabSymbol) {\n        return symbol >= this.start && symbol <= this.stop;\n    }\n\n    toString() {\n        return \"'\" + String.fromCharCode(this.start) + \"'..'\" + String.fromCharCode(this.stop) + \"'\";\n    }\n}\n\n\nclass AbstractPredicateTransition extends Transition {\n    constructor(target) {\n        super(target);\n    }\n}\n\nclass PredicateTransition extends AbstractPredicateTransition {\n    constructor(target, ruleIndex, predIndex, isCtxDependent) {\n        super(target);\n        this.serializationType = Transition.PREDICATE;\n        this.ruleIndex = ruleIndex;\n        this.predIndex = predIndex;\n        this.isCtxDependent = isCtxDependent; // e.g., $i ref in pred\n        this.isEpsilon = true;\n    }\n\n    matches(symbol, minVocabSymbol, maxVocabSymbol) {\n        return false;\n    }\n\n    getPredicate() {\n        return new Predicate(this.ruleIndex, this.predIndex, this.isCtxDependent);\n    }\n\n    toString() {\n        return \"pred_\" + this.ruleIndex + \":\" + this.predIndex;\n    }\n}\n\n\nclass ActionTransition extends Transition {\n    constructor(target, ruleIndex, actionIndex, isCtxDependent) {\n        super(target);\n        this.serializationType = Transition.ACTION;\n        this.ruleIndex = ruleIndex;\n        this.actionIndex = actionIndex===undefined ? -1 : actionIndex;\n        this.isCtxDependent = isCtxDependent===undefined ? false : isCtxDependent; // e.g., $i ref in pred\n        this.isEpsilon = true;\n    }\n\n    matches(symbol, minVocabSymbol, maxVocabSymbol) {\n        return false;\n    }\n\n    toString() {\n        return \"action_\" + this.ruleIndex + \":\" + this.actionIndex;\n    }\n}\n\n\n// A transition containing a set of values.\nclass SetTransition extends Transition {\n    constructor(target, set) {\n        super(target);\n        this.serializationType = Transition.SET;\n        if (set !==undefined && set !==null) {\n            this.label = set;\n        } else {\n            this.label = new IntervalSet();\n            this.label.addOne(Token.INVALID_TYPE);\n        }\n    }\n\n    matches(symbol, minVocabSymbol, maxVocabSymbol) {\n        return this.label.contains(symbol);\n    }\n\n    toString() {\n        return this.label.toString();\n    }\n}\n\nclass NotSetTransition extends SetTransition {\n    constructor(target, set) {\n        super(target, set);\n        this.serializationType = Transition.NOT_SET;\n    }\n\n    matches(symbol, minVocabSymbol, maxVocabSymbol) {\n        return symbol >= minVocabSymbol && symbol <= maxVocabSymbol &&\n                !super.matches(symbol, minVocabSymbol, maxVocabSymbol);\n    }\n\n    toString() {\n        return '~' + super.toString();\n    }\n}\n\nclass WildcardTransition extends Transition {\n    constructor(target) {\n        super(target);\n        this.serializationType = Transition.WILDCARD;\n    }\n\n    matches(symbol, minVocabSymbol, maxVocabSymbol) {\n        return symbol >= minVocabSymbol && symbol <= maxVocabSymbol;\n    }\n\n    toString() {\n        return \".\";\n    }\n}\n\nclass PrecedencePredicateTransition extends AbstractPredicateTransition {\n    constructor(target, precedence) {\n        super(target);\n        this.serializationType = Transition.PRECEDENCE;\n        this.precedence = precedence;\n        this.isEpsilon = true;\n    }\n\n    matches(symbol, minVocabSymbol, maxVocabSymbol) {\n        return false;\n    }\n\n    getPredicate() {\n        return new PrecedencePredicate(this.precedence);\n    }\n\n    toString() {\n        return this.precedence + \" >= _p\";\n    }\n}\n\nmodule.exports = {\n    Transition,\n    AtomTransition,\n    SetTransition,\n    NotSetTransition,\n    RuleTransition,\n    ActionTransition,\n    EpsilonTransition,\n    RangeTransition,\n    WildcardTransition,\n    PredicateTransition,\n    PrecedencePredicateTransition,\n    AbstractPredicateTransition\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/atn/Transition.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/atn/index.js":
/*!**************************************************************************************!*\
  !*** ../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/atn/index.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nexports.ATN = __webpack_require__(/*! ./ATN */ \"(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/atn/ATN.js\");\nexports.ATNDeserializer = __webpack_require__(/*! ./ATNDeserializer */ \"(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/atn/ATNDeserializer.js\");\nexports.LexerATNSimulator = __webpack_require__(/*! ./LexerATNSimulator */ \"(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/atn/LexerATNSimulator.js\");\nexports.ParserATNSimulator = __webpack_require__(/*! ./ParserATNSimulator */ \"(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/atn/ParserATNSimulator.js\");\nexports.PredictionMode = __webpack_require__(/*! ./PredictionMode */ \"(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/atn/PredictionMode.js\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2FudGxyNEA0LjkuMy9ub2RlX21vZHVsZXMvYW50bHI0L3NyYy9hbnRscjQvYXRuL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLG9JQUE4QjtBQUM5Qix3S0FBc0Q7QUFDdEQsOEtBQTBEO0FBQzFELGlMQUE0RDtBQUM1RCxxS0FBb0QiLCJzb3VyY2VzIjpbIi9Vc2Vycy9ldGhhbmtpbS9OZXN0b3IvbWVkZmV0Y2guanMvbm9kZV9tb2R1bGVzLy5wbnBtL2FudGxyNEA0LjkuMy9ub2RlX21vZHVsZXMvYW50bHI0L3NyYy9hbnRscjQvYXRuL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIENvcHlyaWdodCAoYykgMjAxMi0yMDE3IFRoZSBBTlRMUiBQcm9qZWN0LiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogVXNlIG9mIHRoaXMgZmlsZSBpcyBnb3Zlcm5lZCBieSB0aGUgQlNEIDMtY2xhdXNlIGxpY2Vuc2UgdGhhdFxuICogY2FuIGJlIGZvdW5kIGluIHRoZSBMSUNFTlNFLnR4dCBmaWxlIGluIHRoZSBwcm9qZWN0IHJvb3QuXG4gKi9cblxuZXhwb3J0cy5BVE4gPSByZXF1aXJlKCcuL0FUTicpO1xuZXhwb3J0cy5BVE5EZXNlcmlhbGl6ZXIgPSByZXF1aXJlKCcuL0FUTkRlc2VyaWFsaXplcicpO1xuZXhwb3J0cy5MZXhlckFUTlNpbXVsYXRvciA9IHJlcXVpcmUoJy4vTGV4ZXJBVE5TaW11bGF0b3InKTtcbmV4cG9ydHMuUGFyc2VyQVROU2ltdWxhdG9yID0gcmVxdWlyZSgnLi9QYXJzZXJBVE5TaW11bGF0b3InKTtcbmV4cG9ydHMuUHJlZGljdGlvbk1vZGUgPSByZXF1aXJlKCcuL1ByZWRpY3Rpb25Nb2RlJyk7XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/atn/index.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/dfa/DFA.js":
/*!************************************************************************************!*\
  !*** ../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/dfa/DFA.js ***!
  \************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nconst {Set} = __webpack_require__(/*! ../Utils */ \"(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/Utils.js\");\nconst {DFAState} = __webpack_require__(/*! ./DFAState */ \"(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/dfa/DFAState.js\");\nconst {StarLoopEntryState} = __webpack_require__(/*! ../atn/ATNState */ \"(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/atn/ATNState.js\");\nconst {ATNConfigSet} = __webpack_require__(/*! ./../atn/ATNConfigSet */ \"(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/atn/ATNConfigSet.js\");\nconst {DFASerializer} = __webpack_require__(/*! ./DFASerializer */ \"(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/dfa/DFASerializer.js\");\nconst {LexerDFASerializer} = __webpack_require__(/*! ./DFASerializer */ \"(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/dfa/DFASerializer.js\");\n\nclass DFA {\n\tconstructor(atnStartState, decision) {\n\t\tif (decision === undefined) {\n\t\t\tdecision = 0;\n\t\t}\n\t\t/**\n\t\t * From which ATN state did we create this DFA?\n\t\t */\n\t\tthis.atnStartState = atnStartState;\n\t\tthis.decision = decision;\n\t\t/**\n\t\t * A set of all DFA states. Use {@link Map} so we can get old state back\n\t\t * ({@link Set} only allows you to see if it's there).\n\t\t */\n\t\tthis._states = new Set();\n\t\tthis.s0 = null;\n\t\t/**\n\t\t * {@code true} if this DFA is for a precedence decision; otherwise,\n\t\t * {@code false}. This is the backing field for {@link //isPrecedenceDfa},\n\t\t * {@link //setPrecedenceDfa}\n\t\t */\n\t\tthis.precedenceDfa = false;\n\t\tif (atnStartState instanceof StarLoopEntryState)\n\t\t{\n\t\t\tif (atnStartState.isPrecedenceDecision) {\n\t\t\t\tthis.precedenceDfa = true;\n\t\t\t\tconst precedenceState = new DFAState(null, new ATNConfigSet());\n\t\t\t\tprecedenceState.edges = [];\n\t\t\t\tprecedenceState.isAcceptState = false;\n\t\t\t\tprecedenceState.requiresFullContext = false;\n\t\t\t\tthis.s0 = precedenceState;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Get the start state for a specific precedence value.\n\t *\n\t * @param precedence The current precedence.\n\t * @return The start state corresponding to the specified precedence, or\n\t * {@code null} if no start state exists for the specified precedence.\n\t *\n\t * @throws IllegalStateException if this is not a precedence DFA.\n\t * @see //isPrecedenceDfa()\n\t */\n\tgetPrecedenceStartState(precedence) {\n\t\tif (!(this.precedenceDfa)) {\n\t\t\tthrow (\"Only precedence DFAs may contain a precedence start state.\");\n\t\t}\n\t\t// s0.edges is never null for a precedence DFA\n\t\tif (precedence < 0 || precedence >= this.s0.edges.length) {\n\t\t\treturn null;\n\t\t}\n\t\treturn this.s0.edges[precedence] || null;\n\t}\n\n\t/**\n\t * Set the start state for a specific precedence value.\n\t *\n\t * @param precedence The current precedence.\n\t * @param startState The start state corresponding to the specified\n\t * precedence.\n\t *\n\t * @throws IllegalStateException if this is not a precedence DFA.\n\t * @see //isPrecedenceDfa()\n\t */\n\tsetPrecedenceStartState(precedence, startState) {\n\t\tif (!(this.precedenceDfa)) {\n\t\t\tthrow (\"Only precedence DFAs may contain a precedence start state.\");\n\t\t}\n\t\tif (precedence < 0) {\n\t\t\treturn;\n\t\t}\n\n\t\t/**\n\t\t * synchronization on s0 here is ok. when the DFA is turned into a\n\t\t * precedence DFA, s0 will be initialized once and not updated again\n\t\t * s0.edges is never null for a precedence DFA\n\t\t */\n\t\tthis.s0.edges[precedence] = startState;\n\t}\n\n\t/**\n\t * Sets whether this is a precedence DFA. If the specified value differs\n\t * from the current DFA configuration, the following actions are taken;\n\t * otherwise no changes are made to the current DFA.\n\t *\n\t * <ul>\n\t * <li>The {@link //states} map is cleared</li>\n\t * <li>If {@code precedenceDfa} is {@code false}, the initial state\n\t * {@link //s0} is set to {@code null}; otherwise, it is initialized to a new\n\t * {@link DFAState} with an empty outgoing {@link DFAState//edges} array to\n\t * store the start states for individual precedence values.</li>\n\t * <li>The {@link //precedenceDfa} field is updated</li>\n\t * </ul>\n\t *\n\t * @param precedenceDfa {@code true} if this is a precedence DFA; otherwise,\n\t * {@code false}\n\t */\n\tsetPrecedenceDfa(precedenceDfa) {\n\t\tif (this.precedenceDfa!==precedenceDfa) {\n\t\t\tthis._states = new Set();\n\t\t\tif (precedenceDfa) {\n\t\t\t\tconst precedenceState = new DFAState(null, new ATNConfigSet());\n\t\t\t\tprecedenceState.edges = [];\n\t\t\t\tprecedenceState.isAcceptState = false;\n\t\t\t\tprecedenceState.requiresFullContext = false;\n\t\t\t\tthis.s0 = precedenceState;\n\t\t\t} else {\n\t\t\t\tthis.s0 = null;\n\t\t\t}\n\t\t\tthis.precedenceDfa = precedenceDfa;\n\t\t}\n\t}\n\n\t/**\n\t * Return a list of all states in this DFA, ordered by state number.\n\t */\n\tsortedStates() {\n\t\tconst list = this._states.values();\n\t\treturn list.sort(function(a, b) {\n\t\t\treturn a.stateNumber - b.stateNumber;\n\t\t});\n\t}\n\n\ttoString(literalNames, symbolicNames) {\n\t\tliteralNames = literalNames || null;\n\t\tsymbolicNames = symbolicNames || null;\n\t\tif (this.s0 === null) {\n\t\t\treturn \"\";\n\t\t}\n\t\tconst serializer = new DFASerializer(this, literalNames, symbolicNames);\n\t\treturn serializer.toString();\n\t}\n\n\ttoLexerString() {\n\t\tif (this.s0 === null) {\n\t\t\treturn \"\";\n\t\t}\n\t\tconst serializer = new LexerDFASerializer(this);\n\t\treturn serializer.toString();\n\t}\n\n\tget states(){\n\t\treturn this._states;\n\t}\n}\n\n\nmodule.exports = DFA;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/dfa/DFA.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/dfa/DFASerializer.js":
/*!**********************************************************************************************!*\
  !*** ../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/dfa/DFASerializer.js ***!
  \**********************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\nconst Utils = __webpack_require__(/*! ./../Utils */ \"(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/Utils.js\");\n\n/**\n * A DFA walker that knows how to dump them to serialized strings.\n */\nclass DFASerializer {\n    constructor(dfa, literalNames, symbolicNames) {\n        this.dfa = dfa;\n        this.literalNames = literalNames || [];\n        this.symbolicNames = symbolicNames || [];\n    }\n\n    toString() {\n       if(this.dfa.s0 === null) {\n           return null;\n       }\n       let buf = \"\";\n       const states = this.dfa.sortedStates();\n       for(let i=0; i<states.length; i++) {\n           const s = states[i];\n           if(s.edges!==null) {\n                const n = s.edges.length;\n                for(let j=0;j<n;j++) {\n                    const t = s.edges[j] || null;\n                    if(t!==null && t.stateNumber !== 0x7FFFFFFF) {\n                        buf = buf.concat(this.getStateString(s));\n                        buf = buf.concat(\"-\");\n                        buf = buf.concat(this.getEdgeLabel(j));\n                        buf = buf.concat(\"->\");\n                        buf = buf.concat(this.getStateString(t));\n                        buf = buf.concat('\\n');\n                    }\n                }\n           }\n       }\n       return buf.length===0 ? null : buf;\n    }\n\n    getEdgeLabel(i) {\n        if (i===0) {\n            return \"EOF\";\n        } else if(this.literalNames !==null || this.symbolicNames!==null) {\n            return this.literalNames[i-1] || this.symbolicNames[i-1];\n        } else {\n            return String.fromCharCode(i-1);\n        }\n    }\n\n    getStateString(s) {\n        const baseStateStr = ( s.isAcceptState ? \":\" : \"\") + \"s\" + s.stateNumber + ( s.requiresFullContext ? \"^\" : \"\");\n        if(s.isAcceptState) {\n            if (s.predicates !== null) {\n                return baseStateStr + \"=>\" + Utils.arrayToString(s.predicates);\n            } else {\n                return baseStateStr + \"=>\" + s.prediction.toString();\n            }\n        } else {\n            return baseStateStr;\n        }\n    }\n}\n\nclass LexerDFASerializer extends DFASerializer {\n    constructor(dfa) {\n        super(dfa, null);\n    }\n\n    getEdgeLabel(i) {\n        return \"'\" + String.fromCharCode(i) + \"'\";\n    }\n}\n\nmodule.exports = { DFASerializer , LexerDFASerializer };\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2FudGxyNEA0LjkuMy9ub2RlX21vZHVsZXMvYW50bHI0L3NyYy9hbnRscjQvZGZhL0RGQVNlcmlhbGl6ZXIuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLG1CQUFPLENBQUMsb0dBQVk7O0FBRWxDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsaUJBQWlCO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QixJQUFJO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsbUJBQW1CIiwic291cmNlcyI6WyIvVXNlcnMvZXRoYW5raW0vTmVzdG9yL21lZGZldGNoLmpzL25vZGVfbW9kdWxlcy8ucG5wbS9hbnRscjRANC45LjMvbm9kZV9tb2R1bGVzL2FudGxyNC9zcmMvYW50bHI0L2RmYS9ERkFTZXJpYWxpemVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIENvcHlyaWdodCAoYykgMjAxMi0yMDE3IFRoZSBBTlRMUiBQcm9qZWN0LiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogVXNlIG9mIHRoaXMgZmlsZSBpcyBnb3Zlcm5lZCBieSB0aGUgQlNEIDMtY2xhdXNlIGxpY2Vuc2UgdGhhdFxuICogY2FuIGJlIGZvdW5kIGluIHRoZSBMSUNFTlNFLnR4dCBmaWxlIGluIHRoZSBwcm9qZWN0IHJvb3QuXG4gKi9cbmNvbnN0IFV0aWxzID0gcmVxdWlyZSgnLi8uLi9VdGlscycpO1xuXG4vKipcbiAqIEEgREZBIHdhbGtlciB0aGF0IGtub3dzIGhvdyB0byBkdW1wIHRoZW0gdG8gc2VyaWFsaXplZCBzdHJpbmdzLlxuICovXG5jbGFzcyBERkFTZXJpYWxpemVyIHtcbiAgICBjb25zdHJ1Y3RvcihkZmEsIGxpdGVyYWxOYW1lcywgc3ltYm9saWNOYW1lcykge1xuICAgICAgICB0aGlzLmRmYSA9IGRmYTtcbiAgICAgICAgdGhpcy5saXRlcmFsTmFtZXMgPSBsaXRlcmFsTmFtZXMgfHwgW107XG4gICAgICAgIHRoaXMuc3ltYm9saWNOYW1lcyA9IHN5bWJvbGljTmFtZXMgfHwgW107XG4gICAgfVxuXG4gICAgdG9TdHJpbmcoKSB7XG4gICAgICAgaWYodGhpcy5kZmEuczAgPT09IG51bGwpIHtcbiAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgfVxuICAgICAgIGxldCBidWYgPSBcIlwiO1xuICAgICAgIGNvbnN0IHN0YXRlcyA9IHRoaXMuZGZhLnNvcnRlZFN0YXRlcygpO1xuICAgICAgIGZvcihsZXQgaT0wOyBpPHN0YXRlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICBjb25zdCBzID0gc3RhdGVzW2ldO1xuICAgICAgICAgICBpZihzLmVkZ2VzIT09bnVsbCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IG4gPSBzLmVkZ2VzLmxlbmd0aDtcbiAgICAgICAgICAgICAgICBmb3IobGV0IGo9MDtqPG47aisrKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHQgPSBzLmVkZ2VzW2pdIHx8IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIGlmKHQhPT1udWxsICYmIHQuc3RhdGVOdW1iZXIgIT09IDB4N0ZGRkZGRkYpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJ1ZiA9IGJ1Zi5jb25jYXQodGhpcy5nZXRTdGF0ZVN0cmluZyhzKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBidWYgPSBidWYuY29uY2F0KFwiLVwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJ1ZiA9IGJ1Zi5jb25jYXQodGhpcy5nZXRFZGdlTGFiZWwoaikpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnVmID0gYnVmLmNvbmNhdChcIi0+XCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnVmID0gYnVmLmNvbmNhdCh0aGlzLmdldFN0YXRlU3RyaW5nKHQpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJ1ZiA9IGJ1Zi5jb25jYXQoJ1xcbicpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICB9XG4gICAgICAgfVxuICAgICAgIHJldHVybiBidWYubGVuZ3RoPT09MCA/IG51bGwgOiBidWY7XG4gICAgfVxuXG4gICAgZ2V0RWRnZUxhYmVsKGkpIHtcbiAgICAgICAgaWYgKGk9PT0wKSB7XG4gICAgICAgICAgICByZXR1cm4gXCJFT0ZcIjtcbiAgICAgICAgfSBlbHNlIGlmKHRoaXMubGl0ZXJhbE5hbWVzICE9PW51bGwgfHwgdGhpcy5zeW1ib2xpY05hbWVzIT09bnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubGl0ZXJhbE5hbWVzW2ktMV0gfHwgdGhpcy5zeW1ib2xpY05hbWVzW2ktMV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShpLTEpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZ2V0U3RhdGVTdHJpbmcocykge1xuICAgICAgICBjb25zdCBiYXNlU3RhdGVTdHIgPSAoIHMuaXNBY2NlcHRTdGF0ZSA/IFwiOlwiIDogXCJcIikgKyBcInNcIiArIHMuc3RhdGVOdW1iZXIgKyAoIHMucmVxdWlyZXNGdWxsQ29udGV4dCA/IFwiXlwiIDogXCJcIik7XG4gICAgICAgIGlmKHMuaXNBY2NlcHRTdGF0ZSkge1xuICAgICAgICAgICAgaWYgKHMucHJlZGljYXRlcyAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBiYXNlU3RhdGVTdHIgKyBcIj0+XCIgKyBVdGlscy5hcnJheVRvU3RyaW5nKHMucHJlZGljYXRlcyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBiYXNlU3RhdGVTdHIgKyBcIj0+XCIgKyBzLnByZWRpY3Rpb24udG9TdHJpbmcoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBiYXNlU3RhdGVTdHI7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmNsYXNzIExleGVyREZBU2VyaWFsaXplciBleHRlbmRzIERGQVNlcmlhbGl6ZXIge1xuICAgIGNvbnN0cnVjdG9yKGRmYSkge1xuICAgICAgICBzdXBlcihkZmEsIG51bGwpO1xuICAgIH1cblxuICAgIGdldEVkZ2VMYWJlbChpKSB7XG4gICAgICAgIHJldHVybiBcIidcIiArIFN0cmluZy5mcm9tQ2hhckNvZGUoaSkgKyBcIidcIjtcbiAgICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0geyBERkFTZXJpYWxpemVyICwgTGV4ZXJERkFTZXJpYWxpemVyIH07XG5cbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/dfa/DFASerializer.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/dfa/DFAState.js":
/*!*****************************************************************************************!*\
  !*** ../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/dfa/DFAState.js ***!
  \*****************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nconst {ATNConfigSet} = __webpack_require__(/*! ./../atn/ATNConfigSet */ \"(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/atn/ATNConfigSet.js\");\nconst {Hash, Set} = __webpack_require__(/*! ./../Utils */ \"(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/Utils.js\");\n\n/**\n * Map a predicate to a predicted alternative.\n */\nclass PredPrediction {\n\tconstructor(pred, alt) {\n\t\tthis.alt = alt;\n\t\tthis.pred = pred;\n\t}\n\n\ttoString() {\n\t\treturn \"(\" + this.pred + \", \" + this.alt + \")\";\n\t}\n}\n\n/**\n * A DFA state represents a set of possible ATN configurations.\n * As Aho, Sethi, Ullman p. 117 says \"The DFA uses its state\n * to keep track of all possible states the ATN can be in after\n * reading each input symbol. That is to say, after reading\n * input a1a2..an, the DFA is in a state that represents the\n * subset T of the states of the ATN that are reachable from the\n * ATN's start state along some path labeled a1a2..an.\"\n * In conventional NFA&rarr;DFA conversion, therefore, the subset T\n * would be a bitset representing the set of states the\n * ATN could be in. We need to track the alt predicted by each\n * state as well, however. More importantly, we need to maintain\n * a stack of states, tracking the closure operations as they\n * jump from rule to rule, emulating rule invocations (method calls).\n * I have to add a stack to simulate the proper lookahead sequences for\n * the underlying LL grammar from which the ATN was derived.\n *\n * <p>I use a set of ATNConfig objects not simple states. An ATNConfig\n * is both a state (ala normal conversion) and a RuleContext describing\n * the chain of rules (if any) followed to arrive at that state.</p>\n *\n * <p>A DFA state may have multiple references to a particular state,\n * but with different ATN contexts (with same or different alts)\n * meaning that state was reached via a different set of rule invocations.</p>\n */\nclass DFAState {\n\tconstructor(stateNumber, configs) {\n\t\tif (stateNumber === null) {\n\t\t\tstateNumber = -1;\n\t\t}\n\t\tif (configs === null) {\n\t\t\tconfigs = new ATNConfigSet();\n\t\t}\n\t\tthis.stateNumber = stateNumber;\n\t\tthis.configs = configs;\n\t\t/**\n\t\t * {@code edges[symbol]} points to target of symbol. Shift up by 1 so (-1)\n\t\t * {@link Token//EOF} maps to {@code edges[0]}.\n\t\t */\n\t\tthis.edges = null;\n\t\tthis.isAcceptState = false;\n\t\t/**\n\t\t * if accept state, what ttype do we match or alt do we predict?\n\t\t * This is set to {@link ATN//INVALID_ALT_NUMBER} when {@link//predicates}\n\t\t * {@code !=null} or {@link //requiresFullContext}.\n\t\t */\n\t\tthis.prediction = 0;\n\t\tthis.lexerActionExecutor = null;\n\t\t/**\n\t\t * Indicates that this state was created during SLL prediction that\n\t\t * discovered a conflict between the configurations in the state. Future\n\t\t * {@link ParserATNSimulator//execATN} invocations immediately jumped doing\n\t\t * full context prediction if this field is true.\n\t\t */\n\t\tthis.requiresFullContext = false;\n\t\t/**\n\t\t * During SLL parsing, this is a list of predicates associated with the\n\t\t * ATN configurations of the DFA state. When we have predicates,\n\t\t * {@link //requiresFullContext} is {@code false} since full context\n\t\t * prediction evaluates predicates\n\t\t * on-the-fly. If this is not null, then {@link //prediction} is\n\t\t * {@link ATN//INVALID_ALT_NUMBER}.\n\t\t *\n\t\t * <p>We only use these for non-{@link //requiresFullContext} but\n\t\t * conflicting states. That\n\t\t * means we know from the context (it's $ or we don't dip into outer\n\t\t * context) that it's an ambiguity not a conflict.</p>\n\t\t *\n\t\t * <p>This list is computed by {@link\n\t\t * ParserATNSimulator//predicateDFAState}.</p>\n\t\t */\n\t\tthis.predicates = null;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Get the set of all alts mentioned by all ATN configurations in this\n\t * DFA state.\n\t */\n\tgetAltSet() {\n\t\tconst alts = new Set();\n\t\tif (this.configs !== null) {\n\t\t\tfor (let i = 0; i < this.configs.length; i++) {\n\t\t\t\tconst c = this.configs[i];\n\t\t\t\talts.add(c.alt);\n\t\t\t}\n\t\t}\n\t\tif (alts.length === 0) {\n\t\t\treturn null;\n\t\t} else {\n\t\t\treturn alts;\n\t\t}\n\t}\n\n\t/**\n\t * Two {@link DFAState} instances are equal if their ATN configuration sets\n\t * are the same. This method is used to see if a state already exists.\n\t *\n\t * <p>Because the number of alternatives and number of ATN configurations are\n\t * finite, there is a finite number of DFA states that can be processed.\n\t * This is necessary to show that the algorithm terminates.</p>\n\t *\n\t * <p>Cannot test the DFA state numbers here because in\n\t * {@link ParserATNSimulator//addDFAState} we need to know if any other state\n\t * exists that has this exact set of ATN configurations. The\n\t * {@link //stateNumber} is irrelevant.</p>\n\t */\n\tequals(other) {\n\t\t// compare set of ATN configurations in this set with other\n\t\treturn this === other ||\n\t\t\t\t(other instanceof DFAState &&\n\t\t\t\t\tthis.configs.equals(other.configs));\n\t}\n\n\ttoString() {\n\t\tlet s = \"\" + this.stateNumber + \":\" + this.configs;\n\t\tif(this.isAcceptState) {\n\t\t\ts = s + \"=>\";\n\t\t\tif (this.predicates !== null)\n\t\t\t\ts = s + this.predicates;\n\t\t\telse\n\t\t\t\ts = s + this.prediction;\n\t\t}\n\t\treturn s;\n\t}\n\n\thashCode() {\n\t\tconst hash = new Hash();\n\t\thash.update(this.configs);\n\t\treturn hash.finish();\n\t}\n}\n\nmodule.exports = { DFAState, PredPrediction };\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/dfa/DFAState.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/dfa/index.js":
/*!**************************************************************************************!*\
  !*** ../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/dfa/index.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nexports.DFA = __webpack_require__(/*! ./DFA */ \"(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/dfa/DFA.js\");\nexports.DFASerializer = __webpack_require__(/*! ./DFASerializer */ \"(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/dfa/DFASerializer.js\").DFASerializer;\nexports.LexerDFASerializer = __webpack_require__(/*! ./DFASerializer */ \"(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/dfa/DFASerializer.js\").LexerDFASerializer;\nexports.PredPrediction = __webpack_require__(/*! ./DFAState */ \"(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/dfa/DFAState.js\").PredPrediction;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2FudGxyNEA0LjkuMy9ub2RlX21vZHVsZXMvYW50bHI0L3NyYy9hbnRscjQvZGZhL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLG9JQUE4QjtBQUM5QixnTEFBZ0U7QUFDaEUsMExBQTBFO0FBQzFFLHdLQUE2RCIsInNvdXJjZXMiOlsiL1VzZXJzL2V0aGFua2ltL05lc3Rvci9tZWRmZXRjaC5qcy9ub2RlX21vZHVsZXMvLnBucG0vYW50bHI0QDQuOS4zL25vZGVfbW9kdWxlcy9hbnRscjQvc3JjL2FudGxyNC9kZmEvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyogQ29weXJpZ2h0IChjKSAyMDEyLTIwMTcgVGhlIEFOVExSIFByb2plY3QuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBVc2Ugb2YgdGhpcyBmaWxlIGlzIGdvdmVybmVkIGJ5IHRoZSBCU0QgMy1jbGF1c2UgbGljZW5zZSB0aGF0XG4gKiBjYW4gYmUgZm91bmQgaW4gdGhlIExJQ0VOU0UudHh0IGZpbGUgaW4gdGhlIHByb2plY3Qgcm9vdC5cbiAqL1xuXG5leHBvcnRzLkRGQSA9IHJlcXVpcmUoJy4vREZBJyk7XG5leHBvcnRzLkRGQVNlcmlhbGl6ZXIgPSByZXF1aXJlKCcuL0RGQVNlcmlhbGl6ZXInKS5ERkFTZXJpYWxpemVyO1xuZXhwb3J0cy5MZXhlckRGQVNlcmlhbGl6ZXIgPSByZXF1aXJlKCcuL0RGQVNlcmlhbGl6ZXInKS5MZXhlckRGQVNlcmlhbGl6ZXI7XG5leHBvcnRzLlByZWRQcmVkaWN0aW9uID0gcmVxdWlyZSgnLi9ERkFTdGF0ZScpLlByZWRQcmVkaWN0aW9uO1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/dfa/index.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/error/DiagnosticErrorListener.js":
/*!**********************************************************************************************************!*\
  !*** ../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/error/DiagnosticErrorListener.js ***!
  \**********************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nconst {BitSet} = __webpack_require__(/*! ./../Utils */ \"(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/Utils.js\");\nconst {ErrorListener} = __webpack_require__(/*! ./ErrorListener */ \"(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/error/ErrorListener.js\")\nconst {Interval} = __webpack_require__(/*! ./../IntervalSet */ \"(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/IntervalSet.js\")\n\n\n/**\n * This implementation of {@link ANTLRErrorListener} can be used to identify\n *  certain potential correctness and performance problems in grammars. \"Reports\"\n *  are made by calling {@link Parser//notifyErrorListeners} with the appropriate\n *  message.\n *\n *  <ul>\n *  <li><b>Ambiguities</b>: These are cases where more than one path through the\n *  grammar can match the input.</li>\n *  <li><b>Weak context sensitivity</b>: These are cases where full-context\n *  prediction resolved an SLL conflict to a unique alternative which equaled the\n *  minimum alternative of the SLL conflict.</li>\n *  <li><b>Strong (forced) context sensitivity</b>: These are cases where the\n *  full-context prediction resolved an SLL conflict to a unique alternative,\n *  <em>and</em> the minimum alternative of the SLL conflict was found to not be\n *  a truly viable alternative. Two-stage parsing cannot be used for inputs where\n *  this situation occurs.</li>\n *  </ul>\n */\nclass DiagnosticErrorListener extends ErrorListener {\n\tconstructor(exactOnly) {\n\t\tsuper();\n\t\texactOnly = exactOnly || true;\n\t\t// whether all ambiguities or only exact ambiguities are reported.\n\t\tthis.exactOnly = exactOnly;\n\t}\n\n\treportAmbiguity(recognizer, dfa, startIndex, stopIndex, exact, ambigAlts, configs) {\n\t\tif (this.exactOnly && !exact) {\n\t\t\treturn;\n\t\t}\n\t\tconst msg = \"reportAmbiguity d=\" +\n\t\t\tthis.getDecisionDescription(recognizer, dfa) +\n\t\t\t\": ambigAlts=\" +\n\t\t\tthis.getConflictingAlts(ambigAlts, configs) +\n\t\t\t\", input='\" +\n\t\t\trecognizer.getTokenStream().getText(new Interval(startIndex, stopIndex)) + \"'\"\n\t\trecognizer.notifyErrorListeners(msg);\n\t}\n\n\treportAttemptingFullContext(recognizer, dfa, startIndex, stopIndex, conflictingAlts, configs) {\n\t\tconst msg = \"reportAttemptingFullContext d=\" +\n\t\t\tthis.getDecisionDescription(recognizer, dfa) +\n\t\t\t\", input='\" +\n\t\t\trecognizer.getTokenStream().getText(new Interval(startIndex, stopIndex)) + \"'\"\n\t\trecognizer.notifyErrorListeners(msg);\n\t}\n\n\treportContextSensitivity(recognizer, dfa, startIndex, stopIndex, prediction, configs) {\n\t\tconst msg = \"reportContextSensitivity d=\" +\n\t\t\tthis.getDecisionDescription(recognizer, dfa) +\n\t\t\t\", input='\" +\n\t\t\trecognizer.getTokenStream().getText(new Interval(startIndex, stopIndex)) + \"'\"\n\t\trecognizer.notifyErrorListeners(msg);\n\t}\n\n\tgetDecisionDescription(recognizer, dfa) {\n\t\tconst decision = dfa.decision\n\t\tconst ruleIndex = dfa.atnStartState.ruleIndex\n\n\t\tconst ruleNames = recognizer.ruleNames\n\t\tif (ruleIndex < 0 || ruleIndex >= ruleNames.length) {\n\t\t\treturn \"\" + decision;\n\t\t}\n\t\tconst ruleName = ruleNames[ruleIndex] || null\n\t\tif (ruleName === null || ruleName.length === 0) {\n\t\t\treturn \"\" + decision;\n\t\t}\n\t\treturn `${decision} (${ruleName})`;\n\t}\n\n\t/**\n\t * Computes the set of conflicting or ambiguous alternatives from a\n\t * configuration set, if that information was not already provided by the\n\t * parser.\n\t *\n\t * @param reportedAlts The set of conflicting or ambiguous alternatives, as\n\t * reported by the parser.\n\t * @param configs The conflicting or ambiguous configuration set.\n\t * @return Returns {@code reportedAlts} if it is not {@code null}, otherwise\n\t * returns the set of alternatives represented in {@code configs}.\n     */\n\tgetConflictingAlts(reportedAlts, configs) {\n\t\tif (reportedAlts !== null) {\n\t\t\treturn reportedAlts;\n\t\t}\n\t\tconst result = new BitSet()\n\t\tfor (let i = 0; i < configs.items.length; i++) {\n\t\t\tresult.add(configs.items[i].alt);\n\t\t}\n\t\treturn `{${result.values().join(\", \")}}`;\n\t}\n}\n\nmodule.exports = DiagnosticErrorListener\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2FudGxyNEA0LjkuMy9ub2RlX21vZHVsZXMvYW50bHI0L3NyYy9hbnRscjQvZXJyb3IvRGlhZ25vc3RpY0Vycm9yTGlzdGVuZXIuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBTyxRQUFRLEVBQUUsbUJBQU8sQ0FBQyxvR0FBWTtBQUNyQyxPQUFPLGVBQWUsRUFBRSxtQkFBTyxDQUFDLHVIQUFpQjtBQUNqRCxPQUFPLFVBQVUsRUFBRSxtQkFBTyxDQUFDLGdIQUFrQjs7O0FBRzdDO0FBQ0EsMkJBQTJCLDBCQUEwQjtBQUNyRDtBQUNBLHlCQUF5QixvQ0FBb0M7QUFDN0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxVQUFVLEdBQUcsU0FBUztBQUNsQzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLG9CQUFvQixjQUFjLFdBQVc7QUFDbEUsb0RBQW9ELGNBQWM7QUFDbEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLDBCQUEwQjtBQUM1QztBQUNBO0FBQ0EsV0FBVyxFQUFFLDRCQUE0QjtBQUN6QztBQUNBOztBQUVBIiwic291cmNlcyI6WyIvVXNlcnMvZXRoYW5raW0vTmVzdG9yL21lZGZldGNoLmpzL25vZGVfbW9kdWxlcy8ucG5wbS9hbnRscjRANC45LjMvbm9kZV9tb2R1bGVzL2FudGxyNC9zcmMvYW50bHI0L2Vycm9yL0RpYWdub3N0aWNFcnJvckxpc3RlbmVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIENvcHlyaWdodCAoYykgMjAxMi0yMDE3IFRoZSBBTlRMUiBQcm9qZWN0LiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogVXNlIG9mIHRoaXMgZmlsZSBpcyBnb3Zlcm5lZCBieSB0aGUgQlNEIDMtY2xhdXNlIGxpY2Vuc2UgdGhhdFxuICogY2FuIGJlIGZvdW5kIGluIHRoZSBMSUNFTlNFLnR4dCBmaWxlIGluIHRoZSBwcm9qZWN0IHJvb3QuXG4gKi9cblxuY29uc3Qge0JpdFNldH0gPSByZXF1aXJlKCcuLy4uL1V0aWxzJyk7XG5jb25zdCB7RXJyb3JMaXN0ZW5lcn0gPSByZXF1aXJlKCcuL0Vycm9yTGlzdGVuZXInKVxuY29uc3Qge0ludGVydmFsfSA9IHJlcXVpcmUoJy4vLi4vSW50ZXJ2YWxTZXQnKVxuXG5cbi8qKlxuICogVGhpcyBpbXBsZW1lbnRhdGlvbiBvZiB7QGxpbmsgQU5UTFJFcnJvckxpc3RlbmVyfSBjYW4gYmUgdXNlZCB0byBpZGVudGlmeVxuICogIGNlcnRhaW4gcG90ZW50aWFsIGNvcnJlY3RuZXNzIGFuZCBwZXJmb3JtYW5jZSBwcm9ibGVtcyBpbiBncmFtbWFycy4gXCJSZXBvcnRzXCJcbiAqICBhcmUgbWFkZSBieSBjYWxsaW5nIHtAbGluayBQYXJzZXIvL25vdGlmeUVycm9yTGlzdGVuZXJzfSB3aXRoIHRoZSBhcHByb3ByaWF0ZVxuICogIG1lc3NhZ2UuXG4gKlxuICogIDx1bD5cbiAqICA8bGk+PGI+QW1iaWd1aXRpZXM8L2I+OiBUaGVzZSBhcmUgY2FzZXMgd2hlcmUgbW9yZSB0aGFuIG9uZSBwYXRoIHRocm91Z2ggdGhlXG4gKiAgZ3JhbW1hciBjYW4gbWF0Y2ggdGhlIGlucHV0LjwvbGk+XG4gKiAgPGxpPjxiPldlYWsgY29udGV4dCBzZW5zaXRpdml0eTwvYj46IFRoZXNlIGFyZSBjYXNlcyB3aGVyZSBmdWxsLWNvbnRleHRcbiAqICBwcmVkaWN0aW9uIHJlc29sdmVkIGFuIFNMTCBjb25mbGljdCB0byBhIHVuaXF1ZSBhbHRlcm5hdGl2ZSB3aGljaCBlcXVhbGVkIHRoZVxuICogIG1pbmltdW0gYWx0ZXJuYXRpdmUgb2YgdGhlIFNMTCBjb25mbGljdC48L2xpPlxuICogIDxsaT48Yj5TdHJvbmcgKGZvcmNlZCkgY29udGV4dCBzZW5zaXRpdml0eTwvYj46IFRoZXNlIGFyZSBjYXNlcyB3aGVyZSB0aGVcbiAqICBmdWxsLWNvbnRleHQgcHJlZGljdGlvbiByZXNvbHZlZCBhbiBTTEwgY29uZmxpY3QgdG8gYSB1bmlxdWUgYWx0ZXJuYXRpdmUsXG4gKiAgPGVtPmFuZDwvZW0+IHRoZSBtaW5pbXVtIGFsdGVybmF0aXZlIG9mIHRoZSBTTEwgY29uZmxpY3Qgd2FzIGZvdW5kIHRvIG5vdCBiZVxuICogIGEgdHJ1bHkgdmlhYmxlIGFsdGVybmF0aXZlLiBUd28tc3RhZ2UgcGFyc2luZyBjYW5ub3QgYmUgdXNlZCBmb3IgaW5wdXRzIHdoZXJlXG4gKiAgdGhpcyBzaXR1YXRpb24gb2NjdXJzLjwvbGk+XG4gKiAgPC91bD5cbiAqL1xuY2xhc3MgRGlhZ25vc3RpY0Vycm9yTGlzdGVuZXIgZXh0ZW5kcyBFcnJvckxpc3RlbmVyIHtcblx0Y29uc3RydWN0b3IoZXhhY3RPbmx5KSB7XG5cdFx0c3VwZXIoKTtcblx0XHRleGFjdE9ubHkgPSBleGFjdE9ubHkgfHwgdHJ1ZTtcblx0XHQvLyB3aGV0aGVyIGFsbCBhbWJpZ3VpdGllcyBvciBvbmx5IGV4YWN0IGFtYmlndWl0aWVzIGFyZSByZXBvcnRlZC5cblx0XHR0aGlzLmV4YWN0T25seSA9IGV4YWN0T25seTtcblx0fVxuXG5cdHJlcG9ydEFtYmlndWl0eShyZWNvZ25pemVyLCBkZmEsIHN0YXJ0SW5kZXgsIHN0b3BJbmRleCwgZXhhY3QsIGFtYmlnQWx0cywgY29uZmlncykge1xuXHRcdGlmICh0aGlzLmV4YWN0T25seSAmJiAhZXhhY3QpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0Y29uc3QgbXNnID0gXCJyZXBvcnRBbWJpZ3VpdHkgZD1cIiArXG5cdFx0XHR0aGlzLmdldERlY2lzaW9uRGVzY3JpcHRpb24ocmVjb2duaXplciwgZGZhKSArXG5cdFx0XHRcIjogYW1iaWdBbHRzPVwiICtcblx0XHRcdHRoaXMuZ2V0Q29uZmxpY3RpbmdBbHRzKGFtYmlnQWx0cywgY29uZmlncykgK1xuXHRcdFx0XCIsIGlucHV0PSdcIiArXG5cdFx0XHRyZWNvZ25pemVyLmdldFRva2VuU3RyZWFtKCkuZ2V0VGV4dChuZXcgSW50ZXJ2YWwoc3RhcnRJbmRleCwgc3RvcEluZGV4KSkgKyBcIidcIlxuXHRcdHJlY29nbml6ZXIubm90aWZ5RXJyb3JMaXN0ZW5lcnMobXNnKTtcblx0fVxuXG5cdHJlcG9ydEF0dGVtcHRpbmdGdWxsQ29udGV4dChyZWNvZ25pemVyLCBkZmEsIHN0YXJ0SW5kZXgsIHN0b3BJbmRleCwgY29uZmxpY3RpbmdBbHRzLCBjb25maWdzKSB7XG5cdFx0Y29uc3QgbXNnID0gXCJyZXBvcnRBdHRlbXB0aW5nRnVsbENvbnRleHQgZD1cIiArXG5cdFx0XHR0aGlzLmdldERlY2lzaW9uRGVzY3JpcHRpb24ocmVjb2duaXplciwgZGZhKSArXG5cdFx0XHRcIiwgaW5wdXQ9J1wiICtcblx0XHRcdHJlY29nbml6ZXIuZ2V0VG9rZW5TdHJlYW0oKS5nZXRUZXh0KG5ldyBJbnRlcnZhbChzdGFydEluZGV4LCBzdG9wSW5kZXgpKSArIFwiJ1wiXG5cdFx0cmVjb2duaXplci5ub3RpZnlFcnJvckxpc3RlbmVycyhtc2cpO1xuXHR9XG5cblx0cmVwb3J0Q29udGV4dFNlbnNpdGl2aXR5KHJlY29nbml6ZXIsIGRmYSwgc3RhcnRJbmRleCwgc3RvcEluZGV4LCBwcmVkaWN0aW9uLCBjb25maWdzKSB7XG5cdFx0Y29uc3QgbXNnID0gXCJyZXBvcnRDb250ZXh0U2Vuc2l0aXZpdHkgZD1cIiArXG5cdFx0XHR0aGlzLmdldERlY2lzaW9uRGVzY3JpcHRpb24ocmVjb2duaXplciwgZGZhKSArXG5cdFx0XHRcIiwgaW5wdXQ9J1wiICtcblx0XHRcdHJlY29nbml6ZXIuZ2V0VG9rZW5TdHJlYW0oKS5nZXRUZXh0KG5ldyBJbnRlcnZhbChzdGFydEluZGV4LCBzdG9wSW5kZXgpKSArIFwiJ1wiXG5cdFx0cmVjb2duaXplci5ub3RpZnlFcnJvckxpc3RlbmVycyhtc2cpO1xuXHR9XG5cblx0Z2V0RGVjaXNpb25EZXNjcmlwdGlvbihyZWNvZ25pemVyLCBkZmEpIHtcblx0XHRjb25zdCBkZWNpc2lvbiA9IGRmYS5kZWNpc2lvblxuXHRcdGNvbnN0IHJ1bGVJbmRleCA9IGRmYS5hdG5TdGFydFN0YXRlLnJ1bGVJbmRleFxuXG5cdFx0Y29uc3QgcnVsZU5hbWVzID0gcmVjb2duaXplci5ydWxlTmFtZXNcblx0XHRpZiAocnVsZUluZGV4IDwgMCB8fCBydWxlSW5kZXggPj0gcnVsZU5hbWVzLmxlbmd0aCkge1xuXHRcdFx0cmV0dXJuIFwiXCIgKyBkZWNpc2lvbjtcblx0XHR9XG5cdFx0Y29uc3QgcnVsZU5hbWUgPSBydWxlTmFtZXNbcnVsZUluZGV4XSB8fCBudWxsXG5cdFx0aWYgKHJ1bGVOYW1lID09PSBudWxsIHx8IHJ1bGVOYW1lLmxlbmd0aCA9PT0gMCkge1xuXHRcdFx0cmV0dXJuIFwiXCIgKyBkZWNpc2lvbjtcblx0XHR9XG5cdFx0cmV0dXJuIGAke2RlY2lzaW9ufSAoJHtydWxlTmFtZX0pYDtcblx0fVxuXG5cdC8qKlxuXHQgKiBDb21wdXRlcyB0aGUgc2V0IG9mIGNvbmZsaWN0aW5nIG9yIGFtYmlndW91cyBhbHRlcm5hdGl2ZXMgZnJvbSBhXG5cdCAqIGNvbmZpZ3VyYXRpb24gc2V0LCBpZiB0aGF0IGluZm9ybWF0aW9uIHdhcyBub3QgYWxyZWFkeSBwcm92aWRlZCBieSB0aGVcblx0ICogcGFyc2VyLlxuXHQgKlxuXHQgKiBAcGFyYW0gcmVwb3J0ZWRBbHRzIFRoZSBzZXQgb2YgY29uZmxpY3Rpbmcgb3IgYW1iaWd1b3VzIGFsdGVybmF0aXZlcywgYXNcblx0ICogcmVwb3J0ZWQgYnkgdGhlIHBhcnNlci5cblx0ICogQHBhcmFtIGNvbmZpZ3MgVGhlIGNvbmZsaWN0aW5nIG9yIGFtYmlndW91cyBjb25maWd1cmF0aW9uIHNldC5cblx0ICogQHJldHVybiBSZXR1cm5zIHtAY29kZSByZXBvcnRlZEFsdHN9IGlmIGl0IGlzIG5vdCB7QGNvZGUgbnVsbH0sIG90aGVyd2lzZVxuXHQgKiByZXR1cm5zIHRoZSBzZXQgb2YgYWx0ZXJuYXRpdmVzIHJlcHJlc2VudGVkIGluIHtAY29kZSBjb25maWdzfS5cbiAgICAgKi9cblx0Z2V0Q29uZmxpY3RpbmdBbHRzKHJlcG9ydGVkQWx0cywgY29uZmlncykge1xuXHRcdGlmIChyZXBvcnRlZEFsdHMgIT09IG51bGwpIHtcblx0XHRcdHJldHVybiByZXBvcnRlZEFsdHM7XG5cdFx0fVxuXHRcdGNvbnN0IHJlc3VsdCA9IG5ldyBCaXRTZXQoKVxuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgY29uZmlncy5pdGVtcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0cmVzdWx0LmFkZChjb25maWdzLml0ZW1zW2ldLmFsdCk7XG5cdFx0fVxuXHRcdHJldHVybiBgeyR7cmVzdWx0LnZhbHVlcygpLmpvaW4oXCIsIFwiKX19YDtcblx0fVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IERpYWdub3N0aWNFcnJvckxpc3RlbmVyXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/error/DiagnosticErrorListener.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/error/ErrorListener.js":
/*!************************************************************************************************!*\
  !*** ../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/error/ErrorListener.js ***!
  \************************************************************************************************/
/***/ ((module) => {

eval("/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\n/**\n * Provides an empty default implementation of {@link ANTLRErrorListener}. The\n * default implementation of each method does nothing, but can be overridden as\n * necessary.\n */\nclass ErrorListener {\n    syntaxError(recognizer, offendingSymbol, line, column, msg, e) {\n    }\n\n    reportAmbiguity(recognizer, dfa, startIndex, stopIndex, exact, ambigAlts, configs) {\n    }\n\n    reportAttemptingFullContext(recognizer, dfa, startIndex, stopIndex, conflictingAlts, configs) {\n    }\n\n    reportContextSensitivity(recognizer, dfa, startIndex, stopIndex, prediction, configs) {\n    }\n}\n\n/**\n * {@inheritDoc}\n *\n * <p>\n * This implementation prints messages to {@link System//err} containing the\n * values of {@code line}, {@code charPositionInLine}, and {@code msg} using\n * the following format.</p>\n *\n * <pre>\n * line <em>line</em>:<em>charPositionInLine</em> <em>msg</em>\n * </pre>\n *\n */\nclass ConsoleErrorListener extends ErrorListener {\n    constructor() {\n        super();\n    }\n\n    syntaxError(recognizer, offendingSymbol, line, column, msg, e) {\n        console.error(\"line \" + line + \":\" + column + \" \" + msg);\n    }\n}\n\n\n/**\n * Provides a default instance of {@link ConsoleErrorListener}.\n */\nConsoleErrorListener.INSTANCE = new ConsoleErrorListener();\n\nclass ProxyErrorListener extends ErrorListener {\n    constructor(delegates) {\n        super();\n        if (delegates===null) {\n            throw \"delegates\";\n        }\n        this.delegates = delegates;\n        return this;\n    }\n\n    syntaxError(recognizer, offendingSymbol, line, column, msg, e) {\n        this.delegates.map(d => d.syntaxError(recognizer, offendingSymbol, line, column, msg, e));\n    }\n\n    reportAmbiguity(recognizer, dfa, startIndex, stopIndex, exact, ambigAlts, configs) {\n        this.delegates.map(d => d.reportAmbiguity(recognizer, dfa, startIndex, stopIndex, exact, ambigAlts, configs));\n    }\n\n    reportAttemptingFullContext(recognizer, dfa, startIndex, stopIndex, conflictingAlts, configs) {\n        this.delegates.map(d => d.reportAttemptingFullContext(recognizer, dfa, startIndex, stopIndex, conflictingAlts, configs));\n    }\n\n    reportContextSensitivity(recognizer, dfa, startIndex, stopIndex, prediction, configs) {\n        this.delegates.map(d => d.reportContextSensitivity(recognizer, dfa, startIndex, stopIndex, prediction, configs));\n    }\n}\n\nmodule.exports = {ErrorListener, ConsoleErrorListener, ProxyErrorListener}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2FudGxyNEA0LjkuMy9ub2RlX21vZHVsZXMvYW50bHI0L3NyYy9hbnRscjQvZXJyb3IvRXJyb3JMaXN0ZW5lci5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGdEQUFnRCx5QkFBeUI7QUFDekU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBLDJDQUEyQyxtQkFBbUI7QUFDOUQsY0FBYyxXQUFXLEdBQUcseUJBQXlCLE9BQU8sV0FBVztBQUN2RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBLG1DQUFtQywyQkFBMkI7QUFDOUQ7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsa0JBQWtCIiwic291cmNlcyI6WyIvVXNlcnMvZXRoYW5raW0vTmVzdG9yL21lZGZldGNoLmpzL25vZGVfbW9kdWxlcy8ucG5wbS9hbnRscjRANC45LjMvbm9kZV9tb2R1bGVzL2FudGxyNC9zcmMvYW50bHI0L2Vycm9yL0Vycm9yTGlzdGVuZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyogQ29weXJpZ2h0IChjKSAyMDEyLTIwMTcgVGhlIEFOVExSIFByb2plY3QuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBVc2Ugb2YgdGhpcyBmaWxlIGlzIGdvdmVybmVkIGJ5IHRoZSBCU0QgMy1jbGF1c2UgbGljZW5zZSB0aGF0XG4gKiBjYW4gYmUgZm91bmQgaW4gdGhlIExJQ0VOU0UudHh0IGZpbGUgaW4gdGhlIHByb2plY3Qgcm9vdC5cbiAqL1xuXG4vKipcbiAqIFByb3ZpZGVzIGFuIGVtcHR5IGRlZmF1bHQgaW1wbGVtZW50YXRpb24gb2Yge0BsaW5rIEFOVExSRXJyb3JMaXN0ZW5lcn0uIFRoZVxuICogZGVmYXVsdCBpbXBsZW1lbnRhdGlvbiBvZiBlYWNoIG1ldGhvZCBkb2VzIG5vdGhpbmcsIGJ1dCBjYW4gYmUgb3ZlcnJpZGRlbiBhc1xuICogbmVjZXNzYXJ5LlxuICovXG5jbGFzcyBFcnJvckxpc3RlbmVyIHtcbiAgICBzeW50YXhFcnJvcihyZWNvZ25pemVyLCBvZmZlbmRpbmdTeW1ib2wsIGxpbmUsIGNvbHVtbiwgbXNnLCBlKSB7XG4gICAgfVxuXG4gICAgcmVwb3J0QW1iaWd1aXR5KHJlY29nbml6ZXIsIGRmYSwgc3RhcnRJbmRleCwgc3RvcEluZGV4LCBleGFjdCwgYW1iaWdBbHRzLCBjb25maWdzKSB7XG4gICAgfVxuXG4gICAgcmVwb3J0QXR0ZW1wdGluZ0Z1bGxDb250ZXh0KHJlY29nbml6ZXIsIGRmYSwgc3RhcnRJbmRleCwgc3RvcEluZGV4LCBjb25mbGljdGluZ0FsdHMsIGNvbmZpZ3MpIHtcbiAgICB9XG5cbiAgICByZXBvcnRDb250ZXh0U2Vuc2l0aXZpdHkocmVjb2duaXplciwgZGZhLCBzdGFydEluZGV4LCBzdG9wSW5kZXgsIHByZWRpY3Rpb24sIGNvbmZpZ3MpIHtcbiAgICB9XG59XG5cbi8qKlxuICoge0Bpbmhlcml0RG9jfVxuICpcbiAqIDxwPlxuICogVGhpcyBpbXBsZW1lbnRhdGlvbiBwcmludHMgbWVzc2FnZXMgdG8ge0BsaW5rIFN5c3RlbS8vZXJyfSBjb250YWluaW5nIHRoZVxuICogdmFsdWVzIG9mIHtAY29kZSBsaW5lfSwge0Bjb2RlIGNoYXJQb3NpdGlvbkluTGluZX0sIGFuZCB7QGNvZGUgbXNnfSB1c2luZ1xuICogdGhlIGZvbGxvd2luZyBmb3JtYXQuPC9wPlxuICpcbiAqIDxwcmU+XG4gKiBsaW5lIDxlbT5saW5lPC9lbT46PGVtPmNoYXJQb3NpdGlvbkluTGluZTwvZW0+IDxlbT5tc2c8L2VtPlxuICogPC9wcmU+XG4gKlxuICovXG5jbGFzcyBDb25zb2xlRXJyb3JMaXN0ZW5lciBleHRlbmRzIEVycm9yTGlzdGVuZXIge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigpO1xuICAgIH1cblxuICAgIHN5bnRheEVycm9yKHJlY29nbml6ZXIsIG9mZmVuZGluZ1N5bWJvbCwgbGluZSwgY29sdW1uLCBtc2csIGUpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcImxpbmUgXCIgKyBsaW5lICsgXCI6XCIgKyBjb2x1bW4gKyBcIiBcIiArIG1zZyk7XG4gICAgfVxufVxuXG5cbi8qKlxuICogUHJvdmlkZXMgYSBkZWZhdWx0IGluc3RhbmNlIG9mIHtAbGluayBDb25zb2xlRXJyb3JMaXN0ZW5lcn0uXG4gKi9cbkNvbnNvbGVFcnJvckxpc3RlbmVyLklOU1RBTkNFID0gbmV3IENvbnNvbGVFcnJvckxpc3RlbmVyKCk7XG5cbmNsYXNzIFByb3h5RXJyb3JMaXN0ZW5lciBleHRlbmRzIEVycm9yTGlzdGVuZXIge1xuICAgIGNvbnN0cnVjdG9yKGRlbGVnYXRlcykge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICBpZiAoZGVsZWdhdGVzPT09bnVsbCkge1xuICAgICAgICAgICAgdGhyb3cgXCJkZWxlZ2F0ZXNcIjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmRlbGVnYXRlcyA9IGRlbGVnYXRlcztcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgc3ludGF4RXJyb3IocmVjb2duaXplciwgb2ZmZW5kaW5nU3ltYm9sLCBsaW5lLCBjb2x1bW4sIG1zZywgZSkge1xuICAgICAgICB0aGlzLmRlbGVnYXRlcy5tYXAoZCA9PiBkLnN5bnRheEVycm9yKHJlY29nbml6ZXIsIG9mZmVuZGluZ1N5bWJvbCwgbGluZSwgY29sdW1uLCBtc2csIGUpKTtcbiAgICB9XG5cbiAgICByZXBvcnRBbWJpZ3VpdHkocmVjb2duaXplciwgZGZhLCBzdGFydEluZGV4LCBzdG9wSW5kZXgsIGV4YWN0LCBhbWJpZ0FsdHMsIGNvbmZpZ3MpIHtcbiAgICAgICAgdGhpcy5kZWxlZ2F0ZXMubWFwKGQgPT4gZC5yZXBvcnRBbWJpZ3VpdHkocmVjb2duaXplciwgZGZhLCBzdGFydEluZGV4LCBzdG9wSW5kZXgsIGV4YWN0LCBhbWJpZ0FsdHMsIGNvbmZpZ3MpKTtcbiAgICB9XG5cbiAgICByZXBvcnRBdHRlbXB0aW5nRnVsbENvbnRleHQocmVjb2duaXplciwgZGZhLCBzdGFydEluZGV4LCBzdG9wSW5kZXgsIGNvbmZsaWN0aW5nQWx0cywgY29uZmlncykge1xuICAgICAgICB0aGlzLmRlbGVnYXRlcy5tYXAoZCA9PiBkLnJlcG9ydEF0dGVtcHRpbmdGdWxsQ29udGV4dChyZWNvZ25pemVyLCBkZmEsIHN0YXJ0SW5kZXgsIHN0b3BJbmRleCwgY29uZmxpY3RpbmdBbHRzLCBjb25maWdzKSk7XG4gICAgfVxuXG4gICAgcmVwb3J0Q29udGV4dFNlbnNpdGl2aXR5KHJlY29nbml6ZXIsIGRmYSwgc3RhcnRJbmRleCwgc3RvcEluZGV4LCBwcmVkaWN0aW9uLCBjb25maWdzKSB7XG4gICAgICAgIHRoaXMuZGVsZWdhdGVzLm1hcChkID0+IGQucmVwb3J0Q29udGV4dFNlbnNpdGl2aXR5KHJlY29nbml6ZXIsIGRmYSwgc3RhcnRJbmRleCwgc3RvcEluZGV4LCBwcmVkaWN0aW9uLCBjb25maWdzKSk7XG4gICAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtFcnJvckxpc3RlbmVyLCBDb25zb2xlRXJyb3JMaXN0ZW5lciwgUHJveHlFcnJvckxpc3RlbmVyfVxuXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/error/ErrorListener.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/error/ErrorStrategy.js":
/*!************************************************************************************************!*\
  !*** ../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/error/ErrorStrategy.js ***!
  \************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nconst {Token} = __webpack_require__(/*! ./../Token */ \"(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/Token.js\")\nconst {NoViableAltException, InputMismatchException, FailedPredicateException, ParseCancellationException} = __webpack_require__(/*! ./Errors */ \"(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/error/Errors.js\")\nconst {ATNState} = __webpack_require__(/*! ./../atn/ATNState */ \"(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/atn/ATNState.js\")\nconst {Interval, IntervalSet} = __webpack_require__(/*! ./../IntervalSet */ \"(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/IntervalSet.js\")\n\nclass ErrorStrategy {\n\n    reset(recognizer) {\n    }\n\n    recoverInline(recognizer) {\n    }\n\n    recover(recognizer, e) {\n    }\n\n    sync(recognizer) {\n    }\n\n    inErrorRecoveryMode(recognizer) {\n    }\n\n    reportError(recognizer) {\n    }\n}\n\n\n/**\n * This is the default implementation of {@link ANTLRErrorStrategy} used for\n * error reporting and recovery in ANTLR parsers.\n*/\nclass DefaultErrorStrategy extends ErrorStrategy {\n    constructor() {\n        super();\n        /**\n         * Indicates whether the error strategy is currently \"recovering from an\n         * error\". This is used to suppress reporting multiple error messages while\n         * attempting to recover from a detected syntax error.\n         *\n         * @see //inErrorRecoveryMode\n         */\n        this.errorRecoveryMode = false;\n\n        /**\n         * The index into the input stream where the last error occurred.\n         * This is used to prevent infinite loops where an error is found\n         * but no token is consumed during recovery...another error is found,\n         * ad nauseum. This is a failsafe mechanism to guarantee that at least\n         * one token/tree node is consumed for two errors.\n         */\n        this.lastErrorIndex = -1;\n        this.lastErrorStates = null;\n        this.nextTokensContext = null;\n        this.nextTokenState = 0;\n    }\n\n    /**\n     * <p>The default implementation simply calls {@link //endErrorCondition} to\n     * ensure that the handler is not in error recovery mode.</p>\n    */\n    reset(recognizer) {\n        this.endErrorCondition(recognizer);\n    }\n\n    /**\n     * This method is called to enter error recovery mode when a recognition\n     * exception is reported.\n     *\n     * @param recognizer the parser instance\n    */\n    beginErrorCondition(recognizer) {\n        this.errorRecoveryMode = true;\n    }\n\n    inErrorRecoveryMode(recognizer) {\n        return this.errorRecoveryMode;\n    }\n\n    /**\n     * This method is called to leave error recovery mode after recovering from\n     * a recognition exception.\n     * @param recognizer\n     */\n    endErrorCondition(recognizer) {\n        this.errorRecoveryMode = false;\n        this.lastErrorStates = null;\n        this.lastErrorIndex = -1;\n    }\n\n    /**\n     * {@inheritDoc}\n     * <p>The default implementation simply calls {@link //endErrorCondition}.</p>\n     */\n    reportMatch(recognizer) {\n        this.endErrorCondition(recognizer);\n    }\n\n    /**\n     * {@inheritDoc}\n     *\n     * <p>The default implementation returns immediately if the handler is already\n     * in error recovery mode. Otherwise, it calls {@link //beginErrorCondition}\n     * and dispatches the reporting task based on the runtime type of {@code e}\n     * according to the following table.</p>\n     *\n     * <ul>\n     * <li>{@link NoViableAltException}: Dispatches the call to\n     * {@link //reportNoViableAlternative}</li>\n     * <li>{@link InputMismatchException}: Dispatches the call to\n     * {@link //reportInputMismatch}</li>\n     * <li>{@link FailedPredicateException}: Dispatches the call to\n     * {@link //reportFailedPredicate}</li>\n     * <li>All other types: calls {@link Parser//notifyErrorListeners} to report\n     * the exception</li>\n     * </ul>\n     */\n    reportError(recognizer, e) {\n       // if we've already reported an error and have not matched a token\n       // yet successfully, don't report any errors.\n        if(this.inErrorRecoveryMode(recognizer)) {\n            return; // don't report spurious errors\n        }\n        this.beginErrorCondition(recognizer);\n        if ( e instanceof NoViableAltException ) {\n            this.reportNoViableAlternative(recognizer, e);\n        } else if ( e instanceof InputMismatchException ) {\n            this.reportInputMismatch(recognizer, e);\n        } else if ( e instanceof FailedPredicateException ) {\n            this.reportFailedPredicate(recognizer, e);\n        } else {\n            console.log(\"unknown recognition error type: \" + e.constructor.name);\n            console.log(e.stack);\n            recognizer.notifyErrorListeners(e.getOffendingToken(), e.getMessage(), e);\n        }\n    }\n\n    /**\n     *\n     * {@inheritDoc}\n     *\n     * <p>The default implementation resynchronizes the parser by consuming tokens\n     * until we find one in the resynchronization set--loosely the set of tokens\n     * that can follow the current rule.</p>\n     *\n     */\n    recover(recognizer, e) {\n        if (this.lastErrorIndex===recognizer.getInputStream().index &&\n            this.lastErrorStates !== null && this.lastErrorStates.indexOf(recognizer.state)>=0) {\n            // uh oh, another error at same token index and previously-visited\n            // state in ATN; must be a case where LT(1) is in the recovery\n            // token set so nothing got consumed. Consume a single token\n            // at least to prevent an infinite loop; this is a failsafe.\n            recognizer.consume();\n        }\n        this.lastErrorIndex = recognizer._input.index;\n        if (this.lastErrorStates === null) {\n            this.lastErrorStates = [];\n        }\n        this.lastErrorStates.push(recognizer.state);\n        const followSet = this.getErrorRecoverySet(recognizer)\n        this.consumeUntil(recognizer, followSet);\n    }\n\n    /**\n     * The default implementation of {@link ANTLRErrorStrategy//sync} makes sure\n     * that the current lookahead symbol is consistent with what were expecting\n     * at this point in the ATN. You can call this anytime but ANTLR only\n     * generates code to check before subrules/loops and each iteration.\n     *\n     * <p>Implements Jim Idle's magic sync mechanism in closures and optional\n     * subrules. E.g.,</p>\n     *\n     * <pre>\n     * a : sync ( stuff sync )* ;\n     * sync : {consume to what can follow sync} ;\n     * </pre>\n     *\n     * At the start of a sub rule upon error, {@link //sync} performs single\n     * token deletion, if possible. If it can't do that, it bails on the current\n     * rule and uses the default error recovery, which consumes until the\n     * resynchronization set of the current rule.\n     *\n     * <p>If the sub rule is optional ({@code (...)?}, {@code (...)*}, or block\n     * with an empty alternative), then the expected set includes what follows\n     * the subrule.</p>\n     *\n     * <p>During loop iteration, it consumes until it sees a token that can start a\n     * sub rule or what follows loop. Yes, that is pretty aggressive. We opt to\n     * stay in the loop as long as possible.</p>\n     *\n     * <p><strong>ORIGINS</strong></p>\n     *\n     * <p>Previous versions of ANTLR did a poor job of their recovery within loops.\n     * A single mismatch token or missing token would force the parser to bail\n     * out of the entire rules surrounding the loop. So, for rule</p>\n     *\n     * <pre>\n     * classDef : 'class' ID '{' member* '}'\n     * </pre>\n     *\n     * input with an extra token between members would force the parser to\n     * consume until it found the next class definition rather than the next\n     * member definition of the current class.\n     *\n     * <p>This functionality cost a little bit of effort because the parser has to\n     * compare token set at the start of the loop and at each iteration. If for\n     * some reason speed is suffering for you, you can turn off this\n     * functionality by simply overriding this method as a blank { }.</p>\n     *\n     */\n    sync(recognizer) {\n        // If already recovering, don't try to sync\n        if (this.inErrorRecoveryMode(recognizer)) {\n            return;\n        }\n        const s = recognizer._interp.atn.states[recognizer.state];\n        const la = recognizer.getTokenStream().LA(1);\n        // try cheaper subset first; might get lucky. seems to shave a wee bit off\n        const nextTokens = recognizer.atn.nextTokens(s);\n        if(nextTokens.contains(la)) {\n            this.nextTokensContext = null;\n            this.nextTokenState = ATNState.INVALID_STATE_NUMBER;\n            return;\n        } else if (nextTokens.contains(Token.EPSILON)) {\n            if(this.nextTokensContext === null) {\n                // It's possible the next token won't match information tracked\n                // by sync is restricted for performance.\n                this.nextTokensContext = recognizer._ctx;\n                this.nextTokensState = recognizer._stateNumber;\n            }\n            return;\n        }\n        switch (s.stateType) {\n        case ATNState.BLOCK_START:\n        case ATNState.STAR_BLOCK_START:\n        case ATNState.PLUS_BLOCK_START:\n        case ATNState.STAR_LOOP_ENTRY:\n           // report error and recover if possible\n            if( this.singleTokenDeletion(recognizer) !== null) {\n                return;\n            } else {\n                throw new InputMismatchException(recognizer);\n            }\n        case ATNState.PLUS_LOOP_BACK:\n        case ATNState.STAR_LOOP_BACK:\n            this.reportUnwantedToken(recognizer);\n            const expecting = new IntervalSet()\n            expecting.addSet(recognizer.getExpectedTokens());\n            const whatFollowsLoopIterationOrRule = expecting.addSet(this.getErrorRecoverySet(recognizer))\n            this.consumeUntil(recognizer, whatFollowsLoopIterationOrRule);\n            break;\n        default:\n            // do nothing if we can't identify the exact kind of ATN state\n        }\n    }\n\n    /**\n     * This is called by {@link //reportError} when the exception is a\n     * {@link NoViableAltException}.\n     *\n     * @see //reportError\n     *\n     * @param recognizer the parser instance\n     * @param e the recognition exception\n     */\n    reportNoViableAlternative(recognizer, e) {\n        const tokens = recognizer.getTokenStream()\n        let input\n        if(tokens !== null) {\n            if (e.startToken.type===Token.EOF) {\n                input = \"<EOF>\";\n            } else {\n                input = tokens.getText(new Interval(e.startToken.tokenIndex, e.offendingToken.tokenIndex));\n            }\n        } else {\n            input = \"<unknown input>\";\n        }\n        const msg = \"no viable alternative at input \" + this.escapeWSAndQuote(input)\n        recognizer.notifyErrorListeners(msg, e.offendingToken, e);\n    }\n\n    /**\n     * This is called by {@link //reportError} when the exception is an\n     * {@link InputMismatchException}.\n     *\n     * @see //reportError\n     *\n     * @param recognizer the parser instance\n     * @param e the recognition exception\n     */\n    reportInputMismatch(recognizer, e) {\n        const msg = \"mismatched input \" + this.getTokenErrorDisplay(e.offendingToken) +\n            \" expecting \" + e.getExpectedTokens().toString(recognizer.literalNames, recognizer.symbolicNames)\n        recognizer.notifyErrorListeners(msg, e.offendingToken, e);\n    }\n\n    /**\n     * This is called by {@link //reportError} when the exception is a\n     * {@link FailedPredicateException}.\n     *\n     * @see //reportError\n     *\n     * @param recognizer the parser instance\n     * @param e the recognition exception\n     */\n    reportFailedPredicate(recognizer, e) {\n        const ruleName = recognizer.ruleNames[recognizer._ctx.ruleIndex]\n        const msg = \"rule \" + ruleName + \" \" + e.message\n        recognizer.notifyErrorListeners(msg, e.offendingToken, e);\n    }\n\n    /**\n     * This method is called to report a syntax error which requires the removal\n     * of a token from the input stream. At the time this method is called, the\n     * erroneous symbol is current {@code LT(1)} symbol and has not yet been\n     * removed from the input stream. When this method returns,\n     * {@code recognizer} is in error recovery mode.\n     *\n     * <p>This method is called when {@link //singleTokenDeletion} identifies\n     * single-token deletion as a viable recovery strategy for a mismatched\n     * input error.</p>\n     *\n     * <p>The default implementation simply returns if the handler is already in\n     * error recovery mode. Otherwise, it calls {@link //beginErrorCondition} to\n     * enter error recovery mode, followed by calling\n     * {@link Parser//notifyErrorListeners}.</p>\n     *\n     * @param recognizer the parser instance\n     *\n     */\n    reportUnwantedToken(recognizer) {\n        if (this.inErrorRecoveryMode(recognizer)) {\n            return;\n        }\n        this.beginErrorCondition(recognizer);\n        const t = recognizer.getCurrentToken()\n        const tokenName = this.getTokenErrorDisplay(t)\n        const expecting = this.getExpectedTokens(recognizer)\n        const msg = \"extraneous input \" + tokenName + \" expecting \" +\n            expecting.toString(recognizer.literalNames, recognizer.symbolicNames)\n        recognizer.notifyErrorListeners(msg, t, null);\n    }\n\n    /**\n     * This method is called to report a syntax error which requires the\n     * insertion of a missing token into the input stream. At the time this\n     * method is called, the missing token has not yet been inserted. When this\n     * method returns, {@code recognizer} is in error recovery mode.\n     *\n     * <p>This method is called when {@link //singleTokenInsertion} identifies\n     * single-token insertion as a viable recovery strategy for a mismatched\n     * input error.</p>\n     *\n     * <p>The default implementation simply returns if the handler is already in\n     * error recovery mode. Otherwise, it calls {@link //beginErrorCondition} to\n     * enter error recovery mode, followed by calling\n     * {@link Parser//notifyErrorListeners}.</p>\n     *\n     * @param recognizer the parser instance\n     */\n    reportMissingToken(recognizer) {\n        if ( this.inErrorRecoveryMode(recognizer)) {\n            return;\n        }\n        this.beginErrorCondition(recognizer);\n        const t = recognizer.getCurrentToken()\n        const expecting = this.getExpectedTokens(recognizer)\n        const msg = \"missing \" + expecting.toString(recognizer.literalNames, recognizer.symbolicNames) +\n            \" at \" + this.getTokenErrorDisplay(t)\n        recognizer.notifyErrorListeners(msg, t, null);\n    }\n\n    /**\n     * <p>The default implementation attempts to recover from the mismatched input\n     * by using single token insertion and deletion as described below. If the\n     * recovery attempt fails, this method throws an\n     * {@link InputMismatchException}.</p>\n     *\n     * <p><strong>EXTRA TOKEN</strong> (single token deletion)</p>\n     *\n     * <p>{@code LA(1)} is not what we are looking for. If {@code LA(2)} has the\n     * right token, however, then assume {@code LA(1)} is some extra spurious\n     * token and delete it. Then consume and return the next token (which was\n     * the {@code LA(2)} token) as the successful result of the match operation.</p>\n     *\n     * <p>This recovery strategy is implemented by {@link\n     * //singleTokenDeletion}.</p>\n     *\n     * <p><strong>MISSING TOKEN</strong> (single token insertion)</p>\n     *\n     * <p>If current token (at {@code LA(1)}) is consistent with what could come\n     * after the expected {@code LA(1)} token, then assume the token is missing\n     * and use the parser's {@link TokenFactory} to create it on the fly. The\n     * \"insertion\" is performed by returning the created token as the successful\n     * result of the match operation.</p>\n     *\n     * <p>This recovery strategy is implemented by {@link\n     * //singleTokenInsertion}.</p>\n     *\n     * <p><strong>EXAMPLE</strong></p>\n     *\n     * <p>For example, Input {@code i=(3;} is clearly missing the {@code ')'}. When\n     * the parser returns from the nested call to {@code expr}, it will have\n     * call chain:</p>\n     *\n     * <pre>\n     * stat &rarr; expr &rarr; atom\n     * </pre>\n     *\n     * and it will be trying to match the {@code ')'} at this point in the\n     * derivation:\n     *\n     * <pre>\n     * =&gt; ID '=' '(' INT ')' ('+' atom)* ';'\n     * ^\n     * </pre>\n     *\n     * The attempt to match {@code ')'} will fail when it sees {@code ';'} and\n     * call {@link //recoverInline}. To recover, it sees that {@code LA(1)==';'}\n     * is in the set of tokens that can follow the {@code ')'} token reference\n     * in rule {@code atom}. It can assume that you forgot the {@code ')'}.\n     */\n    recoverInline(recognizer) {\n        // SINGLE TOKEN DELETION\n        const matchedSymbol = this.singleTokenDeletion(recognizer)\n        if (matchedSymbol !== null) {\n            // we have deleted the extra token.\n            // now, move past ttype token as if all were ok\n            recognizer.consume();\n            return matchedSymbol;\n        }\n        // SINGLE TOKEN INSERTION\n        if (this.singleTokenInsertion(recognizer)) {\n            return this.getMissingSymbol(recognizer);\n        }\n        // even that didn't work; must throw the exception\n        throw new InputMismatchException(recognizer);\n    }\n\n    /**\n     * This method implements the single-token insertion inline error recovery\n     * strategy. It is called by {@link //recoverInline} if the single-token\n     * deletion strategy fails to recover from the mismatched input. If this\n     * method returns {@code true}, {@code recognizer} will be in error recovery\n     * mode.\n     *\n     * <p>This method determines whether or not single-token insertion is viable by\n     * checking if the {@code LA(1)} input symbol could be successfully matched\n     * if it were instead the {@code LA(2)} symbol. If this method returns\n     * {@code true}, the caller is responsible for creating and inserting a\n     * token with the correct type to produce this behavior.</p>\n     *\n     * @param recognizer the parser instance\n     * @return {@code true} if single-token insertion is a viable recovery\n     * strategy for the current mismatched input, otherwise {@code false}\n     */\n    singleTokenInsertion(recognizer) {\n        const currentSymbolType = recognizer.getTokenStream().LA(1)\n        // if current token is consistent with what could come after current\n        // ATN state, then we know we're missing a token; error recovery\n        // is free to conjure up and insert the missing token\n        const atn = recognizer._interp.atn\n        const currentState = atn.states[recognizer.state]\n        const next = currentState.transitions[0].target\n        const expectingAtLL2 = atn.nextTokens(next, recognizer._ctx)\n        if (expectingAtLL2.contains(currentSymbolType) ){\n            this.reportMissingToken(recognizer);\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * This method implements the single-token deletion inline error recovery\n     * strategy. It is called by {@link //recoverInline} to attempt to recover\n     * from mismatched input. If this method returns null, the parser and error\n     * handler state will not have changed. If this method returns non-null,\n     * {@code recognizer} will <em>not</em> be in error recovery mode since the\n     * returned token was a successful match.\n     *\n     * <p>If the single-token deletion is successful, this method calls\n     * {@link //reportUnwantedToken} to report the error, followed by\n     * {@link Parser//consume} to actually \"delete\" the extraneous token. Then,\n     * before returning {@link //reportMatch} is called to signal a successful\n     * match.</p>\n     *\n     * @param recognizer the parser instance\n     * @return the successfully matched {@link Token} instance if single-token\n     * deletion successfully recovers from the mismatched input, otherwise\n     * {@code null}\n     */\n    singleTokenDeletion(recognizer) {\n        const nextTokenType = recognizer.getTokenStream().LA(2)\n        const expecting = this.getExpectedTokens(recognizer)\n        if (expecting.contains(nextTokenType)) {\n            this.reportUnwantedToken(recognizer);\n            // print(\"recoverFromMismatchedToken deleting \" \\\n            // + str(recognizer.getTokenStream().LT(1)) \\\n            // + \" since \" + str(recognizer.getTokenStream().LT(2)) \\\n            // + \" is what we want\", file=sys.stderr)\n            recognizer.consume(); // simply delete extra token\n            // we want to return the token we're actually matching\n            const matchedSymbol = recognizer.getCurrentToken()\n            this.reportMatch(recognizer); // we know current token is correct\n            return matchedSymbol;\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * Conjure up a missing token during error recovery.\n     *\n     * The recognizer attempts to recover from single missing\n     * symbols. But, actions might refer to that missing symbol.\n     * For example, x=ID {f($x);}. The action clearly assumes\n     * that there has been an identifier matched previously and that\n     * $x points at that token. If that token is missing, but\n     * the next token in the stream is what we want we assume that\n     * this token is missing and we keep going. Because we\n     * have to return some token to replace the missing token,\n     * we have to conjure one up. This method gives the user control\n     * over the tokens returned for missing tokens. Mostly,\n     * you will want to create something special for identifier\n     * tokens. For literals such as '{' and ',', the default\n     * action in the parser or tree parser works. It simply creates\n     * a CommonToken of the appropriate type. The text will be the token.\n     * If you change what tokens must be created by the lexer,\n     * override this method to create the appropriate tokens.\n     *\n     */\n    getMissingSymbol(recognizer) {\n        const currentSymbol = recognizer.getCurrentToken()\n        const expecting = this.getExpectedTokens(recognizer)\n        const expectedTokenType = expecting.first() // get any element\n        let tokenText\n        if (expectedTokenType===Token.EOF) {\n            tokenText = \"<missing EOF>\";\n        } else {\n            tokenText = \"<missing \" + recognizer.literalNames[expectedTokenType] + \">\";\n        }\n        let current = currentSymbol\n        const lookback = recognizer.getTokenStream().LT(-1)\n        if (current.type===Token.EOF && lookback !== null) {\n            current = lookback;\n        }\n        return recognizer.getTokenFactory().create(current.source,\n            expectedTokenType, tokenText, Token.DEFAULT_CHANNEL,\n            -1, -1, current.line, current.column);\n    }\n\n    getExpectedTokens(recognizer) {\n        return recognizer.getExpectedTokens();\n    }\n\n    /**\n     * How should a token be displayed in an error message? The default\n     * is to display just the text, but during development you might\n     * want to have a lot of information spit out. Override in that case\n     * to use t.toString() (which, for CommonToken, dumps everything about\n     * the token). This is better than forcing you to override a method in\n     * your token objects because you don't have to go modify your lexer\n     * so that it creates a new Java type.\n     */\n    getTokenErrorDisplay(t) {\n        if (t === null) {\n            return \"<no token>\";\n        }\n        let s = t.text\n        if (s === null) {\n            if (t.type===Token.EOF) {\n                s = \"<EOF>\";\n            } else {\n                s = \"<\" + t.type + \">\";\n            }\n        }\n        return this.escapeWSAndQuote(s);\n    }\n\n    escapeWSAndQuote(s) {\n        s = s.replace(/\\n/g,\"\\\\n\");\n        s = s.replace(/\\r/g,\"\\\\r\");\n        s = s.replace(/\\t/g,\"\\\\t\");\n        return \"'\" + s + \"'\";\n    }\n\n    /**\n     * Compute the error recovery set for the current rule. During\n     * rule invocation, the parser pushes the set of tokens that can\n     * follow that rule reference on the stack; this amounts to\n     * computing FIRST of what follows the rule reference in the\n     * enclosing rule. See LinearApproximator.FIRST().\n     * This local follow set only includes tokens\n     * from within the rule; i.e., the FIRST computation done by\n     * ANTLR stops at the end of a rule.\n     *\n     * EXAMPLE\n     *\n     * When you find a \"no viable alt exception\", the input is not\n     * consistent with any of the alternatives for rule r. The best\n     * thing to do is to consume tokens until you see something that\n     * can legally follow a call to r//or* any rule that called r.\n     * You don't want the exact set of viable next tokens because the\n     * input might just be missing a token--you might consume the\n     * rest of the input looking for one of the missing tokens.\n     *\n     * Consider grammar:\n     *\n     * a : '[' b ']'\n     * | '(' b ')'\n     * ;\n     * b : c '^' INT ;\n     * c : ID\n     * | INT\n     * ;\n     *\n     * At each rule invocation, the set of tokens that could follow\n     * that rule is pushed on a stack. Here are the various\n     * context-sensitive follow sets:\n     *\n     * FOLLOW(b1_in_a) = FIRST(']') = ']'\n     * FOLLOW(b2_in_a) = FIRST(')') = ')'\n     * FOLLOW(c_in_b) = FIRST('^') = '^'\n     *\n     * Upon erroneous input \"[]\", the call chain is\n     *\n     * a -> b -> c\n     *\n     * and, hence, the follow context stack is:\n     *\n     * depth follow set start of rule execution\n     * 0 <EOF> a (from main())\n     * 1 ']' b\n     * 2 '^' c\n     *\n     * Notice that ')' is not included, because b would have to have\n     * been called from a different context in rule a for ')' to be\n     * included.\n     *\n     * For error recovery, we cannot consider FOLLOW(c)\n     * (context-sensitive or otherwise). We need the combined set of\n     * all context-sensitive FOLLOW sets--the set of all tokens that\n     * could follow any reference in the call chain. We need to\n     * resync to one of those tokens. Note that FOLLOW(c)='^' and if\n     * we resync'd to that token, we'd consume until EOF. We need to\n     * sync to context-sensitive FOLLOWs for a, b, and c: {']','^'}.\n     * In this case, for input \"[]\", LA(1) is ']' and in the set, so we would\n     * not consume anything. After printing an error, rule c would\n     * return normally. Rule b would not find the required '^' though.\n     * At this point, it gets a mismatched token error and throws an\n     * exception (since LA(1) is not in the viable following token\n     * set). The rule exception handler tries to recover, but finds\n     * the same recovery set and doesn't consume anything. Rule b\n     * exits normally returning to rule a. Now it finds the ']' (and\n     * with the successful match exits errorRecovery mode).\n     *\n     * So, you can see that the parser walks up the call chain looking\n     * for the token that was a member of the recovery set.\n     *\n     * Errors are not generated in errorRecovery mode.\n     *\n     * ANTLR's error recovery mechanism is based upon original ideas:\n     *\n     * \"Algorithms + Data Structures = Programs\" by Niklaus Wirth\n     *\n     * and\n     *\n     * \"A note on error recovery in recursive descent parsers\":\n     * http://portal.acm.org/citation.cfm?id=947902.947905\n     *\n     * Later, Josef Grosch had some good ideas:\n     *\n     * \"Efficient and Comfortable Error Recovery in Recursive Descent\n     * Parsers\":\n     * ftp://www.cocolab.com/products/cocktail/doca4.ps/ell.ps.zip\n     *\n     * Like Grosch I implement context-sensitive FOLLOW sets that are combined\n     * at run-time upon error to avoid overhead during parsing.\n     */\n    getErrorRecoverySet(recognizer) {\n        const atn = recognizer._interp.atn\n        let ctx = recognizer._ctx\n        const recoverSet = new IntervalSet()\n        while (ctx !== null && ctx.invokingState>=0) {\n            // compute what follows who invoked us\n            const invokingState = atn.states[ctx.invokingState]\n            const rt = invokingState.transitions[0]\n            const follow = atn.nextTokens(rt.followState)\n            recoverSet.addSet(follow);\n            ctx = ctx.parentCtx;\n        }\n        recoverSet.removeOne(Token.EPSILON);\n        return recoverSet;\n    }\n\n// Consume tokens until one matches the given token set.//\n    consumeUntil(recognizer, set) {\n        let ttype = recognizer.getTokenStream().LA(1)\n        while( ttype !== Token.EOF && !set.contains(ttype)) {\n            recognizer.consume();\n            ttype = recognizer.getTokenStream().LA(1);\n        }\n    }\n}\n\n\n/**\n * This implementation of {@link ANTLRErrorStrategy} responds to syntax errors\n * by immediately canceling the parse operation with a\n * {@link ParseCancellationException}. The implementation ensures that the\n * {@link ParserRuleContext//exception} field is set for all parse tree nodes\n * that were not completed prior to encountering the error.\n *\n * <p>\n * This error strategy is useful in the following scenarios.</p>\n *\n * <ul>\n * <li><strong>Two-stage parsing:</strong> This error strategy allows the first\n * stage of two-stage parsing to immediately terminate if an error is\n * encountered, and immediately fall back to the second stage. In addition to\n * avoiding wasted work by attempting to recover from errors here, the empty\n * implementation of {@link BailErrorStrategy//sync} improves the performance of\n * the first stage.</li>\n * <li><strong>Silent validation:</strong> When syntax errors are not being\n * reported or logged, and the parse result is simply ignored if errors occur,\n * the {@link BailErrorStrategy} avoids wasting work on recovering from errors\n * when the result will be ignored either way.</li>\n * </ul>\n *\n * <p>\n * {@code myparser.setErrorHandler(new BailErrorStrategy());}</p>\n *\n * @see Parser//setErrorHandler(ANTLRErrorStrategy)\n * */\nclass BailErrorStrategy extends DefaultErrorStrategy {\n    constructor() {\n        super();\n    }\n\n    /**\n     * Instead of recovering from exception {@code e}, re-throw it wrapped\n     * in a {@link ParseCancellationException} so it is not caught by the\n     * rule function catches. Use {@link Exception//getCause()} to get the\n     * original {@link RecognitionException}.\n     */\n    recover(recognizer, e) {\n        let context = recognizer._ctx\n        while (context !== null) {\n            context.exception = e;\n            context = context.parentCtx;\n        }\n        throw new ParseCancellationException(e);\n    }\n\n    /**\n     * Make sure we don't attempt to recover inline; if the parser\n     * successfully recovers, it won't throw an exception.\n     */\n    recoverInline(recognizer) {\n        this.recover(recognizer, new InputMismatchException(recognizer));\n    }\n\n// Make sure we don't attempt to recover from problems in subrules.//\n    sync(recognizer) {\n        // pass\n    }\n}\n\n\nmodule.exports = {BailErrorStrategy, DefaultErrorStrategy};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/error/ErrorStrategy.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/error/Errors.js":
/*!*****************************************************************************************!*\
  !*** ../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/error/Errors.js ***!
  \*****************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\n/**\n * The root of the ANTLR exception hierarchy. In general, ANTLR tracks just\n *  3 kinds of errors: prediction errors, failed predicate errors, and\n *  mismatched input errors. In each case, the parser knows where it is\n *  in the input, where it is in the ATN, the rule invocation stack,\n *  and what kind of problem occurred.\n */\n\nconst {PredicateTransition} = __webpack_require__(/*! ./../atn/Transition */ \"(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/atn/Transition.js\");\nconst {Interval} = (__webpack_require__(/*! ../IntervalSet */ \"(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/IntervalSet.js\").Interval);\n\nclass RecognitionException extends Error {\n    constructor(params) {\n        super(params.message);\n        if (!!Error.captureStackTrace) {\n            Error.captureStackTrace(this, RecognitionException);\n        } else {\n            var stack = new Error().stack;\n        }\n        this.message = params.message;\n        this.recognizer = params.recognizer;\n        this.input = params.input;\n        this.ctx = params.ctx;\n        /**\n         * The current {@link Token} when an error occurred. Since not all streams\n         * support accessing symbols by index, we have to track the {@link Token}\n         * instance itself\n        */\n        this.offendingToken = null;\n        /**\n         * Get the ATN state number the parser was in at the time the error\n         * occurred. For {@link NoViableAltException} and\n         * {@link LexerNoViableAltException} exceptions, this is the\n         * {@link DecisionState} number. For others, it is the state whose outgoing\n         * edge we couldn't match.\n         */\n        this.offendingState = -1;\n        if (this.recognizer!==null) {\n            this.offendingState = this.recognizer.state;\n        }\n    }\n\n    /**\n     * Gets the set of input symbols which could potentially follow the\n     * previously matched symbol at the time this exception was thrown.\n     *\n     * <p>If the set of expected tokens is not known and could not be computed,\n     * this method returns {@code null}.</p>\n     *\n     * @return The set of token types that could potentially follow the current\n     * state in the ATN, or {@code null} if the information is not available.\n     */\n    getExpectedTokens() {\n        if (this.recognizer!==null) {\n            return this.recognizer.atn.getExpectedTokens(this.offendingState, this.ctx);\n        } else {\n            return null;\n        }\n    }\n\n    // <p>If the state number is not known, this method returns -1.</p>\n    toString() {\n        return this.message;\n    }\n}\n\nclass LexerNoViableAltException extends RecognitionException {\n    constructor(lexer, input, startIndex, deadEndConfigs) {\n        super({message: \"\", recognizer: lexer, input: input, ctx: null});\n        this.startIndex = startIndex;\n        this.deadEndConfigs = deadEndConfigs;\n    }\n\n    toString() {\n        let symbol = \"\";\n        if (this.startIndex >= 0 && this.startIndex < this.input.size) {\n            symbol = this.input.getText(new Interval(this.startIndex,this.startIndex));\n        }\n        return \"LexerNoViableAltException\" + symbol;\n    }\n}\n\n\n/**\n * Indicates that the parser could not decide which of two or more paths\n * to take based upon the remaining input. It tracks the starting token\n * of the offending input and also knows where the parser was\n * in the various paths when the error. Reported by reportNoViableAlternative()\n */\nclass NoViableAltException extends RecognitionException {\n    constructor(recognizer, input, startToken, offendingToken, deadEndConfigs, ctx) {\n        ctx = ctx || recognizer._ctx;\n        offendingToken = offendingToken || recognizer.getCurrentToken();\n        startToken = startToken || recognizer.getCurrentToken();\n        input = input || recognizer.getInputStream();\n        super({message: \"\", recognizer: recognizer, input: input, ctx: ctx});\n        // Which configurations did we try at input.index() that couldn't match\n        // input.LT(1)?//\n        this.deadEndConfigs = deadEndConfigs;\n        // The token object at the start index; the input stream might\n        // not be buffering tokens so get a reference to it. (At the\n        // time the error occurred, of course the stream needs to keep a\n        // buffer all of the tokens but later we might not have access to those.)\n        this.startToken = startToken;\n        this.offendingToken = offendingToken;\n    }\n}\n\n/**\n * This signifies any kind of mismatched input exceptions such as\n * when the current input does not match the expected token.\n*/\nclass InputMismatchException extends RecognitionException {\n    constructor(recognizer) {\n        super({message: \"\", recognizer: recognizer, input: recognizer.getInputStream(), ctx: recognizer._ctx});\n        this.offendingToken = recognizer.getCurrentToken();\n    }\n}\n\nfunction formatMessage(predicate, message) {\n    if (message !==null) {\n        return message;\n    } else {\n        return \"failed predicate: {\" + predicate + \"}?\";\n    }\n}\n\n/**\n * A semantic predicate failed during validation. Validation of predicates\n * occurs when normally parsing the alternative just like matching a token.\n * Disambiguating predicate evaluation occurs when we test a predicate during\n * prediction.\n*/\nclass FailedPredicateException extends RecognitionException {\n    constructor(recognizer, predicate, message) {\n        super({\n            message: formatMessage(predicate, message || null), recognizer: recognizer,\n            input: recognizer.getInputStream(), ctx: recognizer._ctx\n        });\n        const s = recognizer._interp.atn.states[recognizer.state]\n        const trans = s.transitions[0]\n        if (trans instanceof PredicateTransition) {\n            this.ruleIndex = trans.ruleIndex;\n            this.predicateIndex = trans.predIndex;\n        } else {\n            this.ruleIndex = 0;\n            this.predicateIndex = 0;\n        }\n        this.predicate = predicate;\n        this.offendingToken = recognizer.getCurrentToken();\n    }\n}\n\n\nclass ParseCancellationException extends Error{\n    constructor() {\n        super()\n        Error.captureStackTrace(this, ParseCancellationException);\n    }\n}\n\nmodule.exports = {\n    RecognitionException,\n    NoViableAltException,\n    LexerNoViableAltException,\n    InputMismatchException,\n    FailedPredicateException,\n    ParseCancellationException\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/error/Errors.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/error/index.js":
/*!****************************************************************************************!*\
  !*** ../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/error/index.js ***!
  \****************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nmodule.exports.RecognitionException = __webpack_require__(/*! ./Errors */ \"(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/error/Errors.js\").RecognitionException;\nmodule.exports.NoViableAltException = __webpack_require__(/*! ./Errors */ \"(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/error/Errors.js\").NoViableAltException;\nmodule.exports.LexerNoViableAltException = __webpack_require__(/*! ./Errors */ \"(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/error/Errors.js\").LexerNoViableAltException;\nmodule.exports.InputMismatchException = __webpack_require__(/*! ./Errors */ \"(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/error/Errors.js\").InputMismatchException;\nmodule.exports.FailedPredicateException = __webpack_require__(/*! ./Errors */ \"(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/error/Errors.js\").FailedPredicateException;\nmodule.exports.DiagnosticErrorListener = __webpack_require__(/*! ./DiagnosticErrorListener */ \"(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/error/DiagnosticErrorListener.js\");\nmodule.exports.BailErrorStrategy = __webpack_require__(/*! ./ErrorStrategy */ \"(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/error/ErrorStrategy.js\").BailErrorStrategy;\nmodule.exports.DefaultErrorStrategy = __webpack_require__(/*! ./ErrorStrategy */ \"(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/error/ErrorStrategy.js\").DefaultErrorStrategy;\nmodule.exports.ErrorListener = __webpack_require__(/*! ./ErrorListener */ \"(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/error/ErrorListener.js\").ErrorListener;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2FudGxyNEA0LjkuMy9ub2RlX21vZHVsZXMvYW50bHI0L3NyYy9hbnRscjQvZXJyb3IvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEseUxBQThFO0FBQzlFLHlMQUE4RTtBQUM5RSxtTUFBd0Y7QUFDeEYsNkxBQWtGO0FBQ2xGLGlNQUFzRjtBQUN0Rix5TUFBNkU7QUFDN0UsaU1BQStFO0FBQy9FLHVNQUFxRjtBQUNyRix5TEFBdUUiLCJzb3VyY2VzIjpbIi9Vc2Vycy9ldGhhbmtpbS9OZXN0b3IvbWVkZmV0Y2guanMvbm9kZV9tb2R1bGVzLy5wbnBtL2FudGxyNEA0LjkuMy9ub2RlX21vZHVsZXMvYW50bHI0L3NyYy9hbnRscjQvZXJyb3IvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyogQ29weXJpZ2h0IChjKSAyMDEyLTIwMTcgVGhlIEFOVExSIFByb2plY3QuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBVc2Ugb2YgdGhpcyBmaWxlIGlzIGdvdmVybmVkIGJ5IHRoZSBCU0QgMy1jbGF1c2UgbGljZW5zZSB0aGF0XG4gKiBjYW4gYmUgZm91bmQgaW4gdGhlIExJQ0VOU0UudHh0IGZpbGUgaW4gdGhlIHByb2plY3Qgcm9vdC5cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cy5SZWNvZ25pdGlvbkV4Y2VwdGlvbiA9IHJlcXVpcmUoJy4vRXJyb3JzJykuUmVjb2duaXRpb25FeGNlcHRpb247XG5tb2R1bGUuZXhwb3J0cy5Ob1ZpYWJsZUFsdEV4Y2VwdGlvbiA9IHJlcXVpcmUoJy4vRXJyb3JzJykuTm9WaWFibGVBbHRFeGNlcHRpb247XG5tb2R1bGUuZXhwb3J0cy5MZXhlck5vVmlhYmxlQWx0RXhjZXB0aW9uID0gcmVxdWlyZSgnLi9FcnJvcnMnKS5MZXhlck5vVmlhYmxlQWx0RXhjZXB0aW9uO1xubW9kdWxlLmV4cG9ydHMuSW5wdXRNaXNtYXRjaEV4Y2VwdGlvbiA9IHJlcXVpcmUoJy4vRXJyb3JzJykuSW5wdXRNaXNtYXRjaEV4Y2VwdGlvbjtcbm1vZHVsZS5leHBvcnRzLkZhaWxlZFByZWRpY2F0ZUV4Y2VwdGlvbiA9IHJlcXVpcmUoJy4vRXJyb3JzJykuRmFpbGVkUHJlZGljYXRlRXhjZXB0aW9uO1xubW9kdWxlLmV4cG9ydHMuRGlhZ25vc3RpY0Vycm9yTGlzdGVuZXIgPSByZXF1aXJlKCcuL0RpYWdub3N0aWNFcnJvckxpc3RlbmVyJyk7XG5tb2R1bGUuZXhwb3J0cy5CYWlsRXJyb3JTdHJhdGVneSA9IHJlcXVpcmUoJy4vRXJyb3JTdHJhdGVneScpLkJhaWxFcnJvclN0cmF0ZWd5O1xubW9kdWxlLmV4cG9ydHMuRGVmYXVsdEVycm9yU3RyYXRlZ3kgPSByZXF1aXJlKCcuL0Vycm9yU3RyYXRlZ3knKS5EZWZhdWx0RXJyb3JTdHJhdGVneTtcbm1vZHVsZS5leHBvcnRzLkVycm9yTGlzdGVuZXIgPSByZXF1aXJlKCcuL0Vycm9yTGlzdGVuZXInKS5FcnJvckxpc3RlbmVyO1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/error/index.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/polyfills/codepointat.js":
/*!**************************************************************************************************!*\
  !*** ../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/polyfills/codepointat.js ***!
  \**************************************************************************************************/
/***/ (() => {

eval("/*! https://mths.be/codepointat v0.2.0 by @mathias */\nif (!String.prototype.codePointAt) {\n\t(function() {\n\t\t'use strict'; // needed to support `apply`/`call` with `undefined`/`null`\n\t\tvar defineProperty = (function() {\n\t\t\t// IE 8 only supports `Object.defineProperty` on DOM elements\n\t\t\tlet result;\n\t\t\ttry {\n\t\t\t\tconst object = {};\n\t\t\t\tconst $defineProperty = Object.defineProperty;\n\t\t\t\tresult = $defineProperty(object, object, object) && $defineProperty;\n\t\t\t} catch(error) {\n\t\t\t}\n\t\t\treturn result;\n\t\t}());\n\t\tconst codePointAt = function(position) {\n\t\t\tif (this == null) {\n\t\t\t\tthrow TypeError();\n\t\t\t}\n\t\t\tconst string = String(this);\n\t\t\tconst size = string.length;\n\t\t\t// `ToInteger`\n\t\t\tlet index = position ? Number(position) : 0;\n\t\t\tif (index !== index) { // better `isNaN`\n\t\t\t\tindex = 0;\n\t\t\t}\n\t\t\t// Account for out-of-bounds indices:\n\t\t\tif (index < 0 || index >= size) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t\t// Get the first code unit\n\t\t\tconst first = string.charCodeAt(index);\n\t\t\tlet second;\n\t\t\tif ( // check if it’s the start of a surrogate pair\n\t\t\t\tfirst >= 0xD800 && first <= 0xDBFF && // high surrogate\n\t\t\t\tsize > index + 1 // there is a next code unit\n\t\t\t) {\n\t\t\t\tsecond = string.charCodeAt(index + 1);\n\t\t\t\tif (second >= 0xDC00 && second <= 0xDFFF) { // low surrogate\n\t\t\t\t\t// https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae\n\t\t\t\t\treturn (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn first;\n\t\t};\n\t\tif (defineProperty) {\n\t\t\tdefineProperty(String.prototype, 'codePointAt', {\n\t\t\t\t'value': codePointAt,\n\t\t\t\t'configurable': true,\n\t\t\t\t'writable': true\n\t\t\t});\n\t\t} else {\n\t\t\tString.prototype.codePointAt = codePointAt;\n\t\t}\n\t}());\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2FudGxyNEA0LjkuMy9ub2RlX21vZHVsZXMvYW50bHI0L3NyYy9hbnRscjQvcG9seWZpbGxzL2NvZGVwb2ludGF0LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEI7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdEQUFnRDtBQUNoRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKLElBQUk7QUFDSjtBQUNBO0FBQ0EsRUFBRTtBQUNGIiwic291cmNlcyI6WyIvVXNlcnMvZXRoYW5raW0vTmVzdG9yL21lZGZldGNoLmpzL25vZGVfbW9kdWxlcy8ucG5wbS9hbnRscjRANC45LjMvbm9kZV9tb2R1bGVzL2FudGxyNC9zcmMvYW50bHI0L3BvbHlmaWxscy9jb2RlcG9pbnRhdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiEgaHR0cHM6Ly9tdGhzLmJlL2NvZGVwb2ludGF0IHYwLjIuMCBieSBAbWF0aGlhcyAqL1xuaWYgKCFTdHJpbmcucHJvdG90eXBlLmNvZGVQb2ludEF0KSB7XG5cdChmdW5jdGlvbigpIHtcblx0XHQndXNlIHN0cmljdCc7IC8vIG5lZWRlZCB0byBzdXBwb3J0IGBhcHBseWAvYGNhbGxgIHdpdGggYHVuZGVmaW5lZGAvYG51bGxgXG5cdFx0dmFyIGRlZmluZVByb3BlcnR5ID0gKGZ1bmN0aW9uKCkge1xuXHRcdFx0Ly8gSUUgOCBvbmx5IHN1cHBvcnRzIGBPYmplY3QuZGVmaW5lUHJvcGVydHlgIG9uIERPTSBlbGVtZW50c1xuXHRcdFx0bGV0IHJlc3VsdDtcblx0XHRcdHRyeSB7XG5cdFx0XHRcdGNvbnN0IG9iamVjdCA9IHt9O1xuXHRcdFx0XHRjb25zdCAkZGVmaW5lUHJvcGVydHkgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG5cdFx0XHRcdHJlc3VsdCA9ICRkZWZpbmVQcm9wZXJ0eShvYmplY3QsIG9iamVjdCwgb2JqZWN0KSAmJiAkZGVmaW5lUHJvcGVydHk7XG5cdFx0XHR9IGNhdGNoKGVycm9yKSB7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmVzdWx0O1xuXHRcdH0oKSk7XG5cdFx0Y29uc3QgY29kZVBvaW50QXQgPSBmdW5jdGlvbihwb3NpdGlvbikge1xuXHRcdFx0aWYgKHRoaXMgPT0gbnVsbCkge1xuXHRcdFx0XHR0aHJvdyBUeXBlRXJyb3IoKTtcblx0XHRcdH1cblx0XHRcdGNvbnN0IHN0cmluZyA9IFN0cmluZyh0aGlzKTtcblx0XHRcdGNvbnN0IHNpemUgPSBzdHJpbmcubGVuZ3RoO1xuXHRcdFx0Ly8gYFRvSW50ZWdlcmBcblx0XHRcdGxldCBpbmRleCA9IHBvc2l0aW9uID8gTnVtYmVyKHBvc2l0aW9uKSA6IDA7XG5cdFx0XHRpZiAoaW5kZXggIT09IGluZGV4KSB7IC8vIGJldHRlciBgaXNOYU5gXG5cdFx0XHRcdGluZGV4ID0gMDtcblx0XHRcdH1cblx0XHRcdC8vIEFjY291bnQgZm9yIG91dC1vZi1ib3VuZHMgaW5kaWNlczpcblx0XHRcdGlmIChpbmRleCA8IDAgfHwgaW5kZXggPj0gc2l6ZSkge1xuXHRcdFx0XHRyZXR1cm4gdW5kZWZpbmVkO1xuXHRcdFx0fVxuXHRcdFx0Ly8gR2V0IHRoZSBmaXJzdCBjb2RlIHVuaXRcblx0XHRcdGNvbnN0IGZpcnN0ID0gc3RyaW5nLmNoYXJDb2RlQXQoaW5kZXgpO1xuXHRcdFx0bGV0IHNlY29uZDtcblx0XHRcdGlmICggLy8gY2hlY2sgaWYgaXTigJlzIHRoZSBzdGFydCBvZiBhIHN1cnJvZ2F0ZSBwYWlyXG5cdFx0XHRcdGZpcnN0ID49IDB4RDgwMCAmJiBmaXJzdCA8PSAweERCRkYgJiYgLy8gaGlnaCBzdXJyb2dhdGVcblx0XHRcdFx0c2l6ZSA+IGluZGV4ICsgMSAvLyB0aGVyZSBpcyBhIG5leHQgY29kZSB1bml0XG5cdFx0XHQpIHtcblx0XHRcdFx0c2Vjb25kID0gc3RyaW5nLmNoYXJDb2RlQXQoaW5kZXggKyAxKTtcblx0XHRcdFx0aWYgKHNlY29uZCA+PSAweERDMDAgJiYgc2Vjb25kIDw9IDB4REZGRikgeyAvLyBsb3cgc3Vycm9nYXRlXG5cdFx0XHRcdFx0Ly8gaHR0cHM6Ly9tYXRoaWFzYnluZW5zLmJlL25vdGVzL2phdmFzY3JpcHQtZW5jb2Rpbmcjc3Vycm9nYXRlLWZvcm11bGFlXG5cdFx0XHRcdFx0cmV0dXJuIChmaXJzdCAtIDB4RDgwMCkgKiAweDQwMCArIHNlY29uZCAtIDB4REMwMCArIDB4MTAwMDA7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiBmaXJzdDtcblx0XHR9O1xuXHRcdGlmIChkZWZpbmVQcm9wZXJ0eSkge1xuXHRcdFx0ZGVmaW5lUHJvcGVydHkoU3RyaW5nLnByb3RvdHlwZSwgJ2NvZGVQb2ludEF0Jywge1xuXHRcdFx0XHQndmFsdWUnOiBjb2RlUG9pbnRBdCxcblx0XHRcdFx0J2NvbmZpZ3VyYWJsZSc6IHRydWUsXG5cdFx0XHRcdCd3cml0YWJsZSc6IHRydWVcblx0XHRcdH0pO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRTdHJpbmcucHJvdG90eXBlLmNvZGVQb2ludEF0ID0gY29kZVBvaW50QXQ7XG5cdFx0fVxuXHR9KCkpO1xufVxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/polyfills/codepointat.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/polyfills/fromcodepoint.js":
/*!****************************************************************************************************!*\
  !*** ../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/polyfills/fromcodepoint.js ***!
  \****************************************************************************************************/
/***/ (() => {

eval("/*! https://mths.be/fromcodepoint v0.2.1 by @mathias */\nif (!String.fromCodePoint) {\n\t(function() {\n\t\tconst defineProperty = (function() {\n\t\t\t// IE 8 only supports `Object.defineProperty` on DOM elements\n\t\t\tlet result;\n\t\t\ttry {\n\t\t\t\tconst object = {};\n\t\t\t\tconst $defineProperty = Object.defineProperty;\n\t\t\t\tresult = $defineProperty(object, object, object) && $defineProperty;\n\t\t\t} catch(error) {}\n\t\t\treturn result;\n\t\t}());\n\t\tconst stringFromCharCode = String.fromCharCode;\n\t\tconst floor = Math.floor;\n\t\tconst fromCodePoint = function(_) {\n\t\t\tconst MAX_SIZE = 0x4000;\n\t\t\tconst codeUnits = [];\n\t\t\tlet highSurrogate;\n\t\t\tlet lowSurrogate;\n\t\t\tlet index = -1;\n\t\t\tconst length = arguments.length;\n\t\t\tif (!length) {\n\t\t\t\treturn '';\n\t\t\t}\n\t\t\tlet result = '';\n\t\t\twhile (++index < length) {\n\t\t\t\tlet codePoint = Number(arguments[index]);\n\t\t\t\tif (\n\t\t\t\t\t!isFinite(codePoint) || // `NaN`, `+Infinity`, or `-Infinity`\n\t\t\t\t\tcodePoint < 0 || // not a valid Unicode code point\n\t\t\t\t\tcodePoint > 0x10FFFF || // not a valid Unicode code point\n\t\t\t\t\tfloor(codePoint) !== codePoint // not an integer\n\t\t\t\t) {\n\t\t\t\t\tthrow RangeError('Invalid code point: ' + codePoint);\n\t\t\t\t}\n\t\t\t\tif (codePoint <= 0xFFFF) { // BMP code point\n\t\t\t\t\tcodeUnits.push(codePoint);\n\t\t\t\t} else { // Astral code point; split in surrogate halves\n\t\t\t\t\t// https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae\n\t\t\t\t\tcodePoint -= 0x10000;\n\t\t\t\t\thighSurrogate = (codePoint >> 10) + 0xD800;\n\t\t\t\t\tlowSurrogate = (codePoint % 0x400) + 0xDC00;\n\t\t\t\t\tcodeUnits.push(highSurrogate, lowSurrogate);\n\t\t\t\t}\n\t\t\t\tif (index + 1 === length || codeUnits.length > MAX_SIZE) {\n\t\t\t\t\tresult += stringFromCharCode.apply(null, codeUnits);\n\t\t\t\t\tcodeUnits.length = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn result;\n\t\t};\n\t\tif (defineProperty) {\n\t\t\tdefineProperty(String, 'fromCodePoint', {\n\t\t\t\t'value': fromCodePoint,\n\t\t\t\t'configurable': true,\n\t\t\t\t'writable': true\n\t\t\t});\n\t\t} else {\n\t\t\tString.fromCodePoint = fromCodePoint;\n\t\t}\n\t}());\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2FudGxyNEA0LjkuMy9ub2RlX21vZHVsZXMvYW50bHI0L3NyYy9hbnRscjQvcG9seWZpbGxzL2Zyb21jb2RlcG9pbnQuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQjtBQUMvQjtBQUNBLE1BQU0sT0FBTyxzQkFBc0I7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKLElBQUk7QUFDSjtBQUNBO0FBQ0EsRUFBRTtBQUNGIiwic291cmNlcyI6WyIvVXNlcnMvZXRoYW5raW0vTmVzdG9yL21lZGZldGNoLmpzL25vZGVfbW9kdWxlcy8ucG5wbS9hbnRscjRANC45LjMvbm9kZV9tb2R1bGVzL2FudGxyNC9zcmMvYW50bHI0L3BvbHlmaWxscy9mcm9tY29kZXBvaW50LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qISBodHRwczovL210aHMuYmUvZnJvbWNvZGVwb2ludCB2MC4yLjEgYnkgQG1hdGhpYXMgKi9cbmlmICghU3RyaW5nLmZyb21Db2RlUG9pbnQpIHtcblx0KGZ1bmN0aW9uKCkge1xuXHRcdGNvbnN0IGRlZmluZVByb3BlcnR5ID0gKGZ1bmN0aW9uKCkge1xuXHRcdFx0Ly8gSUUgOCBvbmx5IHN1cHBvcnRzIGBPYmplY3QuZGVmaW5lUHJvcGVydHlgIG9uIERPTSBlbGVtZW50c1xuXHRcdFx0bGV0IHJlc3VsdDtcblx0XHRcdHRyeSB7XG5cdFx0XHRcdGNvbnN0IG9iamVjdCA9IHt9O1xuXHRcdFx0XHRjb25zdCAkZGVmaW5lUHJvcGVydHkgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG5cdFx0XHRcdHJlc3VsdCA9ICRkZWZpbmVQcm9wZXJ0eShvYmplY3QsIG9iamVjdCwgb2JqZWN0KSAmJiAkZGVmaW5lUHJvcGVydHk7XG5cdFx0XHR9IGNhdGNoKGVycm9yKSB7fVxuXHRcdFx0cmV0dXJuIHJlc3VsdDtcblx0XHR9KCkpO1xuXHRcdGNvbnN0IHN0cmluZ0Zyb21DaGFyQ29kZSA9IFN0cmluZy5mcm9tQ2hhckNvZGU7XG5cdFx0Y29uc3QgZmxvb3IgPSBNYXRoLmZsb29yO1xuXHRcdGNvbnN0IGZyb21Db2RlUG9pbnQgPSBmdW5jdGlvbihfKSB7XG5cdFx0XHRjb25zdCBNQVhfU0laRSA9IDB4NDAwMDtcblx0XHRcdGNvbnN0IGNvZGVVbml0cyA9IFtdO1xuXHRcdFx0bGV0IGhpZ2hTdXJyb2dhdGU7XG5cdFx0XHRsZXQgbG93U3Vycm9nYXRlO1xuXHRcdFx0bGV0IGluZGV4ID0gLTE7XG5cdFx0XHRjb25zdCBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xuXHRcdFx0aWYgKCFsZW5ndGgpIHtcblx0XHRcdFx0cmV0dXJuICcnO1xuXHRcdFx0fVxuXHRcdFx0bGV0IHJlc3VsdCA9ICcnO1xuXHRcdFx0d2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcblx0XHRcdFx0bGV0IGNvZGVQb2ludCA9IE51bWJlcihhcmd1bWVudHNbaW5kZXhdKTtcblx0XHRcdFx0aWYgKFxuXHRcdFx0XHRcdCFpc0Zpbml0ZShjb2RlUG9pbnQpIHx8IC8vIGBOYU5gLCBgK0luZmluaXR5YCwgb3IgYC1JbmZpbml0eWBcblx0XHRcdFx0XHRjb2RlUG9pbnQgPCAwIHx8IC8vIG5vdCBhIHZhbGlkIFVuaWNvZGUgY29kZSBwb2ludFxuXHRcdFx0XHRcdGNvZGVQb2ludCA+IDB4MTBGRkZGIHx8IC8vIG5vdCBhIHZhbGlkIFVuaWNvZGUgY29kZSBwb2ludFxuXHRcdFx0XHRcdGZsb29yKGNvZGVQb2ludCkgIT09IGNvZGVQb2ludCAvLyBub3QgYW4gaW50ZWdlclxuXHRcdFx0XHQpIHtcblx0XHRcdFx0XHR0aHJvdyBSYW5nZUVycm9yKCdJbnZhbGlkIGNvZGUgcG9pbnQ6ICcgKyBjb2RlUG9pbnQpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmIChjb2RlUG9pbnQgPD0gMHhGRkZGKSB7IC8vIEJNUCBjb2RlIHBvaW50XG5cdFx0XHRcdFx0Y29kZVVuaXRzLnB1c2goY29kZVBvaW50KTtcblx0XHRcdFx0fSBlbHNlIHsgLy8gQXN0cmFsIGNvZGUgcG9pbnQ7IHNwbGl0IGluIHN1cnJvZ2F0ZSBoYWx2ZXNcblx0XHRcdFx0XHQvLyBodHRwczovL21hdGhpYXNieW5lbnMuYmUvbm90ZXMvamF2YXNjcmlwdC1lbmNvZGluZyNzdXJyb2dhdGUtZm9ybXVsYWVcblx0XHRcdFx0XHRjb2RlUG9pbnQgLT0gMHgxMDAwMDtcblx0XHRcdFx0XHRoaWdoU3Vycm9nYXRlID0gKGNvZGVQb2ludCA+PiAxMCkgKyAweEQ4MDA7XG5cdFx0XHRcdFx0bG93U3Vycm9nYXRlID0gKGNvZGVQb2ludCAlIDB4NDAwKSArIDB4REMwMDtcblx0XHRcdFx0XHRjb2RlVW5pdHMucHVzaChoaWdoU3Vycm9nYXRlLCBsb3dTdXJyb2dhdGUpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmIChpbmRleCArIDEgPT09IGxlbmd0aCB8fCBjb2RlVW5pdHMubGVuZ3RoID4gTUFYX1NJWkUpIHtcblx0XHRcdFx0XHRyZXN1bHQgKz0gc3RyaW5nRnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsIGNvZGVVbml0cyk7XG5cdFx0XHRcdFx0Y29kZVVuaXRzLmxlbmd0aCA9IDA7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiByZXN1bHQ7XG5cdFx0fTtcblx0XHRpZiAoZGVmaW5lUHJvcGVydHkpIHtcblx0XHRcdGRlZmluZVByb3BlcnR5KFN0cmluZywgJ2Zyb21Db2RlUG9pbnQnLCB7XG5cdFx0XHRcdCd2YWx1ZSc6IGZyb21Db2RlUG9pbnQsXG5cdFx0XHRcdCdjb25maWd1cmFibGUnOiB0cnVlLFxuXHRcdFx0XHQnd3JpdGFibGUnOiB0cnVlXG5cdFx0XHR9KTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0U3RyaW5nLmZyb21Db2RlUG9pbnQgPSBmcm9tQ29kZVBvaW50O1xuXHRcdH1cblx0fSgpKTtcbn1cbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/polyfills/fromcodepoint.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/tree/Tree.js":
/*!**************************************************************************************!*\
  !*** ../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/tree/Tree.js ***!
  \**************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nconst {Token} = __webpack_require__(/*! ./../Token */ \"(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/Token.js\");\nconst {Interval} = __webpack_require__(/*! ./../IntervalSet */ \"(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/IntervalSet.js\");\nconst INVALID_INTERVAL = new Interval(-1, -2);\n\n/**\n * The basic notion of a tree has a parent, a payload, and a list of children.\n * It is the most abstract interface for all the trees used by ANTLR.\n */\nclass Tree {}\n\nclass SyntaxTree extends Tree {\n\tconstructor() {\n\t\tsuper();\n\t}\n}\n\nclass ParseTree extends SyntaxTree {\n\tconstructor() {\n\t\tsuper();\n\t}\n}\n\nclass RuleNode extends ParseTree {\n\tconstructor() {\n\t\tsuper();\n\t}\n\n\tgetRuleContext(){\n\t\tthrow new Error(\"missing interface implementation\")\n\t}\n}\n\nclass TerminalNode extends ParseTree {\n\tconstructor() {\n\t\tsuper();\n\t}\n}\n\nclass ErrorNode extends TerminalNode {\n\tconstructor() {\n\t\tsuper();\n\t}\n}\n\nclass ParseTreeVisitor {\n\tvisit(ctx) {\n\t\t if (Array.isArray(ctx)) {\n\t\t\treturn ctx.map(function(child) {\n\t\t\t\treturn child.accept(this);\n\t\t\t}, this);\n\t\t} else {\n\t\t\treturn ctx.accept(this);\n\t\t}\n\t}\n\n\tvisitChildren(ctx) {\n\t\tif (ctx.children) {\n\t\t\treturn this.visit(ctx.children);\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\tvisitTerminal(node) {\n\t}\n\n\tvisitErrorNode(node) {\n\t}\n}\n\nclass ParseTreeListener {\n\tvisitTerminal(node) {\n\t}\n\n\tvisitErrorNode(node) {\n\t}\n\n\tenterEveryRule(node) {\n\t}\n\n\texitEveryRule(node) {\n\t}\n}\n\nclass TerminalNodeImpl extends TerminalNode {\n\tconstructor(symbol) {\n\t\tsuper();\n\t\tthis.parentCtx = null;\n\t\tthis.symbol = symbol;\n\t}\n\n\tgetChild(i) {\n\t\treturn null;\n\t}\n\n\tgetSymbol() {\n\t\treturn this.symbol;\n\t}\n\n\tgetParent() {\n\t\treturn this.parentCtx;\n\t}\n\n\tgetPayload() {\n\t\treturn this.symbol;\n\t}\n\n\tgetSourceInterval() {\n\t\tif (this.symbol === null) {\n\t\t\treturn INVALID_INTERVAL;\n\t\t}\n\t\tconst tokenIndex = this.symbol.tokenIndex;\n\t\treturn new Interval(tokenIndex, tokenIndex);\n\t}\n\n\tgetChildCount() {\n\t\treturn 0;\n\t}\n\n\taccept(visitor) {\n\t\treturn visitor.visitTerminal(this);\n\t}\n\n\tgetText() {\n\t\treturn this.symbol.text;\n\t}\n\n\ttoString() {\n\t\tif (this.symbol.type === Token.EOF) {\n\t\t\treturn \"<EOF>\";\n\t\t} else {\n\t\t\treturn this.symbol.text;\n\t\t}\n\t}\n}\n\n\n/**\n * Represents a token that was consumed during resynchronization\n * rather than during a valid match operation. For example,\n * we will create this kind of a node during single token insertion\n * and deletion as well as during \"consume until error recovery set\"\n * upon no viable alternative exceptions.\n */\nclass ErrorNodeImpl extends TerminalNodeImpl {\n\tconstructor(token) {\n\t\tsuper(token);\n\t}\n\n\tisErrorNode() {\n\t\treturn true;\n\t}\n\n\taccept(visitor) {\n\t\treturn visitor.visitErrorNode(this);\n\t}\n}\n\nclass ParseTreeWalker {\n\n\t/**\n\t * Performs a walk on the given parse tree starting at the root and going down recursively\n\t * with depth-first search. On each node, {@link ParseTreeWalker//enterRule} is called before\n\t * recursively walking down into child nodes, then\n\t * {@link ParseTreeWalker//exitRule} is called after the recursive call to wind up.\n\t * @param listener The listener used by the walker to process grammar rules\n\t * @param t The parse tree to be walked on\n\t */\n\twalk(listener, t) {\n\t\tconst errorNode = t instanceof ErrorNode ||\n\t\t\t\t(t.isErrorNode !== undefined && t.isErrorNode());\n\t\tif (errorNode) {\n\t\t\tlistener.visitErrorNode(t);\n\t\t} else if (t instanceof TerminalNode) {\n\t\t\tlistener.visitTerminal(t);\n\t\t} else {\n\t\t\tthis.enterRule(listener, t);\n\t\t\tfor (let i = 0; i < t.getChildCount(); i++) {\n\t\t\t\tconst child = t.getChild(i);\n\t\t\t\tthis.walk(listener, child);\n\t\t\t}\n\t\t\tthis.exitRule(listener, t);\n\t\t}\n\t}\n\n\t/**\n\t * Enters a grammar rule by first triggering the generic event {@link ParseTreeListener//enterEveryRule}\n\t * then by triggering the event specific to the given parse tree node\n\t * @param listener The listener responding to the trigger events\n\t * @param r The grammar rule containing the rule context\n\t */\n\tenterRule(listener, r) {\n\t\tconst ctx = r.getRuleContext();\n\t\tlistener.enterEveryRule(ctx);\n\t\tctx.enterRule(listener);\n\t}\n\n\t/**\n\t * Exits a grammar rule by first triggering the event specific to the given parse tree node\n\t * then by triggering the generic event {@link ParseTreeListener//exitEveryRule}\n\t * @param listener The listener responding to the trigger events\n\t * @param r The grammar rule containing the rule context\n\t */\n\texitRule(listener, r) {\n\t\tconst ctx = r.getRuleContext();\n\t\tctx.exitRule(listener);\n\t\tlistener.exitEveryRule(ctx);\n\t}\n}\n\nParseTreeWalker.DEFAULT = new ParseTreeWalker();\n\nmodule.exports = {\n\tRuleNode,\n\tErrorNode,\n\tTerminalNode,\n\tErrorNodeImpl,\n\tTerminalNodeImpl,\n\tParseTreeListener,\n\tParseTreeVisitor,\n\tParseTreeWalker,\n\tINVALID_INTERVAL\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2FudGxyNEA0LjkuMy9ub2RlX21vZHVsZXMvYW50bHI0L3NyYy9hbnRscjQvdHJlZS9UcmVlLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU8sT0FBTyxFQUFFLG1CQUFPLENBQUMsb0dBQVk7QUFDcEMsT0FBTyxVQUFVLEVBQUUsbUJBQU8sQ0FBQyxnSEFBa0I7QUFDN0M7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0osSUFBSTtBQUNKO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0EsNENBQTRDLGtDQUFrQztBQUM5RTtBQUNBLEtBQUssaUNBQWlDO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQSxJQUFJO0FBQ0o7QUFDQSxtQkFBbUIsdUJBQXVCO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGlFQUFpRTtBQUNqRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLDBDQUEwQztBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsiL1VzZXJzL2V0aGFua2ltL05lc3Rvci9tZWRmZXRjaC5qcy9ub2RlX21vZHVsZXMvLnBucG0vYW50bHI0QDQuOS4zL25vZGVfbW9kdWxlcy9hbnRscjQvc3JjL2FudGxyNC90cmVlL1RyZWUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyogQ29weXJpZ2h0IChjKSAyMDEyLTIwMTcgVGhlIEFOVExSIFByb2plY3QuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBVc2Ugb2YgdGhpcyBmaWxlIGlzIGdvdmVybmVkIGJ5IHRoZSBCU0QgMy1jbGF1c2UgbGljZW5zZSB0aGF0XG4gKiBjYW4gYmUgZm91bmQgaW4gdGhlIExJQ0VOU0UudHh0IGZpbGUgaW4gdGhlIHByb2plY3Qgcm9vdC5cbiAqL1xuXG5jb25zdCB7VG9rZW59ID0gcmVxdWlyZSgnLi8uLi9Ub2tlbicpO1xuY29uc3Qge0ludGVydmFsfSA9IHJlcXVpcmUoJy4vLi4vSW50ZXJ2YWxTZXQnKTtcbmNvbnN0IElOVkFMSURfSU5URVJWQUwgPSBuZXcgSW50ZXJ2YWwoLTEsIC0yKTtcblxuLyoqXG4gKiBUaGUgYmFzaWMgbm90aW9uIG9mIGEgdHJlZSBoYXMgYSBwYXJlbnQsIGEgcGF5bG9hZCwgYW5kIGEgbGlzdCBvZiBjaGlsZHJlbi5cbiAqIEl0IGlzIHRoZSBtb3N0IGFic3RyYWN0IGludGVyZmFjZSBmb3IgYWxsIHRoZSB0cmVlcyB1c2VkIGJ5IEFOVExSLlxuICovXG5jbGFzcyBUcmVlIHt9XG5cbmNsYXNzIFN5bnRheFRyZWUgZXh0ZW5kcyBUcmVlIHtcblx0Y29uc3RydWN0b3IoKSB7XG5cdFx0c3VwZXIoKTtcblx0fVxufVxuXG5jbGFzcyBQYXJzZVRyZWUgZXh0ZW5kcyBTeW50YXhUcmVlIHtcblx0Y29uc3RydWN0b3IoKSB7XG5cdFx0c3VwZXIoKTtcblx0fVxufVxuXG5jbGFzcyBSdWxlTm9kZSBleHRlbmRzIFBhcnNlVHJlZSB7XG5cdGNvbnN0cnVjdG9yKCkge1xuXHRcdHN1cGVyKCk7XG5cdH1cblxuXHRnZXRSdWxlQ29udGV4dCgpe1xuXHRcdHRocm93IG5ldyBFcnJvcihcIm1pc3NpbmcgaW50ZXJmYWNlIGltcGxlbWVudGF0aW9uXCIpXG5cdH1cbn1cblxuY2xhc3MgVGVybWluYWxOb2RlIGV4dGVuZHMgUGFyc2VUcmVlIHtcblx0Y29uc3RydWN0b3IoKSB7XG5cdFx0c3VwZXIoKTtcblx0fVxufVxuXG5jbGFzcyBFcnJvck5vZGUgZXh0ZW5kcyBUZXJtaW5hbE5vZGUge1xuXHRjb25zdHJ1Y3RvcigpIHtcblx0XHRzdXBlcigpO1xuXHR9XG59XG5cbmNsYXNzIFBhcnNlVHJlZVZpc2l0b3Ige1xuXHR2aXNpdChjdHgpIHtcblx0XHQgaWYgKEFycmF5LmlzQXJyYXkoY3R4KSkge1xuXHRcdFx0cmV0dXJuIGN0eC5tYXAoZnVuY3Rpb24oY2hpbGQpIHtcblx0XHRcdFx0cmV0dXJuIGNoaWxkLmFjY2VwdCh0aGlzKTtcblx0XHRcdH0sIHRoaXMpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZXR1cm4gY3R4LmFjY2VwdCh0aGlzKTtcblx0XHR9XG5cdH1cblxuXHR2aXNpdENoaWxkcmVuKGN0eCkge1xuXHRcdGlmIChjdHguY2hpbGRyZW4pIHtcblx0XHRcdHJldHVybiB0aGlzLnZpc2l0KGN0eC5jaGlsZHJlbik7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJldHVybiBudWxsO1xuXHRcdH1cblx0fVxuXG5cdHZpc2l0VGVybWluYWwobm9kZSkge1xuXHR9XG5cblx0dmlzaXRFcnJvck5vZGUobm9kZSkge1xuXHR9XG59XG5cbmNsYXNzIFBhcnNlVHJlZUxpc3RlbmVyIHtcblx0dmlzaXRUZXJtaW5hbChub2RlKSB7XG5cdH1cblxuXHR2aXNpdEVycm9yTm9kZShub2RlKSB7XG5cdH1cblxuXHRlbnRlckV2ZXJ5UnVsZShub2RlKSB7XG5cdH1cblxuXHRleGl0RXZlcnlSdWxlKG5vZGUpIHtcblx0fVxufVxuXG5jbGFzcyBUZXJtaW5hbE5vZGVJbXBsIGV4dGVuZHMgVGVybWluYWxOb2RlIHtcblx0Y29uc3RydWN0b3Ioc3ltYm9sKSB7XG5cdFx0c3VwZXIoKTtcblx0XHR0aGlzLnBhcmVudEN0eCA9IG51bGw7XG5cdFx0dGhpcy5zeW1ib2wgPSBzeW1ib2w7XG5cdH1cblxuXHRnZXRDaGlsZChpKSB7XG5cdFx0cmV0dXJuIG51bGw7XG5cdH1cblxuXHRnZXRTeW1ib2woKSB7XG5cdFx0cmV0dXJuIHRoaXMuc3ltYm9sO1xuXHR9XG5cblx0Z2V0UGFyZW50KCkge1xuXHRcdHJldHVybiB0aGlzLnBhcmVudEN0eDtcblx0fVxuXG5cdGdldFBheWxvYWQoKSB7XG5cdFx0cmV0dXJuIHRoaXMuc3ltYm9sO1xuXHR9XG5cblx0Z2V0U291cmNlSW50ZXJ2YWwoKSB7XG5cdFx0aWYgKHRoaXMuc3ltYm9sID09PSBudWxsKSB7XG5cdFx0XHRyZXR1cm4gSU5WQUxJRF9JTlRFUlZBTDtcblx0XHR9XG5cdFx0Y29uc3QgdG9rZW5JbmRleCA9IHRoaXMuc3ltYm9sLnRva2VuSW5kZXg7XG5cdFx0cmV0dXJuIG5ldyBJbnRlcnZhbCh0b2tlbkluZGV4LCB0b2tlbkluZGV4KTtcblx0fVxuXG5cdGdldENoaWxkQ291bnQoKSB7XG5cdFx0cmV0dXJuIDA7XG5cdH1cblxuXHRhY2NlcHQodmlzaXRvcikge1xuXHRcdHJldHVybiB2aXNpdG9yLnZpc2l0VGVybWluYWwodGhpcyk7XG5cdH1cblxuXHRnZXRUZXh0KCkge1xuXHRcdHJldHVybiB0aGlzLnN5bWJvbC50ZXh0O1xuXHR9XG5cblx0dG9TdHJpbmcoKSB7XG5cdFx0aWYgKHRoaXMuc3ltYm9sLnR5cGUgPT09IFRva2VuLkVPRikge1xuXHRcdFx0cmV0dXJuIFwiPEVPRj5cIjtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cmV0dXJuIHRoaXMuc3ltYm9sLnRleHQ7XG5cdFx0fVxuXHR9XG59XG5cblxuLyoqXG4gKiBSZXByZXNlbnRzIGEgdG9rZW4gdGhhdCB3YXMgY29uc3VtZWQgZHVyaW5nIHJlc3luY2hyb25pemF0aW9uXG4gKiByYXRoZXIgdGhhbiBkdXJpbmcgYSB2YWxpZCBtYXRjaCBvcGVyYXRpb24uIEZvciBleGFtcGxlLFxuICogd2Ugd2lsbCBjcmVhdGUgdGhpcyBraW5kIG9mIGEgbm9kZSBkdXJpbmcgc2luZ2xlIHRva2VuIGluc2VydGlvblxuICogYW5kIGRlbGV0aW9uIGFzIHdlbGwgYXMgZHVyaW5nIFwiY29uc3VtZSB1bnRpbCBlcnJvciByZWNvdmVyeSBzZXRcIlxuICogdXBvbiBubyB2aWFibGUgYWx0ZXJuYXRpdmUgZXhjZXB0aW9ucy5cbiAqL1xuY2xhc3MgRXJyb3JOb2RlSW1wbCBleHRlbmRzIFRlcm1pbmFsTm9kZUltcGwge1xuXHRjb25zdHJ1Y3Rvcih0b2tlbikge1xuXHRcdHN1cGVyKHRva2VuKTtcblx0fVxuXG5cdGlzRXJyb3JOb2RlKCkge1xuXHRcdHJldHVybiB0cnVlO1xuXHR9XG5cblx0YWNjZXB0KHZpc2l0b3IpIHtcblx0XHRyZXR1cm4gdmlzaXRvci52aXNpdEVycm9yTm9kZSh0aGlzKTtcblx0fVxufVxuXG5jbGFzcyBQYXJzZVRyZWVXYWxrZXIge1xuXG5cdC8qKlxuXHQgKiBQZXJmb3JtcyBhIHdhbGsgb24gdGhlIGdpdmVuIHBhcnNlIHRyZWUgc3RhcnRpbmcgYXQgdGhlIHJvb3QgYW5kIGdvaW5nIGRvd24gcmVjdXJzaXZlbHlcblx0ICogd2l0aCBkZXB0aC1maXJzdCBzZWFyY2guIE9uIGVhY2ggbm9kZSwge0BsaW5rIFBhcnNlVHJlZVdhbGtlci8vZW50ZXJSdWxlfSBpcyBjYWxsZWQgYmVmb3JlXG5cdCAqIHJlY3Vyc2l2ZWx5IHdhbGtpbmcgZG93biBpbnRvIGNoaWxkIG5vZGVzLCB0aGVuXG5cdCAqIHtAbGluayBQYXJzZVRyZWVXYWxrZXIvL2V4aXRSdWxlfSBpcyBjYWxsZWQgYWZ0ZXIgdGhlIHJlY3Vyc2l2ZSBjYWxsIHRvIHdpbmQgdXAuXG5cdCAqIEBwYXJhbSBsaXN0ZW5lciBUaGUgbGlzdGVuZXIgdXNlZCBieSB0aGUgd2Fsa2VyIHRvIHByb2Nlc3MgZ3JhbW1hciBydWxlc1xuXHQgKiBAcGFyYW0gdCBUaGUgcGFyc2UgdHJlZSB0byBiZSB3YWxrZWQgb25cblx0ICovXG5cdHdhbGsobGlzdGVuZXIsIHQpIHtcblx0XHRjb25zdCBlcnJvck5vZGUgPSB0IGluc3RhbmNlb2YgRXJyb3JOb2RlIHx8XG5cdFx0XHRcdCh0LmlzRXJyb3JOb2RlICE9PSB1bmRlZmluZWQgJiYgdC5pc0Vycm9yTm9kZSgpKTtcblx0XHRpZiAoZXJyb3JOb2RlKSB7XG5cdFx0XHRsaXN0ZW5lci52aXNpdEVycm9yTm9kZSh0KTtcblx0XHR9IGVsc2UgaWYgKHQgaW5zdGFuY2VvZiBUZXJtaW5hbE5vZGUpIHtcblx0XHRcdGxpc3RlbmVyLnZpc2l0VGVybWluYWwodCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRoaXMuZW50ZXJSdWxlKGxpc3RlbmVyLCB0KTtcblx0XHRcdGZvciAobGV0IGkgPSAwOyBpIDwgdC5nZXRDaGlsZENvdW50KCk7IGkrKykge1xuXHRcdFx0XHRjb25zdCBjaGlsZCA9IHQuZ2V0Q2hpbGQoaSk7XG5cdFx0XHRcdHRoaXMud2FsayhsaXN0ZW5lciwgY2hpbGQpO1xuXHRcdFx0fVxuXHRcdFx0dGhpcy5leGl0UnVsZShsaXN0ZW5lciwgdCk7XG5cdFx0fVxuXHR9XG5cblx0LyoqXG5cdCAqIEVudGVycyBhIGdyYW1tYXIgcnVsZSBieSBmaXJzdCB0cmlnZ2VyaW5nIHRoZSBnZW5lcmljIGV2ZW50IHtAbGluayBQYXJzZVRyZWVMaXN0ZW5lci8vZW50ZXJFdmVyeVJ1bGV9XG5cdCAqIHRoZW4gYnkgdHJpZ2dlcmluZyB0aGUgZXZlbnQgc3BlY2lmaWMgdG8gdGhlIGdpdmVuIHBhcnNlIHRyZWUgbm9kZVxuXHQgKiBAcGFyYW0gbGlzdGVuZXIgVGhlIGxpc3RlbmVyIHJlc3BvbmRpbmcgdG8gdGhlIHRyaWdnZXIgZXZlbnRzXG5cdCAqIEBwYXJhbSByIFRoZSBncmFtbWFyIHJ1bGUgY29udGFpbmluZyB0aGUgcnVsZSBjb250ZXh0XG5cdCAqL1xuXHRlbnRlclJ1bGUobGlzdGVuZXIsIHIpIHtcblx0XHRjb25zdCBjdHggPSByLmdldFJ1bGVDb250ZXh0KCk7XG5cdFx0bGlzdGVuZXIuZW50ZXJFdmVyeVJ1bGUoY3R4KTtcblx0XHRjdHguZW50ZXJSdWxlKGxpc3RlbmVyKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBFeGl0cyBhIGdyYW1tYXIgcnVsZSBieSBmaXJzdCB0cmlnZ2VyaW5nIHRoZSBldmVudCBzcGVjaWZpYyB0byB0aGUgZ2l2ZW4gcGFyc2UgdHJlZSBub2RlXG5cdCAqIHRoZW4gYnkgdHJpZ2dlcmluZyB0aGUgZ2VuZXJpYyBldmVudCB7QGxpbmsgUGFyc2VUcmVlTGlzdGVuZXIvL2V4aXRFdmVyeVJ1bGV9XG5cdCAqIEBwYXJhbSBsaXN0ZW5lciBUaGUgbGlzdGVuZXIgcmVzcG9uZGluZyB0byB0aGUgdHJpZ2dlciBldmVudHNcblx0ICogQHBhcmFtIHIgVGhlIGdyYW1tYXIgcnVsZSBjb250YWluaW5nIHRoZSBydWxlIGNvbnRleHRcblx0ICovXG5cdGV4aXRSdWxlKGxpc3RlbmVyLCByKSB7XG5cdFx0Y29uc3QgY3R4ID0gci5nZXRSdWxlQ29udGV4dCgpO1xuXHRcdGN0eC5leGl0UnVsZShsaXN0ZW5lcik7XG5cdFx0bGlzdGVuZXIuZXhpdEV2ZXJ5UnVsZShjdHgpO1xuXHR9XG59XG5cblBhcnNlVHJlZVdhbGtlci5ERUZBVUxUID0gbmV3IFBhcnNlVHJlZVdhbGtlcigpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcblx0UnVsZU5vZGUsXG5cdEVycm9yTm9kZSxcblx0VGVybWluYWxOb2RlLFxuXHRFcnJvck5vZGVJbXBsLFxuXHRUZXJtaW5hbE5vZGVJbXBsLFxuXHRQYXJzZVRyZWVMaXN0ZW5lcixcblx0UGFyc2VUcmVlVmlzaXRvcixcblx0UGFyc2VUcmVlV2Fsa2VyLFxuXHRJTlZBTElEX0lOVEVSVkFMXG59XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/tree/Tree.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/tree/Trees.js":
/*!***************************************************************************************!*\
  !*** ../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/tree/Trees.js ***!
  \***************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nconst Utils = __webpack_require__(/*! ./../Utils */ \"(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/Utils.js\");\nconst {Token} = __webpack_require__(/*! ./../Token */ \"(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/Token.js\");\nconst {ErrorNode, TerminalNode, RuleNode} = __webpack_require__(/*! ./Tree */ \"(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/tree/Tree.js\");\n\n/** A set of utility routines useful for all kinds of ANTLR trees. */\nconst Trees = {\n    /**\n     * Print out a whole tree in LISP form. {@link //getNodeText} is used on the\n     *  node payloads to get the text for the nodes.  Detect\n     *  parse trees and extract data appropriately.\n     */\n    toStringTree: function(tree, ruleNames, recog) {\n        ruleNames = ruleNames || null;\n        recog = recog || null;\n        if(recog!==null) {\n            ruleNames = recog.ruleNames;\n        }\n        let s = Trees.getNodeText(tree, ruleNames);\n        s = Utils.escapeWhitespace(s, false);\n        const c = tree.getChildCount();\n        if(c===0) {\n            return s;\n        }\n        let res = \"(\" + s + ' ';\n        if(c>0) {\n            s = Trees.toStringTree(tree.getChild(0), ruleNames);\n            res = res.concat(s);\n        }\n        for(let i=1;i<c;i++) {\n            s = Trees.toStringTree(tree.getChild(i), ruleNames);\n            res = res.concat(' ' + s);\n        }\n        res = res.concat(\")\");\n        return res;\n    },\n\n    getNodeText: function(t, ruleNames, recog) {\n        ruleNames = ruleNames || null;\n        recog = recog || null;\n        if(recog!==null) {\n            ruleNames = recog.ruleNames;\n        }\n        if(ruleNames!==null) {\n            if (t instanceof RuleNode) {\n                const context = t.getRuleContext()\n                const altNumber = context.getAltNumber();\n                // use const value of ATN.INVALID_ALT_NUMBER to avoid circular dependency\n                if ( altNumber != 0 ) {\n                    return ruleNames[t.ruleIndex]+\":\"+altNumber;\n                }\n                return ruleNames[t.ruleIndex];\n            } else if ( t instanceof ErrorNode) {\n                return t.toString();\n            } else if(t instanceof TerminalNode) {\n                if(t.symbol!==null) {\n                    return t.symbol.text;\n                }\n            }\n        }\n        // no recog for rule names\n        const payload = t.getPayload();\n        if (payload instanceof Token ) {\n            return payload.text;\n        }\n        return t.getPayload().toString();\n    },\n\n    /**\n     * Return ordered list of all children of this node\n     */\n    getChildren: function(t) {\n        const list = [];\n        for(let i=0;i<t.getChildCount();i++) {\n            list.push(t.getChild(i));\n        }\n        return list;\n    },\n\n    /**\n     * Return a list of all ancestors of this node.  The first node of\n     * list is the root and the last is the parent of this node.\n     */\n    getAncestors: function(t) {\n        let ancestors = [];\n        t = t.getParent();\n        while(t!==null) {\n            ancestors = [t].concat(ancestors);\n            t = t.getParent();\n        }\n        return ancestors;\n    },\n\n    findAllTokenNodes: function(t, ttype) {\n        return Trees.findAllNodes(t, ttype, true);\n    },\n\n    findAllRuleNodes: function(t, ruleIndex) {\n        return Trees.findAllNodes(t, ruleIndex, false);\n    },\n\n    findAllNodes: function(t, index, findTokens) {\n        const nodes = [];\n        Trees._findAllNodes(t, index, findTokens, nodes);\n        return nodes;\n    },\n\n    _findAllNodes: function(t, index, findTokens, nodes) {\n        // check this node (the root) first\n        if(findTokens && (t instanceof TerminalNode)) {\n            if(t.symbol.type===index) {\n                nodes.push(t);\n            }\n        } else if(!findTokens && (t instanceof RuleNode)) {\n            if(t.ruleIndex===index) {\n                nodes.push(t);\n            }\n        }\n        // check children\n        for(let i=0;i<t.getChildCount();i++) {\n            Trees._findAllNodes(t.getChild(i), index, findTokens, nodes);\n        }\n    },\n\n    descendants: function(t) {\n        let nodes = [t];\n        for(let i=0;i<t.getChildCount();i++) {\n            nodes = nodes.concat(Trees.descendants(t.getChild(i)));\n        }\n        return nodes;\n    }\n}\n\nmodule.exports = Trees;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2FudGxyNEA0LjkuMy9ub2RlX21vZHVsZXMvYW50bHI0L3NyYy9hbnRscjQvdHJlZS9UcmVlcy5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxjQUFjLG1CQUFPLENBQUMsb0dBQVk7QUFDbEMsT0FBTyxPQUFPLEVBQUUsbUJBQU8sQ0FBQyxvR0FBWTtBQUNwQyxPQUFPLG1DQUFtQyxFQUFFLG1CQUFPLENBQUMsb0dBQVE7O0FBRTVEO0FBQ0E7QUFDQTtBQUNBLDZDQUE2QyxxQkFBcUI7QUFDbEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixJQUFJO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLG9CQUFvQjtBQUN4QztBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLG9CQUFvQjtBQUN4QztBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0Esb0JBQW9CLG9CQUFvQjtBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBIiwic291cmNlcyI6WyIvVXNlcnMvZXRoYW5raW0vTmVzdG9yL21lZGZldGNoLmpzL25vZGVfbW9kdWxlcy8ucG5wbS9hbnRscjRANC45LjMvbm9kZV9tb2R1bGVzL2FudGxyNC9zcmMvYW50bHI0L3RyZWUvVHJlZXMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyogQ29weXJpZ2h0IChjKSAyMDEyLTIwMTcgVGhlIEFOVExSIFByb2plY3QuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBVc2Ugb2YgdGhpcyBmaWxlIGlzIGdvdmVybmVkIGJ5IHRoZSBCU0QgMy1jbGF1c2UgbGljZW5zZSB0aGF0XG4gKiBjYW4gYmUgZm91bmQgaW4gdGhlIExJQ0VOU0UudHh0IGZpbGUgaW4gdGhlIHByb2plY3Qgcm9vdC5cbiAqL1xuXG5jb25zdCBVdGlscyA9IHJlcXVpcmUoJy4vLi4vVXRpbHMnKTtcbmNvbnN0IHtUb2tlbn0gPSByZXF1aXJlKCcuLy4uL1Rva2VuJyk7XG5jb25zdCB7RXJyb3JOb2RlLCBUZXJtaW5hbE5vZGUsIFJ1bGVOb2RlfSA9IHJlcXVpcmUoJy4vVHJlZScpO1xuXG4vKiogQSBzZXQgb2YgdXRpbGl0eSByb3V0aW5lcyB1c2VmdWwgZm9yIGFsbCBraW5kcyBvZiBBTlRMUiB0cmVlcy4gKi9cbmNvbnN0IFRyZWVzID0ge1xuICAgIC8qKlxuICAgICAqIFByaW50IG91dCBhIHdob2xlIHRyZWUgaW4gTElTUCBmb3JtLiB7QGxpbmsgLy9nZXROb2RlVGV4dH0gaXMgdXNlZCBvbiB0aGVcbiAgICAgKiAgbm9kZSBwYXlsb2FkcyB0byBnZXQgdGhlIHRleHQgZm9yIHRoZSBub2Rlcy4gIERldGVjdFxuICAgICAqICBwYXJzZSB0cmVlcyBhbmQgZXh0cmFjdCBkYXRhIGFwcHJvcHJpYXRlbHkuXG4gICAgICovXG4gICAgdG9TdHJpbmdUcmVlOiBmdW5jdGlvbih0cmVlLCBydWxlTmFtZXMsIHJlY29nKSB7XG4gICAgICAgIHJ1bGVOYW1lcyA9IHJ1bGVOYW1lcyB8fCBudWxsO1xuICAgICAgICByZWNvZyA9IHJlY29nIHx8IG51bGw7XG4gICAgICAgIGlmKHJlY29nIT09bnVsbCkge1xuICAgICAgICAgICAgcnVsZU5hbWVzID0gcmVjb2cucnVsZU5hbWVzO1xuICAgICAgICB9XG4gICAgICAgIGxldCBzID0gVHJlZXMuZ2V0Tm9kZVRleHQodHJlZSwgcnVsZU5hbWVzKTtcbiAgICAgICAgcyA9IFV0aWxzLmVzY2FwZVdoaXRlc3BhY2UocywgZmFsc2UpO1xuICAgICAgICBjb25zdCBjID0gdHJlZS5nZXRDaGlsZENvdW50KCk7XG4gICAgICAgIGlmKGM9PT0wKSB7XG4gICAgICAgICAgICByZXR1cm4gcztcbiAgICAgICAgfVxuICAgICAgICBsZXQgcmVzID0gXCIoXCIgKyBzICsgJyAnO1xuICAgICAgICBpZihjPjApIHtcbiAgICAgICAgICAgIHMgPSBUcmVlcy50b1N0cmluZ1RyZWUodHJlZS5nZXRDaGlsZCgwKSwgcnVsZU5hbWVzKTtcbiAgICAgICAgICAgIHJlcyA9IHJlcy5jb25jYXQocyk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yKGxldCBpPTE7aTxjO2krKykge1xuICAgICAgICAgICAgcyA9IFRyZWVzLnRvU3RyaW5nVHJlZSh0cmVlLmdldENoaWxkKGkpLCBydWxlTmFtZXMpO1xuICAgICAgICAgICAgcmVzID0gcmVzLmNvbmNhdCgnICcgKyBzKTtcbiAgICAgICAgfVxuICAgICAgICByZXMgPSByZXMuY29uY2F0KFwiKVwiKTtcbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICB9LFxuXG4gICAgZ2V0Tm9kZVRleHQ6IGZ1bmN0aW9uKHQsIHJ1bGVOYW1lcywgcmVjb2cpIHtcbiAgICAgICAgcnVsZU5hbWVzID0gcnVsZU5hbWVzIHx8IG51bGw7XG4gICAgICAgIHJlY29nID0gcmVjb2cgfHwgbnVsbDtcbiAgICAgICAgaWYocmVjb2chPT1udWxsKSB7XG4gICAgICAgICAgICBydWxlTmFtZXMgPSByZWNvZy5ydWxlTmFtZXM7XG4gICAgICAgIH1cbiAgICAgICAgaWYocnVsZU5hbWVzIT09bnVsbCkge1xuICAgICAgICAgICAgaWYgKHQgaW5zdGFuY2VvZiBSdWxlTm9kZSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNvbnRleHQgPSB0LmdldFJ1bGVDb250ZXh0KClcbiAgICAgICAgICAgICAgICBjb25zdCBhbHROdW1iZXIgPSBjb250ZXh0LmdldEFsdE51bWJlcigpO1xuICAgICAgICAgICAgICAgIC8vIHVzZSBjb25zdCB2YWx1ZSBvZiBBVE4uSU5WQUxJRF9BTFRfTlVNQkVSIHRvIGF2b2lkIGNpcmN1bGFyIGRlcGVuZGVuY3lcbiAgICAgICAgICAgICAgICBpZiAoIGFsdE51bWJlciAhPSAwICkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcnVsZU5hbWVzW3QucnVsZUluZGV4XStcIjpcIithbHROdW1iZXI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBydWxlTmFtZXNbdC5ydWxlSW5kZXhdO1xuICAgICAgICAgICAgfSBlbHNlIGlmICggdCBpbnN0YW5jZW9mIEVycm9yTm9kZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0LnRvU3RyaW5nKCk7XG4gICAgICAgICAgICB9IGVsc2UgaWYodCBpbnN0YW5jZW9mIFRlcm1pbmFsTm9kZSkge1xuICAgICAgICAgICAgICAgIGlmKHQuc3ltYm9sIT09bnVsbCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdC5zeW1ib2wudGV4dDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gbm8gcmVjb2cgZm9yIHJ1bGUgbmFtZXNcbiAgICAgICAgY29uc3QgcGF5bG9hZCA9IHQuZ2V0UGF5bG9hZCgpO1xuICAgICAgICBpZiAocGF5bG9hZCBpbnN0YW5jZW9mIFRva2VuICkge1xuICAgICAgICAgICAgcmV0dXJuIHBheWxvYWQudGV4dDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdC5nZXRQYXlsb2FkKCkudG9TdHJpbmcoKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUmV0dXJuIG9yZGVyZWQgbGlzdCBvZiBhbGwgY2hpbGRyZW4gb2YgdGhpcyBub2RlXG4gICAgICovXG4gICAgZ2V0Q2hpbGRyZW46IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgY29uc3QgbGlzdCA9IFtdO1xuICAgICAgICBmb3IobGV0IGk9MDtpPHQuZ2V0Q2hpbGRDb3VudCgpO2krKykge1xuICAgICAgICAgICAgbGlzdC5wdXNoKHQuZ2V0Q2hpbGQoaSkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBsaXN0O1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm4gYSBsaXN0IG9mIGFsbCBhbmNlc3RvcnMgb2YgdGhpcyBub2RlLiAgVGhlIGZpcnN0IG5vZGUgb2ZcbiAgICAgKiBsaXN0IGlzIHRoZSByb290IGFuZCB0aGUgbGFzdCBpcyB0aGUgcGFyZW50IG9mIHRoaXMgbm9kZS5cbiAgICAgKi9cbiAgICBnZXRBbmNlc3RvcnM6IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgbGV0IGFuY2VzdG9ycyA9IFtdO1xuICAgICAgICB0ID0gdC5nZXRQYXJlbnQoKTtcbiAgICAgICAgd2hpbGUodCE9PW51bGwpIHtcbiAgICAgICAgICAgIGFuY2VzdG9ycyA9IFt0XS5jb25jYXQoYW5jZXN0b3JzKTtcbiAgICAgICAgICAgIHQgPSB0LmdldFBhcmVudCgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhbmNlc3RvcnM7XG4gICAgfSxcblxuICAgIGZpbmRBbGxUb2tlbk5vZGVzOiBmdW5jdGlvbih0LCB0dHlwZSkge1xuICAgICAgICByZXR1cm4gVHJlZXMuZmluZEFsbE5vZGVzKHQsIHR0eXBlLCB0cnVlKTtcbiAgICB9LFxuXG4gICAgZmluZEFsbFJ1bGVOb2RlczogZnVuY3Rpb24odCwgcnVsZUluZGV4KSB7XG4gICAgICAgIHJldHVybiBUcmVlcy5maW5kQWxsTm9kZXModCwgcnVsZUluZGV4LCBmYWxzZSk7XG4gICAgfSxcblxuICAgIGZpbmRBbGxOb2RlczogZnVuY3Rpb24odCwgaW5kZXgsIGZpbmRUb2tlbnMpIHtcbiAgICAgICAgY29uc3Qgbm9kZXMgPSBbXTtcbiAgICAgICAgVHJlZXMuX2ZpbmRBbGxOb2Rlcyh0LCBpbmRleCwgZmluZFRva2Vucywgbm9kZXMpO1xuICAgICAgICByZXR1cm4gbm9kZXM7XG4gICAgfSxcblxuICAgIF9maW5kQWxsTm9kZXM6IGZ1bmN0aW9uKHQsIGluZGV4LCBmaW5kVG9rZW5zLCBub2Rlcykge1xuICAgICAgICAvLyBjaGVjayB0aGlzIG5vZGUgKHRoZSByb290KSBmaXJzdFxuICAgICAgICBpZihmaW5kVG9rZW5zICYmICh0IGluc3RhbmNlb2YgVGVybWluYWxOb2RlKSkge1xuICAgICAgICAgICAgaWYodC5zeW1ib2wudHlwZT09PWluZGV4KSB7XG4gICAgICAgICAgICAgICAgbm9kZXMucHVzaCh0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmKCFmaW5kVG9rZW5zICYmICh0IGluc3RhbmNlb2YgUnVsZU5vZGUpKSB7XG4gICAgICAgICAgICBpZih0LnJ1bGVJbmRleD09PWluZGV4KSB7XG4gICAgICAgICAgICAgICAgbm9kZXMucHVzaCh0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBjaGVjayBjaGlsZHJlblxuICAgICAgICBmb3IobGV0IGk9MDtpPHQuZ2V0Q2hpbGRDb3VudCgpO2krKykge1xuICAgICAgICAgICAgVHJlZXMuX2ZpbmRBbGxOb2Rlcyh0LmdldENoaWxkKGkpLCBpbmRleCwgZmluZFRva2Vucywgbm9kZXMpO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIGRlc2NlbmRhbnRzOiBmdW5jdGlvbih0KSB7XG4gICAgICAgIGxldCBub2RlcyA9IFt0XTtcbiAgICAgICAgZm9yKGxldCBpPTA7aTx0LmdldENoaWxkQ291bnQoKTtpKyspIHtcbiAgICAgICAgICAgIG5vZGVzID0gbm9kZXMuY29uY2F0KFRyZWVzLmRlc2NlbmRhbnRzKHQuZ2V0Q2hpbGQoaSkpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbm9kZXM7XG4gICAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFRyZWVzO1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/tree/Trees.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/tree/index.js":
/*!***************************************************************************************!*\
  !*** ../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/tree/index.js ***!
  \***************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nconst Tree = __webpack_require__(/*! ./Tree */ \"(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/tree/Tree.js\");\nconst Trees = __webpack_require__(/*! ./Trees */ \"(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/tree/Trees.js\");\nmodule.exports = {...Tree, Trees}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzLy5wbnBtL2FudGxyNEA0LjkuMy9ub2RlX21vZHVsZXMvYW50bHI0L3NyYy9hbnRscjQvdHJlZS9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxhQUFhLG1CQUFPLENBQUMsb0dBQVE7QUFDN0IsY0FBYyxtQkFBTyxDQUFDLHNHQUFTO0FBQy9CLGtCQUFrQiIsInNvdXJjZXMiOlsiL1VzZXJzL2V0aGFua2ltL05lc3Rvci9tZWRmZXRjaC5qcy9ub2RlX21vZHVsZXMvLnBucG0vYW50bHI0QDQuOS4zL25vZGVfbW9kdWxlcy9hbnRscjQvc3JjL2FudGxyNC90cmVlL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIENvcHlyaWdodCAoYykgMjAxMi0yMDE3IFRoZSBBTlRMUiBQcm9qZWN0LiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogVXNlIG9mIHRoaXMgZmlsZSBpcyBnb3Zlcm5lZCBieSB0aGUgQlNEIDMtY2xhdXNlIGxpY2Vuc2UgdGhhdFxuICogY2FuIGJlIGZvdW5kIGluIHRoZSBMSUNFTlNFLnR4dCBmaWxlIGluIHRoZSBwcm9qZWN0IHJvb3QuXG4gKi9cblxuY29uc3QgVHJlZSA9IHJlcXVpcmUoJy4vVHJlZScpO1xuY29uc3QgVHJlZXMgPSByZXF1aXJlKCcuL1RyZWVzJyk7XG5tb2R1bGUuZXhwb3J0cyA9IHsuLi5UcmVlLCBUcmVlc31cbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/.pnpm/antlr4@4.9.3/node_modules/antlr4/src/antlr4/tree/index.js\n");

/***/ })

};
;