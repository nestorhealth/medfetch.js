{
  "version": 3,
  "sources": ["../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/util/object-utils.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/operation-node/alter-table-node.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/operation-node/identifier-node.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/operation-node/create-index-node.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/operation-node/create-schema-node.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/operation-node/create-table-node.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/operation-node/schemable-identifier-node.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/operation-node/drop-index-node.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/operation-node/drop-schema-node.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/operation-node/drop-table-node.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/operation-node/alias-node.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/operation-node/table-node.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/operation-node/operation-node-source.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/expression/expression.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/operation-node/select-modifier-node.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/operation-node/and-node.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/operation-node/or-node.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/operation-node/on-node.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/operation-node/join-node.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/operation-node/binary-operation-node.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/operation-node/operator-node.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/operation-node/column-node.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/operation-node/select-all-node.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/operation-node/reference-node.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/dynamic/dynamic-reference-builder.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/operation-node/order-by-item-node.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/operation-node/raw-node.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/operation-node/collate-node.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/query-builder/order-by-item-builder.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/util/log-once.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/parser/order-by-parser.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/operation-node/json-reference-node.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/operation-node/json-operator-chain-node.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/operation-node/json-path-node.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/parser/reference-parser.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/operation-node/primitive-value-list-node.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/operation-node/value-list-node.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/operation-node/value-node.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/parser/value-parser.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/operation-node/parens-node.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/parser/binary-operation-parser.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/operation-node/order-by-node.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/operation-node/partition-by-node.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/operation-node/over-node.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/operation-node/from-node.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/operation-node/group-by-node.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/operation-node/having-node.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/operation-node/insert-query-node.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/operation-node/list-node.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/operation-node/update-query-node.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/operation-node/using-node.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/operation-node/delete-query-node.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/operation-node/where-node.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/operation-node/returning-node.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/operation-node/explain-node.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/operation-node/when-node.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/operation-node/merge-query-node.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/operation-node/output-node.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/operation-node/query-node.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/operation-node/select-query-node.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/query-builder/join-builder.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/operation-node/partition-by-item-node.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/parser/partition-by-parser.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/query-builder/over-builder.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/operation-node/selection-node.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/parser/select-parser.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/operation-node/values-node.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/operation-node/default-insert-value-node.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/parser/insert-values-parser.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/operation-node/column-update-node.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/parser/update-set-parser.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/operation-node/on-duplicate-key-node.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/query-builder/insert-result.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/query-builder/no-result-error.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/operation-node/on-conflict-node.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/query-builder/on-conflict-builder.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/operation-node/top-node.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/parser/top-parser.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/operation-node/or-action-node.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/query-builder/insert-query-builder.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/query-builder/delete-result.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/operation-node/limit-node.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/query-builder/delete-query-builder.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/query-builder/update-result.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/query-builder/update-query-builder.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/operation-node/common-table-expression-name-node.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/operation-node/common-table-expression-node.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/query-builder/cte-builder.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/parser/with-parser.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/operation-node/with-node.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/util/random-string.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/util/query-id.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/util/require-all-props.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/operation-node/operation-node-transformer.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/plugin/with-schema/with-schema-transformer.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/plugin/with-schema/with-schema-plugin.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/operation-node/matched-node.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/parser/merge-parser.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/util/deferred.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/util/provide-controlled-connection.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/query-executor/query-executor-base.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/query-executor/noop-query-executor.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/query-builder/merge-result.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/query-builder/merge-query-builder.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/query-creator.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/parser/parse-utils.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/parser/join-parser.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/operation-node/offset-node.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/operation-node/group-by-item-node.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/parser/group-by-parser.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/operation-node/set-operation-node.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/parser/set-operation-parser.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/expression/expression-wrapper.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/operation-node/fetch-node.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/parser/fetch-parser.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/query-builder/select-query-builder.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/operation-node/aggregate-function-node.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/operation-node/function-node.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/query-builder/aggregate-function-builder.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/query-builder/function-module.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/operation-node/unary-operation-node.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/parser/unary-operation-parser.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/operation-node/case-node.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/query-builder/case-builder.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/operation-node/json-path-leg-node.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/query-builder/json-path-builder.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/operation-node/tuple-node.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/operation-node/data-type-node.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/parser/data-type-parser.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/operation-node/cast-node.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/expression/expression-builder.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/parser/expression-parser.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/dynamic/dynamic-table-builder.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/parser/table-parser.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/operation-node/add-column-node.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/operation-node/column-definition-node.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/operation-node/drop-column-node.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/operation-node/rename-column-node.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/operation-node/check-constraint-node.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/operation-node/references-node.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/parser/default-value-parser.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/operation-node/generated-node.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/operation-node/default-value-node.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/parser/on-modify-action-parser.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/schema/column-definition-builder.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/operation-node/modify-column-node.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/operation-node/foreign-key-constraint-node.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/schema/foreign-key-constraint-builder.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/operation-node/add-constraint-node.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/operation-node/unique-constraint-node.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/operation-node/drop-constraint-node.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/operation-node/alter-column-node.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/schema/alter-column-builder.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/schema/alter-table-executor.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/schema/alter-table-add-foreign-key-constraint-builder.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/schema/alter-table-drop-constraint-builder.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/operation-node/primary-key-constraint-node.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/operation-node/add-index-node.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/schema/alter-table-add-index-builder.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/schema/unique-constraint-builder.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/schema/primary-key-constraint-builder.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/schema/check-constraint-builder.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/operation-node/rename-constraint-node.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/schema/alter-table-builder.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/plugin/immediate-value/immediate-value-transformer.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/schema/create-index-builder.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/schema/create-schema-builder.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/parser/on-commit-action-parse.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/schema/create-table-builder.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/schema/drop-index-builder.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/schema/drop-schema-builder.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/schema/drop-table-builder.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/operation-node/create-view-node.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/plugin/immediate-value/immediate-value-plugin.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/schema/create-view-builder.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/operation-node/drop-view-node.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/schema/drop-view-builder.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/operation-node/create-type-node.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/schema/create-type-builder.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/operation-node/drop-type-node.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/schema/drop-type-builder.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/parser/identifier-parser.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/operation-node/refresh-materialized-view-node.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/schema/refresh-materialized-view-builder.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/schema/schema.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/dynamic/dynamic.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/driver/default-connection-provider.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/query-executor/default-query-executor.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/util/performance-now.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/driver/runtime-driver.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/driver/single-connection-provider.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/driver/driver.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/util/log.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/util/compilable.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/kysely.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/raw-builder/raw-builder.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/raw-builder/sql.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/operation-node/operation-node-visitor.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/query-compiler/default-query-compiler.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/query-compiler/compiled-query.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/driver/dummy-driver.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/dialect/dialect-adapter-base.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/parser/savepoint-parser.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/dialect/sqlite/sqlite-driver.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/dialect/sqlite/sqlite-query-compiler.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/plugin/noop-plugin.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/migration/migrator.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/dialect/sqlite/sqlite-introspector.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/dialect/sqlite/sqlite-adapter.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/dialect/sqlite/sqlite-dialect.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/dialect/postgres/postgres-query-compiler.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/dialect/postgres/postgres-introspector.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/dialect/postgres/postgres-adapter.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/util/stack-trace-utils.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/dialect/mysql/mysql-driver.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/dialect/mysql/mysql-query-compiler.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/dialect/mysql/mysql-introspector.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/dialect/mysql/mysql-adapter.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/dialect/mysql/mysql-dialect.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/dialect/postgres/postgres-driver.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/dialect/postgres/postgres-dialect.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/dialect/mssql/mssql-adapter.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/dialect/mssql/mssql-driver.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/dialect/mssql/mssql-introspector.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/dialect/mssql/mssql-query-compiler.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/dialect/mssql/mssql-dialect.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/migration/file-migration-provider.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/plugin/camel-case/camel-case-transformer.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/plugin/camel-case/camel-case.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/plugin/camel-case/camel-case-plugin.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/plugin/deduplicate-joins/deduplicate-joins-transformer.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/plugin/deduplicate-joins/deduplicate-joins-plugin.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/plugin/parse-json-results/parse-json-results-plugin.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/plugin/handle-empty-in-lists/handle-empty-in-lists-transformer.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/plugin/handle-empty-in-lists/handle-empty-in-lists-plugin.js", "../../../../../../node_modules/.pnpm/kysely@0.28.2/node_modules/kysely/dist/esm/plugin/handle-empty-in-lists/handle-empty-in-lists.js"],
  "sourcesContent": ["/// <reference types=\"./object-utils.d.ts\" />\nexport function isEmpty(obj) {\n    if (Array.isArray(obj) || isString(obj) || isBuffer(obj)) {\n        return obj.length === 0;\n    }\n    else if (obj) {\n        return Object.keys(obj).length === 0;\n    }\n    return false;\n}\nexport function isUndefined(obj) {\n    return typeof obj === 'undefined' || obj === undefined;\n}\nexport function isString(obj) {\n    return typeof obj === 'string';\n}\nexport function isNumber(obj) {\n    return typeof obj === 'number';\n}\nexport function isBoolean(obj) {\n    return typeof obj === 'boolean';\n}\nexport function isNull(obj) {\n    return obj === null;\n}\nexport function isDate(obj) {\n    return obj instanceof Date;\n}\nexport function isBigInt(obj) {\n    return typeof obj === 'bigint';\n}\n// Don't change the returnd type to `obj is Buffer` to not create a\n// hard dependency to node.\nexport function isBuffer(obj) {\n    return typeof Buffer !== 'undefined' && Buffer.isBuffer(obj);\n}\nexport function isFunction(obj) {\n    return typeof obj === 'function';\n}\nexport function isObject(obj) {\n    return typeof obj === 'object' && obj !== null;\n}\nexport function isArrayBufferOrView(obj) {\n    return obj instanceof ArrayBuffer || ArrayBuffer.isView(obj);\n}\nexport function isPlainObject(obj) {\n    if (!isObject(obj) || getTag(obj) !== '[object Object]') {\n        return false;\n    }\n    if (Object.getPrototypeOf(obj) === null) {\n        return true;\n    }\n    let proto = obj;\n    while (Object.getPrototypeOf(proto) !== null) {\n        proto = Object.getPrototypeOf(proto);\n    }\n    return Object.getPrototypeOf(obj) === proto;\n}\nexport function getLast(arr) {\n    return arr[arr.length - 1];\n}\nexport function freeze(obj) {\n    return Object.freeze(obj);\n}\nexport function asArray(arg) {\n    if (isReadonlyArray(arg)) {\n        return arg;\n    }\n    else {\n        return [arg];\n    }\n}\nexport function asReadonlyArray(arg) {\n    if (isReadonlyArray(arg)) {\n        return arg;\n    }\n    else {\n        return freeze([arg]);\n    }\n}\nexport function isReadonlyArray(arg) {\n    return Array.isArray(arg);\n}\nexport function noop(obj) {\n    return obj;\n}\nexport function compare(obj1, obj2) {\n    if (isReadonlyArray(obj1) && isReadonlyArray(obj2)) {\n        return compareArrays(obj1, obj2);\n    }\n    else if (isObject(obj1) && isObject(obj2)) {\n        return compareObjects(obj1, obj2);\n    }\n    return obj1 === obj2;\n}\nfunction compareArrays(arr1, arr2) {\n    if (arr1.length !== arr2.length) {\n        return false;\n    }\n    for (let i = 0; i < arr1.length; ++i) {\n        if (!compare(arr1[i], arr2[i])) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction compareObjects(obj1, obj2) {\n    if (isBuffer(obj1) && isBuffer(obj2)) {\n        return compareBuffers(obj1, obj2);\n    }\n    else if (isDate(obj1) && isDate(obj2)) {\n        return compareDates(obj1, obj2);\n    }\n    return compareGenericObjects(obj1, obj2);\n}\nfunction compareBuffers(buf1, buf2) {\n    return Buffer.compare(buf1, buf2) === 0;\n}\nfunction compareDates(date1, date2) {\n    return date1.getTime() === date2.getTime();\n}\nfunction compareGenericObjects(obj1, obj2) {\n    const keys1 = Object.keys(obj1);\n    const keys2 = Object.keys(obj2);\n    if (keys1.length !== keys2.length) {\n        return false;\n    }\n    for (const key of keys1) {\n        if (!compare(obj1[key], obj2[key])) {\n            return false;\n        }\n    }\n    return true;\n}\nconst toString = Object.prototype.toString;\nfunction getTag(value) {\n    if (value == null) {\n        return value === undefined ? '[object Undefined]' : '[object Null]';\n    }\n    return toString.call(value);\n}\n", "/// <reference types=\"./alter-table-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const AlterTableNode = freeze({\n    is(node) {\n        return node.kind === 'AlterTableNode';\n    },\n    create(table) {\n        return freeze({\n            kind: 'AlterTableNode',\n            table,\n        });\n    },\n    cloneWithTableProps(node, props) {\n        return freeze({\n            ...node,\n            ...props,\n        });\n    },\n    cloneWithColumnAlteration(node, columnAlteration) {\n        return freeze({\n            ...node,\n            columnAlterations: node.columnAlterations\n                ? [...node.columnAlterations, columnAlteration]\n                : [columnAlteration],\n        });\n    },\n});\n", "/// <reference types=\"./identifier-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const IdentifierNode = freeze({\n    is(node) {\n        return node.kind === 'IdentifierNode';\n    },\n    create(name) {\n        return freeze({\n            kind: 'IdentifierNode',\n            name,\n        });\n    },\n});\n", "/// <reference types=\"./create-index-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { IdentifierNode } from './identifier-node.js';\n/**\n * @internal\n */\nexport const CreateIndexNode = freeze({\n    is(node) {\n        return node.kind === 'CreateIndexNode';\n    },\n    create(name) {\n        return freeze({\n            kind: 'CreateIndexNode',\n            name: IdentifierNode.create(name),\n        });\n    },\n    cloneWith(node, props) {\n        return freeze({\n            ...node,\n            ...props,\n        });\n    },\n    cloneWithColumns(node, columns) {\n        return freeze({\n            ...node,\n            columns: [...(node.columns || []), ...columns],\n        });\n    },\n});\n", "/// <reference types=\"./create-schema-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { IdentifierNode } from './identifier-node.js';\n/**\n * @internal\n */\nexport const CreateSchemaNode = freeze({\n    is(node) {\n        return node.kind === 'CreateSchemaNode';\n    },\n    create(schema, params) {\n        return freeze({\n            kind: 'CreateSchemaNode',\n            schema: IdentifierNode.create(schema),\n            ...params,\n        });\n    },\n    cloneWith(createSchema, params) {\n        return freeze({\n            ...createSchema,\n            ...params,\n        });\n    },\n});\n", "/// <reference types=\"./create-table-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nexport const ON_COMMIT_ACTIONS = ['preserve rows', 'delete rows', 'drop'];\n/**\n * @internal\n */\nexport const CreateTableNode = freeze({\n    is(node) {\n        return node.kind === 'CreateTableNode';\n    },\n    create(table) {\n        return freeze({\n            kind: 'CreateTableNode',\n            table,\n            columns: freeze([]),\n        });\n    },\n    cloneWithColumn(createTable, column) {\n        return freeze({\n            ...createTable,\n            columns: freeze([...createTable.columns, column]),\n        });\n    },\n    cloneWithConstraint(createTable, constraint) {\n        return freeze({\n            ...createTable,\n            constraints: createTable.constraints\n                ? freeze([...createTable.constraints, constraint])\n                : freeze([constraint]),\n        });\n    },\n    cloneWithFrontModifier(createTable, modifier) {\n        return freeze({\n            ...createTable,\n            frontModifiers: createTable.frontModifiers\n                ? freeze([...createTable.frontModifiers, modifier])\n                : freeze([modifier]),\n        });\n    },\n    cloneWithEndModifier(createTable, modifier) {\n        return freeze({\n            ...createTable,\n            endModifiers: createTable.endModifiers\n                ? freeze([...createTable.endModifiers, modifier])\n                : freeze([modifier]),\n        });\n    },\n    cloneWith(createTable, params) {\n        return freeze({\n            ...createTable,\n            ...params,\n        });\n    },\n});\n", "/// <reference types=\"./schemable-identifier-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { IdentifierNode } from './identifier-node.js';\n/**\n * @internal\n */\nexport const SchemableIdentifierNode = freeze({\n    is(node) {\n        return node.kind === 'SchemableIdentifierNode';\n    },\n    create(identifier) {\n        return freeze({\n            kind: 'SchemableIdentifierNode',\n            identifier: IdentifierNode.create(identifier),\n        });\n    },\n    createWithSchema(schema, identifier) {\n        return freeze({\n            kind: 'SchemableIdentifierNode',\n            schema: IdentifierNode.create(schema),\n            identifier: IdentifierNode.create(identifier),\n        });\n    },\n});\n", "/// <reference types=\"./drop-index-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { SchemableIdentifierNode } from './schemable-identifier-node.js';\n/**\n * @internal\n */\nexport const DropIndexNode = freeze({\n    is(node) {\n        return node.kind === 'DropIndexNode';\n    },\n    create(name, params) {\n        return freeze({\n            kind: 'DropIndexNode',\n            name: SchemableIdentifierNode.create(name),\n            ...params,\n        });\n    },\n    cloneWith(dropIndex, props) {\n        return freeze({\n            ...dropIndex,\n            ...props,\n        });\n    },\n});\n", "/// <reference types=\"./drop-schema-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { IdentifierNode } from './identifier-node.js';\n/**\n * @internal\n */\nexport const DropSchemaNode = freeze({\n    is(node) {\n        return node.kind === 'DropSchemaNode';\n    },\n    create(schema, params) {\n        return freeze({\n            kind: 'DropSchemaNode',\n            schema: IdentifierNode.create(schema),\n            ...params,\n        });\n    },\n    cloneWith(dropSchema, params) {\n        return freeze({\n            ...dropSchema,\n            ...params,\n        });\n    },\n});\n", "/// <reference types=\"./drop-table-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const DropTableNode = freeze({\n    is(node) {\n        return node.kind === 'DropTableNode';\n    },\n    create(table, params) {\n        return freeze({\n            kind: 'DropTableNode',\n            table,\n            ...params,\n        });\n    },\n    cloneWith(dropIndex, params) {\n        return freeze({\n            ...dropIndex,\n            ...params,\n        });\n    },\n});\n", "/// <reference types=\"./alias-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const AliasNode = freeze({\n    is(node) {\n        return node.kind === 'AliasNode';\n    },\n    create(node, alias) {\n        return freeze({\n            kind: 'AliasNode',\n            node,\n            alias,\n        });\n    },\n});\n", "/// <reference types=\"./table-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { SchemableIdentifierNode } from './schemable-identifier-node.js';\n/**\n * @internal\n */\nexport const TableNode = freeze({\n    is(node) {\n        return node.kind === 'TableNode';\n    },\n    create(table) {\n        return freeze({\n            kind: 'TableNode',\n            table: SchemableIdentifierNode.create(table),\n        });\n    },\n    createWithSchema(schema, table) {\n        return freeze({\n            kind: 'TableNode',\n            table: SchemableIdentifierNode.createWithSchema(schema, table),\n        });\n    },\n});\n", "/// <reference types=\"./operation-node-source.d.ts\" />\nimport { isFunction, isObject } from '../util/object-utils.js';\nexport function isOperationNodeSource(obj) {\n    return isObject(obj) && isFunction(obj.toOperationNode);\n}\n", "/// <reference types=\"./expression.d.ts\" />\nimport { isOperationNodeSource, } from '../operation-node/operation-node-source.js';\nimport { isObject, isString } from '../util/object-utils.js';\nexport function isExpression(obj) {\n    return isObject(obj) && 'expressionType' in obj && isOperationNodeSource(obj);\n}\nexport function isAliasedExpression(obj) {\n    return (isObject(obj) &&\n        'expression' in obj &&\n        isString(obj.alias) &&\n        isOperationNodeSource(obj));\n}\n", "/// <reference types=\"./select-modifier-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const SelectModifierNode = freeze({\n    is(node) {\n        return node.kind === 'SelectModifierNode';\n    },\n    create(modifier, of) {\n        return freeze({\n            kind: 'SelectModifierNode',\n            modifier,\n            of,\n        });\n    },\n    createWithExpression(modifier) {\n        return freeze({\n            kind: 'SelectModifierNode',\n            rawModifier: modifier,\n        });\n    },\n});\n", "/// <reference types=\"./and-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const AndNode = freeze({\n    is(node) {\n        return node.kind === 'AndNode';\n    },\n    create(left, right) {\n        return freeze({\n            kind: 'AndNode',\n            left,\n            right,\n        });\n    },\n});\n", "/// <reference types=\"./or-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const OrNode = freeze({\n    is(node) {\n        return node.kind === 'OrNode';\n    },\n    create(left, right) {\n        return freeze({\n            kind: 'OrNode',\n            left,\n            right,\n        });\n    },\n});\n", "/// <reference types=\"./on-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { AndNode } from './and-node.js';\nimport { OrNode } from './or-node.js';\n/**\n * @internal\n */\nexport const OnNode = freeze({\n    is(node) {\n        return node.kind === 'OnNode';\n    },\n    create(filter) {\n        return freeze({\n            kind: 'OnNode',\n            on: filter,\n        });\n    },\n    cloneWithOperation(onNode, operator, operation) {\n        return freeze({\n            ...onNode,\n            on: operator === 'And'\n                ? AndNode.create(onNode.on, operation)\n                : OrNode.create(onNode.on, operation),\n        });\n    },\n});\n", "/// <reference types=\"./join-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { OnNode } from './on-node.js';\n/**\n * @internal\n */\nexport const JoinNode = freeze({\n    is(node) {\n        return node.kind === 'JoinNode';\n    },\n    create(joinType, table) {\n        return freeze({\n            kind: 'JoinNode',\n            joinType,\n            table,\n            on: undefined,\n        });\n    },\n    createWithOn(joinType, table, on) {\n        return freeze({\n            kind: 'JoinNode',\n            joinType,\n            table,\n            on: OnNode.create(on),\n        });\n    },\n    cloneWithOn(joinNode, operation) {\n        return freeze({\n            ...joinNode,\n            on: joinNode.on\n                ? OnNode.cloneWithOperation(joinNode.on, 'And', operation)\n                : OnNode.create(operation),\n        });\n    },\n});\n", "/// <reference types=\"./binary-operation-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const BinaryOperationNode = freeze({\n    is(node) {\n        return node.kind === 'BinaryOperationNode';\n    },\n    create(leftOperand, operator, rightOperand) {\n        return freeze({\n            kind: 'BinaryOperationNode',\n            leftOperand,\n            operator,\n            rightOperand,\n        });\n    },\n});\n", "/// <reference types=\"./operator-node.d.ts\" />\nimport { freeze, isString } from '../util/object-utils.js';\nexport const COMPARISON_OPERATORS = [\n    '=',\n    '==',\n    '!=',\n    '<>',\n    '>',\n    '>=',\n    '<',\n    '<=',\n    'in',\n    'not in',\n    'is',\n    'is not',\n    'like',\n    'not like',\n    'match',\n    'ilike',\n    'not ilike',\n    '@>',\n    '<@',\n    '^@',\n    '&&',\n    '?',\n    '?&',\n    '?|',\n    '!<',\n    '!>',\n    '<=>',\n    '!~',\n    '~',\n    '~*',\n    '!~*',\n    '@@',\n    '@@@',\n    '!!',\n    '<->',\n    'regexp',\n    'is distinct from',\n    'is not distinct from',\n];\nexport const ARITHMETIC_OPERATORS = [\n    '+',\n    '-',\n    '*',\n    '/',\n    '%',\n    '^',\n    '&',\n    '|',\n    '#',\n    '<<',\n    '>>',\n];\nexport const JSON_OPERATORS = ['->', '->>'];\nexport const BINARY_OPERATORS = [\n    ...COMPARISON_OPERATORS,\n    ...ARITHMETIC_OPERATORS,\n    '&&',\n    '||',\n];\nexport const UNARY_FILTER_OPERATORS = ['exists', 'not exists'];\nexport const UNARY_OPERATORS = ['not', '-', ...UNARY_FILTER_OPERATORS];\nexport const OPERATORS = [\n    ...BINARY_OPERATORS,\n    ...JSON_OPERATORS,\n    ...UNARY_OPERATORS,\n    'between',\n    'between symmetric',\n];\n/**\n * @internal\n */\nexport const OperatorNode = freeze({\n    is(node) {\n        return node.kind === 'OperatorNode';\n    },\n    create(operator) {\n        return freeze({\n            kind: 'OperatorNode',\n            operator,\n        });\n    },\n});\nexport function isOperator(op) {\n    return isString(op) && OPERATORS.includes(op);\n}\nexport function isBinaryOperator(op) {\n    return isString(op) && BINARY_OPERATORS.includes(op);\n}\nexport function isComparisonOperator(op) {\n    return isString(op) && COMPARISON_OPERATORS.includes(op);\n}\nexport function isArithmeticOperator(op) {\n    return isString(op) && ARITHMETIC_OPERATORS.includes(op);\n}\nexport function isJSONOperator(op) {\n    return isString(op) && JSON_OPERATORS.includes(op);\n}\n", "/// <reference types=\"./column-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { IdentifierNode } from './identifier-node.js';\n/**\n * @internal\n */\nexport const ColumnNode = freeze({\n    is(node) {\n        return node.kind === 'ColumnNode';\n    },\n    create(column) {\n        return freeze({\n            kind: 'ColumnNode',\n            column: IdentifierNode.create(column),\n        });\n    },\n});\n", "/// <reference types=\"./select-all-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const SelectAllNode = freeze({\n    is(node) {\n        return node.kind === 'SelectAllNode';\n    },\n    create() {\n        return freeze({\n            kind: 'SelectAllNode',\n        });\n    },\n});\n", "/// <reference types=\"./reference-node.d.ts\" />\nimport { SelectAllNode } from './select-all-node.js';\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const ReferenceNode = freeze({\n    is(node) {\n        return node.kind === 'ReferenceNode';\n    },\n    create(column, table) {\n        return freeze({\n            kind: 'ReferenceNode',\n            table,\n            column,\n        });\n    },\n    createSelectAll(table) {\n        return freeze({\n            kind: 'ReferenceNode',\n            table,\n            column: SelectAllNode.create(),\n        });\n    },\n});\n", "/// <reference types=\"./dynamic-reference-builder.d.ts\" />\nimport { isOperationNodeSource, } from '../operation-node/operation-node-source.js';\nimport { parseSimpleReferenceExpression } from '../parser/reference-parser.js';\nimport { isObject, isString } from '../util/object-utils.js';\nexport class DynamicReferenceBuilder {\n    #dynamicReference;\n    get dynamicReference() {\n        return this.#dynamicReference;\n    }\n    /**\n     * @private\n     *\n     * This needs to be here just so that the typings work. Without this\n     * the generated .d.ts file contains no reference to the type param R\n     * which causes this type to be equal to DynamicReferenceBuilder with\n     * any R.\n     */\n    get refType() {\n        return undefined;\n    }\n    constructor(reference) {\n        this.#dynamicReference = reference;\n    }\n    toOperationNode() {\n        return parseSimpleReferenceExpression(this.#dynamicReference);\n    }\n}\nexport function isDynamicReferenceBuilder(obj) {\n    return (isObject(obj) &&\n        isOperationNodeSource(obj) &&\n        isString(obj.dynamicReference));\n}\n", "/// <reference types=\"./order-by-item-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const OrderByItemNode = freeze({\n    is(node) {\n        return node.kind === 'OrderByItemNode';\n    },\n    create(orderBy, direction) {\n        return freeze({\n            kind: 'OrderByItemNode',\n            orderBy,\n            direction,\n        });\n    },\n    cloneWith(node, props) {\n        return freeze({\n            ...node,\n            ...props,\n        });\n    },\n});\n", "/// <reference types=\"./raw-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const RawNode = freeze({\n    is(node) {\n        return node.kind === 'RawNode';\n    },\n    create(sqlFragments, parameters) {\n        return freeze({\n            kind: 'RawNode',\n            sqlFragments: freeze(sqlFragments),\n            parameters: freeze(parameters),\n        });\n    },\n    createWithSql(sql) {\n        return RawNode.create([sql], []);\n    },\n    createWithChild(child) {\n        return RawNode.create(['', ''], [child]);\n    },\n    createWithChildren(children) {\n        return RawNode.create(new Array(children.length + 1).fill(''), children);\n    },\n});\n", "/// <reference types=\"./collate-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { IdentifierNode } from './identifier-node.js';\n/**\n * @internal\n */\nexport const CollateNode = {\n    is(node) {\n        return node.kind === 'CollateNode';\n    },\n    create(collation) {\n        return freeze({\n            kind: 'CollateNode',\n            collation: IdentifierNode.create(collation),\n        });\n    },\n};\n", "/// <reference types=\"./order-by-item-builder.d.ts\" />\nimport { CollateNode } from '../operation-node/collate-node.js';\nimport { OrderByItemNode } from '../operation-node/order-by-item-node.js';\nimport { RawNode } from '../operation-node/raw-node.js';\nimport { freeze } from '../util/object-utils.js';\nexport class OrderByItemBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    /**\n     * Adds `desc` to the `order by` item.\n     *\n     * See {@link asc} for the opposite.\n     */\n    desc() {\n        return new OrderByItemBuilder({\n            node: OrderByItemNode.cloneWith(this.#props.node, {\n                direction: RawNode.createWithSql('desc'),\n            }),\n        });\n    }\n    /**\n     * Adds `asc` to the `order by` item.\n     *\n     * See {@link desc} for the opposite.\n     */\n    asc() {\n        return new OrderByItemBuilder({\n            node: OrderByItemNode.cloneWith(this.#props.node, {\n                direction: RawNode.createWithSql('asc'),\n            }),\n        });\n    }\n    /**\n     * Adds `nulls last` to the `order by` item.\n     *\n     * This is only supported by some dialects like PostgreSQL and SQLite.\n     *\n     * See {@link nullsFirst} for the opposite.\n     */\n    nullsLast() {\n        return new OrderByItemBuilder({\n            node: OrderByItemNode.cloneWith(this.#props.node, { nulls: 'last' }),\n        });\n    }\n    /**\n     * Adds `nulls first` to the `order by` item.\n     *\n     * This is only supported by some dialects like PostgreSQL and SQLite.\n     *\n     * See {@link nullsLast} for the opposite.\n     */\n    nullsFirst() {\n        return new OrderByItemBuilder({\n            node: OrderByItemNode.cloneWith(this.#props.node, { nulls: 'first' }),\n        });\n    }\n    /**\n     * Adds `collate <collationName>` to the `order by` item.\n     */\n    collate(collation) {\n        return new OrderByItemBuilder({\n            node: OrderByItemNode.cloneWith(this.#props.node, {\n                collation: CollateNode.create(collation),\n            }),\n        });\n    }\n    toOperationNode() {\n        return this.#props.node;\n    }\n}\n", "/// <reference types=\"./log-once.d.ts\" />\nconst LOGGED_MESSAGES = new Set();\n/**\n * Use for system-level logging, such as deprecation messages.\n * Logs a message and ensures it won't be logged again.\n */\nexport function logOnce(message) {\n    if (LOGGED_MESSAGES.has(message)) {\n        return;\n    }\n    LOGGED_MESSAGES.add(message);\n    console.log(message);\n}\n", "/// <reference types=\"./order-by-parser.d.ts\" />\nimport { isDynamicReferenceBuilder, } from '../dynamic/dynamic-reference-builder.js';\nimport { isExpression } from '../expression/expression.js';\nimport { OrderByItemNode } from '../operation-node/order-by-item-node.js';\nimport { RawNode } from '../operation-node/raw-node.js';\nimport { OrderByItemBuilder } from '../query-builder/order-by-item-builder.js';\nimport { logOnce } from '../util/log-once.js';\nimport { isExpressionOrFactory, parseExpression, } from './expression-parser.js';\nimport { parseStringReference, } from './reference-parser.js';\nexport function isOrderByDirection(thing) {\n    return thing === 'asc' || thing === 'desc';\n}\nexport function parseOrderBy(args) {\n    if (args.length === 2) {\n        return [parseOrderByItem(args[0], args[1])];\n    }\n    if (args.length === 1) {\n        const [orderBy] = args;\n        if (Array.isArray(orderBy)) {\n            logOnce('orderBy(array) is deprecated, use multiple orderBy calls instead.');\n            return orderBy.map((item) => parseOrderByItem(item));\n        }\n        return [parseOrderByItem(orderBy)];\n    }\n    throw new Error(`Invalid number of arguments at order by! expected 1-2, received ${args.length}`);\n}\nexport function parseOrderByItem(expr, modifiers) {\n    const parsedRef = parseOrderByExpression(expr);\n    if (OrderByItemNode.is(parsedRef)) {\n        if (modifiers) {\n            throw new Error('Cannot specify direction twice!');\n        }\n        return parsedRef;\n    }\n    return parseOrderByWithModifiers(parsedRef, modifiers);\n}\nfunction parseOrderByExpression(expr) {\n    if (isExpressionOrFactory(expr)) {\n        return parseExpression(expr);\n    }\n    if (isDynamicReferenceBuilder(expr)) {\n        return expr.toOperationNode();\n    }\n    const [ref, direction] = expr.split(' ');\n    if (direction) {\n        logOnce(\"`orderBy('column asc')` is deprecated. Use `orderBy('column', 'asc')` instead.\");\n        return parseOrderByWithModifiers(parseStringReference(ref), direction);\n    }\n    return parseStringReference(expr);\n}\nfunction parseOrderByWithModifiers(expr, modifiers) {\n    if (typeof modifiers === 'string') {\n        if (!isOrderByDirection(modifiers)) {\n            throw new Error(`Invalid order by direction: ${modifiers}`);\n        }\n        return OrderByItemNode.create(expr, RawNode.createWithSql(modifiers));\n    }\n    if (isExpression(modifiers)) {\n        logOnce(\"`orderBy(..., expr)` is deprecated. Use `orderBy(..., 'asc')` or `orderBy(..., (ob) => ...)` instead.\");\n        return OrderByItemNode.create(expr, modifiers.toOperationNode());\n    }\n    const node = OrderByItemNode.create(expr);\n    if (!modifiers) {\n        return node;\n    }\n    return modifiers(new OrderByItemBuilder({ node })).toOperationNode();\n}\n", "/// <reference types=\"./json-reference-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const JSONReferenceNode = freeze({\n    is(node) {\n        return node.kind === 'JSONReferenceNode';\n    },\n    create(reference, traversal) {\n        return freeze({\n            kind: 'JSONReferenceNode',\n            reference,\n            traversal,\n        });\n    },\n    cloneWithTraversal(node, traversal) {\n        return freeze({\n            ...node,\n            traversal,\n        });\n    },\n});\n", "/// <reference types=\"./json-operator-chain-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const JSONOperatorChainNode = freeze({\n    is(node) {\n        return node.kind === 'JSONOperatorChainNode';\n    },\n    create(operator) {\n        return freeze({\n            kind: 'JSONOperatorChainNode',\n            operator,\n            values: freeze([]),\n        });\n    },\n    cloneWithValue(node, value) {\n        return freeze({\n            ...node,\n            values: freeze([...node.values, value]),\n        });\n    },\n});\n", "/// <reference types=\"./json-path-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const JSONPathNode = freeze({\n    is(node) {\n        return node.kind === 'JSONPathNode';\n    },\n    create(inOperator) {\n        return freeze({\n            kind: 'JSONPathNode',\n            inOperator,\n            pathLegs: freeze([]),\n        });\n    },\n    cloneWithLeg(jsonPathNode, pathLeg) {\n        return freeze({\n            ...jsonPathNode,\n            pathLegs: freeze([...jsonPathNode.pathLegs, pathLeg]),\n        });\n    },\n});\n", "/// <reference types=\"./reference-parser.d.ts\" />\nimport { AliasNode } from '../operation-node/alias-node.js';\nimport { ColumnNode } from '../operation-node/column-node.js';\nimport { ReferenceNode } from '../operation-node/reference-node.js';\nimport { TableNode } from '../operation-node/table-node.js';\nimport { isReadonlyArray, isString } from '../util/object-utils.js';\nimport { parseExpression, isExpressionOrFactory, } from './expression-parser.js';\nimport { IdentifierNode } from '../operation-node/identifier-node.js';\nimport { isOrderByDirection, parseOrderBy, } from './order-by-parser.js';\nimport { OperatorNode, isJSONOperator, } from '../operation-node/operator-node.js';\nimport { JSONReferenceNode } from '../operation-node/json-reference-node.js';\nimport { JSONOperatorChainNode } from '../operation-node/json-operator-chain-node.js';\nimport { JSONPathNode } from '../operation-node/json-path-node.js';\nexport function parseSimpleReferenceExpression(exp) {\n    if (isString(exp)) {\n        return parseStringReference(exp);\n    }\n    return exp.toOperationNode();\n}\nexport function parseReferenceExpressionOrList(arg) {\n    if (isReadonlyArray(arg)) {\n        return arg.map((it) => parseReferenceExpression(it));\n    }\n    else {\n        return [parseReferenceExpression(arg)];\n    }\n}\nexport function parseReferenceExpression(exp) {\n    if (isExpressionOrFactory(exp)) {\n        return parseExpression(exp);\n    }\n    return parseSimpleReferenceExpression(exp);\n}\nexport function parseJSONReference(ref, op) {\n    const referenceNode = parseStringReference(ref);\n    if (isJSONOperator(op)) {\n        return JSONReferenceNode.create(referenceNode, JSONOperatorChainNode.create(OperatorNode.create(op)));\n    }\n    const opWithoutLastChar = op.slice(0, -1);\n    if (isJSONOperator(opWithoutLastChar)) {\n        return JSONReferenceNode.create(referenceNode, JSONPathNode.create(OperatorNode.create(opWithoutLastChar)));\n    }\n    throw new Error(`Invalid JSON operator: ${op}`);\n}\nexport function parseStringReference(ref) {\n    const COLUMN_SEPARATOR = '.';\n    if (!ref.includes(COLUMN_SEPARATOR)) {\n        return ReferenceNode.create(ColumnNode.create(ref));\n    }\n    const parts = ref.split(COLUMN_SEPARATOR).map(trim);\n    if (parts.length === 3) {\n        return parseStringReferenceWithTableAndSchema(parts);\n    }\n    if (parts.length === 2) {\n        return parseStringReferenceWithTable(parts);\n    }\n    throw new Error(`invalid column reference ${ref}`);\n}\nexport function parseAliasedStringReference(ref) {\n    const ALIAS_SEPARATOR = ' as ';\n    if (ref.includes(ALIAS_SEPARATOR)) {\n        const [columnRef, alias] = ref.split(ALIAS_SEPARATOR).map(trim);\n        return AliasNode.create(parseStringReference(columnRef), IdentifierNode.create(alias));\n    }\n    else {\n        return parseStringReference(ref);\n    }\n}\nexport function parseColumnName(column) {\n    return ColumnNode.create(column);\n}\nexport function parseOrderedColumnName(column) {\n    const ORDER_SEPARATOR = ' ';\n    if (column.includes(ORDER_SEPARATOR)) {\n        const [columnName, order] = column.split(ORDER_SEPARATOR).map(trim);\n        if (!isOrderByDirection(order)) {\n            throw new Error(`invalid order direction \"${order}\" next to \"${columnName}\"`);\n        }\n        return parseOrderBy([columnName, order])[0];\n    }\n    else {\n        return parseColumnName(column);\n    }\n}\nfunction parseStringReferenceWithTableAndSchema(parts) {\n    const [schema, table, column] = parts;\n    return ReferenceNode.create(ColumnNode.create(column), TableNode.createWithSchema(schema, table));\n}\nfunction parseStringReferenceWithTable(parts) {\n    const [table, column] = parts;\n    return ReferenceNode.create(ColumnNode.create(column), TableNode.create(table));\n}\nfunction trim(str) {\n    return str.trim();\n}\n", "/// <reference types=\"./primitive-value-list-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const PrimitiveValueListNode = freeze({\n    is(node) {\n        return node.kind === 'PrimitiveValueListNode';\n    },\n    create(values) {\n        return freeze({\n            kind: 'PrimitiveValueListNode',\n            values: freeze([...values]),\n        });\n    },\n});\n", "/// <reference types=\"./value-list-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const ValueListNode = freeze({\n    is(node) {\n        return node.kind === 'ValueListNode';\n    },\n    create(values) {\n        return freeze({\n            kind: 'ValueListNode',\n            values: freeze(values),\n        });\n    },\n});\n", "/// <reference types=\"./value-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const ValueNode = freeze({\n    is(node) {\n        return node.kind === 'ValueNode';\n    },\n    create(value) {\n        return freeze({\n            kind: 'ValueNode',\n            value,\n        });\n    },\n    createImmediate(value) {\n        return freeze({\n            kind: 'ValueNode',\n            value,\n            immediate: true,\n        });\n    },\n});\n", "/// <reference types=\"./value-parser.d.ts\" />\nimport { PrimitiveValueListNode } from '../operation-node/primitive-value-list-node.js';\nimport { ValueListNode } from '../operation-node/value-list-node.js';\nimport { ValueNode } from '../operation-node/value-node.js';\nimport { isBoolean, isNull, isNumber, isReadonlyArray, } from '../util/object-utils.js';\nimport { parseExpression, isExpressionOrFactory, } from './expression-parser.js';\nexport function parseValueExpressionOrList(arg) {\n    if (isReadonlyArray(arg)) {\n        return parseValueExpressionList(arg);\n    }\n    return parseValueExpression(arg);\n}\nexport function parseValueExpression(exp) {\n    if (isExpressionOrFactory(exp)) {\n        return parseExpression(exp);\n    }\n    return ValueNode.create(exp);\n}\nexport function isSafeImmediateValue(value) {\n    return isNumber(value) || isBoolean(value) || isNull(value);\n}\nexport function parseSafeImmediateValue(value) {\n    if (!isSafeImmediateValue(value)) {\n        throw new Error(`unsafe immediate value ${JSON.stringify(value)}`);\n    }\n    return ValueNode.createImmediate(value);\n}\nfunction parseValueExpressionList(arg) {\n    if (arg.some(isExpressionOrFactory)) {\n        return ValueListNode.create(arg.map((it) => parseValueExpression(it)));\n    }\n    return PrimitiveValueListNode.create(arg);\n}\n", "/// <reference types=\"./parens-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const ParensNode = freeze({\n    is(node) {\n        return node.kind === 'ParensNode';\n    },\n    create(node) {\n        return freeze({\n            kind: 'ParensNode',\n            node,\n        });\n    },\n});\n", "/// <reference types=\"./binary-operation-parser.d.ts\" />\nimport { BinaryOperationNode } from '../operation-node/binary-operation-node.js';\nimport { isBoolean, isNull, isString, isUndefined, } from '../util/object-utils.js';\nimport { isOperationNodeSource, } from '../operation-node/operation-node-source.js';\nimport { OperatorNode, OPERATORS, } from '../operation-node/operator-node.js';\nimport { parseReferenceExpression, } from './reference-parser.js';\nimport { parseValueExpression, parseValueExpressionOrList, } from './value-parser.js';\nimport { ValueNode } from '../operation-node/value-node.js';\nimport { AndNode } from '../operation-node/and-node.js';\nimport { ParensNode } from '../operation-node/parens-node.js';\nimport { OrNode } from '../operation-node/or-node.js';\nexport function parseValueBinaryOperationOrExpression(args) {\n    if (args.length === 3) {\n        return parseValueBinaryOperation(args[0], args[1], args[2]);\n    }\n    else if (args.length === 1) {\n        return parseValueExpression(args[0]);\n    }\n    throw new Error(`invalid arguments: ${JSON.stringify(args)}`);\n}\nexport function parseValueBinaryOperation(left, operator, right) {\n    if (isIsOperator(operator) && needsIsOperator(right)) {\n        return BinaryOperationNode.create(parseReferenceExpression(left), parseOperator(operator), ValueNode.createImmediate(right));\n    }\n    return BinaryOperationNode.create(parseReferenceExpression(left), parseOperator(operator), parseValueExpressionOrList(right));\n}\nexport function parseReferentialBinaryOperation(left, operator, right) {\n    return BinaryOperationNode.create(parseReferenceExpression(left), parseOperator(operator), parseReferenceExpression(right));\n}\nexport function parseFilterObject(obj, combinator) {\n    return parseFilterList(Object.entries(obj)\n        .filter(([, v]) => !isUndefined(v))\n        .map(([k, v]) => parseValueBinaryOperation(k, needsIsOperator(v) ? 'is' : '=', v)), combinator);\n}\nexport function parseFilterList(list, combinator, withParens = true) {\n    const combine = combinator === 'and' ? AndNode.create : OrNode.create;\n    if (list.length === 0) {\n        return BinaryOperationNode.create(ValueNode.createImmediate(1), OperatorNode.create('='), ValueNode.createImmediate(combinator === 'and' ? 1 : 0));\n    }\n    let node = toOperationNode(list[0]);\n    for (let i = 1; i < list.length; ++i) {\n        node = combine(node, toOperationNode(list[i]));\n    }\n    if (list.length > 1 && withParens) {\n        return ParensNode.create(node);\n    }\n    return node;\n}\nfunction isIsOperator(operator) {\n    return operator === 'is' || operator === 'is not';\n}\nfunction needsIsOperator(value) {\n    return isNull(value) || isBoolean(value);\n}\nfunction parseOperator(operator) {\n    if (isString(operator) && OPERATORS.includes(operator)) {\n        return OperatorNode.create(operator);\n    }\n    if (isOperationNodeSource(operator)) {\n        return operator.toOperationNode();\n    }\n    throw new Error(`invalid operator ${JSON.stringify(operator)}`);\n}\nfunction toOperationNode(nodeOrSource) {\n    return isOperationNodeSource(nodeOrSource)\n        ? nodeOrSource.toOperationNode()\n        : nodeOrSource;\n}\n", "/// <reference types=\"./order-by-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const OrderByNode = freeze({\n    is(node) {\n        return node.kind === 'OrderByNode';\n    },\n    create(items) {\n        return freeze({\n            kind: 'OrderByNode',\n            items: freeze([...items]),\n        });\n    },\n    cloneWithItems(orderBy, items) {\n        return freeze({\n            ...orderBy,\n            items: freeze([...orderBy.items, ...items]),\n        });\n    },\n});\n", "/// <reference types=\"./partition-by-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const PartitionByNode = freeze({\n    is(node) {\n        return node.kind === 'PartitionByNode';\n    },\n    create(items) {\n        return freeze({\n            kind: 'PartitionByNode',\n            items: freeze(items),\n        });\n    },\n    cloneWithItems(partitionBy, items) {\n        return freeze({\n            ...partitionBy,\n            items: freeze([...partitionBy.items, ...items]),\n        });\n    },\n});\n", "/// <reference types=\"./over-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { OrderByNode } from './order-by-node.js';\nimport { PartitionByNode } from './partition-by-node.js';\n/**\n * @internal\n */\nexport const OverNode = freeze({\n    is(node) {\n        return node.kind === 'OverNode';\n    },\n    create() {\n        return freeze({\n            kind: 'OverNode',\n        });\n    },\n    cloneWithOrderByItems(overNode, items) {\n        return freeze({\n            ...overNode,\n            orderBy: overNode.orderBy\n                ? OrderByNode.cloneWithItems(overNode.orderBy, items)\n                : OrderByNode.create(items),\n        });\n    },\n    cloneWithPartitionByItems(overNode, items) {\n        return freeze({\n            ...overNode,\n            partitionBy: overNode.partitionBy\n                ? PartitionByNode.cloneWithItems(overNode.partitionBy, items)\n                : PartitionByNode.create(items),\n        });\n    },\n});\n", "/// <reference types=\"./from-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const FromNode = freeze({\n    is(node) {\n        return node.kind === 'FromNode';\n    },\n    create(froms) {\n        return freeze({\n            kind: 'FromNode',\n            froms: freeze(froms),\n        });\n    },\n    cloneWithFroms(from, froms) {\n        return freeze({\n            ...from,\n            froms: freeze([...from.froms, ...froms]),\n        });\n    },\n});\n", "/// <reference types=\"./group-by-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const GroupByNode = freeze({\n    is(node) {\n        return node.kind === 'GroupByNode';\n    },\n    create(items) {\n        return freeze({\n            kind: 'GroupByNode',\n            items: freeze(items),\n        });\n    },\n    cloneWithItems(groupBy, items) {\n        return freeze({\n            ...groupBy,\n            items: freeze([...groupBy.items, ...items]),\n        });\n    },\n});\n", "/// <reference types=\"./having-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { AndNode } from './and-node.js';\nimport { OrNode } from './or-node.js';\n/**\n * @internal\n */\nexport const HavingNode = freeze({\n    is(node) {\n        return node.kind === 'HavingNode';\n    },\n    create(filter) {\n        return freeze({\n            kind: 'HavingNode',\n            having: filter,\n        });\n    },\n    cloneWithOperation(havingNode, operator, operation) {\n        return freeze({\n            ...havingNode,\n            having: operator === 'And'\n                ? AndNode.create(havingNode.having, operation)\n                : OrNode.create(havingNode.having, operation),\n        });\n    },\n});\n", "/// <reference types=\"./insert-query-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const InsertQueryNode = freeze({\n    is(node) {\n        return node.kind === 'InsertQueryNode';\n    },\n    create(into, withNode, replace) {\n        return freeze({\n            kind: 'InsertQueryNode',\n            into,\n            ...(withNode && { with: withNode }),\n            replace,\n        });\n    },\n    createWithoutInto() {\n        return freeze({\n            kind: 'InsertQueryNode',\n        });\n    },\n    cloneWith(insertQuery, props) {\n        return freeze({\n            ...insertQuery,\n            ...props,\n        });\n    },\n});\n", "/// <reference types=\"./list-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const ListNode = freeze({\n    is(node) {\n        return node.kind === 'ListNode';\n    },\n    create(items) {\n        return freeze({\n            kind: 'ListNode',\n            items: freeze(items),\n        });\n    },\n});\n", "/// <reference types=\"./update-query-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { FromNode } from './from-node.js';\nimport { ListNode } from './list-node.js';\n/**\n * @internal\n */\nexport const UpdateQueryNode = freeze({\n    is(node) {\n        return node.kind === 'UpdateQueryNode';\n    },\n    create(tables, withNode) {\n        return freeze({\n            kind: 'UpdateQueryNode',\n            // For backwards compatibility, use the raw table node when there's only one table\n            // and don't rename the property to something like `tables`.\n            table: tables.length === 1 ? tables[0] : ListNode.create(tables),\n            ...(withNode && { with: withNode }),\n        });\n    },\n    createWithoutTable() {\n        return freeze({\n            kind: 'UpdateQueryNode',\n        });\n    },\n    cloneWithFromItems(updateQuery, fromItems) {\n        return freeze({\n            ...updateQuery,\n            from: updateQuery.from\n                ? FromNode.cloneWithFroms(updateQuery.from, fromItems)\n                : FromNode.create(fromItems),\n        });\n    },\n    cloneWithUpdates(updateQuery, updates) {\n        return freeze({\n            ...updateQuery,\n            updates: updateQuery.updates\n                ? freeze([...updateQuery.updates, ...updates])\n                : updates,\n        });\n    },\n    cloneWithLimit(updateQuery, limit) {\n        return freeze({\n            ...updateQuery,\n            limit,\n        });\n    },\n});\n", "/// <reference types=\"./using-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const UsingNode = freeze({\n    is(node) {\n        return node.kind === 'UsingNode';\n    },\n    create(tables) {\n        return freeze({\n            kind: 'UsingNode',\n            tables: freeze(tables),\n        });\n    },\n    cloneWithTables(using, tables) {\n        return freeze({\n            ...using,\n            tables: freeze([...using.tables, ...tables]),\n        });\n    },\n});\n", "/// <reference types=\"./delete-query-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { FromNode } from './from-node.js';\nimport { UsingNode } from './using-node.js';\nimport { QueryNode } from './query-node.js';\n/**\n * @internal\n */\nexport const DeleteQueryNode = freeze({\n    is(node) {\n        return node.kind === 'DeleteQueryNode';\n    },\n    create(fromItems, withNode) {\n        return freeze({\n            kind: 'DeleteQueryNode',\n            from: FromNode.create(fromItems),\n            ...(withNode && { with: withNode }),\n        });\n    },\n    // TODO: remove in v0.29\n    /**\n     * @deprecated Use `QueryNode.cloneWithoutOrderBy` instead.\n     */\n    cloneWithOrderByItems: (node, items) => QueryNode.cloneWithOrderByItems(node, items),\n    // TODO: remove in v0.29\n    /**\n     * @deprecated Use `QueryNode.cloneWithoutOrderBy` instead.\n     */\n    cloneWithoutOrderBy: (node) => QueryNode.cloneWithoutOrderBy(node),\n    cloneWithLimit(deleteNode, limit) {\n        return freeze({\n            ...deleteNode,\n            limit,\n        });\n    },\n    cloneWithoutLimit(deleteNode) {\n        return freeze({\n            ...deleteNode,\n            limit: undefined,\n        });\n    },\n    cloneWithUsing(deleteNode, tables) {\n        return freeze({\n            ...deleteNode,\n            using: deleteNode.using !== undefined\n                ? UsingNode.cloneWithTables(deleteNode.using, tables)\n                : UsingNode.create(tables),\n        });\n    },\n});\n", "/// <reference types=\"./where-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { AndNode } from './and-node.js';\nimport { OrNode } from './or-node.js';\n/**\n * @internal\n */\nexport const WhereNode = freeze({\n    is(node) {\n        return node.kind === 'WhereNode';\n    },\n    create(filter) {\n        return freeze({\n            kind: 'WhereNode',\n            where: filter,\n        });\n    },\n    cloneWithOperation(whereNode, operator, operation) {\n        return freeze({\n            ...whereNode,\n            where: operator === 'And'\n                ? AndNode.create(whereNode.where, operation)\n                : OrNode.create(whereNode.where, operation),\n        });\n    },\n});\n", "/// <reference types=\"./returning-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const ReturningNode = freeze({\n    is(node) {\n        return node.kind === 'ReturningNode';\n    },\n    create(selections) {\n        return freeze({\n            kind: 'ReturningNode',\n            selections: freeze(selections),\n        });\n    },\n    cloneWithSelections(returning, selections) {\n        return freeze({\n            ...returning,\n            selections: returning.selections\n                ? freeze([...returning.selections, ...selections])\n                : freeze(selections),\n        });\n    },\n});\n", "/// <reference types=\"./explain-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const ExplainNode = freeze({\n    is(node) {\n        return node.kind === 'ExplainNode';\n    },\n    create(format, options) {\n        return freeze({\n            kind: 'ExplainNode',\n            format,\n            options,\n        });\n    },\n});\n", "/// <reference types=\"./when-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const WhenNode = freeze({\n    is(node) {\n        return node.kind === 'WhenNode';\n    },\n    create(condition) {\n        return freeze({\n            kind: 'WhenNode',\n            condition,\n        });\n    },\n    cloneWithResult(whenNode, result) {\n        return freeze({\n            ...whenNode,\n            result,\n        });\n    },\n});\n", "/// <reference types=\"./merge-query-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { WhenNode } from './when-node.js';\n/**\n * @internal\n */\nexport const MergeQueryNode = freeze({\n    is(node) {\n        return node.kind === 'MergeQueryNode';\n    },\n    create(into, withNode) {\n        return freeze({\n            kind: 'MergeQueryNode',\n            into,\n            ...(withNode && { with: withNode }),\n        });\n    },\n    cloneWithUsing(mergeNode, using) {\n        return freeze({\n            ...mergeNode,\n            using,\n        });\n    },\n    cloneWithWhen(mergeNode, when) {\n        return freeze({\n            ...mergeNode,\n            whens: mergeNode.whens\n                ? freeze([...mergeNode.whens, when])\n                : freeze([when]),\n        });\n    },\n    cloneWithThen(mergeNode, then) {\n        return freeze({\n            ...mergeNode,\n            whens: mergeNode.whens\n                ? freeze([\n                    ...mergeNode.whens.slice(0, -1),\n                    WhenNode.cloneWithResult(mergeNode.whens[mergeNode.whens.length - 1], then),\n                ])\n                : undefined,\n        });\n    },\n});\n", "/// <reference types=\"./output-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const OutputNode = freeze({\n    is(node) {\n        return node.kind === 'OutputNode';\n    },\n    create(selections) {\n        return freeze({\n            kind: 'OutputNode',\n            selections: freeze(selections),\n        });\n    },\n    cloneWithSelections(output, selections) {\n        return freeze({\n            ...output,\n            selections: output.selections\n                ? freeze([...output.selections, ...selections])\n                : freeze(selections),\n        });\n    },\n});\n", "/// <reference types=\"./query-node.d.ts\" />\nimport { InsertQueryNode } from './insert-query-node.js';\nimport { SelectQueryNode } from './select-query-node.js';\nimport { UpdateQueryNode } from './update-query-node.js';\nimport { DeleteQueryNode } from './delete-query-node.js';\nimport { WhereNode } from './where-node.js';\nimport { freeze } from '../util/object-utils.js';\nimport { ReturningNode } from './returning-node.js';\nimport { ExplainNode } from './explain-node.js';\nimport { MergeQueryNode } from './merge-query-node.js';\nimport { OutputNode } from './output-node.js';\nimport { OrderByNode } from './order-by-node.js';\n/**\n * @internal\n */\nexport const QueryNode = freeze({\n    is(node) {\n        return (SelectQueryNode.is(node) ||\n            InsertQueryNode.is(node) ||\n            UpdateQueryNode.is(node) ||\n            DeleteQueryNode.is(node) ||\n            MergeQueryNode.is(node));\n    },\n    cloneWithEndModifier(node, modifier) {\n        return freeze({\n            ...node,\n            endModifiers: node.endModifiers\n                ? freeze([...node.endModifiers, modifier])\n                : freeze([modifier]),\n        });\n    },\n    cloneWithWhere(node, operation) {\n        return freeze({\n            ...node,\n            where: node.where\n                ? WhereNode.cloneWithOperation(node.where, 'And', operation)\n                : WhereNode.create(operation),\n        });\n    },\n    cloneWithJoin(node, join) {\n        return freeze({\n            ...node,\n            joins: node.joins ? freeze([...node.joins, join]) : freeze([join]),\n        });\n    },\n    cloneWithReturning(node, selections) {\n        return freeze({\n            ...node,\n            returning: node.returning\n                ? ReturningNode.cloneWithSelections(node.returning, selections)\n                : ReturningNode.create(selections),\n        });\n    },\n    cloneWithoutReturning(node) {\n        return freeze({\n            ...node,\n            returning: undefined,\n        });\n    },\n    cloneWithoutWhere(node) {\n        return freeze({\n            ...node,\n            where: undefined,\n        });\n    },\n    cloneWithExplain(node, format, options) {\n        return freeze({\n            ...node,\n            explain: ExplainNode.create(format, options?.toOperationNode()),\n        });\n    },\n    cloneWithTop(node, top) {\n        return freeze({\n            ...node,\n            top,\n        });\n    },\n    cloneWithOutput(node, selections) {\n        return freeze({\n            ...node,\n            output: node.output\n                ? OutputNode.cloneWithSelections(node.output, selections)\n                : OutputNode.create(selections),\n        });\n    },\n    cloneWithOrderByItems(node, items) {\n        return freeze({\n            ...node,\n            orderBy: node.orderBy\n                ? OrderByNode.cloneWithItems(node.orderBy, items)\n                : OrderByNode.create(items),\n        });\n    },\n    cloneWithoutOrderBy(node) {\n        return freeze({\n            ...node,\n            orderBy: undefined,\n        });\n    },\n});\n", "/// <reference types=\"./select-query-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { FromNode } from './from-node.js';\nimport { GroupByNode } from './group-by-node.js';\nimport { HavingNode } from './having-node.js';\nimport { QueryNode } from './query-node.js';\n/**\n * @internal\n */\nexport const SelectQueryNode = freeze({\n    is(node) {\n        return node.kind === 'SelectQueryNode';\n    },\n    create(withNode) {\n        return freeze({\n            kind: 'SelectQueryNode',\n            ...(withNode && { with: withNode }),\n        });\n    },\n    createFrom(fromItems, withNode) {\n        return freeze({\n            kind: 'SelectQueryNode',\n            from: FromNode.create(fromItems),\n            ...(withNode && { with: withNode }),\n        });\n    },\n    cloneWithSelections(select, selections) {\n        return freeze({\n            ...select,\n            selections: select.selections\n                ? freeze([...select.selections, ...selections])\n                : freeze(selections),\n        });\n    },\n    cloneWithDistinctOn(select, expressions) {\n        return freeze({\n            ...select,\n            distinctOn: select.distinctOn\n                ? freeze([...select.distinctOn, ...expressions])\n                : freeze(expressions),\n        });\n    },\n    cloneWithFrontModifier(select, modifier) {\n        return freeze({\n            ...select,\n            frontModifiers: select.frontModifiers\n                ? freeze([...select.frontModifiers, modifier])\n                : freeze([modifier]),\n        });\n    },\n    // TODO: remove in v0.29\n    /**\n     * @deprecated Use `QueryNode.cloneWithoutOrderBy` instead.\n     */\n    cloneWithOrderByItems: (node, items) => QueryNode.cloneWithOrderByItems(node, items),\n    cloneWithGroupByItems(selectNode, items) {\n        return freeze({\n            ...selectNode,\n            groupBy: selectNode.groupBy\n                ? GroupByNode.cloneWithItems(selectNode.groupBy, items)\n                : GroupByNode.create(items),\n        });\n    },\n    cloneWithLimit(selectNode, limit) {\n        return freeze({\n            ...selectNode,\n            limit,\n        });\n    },\n    cloneWithOffset(selectNode, offset) {\n        return freeze({\n            ...selectNode,\n            offset,\n        });\n    },\n    cloneWithFetch(selectNode, fetch) {\n        return freeze({\n            ...selectNode,\n            fetch,\n        });\n    },\n    cloneWithHaving(selectNode, operation) {\n        return freeze({\n            ...selectNode,\n            having: selectNode.having\n                ? HavingNode.cloneWithOperation(selectNode.having, 'And', operation)\n                : HavingNode.create(operation),\n        });\n    },\n    cloneWithSetOperations(selectNode, setOperations) {\n        return freeze({\n            ...selectNode,\n            setOperations: selectNode.setOperations\n                ? freeze([...selectNode.setOperations, ...setOperations])\n                : freeze([...setOperations]),\n        });\n    },\n    cloneWithoutSelections(select) {\n        return freeze({\n            ...select,\n            selections: [],\n        });\n    },\n    cloneWithoutLimit(select) {\n        return freeze({\n            ...select,\n            limit: undefined,\n        });\n    },\n    cloneWithoutOffset(select) {\n        return freeze({\n            ...select,\n            offset: undefined,\n        });\n    },\n    // TODO: remove in v0.29\n    /**\n     * @deprecated Use `QueryNode.cloneWithoutOrderBy` instead.\n     */\n    cloneWithoutOrderBy: (node) => QueryNode.cloneWithoutOrderBy(node),\n    cloneWithoutGroupBy(select) {\n        return freeze({\n            ...select,\n            groupBy: undefined,\n        });\n    },\n});\n", "/// <reference types=\"./join-builder.d.ts\" />\nimport { JoinNode } from '../operation-node/join-node.js';\nimport { RawNode } from '../operation-node/raw-node.js';\nimport { parseValueBinaryOperationOrExpression, parseReferentialBinaryOperation, } from '../parser/binary-operation-parser.js';\nimport { freeze } from '../util/object-utils.js';\nexport class JoinBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    on(...args) {\n        return new JoinBuilder({\n            ...this.#props,\n            joinNode: JoinNode.cloneWithOn(this.#props.joinNode, parseValueBinaryOperationOrExpression(args)),\n        });\n    }\n    /**\n     * Just like {@link WhereInterface.whereRef} but adds an item to the join's\n     * `on` clause instead.\n     *\n     * See {@link WhereInterface.whereRef} for documentation and examples.\n     */\n    onRef(lhs, op, rhs) {\n        return new JoinBuilder({\n            ...this.#props,\n            joinNode: JoinNode.cloneWithOn(this.#props.joinNode, parseReferentialBinaryOperation(lhs, op, rhs)),\n        });\n    }\n    /**\n     * Adds `on true`.\n     */\n    onTrue() {\n        return new JoinBuilder({\n            ...this.#props,\n            joinNode: JoinNode.cloneWithOn(this.#props.joinNode, RawNode.createWithSql('true')),\n        });\n    }\n    /**\n     * Simply calls the provided function passing `this` as the only argument. `$call` returns\n     * what the provided function returns.\n     */\n    $call(func) {\n        return func(this);\n    }\n    toOperationNode() {\n        return this.#props.joinNode;\n    }\n}\n", "/// <reference types=\"./partition-by-item-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const PartitionByItemNode = freeze({\n    is(node) {\n        return node.kind === 'PartitionByItemNode';\n    },\n    create(partitionBy) {\n        return freeze({\n            kind: 'PartitionByItemNode',\n            partitionBy,\n        });\n    },\n});\n", "/// <reference types=\"./partition-by-parser.d.ts\" />\nimport { PartitionByItemNode } from '../operation-node/partition-by-item-node.js';\nimport { parseReferenceExpressionOrList, } from './reference-parser.js';\nexport function parsePartitionBy(partitionBy) {\n    return parseReferenceExpressionOrList(partitionBy).map(PartitionByItemNode.create);\n}\n", "/// <reference types=\"./over-builder.d.ts\" />\nimport { OverNode } from '../operation-node/over-node.js';\nimport { QueryNode } from '../operation-node/query-node.js';\nimport { parseOrderBy, } from '../parser/order-by-parser.js';\nimport { parsePartitionBy, } from '../parser/partition-by-parser.js';\nimport { freeze } from '../util/object-utils.js';\nexport class OverBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    orderBy(...args) {\n        return new OverBuilder({\n            overNode: OverNode.cloneWithOrderByItems(this.#props.overNode, parseOrderBy(args)),\n        });\n    }\n    clearOrderBy() {\n        return new OverBuilder({\n            overNode: QueryNode.cloneWithoutOrderBy(this.#props.overNode),\n        });\n    }\n    partitionBy(partitionBy) {\n        return new OverBuilder({\n            overNode: OverNode.cloneWithPartitionByItems(this.#props.overNode, parsePartitionBy(partitionBy)),\n        });\n    }\n    /**\n     * Simply calls the provided function passing `this` as the only argument. `$call` returns\n     * what the provided function returns.\n     */\n    $call(func) {\n        return func(this);\n    }\n    toOperationNode() {\n        return this.#props.overNode;\n    }\n}\n", "/// <reference types=\"./selection-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { ReferenceNode } from './reference-node.js';\nimport { SelectAllNode } from './select-all-node.js';\n/**\n * @internal\n */\nexport const SelectionNode = freeze({\n    is(node) {\n        return node.kind === 'SelectionNode';\n    },\n    create(selection) {\n        return freeze({\n            kind: 'SelectionNode',\n            selection: selection,\n        });\n    },\n    createSelectAll() {\n        return freeze({\n            kind: 'SelectionNode',\n            selection: SelectAllNode.create(),\n        });\n    },\n    createSelectAllFromTable(table) {\n        return freeze({\n            kind: 'SelectionNode',\n            selection: ReferenceNode.createSelectAll(table),\n        });\n    },\n});\n", "/// <reference types=\"./select-parser.d.ts\" />\nimport { isFunction, isReadonlyArray, isString } from '../util/object-utils.js';\nimport { SelectionNode } from '../operation-node/selection-node.js';\nimport { parseAliasedStringReference } from './reference-parser.js';\nimport { isDynamicReferenceBuilder, } from '../dynamic/dynamic-reference-builder.js';\nimport { parseAliasedExpression, } from './expression-parser.js';\nimport { parseTable } from './table-parser.js';\nimport { expressionBuilder, } from '../expression/expression-builder.js';\nexport function parseSelectArg(selection) {\n    if (isFunction(selection)) {\n        return parseSelectArg(selection(expressionBuilder()));\n    }\n    else if (isReadonlyArray(selection)) {\n        return selection.map((it) => parseSelectExpression(it));\n    }\n    else {\n        return [parseSelectExpression(selection)];\n    }\n}\nfunction parseSelectExpression(selection) {\n    if (isString(selection)) {\n        return SelectionNode.create(parseAliasedStringReference(selection));\n    }\n    else if (isDynamicReferenceBuilder(selection)) {\n        return SelectionNode.create(selection.toOperationNode());\n    }\n    else {\n        return SelectionNode.create(parseAliasedExpression(selection));\n    }\n}\nexport function parseSelectAll(table) {\n    if (!table) {\n        return [SelectionNode.createSelectAll()];\n    }\n    else if (Array.isArray(table)) {\n        return table.map(parseSelectAllArg);\n    }\n    else {\n        return [parseSelectAllArg(table)];\n    }\n}\nfunction parseSelectAllArg(table) {\n    if (isString(table)) {\n        return SelectionNode.createSelectAllFromTable(parseTable(table));\n    }\n    throw new Error(`invalid value selectAll expression: ${JSON.stringify(table)}`);\n}\n", "/// <reference types=\"./values-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const ValuesNode = freeze({\n    is(node) {\n        return node.kind === 'ValuesNode';\n    },\n    create(values) {\n        return freeze({\n            kind: 'ValuesNode',\n            values: freeze(values),\n        });\n    },\n});\n", "/// <reference types=\"./default-insert-value-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const DefaultInsertValueNode = freeze({\n    is(node) {\n        return node.kind === 'DefaultInsertValueNode';\n    },\n    create() {\n        return freeze({\n            kind: 'DefaultInsertValueNode',\n        });\n    },\n});\n", "/// <reference types=\"./insert-values-parser.d.ts\" />\nimport { ColumnNode } from '../operation-node/column-node.js';\nimport { PrimitiveValueListNode } from '../operation-node/primitive-value-list-node.js';\nimport { ValueListNode } from '../operation-node/value-list-node.js';\nimport { freeze, isFunction, isReadonlyArray, isUndefined, } from '../util/object-utils.js';\nimport { parseValueExpression } from './value-parser.js';\nimport { ValuesNode } from '../operation-node/values-node.js';\nimport { isExpressionOrFactory } from './expression-parser.js';\nimport { DefaultInsertValueNode } from '../operation-node/default-insert-value-node.js';\nimport { expressionBuilder, } from '../expression/expression-builder.js';\nexport function parseInsertExpression(arg) {\n    const objectOrList = isFunction(arg) ? arg(expressionBuilder()) : arg;\n    const list = isReadonlyArray(objectOrList)\n        ? objectOrList\n        : freeze([objectOrList]);\n    return parseInsertColumnsAndValues(list);\n}\nfunction parseInsertColumnsAndValues(rows) {\n    const columns = parseColumnNamesAndIndexes(rows);\n    return [\n        freeze([...columns.keys()].map(ColumnNode.create)),\n        ValuesNode.create(rows.map((row) => parseRowValues(row, columns))),\n    ];\n}\nfunction parseColumnNamesAndIndexes(rows) {\n    const columns = new Map();\n    for (const row of rows) {\n        const cols = Object.keys(row);\n        for (const col of cols) {\n            if (!columns.has(col) && row[col] !== undefined) {\n                columns.set(col, columns.size);\n            }\n        }\n    }\n    return columns;\n}\nfunction parseRowValues(row, columns) {\n    const rowColumns = Object.keys(row);\n    const rowValues = Array.from({\n        length: columns.size,\n    });\n    let hasUndefinedOrComplexColumns = false;\n    let indexedRowColumns = rowColumns.length;\n    for (const col of rowColumns) {\n        const columnIdx = columns.get(col);\n        if (isUndefined(columnIdx)) {\n            indexedRowColumns--;\n            continue;\n        }\n        const value = row[col];\n        if (isUndefined(value) || isExpressionOrFactory(value)) {\n            hasUndefinedOrComplexColumns = true;\n        }\n        rowValues[columnIdx] = value;\n    }\n    const hasMissingColumns = indexedRowColumns < columns.size;\n    if (hasMissingColumns || hasUndefinedOrComplexColumns) {\n        const defaultValue = DefaultInsertValueNode.create();\n        return ValueListNode.create(rowValues.map((it) => isUndefined(it) ? defaultValue : parseValueExpression(it)));\n    }\n    return PrimitiveValueListNode.create(rowValues);\n}\n", "/// <reference types=\"./column-update-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const ColumnUpdateNode = freeze({\n    is(node) {\n        return node.kind === 'ColumnUpdateNode';\n    },\n    create(column, value) {\n        return freeze({\n            kind: 'ColumnUpdateNode',\n            column,\n            value,\n        });\n    },\n});\n", "/// <reference types=\"./update-set-parser.d.ts\" />\nimport { ColumnNode } from '../operation-node/column-node.js';\nimport { ColumnUpdateNode } from '../operation-node/column-update-node.js';\nimport { expressionBuilder, } from '../expression/expression-builder.js';\nimport { isFunction } from '../util/object-utils.js';\nimport { parseValueExpression } from './value-parser.js';\nimport { parseReferenceExpression, } from './reference-parser.js';\nexport function parseUpdate(...args) {\n    if (args.length === 2) {\n        return [\n            ColumnUpdateNode.create(parseReferenceExpression(args[0]), parseValueExpression(args[1])),\n        ];\n    }\n    return parseUpdateObjectExpression(args[0]);\n}\nexport function parseUpdateObjectExpression(update) {\n    const updateObj = isFunction(update) ? update(expressionBuilder()) : update;\n    return Object.entries(updateObj)\n        .filter(([_, value]) => value !== undefined)\n        .map(([key, value]) => {\n        return ColumnUpdateNode.create(ColumnNode.create(key), parseValueExpression(value));\n    });\n}\n", "/// <reference types=\"./on-duplicate-key-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const OnDuplicateKeyNode = freeze({\n    is(node) {\n        return node.kind === 'OnDuplicateKeyNode';\n    },\n    create(updates) {\n        return freeze({\n            kind: 'OnDuplicateKeyNode',\n            updates,\n        });\n    },\n});\n", "/// <reference types=\"./insert-result.d.ts\" />\n/**\n * The result of an insert query.\n *\n * If the table has an auto incrementing primary key {@link insertId} will hold\n * the generated id on dialects that support it. For example PostgreSQL doesn't\n * return the id by default and {@link insertId} is undefined. On PostgreSQL you\n * need to use {@link ReturningInterface.returning} or {@link ReturningInterface.returningAll}\n * to get out the inserted id.\n *\n * {@link numInsertedOrUpdatedRows} holds the number of (actually) inserted rows.\n * On MySQL, updated rows are counted twice when using `on duplicate key update`.\n *\n * ### Examples\n *\n * ```ts\n * import type { NewPerson } from 'type-editor' // imaginary module\n *\n * async function insertPerson(person: NewPerson) {\n *   const result = await db\n *     .insertInto('person')\n *     .values(person)\n *     .executeTakeFirstOrThrow()\n *\n *   console.log(result.insertId) // relevant on MySQL\n *   console.log(result.numInsertedOrUpdatedRows) // always relevant\n * }\n * ```\n */\nexport class InsertResult {\n    /**\n     * The auto incrementing primary key of the inserted row.\n     *\n     * This property can be undefined when the query contains an `on conflict`\n     * clause that makes the query succeed even when nothing gets inserted.\n     *\n     * This property is always undefined on dialects like PostgreSQL that\n     * don't return the inserted id by default. On those dialects you need\n     * to use the {@link ReturningInterface.returning | returning} method.\n     */\n    insertId;\n    /**\n     * Affected rows count.\n     */\n    numInsertedOrUpdatedRows;\n    constructor(insertId, numInsertedOrUpdatedRows) {\n        this.insertId = insertId;\n        this.numInsertedOrUpdatedRows = numInsertedOrUpdatedRows;\n    }\n}\n", "/// <reference types=\"./no-result-error.d.ts\" />\nexport class NoResultError extends Error {\n    /**\n     * The operation node tree of the query that was executed.\n     */\n    node;\n    constructor(node) {\n        super('no result');\n        this.node = node;\n    }\n}\nexport function isNoResultErrorConstructor(fn) {\n    return Object.prototype.hasOwnProperty.call(fn, 'prototype');\n}\n", "/// <reference types=\"./on-conflict-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { WhereNode } from './where-node.js';\n/**\n * @internal\n */\nexport const OnConflictNode = freeze({\n    is(node) {\n        return node.kind === 'OnConflictNode';\n    },\n    create() {\n        return freeze({\n            kind: 'OnConflictNode',\n        });\n    },\n    cloneWith(node, props) {\n        return freeze({\n            ...node,\n            ...props,\n        });\n    },\n    cloneWithIndexWhere(node, operation) {\n        return freeze({\n            ...node,\n            indexWhere: node.indexWhere\n                ? WhereNode.cloneWithOperation(node.indexWhere, 'And', operation)\n                : WhereNode.create(operation),\n        });\n    },\n    cloneWithIndexOrWhere(node, operation) {\n        return freeze({\n            ...node,\n            indexWhere: node.indexWhere\n                ? WhereNode.cloneWithOperation(node.indexWhere, 'Or', operation)\n                : WhereNode.create(operation),\n        });\n    },\n    cloneWithUpdateWhere(node, operation) {\n        return freeze({\n            ...node,\n            updateWhere: node.updateWhere\n                ? WhereNode.cloneWithOperation(node.updateWhere, 'And', operation)\n                : WhereNode.create(operation),\n        });\n    },\n    cloneWithUpdateOrWhere(node, operation) {\n        return freeze({\n            ...node,\n            updateWhere: node.updateWhere\n                ? WhereNode.cloneWithOperation(node.updateWhere, 'Or', operation)\n                : WhereNode.create(operation),\n        });\n    },\n    cloneWithoutIndexWhere(node) {\n        return freeze({\n            ...node,\n            indexWhere: undefined,\n        });\n    },\n    cloneWithoutUpdateWhere(node) {\n        return freeze({\n            ...node,\n            updateWhere: undefined,\n        });\n    },\n});\n", "/// <reference types=\"./on-conflict-builder.d.ts\" />\nimport { ColumnNode } from '../operation-node/column-node.js';\nimport { IdentifierNode } from '../operation-node/identifier-node.js';\nimport { OnConflictNode } from '../operation-node/on-conflict-node.js';\nimport { parseValueBinaryOperationOrExpression, parseReferentialBinaryOperation, } from '../parser/binary-operation-parser.js';\nimport { parseUpdateObjectExpression, } from '../parser/update-set-parser.js';\nimport { freeze } from '../util/object-utils.js';\nexport class OnConflictBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    /**\n     * Specify a single column as the conflict target.\n     *\n     * Also see the {@link columns}, {@link constraint} and {@link expression}\n     * methods for alternative ways to specify the conflict target.\n     */\n    column(column) {\n        const columnNode = ColumnNode.create(column);\n        return new OnConflictBuilder({\n            ...this.#props,\n            onConflictNode: OnConflictNode.cloneWith(this.#props.onConflictNode, {\n                columns: this.#props.onConflictNode.columns\n                    ? freeze([...this.#props.onConflictNode.columns, columnNode])\n                    : freeze([columnNode]),\n            }),\n        });\n    }\n    /**\n     * Specify a list of columns as the conflict target.\n     *\n     * Also see the {@link column}, {@link constraint} and {@link expression}\n     * methods for alternative ways to specify the conflict target.\n     */\n    columns(columns) {\n        const columnNodes = columns.map(ColumnNode.create);\n        return new OnConflictBuilder({\n            ...this.#props,\n            onConflictNode: OnConflictNode.cloneWith(this.#props.onConflictNode, {\n                columns: this.#props.onConflictNode.columns\n                    ? freeze([...this.#props.onConflictNode.columns, ...columnNodes])\n                    : freeze(columnNodes),\n            }),\n        });\n    }\n    /**\n     * Specify a specific constraint by name as the conflict target.\n     *\n     * Also see the {@link column}, {@link columns} and {@link expression}\n     * methods for alternative ways to specify the conflict target.\n     */\n    constraint(constraintName) {\n        return new OnConflictBuilder({\n            ...this.#props,\n            onConflictNode: OnConflictNode.cloneWith(this.#props.onConflictNode, {\n                constraint: IdentifierNode.create(constraintName),\n            }),\n        });\n    }\n    /**\n     * Specify an expression as the conflict target.\n     *\n     * This can be used if the unique index is an expression index.\n     *\n     * Also see the {@link column}, {@link columns} and {@link constraint}\n     * methods for alternative ways to specify the conflict target.\n     */\n    expression(expression) {\n        return new OnConflictBuilder({\n            ...this.#props,\n            onConflictNode: OnConflictNode.cloneWith(this.#props.onConflictNode, {\n                indexExpression: expression.toOperationNode(),\n            }),\n        });\n    }\n    where(...args) {\n        return new OnConflictBuilder({\n            ...this.#props,\n            onConflictNode: OnConflictNode.cloneWithIndexWhere(this.#props.onConflictNode, parseValueBinaryOperationOrExpression(args)),\n        });\n    }\n    whereRef(lhs, op, rhs) {\n        return new OnConflictBuilder({\n            ...this.#props,\n            onConflictNode: OnConflictNode.cloneWithIndexWhere(this.#props.onConflictNode, parseReferentialBinaryOperation(lhs, op, rhs)),\n        });\n    }\n    clearWhere() {\n        return new OnConflictBuilder({\n            ...this.#props,\n            onConflictNode: OnConflictNode.cloneWithoutIndexWhere(this.#props.onConflictNode),\n        });\n    }\n    /**\n     * Adds the \"do nothing\" conflict action.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * const id = 1\n     * const first_name = 'John'\n     *\n     * await db\n     *   .insertInto('person')\n     *   .values({ first_name, id })\n     *   .onConflict((oc) => oc\n     *     .column('id')\n     *     .doNothing()\n     *   )\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * insert into \"person\" (\"first_name\", \"id\")\n     * values ($1, $2)\n     * on conflict (\"id\") do nothing\n     * ```\n     */\n    doNothing() {\n        return new OnConflictDoNothingBuilder({\n            ...this.#props,\n            onConflictNode: OnConflictNode.cloneWith(this.#props.onConflictNode, {\n                doNothing: true,\n            }),\n        });\n    }\n    /**\n     * Adds the \"do update set\" conflict action.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * const id = 1\n     * const first_name = 'John'\n     *\n     * await db\n     *   .insertInto('person')\n     *   .values({ first_name, id })\n     *   .onConflict((oc) => oc\n     *     .column('id')\n     *     .doUpdateSet({ first_name })\n     *   )\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * insert into \"person\" (\"first_name\", \"id\")\n     * values ($1, $2)\n     * on conflict (\"id\")\n     * do update set \"first_name\" = $3\n     * ```\n     *\n     * In the next example we use the `ref` method to reference\n     * columns of the virtual table `excluded` in a type-safe way\n     * to create an upsert operation:\n     *\n     * ```ts\n     * import type { NewPerson } from 'type-editor' // imaginary module\n     *\n     * async function upsertPerson(person: NewPerson): Promise<void> {\n     *   await db.insertInto('person')\n     *     .values(person)\n     *     .onConflict((oc) => oc\n     *       .column('id')\n     *       .doUpdateSet((eb) => ({\n     *         first_name: eb.ref('excluded.first_name'),\n     *         last_name: eb.ref('excluded.last_name')\n     *       })\n     *     )\n     *   )\n     *   .execute()\n     * }\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * insert into \"person\" (\"first_name\", \"last_name\")\n     * values ($1, $2)\n     * on conflict (\"id\")\n     * do update set\n     *  \"first_name\" = excluded.\"first_name\",\n     *  \"last_name\" = excluded.\"last_name\"\n     * ```\n     */\n    doUpdateSet(update) {\n        return new OnConflictUpdateBuilder({\n            ...this.#props,\n            onConflictNode: OnConflictNode.cloneWith(this.#props.onConflictNode, {\n                updates: parseUpdateObjectExpression(update),\n            }),\n        });\n    }\n    /**\n     * Simply calls the provided function passing `this` as the only argument. `$call` returns\n     * what the provided function returns.\n     */\n    $call(func) {\n        return func(this);\n    }\n}\nexport class OnConflictDoNothingBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    toOperationNode() {\n        return this.#props.onConflictNode;\n    }\n}\nexport class OnConflictUpdateBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    where(...args) {\n        return new OnConflictUpdateBuilder({\n            ...this.#props,\n            onConflictNode: OnConflictNode.cloneWithUpdateWhere(this.#props.onConflictNode, parseValueBinaryOperationOrExpression(args)),\n        });\n    }\n    /**\n     * Specify a where condition for the update operation.\n     *\n     * See {@link WhereInterface.whereRef} for more info.\n     */\n    whereRef(lhs, op, rhs) {\n        return new OnConflictUpdateBuilder({\n            ...this.#props,\n            onConflictNode: OnConflictNode.cloneWithUpdateWhere(this.#props.onConflictNode, parseReferentialBinaryOperation(lhs, op, rhs)),\n        });\n    }\n    clearWhere() {\n        return new OnConflictUpdateBuilder({\n            ...this.#props,\n            onConflictNode: OnConflictNode.cloneWithoutUpdateWhere(this.#props.onConflictNode),\n        });\n    }\n    /**\n     * Simply calls the provided function passing `this` as the only argument. `$call` returns\n     * what the provided function returns.\n     */\n    $call(func) {\n        return func(this);\n    }\n    toOperationNode() {\n        return this.#props.onConflictNode;\n    }\n}\n", "/// <reference types=\"./top-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const TopNode = freeze({\n    is(node) {\n        return node.kind === 'TopNode';\n    },\n    create(expression, modifiers) {\n        return freeze({\n            kind: 'TopNode',\n            expression,\n            modifiers,\n        });\n    },\n});\n", "/// <reference types=\"./top-parser.d.ts\" />\nimport { TopNode } from '../operation-node/top-node.js';\nimport { isBigInt, isNumber, isUndefined } from '../util/object-utils.js';\nexport function parseTop(expression, modifiers) {\n    if (!isNumber(expression) && !isBigInt(expression)) {\n        throw new Error(`Invalid top expression: ${expression}`);\n    }\n    if (!isUndefined(modifiers) && !isTopModifiers(modifiers)) {\n        throw new Error(`Invalid top modifiers: ${modifiers}`);\n    }\n    return TopNode.create(expression, modifiers);\n}\nfunction isTopModifiers(modifiers) {\n    return (modifiers === 'percent' ||\n        modifiers === 'with ties' ||\n        modifiers === 'percent with ties');\n}\n", "/// <reference types=\"./or-action-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const OrActionNode = freeze({\n    is(node) {\n        return node.kind === 'OrActionNode';\n    },\n    create(action) {\n        return freeze({\n            kind: 'OrActionNode',\n            action,\n        });\n    },\n});\n", "/// <reference types=\"./insert-query-builder.d.ts\" />\nimport { parseSelectArg, parseSelectAll, } from '../parser/select-parser.js';\nimport { parseInsertExpression, } from '../parser/insert-values-parser.js';\nimport { InsertQueryNode } from '../operation-node/insert-query-node.js';\nimport { QueryNode } from '../operation-node/query-node.js';\nimport { parseUpdateObjectExpression, } from '../parser/update-set-parser.js';\nimport { freeze } from '../util/object-utils.js';\nimport { OnDuplicateKeyNode } from '../operation-node/on-duplicate-key-node.js';\nimport { InsertResult } from './insert-result.js';\nimport { isNoResultErrorConstructor, NoResultError, } from './no-result-error.js';\nimport { parseExpression, } from '../parser/expression-parser.js';\nimport { ColumnNode } from '../operation-node/column-node.js';\nimport { OnConflictBuilder, } from './on-conflict-builder.js';\nimport { OnConflictNode } from '../operation-node/on-conflict-node.js';\nimport { parseTop } from '../parser/top-parser.js';\nimport { OrActionNode } from '../operation-node/or-action-node.js';\nexport class InsertQueryBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    /**\n     * Sets the values to insert for an {@link Kysely.insertInto | insert} query.\n     *\n     * This method takes an object whose keys are column names and values are\n     * values to insert. In addition to the column's type, the values can be\n     * raw {@link sql} snippets or select queries.\n     *\n     * You must provide all fields you haven't explicitly marked as nullable\n     * or optional using {@link Generated} or {@link ColumnType}.\n     *\n     * The return value of an `insert` query is an instance of {@link InsertResult}. The\n     * {@link InsertResult.insertId | insertId} field holds the auto incremented primary\n     * key if the database returned one.\n     *\n     * On PostgreSQL and some other dialects, you need to call `returning` to get\n     * something out of the query.\n     *\n     * Also see the {@link expression} method for inserting the result of a select\n     * query or any other expression.\n     *\n     * ### Examples\n     *\n     * <!-- siteExample(\"insert\", \"Single row\", 10) -->\n     *\n     * Insert a single row:\n     *\n     * ```ts\n     * const result = await db\n     *   .insertInto('person')\n     *   .values({\n     *     first_name: 'Jennifer',\n     *     last_name: 'Aniston',\n     *     age: 40\n     *   })\n     *   .executeTakeFirst()\n     *\n     * // `insertId` is only available on dialects that\n     * // automatically return the id of the inserted row\n     * // such as MySQL and SQLite. On PostgreSQL, for example,\n     * // you need to add a `returning` clause to the query to\n     * // get anything out. See the \"returning data\" example.\n     * console.log(result.insertId)\n     * ```\n     *\n     * The generated SQL (MySQL):\n     *\n     * ```sql\n     * insert into `person` (`first_name`, `last_name`, `age`) values (?, ?, ?)\n     * ```\n     *\n     * <!-- siteExample(\"insert\", \"Multiple rows\", 20) -->\n     *\n     * On dialects that support it (for example PostgreSQL) you can insert multiple\n     * rows by providing an array. Note that the return value is once again very\n     * dialect-specific. Some databases may only return the id of the *last* inserted\n     * row and some return nothing at all unless you call `returning`.\n     *\n     * ```ts\n     * await db\n     *   .insertInto('person')\n     *   .values([{\n     *     first_name: 'Jennifer',\n     *     last_name: 'Aniston',\n     *     age: 40,\n     *   }, {\n     *     first_name: 'Arnold',\n     *     last_name: 'Schwarzenegger',\n     *     age: 70,\n     *   }])\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * insert into \"person\" (\"first_name\", \"last_name\", \"age\") values (($1, $2, $3), ($4, $5, $6))\n     * ```\n     *\n     * <!-- siteExample(\"insert\", \"Returning data\", 30) -->\n     *\n     * On supported dialects like PostgreSQL you need to chain `returning` to the query to get\n     * the inserted row's columns (or any other expression) as the return value. `returning`\n     * works just like `select`. Refer to `select` method's examples and documentation for\n     * more info.\n     *\n     * ```ts\n     * const result = await db\n     *   .insertInto('person')\n     *   .values({\n     *     first_name: 'Jennifer',\n     *     last_name: 'Aniston',\n     *     age: 40,\n     *   })\n     *   .returning(['id', 'first_name as name'])\n     *   .executeTakeFirstOrThrow()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * insert into \"person\" (\"first_name\", \"last_name\", \"age\") values ($1, $2, $3) returning \"id\", \"first_name\" as \"name\"\n     * ```\n     *\n     * <!-- siteExample(\"insert\", \"Complex values\", 40) -->\n     *\n     * In addition to primitives, the values can also be arbitrary expressions.\n     * You can build the expressions by using a callback and calling the methods\n     * on the expression builder passed to it:\n     *\n     * ```ts\n     * import { sql } from 'kysely'\n     *\n     * const ani = \"Ani\"\n     * const ston = \"ston\"\n     *\n     * const result = await db\n     *   .insertInto('person')\n     *   .values(({ ref, selectFrom, fn }) => ({\n     *     first_name: 'Jennifer',\n     *     last_name: sql<string>`concat(${ani}, ${ston})`,\n     *     middle_name: ref('first_name'),\n     *     age: selectFrom('person')\n     *       .select(fn.avg<number>('age').as('avg_age')),\n     *   }))\n     *   .executeTakeFirst()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * insert into \"person\" (\n     *   \"first_name\",\n     *   \"last_name\",\n     *   \"middle_name\",\n     *   \"age\"\n     * )\n     * values (\n     *   $1,\n     *   concat($2, $3),\n     *   \"first_name\",\n     *   (select avg(\"age\") as \"avg_age\" from \"person\")\n     * )\n     * ```\n     *\n     * You can also use the callback version of subqueries or raw expressions:\n     *\n     * ```ts\n     * await db.with('jennifer', (db) => db\n     *   .selectFrom('person')\n     *   .where('first_name', '=', 'Jennifer')\n     *   .select(['id', 'first_name', 'gender'])\n     *   .limit(1)\n     * ).insertInto('pet').values((eb) => ({\n     *   owner_id: eb.selectFrom('jennifer').select('id'),\n     *   name: eb.selectFrom('jennifer').select('first_name'),\n     *   species: 'cat',\n     * }))\n     * .execute()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * with \"jennifer\" as (\n     *   select \"id\", \"first_name\", \"gender\"\n     *   from \"person\"\n     *   where \"first_name\" = $1\n     *   limit $2\n     * )\n     * insert into \"pet\" (\"owner_id\", \"name\", \"species\")\n     * values (\n     *  (select \"id\" from \"jennifer\"),\n     *  (select \"first_name\" from \"jennifer\"),\n     *  $3\n     * )\n     * ```\n     */\n    values(insert) {\n        const [columns, values] = parseInsertExpression(insert);\n        return new InsertQueryBuilder({\n            ...this.#props,\n            queryNode: InsertQueryNode.cloneWith(this.#props.queryNode, {\n                columns,\n                values,\n            }),\n        });\n    }\n    /**\n     * Sets the columns to insert.\n     *\n     * The {@link values} method sets both the columns and the values and this method\n     * is not needed. But if you are using the {@link expression} method, you can use\n     * this method to set the columns to insert.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * await db.insertInto('person')\n     *   .columns(['first_name'])\n     *   .expression((eb) => eb.selectFrom('pet').select('pet.name'))\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * insert into \"person\" (\"first_name\")\n     * select \"pet\".\"name\" from \"pet\"\n     * ```\n     */\n    columns(columns) {\n        return new InsertQueryBuilder({\n            ...this.#props,\n            queryNode: InsertQueryNode.cloneWith(this.#props.queryNode, {\n                columns: freeze(columns.map(ColumnNode.create)),\n            }),\n        });\n    }\n    /**\n     * Insert an arbitrary expression. For example the result of a select query.\n     *\n     * ### Examples\n     *\n     * <!-- siteExample(\"insert\", \"Insert subquery\", 50) -->\n     *\n     * You can create an `INSERT INTO SELECT FROM` query using the `expression` method.\n     * This API doesn't follow our WYSIWYG principles and might be a bit difficult to\n     * remember. The reasons for this design stem from implementation difficulties.\n     *\n     * ```ts\n     * const result = await db.insertInto('person')\n     *   .columns(['first_name', 'last_name', 'age'])\n     *   .expression((eb) => eb\n     *     .selectFrom('pet')\n     *     .select((eb) => [\n     *       'pet.name',\n     *       eb.val('Petson').as('last_name'),\n     *       eb.lit(7).as('age'),\n     *     ])\n     *   )\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * insert into \"person\" (\"first_name\", \"last_name\", \"age\")\n     * select \"pet\".\"name\", $1 as \"last_name\", 7 as \"age from \"pet\"\n     * ```\n     */\n    expression(expression) {\n        return new InsertQueryBuilder({\n            ...this.#props,\n            queryNode: InsertQueryNode.cloneWith(this.#props.queryNode, {\n                values: parseExpression(expression),\n            }),\n        });\n    }\n    /**\n     * Creates an `insert into \"person\" default values` query.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * await db.insertInto('person')\n     *   .defaultValues()\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * insert into \"person\" default values\n     * ```\n     */\n    defaultValues() {\n        return new InsertQueryBuilder({\n            ...this.#props,\n            queryNode: InsertQueryNode.cloneWith(this.#props.queryNode, {\n                defaultValues: true,\n            }),\n        });\n    }\n    /**\n     * This can be used to add any additional SQL to the end of the query.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * import { sql } from 'kysely'\n     *\n     * await db.insertInto('person')\n     *   .values({\n     *     first_name: 'John',\n     *     last_name: 'Doe',\n     *     gender: 'male',\n     *   })\n     *   .modifyEnd(sql`-- This is a comment`)\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (MySQL):\n     *\n     * ```sql\n     * insert into `person` (\"first_name\", \"last_name\", \"gender\")\n     * values (?, ?, ?) -- This is a comment\n     * ```\n     */\n    modifyEnd(modifier) {\n        return new InsertQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithEndModifier(this.#props.queryNode, modifier.toOperationNode()),\n        });\n    }\n    /**\n     * Changes an `insert into` query to an `insert ignore into` query.\n     *\n     * This is only supported by some dialects like MySQL.\n     *\n     * To avoid a footgun, when invoked with the SQLite dialect, this method will\n     * be handled like {@link orIgnore}. See also, {@link orAbort}, {@link orFail},\n     * {@link orReplace}, and {@link orRollback}.\n     *\n     * If you use the ignore modifier, ignorable errors that occur while executing the\n     * insert statement are ignored. For example, without ignore, a row that duplicates\n     * an existing unique index or primary key value in the table causes a duplicate-key\n     * error and the statement is aborted. With ignore, the row is discarded and no error\n     * occurs.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * await db.insertInto('person')\n     *   .ignore()\n     *   .values({\n     *     first_name: 'John',\n     *     last_name: 'Doe',\n     *     gender: 'female',\n     *   })\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (MySQL):\n     *\n     * ```sql\n     * insert ignore into `person` (`first_name`, `last_name`, `gender`) values (?, ?, ?)\n     * ```\n     *\n     * The generated SQL (SQLite):\n     *\n     * ```sql\n     * insert or ignore into \"person\" (\"first_name\", \"last_name\", \"gender\") values (?, ?, ?)\n     * ```\n     */\n    ignore() {\n        return new InsertQueryBuilder({\n            ...this.#props,\n            queryNode: InsertQueryNode.cloneWith(this.#props.queryNode, {\n                orAction: OrActionNode.create('ignore'),\n            }),\n        });\n    }\n    /**\n     * Changes an `insert into` query to an `insert or ignore into` query.\n     *\n     * This is only supported by some dialects like SQLite.\n     *\n     * To avoid a footgun, when invoked with the MySQL dialect, this method will\n     * be handled like {@link ignore}.\n     *\n     * See also, {@link orAbort}, {@link orFail}, {@link orReplace}, and {@link orRollback}.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * await db.insertInto('person')\n     *   .orIgnore()\n     *   .values({\n     *     first_name: 'John',\n     *     last_name: 'Doe',\n     *     gender: 'female',\n     *   })\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (SQLite):\n     *\n     * ```sql\n     * insert or ignore into \"person\" (\"first_name\", \"last_name\", \"gender\") values (?, ?, ?)\n     * ```\n     *\n     * The generated SQL (MySQL):\n     *\n     * ```sql\n     * insert ignore into `person` (`first_name`, `last_name`, `gender`) values (?, ?, ?)\n     * ```\n     */\n    orIgnore() {\n        return new InsertQueryBuilder({\n            ...this.#props,\n            queryNode: InsertQueryNode.cloneWith(this.#props.queryNode, {\n                orAction: OrActionNode.create('ignore'),\n            }),\n        });\n    }\n    /**\n     * Changes an `insert into` query to an `insert or abort into` query.\n     *\n     * This is only supported by some dialects like SQLite.\n     *\n     * See also, {@link orIgnore}, {@link orFail}, {@link orReplace}, and {@link orRollback}.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * await db.insertInto('person')\n     *   .orAbort()\n     *   .values({\n     *     first_name: 'John',\n     *     last_name: 'Doe',\n     *     gender: 'female',\n     *   })\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (SQLite):\n     *\n     * ```sql\n     * insert or abort into \"person\" (\"first_name\", \"last_name\", \"gender\") values (?, ?, ?)\n     * ```\n     */\n    orAbort() {\n        return new InsertQueryBuilder({\n            ...this.#props,\n            queryNode: InsertQueryNode.cloneWith(this.#props.queryNode, {\n                orAction: OrActionNode.create('abort'),\n            }),\n        });\n    }\n    /**\n     * Changes an `insert into` query to an `insert or fail into` query.\n     *\n     * This is only supported by some dialects like SQLite.\n     *\n     * See also, {@link orIgnore}, {@link orAbort}, {@link orReplace}, and {@link orRollback}.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * await db.insertInto('person')\n     *   .orFail()\n     *   .values({\n     *     first_name: 'John',\n     *     last_name: 'Doe',\n     *     gender: 'female',\n     *   })\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (SQLite):\n     *\n     * ```sql\n     * insert or fail into \"person\" (\"first_name\", \"last_name\", \"gender\") values (?, ?, ?)\n     * ```\n     */\n    orFail() {\n        return new InsertQueryBuilder({\n            ...this.#props,\n            queryNode: InsertQueryNode.cloneWith(this.#props.queryNode, {\n                orAction: OrActionNode.create('fail'),\n            }),\n        });\n    }\n    /**\n     * Changes an `insert into` query to an `insert or replace into` query.\n     *\n     * This is only supported by some dialects like SQLite.\n     *\n     * You can also use {@link Kysely.replaceInto} to achieve the same result.\n     *\n     * See also, {@link orIgnore}, {@link orAbort}, {@link orFail}, and {@link orRollback}.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * await db.insertInto('person')\n     *   .orReplace()\n     *   .values({\n     *     first_name: 'John',\n     *     last_name: 'Doe',\n     *     gender: 'female',\n     *   })\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (SQLite):\n     *\n     * ```sql\n     * insert or replace into \"person\" (\"first_name\", \"last_name\", \"gender\") values (?, ?, ?)\n     * ```\n     */\n    orReplace() {\n        return new InsertQueryBuilder({\n            ...this.#props,\n            queryNode: InsertQueryNode.cloneWith(this.#props.queryNode, {\n                orAction: OrActionNode.create('replace'),\n            }),\n        });\n    }\n    /**\n     * Changes an `insert into` query to an `insert or rollback into` query.\n     *\n     * This is only supported by some dialects like SQLite.\n     *\n     * See also, {@link orIgnore}, {@link orAbort}, {@link orFail}, and {@link orReplace}.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * await db.insertInto('person')\n     *   .orRollback()\n     *   .values({\n     *     first_name: 'John',\n     *     last_name: 'Doe',\n     *     gender: 'female',\n     *   })\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (SQLite):\n     *\n     * ```sql\n     * insert or rollback into \"person\" (\"first_name\", \"last_name\", \"gender\") values (?, ?, ?)\n     * ```\n     */\n    orRollback() {\n        return new InsertQueryBuilder({\n            ...this.#props,\n            queryNode: InsertQueryNode.cloneWith(this.#props.queryNode, {\n                orAction: OrActionNode.create('rollback'),\n            }),\n        });\n    }\n    /**\n     * Changes an `insert into` query to an `insert top into` query.\n     *\n     * `top` clause is only supported by some dialects like MS SQL Server.\n     *\n     * ### Examples\n     *\n     * Insert the first 5 rows:\n     *\n     * ```ts\n     * import { sql } from 'kysely'\n     *\n     * await db.insertInto('person')\n     *   .top(5)\n     *   .columns(['first_name', 'gender'])\n     *   .expression(\n     *     (eb) => eb.selectFrom('pet').select(['name', sql.lit('other').as('gender')])\n     *   )\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (MS SQL Server):\n     *\n     * ```sql\n     * insert top(5) into \"person\" (\"first_name\", \"gender\") select \"name\", 'other' as \"gender\" from \"pet\"\n     * ```\n     *\n     * Insert the first 50 percent of rows:\n     *\n     * ```ts\n     * import { sql } from 'kysely'\n     *\n     * await db.insertInto('person')\n     *   .top(50, 'percent')\n     *   .columns(['first_name', 'gender'])\n     *   .expression(\n     *     (eb) => eb.selectFrom('pet').select(['name', sql.lit('other').as('gender')])\n     *   )\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (MS SQL Server):\n     *\n     * ```sql\n     * insert top(50) percent into \"person\" (\"first_name\", \"gender\") select \"name\", 'other' as \"gender\" from \"pet\"\n     * ```\n     */\n    top(expression, modifiers) {\n        return new InsertQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithTop(this.#props.queryNode, parseTop(expression, modifiers)),\n        });\n    }\n    /**\n     * Adds an `on conflict` clause to the query.\n     *\n     * `on conflict` is only supported by some dialects like PostgreSQL and SQLite. On MySQL\n     * you can use {@link ignore} and {@link onDuplicateKeyUpdate} to achieve similar results.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * await db\n     *   .insertInto('pet')\n     *   .values({\n     *     name: 'Catto',\n     *     species: 'cat',\n     *     owner_id: 3,\n     *   })\n     *   .onConflict((oc) => oc\n     *     .column('name')\n     *     .doUpdateSet({ species: 'hamster' })\n     *   )\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * insert into \"pet\" (\"name\", \"species\", \"owner_id\")\n     * values ($1, $2, $3)\n     * on conflict (\"name\")\n     * do update set \"species\" = $4\n     * ```\n     *\n     * You can provide the name of the constraint instead of a column name:\n     *\n     * ```ts\n     * await db\n     *   .insertInto('pet')\n     *   .values({\n     *     name: 'Catto',\n     *     species: 'cat',\n     *     owner_id: 3,\n     *   })\n     *   .onConflict((oc) => oc\n     *     .constraint('pet_name_key')\n     *     .doUpdateSet({ species: 'hamster' })\n     *   )\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * insert into \"pet\" (\"name\", \"species\", \"owner_id\")\n     * values ($1, $2, $3)\n     * on conflict on constraint \"pet_name_key\"\n     * do update set \"species\" = $4\n     * ```\n     *\n     * You can also specify an expression as the conflict target in case\n     * the unique index is an expression index:\n     *\n     * ```ts\n     * import { sql } from 'kysely'\n     *\n     * await db\n     *   .insertInto('pet')\n     *   .values({\n     *     name: 'Catto',\n     *     species: 'cat',\n     *     owner_id: 3,\n     *   })\n     *   .onConflict((oc) => oc\n     *     .expression(sql<string>`lower(name)`)\n     *     .doUpdateSet({ species: 'hamster' })\n     *   )\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * insert into \"pet\" (\"name\", \"species\", \"owner_id\")\n     * values ($1, $2, $3)\n     * on conflict (lower(name))\n     * do update set \"species\" = $4\n     * ```\n     *\n     * You can add a filter for the update statement like this:\n     *\n     * ```ts\n     * await db\n     *   .insertInto('pet')\n     *   .values({\n     *     name: 'Catto',\n     *     species: 'cat',\n     *     owner_id: 3,\n     *   })\n     *   .onConflict((oc) => oc\n     *     .column('name')\n     *     .doUpdateSet({ species: 'hamster' })\n     *     .where('excluded.name', '!=', 'Catto')\n     *   )\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * insert into \"pet\" (\"name\", \"species\", \"owner_id\")\n     * values ($1, $2, $3)\n     * on conflict (\"name\")\n     * do update set \"species\" = $4\n     * where \"excluded\".\"name\" != $5\n     * ```\n     *\n     * You can create an `on conflict do nothing` clauses like this:\n     *\n     * ```ts\n     * await db\n     *   .insertInto('pet')\n     *   .values({\n     *     name: 'Catto',\n     *     species: 'cat',\n     *     owner_id: 3,\n     *   })\n     *   .onConflict((oc) => oc\n     *     .column('name')\n     *     .doNothing()\n     *   )\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * insert into \"pet\" (\"name\", \"species\", \"owner_id\")\n     * values ($1, $2, $3)\n     * on conflict (\"name\") do nothing\n     * ```\n     *\n     * You can refer to the columns of the virtual `excluded` table\n     * in a type-safe way using a callback and the `ref` method of\n     * `ExpressionBuilder`:\n     *\n     * ```ts\n     * await db.insertInto('person')\n     *   .values({\n     *     id: 1,\n     *     first_name: 'John',\n     *     last_name: 'Doe',\n     *     gender: 'male',\n     *   })\n     *   .onConflict(oc => oc\n     *     .column('id')\n     *     .doUpdateSet({\n     *       first_name: (eb) => eb.ref('excluded.first_name'),\n     *       last_name: (eb) => eb.ref('excluded.last_name')\n     *     })\n     *   )\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * insert into \"person\" (\"id\", \"first_name\", \"last_name\", \"gender\")\n     * values ($1, $2, $3, $4)\n     * on conflict (\"id\")\n     * do update set\n     *  \"first_name\" = \"excluded\".\"first_name\",\n     *  \"last_name\" = \"excluded\".\"last_name\"\n     * ```\n     */\n    onConflict(callback) {\n        return new InsertQueryBuilder({\n            ...this.#props,\n            queryNode: InsertQueryNode.cloneWith(this.#props.queryNode, {\n                onConflict: callback(new OnConflictBuilder({\n                    onConflictNode: OnConflictNode.create(),\n                })).toOperationNode(),\n            }),\n        });\n    }\n    /**\n     * Adds `on duplicate key update` to the query.\n     *\n     * If you specify `on duplicate key update`, and a row is inserted that would cause\n     * a duplicate value in a unique index or primary key, an update of the old row occurs.\n     *\n     * This is only implemented by some dialects like MySQL. On most dialects you should\n     * use {@link onConflict} instead.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * await db\n     *   .insertInto('person')\n     *   .values({\n     *     id: 1,\n     *     first_name: 'John',\n     *     last_name: 'Doe',\n     *     gender: 'male',\n     *   })\n     *   .onDuplicateKeyUpdate({ updated_at: new Date().toISOString() })\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (MySQL):\n     *\n     * ```sql\n     * insert into `person` (`id`, `first_name`, `last_name`, `gender`)\n     * values (?, ?, ?, ?)\n     * on duplicate key update `updated_at` = ?\n     * ```\n     */\n    onDuplicateKeyUpdate(update) {\n        return new InsertQueryBuilder({\n            ...this.#props,\n            queryNode: InsertQueryNode.cloneWith(this.#props.queryNode, {\n                onDuplicateKey: OnDuplicateKeyNode.create(parseUpdateObjectExpression(update)),\n            }),\n        });\n    }\n    returning(selection) {\n        return new InsertQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithReturning(this.#props.queryNode, parseSelectArg(selection)),\n        });\n    }\n    returningAll() {\n        return new InsertQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithReturning(this.#props.queryNode, parseSelectAll()),\n        });\n    }\n    output(args) {\n        return new InsertQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithOutput(this.#props.queryNode, parseSelectArg(args)),\n        });\n    }\n    outputAll(table) {\n        return new InsertQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithOutput(this.#props.queryNode, parseSelectAll(table)),\n        });\n    }\n    /**\n     * Clears all `returning` clauses from the query.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * await db.insertInto('person')\n     *   .values({ first_name: 'James', last_name: 'Smith', gender: 'male' })\n     *   .returning(['first_name'])\n     *   .clearReturning()\n     *   .execute()\n     * ```\n     *\n     * The generated SQL(PostgreSQL):\n     *\n     * ```sql\n     * insert into \"person\" (\"first_name\", \"last_name\", \"gender\") values ($1, $2, $3)\n     * ```\n     */\n    clearReturning() {\n        return new InsertQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithoutReturning(this.#props.queryNode),\n        });\n    }\n    /**\n     * Simply calls the provided function passing `this` as the only argument. `$call` returns\n     * what the provided function returns.\n     *\n     * If you want to conditionally call a method on `this`, see\n     * the {@link $if} method.\n     *\n     * ### Examples\n     *\n     * The next example uses a helper function `log` to log a query:\n     *\n     * ```ts\n     * import type { Compilable } from 'kysely'\n     *\n     * function log<T extends Compilable>(qb: T): T {\n     *   console.log(qb.compile())\n     *   return qb\n     * }\n     *\n     * await db.insertInto('person')\n     *   .values({ first_name: 'John', last_name: 'Doe', gender: 'male' })\n     *   .$call(log)\n     *   .execute()\n     * ```\n     */\n    $call(func) {\n        return func(this);\n    }\n    /**\n     * Call `func(this)` if `condition` is true.\n     *\n     * This method is especially handy with optional selects. Any `returning` or `returningAll`\n     * method calls add columns as optional fields to the output type when called inside\n     * the `func` callback. This is because we can't know if those selections were actually\n     * made before running the code.\n     *\n     * You can also call any other methods inside the callback.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * import type { NewPerson } from 'type-editor' // imaginary module\n     *\n     * async function insertPerson(values: NewPerson, returnLastName: boolean) {\n     *   return await db\n     *     .insertInto('person')\n     *     .values(values)\n     *     .returning(['id', 'first_name'])\n     *     .$if(returnLastName, (qb) => qb.returning('last_name'))\n     *     .executeTakeFirstOrThrow()\n     * }\n     * ```\n     *\n     * Any selections added inside the `if` callback will be added as optional fields to the\n     * output type since we can't know if the selections were actually made before running\n     * the code. In the example above the return type of the `insertPerson` function is:\n     *\n     * ```ts\n     * Promise<{\n     *   id: number\n     *   first_name: string\n     *   last_name?: string\n     * }>\n     * ```\n     */\n    $if(condition, func) {\n        if (condition) {\n            return func(this);\n        }\n        return new InsertQueryBuilder({\n            ...this.#props,\n        });\n    }\n    /**\n     * Change the output type of the query.\n     *\n     * This method call doesn't change the SQL in any way. This methods simply\n     * returns a copy of this `InsertQueryBuilder` with a new output type.\n     */\n    $castTo() {\n        return new InsertQueryBuilder(this.#props);\n    }\n    /**\n     * Narrows (parts of) the output type of the query.\n     *\n     * Kysely tries to be as type-safe as possible, but in some cases we have to make\n     * compromises for better maintainability and compilation performance. At present,\n     * Kysely doesn't narrow the output type of the query based on {@link values} input\n     * when using {@link returning} or {@link returningAll}.\n     *\n     * This utility method is very useful for these situations, as it removes unncessary\n     * runtime assertion/guard code. Its input type is limited to the output type\n     * of the query, so you can't add a column that doesn't exist, or change a column's\n     * type to something that doesn't exist in its union type.\n     *\n     * ### Examples\n     *\n     * Turn this code:\n     *\n     * ```ts\n     * import type { Person } from 'type-editor' // imaginary module\n     *\n     * const person = await db.insertInto('person')\n     *   .values({\n     *     first_name: 'John',\n     *     last_name: 'Doe',\n     *     gender: 'male',\n     *     nullable_column: 'hell yeah!'\n     *   })\n     *   .returningAll()\n     *   .executeTakeFirstOrThrow()\n     *\n     * if (isWithNoNullValue(person)) {\n     *   functionThatExpectsPersonWithNonNullValue(person)\n     * }\n     *\n     * function isWithNoNullValue(person: Person): person is Person & { nullable_column: string } {\n     *   return person.nullable_column != null\n     * }\n     * ```\n     *\n     * Into this:\n     *\n     * ```ts\n     * import type { NotNull } from 'kysely'\n     *\n     * const person = await db.insertInto('person')\n     *   .values({\n     *     first_name: 'John',\n     *     last_name: 'Doe',\n     *     gender: 'male',\n     *     nullable_column: 'hell yeah!'\n     *   })\n     *   .returningAll()\n     *   .$narrowType<{ nullable_column: NotNull }>()\n     *   .executeTakeFirstOrThrow()\n     *\n     * functionThatExpectsPersonWithNonNullValue(person)\n     * ```\n     */\n    $narrowType() {\n        return new InsertQueryBuilder(this.#props);\n    }\n    /**\n     * Asserts that query's output row type equals the given type `T`.\n     *\n     * This method can be used to simplify excessively complex types to make TypeScript happy\n     * and much faster.\n     *\n     * Kysely uses complex type magic to achieve its type safety. This complexity is sometimes too much\n     * for TypeScript and you get errors like this:\n     *\n     * ```\n     * error TS2589: Type instantiation is excessively deep and possibly infinite.\n     * ```\n     *\n     * In these case you can often use this method to help TypeScript a little bit. When you use this\n     * method to assert the output type of a query, Kysely can drop the complex output type that\n     * consists of multiple nested helper types and replace it with the simple asserted type.\n     *\n     * Using this method doesn't reduce type safety at all. You have to pass in a type that is\n     * structurally equal to the current type.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * import type { NewPerson, NewPet, Species } from 'type-editor' // imaginary module\n     *\n     * async function insertPersonAndPet(person: NewPerson, pet: Omit<NewPet, 'owner_id'>) {\n     *   return await db\n     *     .with('new_person', (qb) => qb\n     *       .insertInto('person')\n     *       .values(person)\n     *       .returning('id')\n     *       .$assertType<{ id: number }>()\n     *     )\n     *     .with('new_pet', (qb) => qb\n     *       .insertInto('pet')\n     *       .values((eb) => ({\n     *         owner_id: eb.selectFrom('new_person').select('id'),\n     *         ...pet\n     *       }))\n     *       .returning(['name as pet_name', 'species'])\n     *       .$assertType<{ pet_name: string, species: Species }>()\n     *     )\n     *     .selectFrom(['new_person', 'new_pet'])\n     *     .selectAll()\n     *     .executeTakeFirstOrThrow()\n     * }\n     * ```\n     */\n    $assertType() {\n        return new InsertQueryBuilder(this.#props);\n    }\n    /**\n     * Returns a copy of this InsertQueryBuilder instance with the given plugin installed.\n     */\n    withPlugin(plugin) {\n        return new InsertQueryBuilder({\n            ...this.#props,\n            executor: this.#props.executor.withPlugin(plugin),\n        });\n    }\n    toOperationNode() {\n        return this.#props.executor.transformQuery(this.#props.queryNode, this.#props.queryId);\n    }\n    compile() {\n        return this.#props.executor.compileQuery(this.toOperationNode(), this.#props.queryId);\n    }\n    /**\n     * Executes the query and returns an array of rows.\n     *\n     * Also see the {@link executeTakeFirst} and {@link executeTakeFirstOrThrow} methods.\n     */\n    async execute() {\n        const compiledQuery = this.compile();\n        const result = await this.#props.executor.executeQuery(compiledQuery, this.#props.queryId);\n        const { adapter } = this.#props.executor;\n        const query = compiledQuery.query;\n        if ((query.returning && adapter.supportsReturning) ||\n            (query.output && adapter.supportsOutput)) {\n            return result.rows;\n        }\n        return [\n            new InsertResult(result.insertId, result.numAffectedRows ?? BigInt(0)),\n        ];\n    }\n    /**\n     * Executes the query and returns the first result or undefined if\n     * the query returned no result.\n     */\n    async executeTakeFirst() {\n        const [result] = await this.execute();\n        return result;\n    }\n    /**\n     * Executes the query and returns the first result or throws if\n     * the query returned no result.\n     *\n     * By default an instance of {@link NoResultError} is thrown, but you can\n     * provide a custom error class, or callback as the only argument to throw a different\n     * error.\n     */\n    async executeTakeFirstOrThrow(errorConstructor = NoResultError) {\n        const result = await this.executeTakeFirst();\n        if (result === undefined) {\n            const error = isNoResultErrorConstructor(errorConstructor)\n                ? new errorConstructor(this.toOperationNode())\n                : errorConstructor(this.toOperationNode());\n            throw error;\n        }\n        return result;\n    }\n    async *stream(chunkSize = 100) {\n        const compiledQuery = this.compile();\n        const stream = this.#props.executor.stream(compiledQuery, chunkSize, this.#props.queryId);\n        for await (const item of stream) {\n            yield* item.rows;\n        }\n    }\n    async explain(format, options) {\n        const builder = new InsertQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithExplain(this.#props.queryNode, format, options),\n        });\n        return await builder.execute();\n    }\n}\n", "/// <reference types=\"./delete-result.d.ts\" />\nexport class DeleteResult {\n    numDeletedRows;\n    constructor(numDeletedRows) {\n        this.numDeletedRows = numDeletedRows;\n    }\n}\n", "/// <reference types=\"./limit-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const LimitNode = freeze({\n    is(node) {\n        return node.kind === 'LimitNode';\n    },\n    create(limit) {\n        return freeze({\n            kind: 'LimitNode',\n            limit,\n        });\n    },\n});\n", "/// <reference types=\"./delete-query-builder.d.ts\" />\nimport { parseJoin, } from '../parser/join-parser.js';\nimport { parseTableExpressionOrList, } from '../parser/table-parser.js';\nimport { parseSelectArg, parseSelectAll, } from '../parser/select-parser.js';\nimport { QueryNode } from '../operation-node/query-node.js';\nimport { freeze } from '../util/object-utils.js';\nimport { isNoResultErrorConstructor, NoResultError, } from './no-result-error.js';\nimport { DeleteResult } from './delete-result.js';\nimport { DeleteQueryNode } from '../operation-node/delete-query-node.js';\nimport { LimitNode } from '../operation-node/limit-node.js';\nimport { parseOrderBy, } from '../parser/order-by-parser.js';\nimport { parseValueBinaryOperationOrExpression, parseReferentialBinaryOperation, } from '../parser/binary-operation-parser.js';\nimport { parseValueExpression, } from '../parser/value-parser.js';\nimport { parseTop } from '../parser/top-parser.js';\nexport class DeleteQueryBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    where(...args) {\n        return new DeleteQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithWhere(this.#props.queryNode, parseValueBinaryOperationOrExpression(args)),\n        });\n    }\n    whereRef(lhs, op, rhs) {\n        return new DeleteQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithWhere(this.#props.queryNode, parseReferentialBinaryOperation(lhs, op, rhs)),\n        });\n    }\n    clearWhere() {\n        return new DeleteQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithoutWhere(this.#props.queryNode),\n        });\n    }\n    /**\n     * Changes a `delete from` query into a `delete top from` query.\n     *\n     * `top` clause is only supported by some dialects like MS SQL Server.\n     *\n     * ### Examples\n     *\n     * Delete the first 5 rows:\n     *\n     * ```ts\n     * await db\n     *   .deleteFrom('person')\n     *   .top(5)\n     *   .where('age', '>', 18)\n     *   .executeTakeFirstOrThrow()\n     * ```\n     *\n     * The generated SQL (MS SQL Server):\n     *\n     * ```sql\n     * delete top(5) from \"person\" where \"age\" > @1\n     * ```\n     *\n     * Delete the first 50% of rows:\n     *\n     * ```ts\n     * await db\n     *   .deleteFrom('person')\n     *   .top(50, 'percent')\n     *   .where('age', '>', 18)\n     *   .executeTakeFirstOrThrow()\n     * ```\n     *\n     * The generated SQL (MS SQL Server):\n     *\n     * ```sql\n     * delete top(50) percent from \"person\" where \"age\" > @1\n     * ```\n     */\n    top(expression, modifiers) {\n        return new DeleteQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithTop(this.#props.queryNode, parseTop(expression, modifiers)),\n        });\n    }\n    using(tables) {\n        return new DeleteQueryBuilder({\n            ...this.#props,\n            queryNode: DeleteQueryNode.cloneWithUsing(this.#props.queryNode, parseTableExpressionOrList(tables)),\n        });\n    }\n    innerJoin(...args) {\n        return this.#join('InnerJoin', args);\n    }\n    leftJoin(...args) {\n        return this.#join('LeftJoin', args);\n    }\n    rightJoin(...args) {\n        return this.#join('RightJoin', args);\n    }\n    fullJoin(...args) {\n        return this.#join('FullJoin', args);\n    }\n    #join(joinType, args) {\n        return new DeleteQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithJoin(this.#props.queryNode, parseJoin(joinType, args)),\n        });\n    }\n    returning(selection) {\n        return new DeleteQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithReturning(this.#props.queryNode, parseSelectArg(selection)),\n        });\n    }\n    returningAll(table) {\n        return new DeleteQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithReturning(this.#props.queryNode, parseSelectAll(table)),\n        });\n    }\n    output(args) {\n        return new DeleteQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithOutput(this.#props.queryNode, parseSelectArg(args)),\n        });\n    }\n    outputAll(table) {\n        return new DeleteQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithOutput(this.#props.queryNode, parseSelectAll(table)),\n        });\n    }\n    /**\n     * Clears all `returning` clauses from the query.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * await db.deleteFrom('pet')\n     *   .returningAll()\n     *   .where('name', '=', 'Max')\n     *   .clearReturning()\n     *   .execute()\n     * ```\n     *\n     * The generated SQL(PostgreSQL):\n     *\n     * ```sql\n     * delete from \"pet\" where \"name\" = \"Max\"\n     * ```\n     */\n    clearReturning() {\n        return new DeleteQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithoutReturning(this.#props.queryNode),\n        });\n    }\n    /**\n     * Clears the `limit` clause from the query.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * await db.deleteFrom('pet')\n     *   .returningAll()\n     *   .where('name', '=', 'Max')\n     *   .limit(5)\n     *   .clearLimit()\n     *   .execute()\n     * ```\n     *\n     * The generated SQL(PostgreSQL):\n     *\n     * ```sql\n     * delete from \"pet\" where \"name\" = \"Max\" returning *\n     * ```\n     */\n    clearLimit() {\n        return new DeleteQueryBuilder({\n            ...this.#props,\n            queryNode: DeleteQueryNode.cloneWithoutLimit(this.#props.queryNode),\n        });\n    }\n    orderBy(...args) {\n        return new DeleteQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithOrderByItems(this.#props.queryNode, parseOrderBy(args)),\n        });\n    }\n    clearOrderBy() {\n        return new DeleteQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithoutOrderBy(this.#props.queryNode),\n        });\n    }\n    /**\n     * Adds a limit clause to the query.\n     *\n     * A limit clause in a delete query is only supported by some dialects\n     * like MySQL.\n     *\n     * ### Examples\n     *\n     * Delete 5 oldest items in a table:\n     *\n     * ```ts\n     * await db\n     *   .deleteFrom('pet')\n     *   .orderBy('created_at')\n     *   .limit(5)\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (MySQL):\n     *\n     * ```sql\n     * delete from `pet` order by `created_at` limit ?\n     * ```\n     */\n    limit(limit) {\n        return new DeleteQueryBuilder({\n            ...this.#props,\n            queryNode: DeleteQueryNode.cloneWithLimit(this.#props.queryNode, LimitNode.create(parseValueExpression(limit))),\n        });\n    }\n    /**\n     * This can be used to add any additional SQL to the end of the query.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * import { sql } from 'kysely'\n     *\n     * await db.deleteFrom('person')\n     *   .where('first_name', '=', 'John')\n     *   .modifyEnd(sql`-- This is a comment`)\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (MySQL):\n     *\n     * ```sql\n     * delete from `person`\n     * where `first_name` = \"John\" -- This is a comment\n     * ```\n     */\n    modifyEnd(modifier) {\n        return new DeleteQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithEndModifier(this.#props.queryNode, modifier.toOperationNode()),\n        });\n    }\n    /**\n     * Simply calls the provided function passing `this` as the only argument. `$call` returns\n     * what the provided function returns.\n     *\n     * If you want to conditionally call a method on `this`, see\n     * the {@link $if} method.\n     *\n     * ### Examples\n     *\n     * The next example uses a helper function `log` to log a query:\n     *\n     * ```ts\n     * import type { Compilable } from 'kysely'\n     *\n     * function log<T extends Compilable>(qb: T): T {\n     *   console.log(qb.compile())\n     *   return qb\n     * }\n     *\n     * await db.deleteFrom('person')\n     *   .$call(log)\n     *   .execute()\n     * ```\n     */\n    $call(func) {\n        return func(this);\n    }\n    /**\n     * Call `func(this)` if `condition` is true.\n     *\n     * This method is especially handy with optional selects. Any `returning` or `returningAll`\n     * method calls add columns as optional fields to the output type when called inside\n     * the `func` callback. This is because we can't know if those selections were actually\n     * made before running the code.\n     *\n     * You can also call any other methods inside the callback.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * async function deletePerson(id: number, returnLastName: boolean) {\n     *   return await db\n     *     .deleteFrom('person')\n     *     .where('id', '=', id)\n     *     .returning(['id', 'first_name'])\n     *     .$if(returnLastName, (qb) => qb.returning('last_name'))\n     *     .executeTakeFirstOrThrow()\n     * }\n     * ```\n     *\n     * Any selections added inside the `if` callback will be added as optional fields to the\n     * output type since we can't know if the selections were actually made before running\n     * the code. In the example above the return type of the `deletePerson` function is:\n     *\n     * ```ts\n     * Promise<{\n     *   id: number\n     *   first_name: string\n     *   last_name?: string\n     * }>\n     * ```\n     */\n    $if(condition, func) {\n        if (condition) {\n            return func(this);\n        }\n        return new DeleteQueryBuilder({\n            ...this.#props,\n        });\n    }\n    /**\n     * Change the output type of the query.\n     *\n     * This method call doesn't change the SQL in any way. This methods simply\n     * returns a copy of this `DeleteQueryBuilder` with a new output type.\n     */\n    $castTo() {\n        return new DeleteQueryBuilder(this.#props);\n    }\n    /**\n     * Narrows (parts of) the output type of the query.\n     *\n     * Kysely tries to be as type-safe as possible, but in some cases we have to make\n     * compromises for better maintainability and compilation performance. At present,\n     * Kysely doesn't narrow the output type of the query when using {@link where} and {@link returning} or {@link returningAll}.\n     *\n     * This utility method is very useful for these situations, as it removes unncessary\n     * runtime assertion/guard code. Its input type is limited to the output type\n     * of the query, so you can't add a column that doesn't exist, or change a column's\n     * type to something that doesn't exist in its union type.\n     *\n     * ### Examples\n     *\n     * Turn this code:\n     *\n     * ```ts\n     * import type { Person } from 'type-editor' // imaginary module\n     *\n     * const person = await db.deleteFrom('person')\n     *   .where('id', '=', 3)\n     *   .where('nullable_column', 'is not', null)\n     *   .returningAll()\n     *   .executeTakeFirstOrThrow()\n     *\n     * if (isWithNoNullValue(person)) {\n     *   functionThatExpectsPersonWithNonNullValue(person)\n     * }\n     *\n     * function isWithNoNullValue(person: Person): person is Person & { nullable_column: string } {\n     *   return person.nullable_column != null\n     * }\n     * ```\n     *\n     * Into this:\n     *\n     * ```ts\n     * import type { NotNull } from 'kysely'\n     *\n     * const person = await db.deleteFrom('person')\n     *   .where('id', '=', 3)\n     *   .where('nullable_column', 'is not', null)\n     *   .returningAll()\n     *   .$narrowType<{ nullable_column: NotNull }>()\n     *   .executeTakeFirstOrThrow()\n     *\n     * functionThatExpectsPersonWithNonNullValue(person)\n     * ```\n     */\n    $narrowType() {\n        return new DeleteQueryBuilder(this.#props);\n    }\n    /**\n     * Asserts that query's output row type equals the given type `T`.\n     *\n     * This method can be used to simplify excessively complex types to make TypeScript happy\n     * and much faster.\n     *\n     * Kysely uses complex type magic to achieve its type safety. This complexity is sometimes too much\n     * for TypeScript and you get errors like this:\n     *\n     * ```\n     * error TS2589: Type instantiation is excessively deep and possibly infinite.\n     * ```\n     *\n     * In these case you can often use this method to help TypeScript a little bit. When you use this\n     * method to assert the output type of a query, Kysely can drop the complex output type that\n     * consists of multiple nested helper types and replace it with the simple asserted type.\n     *\n     * Using this method doesn't reduce type safety at all. You have to pass in a type that is\n     * structurally equal to the current type.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * import type { Species } from 'type-editor' // imaginary module\n     *\n     * async function deletePersonAndPets(personId: number) {\n     *   return await db\n     *     .with('deleted_person', (qb) => qb\n     *        .deleteFrom('person')\n     *        .where('id', '=', personId)\n     *        .returning('first_name')\n     *        .$assertType<{ first_name: string }>()\n     *     )\n     *     .with('deleted_pets', (qb) => qb\n     *       .deleteFrom('pet')\n     *       .where('owner_id', '=', personId)\n     *       .returning(['name as pet_name', 'species'])\n     *       .$assertType<{ pet_name: string, species: Species }>()\n     *     )\n     *     .selectFrom(['deleted_person', 'deleted_pets'])\n     *     .selectAll()\n     *     .execute()\n     * }\n     * ```\n     */\n    $assertType() {\n        return new DeleteQueryBuilder(this.#props);\n    }\n    /**\n     * Returns a copy of this DeleteQueryBuilder instance with the given plugin installed.\n     */\n    withPlugin(plugin) {\n        return new DeleteQueryBuilder({\n            ...this.#props,\n            executor: this.#props.executor.withPlugin(plugin),\n        });\n    }\n    toOperationNode() {\n        return this.#props.executor.transformQuery(this.#props.queryNode, this.#props.queryId);\n    }\n    compile() {\n        return this.#props.executor.compileQuery(this.toOperationNode(), this.#props.queryId);\n    }\n    /**\n     * Executes the query and returns an array of rows.\n     *\n     * Also see the {@link executeTakeFirst} and {@link executeTakeFirstOrThrow} methods.\n     */\n    async execute() {\n        const compiledQuery = this.compile();\n        const result = await this.#props.executor.executeQuery(compiledQuery, this.#props.queryId);\n        const { adapter } = this.#props.executor;\n        const query = compiledQuery.query;\n        if ((query.returning && adapter.supportsReturning) ||\n            (query.output && adapter.supportsOutput)) {\n            return result.rows;\n        }\n        return [new DeleteResult(result.numAffectedRows ?? BigInt(0))];\n    }\n    /**\n     * Executes the query and returns the first result or undefined if\n     * the query returned no result.\n     */\n    async executeTakeFirst() {\n        const [result] = await this.execute();\n        return result;\n    }\n    /**\n     * Executes the query and returns the first result or throws if\n     * the query returned no result.\n     *\n     * By default an instance of {@link NoResultError} is thrown, but you can\n     * provide a custom error class, or callback as the only argument to throw a different\n     * error.\n     */\n    async executeTakeFirstOrThrow(errorConstructor = NoResultError) {\n        const result = await this.executeTakeFirst();\n        if (result === undefined) {\n            const error = isNoResultErrorConstructor(errorConstructor)\n                ? new errorConstructor(this.toOperationNode())\n                : errorConstructor(this.toOperationNode());\n            throw error;\n        }\n        return result;\n    }\n    async *stream(chunkSize = 100) {\n        const compiledQuery = this.compile();\n        const stream = this.#props.executor.stream(compiledQuery, chunkSize, this.#props.queryId);\n        for await (const item of stream) {\n            yield* item.rows;\n        }\n    }\n    async explain(format, options) {\n        const builder = new DeleteQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithExplain(this.#props.queryNode, format, options),\n        });\n        return await builder.execute();\n    }\n}\n", "/// <reference types=\"./update-result.d.ts\" />\nexport class UpdateResult {\n    /**\n     * The number of rows the update query updated (even if not changed).\n     */\n    numUpdatedRows;\n    /**\n     * The number of rows the update query changed.\n     *\n     * This is **optional** and only supported in dialects such as MySQL.\n     * You would probably use {@link numUpdatedRows} in most cases.\n     */\n    numChangedRows;\n    constructor(numUpdatedRows, numChangedRows) {\n        this.numUpdatedRows = numUpdatedRows;\n        this.numChangedRows = numChangedRows;\n    }\n}\n", "/// <reference types=\"./update-query-builder.d.ts\" />\nimport { parseJoin, } from '../parser/join-parser.js';\nimport { parseTableExpressionOrList, } from '../parser/table-parser.js';\nimport { parseSelectArg, parseSelectAll, } from '../parser/select-parser.js';\nimport { QueryNode } from '../operation-node/query-node.js';\nimport { UpdateQueryNode } from '../operation-node/update-query-node.js';\nimport { parseUpdate, } from '../parser/update-set-parser.js';\nimport { freeze } from '../util/object-utils.js';\nimport { UpdateResult } from './update-result.js';\nimport { isNoResultErrorConstructor, NoResultError, } from './no-result-error.js';\nimport { parseReferentialBinaryOperation, parseValueBinaryOperationOrExpression, } from '../parser/binary-operation-parser.js';\nimport { parseValueExpression, } from '../parser/value-parser.js';\nimport { LimitNode } from '../operation-node/limit-node.js';\nimport { parseTop } from '../parser/top-parser.js';\nimport { parseOrderBy, } from '../parser/order-by-parser.js';\nexport class UpdateQueryBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    where(...args) {\n        return new UpdateQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithWhere(this.#props.queryNode, parseValueBinaryOperationOrExpression(args)),\n        });\n    }\n    whereRef(lhs, op, rhs) {\n        return new UpdateQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithWhere(this.#props.queryNode, parseReferentialBinaryOperation(lhs, op, rhs)),\n        });\n    }\n    clearWhere() {\n        return new UpdateQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithoutWhere(this.#props.queryNode),\n        });\n    }\n    /**\n     * Changes an `update` query into a `update top` query.\n     *\n     * `top` clause is only supported by some dialects like MS SQL Server.\n     *\n     * ### Examples\n     *\n     * Update the first row:\n     *\n     * ```ts\n     * await db.updateTable('person')\n     *   .top(1)\n     *   .set({ first_name: 'Foo' })\n     *   .where('age', '>', 18)\n     *   .executeTakeFirstOrThrow()\n     * ```\n     *\n     * The generated SQL (MS SQL Server):\n     *\n     * ```sql\n     * update top(1) \"person\" set \"first_name\" = @1 where \"age\" > @2\n     * ```\n     *\n     * Update the 50% first rows:\n     *\n     * ```ts\n     * await db.updateTable('person')\n     *   .top(50, 'percent')\n     *   .set({ first_name: 'Foo' })\n     *   .where('age', '>', 18)\n     *   .executeTakeFirstOrThrow()\n     * ```\n     *\n     * The generated SQL (MS SQL Server):\n     *\n     * ```sql\n     * update top(50) percent \"person\" set \"first_name\" = @1 where \"age\" > @2\n     * ```\n     */\n    top(expression, modifiers) {\n        return new UpdateQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithTop(this.#props.queryNode, parseTop(expression, modifiers)),\n        });\n    }\n    from(from) {\n        return new UpdateQueryBuilder({\n            ...this.#props,\n            queryNode: UpdateQueryNode.cloneWithFromItems(this.#props.queryNode, parseTableExpressionOrList(from)),\n        });\n    }\n    innerJoin(...args) {\n        return this.#join('InnerJoin', args);\n    }\n    leftJoin(...args) {\n        return this.#join('LeftJoin', args);\n    }\n    rightJoin(...args) {\n        return this.#join('RightJoin', args);\n    }\n    fullJoin(...args) {\n        return this.#join('FullJoin', args);\n    }\n    #join(joinType, args) {\n        return new UpdateQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithJoin(this.#props.queryNode, parseJoin(joinType, args)),\n        });\n    }\n    orderBy(...args) {\n        return new UpdateQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithOrderByItems(this.#props.queryNode, parseOrderBy(args)),\n        });\n    }\n    clearOrderBy() {\n        return new UpdateQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithoutOrderBy(this.#props.queryNode),\n        });\n    }\n    /**\n     * Adds a limit clause to the update query for supported databases, such as MySQL.\n     *\n     * ### Examples\n     *\n     * Update the first 2 rows in the 'person' table:\n     *\n     * ```ts\n     * await db\n     *   .updateTable('person')\n     *   .set({ first_name: 'Foo' })\n     *   .limit(2)\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (MySQL):\n     *\n     * ```sql\n     * update `person` set `first_name` = ? limit ?\n     * ```\n     */\n    limit(limit) {\n        return new UpdateQueryBuilder({\n            ...this.#props,\n            queryNode: UpdateQueryNode.cloneWithLimit(this.#props.queryNode, LimitNode.create(parseValueExpression(limit))),\n        });\n    }\n    set(...args) {\n        return new UpdateQueryBuilder({\n            ...this.#props,\n            queryNode: UpdateQueryNode.cloneWithUpdates(this.#props.queryNode, parseUpdate(...args)),\n        });\n    }\n    returning(selection) {\n        return new UpdateQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithReturning(this.#props.queryNode, parseSelectArg(selection)),\n        });\n    }\n    returningAll(table) {\n        return new UpdateQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithReturning(this.#props.queryNode, parseSelectAll(table)),\n        });\n    }\n    output(args) {\n        return new UpdateQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithOutput(this.#props.queryNode, parseSelectArg(args)),\n        });\n    }\n    outputAll(table) {\n        return new UpdateQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithOutput(this.#props.queryNode, parseSelectAll(table)),\n        });\n    }\n    /**\n     * This can be used to add any additional SQL to the end of the query.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * import { sql } from 'kysely'\n     *\n     * await db.updateTable('person')\n     *   .set({ age: 39 })\n     *   .where('first_name', '=', 'John')\n     *   .modifyEnd(sql.raw('-- This is a comment'))\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (MySQL):\n     *\n     * ```sql\n     * update `person`\n     * set `age` = 39\n     * where `first_name` = \"John\" -- This is a comment\n     * ```\n     */\n    modifyEnd(modifier) {\n        return new UpdateQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithEndModifier(this.#props.queryNode, modifier.toOperationNode()),\n        });\n    }\n    /**\n     * Clears all `returning` clauses from the query.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * db.updateTable('person')\n     *   .returningAll()\n     *   .set({ age: 39 })\n     *   .where('first_name', '=', 'John')\n     *   .clearReturning()\n     * ```\n     *\n     * The generated SQL(PostgreSQL):\n     *\n     * ```sql\n     * update \"person\" set \"age\" = 39 where \"first_name\" = \"John\"\n     * ```\n     */\n    clearReturning() {\n        return new UpdateQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithoutReturning(this.#props.queryNode),\n        });\n    }\n    /**\n     * Simply calls the provided function passing `this` as the only argument. `$call` returns\n     * what the provided function returns.\n     *\n     * If you want to conditionally call a method on `this`, see\n     * the {@link $if} method.\n     *\n     * ### Examples\n     *\n     * The next example uses a helper function `log` to log a query:\n     *\n     * ```ts\n     * import type { Compilable } from 'kysely'\n     * import type { PersonUpdate } from 'type-editor' // imaginary module\n     *\n     * function log<T extends Compilable>(qb: T): T {\n     *   console.log(qb.compile())\n     *   return qb\n     * }\n     *\n     * const values = {\n     *   first_name: 'John',\n     * } satisfies PersonUpdate\n     *\n     * db.updateTable('person')\n     *   .set(values)\n     *   .$call(log)\n     *   .execute()\n     * ```\n     */\n    $call(func) {\n        return func(this);\n    }\n    /**\n     * Call `func(this)` if `condition` is true.\n     *\n     * This method is especially handy with optional selects. Any `returning` or `returningAll`\n     * method calls add columns as optional fields to the output type when called inside\n     * the `func` callback. This is because we can't know if those selections were actually\n     * made before running the code.\n     *\n     * You can also call any other methods inside the callback.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * import type { PersonUpdate } from 'type-editor' // imaginary module\n     *\n     * async function updatePerson(id: number, updates: PersonUpdate, returnLastName: boolean) {\n     *   return await db\n     *     .updateTable('person')\n     *     .set(updates)\n     *     .where('id', '=', id)\n     *     .returning(['id', 'first_name'])\n     *     .$if(returnLastName, (qb) => qb.returning('last_name'))\n     *     .executeTakeFirstOrThrow()\n     * }\n     * ```\n     *\n     * Any selections added inside the `if` callback will be added as optional fields to the\n     * output type since we can't know if the selections were actually made before running\n     * the code. In the example above the return type of the `updatePerson` function is:\n     *\n     * ```ts\n     * Promise<{\n     *   id: number\n     *   first_name: string\n     *   last_name?: string\n     * }>\n     * ```\n     */\n    $if(condition, func) {\n        if (condition) {\n            return func(this);\n        }\n        return new UpdateQueryBuilder({\n            ...this.#props,\n        });\n    }\n    /**\n     * Change the output type of the query.\n     *\n     * This method call doesn't change the SQL in any way. This methods simply\n     * returns a copy of this `UpdateQueryBuilder` with a new output type.\n     */\n    $castTo() {\n        return new UpdateQueryBuilder(this.#props);\n    }\n    /**\n     * Narrows (parts of) the output type of the query.\n     *\n     * Kysely tries to be as type-safe as possible, but in some cases we have to make\n     * compromises for better maintainability and compilation performance. At present,\n     * Kysely doesn't narrow the output type of the query based on {@link set} input\n     * when using {@link where} and/or {@link returning} or {@link returningAll}.\n     *\n     * This utility method is very useful for these situations, as it removes unncessary\n     * runtime assertion/guard code. Its input type is limited to the output type\n     * of the query, so you can't add a column that doesn't exist, or change a column's\n     * type to something that doesn't exist in its union type.\n     *\n     * ### Examples\n     *\n     * Turn this code:\n     *\n     * ```ts\n     * import type { Person } from 'type-editor' // imaginary module\n     *\n     * const id = 1\n     * const now = new Date().toISOString()\n     *\n     * const person = await db.updateTable('person')\n     *   .set({ deleted_at: now })\n     *   .where('id', '=', id)\n     *   .where('nullable_column', 'is not', null)\n     *   .returningAll()\n     *   .executeTakeFirstOrThrow()\n     *\n     * if (isWithNoNullValue(person)) {\n     *   functionThatExpectsPersonWithNonNullValue(person)\n     * }\n     *\n     * function isWithNoNullValue(person: Person): person is Person & { nullable_column: string } {\n     *   return person.nullable_column != null\n     * }\n     * ```\n     *\n     * Into this:\n     *\n     * ```ts\n     * import type { NotNull } from 'kysely'\n     *\n     * const id = 1\n     * const now = new Date().toISOString()\n     *\n     * const person = await db.updateTable('person')\n     *   .set({ deleted_at: now })\n     *   .where('id', '=', id)\n     *   .where('nullable_column', 'is not', null)\n     *   .returningAll()\n     *   .$narrowType<{ deleted_at: Date; nullable_column: NotNull }>()\n     *   .executeTakeFirstOrThrow()\n     *\n     * functionThatExpectsPersonWithNonNullValue(person)\n     * ```\n     */\n    $narrowType() {\n        return new UpdateQueryBuilder(this.#props);\n    }\n    /**\n     * Asserts that query's output row type equals the given type `T`.\n     *\n     * This method can be used to simplify excessively complex types to make TypeScript happy\n     * and much faster.\n     *\n     * Kysely uses complex type magic to achieve its type safety. This complexity is sometimes too much\n     * for TypeScript and you get errors like this:\n     *\n     * ```\n     * error TS2589: Type instantiation is excessively deep and possibly infinite.\n     * ```\n     *\n     * In these case you can often use this method to help TypeScript a little bit. When you use this\n     * method to assert the output type of a query, Kysely can drop the complex output type that\n     * consists of multiple nested helper types and replace it with the simple asserted type.\n     *\n     * Using this method doesn't reduce type safety at all. You have to pass in a type that is\n     * structurally equal to the current type.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * import type { PersonUpdate, PetUpdate, Species } from 'type-editor' // imaginary module\n     *\n     * const person = {\n     *   id: 1,\n     *   gender: 'other',\n     * } satisfies PersonUpdate\n     *\n     * const pet = {\n     *   name: 'Fluffy',\n     * } satisfies PetUpdate\n     *\n     * const result = await db\n     *   .with('updated_person', (qb) => qb\n     *     .updateTable('person')\n     *     .set(person)\n     *     .where('id', '=', person.id)\n     *     .returning('first_name')\n     *     .$assertType<{ first_name: string }>()\n     *   )\n     *   .with('updated_pet', (qb) => qb\n     *     .updateTable('pet')\n     *     .set(pet)\n     *     .where('owner_id', '=', person.id)\n     *     .returning(['name as pet_name', 'species'])\n     *     .$assertType<{ pet_name: string, species: Species }>()\n     *   )\n     *   .selectFrom(['updated_person', 'updated_pet'])\n     *   .selectAll()\n     *   .executeTakeFirstOrThrow()\n     * ```\n     */\n    $assertType() {\n        return new UpdateQueryBuilder(this.#props);\n    }\n    /**\n     * Returns a copy of this UpdateQueryBuilder instance with the given plugin installed.\n     */\n    withPlugin(plugin) {\n        return new UpdateQueryBuilder({\n            ...this.#props,\n            executor: this.#props.executor.withPlugin(plugin),\n        });\n    }\n    toOperationNode() {\n        return this.#props.executor.transformQuery(this.#props.queryNode, this.#props.queryId);\n    }\n    compile() {\n        return this.#props.executor.compileQuery(this.toOperationNode(), this.#props.queryId);\n    }\n    /**\n     * Executes the query and returns an array of rows.\n     *\n     * Also see the {@link executeTakeFirst} and {@link executeTakeFirstOrThrow} methods.\n     */\n    async execute() {\n        const compiledQuery = this.compile();\n        const result = await this.#props.executor.executeQuery(compiledQuery, this.#props.queryId);\n        const { adapter } = this.#props.executor;\n        const query = compiledQuery.query;\n        if ((query.returning && adapter.supportsReturning) ||\n            (query.output && adapter.supportsOutput)) {\n            return result.rows;\n        }\n        return [\n            new UpdateResult(result.numAffectedRows ?? BigInt(0), result.numChangedRows),\n        ];\n    }\n    /**\n     * Executes the query and returns the first result or undefined if\n     * the query returned no result.\n     */\n    async executeTakeFirst() {\n        const [result] = await this.execute();\n        return result;\n    }\n    /**\n     * Executes the query and returns the first result or throws if\n     * the query returned no result.\n     *\n     * By default an instance of {@link NoResultError} is thrown, but you can\n     * provide a custom error class, or callback as the only argument to throw a different\n     * error.\n     */\n    async executeTakeFirstOrThrow(errorConstructor = NoResultError) {\n        const result = await this.executeTakeFirst();\n        if (result === undefined) {\n            const error = isNoResultErrorConstructor(errorConstructor)\n                ? new errorConstructor(this.toOperationNode())\n                : errorConstructor(this.toOperationNode());\n            throw error;\n        }\n        return result;\n    }\n    async *stream(chunkSize = 100) {\n        const compiledQuery = this.compile();\n        const stream = this.#props.executor.stream(compiledQuery, chunkSize, this.#props.queryId);\n        for await (const item of stream) {\n            yield* item.rows;\n        }\n    }\n    async explain(format, options) {\n        const builder = new UpdateQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithExplain(this.#props.queryNode, format, options),\n        });\n        return await builder.execute();\n    }\n}\n", "/// <reference types=\"./common-table-expression-name-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { ColumnNode } from './column-node.js';\nimport { TableNode } from './table-node.js';\n/**\n * @internal\n */\nexport const CommonTableExpressionNameNode = freeze({\n    is(node) {\n        return node.kind === 'CommonTableExpressionNameNode';\n    },\n    create(tableName, columnNames) {\n        return freeze({\n            kind: 'CommonTableExpressionNameNode',\n            table: TableNode.create(tableName),\n            columns: columnNames\n                ? freeze(columnNames.map(ColumnNode.create))\n                : undefined,\n        });\n    },\n});\n", "/// <reference types=\"./common-table-expression-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const CommonTableExpressionNode = freeze({\n    is(node) {\n        return node.kind === 'CommonTableExpressionNode';\n    },\n    create(name, expression) {\n        return freeze({\n            kind: 'CommonTableExpressionNode',\n            name,\n            expression,\n        });\n    },\n    cloneWith(node, props) {\n        return freeze({\n            ...node,\n            ...props,\n        });\n    },\n});\n", "/// <reference types=\"./cte-builder.d.ts\" />\nimport { CommonTableExpressionNode } from '../operation-node/common-table-expression-node.js';\nimport { freeze } from '../util/object-utils.js';\nexport class CTEBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    /**\n     * Makes the common table expression materialized.\n     */\n    materialized() {\n        return new CTEBuilder({\n            ...this.#props,\n            node: CommonTableExpressionNode.cloneWith(this.#props.node, {\n                materialized: true,\n            }),\n        });\n    }\n    /**\n     * Makes the common table expression not materialized.\n     */\n    notMaterialized() {\n        return new CTEBuilder({\n            ...this.#props,\n            node: CommonTableExpressionNode.cloneWith(this.#props.node, {\n                materialized: false,\n            }),\n        });\n    }\n    toOperationNode() {\n        return this.#props.node;\n    }\n}\n", "/// <reference types=\"./with-parser.d.ts\" />\nimport { CommonTableExpressionNameNode } from '../operation-node/common-table-expression-name-node.js';\nimport { createQueryCreator } from './parse-utils.js';\nimport { isFunction } from '../util/object-utils.js';\nimport { CTEBuilder } from '../query-builder/cte-builder.js';\nimport { CommonTableExpressionNode } from '../operation-node/common-table-expression-node.js';\nexport function parseCommonTableExpression(nameOrBuilderCallback, expression) {\n    const expressionNode = expression(createQueryCreator()).toOperationNode();\n    if (isFunction(nameOrBuilderCallback)) {\n        return nameOrBuilderCallback(cteBuilderFactory(expressionNode)).toOperationNode();\n    }\n    return CommonTableExpressionNode.create(parseCommonTableExpressionName(nameOrBuilderCallback), expressionNode);\n}\nfunction cteBuilderFactory(expressionNode) {\n    return (name) => {\n        return new CTEBuilder({\n            node: CommonTableExpressionNode.create(parseCommonTableExpressionName(name), expressionNode),\n        });\n    };\n}\nfunction parseCommonTableExpressionName(name) {\n    if (name.includes('(')) {\n        const parts = name.split(/[\\(\\)]/);\n        const table = parts[0];\n        const columns = parts[1].split(',').map((it) => it.trim());\n        return CommonTableExpressionNameNode.create(table, columns);\n    }\n    else {\n        return CommonTableExpressionNameNode.create(name);\n    }\n}\n", "/// <reference types=\"./with-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const WithNode = freeze({\n    is(node) {\n        return node.kind === 'WithNode';\n    },\n    create(expression, params) {\n        return freeze({\n            kind: 'WithNode',\n            expressions: freeze([expression]),\n            ...params,\n        });\n    },\n    cloneWithExpression(withNode, expression) {\n        return freeze({\n            ...withNode,\n            expressions: freeze([...withNode.expressions, expression]),\n        });\n    },\n});\n", "/// <reference types=\"./random-string.d.ts\" />\nconst CHARS = [\n    'A',\n    'B',\n    'C',\n    'D',\n    'E',\n    'F',\n    'G',\n    'H',\n    'I',\n    'J',\n    'K',\n    'L',\n    'M',\n    'N',\n    'O',\n    'P',\n    'Q',\n    'R',\n    'S',\n    'T',\n    'U',\n    'V',\n    'W',\n    'X',\n    'Y',\n    'Z',\n    'a',\n    'b',\n    'c',\n    'd',\n    'e',\n    'f',\n    'g',\n    'h',\n    'i',\n    'j',\n    'k',\n    'l',\n    'm',\n    'n',\n    'o',\n    'p',\n    'q',\n    'r',\n    's',\n    't',\n    'u',\n    'v',\n    'w',\n    'x',\n    'y',\n    'z',\n    '0',\n    '1',\n    '2',\n    '3',\n    '4',\n    '5',\n    '6',\n    '7',\n    '8',\n    '9',\n];\nexport function randomString(length) {\n    let chars = '';\n    for (let i = 0; i < length; ++i) {\n        chars += randomChar();\n    }\n    return chars;\n}\nfunction randomChar() {\n    return CHARS[~~(Math.random() * CHARS.length)];\n}\n", "/// <reference types=\"./query-id.d.ts\" />\nimport { randomString } from './random-string.js';\nexport function createQueryId() {\n    return new LazyQueryId();\n}\nclass LazyQueryId {\n    #queryId;\n    get queryId() {\n        if (this.#queryId === undefined) {\n            this.#queryId = randomString(8);\n        }\n        return this.#queryId;\n    }\n}\n", "/// <reference types=\"./require-all-props.d.ts\" />\n/**\n * Helper function to check listed properties according to given type. Check if all properties has been used when object is initialised.\n *\n * Example use:\n *\n * ```ts\n * type SomeType = { propA: string; propB?: number; }\n *\n * // propB has to be mentioned even it is optional. It still should be initialized with undefined.\n * const a: SomeType = requireAllProps<SomeType>({ propA: \"value A\", propB: undefined });\n *\n * // checked type is implicit for variable.\n * const b = requireAllProps<SomeType>({ propA: \"value A\", propB: undefined });\n * ```\n *\n * Wrong use of this helper:\n *\n * 1. Omit checked type - all checked properties will be expect as of type never\n *\n * ```ts\n * type SomeType = { propA: string; propB?: number; }\n * // const z: SomeType = requireAllProps({ propC: \"no type will work\" }); // Property 'propA' is missing in type '{ propC: string; }' but required in type 'SomeType'.\n * ```\n *\n * 2. Apply to spreaded object - there is no way how to check in compile time if spreaded object contains all properties\n *\n * ```ts\n * type SomeType = { propA: string; propB?: number; }\n * const y: SomeType = { propA: \"\" }; // valid object according to SomeType declaration\n * // const x = requireAllProps<SomeType>({ ...y }); // Argument of type '{ propA: string; propB?: number; }' is not assignable to parameter of type 'AllProps<SomeType>'.\n * ```\n *\n * @param obj object to check if all properties has been used\n * @returns untouched obj parameter is returned\n */\nexport function requireAllProps(obj) {\n    return obj;\n}\n", "/// <reference types=\"./operation-node-transformer.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { requireAllProps } from '../util/require-all-props.js';\n/**\n * Transforms an operation node tree into another one.\n *\n * Kysely queries are expressed internally as a tree of objects (operation nodes).\n * `OperationNodeTransformer` takes such a tree as its input and returns a\n * transformed deep copy of it. By default the `OperationNodeTransformer`\n * does nothing. You need to override one or more methods to make it do\n * something.\n *\n * There's a method for each node type. For example if you'd like to convert\n * each identifier (table name, column name, alias etc.) from camelCase to\n * snake_case, you'd do something like this:\n *\n * ```ts\n * import { type IdentifierNode, OperationNodeTransformer } from 'kysely'\n * import snakeCase from 'lodash/snakeCase'\n *\n * class CamelCaseTransformer extends OperationNodeTransformer {\n *   override transformIdentifier(node: IdentifierNode): IdentifierNode {\n *     node = super.transformIdentifier(node)\n *\n *     return {\n *       ...node,\n *       name: snakeCase(node.name),\n *     }\n *   }\n * }\n *\n * const transformer = new CamelCaseTransformer()\n *\n * const query = db.selectFrom('person').select(['first_name', 'last_name'])\n *\n * const tree = transformer.transformNode(query.toOperationNode())\n * ```\n */\nexport class OperationNodeTransformer {\n    nodeStack = [];\n    #transformers = freeze({\n        AliasNode: this.transformAlias.bind(this),\n        ColumnNode: this.transformColumn.bind(this),\n        IdentifierNode: this.transformIdentifier.bind(this),\n        SchemableIdentifierNode: this.transformSchemableIdentifier.bind(this),\n        RawNode: this.transformRaw.bind(this),\n        ReferenceNode: this.transformReference.bind(this),\n        SelectQueryNode: this.transformSelectQuery.bind(this),\n        SelectionNode: this.transformSelection.bind(this),\n        TableNode: this.transformTable.bind(this),\n        FromNode: this.transformFrom.bind(this),\n        SelectAllNode: this.transformSelectAll.bind(this),\n        AndNode: this.transformAnd.bind(this),\n        OrNode: this.transformOr.bind(this),\n        ValueNode: this.transformValue.bind(this),\n        ValueListNode: this.transformValueList.bind(this),\n        PrimitiveValueListNode: this.transformPrimitiveValueList.bind(this),\n        ParensNode: this.transformParens.bind(this),\n        JoinNode: this.transformJoin.bind(this),\n        OperatorNode: this.transformOperator.bind(this),\n        WhereNode: this.transformWhere.bind(this),\n        InsertQueryNode: this.transformInsertQuery.bind(this),\n        DeleteQueryNode: this.transformDeleteQuery.bind(this),\n        ReturningNode: this.transformReturning.bind(this),\n        CreateTableNode: this.transformCreateTable.bind(this),\n        AddColumnNode: this.transformAddColumn.bind(this),\n        ColumnDefinitionNode: this.transformColumnDefinition.bind(this),\n        DropTableNode: this.transformDropTable.bind(this),\n        DataTypeNode: this.transformDataType.bind(this),\n        OrderByNode: this.transformOrderBy.bind(this),\n        OrderByItemNode: this.transformOrderByItem.bind(this),\n        GroupByNode: this.transformGroupBy.bind(this),\n        GroupByItemNode: this.transformGroupByItem.bind(this),\n        UpdateQueryNode: this.transformUpdateQuery.bind(this),\n        ColumnUpdateNode: this.transformColumnUpdate.bind(this),\n        LimitNode: this.transformLimit.bind(this),\n        OffsetNode: this.transformOffset.bind(this),\n        OnConflictNode: this.transformOnConflict.bind(this),\n        OnDuplicateKeyNode: this.transformOnDuplicateKey.bind(this),\n        CreateIndexNode: this.transformCreateIndex.bind(this),\n        DropIndexNode: this.transformDropIndex.bind(this),\n        ListNode: this.transformList.bind(this),\n        PrimaryKeyConstraintNode: this.transformPrimaryKeyConstraint.bind(this),\n        UniqueConstraintNode: this.transformUniqueConstraint.bind(this),\n        ReferencesNode: this.transformReferences.bind(this),\n        CheckConstraintNode: this.transformCheckConstraint.bind(this),\n        WithNode: this.transformWith.bind(this),\n        CommonTableExpressionNode: this.transformCommonTableExpression.bind(this),\n        CommonTableExpressionNameNode: this.transformCommonTableExpressionName.bind(this),\n        HavingNode: this.transformHaving.bind(this),\n        CreateSchemaNode: this.transformCreateSchema.bind(this),\n        DropSchemaNode: this.transformDropSchema.bind(this),\n        AlterTableNode: this.transformAlterTable.bind(this),\n        DropColumnNode: this.transformDropColumn.bind(this),\n        RenameColumnNode: this.transformRenameColumn.bind(this),\n        AlterColumnNode: this.transformAlterColumn.bind(this),\n        ModifyColumnNode: this.transformModifyColumn.bind(this),\n        AddConstraintNode: this.transformAddConstraint.bind(this),\n        DropConstraintNode: this.transformDropConstraint.bind(this),\n        RenameConstraintNode: this.transformRenameConstraint.bind(this),\n        ForeignKeyConstraintNode: this.transformForeignKeyConstraint.bind(this),\n        CreateViewNode: this.transformCreateView.bind(this),\n        RefreshMaterializedViewNode: this.transformRefreshMaterializedView.bind(this),\n        DropViewNode: this.transformDropView.bind(this),\n        GeneratedNode: this.transformGenerated.bind(this),\n        DefaultValueNode: this.transformDefaultValue.bind(this),\n        OnNode: this.transformOn.bind(this),\n        ValuesNode: this.transformValues.bind(this),\n        SelectModifierNode: this.transformSelectModifier.bind(this),\n        CreateTypeNode: this.transformCreateType.bind(this),\n        DropTypeNode: this.transformDropType.bind(this),\n        ExplainNode: this.transformExplain.bind(this),\n        DefaultInsertValueNode: this.transformDefaultInsertValue.bind(this),\n        AggregateFunctionNode: this.transformAggregateFunction.bind(this),\n        OverNode: this.transformOver.bind(this),\n        PartitionByNode: this.transformPartitionBy.bind(this),\n        PartitionByItemNode: this.transformPartitionByItem.bind(this),\n        SetOperationNode: this.transformSetOperation.bind(this),\n        BinaryOperationNode: this.transformBinaryOperation.bind(this),\n        UnaryOperationNode: this.transformUnaryOperation.bind(this),\n        UsingNode: this.transformUsing.bind(this),\n        FunctionNode: this.transformFunction.bind(this),\n        CaseNode: this.transformCase.bind(this),\n        WhenNode: this.transformWhen.bind(this),\n        JSONReferenceNode: this.transformJSONReference.bind(this),\n        JSONPathNode: this.transformJSONPath.bind(this),\n        JSONPathLegNode: this.transformJSONPathLeg.bind(this),\n        JSONOperatorChainNode: this.transformJSONOperatorChain.bind(this),\n        TupleNode: this.transformTuple.bind(this),\n        MergeQueryNode: this.transformMergeQuery.bind(this),\n        MatchedNode: this.transformMatched.bind(this),\n        AddIndexNode: this.transformAddIndex.bind(this),\n        CastNode: this.transformCast.bind(this),\n        FetchNode: this.transformFetch.bind(this),\n        TopNode: this.transformTop.bind(this),\n        OutputNode: this.transformOutput.bind(this),\n        OrActionNode: this.transformOrAction.bind(this),\n        CollateNode: this.transformCollate.bind(this),\n    });\n    transformNode(node, queryId) {\n        if (!node) {\n            return node;\n        }\n        this.nodeStack.push(node);\n        const out = this.transformNodeImpl(node, queryId);\n        this.nodeStack.pop();\n        return freeze(out);\n    }\n    transformNodeImpl(node, queryId) {\n        return this.#transformers[node.kind](node, queryId);\n    }\n    transformNodeList(list, queryId) {\n        if (!list) {\n            return list;\n        }\n        return freeze(list.map((node) => this.transformNode(node, queryId)));\n    }\n    transformSelectQuery(node, queryId) {\n        return requireAllProps({\n            kind: 'SelectQueryNode',\n            from: this.transformNode(node.from, queryId),\n            selections: this.transformNodeList(node.selections, queryId),\n            distinctOn: this.transformNodeList(node.distinctOn, queryId),\n            joins: this.transformNodeList(node.joins, queryId),\n            groupBy: this.transformNode(node.groupBy, queryId),\n            orderBy: this.transformNode(node.orderBy, queryId),\n            where: this.transformNode(node.where, queryId),\n            frontModifiers: this.transformNodeList(node.frontModifiers, queryId),\n            endModifiers: this.transformNodeList(node.endModifiers, queryId),\n            limit: this.transformNode(node.limit, queryId),\n            offset: this.transformNode(node.offset, queryId),\n            with: this.transformNode(node.with, queryId),\n            having: this.transformNode(node.having, queryId),\n            explain: this.transformNode(node.explain, queryId),\n            setOperations: this.transformNodeList(node.setOperations, queryId),\n            fetch: this.transformNode(node.fetch, queryId),\n            top: this.transformNode(node.top, queryId),\n        });\n    }\n    transformSelection(node, queryId) {\n        return requireAllProps({\n            kind: 'SelectionNode',\n            selection: this.transformNode(node.selection, queryId),\n        });\n    }\n    transformColumn(node, queryId) {\n        return requireAllProps({\n            kind: 'ColumnNode',\n            column: this.transformNode(node.column, queryId),\n        });\n    }\n    transformAlias(node, queryId) {\n        return requireAllProps({\n            kind: 'AliasNode',\n            node: this.transformNode(node.node, queryId),\n            alias: this.transformNode(node.alias, queryId),\n        });\n    }\n    transformTable(node, queryId) {\n        return requireAllProps({\n            kind: 'TableNode',\n            table: this.transformNode(node.table, queryId),\n        });\n    }\n    transformFrom(node, queryId) {\n        return requireAllProps({\n            kind: 'FromNode',\n            froms: this.transformNodeList(node.froms, queryId),\n        });\n    }\n    transformReference(node, queryId) {\n        return requireAllProps({\n            kind: 'ReferenceNode',\n            column: this.transformNode(node.column, queryId),\n            table: this.transformNode(node.table, queryId),\n        });\n    }\n    transformAnd(node, queryId) {\n        return requireAllProps({\n            kind: 'AndNode',\n            left: this.transformNode(node.left, queryId),\n            right: this.transformNode(node.right, queryId),\n        });\n    }\n    transformOr(node, queryId) {\n        return requireAllProps({\n            kind: 'OrNode',\n            left: this.transformNode(node.left, queryId),\n            right: this.transformNode(node.right, queryId),\n        });\n    }\n    transformValueList(node, queryId) {\n        return requireAllProps({\n            kind: 'ValueListNode',\n            values: this.transformNodeList(node.values, queryId),\n        });\n    }\n    transformParens(node, queryId) {\n        return requireAllProps({\n            kind: 'ParensNode',\n            node: this.transformNode(node.node, queryId),\n        });\n    }\n    transformJoin(node, queryId) {\n        return requireAllProps({\n            kind: 'JoinNode',\n            joinType: node.joinType,\n            table: this.transformNode(node.table, queryId),\n            on: this.transformNode(node.on, queryId),\n        });\n    }\n    transformRaw(node, queryId) {\n        return requireAllProps({\n            kind: 'RawNode',\n            sqlFragments: freeze([...node.sqlFragments]),\n            parameters: this.transformNodeList(node.parameters, queryId),\n        });\n    }\n    transformWhere(node, queryId) {\n        return requireAllProps({\n            kind: 'WhereNode',\n            where: this.transformNode(node.where, queryId),\n        });\n    }\n    transformInsertQuery(node, queryId) {\n        return requireAllProps({\n            kind: 'InsertQueryNode',\n            into: this.transformNode(node.into, queryId),\n            columns: this.transformNodeList(node.columns, queryId),\n            values: this.transformNode(node.values, queryId),\n            returning: this.transformNode(node.returning, queryId),\n            onConflict: this.transformNode(node.onConflict, queryId),\n            onDuplicateKey: this.transformNode(node.onDuplicateKey, queryId),\n            endModifiers: this.transformNodeList(node.endModifiers, queryId),\n            with: this.transformNode(node.with, queryId),\n            ignore: node.ignore,\n            orAction: this.transformNode(node.orAction, queryId),\n            replace: node.replace,\n            explain: this.transformNode(node.explain, queryId),\n            defaultValues: node.defaultValues,\n            top: this.transformNode(node.top, queryId),\n            output: this.transformNode(node.output, queryId),\n        });\n    }\n    transformValues(node, queryId) {\n        return requireAllProps({\n            kind: 'ValuesNode',\n            values: this.transformNodeList(node.values, queryId),\n        });\n    }\n    transformDeleteQuery(node, queryId) {\n        return requireAllProps({\n            kind: 'DeleteQueryNode',\n            from: this.transformNode(node.from, queryId),\n            using: this.transformNode(node.using, queryId),\n            joins: this.transformNodeList(node.joins, queryId),\n            where: this.transformNode(node.where, queryId),\n            returning: this.transformNode(node.returning, queryId),\n            endModifiers: this.transformNodeList(node.endModifiers, queryId),\n            with: this.transformNode(node.with, queryId),\n            orderBy: this.transformNode(node.orderBy, queryId),\n            limit: this.transformNode(node.limit, queryId),\n            explain: this.transformNode(node.explain, queryId),\n            top: this.transformNode(node.top, queryId),\n            output: this.transformNode(node.output, queryId),\n        });\n    }\n    transformReturning(node, queryId) {\n        return requireAllProps({\n            kind: 'ReturningNode',\n            selections: this.transformNodeList(node.selections, queryId),\n        });\n    }\n    transformCreateTable(node, queryId) {\n        return requireAllProps({\n            kind: 'CreateTableNode',\n            table: this.transformNode(node.table, queryId),\n            columns: this.transformNodeList(node.columns, queryId),\n            constraints: this.transformNodeList(node.constraints, queryId),\n            temporary: node.temporary,\n            ifNotExists: node.ifNotExists,\n            onCommit: node.onCommit,\n            frontModifiers: this.transformNodeList(node.frontModifiers, queryId),\n            endModifiers: this.transformNodeList(node.endModifiers, queryId),\n            selectQuery: this.transformNode(node.selectQuery, queryId),\n        });\n    }\n    transformColumnDefinition(node, queryId) {\n        return requireAllProps({\n            kind: 'ColumnDefinitionNode',\n            column: this.transformNode(node.column, queryId),\n            dataType: this.transformNode(node.dataType, queryId),\n            references: this.transformNode(node.references, queryId),\n            primaryKey: node.primaryKey,\n            autoIncrement: node.autoIncrement,\n            unique: node.unique,\n            notNull: node.notNull,\n            unsigned: node.unsigned,\n            defaultTo: this.transformNode(node.defaultTo, queryId),\n            check: this.transformNode(node.check, queryId),\n            generated: this.transformNode(node.generated, queryId),\n            frontModifiers: this.transformNodeList(node.frontModifiers, queryId),\n            endModifiers: this.transformNodeList(node.endModifiers, queryId),\n            nullsNotDistinct: node.nullsNotDistinct,\n            identity: node.identity,\n            ifNotExists: node.ifNotExists,\n        });\n    }\n    transformAddColumn(node, queryId) {\n        return requireAllProps({\n            kind: 'AddColumnNode',\n            column: this.transformNode(node.column, queryId),\n        });\n    }\n    transformDropTable(node, queryId) {\n        return requireAllProps({\n            kind: 'DropTableNode',\n            table: this.transformNode(node.table, queryId),\n            ifExists: node.ifExists,\n            cascade: node.cascade,\n        });\n    }\n    transformOrderBy(node, queryId) {\n        return requireAllProps({\n            kind: 'OrderByNode',\n            items: this.transformNodeList(node.items, queryId),\n        });\n    }\n    transformOrderByItem(node, queryId) {\n        return requireAllProps({\n            kind: 'OrderByItemNode',\n            orderBy: this.transformNode(node.orderBy, queryId),\n            direction: this.transformNode(node.direction, queryId),\n            collation: this.transformNode(node.collation, queryId),\n            nulls: node.nulls,\n        });\n    }\n    transformGroupBy(node, queryId) {\n        return requireAllProps({\n            kind: 'GroupByNode',\n            items: this.transformNodeList(node.items, queryId),\n        });\n    }\n    transformGroupByItem(node, queryId) {\n        return requireAllProps({\n            kind: 'GroupByItemNode',\n            groupBy: this.transformNode(node.groupBy, queryId),\n        });\n    }\n    transformUpdateQuery(node, queryId) {\n        return requireAllProps({\n            kind: 'UpdateQueryNode',\n            table: this.transformNode(node.table, queryId),\n            from: this.transformNode(node.from, queryId),\n            joins: this.transformNodeList(node.joins, queryId),\n            where: this.transformNode(node.where, queryId),\n            updates: this.transformNodeList(node.updates, queryId),\n            returning: this.transformNode(node.returning, queryId),\n            endModifiers: this.transformNodeList(node.endModifiers, queryId),\n            with: this.transformNode(node.with, queryId),\n            explain: this.transformNode(node.explain, queryId),\n            limit: this.transformNode(node.limit, queryId),\n            top: this.transformNode(node.top, queryId),\n            output: this.transformNode(node.output, queryId),\n            orderBy: this.transformNode(node.orderBy, queryId),\n        });\n    }\n    transformColumnUpdate(node, queryId) {\n        return requireAllProps({\n            kind: 'ColumnUpdateNode',\n            column: this.transformNode(node.column, queryId),\n            value: this.transformNode(node.value, queryId),\n        });\n    }\n    transformLimit(node, queryId) {\n        return requireAllProps({\n            kind: 'LimitNode',\n            limit: this.transformNode(node.limit, queryId),\n        });\n    }\n    transformOffset(node, queryId) {\n        return requireAllProps({\n            kind: 'OffsetNode',\n            offset: this.transformNode(node.offset, queryId),\n        });\n    }\n    transformOnConflict(node, queryId) {\n        return requireAllProps({\n            kind: 'OnConflictNode',\n            columns: this.transformNodeList(node.columns, queryId),\n            constraint: this.transformNode(node.constraint, queryId),\n            indexExpression: this.transformNode(node.indexExpression, queryId),\n            indexWhere: this.transformNode(node.indexWhere, queryId),\n            updates: this.transformNodeList(node.updates, queryId),\n            updateWhere: this.transformNode(node.updateWhere, queryId),\n            doNothing: node.doNothing,\n        });\n    }\n    transformOnDuplicateKey(node, queryId) {\n        return requireAllProps({\n            kind: 'OnDuplicateKeyNode',\n            updates: this.transformNodeList(node.updates, queryId),\n        });\n    }\n    transformCreateIndex(node, queryId) {\n        return requireAllProps({\n            kind: 'CreateIndexNode',\n            name: this.transformNode(node.name, queryId),\n            table: this.transformNode(node.table, queryId),\n            columns: this.transformNodeList(node.columns, queryId),\n            unique: node.unique,\n            using: this.transformNode(node.using, queryId),\n            ifNotExists: node.ifNotExists,\n            where: this.transformNode(node.where, queryId),\n            nullsNotDistinct: node.nullsNotDistinct,\n        });\n    }\n    transformList(node, queryId) {\n        return requireAllProps({\n            kind: 'ListNode',\n            items: this.transformNodeList(node.items, queryId),\n        });\n    }\n    transformDropIndex(node, queryId) {\n        return requireAllProps({\n            kind: 'DropIndexNode',\n            name: this.transformNode(node.name, queryId),\n            table: this.transformNode(node.table, queryId),\n            ifExists: node.ifExists,\n            cascade: node.cascade,\n        });\n    }\n    transformPrimaryKeyConstraint(node, queryId) {\n        return requireAllProps({\n            kind: 'PrimaryKeyConstraintNode',\n            columns: this.transformNodeList(node.columns, queryId),\n            name: this.transformNode(node.name, queryId),\n            deferrable: node.deferrable,\n            initiallyDeferred: node.initiallyDeferred,\n        });\n    }\n    transformUniqueConstraint(node, queryId) {\n        return requireAllProps({\n            kind: 'UniqueConstraintNode',\n            columns: this.transformNodeList(node.columns, queryId),\n            name: this.transformNode(node.name, queryId),\n            nullsNotDistinct: node.nullsNotDistinct,\n            deferrable: node.deferrable,\n            initiallyDeferred: node.initiallyDeferred,\n        });\n    }\n    transformForeignKeyConstraint(node, queryId) {\n        return requireAllProps({\n            kind: 'ForeignKeyConstraintNode',\n            columns: this.transformNodeList(node.columns, queryId),\n            references: this.transformNode(node.references, queryId),\n            name: this.transformNode(node.name, queryId),\n            onDelete: node.onDelete,\n            onUpdate: node.onUpdate,\n            deferrable: node.deferrable,\n            initiallyDeferred: node.initiallyDeferred,\n        });\n    }\n    transformSetOperation(node, queryId) {\n        return requireAllProps({\n            kind: 'SetOperationNode',\n            operator: node.operator,\n            expression: this.transformNode(node.expression, queryId),\n            all: node.all,\n        });\n    }\n    transformReferences(node, queryId) {\n        return requireAllProps({\n            kind: 'ReferencesNode',\n            table: this.transformNode(node.table, queryId),\n            columns: this.transformNodeList(node.columns, queryId),\n            onDelete: node.onDelete,\n            onUpdate: node.onUpdate,\n        });\n    }\n    transformCheckConstraint(node, queryId) {\n        return requireAllProps({\n            kind: 'CheckConstraintNode',\n            expression: this.transformNode(node.expression, queryId),\n            name: this.transformNode(node.name, queryId),\n        });\n    }\n    transformWith(node, queryId) {\n        return requireAllProps({\n            kind: 'WithNode',\n            expressions: this.transformNodeList(node.expressions, queryId),\n            recursive: node.recursive,\n        });\n    }\n    transformCommonTableExpression(node, queryId) {\n        return requireAllProps({\n            kind: 'CommonTableExpressionNode',\n            name: this.transformNode(node.name, queryId),\n            materialized: node.materialized,\n            expression: this.transformNode(node.expression, queryId),\n        });\n    }\n    transformCommonTableExpressionName(node, queryId) {\n        return requireAllProps({\n            kind: 'CommonTableExpressionNameNode',\n            table: this.transformNode(node.table, queryId),\n            columns: this.transformNodeList(node.columns, queryId),\n        });\n    }\n    transformHaving(node, queryId) {\n        return requireAllProps({\n            kind: 'HavingNode',\n            having: this.transformNode(node.having, queryId),\n        });\n    }\n    transformCreateSchema(node, queryId) {\n        return requireAllProps({\n            kind: 'CreateSchemaNode',\n            schema: this.transformNode(node.schema, queryId),\n            ifNotExists: node.ifNotExists,\n        });\n    }\n    transformDropSchema(node, queryId) {\n        return requireAllProps({\n            kind: 'DropSchemaNode',\n            schema: this.transformNode(node.schema, queryId),\n            ifExists: node.ifExists,\n            cascade: node.cascade,\n        });\n    }\n    transformAlterTable(node, queryId) {\n        return requireAllProps({\n            kind: 'AlterTableNode',\n            table: this.transformNode(node.table, queryId),\n            renameTo: this.transformNode(node.renameTo, queryId),\n            setSchema: this.transformNode(node.setSchema, queryId),\n            columnAlterations: this.transformNodeList(node.columnAlterations, queryId),\n            addConstraint: this.transformNode(node.addConstraint, queryId),\n            dropConstraint: this.transformNode(node.dropConstraint, queryId),\n            renameConstraint: this.transformNode(node.renameConstraint, queryId),\n            addIndex: this.transformNode(node.addIndex, queryId),\n            dropIndex: this.transformNode(node.dropIndex, queryId),\n        });\n    }\n    transformDropColumn(node, queryId) {\n        return requireAllProps({\n            kind: 'DropColumnNode',\n            column: this.transformNode(node.column, queryId),\n        });\n    }\n    transformRenameColumn(node, queryId) {\n        return requireAllProps({\n            kind: 'RenameColumnNode',\n            column: this.transformNode(node.column, queryId),\n            renameTo: this.transformNode(node.renameTo, queryId),\n        });\n    }\n    transformAlterColumn(node, queryId) {\n        return requireAllProps({\n            kind: 'AlterColumnNode',\n            column: this.transformNode(node.column, queryId),\n            dataType: this.transformNode(node.dataType, queryId),\n            dataTypeExpression: this.transformNode(node.dataTypeExpression, queryId),\n            setDefault: this.transformNode(node.setDefault, queryId),\n            dropDefault: node.dropDefault,\n            setNotNull: node.setNotNull,\n            dropNotNull: node.dropNotNull,\n        });\n    }\n    transformModifyColumn(node, queryId) {\n        return requireAllProps({\n            kind: 'ModifyColumnNode',\n            column: this.transformNode(node.column, queryId),\n        });\n    }\n    transformAddConstraint(node, queryId) {\n        return requireAllProps({\n            kind: 'AddConstraintNode',\n            constraint: this.transformNode(node.constraint, queryId),\n        });\n    }\n    transformDropConstraint(node, queryId) {\n        return requireAllProps({\n            kind: 'DropConstraintNode',\n            constraintName: this.transformNode(node.constraintName, queryId),\n            ifExists: node.ifExists,\n            modifier: node.modifier,\n        });\n    }\n    transformRenameConstraint(node, queryId) {\n        return requireAllProps({\n            kind: 'RenameConstraintNode',\n            oldName: this.transformNode(node.oldName, queryId),\n            newName: this.transformNode(node.newName, queryId),\n        });\n    }\n    transformCreateView(node, queryId) {\n        return requireAllProps({\n            kind: 'CreateViewNode',\n            name: this.transformNode(node.name, queryId),\n            temporary: node.temporary,\n            orReplace: node.orReplace,\n            ifNotExists: node.ifNotExists,\n            materialized: node.materialized,\n            columns: this.transformNodeList(node.columns, queryId),\n            as: this.transformNode(node.as, queryId),\n        });\n    }\n    transformRefreshMaterializedView(node, queryId) {\n        return requireAllProps({\n            kind: 'RefreshMaterializedViewNode',\n            name: this.transformNode(node.name, queryId),\n            concurrently: node.concurrently,\n            withNoData: node.withNoData,\n        });\n    }\n    transformDropView(node, queryId) {\n        return requireAllProps({\n            kind: 'DropViewNode',\n            name: this.transformNode(node.name, queryId),\n            ifExists: node.ifExists,\n            materialized: node.materialized,\n            cascade: node.cascade,\n        });\n    }\n    transformGenerated(node, queryId) {\n        return requireAllProps({\n            kind: 'GeneratedNode',\n            byDefault: node.byDefault,\n            always: node.always,\n            identity: node.identity,\n            stored: node.stored,\n            expression: this.transformNode(node.expression, queryId),\n        });\n    }\n    transformDefaultValue(node, queryId) {\n        return requireAllProps({\n            kind: 'DefaultValueNode',\n            defaultValue: this.transformNode(node.defaultValue, queryId),\n        });\n    }\n    transformOn(node, queryId) {\n        return requireAllProps({\n            kind: 'OnNode',\n            on: this.transformNode(node.on, queryId),\n        });\n    }\n    transformSelectModifier(node, queryId) {\n        return requireAllProps({\n            kind: 'SelectModifierNode',\n            modifier: node.modifier,\n            rawModifier: this.transformNode(node.rawModifier, queryId),\n            of: this.transformNodeList(node.of, queryId),\n        });\n    }\n    transformCreateType(node, queryId) {\n        return requireAllProps({\n            kind: 'CreateTypeNode',\n            name: this.transformNode(node.name, queryId),\n            enum: this.transformNode(node.enum, queryId),\n        });\n    }\n    transformDropType(node, queryId) {\n        return requireAllProps({\n            kind: 'DropTypeNode',\n            name: this.transformNode(node.name, queryId),\n            ifExists: node.ifExists,\n        });\n    }\n    transformExplain(node, queryId) {\n        return requireAllProps({\n            kind: 'ExplainNode',\n            format: node.format,\n            options: this.transformNode(node.options, queryId),\n        });\n    }\n    transformSchemableIdentifier(node, queryId) {\n        return requireAllProps({\n            kind: 'SchemableIdentifierNode',\n            schema: this.transformNode(node.schema, queryId),\n            identifier: this.transformNode(node.identifier, queryId),\n        });\n    }\n    transformAggregateFunction(node, queryId) {\n        return requireAllProps({\n            kind: 'AggregateFunctionNode',\n            func: node.func,\n            aggregated: this.transformNodeList(node.aggregated, queryId),\n            distinct: node.distinct,\n            orderBy: this.transformNode(node.orderBy, queryId),\n            withinGroup: this.transformNode(node.withinGroup, queryId),\n            filter: this.transformNode(node.filter, queryId),\n            over: this.transformNode(node.over, queryId),\n        });\n    }\n    transformOver(node, queryId) {\n        return requireAllProps({\n            kind: 'OverNode',\n            orderBy: this.transformNode(node.orderBy, queryId),\n            partitionBy: this.transformNode(node.partitionBy, queryId),\n        });\n    }\n    transformPartitionBy(node, queryId) {\n        return requireAllProps({\n            kind: 'PartitionByNode',\n            items: this.transformNodeList(node.items, queryId),\n        });\n    }\n    transformPartitionByItem(node, queryId) {\n        return requireAllProps({\n            kind: 'PartitionByItemNode',\n            partitionBy: this.transformNode(node.partitionBy, queryId),\n        });\n    }\n    transformBinaryOperation(node, queryId) {\n        return requireAllProps({\n            kind: 'BinaryOperationNode',\n            leftOperand: this.transformNode(node.leftOperand, queryId),\n            operator: this.transformNode(node.operator, queryId),\n            rightOperand: this.transformNode(node.rightOperand, queryId),\n        });\n    }\n    transformUnaryOperation(node, queryId) {\n        return requireAllProps({\n            kind: 'UnaryOperationNode',\n            operator: this.transformNode(node.operator, queryId),\n            operand: this.transformNode(node.operand, queryId),\n        });\n    }\n    transformUsing(node, queryId) {\n        return requireAllProps({\n            kind: 'UsingNode',\n            tables: this.transformNodeList(node.tables, queryId),\n        });\n    }\n    transformFunction(node, queryId) {\n        return requireAllProps({\n            kind: 'FunctionNode',\n            func: node.func,\n            arguments: this.transformNodeList(node.arguments, queryId),\n        });\n    }\n    transformCase(node, queryId) {\n        return requireAllProps({\n            kind: 'CaseNode',\n            value: this.transformNode(node.value, queryId),\n            when: this.transformNodeList(node.when, queryId),\n            else: this.transformNode(node.else, queryId),\n            isStatement: node.isStatement,\n        });\n    }\n    transformWhen(node, queryId) {\n        return requireAllProps({\n            kind: 'WhenNode',\n            condition: this.transformNode(node.condition, queryId),\n            result: this.transformNode(node.result, queryId),\n        });\n    }\n    transformJSONReference(node, queryId) {\n        return requireAllProps({\n            kind: 'JSONReferenceNode',\n            reference: this.transformNode(node.reference, queryId),\n            traversal: this.transformNode(node.traversal, queryId),\n        });\n    }\n    transformJSONPath(node, queryId) {\n        return requireAllProps({\n            kind: 'JSONPathNode',\n            inOperator: this.transformNode(node.inOperator, queryId),\n            pathLegs: this.transformNodeList(node.pathLegs, queryId),\n        });\n    }\n    transformJSONPathLeg(node, _queryId) {\n        return requireAllProps({\n            kind: 'JSONPathLegNode',\n            type: node.type,\n            value: node.value,\n        });\n    }\n    transformJSONOperatorChain(node, queryId) {\n        return requireAllProps({\n            kind: 'JSONOperatorChainNode',\n            operator: this.transformNode(node.operator, queryId),\n            values: this.transformNodeList(node.values, queryId),\n        });\n    }\n    transformTuple(node, queryId) {\n        return requireAllProps({\n            kind: 'TupleNode',\n            values: this.transformNodeList(node.values, queryId),\n        });\n    }\n    transformMergeQuery(node, queryId) {\n        return requireAllProps({\n            kind: 'MergeQueryNode',\n            into: this.transformNode(node.into, queryId),\n            using: this.transformNode(node.using, queryId),\n            whens: this.transformNodeList(node.whens, queryId),\n            with: this.transformNode(node.with, queryId),\n            top: this.transformNode(node.top, queryId),\n            endModifiers: this.transformNodeList(node.endModifiers, queryId),\n            output: this.transformNode(node.output, queryId),\n            returning: this.transformNode(node.returning, queryId),\n        });\n    }\n    transformMatched(node, _queryId) {\n        return requireAllProps({\n            kind: 'MatchedNode',\n            not: node.not,\n            bySource: node.bySource,\n        });\n    }\n    transformAddIndex(node, queryId) {\n        return requireAllProps({\n            kind: 'AddIndexNode',\n            name: this.transformNode(node.name, queryId),\n            columns: this.transformNodeList(node.columns, queryId),\n            unique: node.unique,\n            using: this.transformNode(node.using, queryId),\n            ifNotExists: node.ifNotExists,\n        });\n    }\n    transformCast(node, queryId) {\n        return requireAllProps({\n            kind: 'CastNode',\n            expression: this.transformNode(node.expression, queryId),\n            dataType: this.transformNode(node.dataType, queryId),\n        });\n    }\n    transformFetch(node, queryId) {\n        return requireAllProps({\n            kind: 'FetchNode',\n            rowCount: this.transformNode(node.rowCount, queryId),\n            modifier: node.modifier,\n        });\n    }\n    transformTop(node, _queryId) {\n        return requireAllProps({\n            kind: 'TopNode',\n            expression: node.expression,\n            modifiers: node.modifiers,\n        });\n    }\n    transformOutput(node, queryId) {\n        return requireAllProps({\n            kind: 'OutputNode',\n            selections: this.transformNodeList(node.selections, queryId),\n        });\n    }\n    transformDataType(node, _queryId) {\n        // An Object.freezed leaf node. No need to clone.\n        return node;\n    }\n    transformSelectAll(node, _queryId) {\n        // An Object.freezed leaf node. No need to clone.\n        return node;\n    }\n    transformIdentifier(node, _queryId) {\n        // An Object.freezed leaf node. No need to clone.\n        return node;\n    }\n    transformValue(node, _queryId) {\n        // An Object.freezed leaf node. No need to clone.\n        return node;\n    }\n    transformPrimitiveValueList(node, _queryId) {\n        // An Object.freezed leaf node. No need to clone.\n        return node;\n    }\n    transformOperator(node, _queryId) {\n        // An Object.freezed leaf node. No need to clone.\n        return node;\n    }\n    transformDefaultInsertValue(node, _queryId) {\n        // An Object.freezed leaf node. No need to clone.\n        return node;\n    }\n    transformOrAction(node, _queryId) {\n        // An Object.freezed leaf node. No need to clone.\n        return node;\n    }\n    transformCollate(node, _queryId) {\n        // An Object.freezed leaf node. No need to clone.\n        return node;\n    }\n}\n", "/// <reference types=\"./with-schema-transformer.d.ts\" />\nimport { AliasNode } from '../../operation-node/alias-node.js';\nimport { IdentifierNode } from '../../operation-node/identifier-node.js';\nimport { ListNode } from '../../operation-node/list-node.js';\nimport { OperationNodeTransformer } from '../../operation-node/operation-node-transformer.js';\nimport { SchemableIdentifierNode } from '../../operation-node/schemable-identifier-node.js';\nimport { TableNode } from '../../operation-node/table-node.js';\nimport { freeze } from '../../util/object-utils.js';\n// This object exist only so that we get a type error when a new RootOperationNode\n// is added. If you get a type error here, make sure to add the new root node and\n// handle it correctly in the transformer.\n//\n// DO NOT REFACTOR THIS EVEN IF IT SEEMS USELESS TO YOU!\nconst ROOT_OPERATION_NODES = freeze({\n    AlterTableNode: true,\n    CreateIndexNode: true,\n    CreateSchemaNode: true,\n    CreateTableNode: true,\n    CreateTypeNode: true,\n    CreateViewNode: true,\n    RefreshMaterializedViewNode: true,\n    DeleteQueryNode: true,\n    DropIndexNode: true,\n    DropSchemaNode: true,\n    DropTableNode: true,\n    DropTypeNode: true,\n    DropViewNode: true,\n    InsertQueryNode: true,\n    RawNode: true,\n    SelectQueryNode: true,\n    UpdateQueryNode: true,\n    MergeQueryNode: true,\n});\nconst SCHEMALESS_FUNCTIONS = {\n    json_agg: true,\n    to_json: true,\n};\nexport class WithSchemaTransformer extends OperationNodeTransformer {\n    #schema;\n    #schemableIds = new Set();\n    #ctes = new Set();\n    constructor(schema) {\n        super();\n        this.#schema = schema;\n    }\n    transformNodeImpl(node, queryId) {\n        if (!this.#isRootOperationNode(node)) {\n            return super.transformNodeImpl(node, queryId);\n        }\n        const ctes = this.#collectCTEs(node);\n        for (const cte of ctes) {\n            this.#ctes.add(cte);\n        }\n        const tables = this.#collectSchemableIds(node);\n        for (const table of tables) {\n            this.#schemableIds.add(table);\n        }\n        const transformed = super.transformNodeImpl(node, queryId);\n        for (const table of tables) {\n            this.#schemableIds.delete(table);\n        }\n        for (const cte of ctes) {\n            this.#ctes.delete(cte);\n        }\n        return transformed;\n    }\n    transformSchemableIdentifier(node, queryId) {\n        const transformed = super.transformSchemableIdentifier(node, queryId);\n        if (transformed.schema || !this.#schemableIds.has(node.identifier.name)) {\n            return transformed;\n        }\n        return {\n            ...transformed,\n            schema: IdentifierNode.create(this.#schema),\n        };\n    }\n    transformReferences(node, queryId) {\n        const transformed = super.transformReferences(node, queryId);\n        if (transformed.table.table.schema) {\n            return transformed;\n        }\n        return {\n            ...transformed,\n            table: TableNode.createWithSchema(this.#schema, transformed.table.table.identifier.name),\n        };\n    }\n    transformAggregateFunction(node, queryId) {\n        return {\n            ...super.transformAggregateFunction({ ...node, aggregated: [] }, queryId),\n            aggregated: this.#transformTableArgsWithoutSchemas(node, queryId, 'aggregated'),\n        };\n    }\n    transformFunction(node, queryId) {\n        return {\n            ...super.transformFunction({ ...node, arguments: [] }, queryId),\n            arguments: this.#transformTableArgsWithoutSchemas(node, queryId, 'arguments'),\n        };\n    }\n    #transformTableArgsWithoutSchemas(node, queryId, argsKey) {\n        return SCHEMALESS_FUNCTIONS[node.func]\n            ? node[argsKey].map((arg) => !TableNode.is(arg) || arg.table.schema\n                ? this.transformNode(arg, queryId)\n                : {\n                    ...arg,\n                    table: this.transformIdentifier(arg.table.identifier, queryId),\n                })\n            : this.transformNodeList(node[argsKey], queryId);\n    }\n    #isRootOperationNode(node) {\n        return node.kind in ROOT_OPERATION_NODES;\n    }\n    #collectSchemableIds(node) {\n        const schemableIds = new Set();\n        if ('name' in node && node.name && SchemableIdentifierNode.is(node.name)) {\n            this.#collectSchemableId(node.name, schemableIds);\n        }\n        if ('from' in node && node.from) {\n            for (const from of node.from.froms) {\n                this.#collectSchemableIdsFromTableExpr(from, schemableIds);\n            }\n        }\n        if ('into' in node && node.into) {\n            this.#collectSchemableIdsFromTableExpr(node.into, schemableIds);\n        }\n        if ('table' in node && node.table) {\n            this.#collectSchemableIdsFromTableExpr(node.table, schemableIds);\n        }\n        if ('joins' in node && node.joins) {\n            for (const join of node.joins) {\n                this.#collectSchemableIdsFromTableExpr(join.table, schemableIds);\n            }\n        }\n        if ('using' in node && node.using) {\n            this.#collectSchemableIdsFromTableExpr(node.using, schemableIds);\n        }\n        return schemableIds;\n    }\n    #collectCTEs(node) {\n        const ctes = new Set();\n        if ('with' in node && node.with) {\n            this.#collectCTEIds(node.with, ctes);\n        }\n        return ctes;\n    }\n    #collectSchemableIdsFromTableExpr(node, schemableIds) {\n        if (TableNode.is(node)) {\n            this.#collectSchemableId(node.table, schemableIds);\n        }\n        else if (AliasNode.is(node) && TableNode.is(node.node)) {\n            this.#collectSchemableId(node.node.table, schemableIds);\n        }\n        else if (ListNode.is(node)) {\n            for (const table of node.items) {\n                this.#collectSchemableIdsFromTableExpr(table, schemableIds);\n            }\n        }\n    }\n    #collectSchemableId(node, schemableIds) {\n        const id = node.identifier.name;\n        if (!this.#schemableIds.has(id) && !this.#ctes.has(id)) {\n            schemableIds.add(id);\n        }\n    }\n    #collectCTEIds(node, ctes) {\n        for (const expr of node.expressions) {\n            const cteId = expr.name.table.table.identifier.name;\n            if (!this.#ctes.has(cteId)) {\n                ctes.add(cteId);\n            }\n        }\n    }\n}\n", "/// <reference types=\"./with-schema-plugin.d.ts\" />\nimport { WithSchemaTransformer } from './with-schema-transformer.js';\nexport class WithSchemaPlugin {\n    #transformer;\n    constructor(schema) {\n        this.#transformer = new WithSchemaTransformer(schema);\n    }\n    transformQuery(args) {\n        return this.#transformer.transformNode(args.node, args.queryId);\n    }\n    async transformResult(args) {\n        return args.result;\n    }\n}\n", "/// <reference types=\"./matched-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const MatchedNode = freeze({\n    is(node) {\n        return node.kind === 'MatchedNode';\n    },\n    create(not, bySource = false) {\n        return freeze({\n            kind: 'MatchedNode',\n            not,\n            bySource,\n        });\n    },\n});\n", "/// <reference types=\"./merge-parser.d.ts\" />\nimport { MatchedNode } from '../operation-node/matched-node.js';\nimport { isOperationNodeSource, } from '../operation-node/operation-node-source.js';\nimport { RawNode } from '../operation-node/raw-node.js';\nimport { WhenNode } from '../operation-node/when-node.js';\nimport { isString } from '../util/object-utils.js';\nimport { parseFilterList, parseReferentialBinaryOperation, parseValueBinaryOperationOrExpression, } from './binary-operation-parser.js';\nexport function parseMergeWhen(type, args, refRight) {\n    return WhenNode.create(parseFilterList([\n        MatchedNode.create(!type.isMatched, type.bySource),\n        ...(args && args.length > 0\n            ? [\n                args.length === 3 && refRight\n                    ? parseReferentialBinaryOperation(args[0], args[1], args[2])\n                    : parseValueBinaryOperationOrExpression(args),\n            ]\n            : []),\n    ], 'and', false));\n}\nexport function parseMergeThen(result) {\n    if (isString(result)) {\n        return RawNode.create([result], []);\n    }\n    if (isOperationNodeSource(result)) {\n        return result.toOperationNode();\n    }\n    return result;\n}\n", "/// <reference types=\"./deferred.d.ts\" />\nexport class Deferred {\n    #promise;\n    #resolve;\n    #reject;\n    constructor() {\n        this.#promise = new Promise((resolve, reject) => {\n            this.#reject = reject;\n            this.#resolve = resolve;\n        });\n    }\n    get promise() {\n        return this.#promise;\n    }\n    resolve = (value) => {\n        if (this.#resolve) {\n            this.#resolve(value);\n        }\n    };\n    reject = (reason) => {\n        if (this.#reject) {\n            this.#reject(reason);\n        }\n    };\n}\n", "/// <reference types=\"./provide-controlled-connection.d.ts\" />\nimport { Deferred } from './deferred.js';\nimport { freeze } from './object-utils.js';\nexport async function provideControlledConnection(connectionProvider) {\n    const connectionDefer = new Deferred();\n    const connectionReleaseDefer = new Deferred();\n    connectionProvider\n        .provideConnection(async (connection) => {\n        connectionDefer.resolve(connection);\n        return await connectionReleaseDefer.promise;\n    })\n        .catch((ex) => connectionDefer.reject(ex));\n    // Create composite of the connection and the release method instead of\n    // modifying the connection or creating a new nesting `DatabaseConnection`.\n    // This way we don't accidentally override any methods of 3rd party\n    // connections and don't return wrapped connections to drivers that\n    // expect a certain specific connection class.\n    return freeze({\n        connection: await connectionDefer.promise,\n        release: connectionReleaseDefer.resolve,\n    });\n}\n", "/// <reference types=\"./query-executor-base.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { provideControlledConnection } from '../util/provide-controlled-connection.js';\nimport { logOnce } from '../util/log-once.js';\nconst NO_PLUGINS = freeze([]);\nexport class QueryExecutorBase {\n    #plugins;\n    constructor(plugins = NO_PLUGINS) {\n        this.#plugins = plugins;\n    }\n    get plugins() {\n        return this.#plugins;\n    }\n    transformQuery(node, queryId) {\n        for (const plugin of this.#plugins) {\n            const transformedNode = plugin.transformQuery({ node, queryId });\n            // We need to do a runtime check here. There is no good way\n            // to write types that enforce this constraint.\n            if (transformedNode.kind === node.kind) {\n                node = transformedNode;\n            }\n            else {\n                throw new Error([\n                    `KyselyPlugin.transformQuery must return a node`,\n                    `of the same kind that was given to it.`,\n                    `The plugin was given a ${node.kind}`,\n                    `but it returned a ${transformedNode.kind}`,\n                ].join(' '));\n            }\n        }\n        return node;\n    }\n    async executeQuery(compiledQuery, queryId) {\n        return await this.provideConnection(async (connection) => {\n            const result = await connection.executeQuery(compiledQuery);\n            if ('numUpdatedOrDeletedRows' in result) {\n                logOnce('kysely:warning: outdated driver/plugin detected! `QueryResult.numUpdatedOrDeletedRows` has been replaced with `QueryResult.numAffectedRows`.');\n            }\n            return await this.#transformResult(result, queryId);\n        });\n    }\n    async *stream(compiledQuery, chunkSize, queryId) {\n        const { connection, release } = await provideControlledConnection(this);\n        try {\n            for await (const result of connection.streamQuery(compiledQuery, chunkSize)) {\n                yield await this.#transformResult(result, queryId);\n            }\n        }\n        finally {\n            release();\n        }\n    }\n    async #transformResult(result, queryId) {\n        for (const plugin of this.#plugins) {\n            result = await plugin.transformResult({ result, queryId });\n        }\n        return result;\n    }\n}\n", "/// <reference types=\"./noop-query-executor.d.ts\" />\nimport { QueryExecutorBase } from './query-executor-base.js';\n/**\n * A {@link QueryExecutor} subclass that can be used when you don't\n * have a {@link QueryCompiler}, {@link ConnectionProvider} or any\n * other needed things to actually execute queries.\n */\nexport class NoopQueryExecutor extends QueryExecutorBase {\n    get adapter() {\n        throw new Error('this query cannot be compiled to SQL');\n    }\n    compileQuery() {\n        throw new Error('this query cannot be compiled to SQL');\n    }\n    provideConnection() {\n        throw new Error('this query cannot be executed');\n    }\n    withConnectionProvider() {\n        throw new Error('this query cannot have a connection provider');\n    }\n    withPlugin(plugin) {\n        return new NoopQueryExecutor([...this.plugins, plugin]);\n    }\n    withPlugins(plugins) {\n        return new NoopQueryExecutor([...this.plugins, ...plugins]);\n    }\n    withPluginAtFront(plugin) {\n        return new NoopQueryExecutor([plugin, ...this.plugins]);\n    }\n    withoutPlugins() {\n        return new NoopQueryExecutor([]);\n    }\n}\nexport const NOOP_QUERY_EXECUTOR = new NoopQueryExecutor();\n", "/// <reference types=\"./merge-result.d.ts\" />\nexport class MergeResult {\n    numChangedRows;\n    constructor(numChangedRows) {\n        this.numChangedRows = numChangedRows;\n    }\n}\n", "/// <reference types=\"./merge-query-builder.d.ts\" />\nimport { InsertQueryNode } from '../operation-node/insert-query-node.js';\nimport { MergeQueryNode } from '../operation-node/merge-query-node.js';\nimport { QueryNode } from '../operation-node/query-node.js';\nimport { UpdateQueryNode } from '../operation-node/update-query-node.js';\nimport { parseInsertExpression, } from '../parser/insert-values-parser.js';\nimport { parseJoin, } from '../parser/join-parser.js';\nimport { parseMergeThen, parseMergeWhen } from '../parser/merge-parser.js';\nimport { parseSelectAll, parseSelectArg, } from '../parser/select-parser.js';\nimport { parseTop } from '../parser/top-parser.js';\nimport { NOOP_QUERY_EXECUTOR } from '../query-executor/noop-query-executor.js';\nimport { freeze } from '../util/object-utils.js';\nimport { MergeResult } from './merge-result.js';\nimport { NoResultError, isNoResultErrorConstructor, } from './no-result-error.js';\nimport { UpdateQueryBuilder } from './update-query-builder.js';\nexport class MergeQueryBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    /**\n     * This can be used to add any additional SQL to the end of the query.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * import { sql } from 'kysely'\n     *\n     * await db\n     *   .mergeInto('person')\n     *   .using('pet', 'pet.owner_id', 'person.id')\n     *   .whenMatched()\n     *   .thenDelete()\n     *   .modifyEnd(sql.raw('-- this is a comment'))\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * merge into \"person\" using \"pet\" on \"pet\".\"owner_id\" = \"person\".\"id\" when matched then delete -- this is a comment\n     * ```\n     */\n    modifyEnd(modifier) {\n        return new MergeQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithEndModifier(this.#props.queryNode, modifier.toOperationNode()),\n        });\n    }\n    /**\n     * Changes a `merge into` query to an `merge top into` query.\n     *\n     * `top` clause is only supported by some dialects like MS SQL Server.\n     *\n     * ### Examples\n     *\n     * Affect 5 matched rows at most:\n     *\n     * ```ts\n     * await db.mergeInto('person')\n     *   .top(5)\n     *   .using('pet', 'person.id', 'pet.owner_id')\n     *   .whenMatched()\n     *   .thenDelete()\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (MS SQL Server):\n     *\n     * ```sql\n     * merge top(5) into \"person\"\n     * using \"pet\" on \"person\".\"id\" = \"pet\".\"owner_id\"\n     * when matched then\n     *   delete\n     * ```\n     *\n     * Affect 50% of matched rows:\n     *\n     * ```ts\n     * await db.mergeInto('person')\n     *   .top(50, 'percent')\n     *   .using('pet', 'person.id', 'pet.owner_id')\n     *   .whenMatched()\n     *   .thenDelete()\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (MS SQL Server):\n     *\n     * ```sql\n     * merge top(50) percent into \"person\"\n     * using \"pet\" on \"person\".\"id\" = \"pet\".\"owner_id\"\n     * when matched then\n     *   delete\n     * ```\n     */\n    top(expression, modifiers) {\n        return new MergeQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithTop(this.#props.queryNode, parseTop(expression, modifiers)),\n        });\n    }\n    using(...args) {\n        return new WheneableMergeQueryBuilder({\n            ...this.#props,\n            queryNode: MergeQueryNode.cloneWithUsing(this.#props.queryNode, parseJoin('Using', args)),\n        });\n    }\n    returning(args) {\n        return new MergeQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithReturning(this.#props.queryNode, parseSelectArg(args)),\n        });\n    }\n    returningAll(table) {\n        return new MergeQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithReturning(this.#props.queryNode, parseSelectAll(table)),\n        });\n    }\n    output(args) {\n        return new MergeQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithOutput(this.#props.queryNode, parseSelectArg(args)),\n        });\n    }\n    outputAll(table) {\n        return new MergeQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithOutput(this.#props.queryNode, parseSelectAll(table)),\n        });\n    }\n}\nexport class WheneableMergeQueryBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    /**\n     * This can be used to add any additional SQL to the end of the query.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * import { sql } from 'kysely'\n     *\n     * await db\n     *   .mergeInto('person')\n     *   .using('pet', 'pet.owner_id', 'person.id')\n     *   .whenMatched()\n     *   .thenDelete()\n     *   .modifyEnd(sql.raw('-- this is a comment'))\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * merge into \"person\" using \"pet\" on \"pet\".\"owner_id\" = \"person\".\"id\" when matched then delete -- this is a comment\n     * ```\n     */\n    modifyEnd(modifier) {\n        return new WheneableMergeQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithEndModifier(this.#props.queryNode, modifier.toOperationNode()),\n        });\n    }\n    /**\n     * See {@link MergeQueryBuilder.top}.\n     */\n    top(expression, modifiers) {\n        return new WheneableMergeQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithTop(this.#props.queryNode, parseTop(expression, modifiers)),\n        });\n    }\n    /**\n     * Adds a simple `when matched` clause to the query.\n     *\n     * For a `when matched` clause with an `and` condition, see {@link whenMatchedAnd}.\n     *\n     * For a simple `when not matched` clause, see {@link whenNotMatched}.\n     *\n     * For a `when not matched` clause with an `and` condition, see {@link whenNotMatchedAnd}.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * const result = await db.mergeInto('person')\n     *   .using('pet', 'person.id', 'pet.owner_id')\n     *   .whenMatched()\n     *   .thenDelete()\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * merge into \"person\"\n     * using \"pet\" on \"person\".\"id\" = \"pet\".\"owner_id\"\n     * when matched then\n     *   delete\n     * ```\n     */\n    whenMatched() {\n        return this.#whenMatched([]);\n    }\n    whenMatchedAnd(...args) {\n        return this.#whenMatched(args);\n    }\n    /**\n     * Adds the `when matched` clause to the query with an `and` condition. But unlike\n     * {@link whenMatchedAnd}, this method accepts a column reference as the 3rd argument.\n     *\n     * This method is similar to {@link SelectQueryBuilder.whereRef}, so see the documentation\n     * for that method for more examples.\n     */\n    whenMatchedAndRef(lhs, op, rhs) {\n        return this.#whenMatched([lhs, op, rhs], true);\n    }\n    #whenMatched(args, refRight) {\n        return new MatchedThenableMergeQueryBuilder({\n            ...this.#props,\n            queryNode: MergeQueryNode.cloneWithWhen(this.#props.queryNode, parseMergeWhen({ isMatched: true }, args, refRight)),\n        });\n    }\n    /**\n     * Adds a simple `when not matched` clause to the query.\n     *\n     * For a `when not matched` clause with an `and` condition, see {@link whenNotMatchedAnd}.\n     *\n     * For a simple `when matched` clause, see {@link whenMatched}.\n     *\n     * For a `when matched` clause with an `and` condition, see {@link whenMatchedAnd}.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * const result = await db.mergeInto('person')\n     *   .using('pet', 'person.id', 'pet.owner_id')\n     *   .whenNotMatched()\n     *   .thenInsertValues({\n     *     first_name: 'John',\n     *     last_name: 'Doe',\n     *   })\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * merge into \"person\"\n     * using \"pet\" on \"person\".\"id\" = \"pet\".\"owner_id\"\n     * when not matched then\n     *   insert (\"first_name\", \"last_name\") values ($1, $2)\n     * ```\n     */\n    whenNotMatched() {\n        return this.#whenNotMatched([]);\n    }\n    whenNotMatchedAnd(...args) {\n        return this.#whenNotMatched(args);\n    }\n    /**\n     * Adds the `when not matched` clause to the query with an `and` condition. But unlike\n     * {@link whenNotMatchedAnd}, this method accepts a column reference as the 3rd argument.\n     *\n     * Unlike {@link whenMatchedAndRef}, you cannot reference columns from the target table.\n     *\n     * This method is similar to {@link SelectQueryBuilder.whereRef}, so see the documentation\n     * for that method for more examples.\n     */\n    whenNotMatchedAndRef(lhs, op, rhs) {\n        return this.#whenNotMatched([lhs, op, rhs], true);\n    }\n    /**\n     * Adds a simple `when not matched by source` clause to the query.\n     *\n     * Supported in MS SQL Server.\n     *\n     * Similar to {@link whenNotMatched}, but returns a {@link MatchedThenableMergeQueryBuilder}.\n     */\n    whenNotMatchedBySource() {\n        return this.#whenNotMatched([], false, true);\n    }\n    whenNotMatchedBySourceAnd(...args) {\n        return this.#whenNotMatched(args, false, true);\n    }\n    /**\n     * Adds the `when not matched by source` clause to the query with an `and` condition.\n     *\n     * Similar to {@link whenNotMatchedAndRef}, but you can reference columns from\n     * the target table, and not from source table and returns a {@link MatchedThenableMergeQueryBuilder}.\n     */\n    whenNotMatchedBySourceAndRef(lhs, op, rhs) {\n        return this.#whenNotMatched([lhs, op, rhs], true, true);\n    }\n    returning(args) {\n        return new WheneableMergeQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithReturning(this.#props.queryNode, parseSelectArg(args)),\n        });\n    }\n    returningAll(table) {\n        return new WheneableMergeQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithReturning(this.#props.queryNode, parseSelectAll(table)),\n        });\n    }\n    output(args) {\n        return new WheneableMergeQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithOutput(this.#props.queryNode, parseSelectArg(args)),\n        });\n    }\n    outputAll(table) {\n        return new WheneableMergeQueryBuilder({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithOutput(this.#props.queryNode, parseSelectAll(table)),\n        });\n    }\n    #whenNotMatched(args, refRight = false, bySource = false) {\n        const props = {\n            ...this.#props,\n            queryNode: MergeQueryNode.cloneWithWhen(this.#props.queryNode, parseMergeWhen({ isMatched: false, bySource }, args, refRight)),\n        };\n        const Builder = bySource\n            ? MatchedThenableMergeQueryBuilder\n            : NotMatchedThenableMergeQueryBuilder;\n        return new Builder(props);\n    }\n    /**\n     * Simply calls the provided function passing `this` as the only argument. `$call` returns\n     * what the provided function returns.\n     *\n     * If you want to conditionally call a method on `this`, see\n     * the {@link $if} method.\n     *\n     * ### Examples\n     *\n     * The next example uses a helper function `log` to log a query:\n     *\n     * ```ts\n     * import type { Compilable } from 'kysely'\n     *\n     * function log<T extends Compilable>(qb: T): T {\n     *   console.log(qb.compile())\n     *   return qb\n     * }\n     *\n     * await db.updateTable('person')\n     *   .set({ first_name: 'John' })\n     *   .$call(log)\n     *   .execute()\n     * ```\n     */\n    $call(func) {\n        return func(this);\n    }\n    /**\n     * Call `func(this)` if `condition` is true.\n     *\n     * This method is especially handy with optional selects. Any `returning` or `returningAll`\n     * method calls add columns as optional fields to the output type when called inside\n     * the `func` callback. This is because we can't know if those selections were actually\n     * made before running the code.\n     *\n     * You can also call any other methods inside the callback.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * import type { PersonUpdate } from 'type-editor' // imaginary module\n     *\n     * async function updatePerson(id: number, updates: PersonUpdate, returnLastName: boolean) {\n     *   return await db\n     *     .updateTable('person')\n     *     .set(updates)\n     *     .where('id', '=', id)\n     *     .returning(['id', 'first_name'])\n     *     .$if(returnLastName, (qb) => qb.returning('last_name'))\n     *     .executeTakeFirstOrThrow()\n     * }\n     * ```\n     *\n     * Any selections added inside the `if` callback will be added as optional fields to the\n     * output type since we can't know if the selections were actually made before running\n     * the code. In the example above the return type of the `updatePerson` function is:\n     *\n     * ```ts\n     * Promise<{\n     *   id: number\n     *   first_name: string\n     *   last_name?: string\n     * }>\n     * ```\n     */\n    $if(condition, func) {\n        if (condition) {\n            return func(this);\n        }\n        return new WheneableMergeQueryBuilder({\n            ...this.#props,\n        });\n    }\n    toOperationNode() {\n        return this.#props.executor.transformQuery(this.#props.queryNode, this.#props.queryId);\n    }\n    compile() {\n        return this.#props.executor.compileQuery(this.toOperationNode(), this.#props.queryId);\n    }\n    /**\n     * Executes the query and returns an array of rows.\n     *\n     * Also see the {@link executeTakeFirst} and {@link executeTakeFirstOrThrow} methods.\n     */\n    async execute() {\n        const compiledQuery = this.compile();\n        const result = await this.#props.executor.executeQuery(compiledQuery, this.#props.queryId);\n        const { adapter } = this.#props.executor;\n        const query = compiledQuery.query;\n        if ((query.returning && adapter.supportsReturning) ||\n            (query.output && adapter.supportsOutput)) {\n            return result.rows;\n        }\n        return [new MergeResult(result.numAffectedRows)];\n    }\n    /**\n     * Executes the query and returns the first result or undefined if\n     * the query returned no result.\n     */\n    async executeTakeFirst() {\n        const [result] = await this.execute();\n        return result;\n    }\n    /**\n     * Executes the query and returns the first result or throws if\n     * the query returned no result.\n     *\n     * By default an instance of {@link NoResultError} is thrown, but you can\n     * provide a custom error class, or callback as the only argument to throw a different\n     * error.\n     */\n    async executeTakeFirstOrThrow(errorConstructor = NoResultError) {\n        const result = await this.executeTakeFirst();\n        if (result === undefined) {\n            const error = isNoResultErrorConstructor(errorConstructor)\n                ? new errorConstructor(this.toOperationNode())\n                : errorConstructor(this.toOperationNode());\n            throw error;\n        }\n        return result;\n    }\n}\nexport class MatchedThenableMergeQueryBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    /**\n     * Performs the `delete` action.\n     *\n     * To perform the `do nothing` action, see {@link thenDoNothing}.\n     *\n     * To perform the `update` action, see {@link thenUpdate} or {@link thenUpdateSet}.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * const result = await db.mergeInto('person')\n     *   .using('pet', 'person.id', 'pet.owner_id')\n     *   .whenMatched()\n     *   .thenDelete()\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * merge into \"person\"\n     * using \"pet\" on \"person\".\"id\" = \"pet\".\"owner_id\"\n     * when matched then\n     *   delete\n     * ```\n     */\n    thenDelete() {\n        return new WheneableMergeQueryBuilder({\n            ...this.#props,\n            queryNode: MergeQueryNode.cloneWithThen(this.#props.queryNode, parseMergeThen('delete')),\n        });\n    }\n    /**\n     * Performs the `do nothing` action.\n     *\n     * This is supported in PostgreSQL.\n     *\n     * To perform the `delete` action, see {@link thenDelete}.\n     *\n     * To perform the `update` action, see {@link thenUpdate} or {@link thenUpdateSet}.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * const result = await db.mergeInto('person')\n     *   .using('pet', 'person.id', 'pet.owner_id')\n     *   .whenMatched()\n     *   .thenDoNothing()\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * merge into \"person\"\n     * using \"pet\" on \"person\".\"id\" = \"pet\".\"owner_id\"\n     * when matched then\n     *   do nothing\n     * ```\n     */\n    thenDoNothing() {\n        return new WheneableMergeQueryBuilder({\n            ...this.#props,\n            queryNode: MergeQueryNode.cloneWithThen(this.#props.queryNode, parseMergeThen('do nothing')),\n        });\n    }\n    /**\n     * Perform an `update` operation with a full-fledged {@link UpdateQueryBuilder}.\n     * This is handy when multiple `set` invocations are needed.\n     *\n     * For a shorthand version of this method, see {@link thenUpdateSet}.\n     *\n     * To perform the `delete` action, see {@link thenDelete}.\n     *\n     * To perform the `do nothing` action, see {@link thenDoNothing}.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * import { sql } from 'kysely'\n     *\n     * const result = await db.mergeInto('person')\n     *   .using('pet', 'person.id', 'pet.owner_id')\n     *   .whenMatched()\n     *   .thenUpdate((ub) => ub\n     *     .set(sql`metadata['has_pets']`, 'Y')\n     *     .set({\n     *       updated_at: new Date().toISOString(),\n     *     })\n     *   )\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * merge into \"person\"\n     * using \"pet\" on \"person\".\"id\" = \"pet\".\"owner_id\"\n     * when matched then\n     *   update set metadata['has_pets'] = $1, \"updated_at\" = $2\n     * ```\n     */\n    thenUpdate(set) {\n        return new WheneableMergeQueryBuilder({\n            ...this.#props,\n            queryNode: MergeQueryNode.cloneWithThen(this.#props.queryNode, parseMergeThen(set(new UpdateQueryBuilder({\n                queryId: this.#props.queryId,\n                executor: NOOP_QUERY_EXECUTOR,\n                queryNode: UpdateQueryNode.createWithoutTable(),\n            })))),\n        });\n    }\n    thenUpdateSet(...args) {\n        // @ts-ignore not sure how to type this so it won't complain about set(...args).\n        return this.thenUpdate((ub) => ub.set(...args));\n    }\n}\nexport class NotMatchedThenableMergeQueryBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    /**\n     * Performs the `do nothing` action.\n     *\n     * This is supported in PostgreSQL.\n     *\n     * To perform the `insert` action, see {@link thenInsertValues}.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * const result = await db.mergeInto('person')\n     *   .using('pet', 'person.id', 'pet.owner_id')\n     *   .whenNotMatched()\n     *   .thenDoNothing()\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * merge into \"person\"\n     * using \"pet\" on \"person\".\"id\" = \"pet\".\"owner_id\"\n     * when not matched then\n     *   do nothing\n     * ```\n     */\n    thenDoNothing() {\n        return new WheneableMergeQueryBuilder({\n            ...this.#props,\n            queryNode: MergeQueryNode.cloneWithThen(this.#props.queryNode, parseMergeThen('do nothing')),\n        });\n    }\n    thenInsertValues(insert) {\n        const [columns, values] = parseInsertExpression(insert);\n        return new WheneableMergeQueryBuilder({\n            ...this.#props,\n            queryNode: MergeQueryNode.cloneWithThen(this.#props.queryNode, parseMergeThen(InsertQueryNode.cloneWith(InsertQueryNode.createWithoutInto(), {\n                columns,\n                values,\n            }))),\n        });\n    }\n}\n", "/// <reference types=\"./query-creator.d.ts\" />\nimport { createSelectQueryBuilder, } from './query-builder/select-query-builder.js';\nimport { InsertQueryBuilder } from './query-builder/insert-query-builder.js';\nimport { DeleteQueryBuilder } from './query-builder/delete-query-builder.js';\nimport { UpdateQueryBuilder } from './query-builder/update-query-builder.js';\nimport { DeleteQueryNode } from './operation-node/delete-query-node.js';\nimport { InsertQueryNode } from './operation-node/insert-query-node.js';\nimport { SelectQueryNode } from './operation-node/select-query-node.js';\nimport { UpdateQueryNode } from './operation-node/update-query-node.js';\nimport { parseTable, parseTableExpressionOrList, parseAliasedTable, } from './parser/table-parser.js';\nimport { parseCommonTableExpression, } from './parser/with-parser.js';\nimport { WithNode } from './operation-node/with-node.js';\nimport { createQueryId } from './util/query-id.js';\nimport { WithSchemaPlugin } from './plugin/with-schema/with-schema-plugin.js';\nimport { freeze } from './util/object-utils.js';\nimport { parseSelectArg, } from './parser/select-parser.js';\nimport { MergeQueryBuilder } from './query-builder/merge-query-builder.js';\nimport { MergeQueryNode } from './operation-node/merge-query-node.js';\nexport class QueryCreator {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    /**\n     * Creates a `select` query builder for the given table or tables.\n     *\n     * The tables passed to this method are built as the query's `from` clause.\n     *\n     * ### Examples\n     *\n     * Create a select query for one table:\n     *\n     * ```ts\n     * db.selectFrom('person').selectAll()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * select * from \"person\"\n     * ```\n     *\n     * Create a select query for one table with an alias:\n     *\n     * ```ts\n     * const persons = await db.selectFrom('person as p')\n     *   .select(['p.id', 'first_name'])\n     *   .execute()\n     *\n     * console.log(persons[0].id)\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * select \"p\".\"id\", \"first_name\" from \"person\" as \"p\"\n     * ```\n     *\n     * Create a select query from a subquery:\n     *\n     * ```ts\n     * const persons = await db.selectFrom(\n     *     (eb) => eb.selectFrom('person').select('person.id as identifier').as('p')\n     *   )\n     *   .select('p.identifier')\n     *   .execute()\n     *\n     * console.log(persons[0].identifier)\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * select \"p\".\"identifier\",\n     * from (\n     *   select \"person\".\"id\" as \"identifier\" from \"person\"\n     * ) as p\n     * ```\n     *\n     * Create a select query from raw sql:\n     *\n     * ```ts\n     * import { sql } from 'kysely'\n     *\n     * const items = await db\n     *   .selectFrom(sql<{ one: number }>`(select 1 as one)`.as('q'))\n     *   .select('q.one')\n     *   .execute()\n     *\n     * console.log(items[0].one)\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * select \"q\".\"one\",\n     * from (\n     *   select 1 as one\n     * ) as q\n     * ```\n     *\n     * When you use the `sql` tag you need to also provide the result type of the\n     * raw snippet / query so that Kysely can figure out what columns are\n     * available for the rest of the query.\n     *\n     * The `selectFrom` method also accepts an array for multiple tables. All\n     * the above examples can also be used in an array.\n     *\n     * ```ts\n     * import { sql } from 'kysely'\n     *\n     * const items = await db.selectFrom([\n     *     'person as p',\n     *     db.selectFrom('pet').select('pet.species').as('a'),\n     *     sql<{ one: number }>`(select 1 as one)`.as('q')\n     *   ])\n     *   .select(['p.id', 'a.species', 'q.one'])\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * select \"p\".id, \"a\".\"species\", \"q\".\"one\"\n     * from\n     *   \"person\" as \"p\",\n     *   (select \"pet\".\"species\" from \"pet\") as a,\n     *   (select 1 as one) as \"q\"\n     * ```\n     */\n    selectFrom(from) {\n        return createSelectQueryBuilder({\n            queryId: createQueryId(),\n            executor: this.#props.executor,\n            queryNode: SelectQueryNode.createFrom(parseTableExpressionOrList(from), this.#props.withNode),\n        });\n    }\n    selectNoFrom(selection) {\n        return createSelectQueryBuilder({\n            queryId: createQueryId(),\n            executor: this.#props.executor,\n            queryNode: SelectQueryNode.cloneWithSelections(SelectQueryNode.create(this.#props.withNode), parseSelectArg(selection)),\n        });\n    }\n    /**\n     * Creates an insert query.\n     *\n     * The return value of this query is an instance of {@link InsertResult}. {@link InsertResult}\n     * has the {@link InsertResult.insertId | insertId} field that holds the auto incremented id of\n     * the inserted row if the db returned one.\n     *\n     * See the {@link InsertQueryBuilder.values | values} method for more info and examples. Also see\n     * the {@link ReturningInterface.returning | returning} method for a way to return columns\n     * on supported databases like PostgreSQL.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * const result = await db\n     *   .insertInto('person')\n     *   .values({\n     *     first_name: 'Jennifer',\n     *     last_name: 'Aniston'\n     *   })\n     *   .executeTakeFirst()\n     *\n     * console.log(result.insertId)\n     * ```\n     *\n     * Some databases like PostgreSQL support the `returning` method:\n     *\n     * ```ts\n     * const { id } = await db\n     *   .insertInto('person')\n     *   .values({\n     *     first_name: 'Jennifer',\n     *     last_name: 'Aniston'\n     *   })\n     *   .returning('id')\n     *   .executeTakeFirstOrThrow()\n     * ```\n     */\n    insertInto(table) {\n        return new InsertQueryBuilder({\n            queryId: createQueryId(),\n            executor: this.#props.executor,\n            queryNode: InsertQueryNode.create(parseTable(table), this.#props.withNode),\n        });\n    }\n    /**\n     * Creates a \"replace into\" query.\n     *\n     * This is only supported by some dialects like MySQL or SQLite.\n     *\n     * Similar to MySQL's {@link InsertQueryBuilder.onDuplicateKeyUpdate} that deletes\n     * and inserts values on collision instead of updating existing rows.\n     *\n     * An alias of SQLite's {@link InsertQueryBuilder.orReplace}.\n     *\n     * The return value of this query is an instance of {@link InsertResult}. {@link InsertResult}\n     * has the {@link InsertResult.insertId | insertId} field that holds the auto incremented id of\n     * the inserted row if the db returned one.\n     *\n     * See the {@link InsertQueryBuilder.values | values} method for more info and examples.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * const result = await db\n     *   .replaceInto('person')\n     *   .values({\n     *     first_name: 'Jennifer',\n     *     last_name: 'Aniston'\n     *   })\n     *   .executeTakeFirstOrThrow()\n     *\n     * console.log(result.insertId)\n     * ```\n     *\n     * The generated SQL (MySQL):\n     *\n     * ```sql\n     * replace into `person` (`first_name`, `last_name`) values (?, ?)\n     * ```\n     */\n    replaceInto(table) {\n        return new InsertQueryBuilder({\n            queryId: createQueryId(),\n            executor: this.#props.executor,\n            queryNode: InsertQueryNode.create(parseTable(table), this.#props.withNode, true),\n        });\n    }\n    /**\n     * Creates a delete query.\n     *\n     * See the {@link DeleteQueryBuilder.where} method for examples on how to specify\n     * a where clause for the delete operation.\n     *\n     * The return value of the query is an instance of {@link DeleteResult}.\n     *\n     * ### Examples\n     *\n     * <!-- siteExample(\"delete\", \"Single row\", 10) -->\n     *\n     * Delete a single row:\n     *\n     * ```ts\n     * const result = await db\n     *   .deleteFrom('person')\n     *   .where('person.id', '=', 1)\n     *   .executeTakeFirst()\n     *\n     * console.log(result.numDeletedRows)\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * delete from \"person\" where \"person\".\"id\" = $1\n     * ```\n     *\n     * Some databases such as MySQL support deleting from multiple tables:\n     *\n     * ```ts\n     * const result = await db\n     *   .deleteFrom(['person', 'pet'])\n     *   .using('person')\n     *   .innerJoin('pet', 'pet.owner_id', 'person.id')\n     *   .where('person.id', '=', 1)\n     *   .executeTakeFirst()\n     * ```\n     *\n     * The generated SQL (MySQL):\n     *\n     * ```sql\n     * delete from `person`, `pet`\n     * using `person`\n     * inner join `pet` on `pet`.`owner_id` = `person`.`id`\n     * where `person`.`id` = ?\n     * ```\n     */\n    deleteFrom(from) {\n        return new DeleteQueryBuilder({\n            queryId: createQueryId(),\n            executor: this.#props.executor,\n            queryNode: DeleteQueryNode.create(parseTableExpressionOrList(from), this.#props.withNode),\n        });\n    }\n    /**\n     * Creates an update query.\n     *\n     * See the {@link UpdateQueryBuilder.where} method for examples on how to specify\n     * a where clause for the update operation.\n     *\n     * See the {@link UpdateQueryBuilder.set} method for examples on how to\n     * specify the updates.\n     *\n     * The return value of the query is an {@link UpdateResult}.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * const result = await db\n     *   .updateTable('person')\n     *   .set({ first_name: 'Jennifer' })\n     *   .where('person.id', '=', 1)\n     *   .executeTakeFirst()\n     *\n     * console.log(result.numUpdatedRows)\n     * ```\n     */\n    updateTable(tables) {\n        return new UpdateQueryBuilder({\n            queryId: createQueryId(),\n            executor: this.#props.executor,\n            queryNode: UpdateQueryNode.create(parseTableExpressionOrList(tables), this.#props.withNode),\n        });\n    }\n    /**\n     * Creates a merge query.\n     *\n     * The return value of the query is a {@link MergeResult}.\n     *\n     * See the {@link MergeQueryBuilder.using} method for examples on how to specify\n     * the other table.\n     *\n     * ### Examples\n     *\n     * <!-- siteExample(\"merge\", \"Source row existence\", 10) -->\n     *\n     * Update a target column based on the existence of a source row:\n     *\n     * ```ts\n     * const result = await db\n     *   .mergeInto('person as target')\n     *   .using('pet as source', 'source.owner_id', 'target.id')\n     *   .whenMatchedAnd('target.has_pets', '!=', 'Y')\n     *   .thenUpdateSet({ has_pets: 'Y' })\n     *   .whenNotMatchedBySourceAnd('target.has_pets', '=', 'Y')\n     *   .thenUpdateSet({ has_pets: 'N' })\n     *   .executeTakeFirstOrThrow()\n     *\n     * console.log(result.numChangedRows)\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * merge into \"person\"\n     * using \"pet\"\n     * on \"pet\".\"owner_id\" = \"person\".\"id\"\n     * when matched and \"has_pets\" != $1\n     * then update set \"has_pets\" = $2\n     * when not matched by source and \"has_pets\" = $3\n     * then update set \"has_pets\" = $4\n     * ```\n     *\n     * <!-- siteExample(\"merge\", \"Temporary changes table\", 20) -->\n     *\n     * Merge new entries from a temporary changes table:\n     *\n     * ```ts\n     * const result = await db\n     *   .mergeInto('wine as target')\n     *   .using(\n     *     'wine_stock_change as source',\n     *     'source.wine_name',\n     *     'target.name',\n     *   )\n     *   .whenNotMatchedAnd('source.stock_delta', '>', 0)\n     *   .thenInsertValues(({ ref }) => ({\n     *     name: ref('source.wine_name'),\n     *     stock: ref('source.stock_delta'),\n     *   }))\n     *   .whenMatchedAnd(\n     *     (eb) => eb('target.stock', '+', eb.ref('source.stock_delta')),\n     *     '>',\n     *     0,\n     *   )\n     *   .thenUpdateSet('stock', (eb) =>\n     *     eb('target.stock', '+', eb.ref('source.stock_delta')),\n     *   )\n     *   .whenMatched()\n     *   .thenDelete()\n     *   .executeTakeFirstOrThrow()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * merge into \"wine\" as \"target\"\n     * using \"wine_stock_change\" as \"source\"\n     * on \"source\".\"wine_name\" = \"target\".\"name\"\n     * when not matched and \"source\".\"stock_delta\" > $1\n     * then insert (\"name\", \"stock\") values (\"source\".\"wine_name\", \"source\".\"stock_delta\")\n     * when matched and \"target\".\"stock\" + \"source\".\"stock_delta\" > $2\n     * then update set \"stock\" = \"target\".\"stock\" + \"source\".\"stock_delta\"\n     * when matched\n     * then delete\n     * ```\n     */\n    mergeInto(targetTable) {\n        return new MergeQueryBuilder({\n            queryId: createQueryId(),\n            executor: this.#props.executor,\n            queryNode: MergeQueryNode.create(parseAliasedTable(targetTable), this.#props.withNode),\n        });\n    }\n    /**\n     * Creates a `with` query (Common Table Expression).\n     *\n     * ### Examples\n     *\n     * <!-- siteExample(\"cte\", \"Simple selects\", 10) -->\n     *\n     * Common table expressions (CTE) are a great way to modularize complex queries.\n     * Essentially they allow you to run multiple separate queries within a\n     * single roundtrip to the DB.\n     *\n     * Since CTEs are a part of the main query, query optimizers inside DB\n     * engines are able to optimize the overall query. For example, postgres\n     * is able to inline the CTEs inside the using queries if it decides it's\n     * faster.\n     *\n     * ```ts\n     * const result = await db\n     *   // Create a CTE called `jennifers` that selects all\n     *   // persons named 'Jennifer'.\n     *   .with('jennifers', (db) => db\n     *     .selectFrom('person')\n     *     .where('first_name', '=', 'Jennifer')\n     *     .select(['id', 'age'])\n     *   )\n     *   // Select all rows from the `jennifers` CTE and\n     *   // further filter it.\n     *   .with('adult_jennifers', (db) => db\n     *     .selectFrom('jennifers')\n     *     .where('age', '>', 18)\n     *     .select(['id', 'age'])\n     *   )\n     *   // Finally select all adult jennifers that are\n     *   // also younger than 60.\n     *   .selectFrom('adult_jennifers')\n     *   .where('age', '<', 60)\n     *   .selectAll()\n     *   .execute()\n     * ```\n     *\n     * <!-- siteExample(\"cte\", \"Inserts, updates and deletions\", 20) -->\n     *\n     * Some databases like postgres also allow you to run other queries than selects\n     * in CTEs. On these databases CTEs are extremely powerful:\n     *\n     * ```ts\n     * const result = await db\n     *   .with('new_person', (db) => db\n     *     .insertInto('person')\n     *     .values({\n     *       first_name: 'Jennifer',\n     *       age: 35,\n     *     })\n     *     .returning('id')\n     *   )\n     *   .with('new_pet', (db) => db\n     *     .insertInto('pet')\n     *     .values({\n     *       name: 'Doggo',\n     *       species: 'dog',\n     *       is_favorite: true,\n     *       // Use the id of the person we just inserted.\n     *       owner_id: db\n     *         .selectFrom('new_person')\n     *         .select('id')\n     *     })\n     *     .returning('id')\n     *   )\n     *   .selectFrom(['new_person', 'new_pet'])\n     *   .select([\n     *     'new_person.id as person_id',\n     *     'new_pet.id as pet_id'\n     *   ])\n     *   .execute()\n     * ```\n     *\n     * The CTE name can optionally specify column names in addition to\n     * a name. In that case Kysely requires the expression to retun\n     * rows with the same columns.\n     *\n     * ```ts\n     * await db\n     *   .with('jennifers(id, age)', (db) => db\n     *     .selectFrom('person')\n     *     .where('first_name', '=', 'Jennifer')\n     *     // This is ok since we return columns with the same\n     *     // names as specified by `jennifers(id, age)`.\n     *     .select(['id', 'age'])\n     *   )\n     *   .selectFrom('jennifers')\n     *   .selectAll()\n     *   .execute()\n     * ```\n     *\n     * The first argument can also be a callback. The callback is passed\n     * a `CTEBuilder` instance that can be used to configure the CTE:\n     *\n     * ```ts\n     * await db\n     *   .with(\n     *     (cte) => cte('jennifers').materialized(),\n     *     (db) => db\n     *       .selectFrom('person')\n     *       .where('first_name', '=', 'Jennifer')\n     *       .select(['id', 'age'])\n     *   )\n     *   .selectFrom('jennifers')\n     *   .selectAll()\n     *   .execute()\n     * ```\n     */\n    with(nameOrBuilder, expression) {\n        const cte = parseCommonTableExpression(nameOrBuilder, expression);\n        return new QueryCreator({\n            ...this.#props,\n            withNode: this.#props.withNode\n                ? WithNode.cloneWithExpression(this.#props.withNode, cte)\n                : WithNode.create(cte),\n        });\n    }\n    /**\n     * Creates a recursive `with` query (Common Table Expression).\n     *\n     * Note that recursiveness is a property of the whole `with` statement.\n     * You cannot have recursive and non-recursive CTEs in a same `with` statement.\n     * Therefore the recursiveness is determined by the **first** `with` or\n     * `withRecusive` call you make.\n     *\n     * See the {@link with} method for examples and more documentation.\n     */\n    withRecursive(nameOrBuilder, expression) {\n        const cte = parseCommonTableExpression(nameOrBuilder, expression);\n        return new QueryCreator({\n            ...this.#props,\n            withNode: this.#props.withNode\n                ? WithNode.cloneWithExpression(this.#props.withNode, cte)\n                : WithNode.create(cte, { recursive: true }),\n        });\n    }\n    /**\n     * Returns a copy of this query creator instance with the given plugin installed.\n     */\n    withPlugin(plugin) {\n        return new QueryCreator({\n            ...this.#props,\n            executor: this.#props.executor.withPlugin(plugin),\n        });\n    }\n    /**\n     * Returns a copy of this query creator instance without any plugins.\n     */\n    withoutPlugins() {\n        return new QueryCreator({\n            ...this.#props,\n            executor: this.#props.executor.withoutPlugins(),\n        });\n    }\n    /**\n     * Sets the schema to be used for all table references that don't explicitly\n     * specify a schema.\n     *\n     * This only affects the query created through the builder returned from\n     * this method and doesn't modify the `db` instance.\n     *\n     * See [this recipe](https://github.com/kysely-org/kysely/blob/master/site/docs/recipes/0007-schemas.md)\n     * for a more detailed explanation.\n     *\n     * ### Examples\n     *\n     * ```\n     * await db\n     *   .withSchema('mammals')\n     *   .selectFrom('pet')\n     *   .selectAll()\n     *   .innerJoin('public.person', 'public.person.id', 'pet.owner_id')\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * select * from \"mammals\".\"pet\"\n     * inner join \"public\".\"person\"\n     * on \"public\".\"person\".\"id\" = \"mammals\".\"pet\".\"owner_id\"\n     * ```\n     *\n     * `withSchema` is smart enough to not add schema for aliases,\n     * common table expressions or other places where the schema\n     * doesn't belong to:\n     *\n     * ```\n     * await db\n     *   .withSchema('mammals')\n     *   .selectFrom('pet as p')\n     *   .select('p.name')\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * select \"p\".\"name\" from \"mammals\".\"pet\" as \"p\"\n     * ```\n     */\n    withSchema(schema) {\n        return new QueryCreator({\n            ...this.#props,\n            executor: this.#props.executor.withPluginAtFront(new WithSchemaPlugin(schema)),\n        });\n    }\n}\n", "/// <reference types=\"./parse-utils.d.ts\" />\nimport { JoinNode } from '../operation-node/join-node.js';\nimport { OverNode } from '../operation-node/over-node.js';\nimport { SelectQueryNode } from '../operation-node/select-query-node.js';\nimport { JoinBuilder } from '../query-builder/join-builder.js';\nimport { OverBuilder } from '../query-builder/over-builder.js';\nimport { createSelectQueryBuilder as newSelectQueryBuilder, } from '../query-builder/select-query-builder.js';\nimport { QueryCreator } from '../query-creator.js';\nimport { NOOP_QUERY_EXECUTOR } from '../query-executor/noop-query-executor.js';\nimport { createQueryId } from '../util/query-id.js';\nimport { parseTableExpression, parseTableExpressionOrList, } from './table-parser.js';\nexport function createSelectQueryBuilder() {\n    return newSelectQueryBuilder({\n        queryId: createQueryId(),\n        executor: NOOP_QUERY_EXECUTOR,\n        queryNode: SelectQueryNode.createFrom(parseTableExpressionOrList([])),\n    });\n}\nexport function createQueryCreator() {\n    return new QueryCreator({\n        executor: NOOP_QUERY_EXECUTOR,\n    });\n}\nexport function createJoinBuilder(joinType, table) {\n    return new JoinBuilder({\n        joinNode: JoinNode.create(joinType, parseTableExpression(table)),\n    });\n}\nexport function createOverBuilder() {\n    return new OverBuilder({\n        overNode: OverNode.create(),\n    });\n}\n", "/// <reference types=\"./join-parser.d.ts\" />\nimport { JoinNode } from '../operation-node/join-node.js';\nimport { parseReferentialBinaryOperation } from './binary-operation-parser.js';\nimport { createJoinBuilder } from './parse-utils.js';\nimport { parseTableExpression, } from './table-parser.js';\nexport function parseJoin(joinType, args) {\n    if (args.length === 3) {\n        return parseSingleOnJoin(joinType, args[0], args[1], args[2]);\n    }\n    else if (args.length === 2) {\n        return parseCallbackJoin(joinType, args[0], args[1]);\n    }\n    else if (args.length === 1) {\n        return parseOnlessJoin(joinType, args[0]);\n    }\n    else {\n        throw new Error('not implemented');\n    }\n}\nfunction parseCallbackJoin(joinType, from, callback) {\n    return callback(createJoinBuilder(joinType, from)).toOperationNode();\n}\nfunction parseSingleOnJoin(joinType, from, lhsColumn, rhsColumn) {\n    return JoinNode.createWithOn(joinType, parseTableExpression(from), parseReferentialBinaryOperation(lhsColumn, '=', rhsColumn));\n}\nfunction parseOnlessJoin(joinType, from) {\n    return JoinNode.create(joinType, parseTableExpression(from));\n}\n", "/// <reference types=\"./offset-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const OffsetNode = freeze({\n    is(node) {\n        return node.kind === 'OffsetNode';\n    },\n    create(offset) {\n        return freeze({\n            kind: 'OffsetNode',\n            offset,\n        });\n    },\n});\n", "/// <reference types=\"./group-by-item-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const GroupByItemNode = freeze({\n    is(node) {\n        return node.kind === 'GroupByItemNode';\n    },\n    create(groupBy) {\n        return freeze({\n            kind: 'GroupByItemNode',\n            groupBy,\n        });\n    },\n});\n", "/// <reference types=\"./group-by-parser.d.ts\" />\nimport { GroupByItemNode } from '../operation-node/group-by-item-node.js';\nimport { expressionBuilder, } from '../expression/expression-builder.js';\nimport { isFunction } from '../util/object-utils.js';\nimport { parseReferenceExpressionOrList, } from './reference-parser.js';\nexport function parseGroupBy(groupBy) {\n    groupBy = isFunction(groupBy) ? groupBy(expressionBuilder()) : groupBy;\n    return parseReferenceExpressionOrList(groupBy).map(GroupByItemNode.create);\n}\n", "/// <reference types=\"./set-operation-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const SetOperationNode = freeze({\n    is(node) {\n        return node.kind === 'SetOperationNode';\n    },\n    create(operator, expression, all) {\n        return freeze({\n            kind: 'SetOperationNode',\n            operator,\n            expression,\n            all,\n        });\n    },\n});\n", "/// <reference types=\"./set-operation-parser.d.ts\" />\nimport { createExpressionBuilder, } from '../expression/expression-builder.js';\nimport { SetOperationNode, } from '../operation-node/set-operation-node.js';\nimport { isFunction, isReadonlyArray } from '../util/object-utils.js';\nimport { parseExpression } from './expression-parser.js';\nexport function parseSetOperations(operator, expression, all) {\n    if (isFunction(expression)) {\n        expression = expression(createExpressionBuilder());\n    }\n    if (!isReadonlyArray(expression)) {\n        expression = [expression];\n    }\n    return expression.map((expr) => SetOperationNode.create(operator, parseExpression(expr), all));\n}\n", "/// <reference types=\"./expression-wrapper.d.ts\" />\nimport { AliasNode } from '../operation-node/alias-node.js';\nimport { AndNode } from '../operation-node/and-node.js';\nimport { IdentifierNode } from '../operation-node/identifier-node.js';\nimport { isOperationNodeSource } from '../operation-node/operation-node-source.js';\nimport { OrNode } from '../operation-node/or-node.js';\nimport { ParensNode } from '../operation-node/parens-node.js';\nimport { parseValueBinaryOperationOrExpression, } from '../parser/binary-operation-parser.js';\nexport class ExpressionWrapper {\n    #node;\n    constructor(node) {\n        this.#node = node;\n    }\n    /** @private */\n    get expressionType() {\n        return undefined;\n    }\n    as(alias) {\n        return new AliasedExpressionWrapper(this, alias);\n    }\n    or(...args) {\n        return new OrWrapper(OrNode.create(this.#node, parseValueBinaryOperationOrExpression(args)));\n    }\n    and(...args) {\n        return new AndWrapper(AndNode.create(this.#node, parseValueBinaryOperationOrExpression(args)));\n    }\n    /**\n     * Change the output type of the expression.\n     *\n     * This method call doesn't change the SQL in any way. This methods simply\n     * returns a copy of this `ExpressionWrapper` with a new output type.\n     */\n    $castTo() {\n        return new ExpressionWrapper(this.#node);\n    }\n    /**\n     * Omit null from the expression's type.\n     *\n     * This function can be useful in cases where you know an expression can't be\n     * null, but Kysely is unable to infer it.\n     *\n     * This method call doesn't change the SQL in any way. This methods simply\n     * returns a copy of `this` with a new output type.\n     */\n    $notNull() {\n        return new ExpressionWrapper(this.#node);\n    }\n    toOperationNode() {\n        return this.#node;\n    }\n}\nexport class AliasedExpressionWrapper {\n    #expr;\n    #alias;\n    constructor(expr, alias) {\n        this.#expr = expr;\n        this.#alias = alias;\n    }\n    /** @private */\n    get expression() {\n        return this.#expr;\n    }\n    /** @private */\n    get alias() {\n        return this.#alias;\n    }\n    toOperationNode() {\n        return AliasNode.create(this.#expr.toOperationNode(), isOperationNodeSource(this.#alias)\n            ? this.#alias.toOperationNode()\n            : IdentifierNode.create(this.#alias));\n    }\n}\nexport class OrWrapper {\n    #node;\n    constructor(node) {\n        this.#node = node;\n    }\n    /** @private */\n    get expressionType() {\n        return undefined;\n    }\n    as(alias) {\n        return new AliasedExpressionWrapper(this, alias);\n    }\n    or(...args) {\n        return new OrWrapper(OrNode.create(this.#node, parseValueBinaryOperationOrExpression(args)));\n    }\n    /**\n     * Change the output type of the expression.\n     *\n     * This method call doesn't change the SQL in any way. This methods simply\n     * returns a copy of this `OrWrapper` with a new output type.\n     */\n    $castTo() {\n        return new OrWrapper(this.#node);\n    }\n    toOperationNode() {\n        return ParensNode.create(this.#node);\n    }\n}\nexport class AndWrapper {\n    #node;\n    constructor(node) {\n        this.#node = node;\n    }\n    /** @private */\n    get expressionType() {\n        return undefined;\n    }\n    as(alias) {\n        return new AliasedExpressionWrapper(this, alias);\n    }\n    and(...args) {\n        return new AndWrapper(AndNode.create(this.#node, parseValueBinaryOperationOrExpression(args)));\n    }\n    /**\n     * Change the output type of the expression.\n     *\n     * This method call doesn't change the SQL in any way. This methods simply\n     * returns a copy of this `AndWrapper` with a new output type.\n     */\n    $castTo() {\n        return new AndWrapper(this.#node);\n    }\n    toOperationNode() {\n        return ParensNode.create(this.#node);\n    }\n}\n", "/// <reference types=\"./fetch-node.d.ts\" />\nimport { ValueNode } from './value-node.js';\n/**\n * @internal\n */\nexport const FetchNode = {\n    is(node) {\n        return node.kind === 'FetchNode';\n    },\n    create(rowCount, modifier) {\n        return {\n            kind: 'FetchNode',\n            rowCount: ValueNode.create(rowCount),\n            modifier,\n        };\n    },\n};\n", "/// <reference types=\"./fetch-parser.d.ts\" />\nimport { FetchNode } from '../operation-node/fetch-node.js';\nimport { isBigInt, isNumber } from '../util/object-utils.js';\nexport function parseFetch(rowCount, modifier) {\n    if (!isNumber(rowCount) && !isBigInt(rowCount)) {\n        throw new Error(`Invalid fetch row count: ${rowCount}`);\n    }\n    if (!isFetchModifier(modifier)) {\n        throw new Error(`Invalid fetch modifier: ${modifier}`);\n    }\n    return FetchNode.create(rowCount, modifier);\n}\nfunction isFetchModifier(value) {\n    return value === 'only' || value === 'with ties';\n}\n", "/// <reference types=\"./select-query-builder.d.ts\" />\nimport { AliasNode } from '../operation-node/alias-node.js';\nimport { SelectModifierNode } from '../operation-node/select-modifier-node.js';\nimport { parseJoin, } from '../parser/join-parser.js';\nimport { parseTable } from '../parser/table-parser.js';\nimport { parseSelectArg, parseSelectAll, } from '../parser/select-parser.js';\nimport { parseReferenceExpressionOrList, } from '../parser/reference-parser.js';\nimport { SelectQueryNode } from '../operation-node/select-query-node.js';\nimport { QueryNode } from '../operation-node/query-node.js';\nimport { parseOrderBy, } from '../parser/order-by-parser.js';\nimport { LimitNode } from '../operation-node/limit-node.js';\nimport { OffsetNode } from '../operation-node/offset-node.js';\nimport { asArray, freeze } from '../util/object-utils.js';\nimport { parseGroupBy } from '../parser/group-by-parser.js';\nimport { isNoResultErrorConstructor, NoResultError, } from './no-result-error.js';\nimport { IdentifierNode } from '../operation-node/identifier-node.js';\nimport { parseSetOperations, } from '../parser/set-operation-parser.js';\nimport { parseValueBinaryOperationOrExpression, parseReferentialBinaryOperation, } from '../parser/binary-operation-parser.js';\nimport { ExpressionWrapper } from '../expression/expression-wrapper.js';\nimport { parseValueExpression, } from '../parser/value-parser.js';\nimport { parseFetch } from '../parser/fetch-parser.js';\nimport { parseTop } from '../parser/top-parser.js';\nclass SelectQueryBuilderImpl {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    get expressionType() {\n        return undefined;\n    }\n    get isSelectQueryBuilder() {\n        return true;\n    }\n    where(...args) {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithWhere(this.#props.queryNode, parseValueBinaryOperationOrExpression(args)),\n        });\n    }\n    whereRef(lhs, op, rhs) {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithWhere(this.#props.queryNode, parseReferentialBinaryOperation(lhs, op, rhs)),\n        });\n    }\n    having(...args) {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: SelectQueryNode.cloneWithHaving(this.#props.queryNode, parseValueBinaryOperationOrExpression(args)),\n        });\n    }\n    havingRef(lhs, op, rhs) {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: SelectQueryNode.cloneWithHaving(this.#props.queryNode, parseReferentialBinaryOperation(lhs, op, rhs)),\n        });\n    }\n    select(selection) {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: SelectQueryNode.cloneWithSelections(this.#props.queryNode, parseSelectArg(selection)),\n        });\n    }\n    distinctOn(selection) {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: SelectQueryNode.cloneWithDistinctOn(this.#props.queryNode, parseReferenceExpressionOrList(selection)),\n        });\n    }\n    modifyFront(modifier) {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: SelectQueryNode.cloneWithFrontModifier(this.#props.queryNode, SelectModifierNode.createWithExpression(modifier.toOperationNode())),\n        });\n    }\n    modifyEnd(modifier) {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithEndModifier(this.#props.queryNode, SelectModifierNode.createWithExpression(modifier.toOperationNode())),\n        });\n    }\n    distinct() {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: SelectQueryNode.cloneWithFrontModifier(this.#props.queryNode, SelectModifierNode.create('Distinct')),\n        });\n    }\n    forUpdate(of) {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithEndModifier(this.#props.queryNode, SelectModifierNode.create('ForUpdate', of ? asArray(of).map(parseTable) : undefined)),\n        });\n    }\n    forShare(of) {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithEndModifier(this.#props.queryNode, SelectModifierNode.create('ForShare', of ? asArray(of).map(parseTable) : undefined)),\n        });\n    }\n    forKeyShare(of) {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithEndModifier(this.#props.queryNode, SelectModifierNode.create('ForKeyShare', of ? asArray(of).map(parseTable) : undefined)),\n        });\n    }\n    forNoKeyUpdate(of) {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithEndModifier(this.#props.queryNode, SelectModifierNode.create('ForNoKeyUpdate', of ? asArray(of).map(parseTable) : undefined)),\n        });\n    }\n    skipLocked() {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithEndModifier(this.#props.queryNode, SelectModifierNode.create('SkipLocked')),\n        });\n    }\n    noWait() {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithEndModifier(this.#props.queryNode, SelectModifierNode.create('NoWait')),\n        });\n    }\n    selectAll(table) {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: SelectQueryNode.cloneWithSelections(this.#props.queryNode, parseSelectAll(table)),\n        });\n    }\n    innerJoin(...args) {\n        return this.#join('InnerJoin', args);\n    }\n    leftJoin(...args) {\n        return this.#join('LeftJoin', args);\n    }\n    rightJoin(...args) {\n        return this.#join('RightJoin', args);\n    }\n    fullJoin(...args) {\n        return this.#join('FullJoin', args);\n    }\n    crossJoin(...args) {\n        return this.#join('CrossJoin', args);\n    }\n    innerJoinLateral(...args) {\n        return this.#join('LateralInnerJoin', args);\n    }\n    leftJoinLateral(...args) {\n        return this.#join('LateralLeftJoin', args);\n    }\n    crossJoinLateral(...args) {\n        return this.#join('LateralCrossJoin', args);\n    }\n    crossApply(...args) {\n        return this.#join('CrossApply', args);\n    }\n    outerApply(...args) {\n        return this.#join('OuterApply', args);\n    }\n    #join(joinType, args) {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithJoin(this.#props.queryNode, parseJoin(joinType, args)),\n        });\n    }\n    orderBy(...args) {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithOrderByItems(this.#props.queryNode, parseOrderBy(args)),\n        });\n    }\n    groupBy(groupBy) {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: SelectQueryNode.cloneWithGroupByItems(this.#props.queryNode, parseGroupBy(groupBy)),\n        });\n    }\n    limit(limit) {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: SelectQueryNode.cloneWithLimit(this.#props.queryNode, LimitNode.create(parseValueExpression(limit))),\n        });\n    }\n    offset(offset) {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: SelectQueryNode.cloneWithOffset(this.#props.queryNode, OffsetNode.create(parseValueExpression(offset))),\n        });\n    }\n    fetch(rowCount, modifier = 'only') {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: SelectQueryNode.cloneWithFetch(this.#props.queryNode, parseFetch(rowCount, modifier)),\n        });\n    }\n    top(expression, modifiers) {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithTop(this.#props.queryNode, parseTop(expression, modifiers)),\n        });\n    }\n    union(expression) {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: SelectQueryNode.cloneWithSetOperations(this.#props.queryNode, parseSetOperations('union', expression, false)),\n        });\n    }\n    unionAll(expression) {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: SelectQueryNode.cloneWithSetOperations(this.#props.queryNode, parseSetOperations('union', expression, true)),\n        });\n    }\n    intersect(expression) {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: SelectQueryNode.cloneWithSetOperations(this.#props.queryNode, parseSetOperations('intersect', expression, false)),\n        });\n    }\n    intersectAll(expression) {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: SelectQueryNode.cloneWithSetOperations(this.#props.queryNode, parseSetOperations('intersect', expression, true)),\n        });\n    }\n    except(expression) {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: SelectQueryNode.cloneWithSetOperations(this.#props.queryNode, parseSetOperations('except', expression, false)),\n        });\n    }\n    exceptAll(expression) {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: SelectQueryNode.cloneWithSetOperations(this.#props.queryNode, parseSetOperations('except', expression, true)),\n        });\n    }\n    as(alias) {\n        return new AliasedSelectQueryBuilderImpl(this, alias);\n    }\n    clearSelect() {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: SelectQueryNode.cloneWithoutSelections(this.#props.queryNode),\n        });\n    }\n    clearWhere() {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithoutWhere(this.#props.queryNode),\n        });\n    }\n    clearLimit() {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: SelectQueryNode.cloneWithoutLimit(this.#props.queryNode),\n        });\n    }\n    clearOffset() {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: SelectQueryNode.cloneWithoutOffset(this.#props.queryNode),\n        });\n    }\n    clearOrderBy() {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithoutOrderBy(this.#props.queryNode),\n        });\n    }\n    clearGroupBy() {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: SelectQueryNode.cloneWithoutGroupBy(this.#props.queryNode),\n        });\n    }\n    $call(func) {\n        return func(this);\n    }\n    $if(condition, func) {\n        if (condition) {\n            return func(this);\n        }\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n        });\n    }\n    $castTo() {\n        return new SelectQueryBuilderImpl(this.#props);\n    }\n    $narrowType() {\n        return new SelectQueryBuilderImpl(this.#props);\n    }\n    $assertType() {\n        return new SelectQueryBuilderImpl(this.#props);\n    }\n    $asTuple() {\n        return new ExpressionWrapper(this.toOperationNode());\n    }\n    $asScalar() {\n        return new ExpressionWrapper(this.toOperationNode());\n    }\n    withPlugin(plugin) {\n        return new SelectQueryBuilderImpl({\n            ...this.#props,\n            executor: this.#props.executor.withPlugin(plugin),\n        });\n    }\n    toOperationNode() {\n        return this.#props.executor.transformQuery(this.#props.queryNode, this.#props.queryId);\n    }\n    compile() {\n        return this.#props.executor.compileQuery(this.toOperationNode(), this.#props.queryId);\n    }\n    async execute() {\n        const compiledQuery = this.compile();\n        const result = await this.#props.executor.executeQuery(compiledQuery, this.#props.queryId);\n        return result.rows;\n    }\n    async executeTakeFirst() {\n        const [result] = await this.execute();\n        return result;\n    }\n    async executeTakeFirstOrThrow(errorConstructor = NoResultError) {\n        const result = await this.executeTakeFirst();\n        if (result === undefined) {\n            const error = isNoResultErrorConstructor(errorConstructor)\n                ? new errorConstructor(this.toOperationNode())\n                : errorConstructor(this.toOperationNode());\n            throw error;\n        }\n        return result;\n    }\n    async *stream(chunkSize = 100) {\n        const compiledQuery = this.compile();\n        const stream = this.#props.executor.stream(compiledQuery, chunkSize, this.#props.queryId);\n        for await (const item of stream) {\n            yield* item.rows;\n        }\n    }\n    async explain(format, options) {\n        const builder = new SelectQueryBuilderImpl({\n            ...this.#props,\n            queryNode: QueryNode.cloneWithExplain(this.#props.queryNode, format, options),\n        });\n        return await builder.execute();\n    }\n}\nexport function createSelectQueryBuilder(props) {\n    return new SelectQueryBuilderImpl(props);\n}\n/**\n * {@link SelectQueryBuilder} with an alias. The result of calling {@link SelectQueryBuilder.as}.\n */\nclass AliasedSelectQueryBuilderImpl {\n    #queryBuilder;\n    #alias;\n    constructor(queryBuilder, alias) {\n        this.#queryBuilder = queryBuilder;\n        this.#alias = alias;\n    }\n    get expression() {\n        return this.#queryBuilder;\n    }\n    get alias() {\n        return this.#alias;\n    }\n    get isAliasedSelectQueryBuilder() {\n        return true;\n    }\n    toOperationNode() {\n        return AliasNode.create(this.#queryBuilder.toOperationNode(), IdentifierNode.create(this.#alias));\n    }\n}\n", "/// <reference types=\"./aggregate-function-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { WhereNode } from './where-node.js';\nimport { OrderByNode } from './order-by-node.js';\n/**\n * @internal\n */\nexport const AggregateFunctionNode = freeze({\n    is(node) {\n        return node.kind === 'AggregateFunctionNode';\n    },\n    create(aggregateFunction, aggregated = []) {\n        return freeze({\n            kind: 'AggregateFunctionNode',\n            func: aggregateFunction,\n            aggregated,\n        });\n    },\n    cloneWithDistinct(aggregateFunctionNode) {\n        return freeze({\n            ...aggregateFunctionNode,\n            distinct: true,\n        });\n    },\n    cloneWithOrderBy(aggregateFunctionNode, orderItems, withinGroup = false) {\n        const prop = withinGroup ? 'withinGroup' : 'orderBy';\n        return freeze({\n            ...aggregateFunctionNode,\n            [prop]: aggregateFunctionNode[prop]\n                ? OrderByNode.cloneWithItems(aggregateFunctionNode[prop], orderItems)\n                : OrderByNode.create(orderItems),\n        });\n    },\n    cloneWithFilter(aggregateFunctionNode, filter) {\n        return freeze({\n            ...aggregateFunctionNode,\n            filter: aggregateFunctionNode.filter\n                ? WhereNode.cloneWithOperation(aggregateFunctionNode.filter, 'And', filter)\n                : WhereNode.create(filter),\n        });\n    },\n    cloneWithOrFilter(aggregateFunctionNode, filter) {\n        return freeze({\n            ...aggregateFunctionNode,\n            filter: aggregateFunctionNode.filter\n                ? WhereNode.cloneWithOperation(aggregateFunctionNode.filter, 'Or', filter)\n                : WhereNode.create(filter),\n        });\n    },\n    cloneWithOver(aggregateFunctionNode, over) {\n        return freeze({\n            ...aggregateFunctionNode,\n            over,\n        });\n    },\n});\n", "/// <reference types=\"./function-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const FunctionNode = freeze({\n    is(node) {\n        return node.kind === 'FunctionNode';\n    },\n    create(func, args) {\n        return freeze({\n            kind: 'FunctionNode',\n            func,\n            arguments: args,\n        });\n    },\n});\n", "/// <reference types=\"./aggregate-function-builder.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { AggregateFunctionNode } from '../operation-node/aggregate-function-node.js';\nimport { AliasNode } from '../operation-node/alias-node.js';\nimport { IdentifierNode } from '../operation-node/identifier-node.js';\nimport { createOverBuilder } from '../parser/parse-utils.js';\nimport { parseReferentialBinaryOperation, parseValueBinaryOperationOrExpression, } from '../parser/binary-operation-parser.js';\nimport { parseOrderBy, } from '../parser/order-by-parser.js';\nimport { QueryNode } from '../operation-node/query-node.js';\nexport class AggregateFunctionBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    /** @private */\n    get expressionType() {\n        return undefined;\n    }\n    /**\n     * Returns an aliased version of the function.\n     *\n     * In addition to slapping `as \"the_alias\"` to the end of the SQL,\n     * this method also provides strict typing:\n     *\n     * ```ts\n     * const result = await db\n     *   .selectFrom('person')\n     *   .select(\n     *     (eb) => eb.fn.count<number>('id').as('person_count')\n     *   )\n     *   .executeTakeFirstOrThrow()\n     *\n     * // `person_count: number` field exists in the result type.\n     * console.log(result.person_count)\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * select count(\"id\") as \"person_count\"\n     * from \"person\"\n     * ```\n     */\n    as(alias) {\n        return new AliasedAggregateFunctionBuilder(this, alias);\n    }\n    /**\n     * Adds a `distinct` clause inside the function.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * const result = await db\n     *   .selectFrom('person')\n     *   .select((eb) =>\n     *     eb.fn.count<number>('first_name').distinct().as('first_name_count')\n     *   )\n     *   .executeTakeFirstOrThrow()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * select count(distinct \"first_name\") as \"first_name_count\"\n     * from \"person\"\n     * ```\n     */\n    distinct() {\n        return new AggregateFunctionBuilder({\n            ...this.#props,\n            aggregateFunctionNode: AggregateFunctionNode.cloneWithDistinct(this.#props.aggregateFunctionNode),\n        });\n    }\n    orderBy(...args) {\n        return new AggregateFunctionBuilder({\n            ...this.#props,\n            aggregateFunctionNode: QueryNode.cloneWithOrderByItems(this.#props.aggregateFunctionNode, parseOrderBy(args)),\n        });\n    }\n    clearOrderBy() {\n        return new AggregateFunctionBuilder({\n            ...this.#props,\n            aggregateFunctionNode: QueryNode.cloneWithoutOrderBy(this.#props.aggregateFunctionNode),\n        });\n    }\n    withinGroupOrderBy(...args) {\n        return new AggregateFunctionBuilder({\n            ...this.#props,\n            aggregateFunctionNode: AggregateFunctionNode.cloneWithOrderBy(this.#props.aggregateFunctionNode, parseOrderBy(args), true),\n        });\n    }\n    filterWhere(...args) {\n        return new AggregateFunctionBuilder({\n            ...this.#props,\n            aggregateFunctionNode: AggregateFunctionNode.cloneWithFilter(this.#props.aggregateFunctionNode, parseValueBinaryOperationOrExpression(args)),\n        });\n    }\n    /**\n     * Adds a `filter` clause with a nested `where` clause after the function, where\n     * both sides of the operator are references to columns.\n     *\n     * Similar to {@link WhereInterface}'s `whereRef` method.\n     *\n     * ### Examples\n     *\n     * Count people with same first and last names versus general public:\n     *\n     * ```ts\n     * const result = await db\n     *   .selectFrom('person')\n     *   .select((eb) => [\n     *     eb.fn\n     *       .count<number>('id')\n     *       .filterWhereRef('first_name', '=', 'last_name')\n     *       .as('repeat_name_count'),\n     *     eb.fn.count<number>('id').as('total_count'),\n     *   ])\n     *   .executeTakeFirstOrThrow()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * select\n     *   count(\"id\") filter(where \"first_name\" = \"last_name\") as \"repeat_name_count\",\n     *   count(\"id\") as \"total_count\"\n     * from \"person\"\n     * ```\n     */\n    filterWhereRef(lhs, op, rhs) {\n        return new AggregateFunctionBuilder({\n            ...this.#props,\n            aggregateFunctionNode: AggregateFunctionNode.cloneWithFilter(this.#props.aggregateFunctionNode, parseReferentialBinaryOperation(lhs, op, rhs)),\n        });\n    }\n    /**\n     * Adds an `over` clause (window functions) after the function.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * const result = await db\n     *   .selectFrom('person')\n     *   .select(\n     *     (eb) => eb.fn.avg<number>('age').over().as('average_age')\n     *   )\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * select avg(\"age\") over() as \"average_age\"\n     * from \"person\"\n     * ```\n     *\n     * Also supports passing a callback that returns an over builder,\n     * allowing to add partition by and sort by clauses inside over.\n     *\n     * ```ts\n     * const result = await db\n     *   .selectFrom('person')\n     *   .select(\n     *     (eb) => eb.fn.avg<number>('age').over(\n     *       ob => ob.partitionBy('last_name').orderBy('first_name', 'asc')\n     *     ).as('average_age')\n     *   )\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * select avg(\"age\") over(partition by \"last_name\" order by \"first_name\" asc) as \"average_age\"\n     * from \"person\"\n     * ```\n     */\n    over(over) {\n        const builder = createOverBuilder();\n        return new AggregateFunctionBuilder({\n            ...this.#props,\n            aggregateFunctionNode: AggregateFunctionNode.cloneWithOver(this.#props.aggregateFunctionNode, (over ? over(builder) : builder).toOperationNode()),\n        });\n    }\n    /**\n     * Simply calls the provided function passing `this` as the only argument. `$call` returns\n     * what the provided function returns.\n     */\n    $call(func) {\n        return func(this);\n    }\n    /**\n     * Casts the expression to the given type.\n     *\n     * This method call doesn't change the SQL in any way. This methods simply\n     * returns a copy of this `AggregateFunctionBuilder` with a new output type.\n     */\n    $castTo() {\n        return new AggregateFunctionBuilder(this.#props);\n    }\n    /**\n     * Omit null from the expression's type.\n     *\n     * This function can be useful in cases where you know an expression can't be\n     * null, but Kysely is unable to infer it.\n     *\n     * This method call doesn't change the SQL in any way. This methods simply\n     * returns a copy of `this` with a new output type.\n     */\n    $notNull() {\n        return new AggregateFunctionBuilder(this.#props);\n    }\n    toOperationNode() {\n        return this.#props.aggregateFunctionNode;\n    }\n}\n/**\n * {@link AggregateFunctionBuilder} with an alias. The result of calling {@link AggregateFunctionBuilder.as}.\n */\nexport class AliasedAggregateFunctionBuilder {\n    #aggregateFunctionBuilder;\n    #alias;\n    constructor(aggregateFunctionBuilder, alias) {\n        this.#aggregateFunctionBuilder = aggregateFunctionBuilder;\n        this.#alias = alias;\n    }\n    /** @private */\n    get expression() {\n        return this.#aggregateFunctionBuilder;\n    }\n    /** @private */\n    get alias() {\n        return this.#alias;\n    }\n    toOperationNode() {\n        return AliasNode.create(this.#aggregateFunctionBuilder.toOperationNode(), IdentifierNode.create(this.#alias));\n    }\n}\n", "/// <reference types=\"./function-module.d.ts\" />\nimport { ExpressionWrapper } from '../expression/expression-wrapper.js';\nimport { AggregateFunctionNode } from '../operation-node/aggregate-function-node.js';\nimport { FunctionNode } from '../operation-node/function-node.js';\nimport { parseReferenceExpressionOrList, } from '../parser/reference-parser.js';\nimport { parseSelectAll } from '../parser/select-parser.js';\nimport { AggregateFunctionBuilder } from './aggregate-function-builder.js';\nimport { isString } from '../util/object-utils.js';\nimport { parseTable } from '../parser/table-parser.js';\nexport function createFunctionModule() {\n    const fn = (name, args) => {\n        return new ExpressionWrapper(FunctionNode.create(name, parseReferenceExpressionOrList(args ?? [])));\n    };\n    const agg = (name, args) => {\n        return new AggregateFunctionBuilder({\n            aggregateFunctionNode: AggregateFunctionNode.create(name, args ? parseReferenceExpressionOrList(args) : undefined),\n        });\n    };\n    return Object.assign(fn, {\n        agg,\n        avg(column) {\n            return agg('avg', [column]);\n        },\n        coalesce(...values) {\n            return fn('coalesce', values);\n        },\n        count(column) {\n            return agg('count', [column]);\n        },\n        countAll(table) {\n            return new AggregateFunctionBuilder({\n                aggregateFunctionNode: AggregateFunctionNode.create('count', parseSelectAll(table)),\n            });\n        },\n        max(column) {\n            return agg('max', [column]);\n        },\n        min(column) {\n            return agg('min', [column]);\n        },\n        sum(column) {\n            return agg('sum', [column]);\n        },\n        any(column) {\n            return fn('any', [column]);\n        },\n        jsonAgg(table) {\n            return new AggregateFunctionBuilder({\n                aggregateFunctionNode: AggregateFunctionNode.create('json_agg', [\n                    isString(table) ? parseTable(table) : table.toOperationNode(),\n                ]),\n            });\n        },\n        toJson(table) {\n            return new ExpressionWrapper(FunctionNode.create('to_json', [\n                isString(table) ? parseTable(table) : table.toOperationNode(),\n            ]));\n        },\n    });\n}\n", "/// <reference types=\"./unary-operation-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const UnaryOperationNode = freeze({\n    is(node) {\n        return node.kind === 'UnaryOperationNode';\n    },\n    create(operator, operand) {\n        return freeze({\n            kind: 'UnaryOperationNode',\n            operator,\n            operand,\n        });\n    },\n});\n", "/// <reference types=\"./unary-operation-parser.d.ts\" />\nimport { OperatorNode } from '../operation-node/operator-node.js';\nimport { UnaryOperationNode } from '../operation-node/unary-operation-node.js';\nimport { parseReferenceExpression, } from './reference-parser.js';\nexport function parseExists(operand) {\n    return parseUnaryOperation('exists', operand);\n}\nexport function parseNotExists(operand) {\n    return parseUnaryOperation('not exists', operand);\n}\nexport function parseUnaryOperation(operator, operand) {\n    return UnaryOperationNode.create(OperatorNode.create(operator), parseReferenceExpression(operand));\n}\n", "/// <reference types=\"./case-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { WhenNode } from './when-node.js';\n/**\n * @internal\n */\nexport const CaseNode = freeze({\n    is(node) {\n        return node.kind === 'CaseNode';\n    },\n    create(value) {\n        return freeze({\n            kind: 'CaseNode',\n            value,\n        });\n    },\n    cloneWithWhen(caseNode, when) {\n        return freeze({\n            ...caseNode,\n            when: freeze(caseNode.when ? [...caseNode.when, when] : [when]),\n        });\n    },\n    cloneWithThen(caseNode, then) {\n        return freeze({\n            ...caseNode,\n            when: caseNode.when\n                ? freeze([\n                    ...caseNode.when.slice(0, -1),\n                    WhenNode.cloneWithResult(caseNode.when[caseNode.when.length - 1], then),\n                ])\n                : undefined,\n        });\n    },\n    cloneWith(caseNode, props) {\n        return freeze({\n            ...caseNode,\n            ...props,\n        });\n    },\n});\n", "/// <reference types=\"./case-builder.d.ts\" />\nimport { ExpressionWrapper } from '../expression/expression-wrapper.js';\nimport { freeze } from '../util/object-utils.js';\nimport { CaseNode } from '../operation-node/case-node.js';\nimport { WhenNode } from '../operation-node/when-node.js';\nimport { parseValueBinaryOperationOrExpression, } from '../parser/binary-operation-parser.js';\nimport { isSafeImmediateValue, parseSafeImmediateValue, parseValueExpression, } from '../parser/value-parser.js';\nexport class CaseBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    when(...args) {\n        return new CaseThenBuilder({\n            ...this.#props,\n            node: CaseNode.cloneWithWhen(this.#props.node, WhenNode.create(parseValueBinaryOperationOrExpression(args))),\n        });\n    }\n}\nexport class CaseThenBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    then(valueExpression) {\n        return new CaseWhenBuilder({\n            ...this.#props,\n            node: CaseNode.cloneWithThen(this.#props.node, isSafeImmediateValue(valueExpression)\n                ? parseSafeImmediateValue(valueExpression)\n                : parseValueExpression(valueExpression)),\n        });\n    }\n}\nexport class CaseWhenBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    when(...args) {\n        return new CaseThenBuilder({\n            ...this.#props,\n            node: CaseNode.cloneWithWhen(this.#props.node, WhenNode.create(parseValueBinaryOperationOrExpression(args))),\n        });\n    }\n    else(valueExpression) {\n        return new CaseEndBuilder({\n            ...this.#props,\n            node: CaseNode.cloneWith(this.#props.node, {\n                else: isSafeImmediateValue(valueExpression)\n                    ? parseSafeImmediateValue(valueExpression)\n                    : parseValueExpression(valueExpression),\n            }),\n        });\n    }\n    end() {\n        return new ExpressionWrapper(CaseNode.cloneWith(this.#props.node, { isStatement: false }));\n    }\n    endCase() {\n        return new ExpressionWrapper(CaseNode.cloneWith(this.#props.node, { isStatement: true }));\n    }\n}\nexport class CaseEndBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    end() {\n        return new ExpressionWrapper(CaseNode.cloneWith(this.#props.node, { isStatement: false }));\n    }\n    endCase() {\n        return new ExpressionWrapper(CaseNode.cloneWith(this.#props.node, { isStatement: true }));\n    }\n}\n", "/// <reference types=\"./json-path-leg-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const JSONPathLegNode = freeze({\n    is(node) {\n        return node.kind === 'JSONPathLegNode';\n    },\n    create(type, value) {\n        return freeze({\n            kind: 'JSONPathLegNode',\n            type,\n            value,\n        });\n    },\n});\n", "/// <reference types=\"./json-path-builder.d.ts\" />\nimport { AliasNode } from '../operation-node/alias-node.js';\nimport { IdentifierNode } from '../operation-node/identifier-node.js';\nimport { JSONOperatorChainNode } from '../operation-node/json-operator-chain-node.js';\nimport { JSONPathLegNode, } from '../operation-node/json-path-leg-node.js';\nimport { JSONPathNode } from '../operation-node/json-path-node.js';\nimport { JSONReferenceNode } from '../operation-node/json-reference-node.js';\nimport { isOperationNodeSource } from '../operation-node/operation-node-source.js';\nimport { ValueNode } from '../operation-node/value-node.js';\nexport class JSONPathBuilder {\n    #node;\n    constructor(node) {\n        this.#node = node;\n    }\n    /**\n     * Access an element of a JSON array in a specific location.\n     *\n     * Since there's no guarantee an element exists in the given array location, the\n     * resulting type is always nullable. If you're sure the element exists, you\n     * should use {@link SelectQueryBuilder.$assertType} to narrow the type safely.\n     *\n     * See also {@link key} to access properties of JSON objects.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * await db.selectFrom('person')\n     *   .select(eb =>\n     *     eb.ref('nicknames', '->').at(0).as('primary_nickname')\n     *   )\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * select \"nicknames\"->0 as \"primary_nickname\" from \"person\"\n     *```\n     *\n     * Combined with {@link key}:\n     *\n     * ```ts\n     * db.selectFrom('person').select(eb =>\n     *   eb.ref('experience', '->').at(0).key('role').as('first_role')\n     * )\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * select \"experience\"->0->'role' as \"first_role\" from \"person\"\n     * ```\n     *\n     * You can use `'last'` to access the last element of the array in MySQL:\n     *\n     * ```ts\n     * db.selectFrom('person').select(eb =>\n     *   eb.ref('nicknames', '->$').at('last').as('last_nickname')\n     * )\n     * ```\n     *\n     * The generated SQL (MySQL):\n     *\n     * ```sql\n     * select `nicknames`->'$[last]' as `last_nickname` from `person`\n     * ```\n     *\n     * Or `'#-1'` in SQLite:\n     *\n     * ```ts\n     * db.selectFrom('person').select(eb =>\n     *   eb.ref('nicknames', '->>$').at('#-1').as('last_nickname')\n     * )\n     * ```\n     *\n     * The generated SQL (SQLite):\n     *\n     * ```sql\n     * select \"nicknames\"->>'$[#-1]' as `last_nickname` from `person`\n     * ```\n     */\n    at(index) {\n        return this.#createBuilderWithPathLeg('ArrayLocation', index);\n    }\n    /**\n     * Access a property of a JSON object.\n     *\n     * If a field is optional, the resulting type will be nullable.\n     *\n     * See also {@link at} to access elements of JSON arrays.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * db.selectFrom('person').select(eb =>\n     *   eb.ref('address', '->').key('city').as('city')\n     * )\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * select \"address\"->'city' as \"city\" from \"person\"\n     * ```\n     *\n     * Going deeper:\n     *\n     * ```ts\n     * db.selectFrom('person').select(eb =>\n     *   eb.ref('profile', '->$').key('website').key('url').as('website_url')\n     * )\n     * ```\n     *\n     * The generated SQL (MySQL):\n     *\n     * ```sql\n     * select `profile`->'$.website.url' as `website_url` from `person`\n     * ```\n     *\n     * Combined with {@link at}:\n     *\n     * ```ts\n     * db.selectFrom('person').select(eb =>\n     *   eb.ref('profile', '->').key('addresses').at(0).key('city').as('city')\n     * )\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * select \"profile\"->'addresses'->0->'city' as \"city\" from \"person\"\n     * ```\n     */\n    key(key) {\n        return this.#createBuilderWithPathLeg('Member', key);\n    }\n    #createBuilderWithPathLeg(legType, value) {\n        if (JSONReferenceNode.is(this.#node)) {\n            return new TraversedJSONPathBuilder(JSONReferenceNode.cloneWithTraversal(this.#node, JSONPathNode.is(this.#node.traversal)\n                ? JSONPathNode.cloneWithLeg(this.#node.traversal, JSONPathLegNode.create(legType, value))\n                : JSONOperatorChainNode.cloneWithValue(this.#node.traversal, ValueNode.createImmediate(value))));\n        }\n        return new TraversedJSONPathBuilder(JSONPathNode.cloneWithLeg(this.#node, JSONPathLegNode.create(legType, value)));\n    }\n}\nexport class TraversedJSONPathBuilder extends JSONPathBuilder {\n    #node;\n    constructor(node) {\n        super(node);\n        this.#node = node;\n    }\n    /** @private */\n    get expressionType() {\n        return undefined;\n    }\n    as(alias) {\n        return new AliasedJSONPathBuilder(this, alias);\n    }\n    /**\n     * Change the output type of the json path.\n     *\n     * This method call doesn't change the SQL in any way. This methods simply\n     * returns a copy of this `JSONPathBuilder` with a new output type.\n     */\n    $castTo() {\n        return new TraversedJSONPathBuilder(this.#node);\n    }\n    $notNull() {\n        return new TraversedJSONPathBuilder(this.#node);\n    }\n    toOperationNode() {\n        return this.#node;\n    }\n}\nexport class AliasedJSONPathBuilder {\n    #jsonPath;\n    #alias;\n    constructor(jsonPath, alias) {\n        this.#jsonPath = jsonPath;\n        this.#alias = alias;\n    }\n    /** @private */\n    get expression() {\n        return this.#jsonPath;\n    }\n    /** @private */\n    get alias() {\n        return this.#alias;\n    }\n    toOperationNode() {\n        return AliasNode.create(this.#jsonPath.toOperationNode(), isOperationNodeSource(this.#alias)\n            ? this.#alias.toOperationNode()\n            : IdentifierNode.create(this.#alias));\n    }\n}\n", "/// <reference types=\"./tuple-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const TupleNode = freeze({\n    is(node) {\n        return node.kind === 'TupleNode';\n    },\n    create(values) {\n        return freeze({\n            kind: 'TupleNode',\n            values: freeze(values),\n        });\n    },\n});\n", "/// <reference types=\"./data-type-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nconst SIMPLE_COLUMN_DATA_TYPES = [\n    'varchar',\n    'char',\n    'text',\n    'integer',\n    'int2',\n    'int4',\n    'int8',\n    'smallint',\n    'bigint',\n    'boolean',\n    'real',\n    'double precision',\n    'float4',\n    'float8',\n    'decimal',\n    'numeric',\n    'binary',\n    'bytea',\n    'date',\n    'datetime',\n    'time',\n    'timetz',\n    'timestamp',\n    'timestamptz',\n    'serial',\n    'bigserial',\n    'uuid',\n    'json',\n    'jsonb',\n    'blob',\n    'varbinary',\n    'int4range',\n    'int4multirange',\n    'int8range',\n    'int8multirange',\n    'numrange',\n    'nummultirange',\n    'tsrange',\n    'tsmultirange',\n    'tstzrange',\n    'tstzmultirange',\n    'daterange',\n    'datemultirange',\n];\nconst COLUMN_DATA_TYPE_REGEX = [\n    /^varchar\\(\\d+\\)$/,\n    /^char\\(\\d+\\)$/,\n    /^decimal\\(\\d+, \\d+\\)$/,\n    /^numeric\\(\\d+, \\d+\\)$/,\n    /^binary\\(\\d+\\)$/,\n    /^datetime\\(\\d+\\)$/,\n    /^time\\(\\d+\\)$/,\n    /^timetz\\(\\d+\\)$/,\n    /^timestamp\\(\\d+\\)$/,\n    /^timestamptz\\(\\d+\\)$/,\n    /^varbinary\\(\\d+\\)$/,\n];\n/**\n * @internal\n */\nexport const DataTypeNode = freeze({\n    is(node) {\n        return node.kind === 'DataTypeNode';\n    },\n    create(dataType) {\n        return freeze({\n            kind: 'DataTypeNode',\n            dataType,\n        });\n    },\n});\nexport function isColumnDataType(dataType) {\n    if (SIMPLE_COLUMN_DATA_TYPES.includes(dataType)) {\n        return true;\n    }\n    if (COLUMN_DATA_TYPE_REGEX.some((r) => r.test(dataType))) {\n        return true;\n    }\n    return false;\n}\n", "/// <reference types=\"./data-type-parser.d.ts\" />\nimport { DataTypeNode, isColumnDataType, } from '../operation-node/data-type-node.js';\nimport { isOperationNodeSource } from '../operation-node/operation-node-source.js';\nexport function parseDataTypeExpression(dataType) {\n    if (isOperationNodeSource(dataType)) {\n        return dataType.toOperationNode();\n    }\n    if (isColumnDataType(dataType)) {\n        return DataTypeNode.create(dataType);\n    }\n    throw new Error(`invalid column data type ${JSON.stringify(dataType)}`);\n}\n", "/// <reference types=\"./cast-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const CastNode = freeze({\n    is(node) {\n        return node.kind === 'CastNode';\n    },\n    create(expression, dataType) {\n        return freeze({\n            kind: 'CastNode',\n            expression,\n            dataType,\n        });\n    },\n});\n", "/// <reference types=\"./expression-builder.d.ts\" />\nimport { createSelectQueryBuilder, } from '../query-builder/select-query-builder.js';\nimport { SelectQueryNode } from '../operation-node/select-query-node.js';\nimport { parseTableExpressionOrList, parseTable, } from '../parser/table-parser.js';\nimport { WithSchemaPlugin } from '../plugin/with-schema/with-schema-plugin.js';\nimport { createQueryId } from '../util/query-id.js';\nimport { createFunctionModule, } from '../query-builder/function-module.js';\nimport { parseJSONReference, parseReferenceExpression, parseStringReference, } from '../parser/reference-parser.js';\nimport { parseFilterList, parseFilterObject, parseValueBinaryOperation, parseValueBinaryOperationOrExpression, } from '../parser/binary-operation-parser.js';\nimport { ParensNode } from '../operation-node/parens-node.js';\nimport { ExpressionWrapper } from './expression-wrapper.js';\nimport { OperatorNode, } from '../operation-node/operator-node.js';\nimport { parseUnaryOperation } from '../parser/unary-operation-parser.js';\nimport { parseSafeImmediateValue, parseValueExpression, } from '../parser/value-parser.js';\nimport { NOOP_QUERY_EXECUTOR } from '../query-executor/noop-query-executor.js';\nimport { CaseBuilder } from '../query-builder/case-builder.js';\nimport { CaseNode } from '../operation-node/case-node.js';\nimport { isReadonlyArray, isUndefined } from '../util/object-utils.js';\nimport { JSONPathBuilder } from '../query-builder/json-path-builder.js';\nimport { BinaryOperationNode } from '../operation-node/binary-operation-node.js';\nimport { AndNode } from '../operation-node/and-node.js';\nimport { TupleNode } from '../operation-node/tuple-node.js';\nimport { JSONPathNode } from '../operation-node/json-path-node.js';\nimport { parseDataTypeExpression, } from '../parser/data-type-parser.js';\nimport { CastNode } from '../operation-node/cast-node.js';\nexport function createExpressionBuilder(executor = NOOP_QUERY_EXECUTOR) {\n    function binary(lhs, op, rhs) {\n        return new ExpressionWrapper(parseValueBinaryOperation(lhs, op, rhs));\n    }\n    function unary(op, expr) {\n        return new ExpressionWrapper(parseUnaryOperation(op, expr));\n    }\n    const eb = Object.assign(binary, {\n        fn: undefined,\n        eb: undefined,\n        selectFrom(table) {\n            return createSelectQueryBuilder({\n                queryId: createQueryId(),\n                executor,\n                queryNode: SelectQueryNode.createFrom(parseTableExpressionOrList(table)),\n            });\n        },\n        case(reference) {\n            return new CaseBuilder({\n                node: CaseNode.create(isUndefined(reference)\n                    ? undefined\n                    : parseReferenceExpression(reference)),\n            });\n        },\n        ref(reference, op) {\n            if (isUndefined(op)) {\n                return new ExpressionWrapper(parseStringReference(reference));\n            }\n            return new JSONPathBuilder(parseJSONReference(reference, op));\n        },\n        jsonPath() {\n            return new JSONPathBuilder(JSONPathNode.create());\n        },\n        table(table) {\n            return new ExpressionWrapper(parseTable(table));\n        },\n        val(value) {\n            return new ExpressionWrapper(parseValueExpression(value));\n        },\n        refTuple(...values) {\n            return new ExpressionWrapper(TupleNode.create(values.map(parseReferenceExpression)));\n        },\n        tuple(...values) {\n            return new ExpressionWrapper(TupleNode.create(values.map(parseValueExpression)));\n        },\n        lit(value) {\n            return new ExpressionWrapper(parseSafeImmediateValue(value));\n        },\n        unary,\n        not(expr) {\n            return unary('not', expr);\n        },\n        exists(expr) {\n            return unary('exists', expr);\n        },\n        neg(expr) {\n            return unary('-', expr);\n        },\n        between(expr, start, end) {\n            return new ExpressionWrapper(BinaryOperationNode.create(parseReferenceExpression(expr), OperatorNode.create('between'), AndNode.create(parseValueExpression(start), parseValueExpression(end))));\n        },\n        betweenSymmetric(expr, start, end) {\n            return new ExpressionWrapper(BinaryOperationNode.create(parseReferenceExpression(expr), OperatorNode.create('between symmetric'), AndNode.create(parseValueExpression(start), parseValueExpression(end))));\n        },\n        and(exprs) {\n            if (isReadonlyArray(exprs)) {\n                return new ExpressionWrapper(parseFilterList(exprs, 'and'));\n            }\n            return new ExpressionWrapper(parseFilterObject(exprs, 'and'));\n        },\n        or(exprs) {\n            if (isReadonlyArray(exprs)) {\n                return new ExpressionWrapper(parseFilterList(exprs, 'or'));\n            }\n            return new ExpressionWrapper(parseFilterObject(exprs, 'or'));\n        },\n        parens(...args) {\n            const node = parseValueBinaryOperationOrExpression(args);\n            if (ParensNode.is(node)) {\n                // No double wrapping.\n                return new ExpressionWrapper(node);\n            }\n            else {\n                return new ExpressionWrapper(ParensNode.create(node));\n            }\n        },\n        cast(expr, dataType) {\n            return new ExpressionWrapper(CastNode.create(parseReferenceExpression(expr), parseDataTypeExpression(dataType)));\n        },\n        withSchema(schema) {\n            return createExpressionBuilder(executor.withPluginAtFront(new WithSchemaPlugin(schema)));\n        },\n    });\n    eb.fn = createFunctionModule();\n    eb.eb = eb;\n    return eb;\n}\nexport function expressionBuilder(_) {\n    return createExpressionBuilder();\n}\n", "/// <reference types=\"./expression-parser.d.ts\" />\nimport { isAliasedExpression, isExpression, } from '../expression/expression.js';\nimport { isOperationNodeSource } from '../operation-node/operation-node-source.js';\nimport { expressionBuilder, } from '../expression/expression-builder.js';\nimport { isFunction } from '../util/object-utils.js';\nexport function parseExpression(exp) {\n    if (isOperationNodeSource(exp)) {\n        return exp.toOperationNode();\n    }\n    else if (isFunction(exp)) {\n        return exp(expressionBuilder()).toOperationNode();\n    }\n    throw new Error(`invalid expression: ${JSON.stringify(exp)}`);\n}\nexport function parseAliasedExpression(exp) {\n    if (isOperationNodeSource(exp)) {\n        return exp.toOperationNode();\n    }\n    else if (isFunction(exp)) {\n        return exp(expressionBuilder()).toOperationNode();\n    }\n    throw new Error(`invalid aliased expression: ${JSON.stringify(exp)}`);\n}\nexport function isExpressionOrFactory(obj) {\n    return isExpression(obj) || isAliasedExpression(obj) || isFunction(obj);\n}\n", "/// <reference types=\"./dynamic-table-builder.d.ts\" />\nimport { AliasNode } from '../operation-node/alias-node.js';\nimport { IdentifierNode } from '../operation-node/identifier-node.js';\nimport { isOperationNodeSource, } from '../operation-node/operation-node-source.js';\nimport { parseTable } from '../parser/table-parser.js';\nimport { isObject, isString } from '../util/object-utils.js';\nexport class DynamicTableBuilder {\n    #table;\n    get table() {\n        return this.#table;\n    }\n    constructor(table) {\n        this.#table = table;\n    }\n    as(alias) {\n        return new AliasedDynamicTableBuilder(this.#table, alias);\n    }\n}\nexport class AliasedDynamicTableBuilder {\n    #table;\n    #alias;\n    get table() {\n        return this.#table;\n    }\n    get alias() {\n        return this.#alias;\n    }\n    constructor(table, alias) {\n        this.#table = table;\n        this.#alias = alias;\n    }\n    toOperationNode() {\n        return AliasNode.create(parseTable(this.#table), IdentifierNode.create(this.#alias));\n    }\n}\nexport function isAliasedDynamicTableBuilder(obj) {\n    return (isObject(obj) &&\n        isOperationNodeSource(obj) &&\n        isString(obj.table) &&\n        isString(obj.alias));\n}\n", "/// <reference types=\"./table-parser.d.ts\" />\nimport { isReadonlyArray, isString } from '../util/object-utils.js';\nimport { AliasNode } from '../operation-node/alias-node.js';\nimport { TableNode } from '../operation-node/table-node.js';\nimport { parseAliasedExpression, } from './expression-parser.js';\nimport { IdentifierNode } from '../operation-node/identifier-node.js';\nimport { isAliasedDynamicTableBuilder, } from '../dynamic/dynamic-table-builder.js';\nexport function parseTableExpressionOrList(table) {\n    if (isReadonlyArray(table)) {\n        return table.map((it) => parseTableExpression(it));\n    }\n    else {\n        return [parseTableExpression(table)];\n    }\n}\nexport function parseTableExpression(table) {\n    if (isString(table)) {\n        return parseAliasedTable(table);\n    }\n    else if (isAliasedDynamicTableBuilder(table)) {\n        return table.toOperationNode();\n    }\n    else {\n        return parseAliasedExpression(table);\n    }\n}\nexport function parseAliasedTable(from) {\n    const ALIAS_SEPARATOR = ' as ';\n    if (from.includes(ALIAS_SEPARATOR)) {\n        const [table, alias] = from.split(ALIAS_SEPARATOR).map(trim);\n        return AliasNode.create(parseTable(table), IdentifierNode.create(alias));\n    }\n    else {\n        return parseTable(from);\n    }\n}\nexport function parseTable(from) {\n    const SCHEMA_SEPARATOR = '.';\n    if (from.includes(SCHEMA_SEPARATOR)) {\n        const [schema, table] = from.split(SCHEMA_SEPARATOR).map(trim);\n        return TableNode.createWithSchema(schema, table);\n    }\n    else {\n        return TableNode.create(from);\n    }\n}\nfunction trim(str) {\n    return str.trim();\n}\n", "/// <reference types=\"./add-column-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const AddColumnNode = freeze({\n    is(node) {\n        return node.kind === 'AddColumnNode';\n    },\n    create(column) {\n        return freeze({\n            kind: 'AddColumnNode',\n            column,\n        });\n    },\n});\n", "/// <reference types=\"./column-definition-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { ColumnNode } from './column-node.js';\n/**\n * @internal\n */\nexport const ColumnDefinitionNode = freeze({\n    is(node) {\n        return node.kind === 'ColumnDefinitionNode';\n    },\n    create(column, dataType) {\n        return freeze({\n            kind: 'ColumnDefinitionNode',\n            column: ColumnNode.create(column),\n            dataType,\n        });\n    },\n    cloneWithFrontModifier(node, modifier) {\n        return freeze({\n            ...node,\n            frontModifiers: node.frontModifiers\n                ? freeze([...node.frontModifiers, modifier])\n                : [modifier],\n        });\n    },\n    cloneWithEndModifier(node, modifier) {\n        return freeze({\n            ...node,\n            endModifiers: node.endModifiers\n                ? freeze([...node.endModifiers, modifier])\n                : [modifier],\n        });\n    },\n    cloneWith(node, props) {\n        return freeze({\n            ...node,\n            ...props,\n        });\n    },\n});\n", "/// <reference types=\"./drop-column-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { ColumnNode } from './column-node.js';\n/**\n * @internal\n */\nexport const DropColumnNode = freeze({\n    is(node) {\n        return node.kind === 'DropColumnNode';\n    },\n    create(column) {\n        return freeze({\n            kind: 'DropColumnNode',\n            column: ColumnNode.create(column),\n        });\n    },\n});\n", "/// <reference types=\"./rename-column-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { ColumnNode } from './column-node.js';\n/**\n * @internal\n */\nexport const RenameColumnNode = freeze({\n    is(node) {\n        return node.kind === 'RenameColumnNode';\n    },\n    create(column, newColumn) {\n        return freeze({\n            kind: 'RenameColumnNode',\n            column: ColumnNode.create(column),\n            renameTo: ColumnNode.create(newColumn),\n        });\n    },\n});\n", "/// <reference types=\"./check-constraint-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { IdentifierNode } from './identifier-node.js';\n/**\n * @internal\n */\nexport const CheckConstraintNode = freeze({\n    is(node) {\n        return node.kind === 'CheckConstraintNode';\n    },\n    create(expression, constraintName) {\n        return freeze({\n            kind: 'CheckConstraintNode',\n            expression,\n            name: constraintName ? IdentifierNode.create(constraintName) : undefined,\n        });\n    },\n});\n", "/// <reference types=\"./references-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nexport const ON_MODIFY_FOREIGN_ACTIONS = [\n    'no action',\n    'restrict',\n    'cascade',\n    'set null',\n    'set default',\n];\n/**\n * @internal\n */\nexport const ReferencesNode = freeze({\n    is(node) {\n        return node.kind === 'ReferencesNode';\n    },\n    create(table, columns) {\n        return freeze({\n            kind: 'ReferencesNode',\n            table,\n            columns: freeze([...columns]),\n        });\n    },\n    cloneWithOnDelete(references, onDelete) {\n        return freeze({\n            ...references,\n            onDelete,\n        });\n    },\n    cloneWithOnUpdate(references, onUpdate) {\n        return freeze({\n            ...references,\n            onUpdate,\n        });\n    },\n});\n", "/// <reference types=\"./default-value-parser.d.ts\" />\nimport { isOperationNodeSource } from '../operation-node/operation-node-source.js';\nimport { ValueNode } from '../operation-node/value-node.js';\nexport function parseDefaultValueExpression(value) {\n    return isOperationNodeSource(value)\n        ? value.toOperationNode()\n        : ValueNode.createImmediate(value);\n}\n", "/// <reference types=\"./generated-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const GeneratedNode = freeze({\n    is(node) {\n        return node.kind === 'GeneratedNode';\n    },\n    create(params) {\n        return freeze({\n            kind: 'GeneratedNode',\n            ...params,\n        });\n    },\n    createWithExpression(expression) {\n        return freeze({\n            kind: 'GeneratedNode',\n            always: true,\n            expression,\n        });\n    },\n    cloneWith(node, params) {\n        return freeze({\n            ...node,\n            ...params,\n        });\n    },\n});\n", "/// <reference types=\"./default-value-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const DefaultValueNode = freeze({\n    is(node) {\n        return node.kind === 'DefaultValueNode';\n    },\n    create(defaultValue) {\n        return freeze({\n            kind: 'DefaultValueNode',\n            defaultValue,\n        });\n    },\n});\n", "/// <reference types=\"./on-modify-action-parser.d.ts\" />\nimport { ON_MODIFY_FOREIGN_ACTIONS, } from '../operation-node/references-node.js';\nexport function parseOnModifyForeignAction(action) {\n    if (ON_MODIFY_FOREIGN_ACTIONS.includes(action)) {\n        return action;\n    }\n    throw new Error(`invalid OnModifyForeignAction ${action}`);\n}\n", "/// <reference types=\"./column-definition-builder.d.ts\" />\nimport { CheckConstraintNode } from '../operation-node/check-constraint-node.js';\nimport { ReferencesNode, } from '../operation-node/references-node.js';\nimport { SelectAllNode } from '../operation-node/select-all-node.js';\nimport { parseStringReference } from '../parser/reference-parser.js';\nimport { ColumnDefinitionNode } from '../operation-node/column-definition-node.js';\nimport { parseDefaultValueExpression, } from '../parser/default-value-parser.js';\nimport { GeneratedNode } from '../operation-node/generated-node.js';\nimport { DefaultValueNode } from '../operation-node/default-value-node.js';\nimport { parseOnModifyForeignAction } from '../parser/on-modify-action-parser.js';\nexport class ColumnDefinitionBuilder {\n    #node;\n    constructor(node) {\n        this.#node = node;\n    }\n    /**\n     * Adds `auto_increment` or `autoincrement` to the column definition\n     * depending on the dialect.\n     *\n     * Some dialects like PostgreSQL don't support this. On PostgreSQL\n     * you can use the `serial` or `bigserial` data type instead.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * await db.schema\n     *   .createTable('person')\n     *   .addColumn('id', 'integer', col => col.autoIncrement().primaryKey())\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (MySQL):\n     *\n     * ```sql\n     * create table `person` (\n     *   `id` integer primary key auto_increment\n     * )\n     * ```\n     */\n    autoIncrement() {\n        return new ColumnDefinitionBuilder(ColumnDefinitionNode.cloneWith(this.#node, { autoIncrement: true }));\n    }\n    /**\n     * Makes the column an identity column.\n     *\n     * This only works on some dialects like MS SQL Server (MSSQL).\n     *\n     * For PostgreSQL's `generated always as identity` use {@link generatedAlwaysAsIdentity}.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * await db.schema\n     *   .createTable('person')\n     *   .addColumn('id', 'integer', col => col.identity().primaryKey())\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (MSSQL):\n     *\n     * ```sql\n     * create table \"person\" (\n     *   \"id\" integer identity primary key\n     * )\n     * ```\n     */\n    identity() {\n        return new ColumnDefinitionBuilder(ColumnDefinitionNode.cloneWith(this.#node, { identity: true }));\n    }\n    /**\n     * Makes the column the primary key.\n     *\n     * If you want to specify a composite primary key use the\n     * {@link CreateTableBuilder.addPrimaryKeyConstraint} method.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * await db.schema\n     *   .createTable('person')\n     *   .addColumn('id', 'integer', col => col.primaryKey())\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (MySQL):\n     *\n     * ```sql\n     * create table `person` (\n     *   `id` integer primary key\n     * )\n     */\n    primaryKey() {\n        return new ColumnDefinitionBuilder(ColumnDefinitionNode.cloneWith(this.#node, { primaryKey: true }));\n    }\n    /**\n     * Adds a foreign key constraint for the column.\n     *\n     * If your database engine doesn't support foreign key constraints in the\n     * column definition (like MySQL 5) you need to call the table level\n     * {@link CreateTableBuilder.addForeignKeyConstraint} method instead.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * await db.schema\n     *   .createTable('pet')\n     *   .addColumn('owner_id', 'integer', (col) => col.references('person.id'))\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * create table \"pet\" (\n     *   \"owner_id\" integer references \"person\" (\"id\")\n     * )\n     * ```\n     */\n    references(ref) {\n        const references = parseStringReference(ref);\n        if (!references.table || SelectAllNode.is(references.column)) {\n            throw new Error(`invalid call references('${ref}'). The reference must have format table.column or schema.table.column`);\n        }\n        return new ColumnDefinitionBuilder(ColumnDefinitionNode.cloneWith(this.#node, {\n            references: ReferencesNode.create(references.table, [\n                references.column,\n            ]),\n        }));\n    }\n    /**\n     * Adds an `on delete` constraint for the foreign key column.\n     *\n     * If your database engine doesn't support foreign key constraints in the\n     * column definition (like MySQL 5) you need to call the table level\n     * {@link CreateTableBuilder.addForeignKeyConstraint} method instead.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * await db.schema\n     *   .createTable('pet')\n     *   .addColumn(\n     *     'owner_id',\n     *     'integer',\n     *     (col) => col.references('person.id').onDelete('cascade')\n     *   )\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * create table \"pet\" (\n     *   \"owner_id\" integer references \"person\" (\"id\") on delete cascade\n     * )\n     * ```\n     */\n    onDelete(onDelete) {\n        if (!this.#node.references) {\n            throw new Error('on delete constraint can only be added for foreign keys');\n        }\n        return new ColumnDefinitionBuilder(ColumnDefinitionNode.cloneWith(this.#node, {\n            references: ReferencesNode.cloneWithOnDelete(this.#node.references, parseOnModifyForeignAction(onDelete)),\n        }));\n    }\n    /**\n     * Adds an `on update` constraint for the foreign key column.\n     *\n     * If your database engine doesn't support foreign key constraints in the\n     * column definition (like MySQL 5) you need to call the table level\n     * {@link CreateTableBuilder.addForeignKeyConstraint} method instead.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * await db.schema\n     *   .createTable('pet')\n     *   .addColumn(\n     *     'owner_id',\n     *     'integer',\n     *     (col) => col.references('person.id').onUpdate('cascade')\n     *   )\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * create table \"pet\" (\n     *   \"owner_id\" integer references \"person\" (\"id\") on update cascade\n     * )\n     * ```\n     */\n    onUpdate(onUpdate) {\n        if (!this.#node.references) {\n            throw new Error('on update constraint can only be added for foreign keys');\n        }\n        return new ColumnDefinitionBuilder(ColumnDefinitionNode.cloneWith(this.#node, {\n            references: ReferencesNode.cloneWithOnUpdate(this.#node.references, parseOnModifyForeignAction(onUpdate)),\n        }));\n    }\n    /**\n     * Adds a unique constraint for the column.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * await db.schema\n     *   .createTable('person')\n     *   .addColumn('email', 'varchar(255)', col => col.unique())\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (MySQL):\n     *\n     * ```sql\n     * create table `person` (\n     *   `email` varchar(255) unique\n     * )\n     * ```\n     */\n    unique() {\n        return new ColumnDefinitionBuilder(ColumnDefinitionNode.cloneWith(this.#node, { unique: true }));\n    }\n    /**\n     * Adds a `not null` constraint for the column.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * await db.schema\n     *   .createTable('person')\n     *   .addColumn('first_name', 'varchar(255)', col => col.notNull())\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (MySQL):\n     *\n     * ```sql\n     * create table `person` (\n     *   `first_name` varchar(255) not null\n     * )\n     * ```\n     */\n    notNull() {\n        return new ColumnDefinitionBuilder(ColumnDefinitionNode.cloneWith(this.#node, { notNull: true }));\n    }\n    /**\n     * Adds a `unsigned` modifier for the column.\n     *\n     * This only works on some dialects like MySQL.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * await db.schema\n     *   .createTable('person')\n     *   .addColumn('age', 'integer', col => col.unsigned())\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (MySQL):\n     *\n     * ```sql\n     * create table `person` (\n     *   `age` integer unsigned\n     * )\n     * ```\n     */\n    unsigned() {\n        return new ColumnDefinitionBuilder(ColumnDefinitionNode.cloneWith(this.#node, { unsigned: true }));\n    }\n    /**\n     * Adds a default value constraint for the column.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * await db.schema\n     *   .createTable('pet')\n     *   .addColumn('number_of_legs', 'integer', (col) => col.defaultTo(4))\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (MySQL):\n     *\n     * ```sql\n     * create table `pet` (\n     *   `number_of_legs` integer default 4\n     * )\n     * ```\n     *\n     * Values passed to `defaultTo` are interpreted as value literals by default. You can define\n     * an arbitrary SQL expression using the {@link sql} template tag:\n     *\n     * ```ts\n     * import { sql } from 'kysely'\n     *\n     * await db.schema\n     *   .createTable('pet')\n     *   .addColumn(\n     *     'created_at',\n     *     'timestamp',\n     *     (col) => col.defaultTo(sql`CURRENT_TIMESTAMP`)\n     *   )\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (MySQL):\n     *\n     * ```sql\n     * create table `pet` (\n     *   `created_at` timestamp default CURRENT_TIMESTAMP\n     * )\n     * ```\n     */\n    defaultTo(value) {\n        return new ColumnDefinitionBuilder(ColumnDefinitionNode.cloneWith(this.#node, {\n            defaultTo: DefaultValueNode.create(parseDefaultValueExpression(value)),\n        }));\n    }\n    /**\n     * Adds a check constraint for the column.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * import { sql } from 'kysely'\n     *\n     * await db.schema\n     *   .createTable('pet')\n     *   .addColumn('number_of_legs', 'integer', (col) =>\n     *     col.check(sql`number_of_legs < 5`)\n     *   )\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (MySQL):\n     *\n     * ```sql\n     * create table `pet` (\n     *   `number_of_legs` integer check (number_of_legs < 5)\n     * )\n     * ```\n     */\n    check(expression) {\n        return new ColumnDefinitionBuilder(ColumnDefinitionNode.cloneWith(this.#node, {\n            check: CheckConstraintNode.create(expression.toOperationNode()),\n        }));\n    }\n    /**\n     * Makes the column a generated column using a `generated always as` statement.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * import { sql } from 'kysely'\n     *\n     * await db.schema\n     *   .createTable('person')\n     *   .addColumn('full_name', 'varchar(255)',\n     *     (col) => col.generatedAlwaysAs(sql`concat(first_name, ' ', last_name)`)\n     *   )\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (MySQL):\n     *\n     * ```sql\n     * create table `person` (\n     *   `full_name` varchar(255) generated always as (concat(first_name, ' ', last_name))\n     * )\n     * ```\n     */\n    generatedAlwaysAs(expression) {\n        return new ColumnDefinitionBuilder(ColumnDefinitionNode.cloneWith(this.#node, {\n            generated: GeneratedNode.createWithExpression(expression.toOperationNode()),\n        }));\n    }\n    /**\n     * Adds the `generated always as identity` specifier.\n     *\n     * This only works on some dialects like PostgreSQL.\n     *\n     * For MS SQL Server (MSSQL)'s identity column use {@link identity}.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * await db.schema\n     *   .createTable('person')\n     *   .addColumn('id', 'integer', col => col.generatedAlwaysAsIdentity().primaryKey())\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * create table \"person\" (\n     *   \"id\" integer generated always as identity primary key\n     * )\n     * ```\n     */\n    generatedAlwaysAsIdentity() {\n        return new ColumnDefinitionBuilder(ColumnDefinitionNode.cloneWith(this.#node, {\n            generated: GeneratedNode.create({ identity: true, always: true }),\n        }));\n    }\n    /**\n     * Adds the `generated by default as identity` specifier on supported dialects.\n     *\n     * This only works on some dialects like PostgreSQL.\n     *\n     * For MS SQL Server (MSSQL)'s identity column use {@link identity}.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * await db.schema\n     *   .createTable('person')\n     *   .addColumn('id', 'integer', col => col.generatedByDefaultAsIdentity().primaryKey())\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * create table \"person\" (\n     *   \"id\" integer generated by default as identity primary key\n     * )\n     * ```\n     */\n    generatedByDefaultAsIdentity() {\n        return new ColumnDefinitionBuilder(ColumnDefinitionNode.cloneWith(this.#node, {\n            generated: GeneratedNode.create({ identity: true, byDefault: true }),\n        }));\n    }\n    /**\n     * Makes a generated column stored instead of virtual. This method can only\n     * be used with {@link generatedAlwaysAs}\n     *\n     * ### Examples\n     *\n     * ```ts\n     * import { sql } from 'kysely'\n     *\n     * await db.schema\n     *   .createTable('person')\n     *   .addColumn('full_name', 'varchar(255)', (col) => col\n     *     .generatedAlwaysAs(sql`concat(first_name, ' ', last_name)`)\n     *     .stored()\n     *   )\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (MySQL):\n     *\n     * ```sql\n     * create table `person` (\n     *   `full_name` varchar(255) generated always as (concat(first_name, ' ', last_name)) stored\n     * )\n     * ```\n     */\n    stored() {\n        if (!this.#node.generated) {\n            throw new Error('stored() can only be called after generatedAlwaysAs');\n        }\n        return new ColumnDefinitionBuilder(ColumnDefinitionNode.cloneWith(this.#node, {\n            generated: GeneratedNode.cloneWith(this.#node.generated, {\n                stored: true,\n            }),\n        }));\n    }\n    /**\n     * This can be used to add any additional SQL right after the column's data type.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * import { sql } from 'kysely'\n     *\n     * await db.schema\n     *   .createTable('person')\n     *   .addColumn('id', 'integer', col => col.primaryKey())\n     *   .addColumn(\n     *     'first_name',\n     *     'varchar(36)',\n     *     (col) => col.modifyFront(sql`collate utf8mb4_general_ci`).notNull()\n     *   )\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (MySQL):\n     *\n     * ```sql\n     * create table `person` (\n     *   `id` integer primary key,\n     *   `first_name` varchar(36) collate utf8mb4_general_ci not null\n     * )\n     * ```\n     */\n    modifyFront(modifier) {\n        return new ColumnDefinitionBuilder(ColumnDefinitionNode.cloneWithFrontModifier(this.#node, modifier.toOperationNode()));\n    }\n    /**\n     * Adds `nulls not distinct` specifier.\n     * Should be used with `unique` constraint.\n     *\n     * This only works on some dialects like PostgreSQL.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * db.schema\n     *   .createTable('person')\n     *   .addColumn('id', 'integer', col => col.primaryKey())\n     *   .addColumn('first_name', 'varchar(30)', col => col.unique().nullsNotDistinct())\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * create table \"person\" (\n     *   \"id\" integer primary key,\n     *   \"first_name\" varchar(30) unique nulls not distinct\n     * )\n     * ```\n     */\n    nullsNotDistinct() {\n        return new ColumnDefinitionBuilder(ColumnDefinitionNode.cloneWith(this.#node, { nullsNotDistinct: true }));\n    }\n    /**\n     * Adds `if not exists` specifier. This only works for PostgreSQL.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * await db.schema\n     *   .alterTable('person')\n     *   .addColumn('email', 'varchar(255)', col => col.unique().ifNotExists())\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * alter table \"person\" add column if not exists \"email\" varchar(255) unique\n     * ```\n     */\n    ifNotExists() {\n        return new ColumnDefinitionBuilder(ColumnDefinitionNode.cloneWith(this.#node, { ifNotExists: true }));\n    }\n    /**\n     * This can be used to add any additional SQL to the end of the column definition.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * import { sql } from 'kysely'\n     *\n     * await db.schema\n     *   .createTable('person')\n     *   .addColumn('id', 'integer', col => col.primaryKey())\n     *   .addColumn(\n     *     'age',\n     *     'integer',\n     *     col => col.unsigned()\n     *       .notNull()\n     *       .modifyEnd(sql`comment ${sql.lit('it is not polite to ask a woman her age')}`)\n     *   )\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (MySQL):\n     *\n     * ```sql\n     * create table `person` (\n     *   `id` integer primary key,\n     *   `age` integer unsigned not null comment 'it is not polite to ask a woman her age'\n     * )\n     * ```\n     */\n    modifyEnd(modifier) {\n        return new ColumnDefinitionBuilder(ColumnDefinitionNode.cloneWithEndModifier(this.#node, modifier.toOperationNode()));\n    }\n    /**\n     * Simply calls the provided function passing `this` as the only argument. `$call` returns\n     * what the provided function returns.\n     */\n    $call(func) {\n        return func(this);\n    }\n    toOperationNode() {\n        return this.#node;\n    }\n}\n", "/// <reference types=\"./modify-column-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const ModifyColumnNode = freeze({\n    is(node) {\n        return node.kind === 'ModifyColumnNode';\n    },\n    create(column) {\n        return freeze({\n            kind: 'ModifyColumnNode',\n            column,\n        });\n    },\n});\n", "/// <reference types=\"./foreign-key-constraint-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { IdentifierNode } from './identifier-node.js';\nimport { ReferencesNode } from './references-node.js';\n/**\n * @internal\n */\nexport const ForeignKeyConstraintNode = freeze({\n    is(node) {\n        return node.kind === 'ForeignKeyConstraintNode';\n    },\n    create(sourceColumns, targetTable, targetColumns, constraintName) {\n        return freeze({\n            kind: 'ForeignKeyConstraintNode',\n            columns: sourceColumns,\n            references: ReferencesNode.create(targetTable, targetColumns),\n            name: constraintName ? IdentifierNode.create(constraintName) : undefined,\n        });\n    },\n    cloneWith(node, props) {\n        return freeze({\n            ...node,\n            ...props,\n        });\n    },\n});\n", "/// <reference types=\"./foreign-key-constraint-builder.d.ts\" />\nimport { ForeignKeyConstraintNode } from '../operation-node/foreign-key-constraint-node.js';\nimport { parseOnModifyForeignAction } from '../parser/on-modify-action-parser.js';\nexport class ForeignKeyConstraintBuilder {\n    #node;\n    constructor(node) {\n        this.#node = node;\n    }\n    onDelete(onDelete) {\n        return new ForeignKeyConstraintBuilder(ForeignKeyConstraintNode.cloneWith(this.#node, {\n            onDelete: parseOnModifyForeignAction(onDelete),\n        }));\n    }\n    onUpdate(onUpdate) {\n        return new ForeignKeyConstraintBuilder(ForeignKeyConstraintNode.cloneWith(this.#node, {\n            onUpdate: parseOnModifyForeignAction(onUpdate),\n        }));\n    }\n    deferrable() {\n        return new ForeignKeyConstraintBuilder(ForeignKeyConstraintNode.cloneWith(this.#node, { deferrable: true }));\n    }\n    notDeferrable() {\n        return new ForeignKeyConstraintBuilder(ForeignKeyConstraintNode.cloneWith(this.#node, { deferrable: false }));\n    }\n    initiallyDeferred() {\n        return new ForeignKeyConstraintBuilder(ForeignKeyConstraintNode.cloneWith(this.#node, {\n            initiallyDeferred: true,\n        }));\n    }\n    initiallyImmediate() {\n        return new ForeignKeyConstraintBuilder(ForeignKeyConstraintNode.cloneWith(this.#node, {\n            initiallyDeferred: false,\n        }));\n    }\n    /**\n     * Simply calls the provided function passing `this` as the only argument. `$call` returns\n     * what the provided function returns.\n     */\n    $call(func) {\n        return func(this);\n    }\n    toOperationNode() {\n        return this.#node;\n    }\n}\n", "/// <reference types=\"./add-constraint-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const AddConstraintNode = freeze({\n    is(node) {\n        return node.kind === 'AddConstraintNode';\n    },\n    create(constraint) {\n        return freeze({\n            kind: 'AddConstraintNode',\n            constraint,\n        });\n    },\n});\n", "/// <reference types=\"./unique-constraint-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { ColumnNode } from './column-node.js';\nimport { IdentifierNode } from './identifier-node.js';\n/**\n * @internal\n */\nexport const UniqueConstraintNode = freeze({\n    is(node) {\n        return node.kind === 'UniqueConstraintNode';\n    },\n    create(columns, constraintName, nullsNotDistinct) {\n        return freeze({\n            kind: 'UniqueConstraintNode',\n            columns: freeze(columns.map(ColumnNode.create)),\n            name: constraintName ? IdentifierNode.create(constraintName) : undefined,\n            nullsNotDistinct,\n        });\n    },\n    cloneWith(node, props) {\n        return freeze({\n            ...node,\n            ...props,\n        });\n    },\n});\n", "/// <reference types=\"./drop-constraint-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { IdentifierNode } from './identifier-node.js';\n/**\n * @internal\n */\nexport const DropConstraintNode = freeze({\n    is(node) {\n        return node.kind === 'DropConstraintNode';\n    },\n    create(constraintName) {\n        return freeze({\n            kind: 'DropConstraintNode',\n            constraintName: IdentifierNode.create(constraintName),\n        });\n    },\n    cloneWith(dropConstraint, props) {\n        return freeze({\n            ...dropConstraint,\n            ...props,\n        });\n    },\n});\n", "/// <reference types=\"./alter-column-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { ColumnNode } from './column-node.js';\n/**\n * @internal\n */\nexport const AlterColumnNode = freeze({\n    is(node) {\n        return node.kind === 'AlterColumnNode';\n    },\n    create(column, prop, value) {\n        return freeze({\n            kind: 'AlterColumnNode',\n            column: ColumnNode.create(column),\n            [prop]: value,\n        });\n    },\n});\n", "/// <reference types=\"./alter-column-builder.d.ts\" />\nimport { AlterColumnNode } from '../operation-node/alter-column-node.js';\nimport { parseDataTypeExpression, } from '../parser/data-type-parser.js';\nimport { parseDefaultValueExpression, } from '../parser/default-value-parser.js';\nexport class AlterColumnBuilder {\n    #column;\n    constructor(column) {\n        this.#column = column;\n    }\n    setDataType(dataType) {\n        return new AlteredColumnBuilder(AlterColumnNode.create(this.#column, 'dataType', parseDataTypeExpression(dataType)));\n    }\n    setDefault(value) {\n        return new AlteredColumnBuilder(AlterColumnNode.create(this.#column, 'setDefault', parseDefaultValueExpression(value)));\n    }\n    dropDefault() {\n        return new AlteredColumnBuilder(AlterColumnNode.create(this.#column, 'dropDefault', true));\n    }\n    setNotNull() {\n        return new AlteredColumnBuilder(AlterColumnNode.create(this.#column, 'setNotNull', true));\n    }\n    dropNotNull() {\n        return new AlteredColumnBuilder(AlterColumnNode.create(this.#column, 'dropNotNull', true));\n    }\n    /**\n     * Simply calls the provided function passing `this` as the only argument. `$call` returns\n     * what the provided function returns.\n     */\n    $call(func) {\n        return func(this);\n    }\n}\n/**\n * Allows us to force consumers to do exactly one alteration to a column.\n *\n * One cannot do no alterations:\n *\n * ```ts\n * await db.schema\n *   .alterTable('person')\n * //  .execute() // Property 'execute' does not exist on type 'AlteredColumnBuilder'.\n * ```\n *\n * ```ts\n * await db.schema\n *   .alterTable('person')\n * //  .alterColumn('age', (ac) => ac) // Type 'AlterColumnBuilder' is not assignable to type 'AlteredColumnBuilder'.\n * //  .execute()\n * ```\n *\n * One cannot do multiple alterations:\n *\n * ```ts\n * await db.schema\n *   .alterTable('person')\n * //  .alterColumn('age', (ac) => ac.dropNotNull().setNotNull()) // Property 'setNotNull' does not exist on type 'AlteredColumnBuilder'.\n * //  .execute()\n * ```\n *\n * Which would now throw a compilation error, instead of a runtime error.\n */\nexport class AlteredColumnBuilder {\n    #alterColumnNode;\n    constructor(alterColumnNode) {\n        this.#alterColumnNode = alterColumnNode;\n    }\n    toOperationNode() {\n        return this.#alterColumnNode;\n    }\n}\n", "/// <reference types=\"./alter-table-executor.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nexport class AlterTableExecutor {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    toOperationNode() {\n        return this.#props.executor.transformQuery(this.#props.node, this.#props.queryId);\n    }\n    compile() {\n        return this.#props.executor.compileQuery(this.toOperationNode(), this.#props.queryId);\n    }\n    async execute() {\n        await this.#props.executor.executeQuery(this.compile(), this.#props.queryId);\n    }\n}\n", "/// <reference types=\"./alter-table-add-foreign-key-constraint-builder.d.ts\" />\nimport { AddConstraintNode } from '../operation-node/add-constraint-node.js';\nimport { AlterTableNode } from '../operation-node/alter-table-node.js';\nimport { freeze } from '../util/object-utils.js';\nexport class AlterTableAddForeignKeyConstraintBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    onDelete(onDelete) {\n        return new AlterTableAddForeignKeyConstraintBuilder({\n            ...this.#props,\n            constraintBuilder: this.#props.constraintBuilder.onDelete(onDelete),\n        });\n    }\n    onUpdate(onUpdate) {\n        return new AlterTableAddForeignKeyConstraintBuilder({\n            ...this.#props,\n            constraintBuilder: this.#props.constraintBuilder.onUpdate(onUpdate),\n        });\n    }\n    deferrable() {\n        return new AlterTableAddForeignKeyConstraintBuilder({\n            ...this.#props,\n            constraintBuilder: this.#props.constraintBuilder.deferrable(),\n        });\n    }\n    notDeferrable() {\n        return new AlterTableAddForeignKeyConstraintBuilder({\n            ...this.#props,\n            constraintBuilder: this.#props.constraintBuilder.notDeferrable(),\n        });\n    }\n    initiallyDeferred() {\n        return new AlterTableAddForeignKeyConstraintBuilder({\n            ...this.#props,\n            constraintBuilder: this.#props.constraintBuilder.initiallyDeferred(),\n        });\n    }\n    initiallyImmediate() {\n        return new AlterTableAddForeignKeyConstraintBuilder({\n            ...this.#props,\n            constraintBuilder: this.#props.constraintBuilder.initiallyImmediate(),\n        });\n    }\n    /**\n     * Simply calls the provided function passing `this` as the only argument. `$call` returns\n     * what the provided function returns.\n     */\n    $call(func) {\n        return func(this);\n    }\n    toOperationNode() {\n        return this.#props.executor.transformQuery(AlterTableNode.cloneWithTableProps(this.#props.node, {\n            addConstraint: AddConstraintNode.create(this.#props.constraintBuilder.toOperationNode()),\n        }), this.#props.queryId);\n    }\n    compile() {\n        return this.#props.executor.compileQuery(this.toOperationNode(), this.#props.queryId);\n    }\n    async execute() {\n        await this.#props.executor.executeQuery(this.compile(), this.#props.queryId);\n    }\n}\n", "/// <reference types=\"./alter-table-drop-constraint-builder.d.ts\" />\nimport { AlterTableNode } from '../operation-node/alter-table-node.js';\nimport { DropConstraintNode } from '../operation-node/drop-constraint-node.js';\nimport { freeze } from '../util/object-utils.js';\nexport class AlterTableDropConstraintBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    ifExists() {\n        return new AlterTableDropConstraintBuilder({\n            ...this.#props,\n            node: AlterTableNode.cloneWithTableProps(this.#props.node, {\n                dropConstraint: DropConstraintNode.cloneWith(this.#props.node.dropConstraint, {\n                    ifExists: true,\n                }),\n            }),\n        });\n    }\n    cascade() {\n        return new AlterTableDropConstraintBuilder({\n            ...this.#props,\n            node: AlterTableNode.cloneWithTableProps(this.#props.node, {\n                dropConstraint: DropConstraintNode.cloneWith(this.#props.node.dropConstraint, {\n                    modifier: 'cascade',\n                }),\n            }),\n        });\n    }\n    restrict() {\n        return new AlterTableDropConstraintBuilder({\n            ...this.#props,\n            node: AlterTableNode.cloneWithTableProps(this.#props.node, {\n                dropConstraint: DropConstraintNode.cloneWith(this.#props.node.dropConstraint, {\n                    modifier: 'restrict',\n                }),\n            }),\n        });\n    }\n    /**\n     * Simply calls the provided function passing `this` as the only argument. `$call` returns\n     * what the provided function returns.\n     */\n    $call(func) {\n        return func(this);\n    }\n    toOperationNode() {\n        return this.#props.executor.transformQuery(this.#props.node, this.#props.queryId);\n    }\n    compile() {\n        return this.#props.executor.compileQuery(this.toOperationNode(), this.#props.queryId);\n    }\n    async execute() {\n        await this.#props.executor.executeQuery(this.compile(), this.#props.queryId);\n    }\n}\n", "/// <reference types=\"./primary-key-constraint-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { ColumnNode } from './column-node.js';\nimport { IdentifierNode } from './identifier-node.js';\n/**\n * @internal\n */\nexport const PrimaryKeyConstraintNode = freeze({\n    is(node) {\n        return node.kind === 'PrimaryKeyConstraintNode';\n    },\n    create(columns, constraintName) {\n        return freeze({\n            kind: 'PrimaryKeyConstraintNode',\n            columns: freeze(columns.map(ColumnNode.create)),\n            name: constraintName ? IdentifierNode.create(constraintName) : undefined,\n        });\n    },\n    cloneWith(node, props) {\n        return freeze({ ...node, ...props });\n    },\n});\n/**\n * Backwards compatibility for a typo in the codebase.\n *\n * @deprecated Use {@link PrimaryKeyConstraintNode} instead.\n */\nexport const PrimaryConstraintNode = PrimaryKeyConstraintNode;\n", "/// <reference types=\"./add-index-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { IdentifierNode } from './identifier-node.js';\n/**\n * @internal\n */\nexport const AddIndexNode = freeze({\n    is(node) {\n        return node.kind === 'AddIndexNode';\n    },\n    create(name) {\n        return freeze({\n            kind: 'AddIndexNode',\n            name: IdentifierNode.create(name),\n        });\n    },\n    cloneWith(node, props) {\n        return freeze({\n            ...node,\n            ...props,\n        });\n    },\n    cloneWithColumns(node, columns) {\n        return freeze({\n            ...node,\n            columns: [...(node.columns || []), ...columns],\n        });\n    },\n});\n", "/// <reference types=\"./alter-table-add-index-builder.d.ts\" />\nimport { AddIndexNode } from '../operation-node/add-index-node.js';\nimport { AlterTableNode } from '../operation-node/alter-table-node.js';\nimport { RawNode } from '../operation-node/raw-node.js';\nimport { parseOrderedColumnName, } from '../parser/reference-parser.js';\nimport { freeze } from '../util/object-utils.js';\nexport class AlterTableAddIndexBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    /**\n     * Makes the index unique.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * await db.schema\n     *   .alterTable('person')\n     *   .addIndex('person_first_name_index')\n     *   .unique()\n     *   .column('email')\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (MySQL):\n     *\n     * ```sql\n     * alter table `person` add unique index `person_first_name_index` (`email`)\n     * ```\n     */\n    unique() {\n        return new AlterTableAddIndexBuilder({\n            ...this.#props,\n            node: AlterTableNode.cloneWithTableProps(this.#props.node, {\n                addIndex: AddIndexNode.cloneWith(this.#props.node.addIndex, {\n                    unique: true,\n                }),\n            }),\n        });\n    }\n    /**\n     * Adds a column to the index.\n     *\n     * Also see {@link columns} for adding multiple columns at once or {@link expression}\n     * for specifying an arbitrary expression.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * await db.schema\n     *   .alterTable('person')\n     *   .addIndex('person_first_name_and_age_index')\n     *   .column('first_name')\n     *   .column('age desc')\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (MySQL):\n     *\n     * ```sql\n     * alter table `person` add index `person_first_name_and_age_index` (`first_name`, `age` desc)\n     * ```\n     */\n    column(column) {\n        return new AlterTableAddIndexBuilder({\n            ...this.#props,\n            node: AlterTableNode.cloneWithTableProps(this.#props.node, {\n                addIndex: AddIndexNode.cloneWithColumns(this.#props.node.addIndex, [\n                    parseOrderedColumnName(column),\n                ]),\n            }),\n        });\n    }\n    /**\n     * Specifies a list of columns for the index.\n     *\n     * Also see {@link column} for adding a single column or {@link expression} for\n     * specifying an arbitrary expression.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * await db.schema\n     *   .alterTable('person')\n     *   .addIndex('person_first_name_and_age_index')\n     *   .columns(['first_name', 'age desc'])\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (MySQL):\n     *\n     * ```sql\n     * alter table `person` add index `person_first_name_and_age_index` (`first_name`, `age` desc)\n     * ```\n     */\n    columns(columns) {\n        return new AlterTableAddIndexBuilder({\n            ...this.#props,\n            node: AlterTableNode.cloneWithTableProps(this.#props.node, {\n                addIndex: AddIndexNode.cloneWithColumns(this.#props.node.addIndex, columns.map(parseOrderedColumnName)),\n            }),\n        });\n    }\n    /**\n     * Specifies an arbitrary expression for the index.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * import { sql } from 'kysely'\n     *\n     * await db.schema\n     *   .alterTable('person')\n     *   .addIndex('person_first_name_index')\n     *   .expression(sql<boolean>`(first_name < 'Sami')`)\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (MySQL):\n     *\n     * ```sql\n     * alter table `person` add index `person_first_name_index` ((first_name < 'Sami'))\n     * ```\n     */\n    expression(expression) {\n        return new AlterTableAddIndexBuilder({\n            ...this.#props,\n            node: AlterTableNode.cloneWithTableProps(this.#props.node, {\n                addIndex: AddIndexNode.cloneWithColumns(this.#props.node.addIndex, [\n                    expression.toOperationNode(),\n                ]),\n            }),\n        });\n    }\n    using(indexType) {\n        return new AlterTableAddIndexBuilder({\n            ...this.#props,\n            node: AlterTableNode.cloneWithTableProps(this.#props.node, {\n                addIndex: AddIndexNode.cloneWith(this.#props.node.addIndex, {\n                    using: RawNode.createWithSql(indexType),\n                }),\n            }),\n        });\n    }\n    /**\n     * Simply calls the provided function passing `this` as the only argument. `$call` returns\n     * what the provided function returns.\n     */\n    $call(func) {\n        return func(this);\n    }\n    toOperationNode() {\n        return this.#props.executor.transformQuery(this.#props.node, this.#props.queryId);\n    }\n    compile() {\n        return this.#props.executor.compileQuery(this.toOperationNode(), this.#props.queryId);\n    }\n    async execute() {\n        await this.#props.executor.executeQuery(this.compile(), this.#props.queryId);\n    }\n}\n", "/// <reference types=\"./unique-constraint-builder.d.ts\" />\nimport { UniqueConstraintNode } from '../operation-node/unique-constraint-node.js';\nexport class UniqueConstraintNodeBuilder {\n    #node;\n    constructor(node) {\n        this.#node = node;\n    }\n    /**\n     * Adds `nulls not distinct` to the unique constraint definition\n     *\n     * Supported by PostgreSQL dialect only\n     */\n    nullsNotDistinct() {\n        return new UniqueConstraintNodeBuilder(UniqueConstraintNode.cloneWith(this.#node, { nullsNotDistinct: true }));\n    }\n    deferrable() {\n        return new UniqueConstraintNodeBuilder(UniqueConstraintNode.cloneWith(this.#node, { deferrable: true }));\n    }\n    notDeferrable() {\n        return new UniqueConstraintNodeBuilder(UniqueConstraintNode.cloneWith(this.#node, { deferrable: false }));\n    }\n    initiallyDeferred() {\n        return new UniqueConstraintNodeBuilder(UniqueConstraintNode.cloneWith(this.#node, {\n            initiallyDeferred: true,\n        }));\n    }\n    initiallyImmediate() {\n        return new UniqueConstraintNodeBuilder(UniqueConstraintNode.cloneWith(this.#node, {\n            initiallyDeferred: false,\n        }));\n    }\n    /**\n     * Simply calls the provided function passing `this` as the only argument. `$call` returns\n     * what the provided function returns.\n     */\n    $call(func) {\n        return func(this);\n    }\n    toOperationNode() {\n        return this.#node;\n    }\n}\n", "/// <reference types=\"./primary-key-constraint-builder.d.ts\" />\nimport { PrimaryKeyConstraintNode } from '../operation-node/primary-key-constraint-node.js';\nexport class PrimaryKeyConstraintBuilder {\n    #node;\n    constructor(node) {\n        this.#node = node;\n    }\n    deferrable() {\n        return new PrimaryKeyConstraintBuilder(PrimaryKeyConstraintNode.cloneWith(this.#node, { deferrable: true }));\n    }\n    notDeferrable() {\n        return new PrimaryKeyConstraintBuilder(PrimaryKeyConstraintNode.cloneWith(this.#node, { deferrable: false }));\n    }\n    initiallyDeferred() {\n        return new PrimaryKeyConstraintBuilder(PrimaryKeyConstraintNode.cloneWith(this.#node, {\n            initiallyDeferred: true,\n        }));\n    }\n    initiallyImmediate() {\n        return new PrimaryKeyConstraintBuilder(PrimaryKeyConstraintNode.cloneWith(this.#node, {\n            initiallyDeferred: false,\n        }));\n    }\n    /**\n     * Simply calls the provided function passing `this` as the only argument. `$call` returns\n     * what the provided function returns.\n     */\n    $call(func) {\n        return func(this);\n    }\n    toOperationNode() {\n        return this.#node;\n    }\n}\n", "/// <reference types=\"./check-constraint-builder.d.ts\" />\nexport class CheckConstraintBuilder {\n    #node;\n    constructor(node) {\n        this.#node = node;\n    }\n    /**\n     * Simply calls the provided function passing `this` as the only argument. `$call` returns\n     * what the provided function returns.\n     */\n    $call(func) {\n        return func(this);\n    }\n    toOperationNode() {\n        return this.#node;\n    }\n}\n", "/// <reference types=\"./rename-constraint-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { IdentifierNode } from './identifier-node.js';\n/**\n * @internal\n */\nexport const RenameConstraintNode = freeze({\n    is(node) {\n        return node.kind === 'RenameConstraintNode';\n    },\n    create(oldName, newName) {\n        return freeze({\n            kind: 'RenameConstraintNode',\n            oldName: IdentifierNode.create(oldName),\n            newName: IdentifierNode.create(newName),\n        });\n    },\n});\n", "/// <reference types=\"./alter-table-builder.d.ts\" />\nimport { AddColumnNode } from '../operation-node/add-column-node.js';\nimport { AlterTableNode } from '../operation-node/alter-table-node.js';\nimport { ColumnDefinitionNode } from '../operation-node/column-definition-node.js';\nimport { DropColumnNode } from '../operation-node/drop-column-node.js';\nimport { IdentifierNode } from '../operation-node/identifier-node.js';\nimport { RenameColumnNode } from '../operation-node/rename-column-node.js';\nimport { freeze, noop } from '../util/object-utils.js';\nimport { ColumnDefinitionBuilder, } from './column-definition-builder.js';\nimport { ModifyColumnNode } from '../operation-node/modify-column-node.js';\nimport { parseDataTypeExpression, } from '../parser/data-type-parser.js';\nimport { ForeignKeyConstraintBuilder, } from './foreign-key-constraint-builder.js';\nimport { AddConstraintNode } from '../operation-node/add-constraint-node.js';\nimport { UniqueConstraintNode } from '../operation-node/unique-constraint-node.js';\nimport { CheckConstraintNode } from '../operation-node/check-constraint-node.js';\nimport { ForeignKeyConstraintNode } from '../operation-node/foreign-key-constraint-node.js';\nimport { ColumnNode } from '../operation-node/column-node.js';\nimport { parseTable } from '../parser/table-parser.js';\nimport { DropConstraintNode } from '../operation-node/drop-constraint-node.js';\nimport { AlterColumnBuilder, } from './alter-column-builder.js';\nimport { AlterTableExecutor } from './alter-table-executor.js';\nimport { AlterTableAddForeignKeyConstraintBuilder } from './alter-table-add-foreign-key-constraint-builder.js';\nimport { AlterTableDropConstraintBuilder } from './alter-table-drop-constraint-builder.js';\nimport { PrimaryKeyConstraintNode } from '../operation-node/primary-key-constraint-node.js';\nimport { DropIndexNode } from '../operation-node/drop-index-node.js';\nimport { AddIndexNode } from '../operation-node/add-index-node.js';\nimport { AlterTableAddIndexBuilder } from './alter-table-add-index-builder.js';\nimport { UniqueConstraintNodeBuilder, } from './unique-constraint-builder.js';\nimport { PrimaryKeyConstraintBuilder, } from './primary-key-constraint-builder.js';\nimport { CheckConstraintBuilder, } from './check-constraint-builder.js';\nimport { RenameConstraintNode } from '../operation-node/rename-constraint-node.js';\n/**\n * This builder can be used to create a `alter table` query.\n */\nexport class AlterTableBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    renameTo(newTableName) {\n        return new AlterTableExecutor({\n            ...this.#props,\n            node: AlterTableNode.cloneWithTableProps(this.#props.node, {\n                renameTo: parseTable(newTableName),\n            }),\n        });\n    }\n    setSchema(newSchema) {\n        return new AlterTableExecutor({\n            ...this.#props,\n            node: AlterTableNode.cloneWithTableProps(this.#props.node, {\n                setSchema: IdentifierNode.create(newSchema),\n            }),\n        });\n    }\n    alterColumn(column, alteration) {\n        const builder = alteration(new AlterColumnBuilder(column));\n        return new AlterTableColumnAlteringBuilder({\n            ...this.#props,\n            node: AlterTableNode.cloneWithColumnAlteration(this.#props.node, builder.toOperationNode()),\n        });\n    }\n    dropColumn(column) {\n        return new AlterTableColumnAlteringBuilder({\n            ...this.#props,\n            node: AlterTableNode.cloneWithColumnAlteration(this.#props.node, DropColumnNode.create(column)),\n        });\n    }\n    renameColumn(column, newColumn) {\n        return new AlterTableColumnAlteringBuilder({\n            ...this.#props,\n            node: AlterTableNode.cloneWithColumnAlteration(this.#props.node, RenameColumnNode.create(column, newColumn)),\n        });\n    }\n    addColumn(columnName, dataType, build = noop) {\n        const builder = build(new ColumnDefinitionBuilder(ColumnDefinitionNode.create(columnName, parseDataTypeExpression(dataType))));\n        return new AlterTableColumnAlteringBuilder({\n            ...this.#props,\n            node: AlterTableNode.cloneWithColumnAlteration(this.#props.node, AddColumnNode.create(builder.toOperationNode())),\n        });\n    }\n    modifyColumn(columnName, dataType, build = noop) {\n        const builder = build(new ColumnDefinitionBuilder(ColumnDefinitionNode.create(columnName, parseDataTypeExpression(dataType))));\n        return new AlterTableColumnAlteringBuilder({\n            ...this.#props,\n            node: AlterTableNode.cloneWithColumnAlteration(this.#props.node, ModifyColumnNode.create(builder.toOperationNode())),\n        });\n    }\n    /**\n     * See {@link CreateTableBuilder.addUniqueConstraint}\n     */\n    addUniqueConstraint(constraintName, columns, build = noop) {\n        const uniqueConstraintBuilder = build(new UniqueConstraintNodeBuilder(UniqueConstraintNode.create(columns, constraintName)));\n        return new AlterTableExecutor({\n            ...this.#props,\n            node: AlterTableNode.cloneWithTableProps(this.#props.node, {\n                addConstraint: AddConstraintNode.create(uniqueConstraintBuilder.toOperationNode()),\n            }),\n        });\n    }\n    /**\n     * See {@link CreateTableBuilder.addCheckConstraint}\n     */\n    addCheckConstraint(constraintName, checkExpression, build = noop) {\n        const constraintBuilder = build(new CheckConstraintBuilder(CheckConstraintNode.create(checkExpression.toOperationNode(), constraintName)));\n        return new AlterTableExecutor({\n            ...this.#props,\n            node: AlterTableNode.cloneWithTableProps(this.#props.node, {\n                addConstraint: AddConstraintNode.create(constraintBuilder.toOperationNode()),\n            }),\n        });\n    }\n    /**\n     * See {@link CreateTableBuilder.addForeignKeyConstraint}\n     *\n     * Unlike {@link CreateTableBuilder.addForeignKeyConstraint} this method returns\n     * the constraint builder and doesn't take a callback as the last argument. This\n     * is because you can only add one column per `ALTER TABLE` query.\n     */\n    addForeignKeyConstraint(constraintName, columns, targetTable, targetColumns, build = noop) {\n        const constraintBuilder = build(new ForeignKeyConstraintBuilder(ForeignKeyConstraintNode.create(columns.map(ColumnNode.create), parseTable(targetTable), targetColumns.map(ColumnNode.create), constraintName)));\n        return new AlterTableAddForeignKeyConstraintBuilder({\n            ...this.#props,\n            constraintBuilder,\n        });\n    }\n    /**\n     * See {@link CreateTableBuilder.addPrimaryKeyConstraint}\n     */\n    addPrimaryKeyConstraint(constraintName, columns, build = noop) {\n        const constraintBuilder = build(new PrimaryKeyConstraintBuilder(PrimaryKeyConstraintNode.create(columns, constraintName)));\n        return new AlterTableExecutor({\n            ...this.#props,\n            node: AlterTableNode.cloneWithTableProps(this.#props.node, {\n                addConstraint: AddConstraintNode.create(constraintBuilder.toOperationNode()),\n            }),\n        });\n    }\n    dropConstraint(constraintName) {\n        return new AlterTableDropConstraintBuilder({\n            ...this.#props,\n            node: AlterTableNode.cloneWithTableProps(this.#props.node, {\n                dropConstraint: DropConstraintNode.create(constraintName),\n            }),\n        });\n    }\n    renameConstraint(oldName, newName) {\n        return new AlterTableDropConstraintBuilder({\n            ...this.#props,\n            node: AlterTableNode.cloneWithTableProps(this.#props.node, {\n                renameConstraint: RenameConstraintNode.create(oldName, newName),\n            }),\n        });\n    }\n    /**\n     * This can be used to add index to table.\n     *\n     *  ### Examples\n     *\n     * ```ts\n     * db.schema.alterTable('person')\n     *   .addIndex('person_email_index')\n     *   .column('email')\n     *   .unique()\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (MySQL):\n     *\n     * ```sql\n     * alter table `person` add unique index `person_email_index` (`email`)\n     * ```\n     */\n    addIndex(indexName) {\n        return new AlterTableAddIndexBuilder({\n            ...this.#props,\n            node: AlterTableNode.cloneWithTableProps(this.#props.node, {\n                addIndex: AddIndexNode.create(indexName),\n            }),\n        });\n    }\n    /**\n     * This can be used to drop index from table.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * db.schema.alterTable('person')\n     *   .dropIndex('person_email_index')\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (MySQL):\n     *\n     * ```sql\n     * alter table `person` drop index `test_first_name_index`\n     * ```\n     */\n    dropIndex(indexName) {\n        return new AlterTableExecutor({\n            ...this.#props,\n            node: AlterTableNode.cloneWithTableProps(this.#props.node, {\n                dropIndex: DropIndexNode.create(indexName),\n            }),\n        });\n    }\n    /**\n     * Calls the given function passing `this` as the only argument.\n     *\n     * See {@link CreateTableBuilder.$call}\n     */\n    $call(func) {\n        return func(this);\n    }\n}\nexport class AlterTableColumnAlteringBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    alterColumn(column, alteration) {\n        const builder = alteration(new AlterColumnBuilder(column));\n        return new AlterTableColumnAlteringBuilder({\n            ...this.#props,\n            node: AlterTableNode.cloneWithColumnAlteration(this.#props.node, builder.toOperationNode()),\n        });\n    }\n    dropColumn(column) {\n        return new AlterTableColumnAlteringBuilder({\n            ...this.#props,\n            node: AlterTableNode.cloneWithColumnAlteration(this.#props.node, DropColumnNode.create(column)),\n        });\n    }\n    renameColumn(column, newColumn) {\n        return new AlterTableColumnAlteringBuilder({\n            ...this.#props,\n            node: AlterTableNode.cloneWithColumnAlteration(this.#props.node, RenameColumnNode.create(column, newColumn)),\n        });\n    }\n    addColumn(columnName, dataType, build = noop) {\n        const builder = build(new ColumnDefinitionBuilder(ColumnDefinitionNode.create(columnName, parseDataTypeExpression(dataType))));\n        return new AlterTableColumnAlteringBuilder({\n            ...this.#props,\n            node: AlterTableNode.cloneWithColumnAlteration(this.#props.node, AddColumnNode.create(builder.toOperationNode())),\n        });\n    }\n    modifyColumn(columnName, dataType, build = noop) {\n        const builder = build(new ColumnDefinitionBuilder(ColumnDefinitionNode.create(columnName, parseDataTypeExpression(dataType))));\n        return new AlterTableColumnAlteringBuilder({\n            ...this.#props,\n            node: AlterTableNode.cloneWithColumnAlteration(this.#props.node, ModifyColumnNode.create(builder.toOperationNode())),\n        });\n    }\n    toOperationNode() {\n        return this.#props.executor.transformQuery(this.#props.node, this.#props.queryId);\n    }\n    compile() {\n        return this.#props.executor.compileQuery(this.toOperationNode(), this.#props.queryId);\n    }\n    async execute() {\n        await this.#props.executor.executeQuery(this.compile(), this.#props.queryId);\n    }\n}\n", "/// <reference types=\"./immediate-value-transformer.d.ts\" />\nimport { OperationNodeTransformer } from '../../operation-node/operation-node-transformer.js';\nimport { ValueListNode } from '../../operation-node/value-list-node.js';\nimport { ValueNode } from '../../operation-node/value-node.js';\n/**\n * Transforms all ValueNodes to immediate.\n *\n * WARNING! This should never be part of the public API. Users should never use this.\n * This is an internal helper.\n *\n * @internal\n */\nexport class ImmediateValueTransformer extends OperationNodeTransformer {\n    transformPrimitiveValueList(node) {\n        return ValueListNode.create(node.values.map(ValueNode.createImmediate));\n    }\n    transformValue(node) {\n        return ValueNode.createImmediate(node.value);\n    }\n}\n", "/// <reference types=\"./create-index-builder.d.ts\" />\nimport { CreateIndexNode, } from '../operation-node/create-index-node.js';\nimport { RawNode } from '../operation-node/raw-node.js';\nimport { parseOrderedColumnName, } from '../parser/reference-parser.js';\nimport { parseTable } from '../parser/table-parser.js';\nimport { freeze } from '../util/object-utils.js';\nimport { parseValueBinaryOperationOrExpression, } from '../parser/binary-operation-parser.js';\nimport { QueryNode } from '../operation-node/query-node.js';\nimport { ImmediateValueTransformer } from '../plugin/immediate-value/immediate-value-transformer.js';\nexport class CreateIndexBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    /**\n     * Adds the \"if not exists\" modifier.\n     *\n     * If the index already exists, no error is thrown if this method has been called.\n     */\n    ifNotExists() {\n        return new CreateIndexBuilder({\n            ...this.#props,\n            node: CreateIndexNode.cloneWith(this.#props.node, {\n                ifNotExists: true,\n            }),\n        });\n    }\n    /**\n     * Makes the index unique.\n     */\n    unique() {\n        return new CreateIndexBuilder({\n            ...this.#props,\n            node: CreateIndexNode.cloneWith(this.#props.node, {\n                unique: true,\n            }),\n        });\n    }\n    /**\n     * Adds `nulls not distinct` specifier to index.\n     * This only works on some dialects like PostgreSQL.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * db.schema.createIndex('person_first_name_index')\n     *  .on('person')\n     *  .column('first_name')\n     *  .nullsNotDistinct()\n     *  .execute()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * create index \"person_first_name_index\"\n     * on \"test\" (\"first_name\")\n     * nulls not distinct;\n     * ```\n     */\n    nullsNotDistinct() {\n        return new CreateIndexBuilder({\n            ...this.#props,\n            node: CreateIndexNode.cloneWith(this.#props.node, {\n                nullsNotDistinct: true,\n            }),\n        });\n    }\n    /**\n     * Specifies the table for the index.\n     */\n    on(table) {\n        return new CreateIndexBuilder({\n            ...this.#props,\n            node: CreateIndexNode.cloneWith(this.#props.node, {\n                table: parseTable(table),\n            }),\n        });\n    }\n    /**\n     * Adds a column to the index.\n     *\n     * Also see {@link columns} for adding multiple columns at once or {@link expression}\n     * for specifying an arbitrary expression.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * await db.schema\n     *         .createIndex('person_first_name_and_age_index')\n     *         .on('person')\n     *         .column('first_name')\n     *         .column('age desc')\n     *         .execute()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * create index \"person_first_name_and_age_index\" on \"person\" (\"first_name\", \"age\" desc)\n     * ```\n     */\n    column(column) {\n        return new CreateIndexBuilder({\n            ...this.#props,\n            node: CreateIndexNode.cloneWithColumns(this.#props.node, [\n                parseOrderedColumnName(column),\n            ]),\n        });\n    }\n    /**\n     * Specifies a list of columns for the index.\n     *\n     * Also see {@link column} for adding a single column or {@link expression} for\n     * specifying an arbitrary expression.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * await db.schema\n     *         .createIndex('person_first_name_and_age_index')\n     *         .on('person')\n     *         .columns(['first_name', 'age desc'])\n     *         .execute()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * create index \"person_first_name_and_age_index\" on \"person\" (\"first_name\", \"age\" desc)\n     * ```\n     */\n    columns(columns) {\n        return new CreateIndexBuilder({\n            ...this.#props,\n            node: CreateIndexNode.cloneWithColumns(this.#props.node, columns.map(parseOrderedColumnName)),\n        });\n    }\n    /**\n     * Specifies an arbitrary expression for the index.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * import { sql } from 'kysely'\n     *\n     * await db.schema\n     *   .createIndex('person_first_name_index')\n     *   .on('person')\n     *   .expression(sql`first_name COLLATE \"fi_FI\"`)\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * create index \"person_first_name_index\" on \"person\" (first_name COLLATE \"fi_FI\")\n     * ```\n     */\n    expression(expression) {\n        return new CreateIndexBuilder({\n            ...this.#props,\n            node: CreateIndexNode.cloneWithColumns(this.#props.node, [\n                expression.toOperationNode(),\n            ]),\n        });\n    }\n    using(indexType) {\n        return new CreateIndexBuilder({\n            ...this.#props,\n            node: CreateIndexNode.cloneWith(this.#props.node, {\n                using: RawNode.createWithSql(indexType),\n            }),\n        });\n    }\n    where(...args) {\n        const transformer = new ImmediateValueTransformer();\n        return new CreateIndexBuilder({\n            ...this.#props,\n            node: QueryNode.cloneWithWhere(this.#props.node, transformer.transformNode(parseValueBinaryOperationOrExpression(args), this.#props.queryId)),\n        });\n    }\n    /**\n     * Simply calls the provided function passing `this` as the only argument. `$call` returns\n     * what the provided function returns.\n     */\n    $call(func) {\n        return func(this);\n    }\n    toOperationNode() {\n        return this.#props.executor.transformQuery(this.#props.node, this.#props.queryId);\n    }\n    compile() {\n        return this.#props.executor.compileQuery(this.toOperationNode(), this.#props.queryId);\n    }\n    async execute() {\n        await this.#props.executor.executeQuery(this.compile(), this.#props.queryId);\n    }\n}\n", "/// <reference types=\"./create-schema-builder.d.ts\" />\nimport { CreateSchemaNode } from '../operation-node/create-schema-node.js';\nimport { freeze } from '../util/object-utils.js';\nexport class CreateSchemaBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    ifNotExists() {\n        return new CreateSchemaBuilder({\n            ...this.#props,\n            node: CreateSchemaNode.cloneWith(this.#props.node, { ifNotExists: true }),\n        });\n    }\n    /**\n     * Simply calls the provided function passing `this` as the only argument. `$call` returns\n     * what the provided function returns.\n     */\n    $call(func) {\n        return func(this);\n    }\n    toOperationNode() {\n        return this.#props.executor.transformQuery(this.#props.node, this.#props.queryId);\n    }\n    compile() {\n        return this.#props.executor.compileQuery(this.toOperationNode(), this.#props.queryId);\n    }\n    async execute() {\n        await this.#props.executor.executeQuery(this.compile(), this.#props.queryId);\n    }\n}\n", "/// <reference types=\"./on-commit-action-parse.d.ts\" />\nimport { ON_COMMIT_ACTIONS, } from '../operation-node/create-table-node.js';\nexport function parseOnCommitAction(action) {\n    if (ON_COMMIT_ACTIONS.includes(action)) {\n        return action;\n    }\n    throw new Error(`invalid OnCommitAction ${action}`);\n}\n", "/// <reference types=\"./create-table-builder.d.ts\" />\nimport { ColumnDefinitionNode } from '../operation-node/column-definition-node.js';\nimport { CreateTableNode, } from '../operation-node/create-table-node.js';\nimport { ColumnDefinitionBuilder } from './column-definition-builder.js';\nimport { freeze, noop } from '../util/object-utils.js';\nimport { ForeignKeyConstraintNode } from '../operation-node/foreign-key-constraint-node.js';\nimport { ColumnNode } from '../operation-node/column-node.js';\nimport { ForeignKeyConstraintBuilder, } from './foreign-key-constraint-builder.js';\nimport { parseDataTypeExpression, } from '../parser/data-type-parser.js';\nimport { PrimaryKeyConstraintNode } from '../operation-node/primary-key-constraint-node.js';\nimport { UniqueConstraintNode } from '../operation-node/unique-constraint-node.js';\nimport { CheckConstraintNode } from '../operation-node/check-constraint-node.js';\nimport { parseTable } from '../parser/table-parser.js';\nimport { parseOnCommitAction } from '../parser/on-commit-action-parse.js';\nimport { UniqueConstraintNodeBuilder, } from './unique-constraint-builder.js';\nimport { parseExpression } from '../parser/expression-parser.js';\nimport { PrimaryKeyConstraintBuilder, } from './primary-key-constraint-builder.js';\nimport { CheckConstraintBuilder, } from './check-constraint-builder.js';\n/**\n * This builder can be used to create a `create table` query.\n */\nexport class CreateTableBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    /**\n     * Adds the \"temporary\" modifier.\n     *\n     * Use this to create a temporary table.\n     */\n    temporary() {\n        return new CreateTableBuilder({\n            ...this.#props,\n            node: CreateTableNode.cloneWith(this.#props.node, {\n                temporary: true,\n            }),\n        });\n    }\n    /**\n     * Adds an \"on commit\" statement.\n     *\n     * This can be used in conjunction with temporary tables on supported databases\n     * like PostgreSQL.\n     */\n    onCommit(onCommit) {\n        return new CreateTableBuilder({\n            ...this.#props,\n            node: CreateTableNode.cloneWith(this.#props.node, {\n                onCommit: parseOnCommitAction(onCommit),\n            }),\n        });\n    }\n    /**\n     * Adds the \"if not exists\" modifier.\n     *\n     * If the table already exists, no error is thrown if this method has been called.\n     */\n    ifNotExists() {\n        return new CreateTableBuilder({\n            ...this.#props,\n            node: CreateTableNode.cloneWith(this.#props.node, {\n                ifNotExists: true,\n            }),\n        });\n    }\n    /**\n     * Adds a column to the table.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * import { sql } from 'kysely'\n     *\n     * await db.schema\n     *   .createTable('person')\n     *   .addColumn('id', 'integer', (col) => col.autoIncrement().primaryKey())\n     *   .addColumn('first_name', 'varchar(50)', (col) => col.notNull())\n     *   .addColumn('last_name', 'varchar(255)')\n     *   .addColumn('bank_balance', 'numeric(8, 2)')\n     *   // You can specify any data type using the `sql` tag if the types\n     *   // don't include it.\n     *   .addColumn('data', sql`any_type_here`)\n     *   .addColumn('parent_id', 'integer', (col) =>\n     *     col.references('person.id').onDelete('cascade')\n     *   )\n     * ```\n     *\n     * With this method, it's once again good to remember that Kysely just builds the\n     * query and doesn't provide the same API for all databases. For example, some\n     * databases like older MySQL don't support the `references` statement in the\n     * column definition. Instead foreign key constraints need to be defined in the\n     * `create table` query. See the next example:\n     *\n     * ```ts\n     * await db.schema\n     *   .createTable('person')\n     *   .addColumn('id', 'integer', (col) => col.primaryKey())\n     *   .addColumn('parent_id', 'integer')\n     *   .addForeignKeyConstraint(\n     *     'person_parent_id_fk',\n     *     ['parent_id'],\n     *     'person',\n     *     ['id'],\n     *     (cb) => cb.onDelete('cascade')\n     *   )\n     *   .execute()\n     * ```\n     *\n     * Another good example is that PostgreSQL doesn't support the `auto_increment`\n     * keyword and you need to define an autoincrementing column for example using\n     * `serial`:\n     *\n     * ```ts\n     * await db.schema\n     *   .createTable('person')\n     *   .addColumn('id', 'serial', (col) => col.primaryKey())\n     *   .execute()\n     * ```\n     */\n    addColumn(columnName, dataType, build = noop) {\n        const columnBuilder = build(new ColumnDefinitionBuilder(ColumnDefinitionNode.create(columnName, parseDataTypeExpression(dataType))));\n        return new CreateTableBuilder({\n            ...this.#props,\n            node: CreateTableNode.cloneWithColumn(this.#props.node, columnBuilder.toOperationNode()),\n        });\n    }\n    /**\n     * Adds a primary key constraint for one or more columns.\n     *\n     * The constraint name can be anything you want, but it must be unique\n     * across the whole database.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * await db.schema\n     *   .createTable('person')\n     *   .addColumn('first_name', 'varchar(64)')\n     *   .addColumn('last_name', 'varchar(64)')\n     *   .addPrimaryKeyConstraint('primary_key', ['first_name', 'last_name'])\n     *   .execute()\n     * ```\n     */\n    addPrimaryKeyConstraint(constraintName, columns, build = noop) {\n        const constraintBuilder = build(new PrimaryKeyConstraintBuilder(PrimaryKeyConstraintNode.create(columns, constraintName)));\n        return new CreateTableBuilder({\n            ...this.#props,\n            node: CreateTableNode.cloneWithConstraint(this.#props.node, constraintBuilder.toOperationNode()),\n        });\n    }\n    /**\n     * Adds a unique constraint for one or more columns.\n     *\n     * The constraint name can be anything you want, but it must be unique\n     * across the whole database.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * await db.schema\n     *   .createTable('person')\n     *   .addColumn('first_name', 'varchar(64)')\n     *   .addColumn('last_name', 'varchar(64)')\n     *   .addUniqueConstraint(\n     *     'first_name_last_name_unique',\n     *     ['first_name', 'last_name']\n     *   )\n     *   .execute()\n     * ```\n     *\n     * In dialects such as PostgreSQL you can specify `nulls not distinct` as follows:\n     *\n     * ```ts\n     * await db.schema\n     *   .createTable('person')\n     *   .addColumn('first_name', 'varchar(64)')\n     *   .addColumn('last_name', 'varchar(64)')\n     *   .addUniqueConstraint(\n     *     'first_name_last_name_unique',\n     *     ['first_name', 'last_name'],\n     *     (cb) => cb.nullsNotDistinct()\n     *   )\n     *   .execute()\n     * ```\n     */\n    addUniqueConstraint(constraintName, columns, build = noop) {\n        const uniqueConstraintBuilder = build(new UniqueConstraintNodeBuilder(UniqueConstraintNode.create(columns, constraintName)));\n        return new CreateTableBuilder({\n            ...this.#props,\n            node: CreateTableNode.cloneWithConstraint(this.#props.node, uniqueConstraintBuilder.toOperationNode()),\n        });\n    }\n    /**\n     * Adds a check constraint.\n     *\n     * The constraint name can be anything you want, but it must be unique\n     * across the whole database.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * import { sql } from 'kysely'\n     *\n     * await db.schema\n     *   .createTable('animal')\n     *   .addColumn('number_of_legs', 'integer')\n     *   .addCheckConstraint('check_legs', sql`number_of_legs < 5`)\n     *   .execute()\n     * ```\n     */\n    addCheckConstraint(constraintName, checkExpression, build = noop) {\n        const constraintBuilder = build(new CheckConstraintBuilder(CheckConstraintNode.create(checkExpression.toOperationNode(), constraintName)));\n        return new CreateTableBuilder({\n            ...this.#props,\n            node: CreateTableNode.cloneWithConstraint(this.#props.node, constraintBuilder.toOperationNode()),\n        });\n    }\n    /**\n     * Adds a foreign key constraint.\n     *\n     * The constraint name can be anything you want, but it must be unique\n     * across the whole database.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * await db.schema\n     *   .createTable('pet')\n     *   .addColumn('owner_id', 'integer')\n     *   .addForeignKeyConstraint(\n     *     'owner_id_foreign',\n     *     ['owner_id'],\n     *     'person',\n     *     ['id'],\n     *   )\n     *   .execute()\n     * ```\n     *\n     * Add constraint for multiple columns:\n     *\n     * ```ts\n     * await db.schema\n     *   .createTable('pet')\n     *   .addColumn('owner_id1', 'integer')\n     *   .addColumn('owner_id2', 'integer')\n     *   .addForeignKeyConstraint(\n     *     'owner_id_foreign',\n     *     ['owner_id1', 'owner_id2'],\n     *     'person',\n     *     ['id1', 'id2'],\n     *     (cb) => cb.onDelete('cascade')\n     *   )\n     *   .execute()\n     * ```\n     */\n    addForeignKeyConstraint(constraintName, columns, targetTable, targetColumns, build = noop) {\n        const builder = build(new ForeignKeyConstraintBuilder(ForeignKeyConstraintNode.create(columns.map(ColumnNode.create), parseTable(targetTable), targetColumns.map(ColumnNode.create), constraintName)));\n        return new CreateTableBuilder({\n            ...this.#props,\n            node: CreateTableNode.cloneWithConstraint(this.#props.node, builder.toOperationNode()),\n        });\n    }\n    /**\n     * This can be used to add any additional SQL to the front of the query __after__ the `create` keyword.\n     *\n     * Also see {@link temporary}.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * import { sql } from 'kysely'\n     *\n     * await db.schema\n     *   .createTable('person')\n     *   .modifyFront(sql`global temporary`)\n     *   .addColumn('id', 'integer', col => col.primaryKey())\n     *   .addColumn('first_name', 'varchar(64)', col => col.notNull())\n     *   .addColumn('last_name', 'varchar(64)', col => col.notNull())\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (Postgres):\n     *\n     * ```sql\n     * create global temporary table \"person\" (\n     *   \"id\" integer primary key,\n     *   \"first_name\" varchar(64) not null,\n     *   \"last_name\" varchar(64) not null\n     * )\n     * ```\n     */\n    modifyFront(modifier) {\n        return new CreateTableBuilder({\n            ...this.#props,\n            node: CreateTableNode.cloneWithFrontModifier(this.#props.node, modifier.toOperationNode()),\n        });\n    }\n    /**\n     * This can be used to add any additional SQL to the end of the query.\n     *\n     * Also see {@link onCommit}.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * import { sql } from 'kysely'\n     *\n     * await db.schema\n     *   .createTable('person')\n     *   .addColumn('id', 'integer', col => col.primaryKey())\n     *   .addColumn('first_name', 'varchar(64)', col => col.notNull())\n     *   .addColumn('last_name', 'varchar(64)', col => col.notNull())\n     *   .modifyEnd(sql`collate utf8_unicode_ci`)\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (MySQL):\n     *\n     * ```sql\n     * create table `person` (\n     *   `id` integer primary key,\n     *   `first_name` varchar(64) not null,\n     *   `last_name` varchar(64) not null\n     * ) collate utf8_unicode_ci\n     * ```\n     */\n    modifyEnd(modifier) {\n        return new CreateTableBuilder({\n            ...this.#props,\n            node: CreateTableNode.cloneWithEndModifier(this.#props.node, modifier.toOperationNode()),\n        });\n    }\n    /**\n     * Allows to create table from `select` query.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * await db.schema\n     *   .createTable('copy')\n     *   .temporary()\n     *   .as(db.selectFrom('person').select(['first_name', 'last_name']))\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * create temporary table \"copy\" as\n     * select \"first_name\", \"last_name\" from \"person\"\n     * ```\n     */\n    as(expression) {\n        return new CreateTableBuilder({\n            ...this.#props,\n            node: CreateTableNode.cloneWith(this.#props.node, {\n                selectQuery: parseExpression(expression),\n            }),\n        });\n    }\n    /**\n     * Calls the given function passing `this` as the only argument.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * await db.schema\n     *   .createTable('test')\n     *   .$call((builder) => builder.addColumn('id', 'integer'))\n     *   .execute()\n     * ```\n     *\n     * This is useful for creating reusable functions that can be called with a builder.\n     *\n     * ```ts\n     * import { type CreateTableBuilder, sql } from 'kysely'\n     *\n     * const addDefaultColumns = (ctb: CreateTableBuilder<any, any>) => {\n     *   return ctb\n     *     .addColumn('id', 'integer', (col) => col.notNull())\n     *     .addColumn('created_at', 'date', (col) =>\n     *       col.notNull().defaultTo(sql`now()`)\n     *     )\n     *     .addColumn('updated_at', 'date', (col) =>\n     *       col.notNull().defaultTo(sql`now()`)\n     *     )\n     * }\n     *\n     * await db.schema\n     *   .createTable('test')\n     *   .$call(addDefaultColumns)\n     *   .execute()\n     * ```\n     */\n    $call(func) {\n        return func(this);\n    }\n    toOperationNode() {\n        return this.#props.executor.transformQuery(this.#props.node, this.#props.queryId);\n    }\n    compile() {\n        return this.#props.executor.compileQuery(this.toOperationNode(), this.#props.queryId);\n    }\n    async execute() {\n        await this.#props.executor.executeQuery(this.compile(), this.#props.queryId);\n    }\n}\n", "/// <reference types=\"./drop-index-builder.d.ts\" />\nimport { DropIndexNode } from '../operation-node/drop-index-node.js';\nimport { parseTable } from '../parser/table-parser.js';\nimport { freeze } from '../util/object-utils.js';\nexport class DropIndexBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    /**\n     * Specifies the table the index was created for. This is not needed\n     * in all dialects.\n     */\n    on(table) {\n        return new DropIndexBuilder({\n            ...this.#props,\n            node: DropIndexNode.cloneWith(this.#props.node, {\n                table: parseTable(table),\n            }),\n        });\n    }\n    ifExists() {\n        return new DropIndexBuilder({\n            ...this.#props,\n            node: DropIndexNode.cloneWith(this.#props.node, {\n                ifExists: true,\n            }),\n        });\n    }\n    cascade() {\n        return new DropIndexBuilder({\n            ...this.#props,\n            node: DropIndexNode.cloneWith(this.#props.node, {\n                cascade: true,\n            }),\n        });\n    }\n    /**\n     * Simply calls the provided function passing `this` as the only argument. `$call` returns\n     * what the provided function returns.\n     */\n    $call(func) {\n        return func(this);\n    }\n    toOperationNode() {\n        return this.#props.executor.transformQuery(this.#props.node, this.#props.queryId);\n    }\n    compile() {\n        return this.#props.executor.compileQuery(this.toOperationNode(), this.#props.queryId);\n    }\n    async execute() {\n        await this.#props.executor.executeQuery(this.compile(), this.#props.queryId);\n    }\n}\n", "/// <reference types=\"./drop-schema-builder.d.ts\" />\nimport { DropSchemaNode } from '../operation-node/drop-schema-node.js';\nimport { freeze } from '../util/object-utils.js';\nexport class DropSchemaBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    ifExists() {\n        return new DropSchemaBuilder({\n            ...this.#props,\n            node: DropSchemaNode.cloneWith(this.#props.node, {\n                ifExists: true,\n            }),\n        });\n    }\n    cascade() {\n        return new DropSchemaBuilder({\n            ...this.#props,\n            node: DropSchemaNode.cloneWith(this.#props.node, {\n                cascade: true,\n            }),\n        });\n    }\n    /**\n     * Simply calls the provided function passing `this` as the only argument. `$call` returns\n     * what the provided function returns.\n     */\n    $call(func) {\n        return func(this);\n    }\n    toOperationNode() {\n        return this.#props.executor.transformQuery(this.#props.node, this.#props.queryId);\n    }\n    compile() {\n        return this.#props.executor.compileQuery(this.toOperationNode(), this.#props.queryId);\n    }\n    async execute() {\n        await this.#props.executor.executeQuery(this.compile(), this.#props.queryId);\n    }\n}\n", "/// <reference types=\"./drop-table-builder.d.ts\" />\nimport { DropTableNode } from '../operation-node/drop-table-node.js';\nimport { freeze } from '../util/object-utils.js';\nexport class DropTableBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    ifExists() {\n        return new DropTableBuilder({\n            ...this.#props,\n            node: DropTableNode.cloneWith(this.#props.node, {\n                ifExists: true,\n            }),\n        });\n    }\n    cascade() {\n        return new DropTableBuilder({\n            ...this.#props,\n            node: DropTableNode.cloneWith(this.#props.node, {\n                cascade: true,\n            }),\n        });\n    }\n    /**\n     * Simply calls the provided function passing `this` as the only argument. `$call` returns\n     * what the provided function returns.\n     */\n    $call(func) {\n        return func(this);\n    }\n    toOperationNode() {\n        return this.#props.executor.transformQuery(this.#props.node, this.#props.queryId);\n    }\n    compile() {\n        return this.#props.executor.compileQuery(this.toOperationNode(), this.#props.queryId);\n    }\n    async execute() {\n        await this.#props.executor.executeQuery(this.compile(), this.#props.queryId);\n    }\n}\n", "/// <reference types=\"./create-view-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { SchemableIdentifierNode } from './schemable-identifier-node.js';\n/**\n * @internal\n */\nexport const CreateViewNode = freeze({\n    is(node) {\n        return node.kind === 'CreateViewNode';\n    },\n    create(name) {\n        return freeze({\n            kind: 'CreateViewNode',\n            name: SchemableIdentifierNode.create(name),\n        });\n    },\n    cloneWith(createView, params) {\n        return freeze({\n            ...createView,\n            ...params,\n        });\n    },\n});\n", "/// <reference types=\"./immediate-value-plugin.d.ts\" />\nimport { ImmediateValueTransformer } from './immediate-value-transformer.js';\n/**\n * Transforms all ValueNodes to immediate.\n *\n * WARNING! This should never be part of the public API. Users should never use this.\n * This is an internal helper.\n *\n * @internal\n */\nexport class ImmediateValuePlugin {\n    #transformer = new ImmediateValueTransformer();\n    transformQuery(args) {\n        return this.#transformer.transformNode(args.node, args.queryId);\n    }\n    transformResult(args) {\n        return Promise.resolve(args.result);\n    }\n}\n", "/// <reference types=\"./create-view-builder.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { CreateViewNode } from '../operation-node/create-view-node.js';\nimport { parseColumnName } from '../parser/reference-parser.js';\nimport { ImmediateValuePlugin } from '../plugin/immediate-value/immediate-value-plugin.js';\nexport class CreateViewBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    /**\n     * Adds the \"temporary\" modifier.\n     *\n     * Use this to create a temporary view.\n     */\n    temporary() {\n        return new CreateViewBuilder({\n            ...this.#props,\n            node: CreateViewNode.cloneWith(this.#props.node, {\n                temporary: true,\n            }),\n        });\n    }\n    materialized() {\n        return new CreateViewBuilder({\n            ...this.#props,\n            node: CreateViewNode.cloneWith(this.#props.node, {\n                materialized: true,\n            }),\n        });\n    }\n    /**\n     * Only implemented on some dialects like SQLite. On most dialects, use {@link orReplace}.\n     */\n    ifNotExists() {\n        return new CreateViewBuilder({\n            ...this.#props,\n            node: CreateViewNode.cloneWith(this.#props.node, {\n                ifNotExists: true,\n            }),\n        });\n    }\n    orReplace() {\n        return new CreateViewBuilder({\n            ...this.#props,\n            node: CreateViewNode.cloneWith(this.#props.node, {\n                orReplace: true,\n            }),\n        });\n    }\n    columns(columns) {\n        return new CreateViewBuilder({\n            ...this.#props,\n            node: CreateViewNode.cloneWith(this.#props.node, {\n                columns: columns.map(parseColumnName),\n            }),\n        });\n    }\n    /**\n     * Sets the select query or a `values` statement that creates the view.\n     *\n     * WARNING!\n     * Some dialects don't support parameterized queries in DDL statements and therefore\n     * the query or raw {@link sql } expression passed here is interpolated into a single\n     * string opening an SQL injection vulnerability. DO NOT pass unchecked user input\n     * into the query or raw expression passed to this method!\n     */\n    as(query) {\n        const queryNode = query\n            .withPlugin(new ImmediateValuePlugin())\n            .toOperationNode();\n        return new CreateViewBuilder({\n            ...this.#props,\n            node: CreateViewNode.cloneWith(this.#props.node, {\n                as: queryNode,\n            }),\n        });\n    }\n    /**\n     * Simply calls the provided function passing `this` as the only argument. `$call` returns\n     * what the provided function returns.\n     */\n    $call(func) {\n        return func(this);\n    }\n    toOperationNode() {\n        return this.#props.executor.transformQuery(this.#props.node, this.#props.queryId);\n    }\n    compile() {\n        return this.#props.executor.compileQuery(this.toOperationNode(), this.#props.queryId);\n    }\n    async execute() {\n        await this.#props.executor.executeQuery(this.compile(), this.#props.queryId);\n    }\n}\n", "/// <reference types=\"./drop-view-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { SchemableIdentifierNode } from './schemable-identifier-node.js';\n/**\n * @internal\n */\nexport const DropViewNode = freeze({\n    is(node) {\n        return node.kind === 'DropViewNode';\n    },\n    create(name) {\n        return freeze({\n            kind: 'DropViewNode',\n            name: SchemableIdentifierNode.create(name),\n        });\n    },\n    cloneWith(dropView, params) {\n        return freeze({\n            ...dropView,\n            ...params,\n        });\n    },\n});\n", "/// <reference types=\"./drop-view-builder.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { DropViewNode } from '../operation-node/drop-view-node.js';\nexport class DropViewBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    materialized() {\n        return new DropViewBuilder({\n            ...this.#props,\n            node: DropViewNode.cloneWith(this.#props.node, {\n                materialized: true,\n            }),\n        });\n    }\n    ifExists() {\n        return new DropViewBuilder({\n            ...this.#props,\n            node: DropViewNode.cloneWith(this.#props.node, {\n                ifExists: true,\n            }),\n        });\n    }\n    cascade() {\n        return new DropViewBuilder({\n            ...this.#props,\n            node: DropViewNode.cloneWith(this.#props.node, {\n                cascade: true,\n            }),\n        });\n    }\n    /**\n     * Simply calls the provided function passing `this` as the only argument. `$call` returns\n     * what the provided function returns.\n     */\n    $call(func) {\n        return func(this);\n    }\n    toOperationNode() {\n        return this.#props.executor.transformQuery(this.#props.node, this.#props.queryId);\n    }\n    compile() {\n        return this.#props.executor.compileQuery(this.toOperationNode(), this.#props.queryId);\n    }\n    async execute() {\n        await this.#props.executor.executeQuery(this.compile(), this.#props.queryId);\n    }\n}\n", "/// <reference types=\"./create-type-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { ValueListNode } from './value-list-node.js';\nimport { ValueNode } from './value-node.js';\n/**\n * @internal\n */\nexport const CreateTypeNode = freeze({\n    is(node) {\n        return node.kind === 'CreateTypeNode';\n    },\n    create(name) {\n        return freeze({\n            kind: 'CreateTypeNode',\n            name,\n        });\n    },\n    cloneWithEnum(createType, values) {\n        return freeze({\n            ...createType,\n            enum: ValueListNode.create(values.map(ValueNode.createImmediate)),\n        });\n    },\n});\n", "/// <reference types=\"./create-type-builder.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { CreateTypeNode } from '../operation-node/create-type-node.js';\nexport class CreateTypeBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    toOperationNode() {\n        return this.#props.executor.transformQuery(this.#props.node, this.#props.queryId);\n    }\n    /**\n     * Creates an anum type.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * db.schema.createType('species').asEnum(['cat', 'dog', 'frog'])\n     * ```\n     */\n    asEnum(values) {\n        return new CreateTypeBuilder({\n            ...this.#props,\n            node: CreateTypeNode.cloneWithEnum(this.#props.node, values),\n        });\n    }\n    /**\n     * Simply calls the provided function passing `this` as the only argument. `$call` returns\n     * what the provided function returns.\n     */\n    $call(func) {\n        return func(this);\n    }\n    compile() {\n        return this.#props.executor.compileQuery(this.toOperationNode(), this.#props.queryId);\n    }\n    async execute() {\n        await this.#props.executor.executeQuery(this.compile(), this.#props.queryId);\n    }\n}\n", "/// <reference types=\"./drop-type-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\n/**\n * @internal\n */\nexport const DropTypeNode = freeze({\n    is(node) {\n        return node.kind === 'DropTypeNode';\n    },\n    create(name) {\n        return freeze({\n            kind: 'DropTypeNode',\n            name,\n        });\n    },\n    cloneWith(dropType, params) {\n        return freeze({\n            ...dropType,\n            ...params,\n        });\n    },\n});\n", "/// <reference types=\"./drop-type-builder.d.ts\" />\nimport { DropTypeNode } from '../operation-node/drop-type-node.js';\nimport { freeze } from '../util/object-utils.js';\nexport class DropTypeBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    ifExists() {\n        return new DropTypeBuilder({\n            ...this.#props,\n            node: DropTypeNode.cloneWith(this.#props.node, {\n                ifExists: true,\n            }),\n        });\n    }\n    /**\n     * Simply calls the provided function passing `this` as the only argument. `$call` returns\n     * what the provided function returns.\n     */\n    $call(func) {\n        return func(this);\n    }\n    toOperationNode() {\n        return this.#props.executor.transformQuery(this.#props.node, this.#props.queryId);\n    }\n    compile() {\n        return this.#props.executor.compileQuery(this.toOperationNode(), this.#props.queryId);\n    }\n    async execute() {\n        await this.#props.executor.executeQuery(this.compile(), this.#props.queryId);\n    }\n}\n", "/// <reference types=\"./identifier-parser.d.ts\" />\nimport { SchemableIdentifierNode } from '../operation-node/schemable-identifier-node.js';\nexport function parseSchemableIdentifier(id) {\n    const SCHEMA_SEPARATOR = '.';\n    if (id.includes(SCHEMA_SEPARATOR)) {\n        const parts = id.split(SCHEMA_SEPARATOR).map(trim);\n        if (parts.length === 2) {\n            return SchemableIdentifierNode.createWithSchema(parts[0], parts[1]);\n        }\n        else {\n            throw new Error(`invalid schemable identifier ${id}`);\n        }\n    }\n    else {\n        return SchemableIdentifierNode.create(id);\n    }\n}\nfunction trim(str) {\n    return str.trim();\n}\n", "/// <reference types=\"./refresh-materialized-view-node.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { SchemableIdentifierNode } from './schemable-identifier-node.js';\n/**\n * @internal\n */\nexport const RefreshMaterializedViewNode = freeze({\n    is(node) {\n        return node.kind === 'RefreshMaterializedViewNode';\n    },\n    create(name) {\n        return freeze({\n            kind: 'RefreshMaterializedViewNode',\n            name: SchemableIdentifierNode.create(name),\n        });\n    },\n    cloneWith(createView, params) {\n        return freeze({\n            ...createView,\n            ...params,\n        });\n    },\n});\n", "/// <reference types=\"./refresh-materialized-view-builder.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nimport { RefreshMaterializedViewNode } from '../operation-node/refresh-materialized-view-node.js';\nexport class RefreshMaterializedViewBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    /**\n     * Adds the \"concurrently\" modifier.\n     *\n     * Use this to refresh the view without locking out concurrent selects on the materialized view.\n     *\n     * WARNING!\n     * This cannot be used with the \"with no data\" modifier.\n     */\n    concurrently() {\n        return new RefreshMaterializedViewBuilder({\n            ...this.#props,\n            node: RefreshMaterializedViewNode.cloneWith(this.#props.node, {\n                concurrently: true,\n                withNoData: false,\n            }),\n        });\n    }\n    /**\n     * Adds the \"with data\" modifier.\n     *\n     * If specified (or defaults) the backing query is executed to provide the new data, and the materialized view is left in a scannable state\n     */\n    withData() {\n        return new RefreshMaterializedViewBuilder({\n            ...this.#props,\n            node: RefreshMaterializedViewNode.cloneWith(this.#props.node, {\n                withNoData: false,\n            }),\n        });\n    }\n    /**\n     * Adds the \"with no data\" modifier.\n     *\n     * If specified, no new data is generated and the materialized view is left in an unscannable state.\n     *\n     * WARNING!\n     * This cannot be used with the \"concurrently\" modifier.\n     */\n    withNoData() {\n        return new RefreshMaterializedViewBuilder({\n            ...this.#props,\n            node: RefreshMaterializedViewNode.cloneWith(this.#props.node, {\n                withNoData: true,\n                concurrently: false,\n            }),\n        });\n    }\n    /**\n     * Simply calls the provided function passing `this` as the only argument. `$call` returns\n     * what the provided function returns.\n     */\n    $call(func) {\n        return func(this);\n    }\n    toOperationNode() {\n        return this.#props.executor.transformQuery(this.#props.node, this.#props.queryId);\n    }\n    compile() {\n        return this.#props.executor.compileQuery(this.toOperationNode(), this.#props.queryId);\n    }\n    async execute() {\n        await this.#props.executor.executeQuery(this.compile(), this.#props.queryId);\n    }\n}\n", "/// <reference types=\"./schema.d.ts\" />\nimport { AlterTableNode } from '../operation-node/alter-table-node.js';\nimport { CreateIndexNode } from '../operation-node/create-index-node.js';\nimport { CreateSchemaNode } from '../operation-node/create-schema-node.js';\nimport { CreateTableNode } from '../operation-node/create-table-node.js';\nimport { DropIndexNode } from '../operation-node/drop-index-node.js';\nimport { DropSchemaNode } from '../operation-node/drop-schema-node.js';\nimport { DropTableNode } from '../operation-node/drop-table-node.js';\nimport { parseTable } from '../parser/table-parser.js';\nimport { AlterTableBuilder } from './alter-table-builder.js';\nimport { CreateIndexBuilder } from './create-index-builder.js';\nimport { CreateSchemaBuilder } from './create-schema-builder.js';\nimport { CreateTableBuilder } from './create-table-builder.js';\nimport { DropIndexBuilder } from './drop-index-builder.js';\nimport { DropSchemaBuilder } from './drop-schema-builder.js';\nimport { DropTableBuilder } from './drop-table-builder.js';\nimport { createQueryId } from '../util/query-id.js';\nimport { WithSchemaPlugin } from '../plugin/with-schema/with-schema-plugin.js';\nimport { CreateViewBuilder } from './create-view-builder.js';\nimport { CreateViewNode } from '../operation-node/create-view-node.js';\nimport { DropViewBuilder } from './drop-view-builder.js';\nimport { DropViewNode } from '../operation-node/drop-view-node.js';\nimport { CreateTypeBuilder } from './create-type-builder.js';\nimport { DropTypeBuilder } from './drop-type-builder.js';\nimport { CreateTypeNode } from '../operation-node/create-type-node.js';\nimport { DropTypeNode } from '../operation-node/drop-type-node.js';\nimport { parseSchemableIdentifier } from '../parser/identifier-parser.js';\nimport { RefreshMaterializedViewBuilder } from './refresh-materialized-view-builder.js';\nimport { RefreshMaterializedViewNode } from '../operation-node/refresh-materialized-view-node.js';\n/**\n * Provides methods for building database schema.\n */\nexport class SchemaModule {\n    #executor;\n    constructor(executor) {\n        this.#executor = executor;\n    }\n    /**\n     * Create a new table.\n     *\n     * ### Examples\n     *\n     * This example creates a new table with columns `id`, `first_name`,\n     * `last_name` and `gender`:\n     *\n     * ```ts\n     * await db.schema\n     *   .createTable('person')\n     *   .addColumn('id', 'integer', col => col.primaryKey().autoIncrement())\n     *   .addColumn('first_name', 'varchar', col => col.notNull())\n     *   .addColumn('last_name', 'varchar', col => col.notNull())\n     *   .addColumn('gender', 'varchar')\n     *   .execute()\n     * ```\n     *\n     * This example creates a table with a foreign key. Not all database\n     * engines support column-level foreign key constraint definitions.\n     * For example if you are using MySQL 5.X see the next example after\n     * this one.\n     *\n     * ```ts\n     * await db.schema\n     *   .createTable('pet')\n     *   .addColumn('id', 'integer', col => col.primaryKey().autoIncrement())\n     *   .addColumn('owner_id', 'integer', col => col\n     *     .references('person.id')\n     *     .onDelete('cascade')\n     *   )\n     *   .execute()\n     * ```\n     *\n     * This example adds a foreign key constraint for a columns just\n     * like the previous example, but using a table-level statement.\n     * On MySQL 5.X you need to define foreign key constraints like\n     * this:\n     *\n     * ```ts\n     * await db.schema\n     *   .createTable('pet')\n     *   .addColumn('id', 'integer', col => col.primaryKey().autoIncrement())\n     *   .addColumn('owner_id', 'integer')\n     *   .addForeignKeyConstraint(\n     *     'pet_owner_id_foreign', ['owner_id'], 'person', ['id'],\n     *     (constraint) => constraint.onDelete('cascade')\n     *   )\n     *   .execute()\n     * ```\n     */\n    createTable(table) {\n        return new CreateTableBuilder({\n            queryId: createQueryId(),\n            executor: this.#executor,\n            node: CreateTableNode.create(parseTable(table)),\n        });\n    }\n    /**\n     * Drop a table.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * await db.schema\n     *   .dropTable('person')\n     *   .execute()\n     * ```\n     */\n    dropTable(table) {\n        return new DropTableBuilder({\n            queryId: createQueryId(),\n            executor: this.#executor,\n            node: DropTableNode.create(parseTable(table)),\n        });\n    }\n    /**\n     * Create a new index.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * await db.schema\n     *   .createIndex('person_full_name_unique_index')\n     *   .on('person')\n     *   .columns(['first_name', 'last_name'])\n     *   .execute()\n     * ```\n     */\n    createIndex(indexName) {\n        return new CreateIndexBuilder({\n            queryId: createQueryId(),\n            executor: this.#executor,\n            node: CreateIndexNode.create(indexName),\n        });\n    }\n    /**\n     * Drop an index.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * await db.schema\n     *   .dropIndex('person_full_name_unique_index')\n     *   .execute()\n     * ```\n     */\n    dropIndex(indexName) {\n        return new DropIndexBuilder({\n            queryId: createQueryId(),\n            executor: this.#executor,\n            node: DropIndexNode.create(indexName),\n        });\n    }\n    /**\n     * Create a new schema.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * await db.schema\n     *   .createSchema('some_schema')\n     *   .execute()\n     * ```\n     */\n    createSchema(schema) {\n        return new CreateSchemaBuilder({\n            queryId: createQueryId(),\n            executor: this.#executor,\n            node: CreateSchemaNode.create(schema),\n        });\n    }\n    /**\n     * Drop a schema.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * await db.schema\n     *   .dropSchema('some_schema')\n     *   .execute()\n     * ```\n     */\n    dropSchema(schema) {\n        return new DropSchemaBuilder({\n            queryId: createQueryId(),\n            executor: this.#executor,\n            node: DropSchemaNode.create(schema),\n        });\n    }\n    /**\n     * Alter a table.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * await db.schema\n     *   .alterTable('person')\n     *   .alterColumn('first_name', (ac) => ac.setDataType('text'))\n     *   .execute()\n     * ```\n     */\n    alterTable(table) {\n        return new AlterTableBuilder({\n            queryId: createQueryId(),\n            executor: this.#executor,\n            node: AlterTableNode.create(parseTable(table)),\n        });\n    }\n    /**\n     * Create a new view.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * await db.schema\n     *   .createView('dogs')\n     *   .orReplace()\n     *   .as(db.selectFrom('pet').selectAll().where('species', '=', 'dog'))\n     *   .execute()\n     * ```\n     */\n    createView(viewName) {\n        return new CreateViewBuilder({\n            queryId: createQueryId(),\n            executor: this.#executor,\n            node: CreateViewNode.create(viewName),\n        });\n    }\n    /**\n     * Refresh a materialized view.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * await db.schema\n     *   .refreshMaterializedView('my_view')\n     *   .concurrently()\n     *   .execute()\n     * ```\n     */\n    refreshMaterializedView(viewName) {\n        return new RefreshMaterializedViewBuilder({\n            queryId: createQueryId(),\n            executor: this.#executor,\n            node: RefreshMaterializedViewNode.create(viewName),\n        });\n    }\n    /**\n     * Drop a view.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * await db.schema\n     *   .dropView('dogs')\n     *   .ifExists()\n     *   .execute()\n     * ```\n     */\n    dropView(viewName) {\n        return new DropViewBuilder({\n            queryId: createQueryId(),\n            executor: this.#executor,\n            node: DropViewNode.create(viewName),\n        });\n    }\n    /**\n     * Create a new type.\n     *\n     * Only some dialects like PostgreSQL have user-defined types.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * await db.schema\n     *   .createType('species')\n     *   .asEnum(['dog', 'cat', 'frog'])\n     *   .execute()\n     * ```\n     */\n    createType(typeName) {\n        return new CreateTypeBuilder({\n            queryId: createQueryId(),\n            executor: this.#executor,\n            node: CreateTypeNode.create(parseSchemableIdentifier(typeName)),\n        });\n    }\n    /**\n     * Drop a type.\n     *\n     * Only some dialects like PostgreSQL have user-defined types.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * await db.schema\n     *   .dropType('species')\n     *   .ifExists()\n     *   .execute()\n     * ```\n     */\n    dropType(typeName) {\n        return new DropTypeBuilder({\n            queryId: createQueryId(),\n            executor: this.#executor,\n            node: DropTypeNode.create(parseSchemableIdentifier(typeName)),\n        });\n    }\n    /**\n     * Returns a copy of this schema module with the given plugin installed.\n     */\n    withPlugin(plugin) {\n        return new SchemaModule(this.#executor.withPlugin(plugin));\n    }\n    /**\n     * Returns a copy of this schema module  without any plugins.\n     */\n    withoutPlugins() {\n        return new SchemaModule(this.#executor.withoutPlugins());\n    }\n    /**\n     * See {@link QueryCreator.withSchema}\n     */\n    withSchema(schema) {\n        return new SchemaModule(this.#executor.withPluginAtFront(new WithSchemaPlugin(schema)));\n    }\n}\n", "/// <reference types=\"./dynamic.d.ts\" />\nimport { DynamicReferenceBuilder } from './dynamic-reference-builder.js';\nimport { DynamicTableBuilder } from './dynamic-table-builder.js';\nexport class DynamicModule {\n    /**\n     * Creates a dynamic reference to a column that is not know at compile time.\n     *\n     * Kysely is built in a way that by default you can't refer to tables or columns\n     * that are not actually visible in the current query and context. This is all\n     * done by TypeScript at compile time, which means that you need to know the\n     * columns and tables at compile time. This is not always the case of course.\n     *\n     * This method is meant to be used in those cases where the column names\n     * come from the user input or are not otherwise known at compile time.\n     *\n     * WARNING! Unlike values, column names are not escaped by the database engine\n     * or Kysely and if you pass in unchecked column names using this method, you\n     * create an SQL injection vulnerability. Always __always__ validate the user\n     * input before passing it to this method.\n     *\n     * There are couple of examples below for some use cases, but you can pass\n     * `ref` to other methods as well. If the types allow you to pass a `ref`\n     * value to some place, it should work.\n     *\n     * ### Examples\n     *\n     * Filter by a column not know at compile time:\n     *\n     * ```ts\n     * async function someQuery(filterColumn: string, filterValue: string) {\n     *   const { ref } = db.dynamic\n     *\n     *   return await db\n     *     .selectFrom('person')\n     *     .selectAll()\n     *     .where(ref(filterColumn), '=', filterValue)\n     *     .execute()\n     * }\n     *\n     * someQuery('first_name', 'Arnold')\n     * someQuery('person.last_name', 'Aniston')\n     * ```\n     *\n     * Order by a column not know at compile time:\n     *\n     * ```ts\n     * async function someQuery(orderBy: string) {\n     *   const { ref } = db.dynamic\n     *\n     *   return await db\n     *     .selectFrom('person')\n     *     .select('person.first_name as fn')\n     *     .orderBy(ref(orderBy))\n     *     .execute()\n     * }\n     *\n     * someQuery('fn')\n     * ```\n     *\n     * In this example we add selections dynamically:\n     *\n     * ```ts\n     * const { ref } = db.dynamic\n     *\n     * // Some column name provided by the user. Value not known at compile time.\n     * const columnFromUserInput: PossibleColumns = 'birthdate';\n     *\n     * // A type that lists all possible values `columnFromUserInput` can have.\n     * // You can use `keyof Person` if any column of an interface is allowed.\n     * type PossibleColumns = 'last_name' | 'first_name' | 'birthdate'\n     *\n     * const [person] = await db.selectFrom('person')\n     *   .select([\n     *     ref<PossibleColumns>(columnFromUserInput),\n     *     'id'\n     *   ])\n     *   .execute()\n     *\n     * // The resulting type contains all `PossibleColumns` as optional fields\n     * // because we cannot know which field was actually selected before\n     * // running the code.\n     * const lastName: string | null | undefined = person?.last_name\n     * const firstName: string | undefined = person?.first_name\n     * const birthDate: Date | null | undefined = person?.birthdate\n     *\n     * // The result type also contains the compile time selection `id`.\n     * person?.id\n     * ```\n     */\n    ref(reference) {\n        return new DynamicReferenceBuilder(reference);\n    }\n    /**\n     * Creates a table reference to a table that's not fully known at compile time.\n     *\n     * The type `T` is allowed to be a union of multiple tables.\n     *\n     * <!-- siteExample(\"select\", \"Generic find query\", 130) -->\n     *\n     * A generic type-safe helper function for finding a row by a column value:\n     *\n     * ```ts\n     * import { SelectType } from 'kysely'\n     * import { Database } from 'type-editor'\n     *\n     * async function getRowByColumn<\n     *   T extends keyof Database,\n     *   C extends keyof Database[T] & string,\n     *   V extends SelectType<Database[T][C]>,\n     * >(t: T, c: C, v: V) {\n     *   // We need to use the dynamic module since the table name\n     *   // is not known at compile time.\n     *   const { table, ref } = db.dynamic\n     *\n     *   return await db\n     *     .selectFrom(table(t).as('t'))\n     *     .selectAll()\n     *     .where(ref(c), '=', v)\n     *     .orderBy('t.id')\n     *     .executeTakeFirstOrThrow()\n     * }\n     *\n     * const person = await getRowByColumn('person', 'first_name', 'Arnold')\n     * ```\n     */\n    table(table) {\n        return new DynamicTableBuilder(table);\n    }\n}\n", "/// <reference types=\"./default-connection-provider.d.ts\" />\nexport class DefaultConnectionProvider {\n    #driver;\n    constructor(driver) {\n        this.#driver = driver;\n    }\n    async provideConnection(consumer) {\n        const connection = await this.#driver.acquireConnection();\n        try {\n            return await consumer(connection);\n        }\n        finally {\n            await this.#driver.releaseConnection(connection);\n        }\n    }\n}\n", "/// <reference types=\"./default-query-executor.d.ts\" />\nimport { QueryExecutorBase } from './query-executor-base.js';\nexport class DefaultQueryExecutor extends QueryExecutorBase {\n    #compiler;\n    #adapter;\n    #connectionProvider;\n    constructor(compiler, adapter, connectionProvider, plugins = []) {\n        super(plugins);\n        this.#compiler = compiler;\n        this.#adapter = adapter;\n        this.#connectionProvider = connectionProvider;\n    }\n    get adapter() {\n        return this.#adapter;\n    }\n    compileQuery(node, queryId) {\n        return this.#compiler.compileQuery(node, queryId);\n    }\n    provideConnection(consumer) {\n        return this.#connectionProvider.provideConnection(consumer);\n    }\n    withPlugins(plugins) {\n        return new DefaultQueryExecutor(this.#compiler, this.#adapter, this.#connectionProvider, [...this.plugins, ...plugins]);\n    }\n    withPlugin(plugin) {\n        return new DefaultQueryExecutor(this.#compiler, this.#adapter, this.#connectionProvider, [...this.plugins, plugin]);\n    }\n    withPluginAtFront(plugin) {\n        return new DefaultQueryExecutor(this.#compiler, this.#adapter, this.#connectionProvider, [plugin, ...this.plugins]);\n    }\n    withConnectionProvider(connectionProvider) {\n        return new DefaultQueryExecutor(this.#compiler, this.#adapter, connectionProvider, [...this.plugins]);\n    }\n    withoutPlugins() {\n        return new DefaultQueryExecutor(this.#compiler, this.#adapter, this.#connectionProvider, []);\n    }\n}\n", "/// <reference types=\"./performance-now.d.ts\" />\nimport { isFunction } from './object-utils.js';\nexport function performanceNow() {\n    if (typeof performance !== 'undefined' && isFunction(performance.now)) {\n        return performance.now();\n    }\n    else {\n        return Date.now();\n    }\n}\n", "/// <reference types=\"./runtime-driver.d.ts\" />\nimport { performanceNow } from '../util/performance-now.js';\n/**\n * A small wrapper around {@link Driver} that makes sure the driver is\n * initialized before it is used, only initialized and destroyed\n * once etc.\n */\nexport class RuntimeDriver {\n    #driver;\n    #log;\n    #initPromise;\n    #initDone;\n    #destroyPromise;\n    #connections = new WeakSet();\n    constructor(driver, log) {\n        this.#initDone = false;\n        this.#driver = driver;\n        this.#log = log;\n    }\n    async init() {\n        if (this.#destroyPromise) {\n            throw new Error('driver has already been destroyed');\n        }\n        if (!this.#initPromise) {\n            this.#initPromise = this.#driver\n                .init()\n                .then(() => {\n                this.#initDone = true;\n            })\n                .catch((err) => {\n                this.#initPromise = undefined;\n                return Promise.reject(err);\n            });\n        }\n        await this.#initPromise;\n    }\n    async acquireConnection() {\n        if (this.#destroyPromise) {\n            throw new Error('driver has already been destroyed');\n        }\n        if (!this.#initDone) {\n            await this.init();\n        }\n        const connection = await this.#driver.acquireConnection();\n        if (!this.#connections.has(connection)) {\n            if (this.#needsLogging()) {\n                this.#addLogging(connection);\n            }\n            this.#connections.add(connection);\n        }\n        return connection;\n    }\n    async releaseConnection(connection) {\n        await this.#driver.releaseConnection(connection);\n    }\n    beginTransaction(connection, settings) {\n        return this.#driver.beginTransaction(connection, settings);\n    }\n    commitTransaction(connection) {\n        return this.#driver.commitTransaction(connection);\n    }\n    rollbackTransaction(connection) {\n        return this.#driver.rollbackTransaction(connection);\n    }\n    savepoint(connection, savepointName, compileQuery) {\n        if (this.#driver.savepoint) {\n            return this.#driver.savepoint(connection, savepointName, compileQuery);\n        }\n        throw new Error('The `savepoint` method is not supported by this driver');\n    }\n    rollbackToSavepoint(connection, savepointName, compileQuery) {\n        if (this.#driver.rollbackToSavepoint) {\n            return this.#driver.rollbackToSavepoint(connection, savepointName, compileQuery);\n        }\n        throw new Error('The `rollbackToSavepoint` method is not supported by this driver');\n    }\n    releaseSavepoint(connection, savepointName, compileQuery) {\n        if (this.#driver.releaseSavepoint) {\n            return this.#driver.releaseSavepoint(connection, savepointName, compileQuery);\n        }\n        throw new Error('The `releaseSavepoint` method is not supported by this driver');\n    }\n    async destroy() {\n        if (!this.#initPromise) {\n            return;\n        }\n        await this.#initPromise;\n        if (!this.#destroyPromise) {\n            this.#destroyPromise = this.#driver.destroy().catch((err) => {\n                this.#destroyPromise = undefined;\n                return Promise.reject(err);\n            });\n        }\n        await this.#destroyPromise;\n    }\n    #needsLogging() {\n        return (this.#log.isLevelEnabled('query') || this.#log.isLevelEnabled('error'));\n    }\n    // This method monkey patches the database connection's executeQuery method\n    // by adding logging code around it. Monkey patching is not pretty, but it's\n    // the best option in this case.\n    #addLogging(connection) {\n        const executeQuery = connection.executeQuery;\n        const streamQuery = connection.streamQuery;\n        const dis = this;\n        connection.executeQuery = async (compiledQuery) => {\n            let caughtError;\n            const startTime = performanceNow();\n            try {\n                return await executeQuery.call(connection, compiledQuery);\n            }\n            catch (error) {\n                caughtError = error;\n                await dis.#logError(error, compiledQuery, startTime);\n                throw error;\n            }\n            finally {\n                if (!caughtError) {\n                    await dis.#logQuery(compiledQuery, startTime);\n                }\n            }\n        };\n        connection.streamQuery = async function* (compiledQuery, chunkSize) {\n            let caughtError;\n            const startTime = performanceNow();\n            try {\n                for await (const result of streamQuery.call(connection, compiledQuery, chunkSize)) {\n                    yield result;\n                }\n            }\n            catch (error) {\n                caughtError = error;\n                await dis.#logError(error, compiledQuery, startTime);\n                throw error;\n            }\n            finally {\n                if (!caughtError) {\n                    await dis.#logQuery(compiledQuery, startTime, true);\n                }\n            }\n        };\n    }\n    async #logError(error, compiledQuery, startTime) {\n        await this.#log.error(() => ({\n            level: 'error',\n            error,\n            query: compiledQuery,\n            queryDurationMillis: this.#calculateDurationMillis(startTime),\n        }));\n    }\n    async #logQuery(compiledQuery, startTime, isStream = false) {\n        await this.#log.query(() => ({\n            level: 'query',\n            isStream,\n            query: compiledQuery,\n            queryDurationMillis: this.#calculateDurationMillis(startTime),\n        }));\n    }\n    #calculateDurationMillis(startTime) {\n        return performanceNow() - startTime;\n    }\n}\n", "/// <reference types=\"./single-connection-provider.d.ts\" />\nconst ignoreError = () => { };\nexport class SingleConnectionProvider {\n    #connection;\n    #runningPromise;\n    constructor(connection) {\n        this.#connection = connection;\n    }\n    async provideConnection(consumer) {\n        while (this.#runningPromise) {\n            await this.#runningPromise.catch(ignoreError);\n        }\n        // `#runningPromise` must be set to undefined before it's\n        // resolved or rejected. Otherwise the while loop above\n        // will misbehave.\n        this.#runningPromise = this.#run(consumer).finally(() => {\n            this.#runningPromise = undefined;\n        });\n        return this.#runningPromise;\n    }\n    // Run the runner in an async function to make sure it doesn't\n    // throw synchronous errors.\n    async #run(runner) {\n        return await runner(this.#connection);\n    }\n}\n", "/// <reference types=\"./driver.d.ts\" />\nexport const TRANSACTION_ACCESS_MODES = ['read only', 'read write'];\nexport const TRANSACTION_ISOLATION_LEVELS = [\n    'read uncommitted',\n    'read committed',\n    'repeatable read',\n    'serializable',\n    'snapshot',\n];\nexport function validateTransactionSettings(settings) {\n    if (settings.accessMode &&\n        !TRANSACTION_ACCESS_MODES.includes(settings.accessMode)) {\n        throw new Error(`invalid transaction access mode ${settings.accessMode}`);\n    }\n    if (settings.isolationLevel &&\n        !TRANSACTION_ISOLATION_LEVELS.includes(settings.isolationLevel)) {\n        throw new Error(`invalid transaction isolation level ${settings.isolationLevel}`);\n    }\n}\n", "/// <reference types=\"./log.d.ts\" />\nimport { freeze, isFunction } from './object-utils.js';\nexport const LOG_LEVELS = freeze(['query', 'error']);\nexport class Log {\n    #levels;\n    #logger;\n    constructor(config) {\n        if (isFunction(config)) {\n            this.#logger = config;\n            this.#levels = freeze({\n                query: true,\n                error: true,\n            });\n        }\n        else {\n            this.#logger = defaultLogger;\n            this.#levels = freeze({\n                query: config.includes('query'),\n                error: config.includes('error'),\n            });\n        }\n    }\n    isLevelEnabled(level) {\n        return this.#levels[level];\n    }\n    async query(getEvent) {\n        if (this.#levels.query) {\n            await this.#logger(getEvent());\n        }\n    }\n    async error(getEvent) {\n        if (this.#levels.error) {\n            await this.#logger(getEvent());\n        }\n    }\n}\nfunction defaultLogger(event) {\n    if (event.level === 'query') {\n        const prefix = `kysely:query:${event.isStream ? 'stream:' : ''}`;\n        console.log(`${prefix} ${event.query.sql}`);\n        console.log(`${prefix} duration: ${event.queryDurationMillis.toFixed(1)}ms`);\n    }\n    else if (event.level === 'error') {\n        if (event.error instanceof Error) {\n            console.error(`kysely:error: ${event.error.stack ?? event.error.message}`);\n        }\n        else {\n            console.error(`kysely:error: ${JSON.stringify({\n                error: event.error,\n                query: event.query.sql,\n                queryDurationMillis: event.queryDurationMillis,\n            })}`);\n        }\n    }\n}\n", "/// <reference types=\"./compilable.d.ts\" />\nimport { isFunction, isObject } from './object-utils.js';\nexport function isCompilable(value) {\n    return isObject(value) && isFunction(value.compile);\n}\n", "/// <reference types=\"./kysely.d.ts\" />\nimport { SchemaModule } from './schema/schema.js';\nimport { DynamicModule } from './dynamic/dynamic.js';\nimport { DefaultConnectionProvider } from './driver/default-connection-provider.js';\nimport { QueryCreator } from './query-creator.js';\nimport { DefaultQueryExecutor } from './query-executor/default-query-executor.js';\nimport { freeze, isObject, isUndefined } from './util/object-utils.js';\nimport { RuntimeDriver } from './driver/runtime-driver.js';\nimport { SingleConnectionProvider } from './driver/single-connection-provider.js';\nimport { validateTransactionSettings, } from './driver/driver.js';\nimport { createFunctionModule, } from './query-builder/function-module.js';\nimport { Log } from './util/log.js';\nimport { createQueryId } from './util/query-id.js';\nimport { isCompilable } from './util/compilable.js';\nimport { CaseBuilder } from './query-builder/case-builder.js';\nimport { CaseNode } from './operation-node/case-node.js';\nimport { parseExpression } from './parser/expression-parser.js';\nimport { WithSchemaPlugin } from './plugin/with-schema/with-schema-plugin.js';\nimport { provideControlledConnection, } from './util/provide-controlled-connection.js';\n// @ts-ignore\nSymbol.asyncDispose ??= Symbol('Symbol.asyncDispose');\n/**\n * The main Kysely class.\n *\n * You should create one instance of `Kysely` per database using the {@link Kysely}\n * constructor. Each `Kysely` instance maintains its own connection pool.\n *\n * ### Examples\n *\n * This example assumes your database has a \"person\" table:\n *\n * ```ts\n * import * as Sqlite from 'better-sqlite3'\n * import { type Generated, Kysely, SqliteDialect } from 'kysely'\n *\n * interface Database {\n *   person: {\n *     id: Generated<number>\n *     first_name: string\n *     last_name: string | null\n *   }\n * }\n *\n * const db = new Kysely<Database>({\n *   dialect: new SqliteDialect({\n *     database: new Sqlite(':memory:'),\n *   })\n * })\n * ```\n *\n * @typeParam DB - The database interface type. Keys of this type must be table names\n *    in the database and values must be interfaces that describe the rows in those\n *    tables. See the examples above.\n */\nexport class Kysely extends QueryCreator {\n    #props;\n    constructor(args) {\n        let superProps;\n        let props;\n        if (isKyselyProps(args)) {\n            superProps = { executor: args.executor };\n            props = { ...args };\n        }\n        else {\n            const dialect = args.dialect;\n            const driver = dialect.createDriver();\n            const compiler = dialect.createQueryCompiler();\n            const adapter = dialect.createAdapter();\n            const log = new Log(args.log ?? []);\n            const runtimeDriver = new RuntimeDriver(driver, log);\n            const connectionProvider = new DefaultConnectionProvider(runtimeDriver);\n            const executor = new DefaultQueryExecutor(compiler, adapter, connectionProvider, args.plugins ?? []);\n            superProps = { executor };\n            props = {\n                config: args,\n                executor,\n                dialect,\n                driver: runtimeDriver,\n            };\n        }\n        super(superProps);\n        this.#props = freeze(props);\n    }\n    /**\n     * Returns the {@link SchemaModule} module for building database schema.\n     */\n    get schema() {\n        return new SchemaModule(this.#props.executor);\n    }\n    /**\n     * Returns a the {@link DynamicModule} module.\n     *\n     * The {@link DynamicModule} module can be used to bypass strict typing and\n     * passing in dynamic values for the queries.\n     */\n    get dynamic() {\n        return new DynamicModule();\n    }\n    /**\n     * Returns a {@link DatabaseIntrospector | database introspector}.\n     */\n    get introspection() {\n        return this.#props.dialect.createIntrospector(this.withoutPlugins());\n    }\n    case(value) {\n        return new CaseBuilder({\n            node: CaseNode.create(isUndefined(value) ? undefined : parseExpression(value)),\n        });\n    }\n    /**\n     * Returns a {@link FunctionModule} that can be used to write somewhat type-safe function\n     * calls.\n     *\n     * ```ts\n     * const { count } = db.fn\n     *\n     * await db.selectFrom('person')\n     *   .innerJoin('pet', 'pet.owner_id', 'person.id')\n     *   .select([\n     *     'id',\n     *     count('pet.id').as('person_count'),\n     *   ])\n     *   .groupBy('person.id')\n     *   .having(count('pet.id'), '>', 10)\n     *   .execute()\n     * ```\n     *\n     * The generated SQL (PostgreSQL):\n     *\n     * ```sql\n     * select \"person\".\"id\", count(\"pet\".\"id\") as \"person_count\"\n     * from \"person\"\n     * inner join \"pet\" on \"pet\".\"owner_id\" = \"person\".\"id\"\n     * group by \"person\".\"id\"\n     * having count(\"pet\".\"id\") > $1\n     * ```\n     *\n     * Why \"somewhat\" type-safe? Because the function calls are not bound to the\n     * current query context. They allow you to reference columns and tables that\n     * are not in the current query. E.g. remove the `innerJoin` from the previous\n     * query and TypeScript won't even complain.\n     *\n     * If you want to make the function calls fully type-safe, you can use the\n     * {@link ExpressionBuilder.fn} getter for a query context-aware, stricter {@link FunctionModule}.\n     *\n     * ```ts\n     * await db.selectFrom('person')\n     *   .innerJoin('pet', 'pet.owner_id', 'person.id')\n     *   .select((eb) => [\n     *     'person.id',\n     *     eb.fn.count('pet.id').as('pet_count')\n     *   ])\n     *   .groupBy('person.id')\n     *   .having((eb) => eb.fn.count('pet.id'), '>', 10)\n     *   .execute()\n     * ```\n     */\n    get fn() {\n        return createFunctionModule();\n    }\n    /**\n     * Creates a {@link TransactionBuilder} that can be used to run queries inside a transaction.\n     *\n     * The returned {@link TransactionBuilder} can be used to configure the transaction. The\n     * {@link TransactionBuilder.execute} method can then be called to run the transaction.\n     * {@link TransactionBuilder.execute} takes a function that is run inside the\n     * transaction. If the function throws an exception,\n     * 1. the exception is caught,\n     * 2. the transaction is rolled back, and\n     * 3. the exception is thrown again.\n     * Otherwise the transaction is committed.\n     *\n     * The callback function passed to the {@link TransactionBuilder.execute | execute}\n     * method gets the transaction object as its only argument. The transaction is\n     * of type {@link Transaction} which inherits {@link Kysely}. Any query\n     * started through the transaction object is executed inside the transaction.\n     *\n     * To run a controlled transaction, allowing you to commit and rollback manually,\n     * use {@link startTransaction} instead.\n     *\n     * ### Examples\n     *\n     * <!-- siteExample(\"transactions\", \"Simple transaction\", 10) -->\n     *\n     * This example inserts two rows in a transaction. If an exception is thrown inside\n     * the callback passed to the `execute` method,\n     * 1. the exception is caught,\n     * 2. the transaction is rolled back, and\n     * 3. the exception is thrown again.\n     * Otherwise the transaction is committed.\n     *\n     * ```ts\n     * const catto = await db.transaction().execute(async (trx) => {\n     *   const jennifer = await trx.insertInto('person')\n     *     .values({\n     *       first_name: 'Jennifer',\n     *       last_name: 'Aniston',\n     *       age: 40,\n     *     })\n     *     .returning('id')\n     *     .executeTakeFirstOrThrow()\n     *\n     *   return await trx.insertInto('pet')\n     *     .values({\n     *       owner_id: jennifer.id,\n     *       name: 'Catto',\n     *       species: 'cat',\n     *       is_favorite: false,\n     *     })\n     *     .returningAll()\n     *     .executeTakeFirst()\n     * })\n     * ```\n     *\n     * Setting the isolation level:\n     *\n     * ```ts\n     * import type { Kysely } from 'kysely'\n     *\n     * await db\n     *   .transaction()\n     *   .setIsolationLevel('serializable')\n     *   .execute(async (trx) => {\n     *     await doStuff(trx)\n     *   })\n     *\n     * async function doStuff(kysely: typeof db) {\n     *   // ...\n     * }\n     * ```\n     */\n    transaction() {\n        return new TransactionBuilder({ ...this.#props });\n    }\n    /**\n     * Creates a {@link ControlledTransactionBuilder} that can be used to run queries inside a controlled transaction.\n     *\n     * The returned {@link ControlledTransactionBuilder} can be used to configure the transaction.\n     * The {@link ControlledTransactionBuilder.execute} method can then be called\n     * to start the transaction and return a {@link ControlledTransaction}.\n     *\n     * A {@link ControlledTransaction} allows you to commit and rollback manually,\n     * execute savepoint commands. It extends {@link Transaction} which extends {@link Kysely},\n     * so you can run queries inside the transaction. Once the transaction is committed,\n     * or rolled back, it can't be used anymore - all queries will throw an error.\n     * This is to prevent accidentally running queries outside the transaction - where\n     * atomicity is not guaranteed anymore.\n     *\n     * ### Examples\n     *\n     * <!-- siteExample(\"transactions\", \"Controlled transaction\", 11) -->\n     *\n     * A controlled transaction allows you to commit and rollback manually, execute\n     * savepoint commands, and queries in general.\n     *\n     * In this example we start a transaction, use it to insert two rows and then commit\n     * the transaction. If an error is thrown, we catch it and rollback the transaction.\n     *\n     * ```ts\n     * const trx = await db.startTransaction().execute()\n     *\n     * try {\n     *   const jennifer = await trx.insertInto('person')\n     *     .values({\n     *       first_name: 'Jennifer',\n     *       last_name: 'Aniston',\n     *       age: 40,\n     *     })\n     *     .returning('id')\n     *     .executeTakeFirstOrThrow()\n     *\n     *   const catto = await trx.insertInto('pet')\n     *     .values({\n     *       owner_id: jennifer.id,\n     *       name: 'Catto',\n     *       species: 'cat',\n     *       is_favorite: false,\n     *     })\n     *     .returningAll()\n     *     .executeTakeFirstOrThrow()\n     *\n     *   await trx.commit().execute()\n     *\n     *   // ...\n     * } catch (error) {\n     *   await trx.rollback().execute()\n     * }\n     * ```\n     *\n     * <!-- siteExample(\"transactions\", \"Controlled transaction /w savepoints\", 12) -->\n     *\n     * A controlled transaction allows you to commit and rollback manually, execute\n     * savepoint commands, and queries in general.\n     *\n     * In this example we start a transaction, insert a person, create a savepoint,\n     * try inserting a toy and a pet, and if an error is thrown, we rollback to the\n     * savepoint. Eventually we release the savepoint, insert an audit record and\n     * commit the transaction. If an error is thrown, we catch it and rollback the\n     * transaction.\n     *\n     * ```ts\n     * const trx = await db.startTransaction().execute()\n     *\n     * try {\n     *   const jennifer = await trx\n     *     .insertInto('person')\n     *     .values({\n     *       first_name: 'Jennifer',\n     *       last_name: 'Aniston',\n     *       age: 40,\n     *     })\n     *     .returning('id')\n     *     .executeTakeFirstOrThrow()\n     *\n     *   const trxAfterJennifer = await trx.savepoint('after_jennifer').execute()\n     *\n     *   try {\n     *     const catto = await trxAfterJennifer\n     *       .insertInto('pet')\n     *       .values({\n     *         owner_id: jennifer.id,\n     *         name: 'Catto',\n     *         species: 'cat',\n     *       })\n     *       .returning('id')\n     *       .executeTakeFirstOrThrow()\n     *\n     *     await trxAfterJennifer\n     *       .insertInto('toy')\n     *       .values({ name: 'Bone', price: 1.99, pet_id: catto.id })\n     *       .execute()\n     *   } catch (error) {\n     *     await trxAfterJennifer.rollbackToSavepoint('after_jennifer').execute()\n     *   }\n     *\n     *   await trxAfterJennifer.releaseSavepoint('after_jennifer').execute()\n     *\n     *   await trx.insertInto('audit').values({ action: 'added Jennifer' }).execute()\n     *\n     *   await trx.commit().execute()\n     * } catch (error) {\n     *   await trx.rollback().execute()\n     * }\n     * ```\n     */\n    startTransaction() {\n        return new ControlledTransactionBuilder({ ...this.#props });\n    }\n    /**\n     * Provides a kysely instance bound to a single database connection.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * await db\n     *   .connection()\n     *   .execute(async (db) => {\n     *     // `db` is an instance of `Kysely` that's bound to a single\n     *     // database connection. All queries executed through `db` use\n     *     // the same connection.\n     *     await doStuff(db)\n     *   })\n     *\n     * async function doStuff(kysely: typeof db) {\n     *   // ...\n     * }\n     * ```\n     */\n    connection() {\n        return new ConnectionBuilder({ ...this.#props });\n    }\n    /**\n     * Returns a copy of this Kysely instance with the given plugin installed.\n     */\n    withPlugin(plugin) {\n        return new Kysely({\n            ...this.#props,\n            executor: this.#props.executor.withPlugin(plugin),\n        });\n    }\n    /**\n     * Returns a copy of this Kysely instance without any plugins.\n     */\n    withoutPlugins() {\n        return new Kysely({\n            ...this.#props,\n            executor: this.#props.executor.withoutPlugins(),\n        });\n    }\n    /**\n     * @override\n     */\n    withSchema(schema) {\n        return new Kysely({\n            ...this.#props,\n            executor: this.#props.executor.withPluginAtFront(new WithSchemaPlugin(schema)),\n        });\n    }\n    /**\n     * Returns a copy of this Kysely instance with tables added to its\n     * database type.\n     *\n     * This method only modifies the types and doesn't affect any of the\n     * executed queries in any way.\n     *\n     * ### Examples\n     *\n     * The following example adds and uses a temporary table:\n     *\n     * ```ts\n     * await db.schema\n     *   .createTable('temp_table')\n     *   .temporary()\n     *   .addColumn('some_column', 'integer')\n     *   .execute()\n     *\n     * const tempDb = db.withTables<{\n     *   temp_table: {\n     *     some_column: number\n     *   }\n     * }>()\n     *\n     * await tempDb\n     *   .insertInto('temp_table')\n     *   .values({ some_column: 100 })\n     *   .execute()\n     * ```\n     */\n    withTables() {\n        return new Kysely({ ...this.#props });\n    }\n    /**\n     * Releases all resources and disconnects from the database.\n     *\n     * You need to call this when you are done using the `Kysely` instance.\n     */\n    async destroy() {\n        await this.#props.driver.destroy();\n    }\n    /**\n     * Returns true if this `Kysely` instance is a transaction.\n     *\n     * You can also use `db instanceof Transaction`.\n     */\n    get isTransaction() {\n        return false;\n    }\n    /**\n     * @internal\n     * @private\n     */\n    getExecutor() {\n        return this.#props.executor;\n    }\n    /**\n     * Executes a given compiled query or query builder.\n     *\n     * See {@link https://github.com/kysely-org/kysely/blob/master/site/docs/recipes/0004-splitting-query-building-and-execution.md#execute-compiled-queries splitting build, compile and execute code recipe} for more information.\n     */\n    executeQuery(query, queryId = createQueryId()) {\n        const compiledQuery = isCompilable(query) ? query.compile() : query;\n        return this.getExecutor().executeQuery(compiledQuery, queryId);\n    }\n    async [Symbol.asyncDispose]() {\n        await this.destroy();\n    }\n}\nexport class Transaction extends Kysely {\n    #props;\n    constructor(props) {\n        super(props);\n        this.#props = props;\n    }\n    // The return type is `true` instead of `boolean` to make Kysely<DB>\n    // unassignable to Transaction<DB> while allowing assignment the\n    // other way around.\n    get isTransaction() {\n        return true;\n    }\n    transaction() {\n        throw new Error('calling the transaction method for a Transaction is not supported');\n    }\n    connection() {\n        throw new Error('calling the connection method for a Transaction is not supported');\n    }\n    async destroy() {\n        throw new Error('calling the destroy method for a Transaction is not supported');\n    }\n    withPlugin(plugin) {\n        return new Transaction({\n            ...this.#props,\n            executor: this.#props.executor.withPlugin(plugin),\n        });\n    }\n    withoutPlugins() {\n        return new Transaction({\n            ...this.#props,\n            executor: this.#props.executor.withoutPlugins(),\n        });\n    }\n    withSchema(schema) {\n        return new Transaction({\n            ...this.#props,\n            executor: this.#props.executor.withPluginAtFront(new WithSchemaPlugin(schema)),\n        });\n    }\n    withTables() {\n        return new Transaction({ ...this.#props });\n    }\n}\nexport function isKyselyProps(obj) {\n    return (isObject(obj) &&\n        isObject(obj.config) &&\n        isObject(obj.driver) &&\n        isObject(obj.executor) &&\n        isObject(obj.dialect));\n}\nexport class ConnectionBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    async execute(callback) {\n        return this.#props.executor.provideConnection(async (connection) => {\n            const executor = this.#props.executor.withConnectionProvider(new SingleConnectionProvider(connection));\n            const db = new Kysely({\n                ...this.#props,\n                executor,\n            });\n            return await callback(db);\n        });\n    }\n}\nexport class TransactionBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    setAccessMode(accessMode) {\n        return new TransactionBuilder({\n            ...this.#props,\n            accessMode,\n        });\n    }\n    setIsolationLevel(isolationLevel) {\n        return new TransactionBuilder({\n            ...this.#props,\n            isolationLevel,\n        });\n    }\n    async execute(callback) {\n        const { isolationLevel, accessMode, ...kyselyProps } = this.#props;\n        const settings = { isolationLevel, accessMode };\n        validateTransactionSettings(settings);\n        return this.#props.executor.provideConnection(async (connection) => {\n            const executor = this.#props.executor.withConnectionProvider(new SingleConnectionProvider(connection));\n            const transaction = new Transaction({\n                ...kyselyProps,\n                executor,\n            });\n            try {\n                await this.#props.driver.beginTransaction(connection, settings);\n                const result = await callback(transaction);\n                await this.#props.driver.commitTransaction(connection);\n                return result;\n            }\n            catch (error) {\n                await this.#props.driver.rollbackTransaction(connection);\n                throw error;\n            }\n        });\n    }\n}\nexport class ControlledTransactionBuilder {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    setAccessMode(accessMode) {\n        return new ControlledTransactionBuilder({\n            ...this.#props,\n            accessMode,\n        });\n    }\n    setIsolationLevel(isolationLevel) {\n        return new ControlledTransactionBuilder({\n            ...this.#props,\n            isolationLevel,\n        });\n    }\n    async execute() {\n        const { isolationLevel, accessMode, ...props } = this.#props;\n        const settings = { isolationLevel, accessMode };\n        validateTransactionSettings(settings);\n        const connection = await provideControlledConnection(this.#props.executor);\n        await this.#props.driver.beginTransaction(connection.connection, settings);\n        return new ControlledTransaction({\n            ...props,\n            connection,\n            executor: this.#props.executor.withConnectionProvider(new SingleConnectionProvider(connection.connection)),\n        });\n    }\n}\nexport class ControlledTransaction extends Transaction {\n    #props;\n    #compileQuery;\n    #state;\n    constructor(props) {\n        const state = { isCommitted: false, isRolledBack: false };\n        props = {\n            ...props,\n            executor: new NotCommittedOrRolledBackAssertingExecutor(props.executor, state),\n        };\n        const { connection, ...transactionProps } = props;\n        super(transactionProps);\n        this.#props = freeze(props);\n        this.#state = state;\n        const queryId = createQueryId();\n        this.#compileQuery = (node) => props.executor.compileQuery(node, queryId);\n    }\n    get isCommitted() {\n        return this.#state.isCommitted;\n    }\n    get isRolledBack() {\n        return this.#state.isRolledBack;\n    }\n    /**\n     * Commits the transaction.\n     *\n     * See {@link rollback}.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * import type { Kysely } from 'kysely'\n     * import type { Database } from 'type-editor' // imaginary module\n     *\n     * const trx = await db.startTransaction().execute()\n     *\n     * try {\n     *   await doSomething(trx)\n     *\n     *   await trx.commit().execute()\n     * } catch (error) {\n     *   await trx.rollback().execute()\n     * }\n     *\n     * async function doSomething(kysely: Kysely<Database>) {}\n     * ```\n     */\n    commit() {\n        assertNotCommittedOrRolledBack(this.#state);\n        return new Command(async () => {\n            await this.#props.driver.commitTransaction(this.#props.connection.connection);\n            this.#state.isCommitted = true;\n            this.#props.connection.release();\n        });\n    }\n    /**\n     * Rolls back the transaction.\n     *\n     * See {@link commit} and {@link rollbackToSavepoint}.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * import type { Kysely } from 'kysely'\n     * import type { Database } from 'type-editor' // imaginary module\n     *\n     * const trx = await db.startTransaction().execute()\n     *\n     * try {\n     *   await doSomething(trx)\n     *\n     *   await trx.commit().execute()\n     * } catch (error) {\n     *   await trx.rollback().execute()\n     * }\n     *\n     * async function doSomething(kysely: Kysely<Database>) {}\n     * ```\n     */\n    rollback() {\n        assertNotCommittedOrRolledBack(this.#state);\n        return new Command(async () => {\n            await this.#props.driver.rollbackTransaction(this.#props.connection.connection);\n            this.#state.isRolledBack = true;\n            this.#props.connection.release();\n        });\n    }\n    /**\n     * Creates a savepoint with a given name.\n     *\n     * See {@link rollbackToSavepoint} and {@link releaseSavepoint}.\n     *\n     * For a type-safe experience, you should use the returned instance from now on.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * import type { Kysely } from 'kysely'\n     * import type { Database } from 'type-editor' // imaginary module\n     *\n     * const trx = await db.startTransaction().execute()\n     *\n     * await insertJennifer(trx)\n     *\n     * const trxAfterJennifer = await trx.savepoint('after_jennifer').execute()\n     *\n     * try {\n     *   await doSomething(trxAfterJennifer)\n     * } catch (error) {\n     *   await trxAfterJennifer.rollbackToSavepoint('after_jennifer').execute()\n     * }\n     *\n     * async function insertJennifer(kysely: Kysely<Database>) {}\n     * async function doSomething(kysely: Kysely<Database>) {}\n     * ```\n     */\n    savepoint(savepointName) {\n        assertNotCommittedOrRolledBack(this.#state);\n        return new Command(async () => {\n            await this.#props.driver.savepoint?.(this.#props.connection.connection, savepointName, this.#compileQuery);\n            return new ControlledTransaction({ ...this.#props });\n        });\n    }\n    /**\n     * Rolls back to a savepoint with a given name.\n     *\n     * See {@link savepoint} and {@link releaseSavepoint}.\n     *\n     * You must use the same instance returned by {@link savepoint}, or\n     * escape the type-check by using `as any`.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * import type { Kysely } from 'kysely'\n     * import type { Database } from 'type-editor' // imaginary module\n     *\n     * const trx = await db.startTransaction().execute()\n     *\n     * await insertJennifer(trx)\n     *\n     * const trxAfterJennifer = await trx.savepoint('after_jennifer').execute()\n     *\n     * try {\n     *   await doSomething(trxAfterJennifer)\n     * } catch (error) {\n     *   await trxAfterJennifer.rollbackToSavepoint('after_jennifer').execute()\n     * }\n     *\n     * async function insertJennifer(kysely: Kysely<Database>) {}\n     * async function doSomething(kysely: Kysely<Database>) {}\n     * ```\n     */\n    rollbackToSavepoint(savepointName) {\n        assertNotCommittedOrRolledBack(this.#state);\n        return new Command(async () => {\n            await this.#props.driver.rollbackToSavepoint?.(this.#props.connection.connection, savepointName, this.#compileQuery);\n            return new ControlledTransaction({ ...this.#props });\n        });\n    }\n    /**\n     * Releases a savepoint with a given name.\n     *\n     * See {@link savepoint} and {@link rollbackToSavepoint}.\n     *\n     * You must use the same instance returned by {@link savepoint}, or\n     * escape the type-check by using `as any`.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * import type { Kysely } from 'kysely'\n     * import type { Database } from 'type-editor' // imaginary module\n     *\n     * const trx = await db.startTransaction().execute()\n     *\n     * await insertJennifer(trx)\n     *\n     * const trxAfterJennifer = await trx.savepoint('after_jennifer').execute()\n     *\n     * try {\n     *   await doSomething(trxAfterJennifer)\n     * } catch (error) {\n     *   await trxAfterJennifer.rollbackToSavepoint('after_jennifer').execute()\n     * }\n     *\n     * await trxAfterJennifer.releaseSavepoint('after_jennifer').execute()\n     *\n     * await doSomethingElse(trx)\n     *\n     * async function insertJennifer(kysely: Kysely<Database>) {}\n     * async function doSomething(kysely: Kysely<Database>) {}\n     * async function doSomethingElse(kysely: Kysely<Database>) {}\n     * ```\n     */\n    releaseSavepoint(savepointName) {\n        assertNotCommittedOrRolledBack(this.#state);\n        return new Command(async () => {\n            await this.#props.driver.releaseSavepoint?.(this.#props.connection.connection, savepointName, this.#compileQuery);\n            return new ControlledTransaction({ ...this.#props });\n        });\n    }\n    withPlugin(plugin) {\n        return new ControlledTransaction({\n            ...this.#props,\n            executor: this.#props.executor.withPlugin(plugin),\n        });\n    }\n    withoutPlugins() {\n        return new ControlledTransaction({\n            ...this.#props,\n            executor: this.#props.executor.withoutPlugins(),\n        });\n    }\n    withSchema(schema) {\n        return new ControlledTransaction({\n            ...this.#props,\n            executor: this.#props.executor.withPluginAtFront(new WithSchemaPlugin(schema)),\n        });\n    }\n    withTables() {\n        return new ControlledTransaction({ ...this.#props });\n    }\n}\nexport class Command {\n    #cb;\n    constructor(cb) {\n        this.#cb = cb;\n    }\n    /**\n     * Executes the command.\n     */\n    async execute() {\n        return await this.#cb();\n    }\n}\nfunction assertNotCommittedOrRolledBack(state) {\n    if (state.isCommitted) {\n        throw new Error('Transaction is already committed');\n    }\n    if (state.isRolledBack) {\n        throw new Error('Transaction is already rolled back');\n    }\n}\n/**\n * An executor wrapper that asserts that the transaction state is not committed\n * or rolled back when a query is executed.\n *\n * @internal\n */\nclass NotCommittedOrRolledBackAssertingExecutor {\n    #executor;\n    #state;\n    constructor(executor, state) {\n        if (executor instanceof NotCommittedOrRolledBackAssertingExecutor) {\n            this.#executor = executor.#executor;\n        }\n        else {\n            this.#executor = executor;\n        }\n        this.#state = state;\n    }\n    get adapter() {\n        return this.#executor.adapter;\n    }\n    get plugins() {\n        return this.#executor.plugins;\n    }\n    transformQuery(node, queryId) {\n        return this.#executor.transformQuery(node, queryId);\n    }\n    compileQuery(node, queryId) {\n        return this.#executor.compileQuery(node, queryId);\n    }\n    provideConnection(consumer) {\n        return this.#executor.provideConnection(consumer);\n    }\n    executeQuery(compiledQuery, queryId) {\n        assertNotCommittedOrRolledBack(this.#state);\n        return this.#executor.executeQuery(compiledQuery, queryId);\n    }\n    stream(compiledQuery, chunkSize, queryId) {\n        assertNotCommittedOrRolledBack(this.#state);\n        return this.#executor.stream(compiledQuery, chunkSize, queryId);\n    }\n    withConnectionProvider(connectionProvider) {\n        return new NotCommittedOrRolledBackAssertingExecutor(this.#executor.withConnectionProvider(connectionProvider), this.#state);\n    }\n    withPlugin(plugin) {\n        return new NotCommittedOrRolledBackAssertingExecutor(this.#executor.withPlugin(plugin), this.#state);\n    }\n    withPlugins(plugins) {\n        return new NotCommittedOrRolledBackAssertingExecutor(this.#executor.withPlugins(plugins), this.#state);\n    }\n    withPluginAtFront(plugin) {\n        return new NotCommittedOrRolledBackAssertingExecutor(this.#executor.withPluginAtFront(plugin), this.#state);\n    }\n    withoutPlugins() {\n        return new NotCommittedOrRolledBackAssertingExecutor(this.#executor.withoutPlugins(), this.#state);\n    }\n}\n", "/// <reference types=\"./raw-builder.d.ts\" />\nimport { AliasNode } from '../operation-node/alias-node.js';\nimport { freeze } from '../util/object-utils.js';\nimport { NOOP_QUERY_EXECUTOR } from '../query-executor/noop-query-executor.js';\nimport { IdentifierNode } from '../operation-node/identifier-node.js';\nimport { isOperationNodeSource } from '../operation-node/operation-node-source.js';\nclass RawBuilderImpl {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    get expressionType() {\n        return undefined;\n    }\n    get isRawBuilder() {\n        return true;\n    }\n    as(alias) {\n        return new AliasedRawBuilderImpl(this, alias);\n    }\n    $castTo() {\n        return new RawBuilderImpl({ ...this.#props });\n    }\n    $notNull() {\n        return new RawBuilderImpl(this.#props);\n    }\n    withPlugin(plugin) {\n        return new RawBuilderImpl({\n            ...this.#props,\n            plugins: this.#props.plugins !== undefined\n                ? freeze([...this.#props.plugins, plugin])\n                : freeze([plugin]),\n        });\n    }\n    toOperationNode() {\n        return this.#toOperationNode(this.#getExecutor());\n    }\n    compile(executorProvider) {\n        return this.#compile(this.#getExecutor(executorProvider));\n    }\n    async execute(executorProvider) {\n        const executor = this.#getExecutor(executorProvider);\n        return executor.executeQuery(this.#compile(executor), this.#props.queryId);\n    }\n    #getExecutor(executorProvider) {\n        const executor = executorProvider !== undefined\n            ? executorProvider.getExecutor()\n            : NOOP_QUERY_EXECUTOR;\n        return this.#props.plugins !== undefined\n            ? executor.withPlugins(this.#props.plugins)\n            : executor;\n    }\n    #toOperationNode(executor) {\n        return executor.transformQuery(this.#props.rawNode, this.#props.queryId);\n    }\n    #compile(executor) {\n        return executor.compileQuery(this.#toOperationNode(executor), this.#props.queryId);\n    }\n}\nexport function createRawBuilder(props) {\n    return new RawBuilderImpl(props);\n}\nclass AliasedRawBuilderImpl {\n    #rawBuilder;\n    #alias;\n    constructor(rawBuilder, alias) {\n        this.#rawBuilder = rawBuilder;\n        this.#alias = alias;\n    }\n    get expression() {\n        return this.#rawBuilder;\n    }\n    get alias() {\n        return this.#alias;\n    }\n    get rawBuilder() {\n        return this.#rawBuilder;\n    }\n    toOperationNode() {\n        return AliasNode.create(this.#rawBuilder.toOperationNode(), isOperationNodeSource(this.#alias)\n            ? this.#alias.toOperationNode()\n            : IdentifierNode.create(this.#alias));\n    }\n}\n", "/// <reference types=\"./sql.d.ts\" />\nimport { IdentifierNode } from '../operation-node/identifier-node.js';\nimport { isOperationNodeSource } from '../operation-node/operation-node-source.js';\nimport { RawNode } from '../operation-node/raw-node.js';\nimport { ValueNode } from '../operation-node/value-node.js';\nimport { parseStringReference } from '../parser/reference-parser.js';\nimport { parseTable } from '../parser/table-parser.js';\nimport { parseValueExpression } from '../parser/value-parser.js';\nimport { createQueryId } from '../util/query-id.js';\nimport { createRawBuilder } from './raw-builder.js';\nexport const sql = Object.assign((sqlFragments, ...parameters) => {\n    return createRawBuilder({\n        queryId: createQueryId(),\n        rawNode: RawNode.create(sqlFragments, parameters?.map(parseParameter) ?? []),\n    });\n}, {\n    ref(columnReference) {\n        return createRawBuilder({\n            queryId: createQueryId(),\n            rawNode: RawNode.createWithChild(parseStringReference(columnReference)),\n        });\n    },\n    val(value) {\n        return createRawBuilder({\n            queryId: createQueryId(),\n            rawNode: RawNode.createWithChild(parseValueExpression(value)),\n        });\n    },\n    value(value) {\n        return this.val(value);\n    },\n    table(tableReference) {\n        return createRawBuilder({\n            queryId: createQueryId(),\n            rawNode: RawNode.createWithChild(parseTable(tableReference)),\n        });\n    },\n    id(...ids) {\n        const fragments = new Array(ids.length + 1).fill('.');\n        fragments[0] = '';\n        fragments[fragments.length - 1] = '';\n        return createRawBuilder({\n            queryId: createQueryId(),\n            rawNode: RawNode.create(fragments, ids.map(IdentifierNode.create)),\n        });\n    },\n    lit(value) {\n        return createRawBuilder({\n            queryId: createQueryId(),\n            rawNode: RawNode.createWithChild(ValueNode.createImmediate(value)),\n        });\n    },\n    literal(value) {\n        return this.lit(value);\n    },\n    raw(sql) {\n        return createRawBuilder({\n            queryId: createQueryId(),\n            rawNode: RawNode.createWithSql(sql),\n        });\n    },\n    join(array, separator = sql `, `) {\n        const nodes = new Array(Math.max(2 * array.length - 1, 0));\n        const sep = separator.toOperationNode();\n        for (let i = 0; i < array.length; ++i) {\n            nodes[2 * i] = parseParameter(array[i]);\n            if (i !== array.length - 1) {\n                nodes[2 * i + 1] = sep;\n            }\n        }\n        return createRawBuilder({\n            queryId: createQueryId(),\n            rawNode: RawNode.createWithChildren(nodes),\n        });\n    },\n});\nfunction parseParameter(param) {\n    if (isOperationNodeSource(param)) {\n        return param.toOperationNode();\n    }\n    return parseValueExpression(param);\n}\n", "/// <reference types=\"./operation-node-visitor.d.ts\" />\nimport { freeze } from '../util/object-utils.js';\nexport class OperationNodeVisitor {\n    nodeStack = [];\n    get parentNode() {\n        return this.nodeStack[this.nodeStack.length - 2];\n    }\n    #visitors = freeze({\n        AliasNode: this.visitAlias.bind(this),\n        ColumnNode: this.visitColumn.bind(this),\n        IdentifierNode: this.visitIdentifier.bind(this),\n        SchemableIdentifierNode: this.visitSchemableIdentifier.bind(this),\n        RawNode: this.visitRaw.bind(this),\n        ReferenceNode: this.visitReference.bind(this),\n        SelectQueryNode: this.visitSelectQuery.bind(this),\n        SelectionNode: this.visitSelection.bind(this),\n        TableNode: this.visitTable.bind(this),\n        FromNode: this.visitFrom.bind(this),\n        SelectAllNode: this.visitSelectAll.bind(this),\n        AndNode: this.visitAnd.bind(this),\n        OrNode: this.visitOr.bind(this),\n        ValueNode: this.visitValue.bind(this),\n        ValueListNode: this.visitValueList.bind(this),\n        PrimitiveValueListNode: this.visitPrimitiveValueList.bind(this),\n        ParensNode: this.visitParens.bind(this),\n        JoinNode: this.visitJoin.bind(this),\n        OperatorNode: this.visitOperator.bind(this),\n        WhereNode: this.visitWhere.bind(this),\n        InsertQueryNode: this.visitInsertQuery.bind(this),\n        DeleteQueryNode: this.visitDeleteQuery.bind(this),\n        ReturningNode: this.visitReturning.bind(this),\n        CreateTableNode: this.visitCreateTable.bind(this),\n        AddColumnNode: this.visitAddColumn.bind(this),\n        ColumnDefinitionNode: this.visitColumnDefinition.bind(this),\n        DropTableNode: this.visitDropTable.bind(this),\n        DataTypeNode: this.visitDataType.bind(this),\n        OrderByNode: this.visitOrderBy.bind(this),\n        OrderByItemNode: this.visitOrderByItem.bind(this),\n        GroupByNode: this.visitGroupBy.bind(this),\n        GroupByItemNode: this.visitGroupByItem.bind(this),\n        UpdateQueryNode: this.visitUpdateQuery.bind(this),\n        ColumnUpdateNode: this.visitColumnUpdate.bind(this),\n        LimitNode: this.visitLimit.bind(this),\n        OffsetNode: this.visitOffset.bind(this),\n        OnConflictNode: this.visitOnConflict.bind(this),\n        OnDuplicateKeyNode: this.visitOnDuplicateKey.bind(this),\n        CreateIndexNode: this.visitCreateIndex.bind(this),\n        DropIndexNode: this.visitDropIndex.bind(this),\n        ListNode: this.visitList.bind(this),\n        PrimaryKeyConstraintNode: this.visitPrimaryKeyConstraint.bind(this),\n        UniqueConstraintNode: this.visitUniqueConstraint.bind(this),\n        ReferencesNode: this.visitReferences.bind(this),\n        CheckConstraintNode: this.visitCheckConstraint.bind(this),\n        WithNode: this.visitWith.bind(this),\n        CommonTableExpressionNode: this.visitCommonTableExpression.bind(this),\n        CommonTableExpressionNameNode: this.visitCommonTableExpressionName.bind(this),\n        HavingNode: this.visitHaving.bind(this),\n        CreateSchemaNode: this.visitCreateSchema.bind(this),\n        DropSchemaNode: this.visitDropSchema.bind(this),\n        AlterTableNode: this.visitAlterTable.bind(this),\n        DropColumnNode: this.visitDropColumn.bind(this),\n        RenameColumnNode: this.visitRenameColumn.bind(this),\n        AlterColumnNode: this.visitAlterColumn.bind(this),\n        ModifyColumnNode: this.visitModifyColumn.bind(this),\n        AddConstraintNode: this.visitAddConstraint.bind(this),\n        DropConstraintNode: this.visitDropConstraint.bind(this),\n        RenameConstraintNode: this.visitRenameConstraint.bind(this),\n        ForeignKeyConstraintNode: this.visitForeignKeyConstraint.bind(this),\n        CreateViewNode: this.visitCreateView.bind(this),\n        RefreshMaterializedViewNode: this.visitRefreshMaterializedView.bind(this),\n        DropViewNode: this.visitDropView.bind(this),\n        GeneratedNode: this.visitGenerated.bind(this),\n        DefaultValueNode: this.visitDefaultValue.bind(this),\n        OnNode: this.visitOn.bind(this),\n        ValuesNode: this.visitValues.bind(this),\n        SelectModifierNode: this.visitSelectModifier.bind(this),\n        CreateTypeNode: this.visitCreateType.bind(this),\n        DropTypeNode: this.visitDropType.bind(this),\n        ExplainNode: this.visitExplain.bind(this),\n        DefaultInsertValueNode: this.visitDefaultInsertValue.bind(this),\n        AggregateFunctionNode: this.visitAggregateFunction.bind(this),\n        OverNode: this.visitOver.bind(this),\n        PartitionByNode: this.visitPartitionBy.bind(this),\n        PartitionByItemNode: this.visitPartitionByItem.bind(this),\n        SetOperationNode: this.visitSetOperation.bind(this),\n        BinaryOperationNode: this.visitBinaryOperation.bind(this),\n        UnaryOperationNode: this.visitUnaryOperation.bind(this),\n        UsingNode: this.visitUsing.bind(this),\n        FunctionNode: this.visitFunction.bind(this),\n        CaseNode: this.visitCase.bind(this),\n        WhenNode: this.visitWhen.bind(this),\n        JSONReferenceNode: this.visitJSONReference.bind(this),\n        JSONPathNode: this.visitJSONPath.bind(this),\n        JSONPathLegNode: this.visitJSONPathLeg.bind(this),\n        JSONOperatorChainNode: this.visitJSONOperatorChain.bind(this),\n        TupleNode: this.visitTuple.bind(this),\n        MergeQueryNode: this.visitMergeQuery.bind(this),\n        MatchedNode: this.visitMatched.bind(this),\n        AddIndexNode: this.visitAddIndex.bind(this),\n        CastNode: this.visitCast.bind(this),\n        FetchNode: this.visitFetch.bind(this),\n        TopNode: this.visitTop.bind(this),\n        OutputNode: this.visitOutput.bind(this),\n        OrActionNode: this.visitOrAction.bind(this),\n        CollateNode: this.visitCollate.bind(this),\n    });\n    visitNode = (node) => {\n        this.nodeStack.push(node);\n        this.#visitors[node.kind](node);\n        this.nodeStack.pop();\n    };\n}\n", "/// <reference types=\"./default-query-compiler.d.ts\" />\nimport { CreateTableNode } from '../operation-node/create-table-node.js';\nimport { InsertQueryNode } from '../operation-node/insert-query-node.js';\nimport { OperationNodeVisitor } from '../operation-node/operation-node-visitor.js';\nimport { OperatorNode } from '../operation-node/operator-node.js';\nimport { ParensNode } from '../operation-node/parens-node.js';\nimport { QueryNode } from '../operation-node/query-node.js';\nimport { freeze, isString, isNumber, isBoolean, isNull, isDate, isBigInt, } from '../util/object-utils.js';\nimport { CreateViewNode } from '../operation-node/create-view-node.js';\nimport { SetOperationNode } from '../operation-node/set-operation-node.js';\nimport { MergeQueryNode } from '../operation-node/merge-query-node.js';\nimport { logOnce } from '../util/log-once.js';\nconst LIT_WRAP_REGEX = /'/g;\nexport class DefaultQueryCompiler extends OperationNodeVisitor {\n    #sql = '';\n    #parameters = [];\n    get numParameters() {\n        return this.#parameters.length;\n    }\n    compileQuery(node, queryId) {\n        this.#sql = '';\n        this.#parameters = [];\n        this.nodeStack.splice(0, this.nodeStack.length);\n        this.visitNode(node);\n        return freeze({\n            query: node,\n            queryId,\n            sql: this.getSql(),\n            parameters: [...this.#parameters],\n        });\n    }\n    getSql() {\n        return this.#sql;\n    }\n    visitSelectQuery(node) {\n        const wrapInParens = this.parentNode !== undefined &&\n            !ParensNode.is(this.parentNode) &&\n            !InsertQueryNode.is(this.parentNode) &&\n            !CreateTableNode.is(this.parentNode) &&\n            !CreateViewNode.is(this.parentNode) &&\n            !SetOperationNode.is(this.parentNode);\n        if (this.parentNode === undefined && node.explain) {\n            this.visitNode(node.explain);\n            this.append(' ');\n        }\n        if (wrapInParens) {\n            this.append('(');\n        }\n        if (node.with) {\n            this.visitNode(node.with);\n            this.append(' ');\n        }\n        this.append('select');\n        if (node.distinctOn) {\n            this.append(' ');\n            this.compileDistinctOn(node.distinctOn);\n        }\n        if (node.frontModifiers?.length) {\n            this.append(' ');\n            this.compileList(node.frontModifiers, ' ');\n        }\n        if (node.top) {\n            this.append(' ');\n            this.visitNode(node.top);\n        }\n        if (node.selections) {\n            this.append(' ');\n            this.compileList(node.selections);\n        }\n        if (node.from) {\n            this.append(' ');\n            this.visitNode(node.from);\n        }\n        if (node.joins) {\n            this.append(' ');\n            this.compileList(node.joins, ' ');\n        }\n        if (node.where) {\n            this.append(' ');\n            this.visitNode(node.where);\n        }\n        if (node.groupBy) {\n            this.append(' ');\n            this.visitNode(node.groupBy);\n        }\n        if (node.having) {\n            this.append(' ');\n            this.visitNode(node.having);\n        }\n        if (node.setOperations) {\n            this.append(' ');\n            this.compileList(node.setOperations, ' ');\n        }\n        if (node.orderBy) {\n            this.append(' ');\n            this.visitNode(node.orderBy);\n        }\n        if (node.limit) {\n            this.append(' ');\n            this.visitNode(node.limit);\n        }\n        if (node.offset) {\n            this.append(' ');\n            this.visitNode(node.offset);\n        }\n        if (node.fetch) {\n            this.append(' ');\n            this.visitNode(node.fetch);\n        }\n        if (node.endModifiers?.length) {\n            this.append(' ');\n            this.compileList(this.sortSelectModifiers([...node.endModifiers]), ' ');\n        }\n        if (wrapInParens) {\n            this.append(')');\n        }\n    }\n    visitFrom(node) {\n        this.append('from ');\n        this.compileList(node.froms);\n    }\n    visitSelection(node) {\n        this.visitNode(node.selection);\n    }\n    visitColumn(node) {\n        this.visitNode(node.column);\n    }\n    compileDistinctOn(expressions) {\n        this.append('distinct on (');\n        this.compileList(expressions);\n        this.append(')');\n    }\n    compileList(nodes, separator = ', ') {\n        const lastIndex = nodes.length - 1;\n        for (let i = 0; i <= lastIndex; i++) {\n            this.visitNode(nodes[i]);\n            if (i < lastIndex) {\n                this.append(separator);\n            }\n        }\n    }\n    visitWhere(node) {\n        this.append('where ');\n        this.visitNode(node.where);\n    }\n    visitHaving(node) {\n        this.append('having ');\n        this.visitNode(node.having);\n    }\n    visitInsertQuery(node) {\n        const rootQueryNode = this.nodeStack.find(QueryNode.is);\n        const isSubQuery = rootQueryNode !== node;\n        if (!isSubQuery && node.explain) {\n            this.visitNode(node.explain);\n            this.append(' ');\n        }\n        if (isSubQuery && !MergeQueryNode.is(rootQueryNode)) {\n            this.append('(');\n        }\n        if (node.with) {\n            this.visitNode(node.with);\n            this.append(' ');\n        }\n        this.append(node.replace ? 'replace' : 'insert');\n        // TODO: remove in 0.29.\n        if (node.ignore) {\n            logOnce('`InsertQueryNode.ignore` is deprecated. Use `InsertQueryNode.orAction` instead.');\n            this.append(' ignore');\n        }\n        if (node.orAction) {\n            this.append(' ');\n            this.visitNode(node.orAction);\n        }\n        if (node.top) {\n            this.append(' ');\n            this.visitNode(node.top);\n        }\n        if (node.into) {\n            this.append(' into ');\n            this.visitNode(node.into);\n        }\n        if (node.columns) {\n            this.append(' (');\n            this.compileList(node.columns);\n            this.append(')');\n        }\n        if (node.output) {\n            this.append(' ');\n            this.visitNode(node.output);\n        }\n        if (node.values) {\n            this.append(' ');\n            this.visitNode(node.values);\n        }\n        if (node.defaultValues) {\n            this.append(' ');\n            this.append('default values');\n        }\n        if (node.onConflict) {\n            this.append(' ');\n            this.visitNode(node.onConflict);\n        }\n        if (node.onDuplicateKey) {\n            this.append(' ');\n            this.visitNode(node.onDuplicateKey);\n        }\n        if (node.returning) {\n            this.append(' ');\n            this.visitNode(node.returning);\n        }\n        if (isSubQuery && !MergeQueryNode.is(rootQueryNode)) {\n            this.append(')');\n        }\n        if (node.endModifiers?.length) {\n            this.append(' ');\n            this.compileList(node.endModifiers, ' ');\n        }\n    }\n    visitValues(node) {\n        this.append('values ');\n        this.compileList(node.values);\n    }\n    visitDeleteQuery(node) {\n        const isSubQuery = this.nodeStack.find(QueryNode.is) !== node;\n        if (!isSubQuery && node.explain) {\n            this.visitNode(node.explain);\n            this.append(' ');\n        }\n        if (isSubQuery) {\n            this.append('(');\n        }\n        if (node.with) {\n            this.visitNode(node.with);\n            this.append(' ');\n        }\n        this.append('delete ');\n        if (node.top) {\n            this.visitNode(node.top);\n            this.append(' ');\n        }\n        this.visitNode(node.from);\n        if (node.output) {\n            this.append(' ');\n            this.visitNode(node.output);\n        }\n        if (node.using) {\n            this.append(' ');\n            this.visitNode(node.using);\n        }\n        if (node.joins) {\n            this.append(' ');\n            this.compileList(node.joins, ' ');\n        }\n        if (node.where) {\n            this.append(' ');\n            this.visitNode(node.where);\n        }\n        if (node.orderBy) {\n            this.append(' ');\n            this.visitNode(node.orderBy);\n        }\n        if (node.limit) {\n            this.append(' ');\n            this.visitNode(node.limit);\n        }\n        if (node.returning) {\n            this.append(' ');\n            this.visitNode(node.returning);\n        }\n        if (isSubQuery) {\n            this.append(')');\n        }\n        if (node.endModifiers?.length) {\n            this.append(' ');\n            this.compileList(node.endModifiers, ' ');\n        }\n    }\n    visitReturning(node) {\n        this.append('returning ');\n        this.compileList(node.selections);\n    }\n    visitAlias(node) {\n        this.visitNode(node.node);\n        this.append(' as ');\n        this.visitNode(node.alias);\n    }\n    visitReference(node) {\n        if (node.table) {\n            this.visitNode(node.table);\n            this.append('.');\n        }\n        this.visitNode(node.column);\n    }\n    visitSelectAll(_) {\n        this.append('*');\n    }\n    visitIdentifier(node) {\n        this.append(this.getLeftIdentifierWrapper());\n        this.compileUnwrappedIdentifier(node);\n        this.append(this.getRightIdentifierWrapper());\n    }\n    compileUnwrappedIdentifier(node) {\n        if (!isString(node.name)) {\n            throw new Error('a non-string identifier was passed to compileUnwrappedIdentifier.');\n        }\n        this.append(this.sanitizeIdentifier(node.name));\n    }\n    visitAnd(node) {\n        this.visitNode(node.left);\n        this.append(' and ');\n        this.visitNode(node.right);\n    }\n    visitOr(node) {\n        this.visitNode(node.left);\n        this.append(' or ');\n        this.visitNode(node.right);\n    }\n    visitValue(node) {\n        if (node.immediate) {\n            this.appendImmediateValue(node.value);\n        }\n        else {\n            this.appendValue(node.value);\n        }\n    }\n    visitValueList(node) {\n        this.append('(');\n        this.compileList(node.values);\n        this.append(')');\n    }\n    visitTuple(node) {\n        this.append('(');\n        this.compileList(node.values);\n        this.append(')');\n    }\n    visitPrimitiveValueList(node) {\n        this.append('(');\n        const { values } = node;\n        for (let i = 0; i < values.length; ++i) {\n            this.appendValue(values[i]);\n            if (i !== values.length - 1) {\n                this.append(', ');\n            }\n        }\n        this.append(')');\n    }\n    visitParens(node) {\n        this.append('(');\n        this.visitNode(node.node);\n        this.append(')');\n    }\n    visitJoin(node) {\n        this.append(JOIN_TYPE_SQL[node.joinType]);\n        this.append(' ');\n        this.visitNode(node.table);\n        if (node.on) {\n            this.append(' ');\n            this.visitNode(node.on);\n        }\n    }\n    visitOn(node) {\n        this.append('on ');\n        this.visitNode(node.on);\n    }\n    visitRaw(node) {\n        const { sqlFragments, parameters: params } = node;\n        for (let i = 0; i < sqlFragments.length; ++i) {\n            this.append(sqlFragments[i]);\n            if (params.length > i) {\n                this.visitNode(params[i]);\n            }\n        }\n    }\n    visitOperator(node) {\n        this.append(node.operator);\n    }\n    visitTable(node) {\n        this.visitNode(node.table);\n    }\n    visitSchemableIdentifier(node) {\n        if (node.schema) {\n            this.visitNode(node.schema);\n            this.append('.');\n        }\n        this.visitNode(node.identifier);\n    }\n    visitCreateTable(node) {\n        this.append('create ');\n        if (node.frontModifiers && node.frontModifiers.length > 0) {\n            this.compileList(node.frontModifiers, ' ');\n            this.append(' ');\n        }\n        if (node.temporary) {\n            this.append('temporary ');\n        }\n        this.append('table ');\n        if (node.ifNotExists) {\n            this.append('if not exists ');\n        }\n        this.visitNode(node.table);\n        if (node.selectQuery) {\n            this.append(' as ');\n            this.visitNode(node.selectQuery);\n        }\n        else {\n            this.append(' (');\n            this.compileList([...node.columns, ...(node.constraints ?? [])]);\n            this.append(')');\n            if (node.onCommit) {\n                this.append(' on commit ');\n                this.append(node.onCommit);\n            }\n            if (node.endModifiers && node.endModifiers.length > 0) {\n                this.append(' ');\n                this.compileList(node.endModifiers, ' ');\n            }\n        }\n    }\n    visitColumnDefinition(node) {\n        if (node.ifNotExists) {\n            this.append('if not exists ');\n        }\n        this.visitNode(node.column);\n        this.append(' ');\n        this.visitNode(node.dataType);\n        if (node.unsigned) {\n            this.append(' unsigned');\n        }\n        if (node.frontModifiers && node.frontModifiers.length > 0) {\n            this.append(' ');\n            this.compileList(node.frontModifiers, ' ');\n        }\n        if (node.generated) {\n            this.append(' ');\n            this.visitNode(node.generated);\n        }\n        if (node.identity) {\n            this.append(' identity');\n        }\n        if (node.defaultTo) {\n            this.append(' ');\n            this.visitNode(node.defaultTo);\n        }\n        if (node.notNull) {\n            this.append(' not null');\n        }\n        if (node.unique) {\n            this.append(' unique');\n        }\n        if (node.nullsNotDistinct) {\n            this.append(' nulls not distinct');\n        }\n        if (node.primaryKey) {\n            this.append(' primary key');\n        }\n        if (node.autoIncrement) {\n            this.append(' ');\n            this.append(this.getAutoIncrement());\n        }\n        if (node.references) {\n            this.append(' ');\n            this.visitNode(node.references);\n        }\n        if (node.check) {\n            this.append(' ');\n            this.visitNode(node.check);\n        }\n        if (node.endModifiers && node.endModifiers.length > 0) {\n            this.append(' ');\n            this.compileList(node.endModifiers, ' ');\n        }\n    }\n    getAutoIncrement() {\n        return 'auto_increment';\n    }\n    visitReferences(node) {\n        this.append('references ');\n        this.visitNode(node.table);\n        this.append(' (');\n        this.compileList(node.columns);\n        this.append(')');\n        if (node.onDelete) {\n            this.append(' on delete ');\n            this.append(node.onDelete);\n        }\n        if (node.onUpdate) {\n            this.append(' on update ');\n            this.append(node.onUpdate);\n        }\n    }\n    visitDropTable(node) {\n        this.append('drop table ');\n        if (node.ifExists) {\n            this.append('if exists ');\n        }\n        this.visitNode(node.table);\n        if (node.cascade) {\n            this.append(' cascade');\n        }\n    }\n    visitDataType(node) {\n        this.append(node.dataType);\n    }\n    visitOrderBy(node) {\n        this.append('order by ');\n        this.compileList(node.items);\n    }\n    visitOrderByItem(node) {\n        this.visitNode(node.orderBy);\n        if (node.collation) {\n            this.append(' ');\n            this.visitNode(node.collation);\n        }\n        if (node.direction) {\n            this.append(' ');\n            this.visitNode(node.direction);\n        }\n        if (node.nulls) {\n            this.append(' nulls ');\n            this.append(node.nulls);\n        }\n    }\n    visitGroupBy(node) {\n        this.append('group by ');\n        this.compileList(node.items);\n    }\n    visitGroupByItem(node) {\n        this.visitNode(node.groupBy);\n    }\n    visitUpdateQuery(node) {\n        const rootQueryNode = this.nodeStack.find(QueryNode.is);\n        const isSubQuery = rootQueryNode !== node;\n        if (!isSubQuery && node.explain) {\n            this.visitNode(node.explain);\n            this.append(' ');\n        }\n        if (isSubQuery && !MergeQueryNode.is(rootQueryNode)) {\n            this.append('(');\n        }\n        if (node.with) {\n            this.visitNode(node.with);\n            this.append(' ');\n        }\n        this.append('update ');\n        if (node.top) {\n            this.visitNode(node.top);\n            this.append(' ');\n        }\n        if (node.table) {\n            this.visitNode(node.table);\n            this.append(' ');\n        }\n        this.append('set ');\n        if (node.updates) {\n            this.compileList(node.updates);\n        }\n        if (node.output) {\n            this.append(' ');\n            this.visitNode(node.output);\n        }\n        if (node.from) {\n            this.append(' ');\n            this.visitNode(node.from);\n        }\n        if (node.joins) {\n            if (!node.from) {\n                throw new Error(\"Joins in an update query are only supported as a part of a PostgreSQL 'update set from join' query. If you want to create a MySQL 'update join set' query, see https://kysely.dev/docs/examples/update/my-sql-joins\");\n            }\n            this.append(' ');\n            this.compileList(node.joins, ' ');\n        }\n        if (node.where) {\n            this.append(' ');\n            this.visitNode(node.where);\n        }\n        if (node.orderBy) {\n            this.append(' ');\n            this.visitNode(node.orderBy);\n        }\n        if (node.limit) {\n            this.append(' ');\n            this.visitNode(node.limit);\n        }\n        if (node.returning) {\n            this.append(' ');\n            this.visitNode(node.returning);\n        }\n        if (isSubQuery && !MergeQueryNode.is(rootQueryNode)) {\n            this.append(')');\n        }\n        if (node.endModifiers?.length) {\n            this.append(' ');\n            this.compileList(node.endModifiers, ' ');\n        }\n    }\n    visitColumnUpdate(node) {\n        this.visitNode(node.column);\n        this.append(' = ');\n        this.visitNode(node.value);\n    }\n    visitLimit(node) {\n        this.append('limit ');\n        this.visitNode(node.limit);\n    }\n    visitOffset(node) {\n        this.append('offset ');\n        this.visitNode(node.offset);\n    }\n    visitOnConflict(node) {\n        this.append('on conflict');\n        if (node.columns) {\n            this.append(' (');\n            this.compileList(node.columns);\n            this.append(')');\n        }\n        else if (node.constraint) {\n            this.append(' on constraint ');\n            this.visitNode(node.constraint);\n        }\n        else if (node.indexExpression) {\n            this.append(' (');\n            this.visitNode(node.indexExpression);\n            this.append(')');\n        }\n        if (node.indexWhere) {\n            this.append(' ');\n            this.visitNode(node.indexWhere);\n        }\n        if (node.doNothing === true) {\n            this.append(' do nothing');\n        }\n        else if (node.updates) {\n            this.append(' do update set ');\n            this.compileList(node.updates);\n            if (node.updateWhere) {\n                this.append(' ');\n                this.visitNode(node.updateWhere);\n            }\n        }\n    }\n    visitOnDuplicateKey(node) {\n        this.append('on duplicate key update ');\n        this.compileList(node.updates);\n    }\n    visitCreateIndex(node) {\n        this.append('create ');\n        if (node.unique) {\n            this.append('unique ');\n        }\n        this.append('index ');\n        if (node.ifNotExists) {\n            this.append('if not exists ');\n        }\n        this.visitNode(node.name);\n        if (node.table) {\n            this.append(' on ');\n            this.visitNode(node.table);\n        }\n        if (node.using) {\n            this.append(' using ');\n            this.visitNode(node.using);\n        }\n        if (node.columns) {\n            this.append(' (');\n            this.compileList(node.columns);\n            this.append(')');\n        }\n        if (node.nullsNotDistinct) {\n            this.append(' nulls not distinct');\n        }\n        if (node.where) {\n            this.append(' ');\n            this.visitNode(node.where);\n        }\n    }\n    visitDropIndex(node) {\n        this.append('drop index ');\n        if (node.ifExists) {\n            this.append('if exists ');\n        }\n        this.visitNode(node.name);\n        if (node.table) {\n            this.append(' on ');\n            this.visitNode(node.table);\n        }\n        if (node.cascade) {\n            this.append(' cascade');\n        }\n    }\n    visitCreateSchema(node) {\n        this.append('create schema ');\n        if (node.ifNotExists) {\n            this.append('if not exists ');\n        }\n        this.visitNode(node.schema);\n    }\n    visitDropSchema(node) {\n        this.append('drop schema ');\n        if (node.ifExists) {\n            this.append('if exists ');\n        }\n        this.visitNode(node.schema);\n        if (node.cascade) {\n            this.append(' cascade');\n        }\n    }\n    visitPrimaryKeyConstraint(node) {\n        if (node.name) {\n            this.append('constraint ');\n            this.visitNode(node.name);\n            this.append(' ');\n        }\n        this.append('primary key (');\n        this.compileList(node.columns);\n        this.append(')');\n        this.buildDeferrable(node);\n    }\n    buildDeferrable(node) {\n        if (node.deferrable !== undefined) {\n            if (node.deferrable) {\n                this.append(' deferrable');\n            }\n            else {\n                this.append(' not deferrable');\n            }\n        }\n        if (node.initiallyDeferred !== undefined) {\n            if (node.initiallyDeferred) {\n                this.append(' initially deferred');\n            }\n            else {\n                this.append(' initially immediate');\n            }\n        }\n    }\n    visitUniqueConstraint(node) {\n        if (node.name) {\n            this.append('constraint ');\n            this.visitNode(node.name);\n            this.append(' ');\n        }\n        this.append('unique');\n        if (node.nullsNotDistinct) {\n            this.append(' nulls not distinct');\n        }\n        this.append(' (');\n        this.compileList(node.columns);\n        this.append(')');\n        this.buildDeferrable(node);\n    }\n    visitCheckConstraint(node) {\n        if (node.name) {\n            this.append('constraint ');\n            this.visitNode(node.name);\n            this.append(' ');\n        }\n        this.append('check (');\n        this.visitNode(node.expression);\n        this.append(')');\n    }\n    visitForeignKeyConstraint(node) {\n        if (node.name) {\n            this.append('constraint ');\n            this.visitNode(node.name);\n            this.append(' ');\n        }\n        this.append('foreign key (');\n        this.compileList(node.columns);\n        this.append(') ');\n        this.visitNode(node.references);\n        if (node.onDelete) {\n            this.append(' on delete ');\n            this.append(node.onDelete);\n        }\n        if (node.onUpdate) {\n            this.append(' on update ');\n            this.append(node.onUpdate);\n        }\n        this.buildDeferrable(node);\n    }\n    visitList(node) {\n        this.compileList(node.items);\n    }\n    visitWith(node) {\n        this.append('with ');\n        if (node.recursive) {\n            this.append('recursive ');\n        }\n        this.compileList(node.expressions);\n    }\n    visitCommonTableExpression(node) {\n        this.visitNode(node.name);\n        this.append(' as ');\n        if (isBoolean(node.materialized)) {\n            if (!node.materialized) {\n                this.append('not ');\n            }\n            this.append('materialized ');\n        }\n        this.visitNode(node.expression);\n    }\n    visitCommonTableExpressionName(node) {\n        this.visitNode(node.table);\n        if (node.columns) {\n            this.append('(');\n            this.compileList(node.columns);\n            this.append(')');\n        }\n    }\n    visitAlterTable(node) {\n        this.append('alter table ');\n        this.visitNode(node.table);\n        this.append(' ');\n        if (node.renameTo) {\n            this.append('rename to ');\n            this.visitNode(node.renameTo);\n        }\n        if (node.setSchema) {\n            this.append('set schema ');\n            this.visitNode(node.setSchema);\n        }\n        if (node.addConstraint) {\n            this.visitNode(node.addConstraint);\n        }\n        if (node.dropConstraint) {\n            this.visitNode(node.dropConstraint);\n        }\n        if (node.renameConstraint) {\n            this.visitNode(node.renameConstraint);\n        }\n        if (node.columnAlterations) {\n            this.compileColumnAlterations(node.columnAlterations);\n        }\n        if (node.addIndex) {\n            this.visitNode(node.addIndex);\n        }\n        if (node.dropIndex) {\n            this.visitNode(node.dropIndex);\n        }\n    }\n    visitAddColumn(node) {\n        this.append('add column ');\n        this.visitNode(node.column);\n    }\n    visitRenameColumn(node) {\n        this.append('rename column ');\n        this.visitNode(node.column);\n        this.append(' to ');\n        this.visitNode(node.renameTo);\n    }\n    visitDropColumn(node) {\n        this.append('drop column ');\n        this.visitNode(node.column);\n    }\n    visitAlterColumn(node) {\n        this.append('alter column ');\n        this.visitNode(node.column);\n        this.append(' ');\n        if (node.dataType) {\n            if (this.announcesNewColumnDataType()) {\n                this.append('type ');\n            }\n            this.visitNode(node.dataType);\n            if (node.dataTypeExpression) {\n                this.append('using ');\n                this.visitNode(node.dataTypeExpression);\n            }\n        }\n        if (node.setDefault) {\n            this.append('set default ');\n            this.visitNode(node.setDefault);\n        }\n        if (node.dropDefault) {\n            this.append('drop default');\n        }\n        if (node.setNotNull) {\n            this.append('set not null');\n        }\n        if (node.dropNotNull) {\n            this.append('drop not null');\n        }\n    }\n    visitModifyColumn(node) {\n        this.append('modify column ');\n        this.visitNode(node.column);\n    }\n    visitAddConstraint(node) {\n        this.append('add ');\n        this.visitNode(node.constraint);\n    }\n    visitDropConstraint(node) {\n        this.append('drop constraint ');\n        if (node.ifExists) {\n            this.append('if exists ');\n        }\n        this.visitNode(node.constraintName);\n        if (node.modifier === 'cascade') {\n            this.append(' cascade');\n        }\n        else if (node.modifier === 'restrict') {\n            this.append(' restrict');\n        }\n    }\n    visitRenameConstraint(node) {\n        this.append('rename constraint ');\n        this.visitNode(node.oldName);\n        this.append(' to ');\n        this.visitNode(node.newName);\n    }\n    visitSetOperation(node) {\n        this.append(node.operator);\n        this.append(' ');\n        if (node.all) {\n            this.append('all ');\n        }\n        this.visitNode(node.expression);\n    }\n    visitCreateView(node) {\n        this.append('create ');\n        if (node.orReplace) {\n            this.append('or replace ');\n        }\n        if (node.materialized) {\n            this.append('materialized ');\n        }\n        if (node.temporary) {\n            this.append('temporary ');\n        }\n        this.append('view ');\n        if (node.ifNotExists) {\n            this.append('if not exists ');\n        }\n        this.visitNode(node.name);\n        this.append(' ');\n        if (node.columns) {\n            this.append('(');\n            this.compileList(node.columns);\n            this.append(') ');\n        }\n        if (node.as) {\n            this.append('as ');\n            this.visitNode(node.as);\n        }\n    }\n    visitRefreshMaterializedView(node) {\n        this.append('refresh materialized view ');\n        if (node.concurrently) {\n            this.append('concurrently ');\n        }\n        this.visitNode(node.name);\n        if (node.withNoData) {\n            this.append(' with no data');\n        }\n        else {\n            this.append(' with data');\n        }\n    }\n    visitDropView(node) {\n        this.append('drop ');\n        if (node.materialized) {\n            this.append('materialized ');\n        }\n        this.append('view ');\n        if (node.ifExists) {\n            this.append('if exists ');\n        }\n        this.visitNode(node.name);\n        if (node.cascade) {\n            this.append(' cascade');\n        }\n    }\n    visitGenerated(node) {\n        this.append('generated ');\n        if (node.always) {\n            this.append('always ');\n        }\n        if (node.byDefault) {\n            this.append('by default ');\n        }\n        this.append('as ');\n        if (node.identity) {\n            this.append('identity');\n        }\n        if (node.expression) {\n            this.append('(');\n            this.visitNode(node.expression);\n            this.append(')');\n        }\n        if (node.stored) {\n            this.append(' stored');\n        }\n    }\n    visitDefaultValue(node) {\n        this.append('default ');\n        this.visitNode(node.defaultValue);\n    }\n    visitSelectModifier(node) {\n        if (node.rawModifier) {\n            this.visitNode(node.rawModifier);\n        }\n        else {\n            this.append(SELECT_MODIFIER_SQL[node.modifier]);\n        }\n        if (node.of) {\n            this.append(' of ');\n            this.compileList(node.of, ', ');\n        }\n    }\n    visitCreateType(node) {\n        this.append('create type ');\n        this.visitNode(node.name);\n        if (node.enum) {\n            this.append(' as enum ');\n            this.visitNode(node.enum);\n        }\n    }\n    visitDropType(node) {\n        this.append('drop type ');\n        if (node.ifExists) {\n            this.append('if exists ');\n        }\n        this.visitNode(node.name);\n    }\n    visitExplain(node) {\n        this.append('explain');\n        if (node.options || node.format) {\n            this.append(' ');\n            this.append(this.getLeftExplainOptionsWrapper());\n            if (node.options) {\n                this.visitNode(node.options);\n                if (node.format) {\n                    this.append(this.getExplainOptionsDelimiter());\n                }\n            }\n            if (node.format) {\n                this.append('format');\n                this.append(this.getExplainOptionAssignment());\n                this.append(node.format);\n            }\n            this.append(this.getRightExplainOptionsWrapper());\n        }\n    }\n    visitDefaultInsertValue(_) {\n        this.append('default');\n    }\n    visitAggregateFunction(node) {\n        this.append(node.func);\n        this.append('(');\n        if (node.distinct) {\n            this.append('distinct ');\n        }\n        this.compileList(node.aggregated);\n        if (node.orderBy) {\n            this.append(' ');\n            this.visitNode(node.orderBy);\n        }\n        this.append(')');\n        if (node.withinGroup) {\n            this.append(' within group (');\n            this.visitNode(node.withinGroup);\n            this.append(')');\n        }\n        if (node.filter) {\n            this.append(' filter(');\n            this.visitNode(node.filter);\n            this.append(')');\n        }\n        if (node.over) {\n            this.append(' ');\n            this.visitNode(node.over);\n        }\n    }\n    visitOver(node) {\n        this.append('over(');\n        if (node.partitionBy) {\n            this.visitNode(node.partitionBy);\n            if (node.orderBy) {\n                this.append(' ');\n            }\n        }\n        if (node.orderBy) {\n            this.visitNode(node.orderBy);\n        }\n        this.append(')');\n    }\n    visitPartitionBy(node) {\n        this.append('partition by ');\n        this.compileList(node.items);\n    }\n    visitPartitionByItem(node) {\n        this.visitNode(node.partitionBy);\n    }\n    visitBinaryOperation(node) {\n        this.visitNode(node.leftOperand);\n        this.append(' ');\n        this.visitNode(node.operator);\n        this.append(' ');\n        this.visitNode(node.rightOperand);\n    }\n    visitUnaryOperation(node) {\n        this.visitNode(node.operator);\n        if (!this.isMinusOperator(node.operator)) {\n            this.append(' ');\n        }\n        this.visitNode(node.operand);\n    }\n    isMinusOperator(node) {\n        return OperatorNode.is(node) && node.operator === '-';\n    }\n    visitUsing(node) {\n        this.append('using ');\n        this.compileList(node.tables);\n    }\n    visitFunction(node) {\n        this.append(node.func);\n        this.append('(');\n        this.compileList(node.arguments);\n        this.append(')');\n    }\n    visitCase(node) {\n        this.append('case');\n        if (node.value) {\n            this.append(' ');\n            this.visitNode(node.value);\n        }\n        if (node.when) {\n            this.append(' ');\n            this.compileList(node.when, ' ');\n        }\n        if (node.else) {\n            this.append(' else ');\n            this.visitNode(node.else);\n        }\n        this.append(' end');\n        if (node.isStatement) {\n            this.append(' case');\n        }\n    }\n    visitWhen(node) {\n        this.append('when ');\n        this.visitNode(node.condition);\n        if (node.result) {\n            this.append(' then ');\n            this.visitNode(node.result);\n        }\n    }\n    visitJSONReference(node) {\n        this.visitNode(node.reference);\n        this.visitNode(node.traversal);\n    }\n    visitJSONPath(node) {\n        if (node.inOperator) {\n            this.visitNode(node.inOperator);\n        }\n        this.append(\"'$\");\n        for (const pathLeg of node.pathLegs) {\n            this.visitNode(pathLeg);\n        }\n        this.append(\"'\");\n    }\n    visitJSONPathLeg(node) {\n        const isArrayLocation = node.type === 'ArrayLocation';\n        this.append(isArrayLocation ? '[' : '.');\n        this.append(String(node.value));\n        if (isArrayLocation) {\n            this.append(']');\n        }\n    }\n    visitJSONOperatorChain(node) {\n        for (let i = 0, len = node.values.length; i < len; i++) {\n            if (i === len - 1) {\n                this.visitNode(node.operator);\n            }\n            else {\n                this.append('->');\n            }\n            this.visitNode(node.values[i]);\n        }\n    }\n    visitMergeQuery(node) {\n        if (node.with) {\n            this.visitNode(node.with);\n            this.append(' ');\n        }\n        this.append('merge ');\n        if (node.top) {\n            this.visitNode(node.top);\n            this.append(' ');\n        }\n        this.append('into ');\n        this.visitNode(node.into);\n        if (node.using) {\n            this.append(' ');\n            this.visitNode(node.using);\n        }\n        if (node.whens) {\n            this.append(' ');\n            this.compileList(node.whens, ' ');\n        }\n        if (node.returning) {\n            this.append(' ');\n            this.visitNode(node.returning);\n        }\n        if (node.output) {\n            this.append(' ');\n            this.visitNode(node.output);\n        }\n        if (node.endModifiers?.length) {\n            this.append(' ');\n            this.compileList(node.endModifiers, ' ');\n        }\n    }\n    visitMatched(node) {\n        if (node.not) {\n            this.append('not ');\n        }\n        this.append('matched');\n        if (node.bySource) {\n            this.append(' by source');\n        }\n    }\n    visitAddIndex(node) {\n        this.append('add ');\n        if (node.unique) {\n            this.append('unique ');\n        }\n        this.append('index ');\n        this.visitNode(node.name);\n        if (node.columns) {\n            this.append(' (');\n            this.compileList(node.columns);\n            this.append(')');\n        }\n        if (node.using) {\n            this.append(' using ');\n            this.visitNode(node.using);\n        }\n    }\n    visitCast(node) {\n        this.append('cast(');\n        this.visitNode(node.expression);\n        this.append(' as ');\n        this.visitNode(node.dataType);\n        this.append(')');\n    }\n    visitFetch(node) {\n        this.append('fetch next ');\n        this.visitNode(node.rowCount);\n        this.append(` rows ${node.modifier}`);\n    }\n    visitOutput(node) {\n        this.append('output ');\n        this.compileList(node.selections);\n    }\n    visitTop(node) {\n        this.append(`top(${node.expression})`);\n        if (node.modifiers) {\n            this.append(` ${node.modifiers}`);\n        }\n    }\n    visitOrAction(node) {\n        this.append(node.action);\n    }\n    visitCollate(node) {\n        this.append('collate ');\n        this.visitNode(node.collation);\n    }\n    append(str) {\n        this.#sql += str;\n    }\n    appendValue(parameter) {\n        this.addParameter(parameter);\n        this.append(this.getCurrentParameterPlaceholder());\n    }\n    getLeftIdentifierWrapper() {\n        return '\"';\n    }\n    getRightIdentifierWrapper() {\n        return '\"';\n    }\n    getCurrentParameterPlaceholder() {\n        return '$' + this.numParameters;\n    }\n    getLeftExplainOptionsWrapper() {\n        return '(';\n    }\n    getExplainOptionAssignment() {\n        return ' ';\n    }\n    getExplainOptionsDelimiter() {\n        return ', ';\n    }\n    getRightExplainOptionsWrapper() {\n        return ')';\n    }\n    sanitizeIdentifier(identifier) {\n        const leftWrap = this.getLeftIdentifierWrapper();\n        const rightWrap = this.getRightIdentifierWrapper();\n        let sanitized = '';\n        for (const c of identifier) {\n            sanitized += c;\n            if (c === leftWrap) {\n                sanitized += leftWrap;\n            }\n            else if (c === rightWrap) {\n                sanitized += rightWrap;\n            }\n        }\n        return sanitized;\n    }\n    sanitizeStringLiteral(value) {\n        return value.replace(LIT_WRAP_REGEX, \"''\");\n    }\n    addParameter(parameter) {\n        this.#parameters.push(parameter);\n    }\n    appendImmediateValue(value) {\n        if (isString(value)) {\n            this.appendStringLiteral(value);\n        }\n        else if (isNumber(value) || isBoolean(value)) {\n            this.append(value.toString());\n        }\n        else if (isNull(value)) {\n            this.append('null');\n        }\n        else if (isDate(value)) {\n            this.appendImmediateValue(value.toISOString());\n        }\n        else if (isBigInt(value)) {\n            this.appendImmediateValue(value.toString());\n        }\n        else {\n            throw new Error(`invalid immediate value ${value}`);\n        }\n    }\n    appendStringLiteral(value) {\n        this.append(\"'\");\n        this.append(this.sanitizeStringLiteral(value));\n        this.append(\"'\");\n    }\n    sortSelectModifiers(arr) {\n        arr.sort((left, right) => left.modifier && right.modifier\n            ? SELECT_MODIFIER_PRIORITY[left.modifier] -\n                SELECT_MODIFIER_PRIORITY[right.modifier]\n            : 1);\n        return freeze(arr);\n    }\n    compileColumnAlterations(columnAlterations) {\n        this.compileList(columnAlterations);\n    }\n    /**\n     * controls whether the dialect adds a \"type\" keyword before a column's new data\n     * type in an ALTER TABLE statement.\n     */\n    announcesNewColumnDataType() {\n        return true;\n    }\n}\nconst SELECT_MODIFIER_SQL = freeze({\n    ForKeyShare: 'for key share',\n    ForNoKeyUpdate: 'for no key update',\n    ForUpdate: 'for update',\n    ForShare: 'for share',\n    NoWait: 'nowait',\n    SkipLocked: 'skip locked',\n    Distinct: 'distinct',\n});\nconst SELECT_MODIFIER_PRIORITY = freeze({\n    ForKeyShare: 1,\n    ForNoKeyUpdate: 1,\n    ForUpdate: 1,\n    ForShare: 1,\n    NoWait: 2,\n    SkipLocked: 2,\n    Distinct: 0,\n});\nconst JOIN_TYPE_SQL = freeze({\n    InnerJoin: 'inner join',\n    LeftJoin: 'left join',\n    RightJoin: 'right join',\n    FullJoin: 'full join',\n    CrossJoin: 'cross join',\n    LateralInnerJoin: 'inner join lateral',\n    LateralLeftJoin: 'left join lateral',\n    LateralCrossJoin: 'cross join lateral',\n    OuterApply: 'outer apply',\n    CrossApply: 'cross apply',\n    Using: 'using',\n});\n", "/// <reference types=\"./compiled-query.d.ts\" />\nimport { RawNode } from '../operation-node/raw-node.js';\nimport { freeze } from '../util/object-utils.js';\nimport { createQueryId } from '../util/query-id.js';\nexport const CompiledQuery = freeze({\n    raw(sql, parameters = []) {\n        return freeze({\n            sql,\n            query: RawNode.createWithSql(sql),\n            parameters: freeze(parameters),\n            queryId: createQueryId(),\n        });\n    },\n});\n", "/// <reference types=\"./dummy-driver.d.ts\" />\n/**\n * A driver that does absolutely nothing.\n *\n * You can use this to create Kysely instances solely for building queries\n *\n * ### Examples\n *\n * This example creates a Kysely instance for building postgres queries:\n *\n * ```ts\n * import {\n *   DummyDriver,\n *   Kysely,\n *   PostgresAdapter,\n *   PostgresIntrospector,\n *   PostgresQueryCompiler\n * } from 'kysely'\n * import type { Database } from 'type-editor' // imaginary module\n *\n * const db = new Kysely<Database>({\n *   dialect: {\n *     createAdapter: () => new PostgresAdapter(),\n *     createDriver: () => new DummyDriver(),\n *     createIntrospector: (db: Kysely<any>) => new PostgresIntrospector(db),\n *     createQueryCompiler: () => new PostgresQueryCompiler(),\n *   },\n * })\n * ```\n *\n * You can use it to build a query and compile it to SQL but trying to\n * execute the query will throw an error.\n *\n * ```ts\n * const { sql } = db.selectFrom('person').selectAll().compile()\n * console.log(sql) // select * from \"person\"\n * ```\n */\nexport class DummyDriver {\n    async init() {\n        // Nothing to do here.\n    }\n    async acquireConnection() {\n        return new DummyConnection();\n    }\n    async beginTransaction() {\n        // Nothing to do here.\n    }\n    async commitTransaction() {\n        // Nothing to do here.\n    }\n    async rollbackTransaction() {\n        // Nothing to do here.\n    }\n    async releaseConnection() {\n        // Nothing to do here.\n    }\n    async destroy() {\n        // Nothing to do here.\n    }\n    async releaseSavepoint() {\n        // Nothing to do here.\n    }\n    async rollbackToSavepoint() {\n        // Nothing to do here.\n    }\n    async savepoint() {\n        // Nothing to do here.\n    }\n}\nclass DummyConnection {\n    async executeQuery() {\n        return {\n            rows: [],\n        };\n    }\n    async *streamQuery() {\n        // Nothing to do here.\n    }\n}\n", "/// <reference types=\"./dialect-adapter-base.d.ts\" />\n/**\n * A basic implementation of `DialectAdapter` with sensible default values.\n * Third-party dialects can extend this instead of implementing the `DialectAdapter`\n * interface from scratch. That way all new settings will get default values when\n * they are added and there will be less breaking changes.\n */\nexport class DialectAdapterBase {\n    get supportsCreateIfNotExists() {\n        return true;\n    }\n    get supportsTransactionalDdl() {\n        return false;\n    }\n    get supportsReturning() {\n        return false;\n    }\n    get supportsOutput() {\n        return false;\n    }\n}\n", "/// <reference types=\"./savepoint-parser.d.ts\" />\nimport { IdentifierNode } from '../operation-node/identifier-node.js';\nimport { RawNode } from '../operation-node/raw-node.js';\nexport function parseSavepointCommand(command, savepointName) {\n    return RawNode.createWithChildren([\n        RawNode.createWithSql(`${command} `),\n        IdentifierNode.create(savepointName), // ensures savepointName gets sanitized\n    ]);\n}\n", "/// <reference types=\"./sqlite-driver.d.ts\" />\nimport { SelectQueryNode } from '../../operation-node/select-query-node.js';\nimport { parseSavepointCommand } from '../../parser/savepoint-parser.js';\nimport { CompiledQuery } from '../../query-compiler/compiled-query.js';\nimport { freeze, isFunction } from '../../util/object-utils.js';\nimport { createQueryId } from '../../util/query-id.js';\nexport class SqliteDriver {\n    #config;\n    #connectionMutex = new ConnectionMutex();\n    #db;\n    #connection;\n    constructor(config) {\n        this.#config = freeze({ ...config });\n    }\n    async init() {\n        this.#db = isFunction(this.#config.database)\n            ? await this.#config.database()\n            : this.#config.database;\n        this.#connection = new SqliteConnection(this.#db);\n        if (this.#config.onCreateConnection) {\n            await this.#config.onCreateConnection(this.#connection);\n        }\n    }\n    async acquireConnection() {\n        // SQLite only has one single connection. We use a mutex here to wait\n        // until the single connection has been released.\n        await this.#connectionMutex.lock();\n        return this.#connection;\n    }\n    async beginTransaction(connection) {\n        await connection.executeQuery(CompiledQuery.raw('begin'));\n    }\n    async commitTransaction(connection) {\n        await connection.executeQuery(CompiledQuery.raw('commit'));\n    }\n    async rollbackTransaction(connection) {\n        await connection.executeQuery(CompiledQuery.raw('rollback'));\n    }\n    async savepoint(connection, savepointName, compileQuery) {\n        await connection.executeQuery(compileQuery(parseSavepointCommand('savepoint', savepointName), createQueryId()));\n    }\n    async rollbackToSavepoint(connection, savepointName, compileQuery) {\n        await connection.executeQuery(compileQuery(parseSavepointCommand('rollback to', savepointName), createQueryId()));\n    }\n    async releaseSavepoint(connection, savepointName, compileQuery) {\n        await connection.executeQuery(compileQuery(parseSavepointCommand('release', savepointName), createQueryId()));\n    }\n    async releaseConnection() {\n        this.#connectionMutex.unlock();\n    }\n    async destroy() {\n        this.#db?.close();\n    }\n}\nclass SqliteConnection {\n    #db;\n    constructor(db) {\n        this.#db = db;\n    }\n    executeQuery(compiledQuery) {\n        const { sql, parameters } = compiledQuery;\n        const stmt = this.#db.prepare(sql);\n        if (stmt.reader) {\n            return Promise.resolve({\n                rows: stmt.all(parameters),\n            });\n        }\n        const { changes, lastInsertRowid } = stmt.run(parameters);\n        return Promise.resolve({\n            numAffectedRows: changes !== undefined && changes !== null ? BigInt(changes) : undefined,\n            insertId: lastInsertRowid !== undefined && lastInsertRowid !== null\n                ? BigInt(lastInsertRowid)\n                : undefined,\n            rows: [],\n        });\n    }\n    async *streamQuery(compiledQuery, _chunkSize) {\n        const { sql, parameters, query } = compiledQuery;\n        const stmt = this.#db.prepare(sql);\n        if (SelectQueryNode.is(query)) {\n            const iter = stmt.iterate(parameters);\n            for (const row of iter) {\n                yield {\n                    rows: [row],\n                };\n            }\n        }\n        else {\n            throw new Error('Sqlite driver only supports streaming of select queries');\n        }\n    }\n}\nclass ConnectionMutex {\n    #promise;\n    #resolve;\n    async lock() {\n        while (this.#promise) {\n            await this.#promise;\n        }\n        this.#promise = new Promise((resolve) => {\n            this.#resolve = resolve;\n        });\n    }\n    unlock() {\n        const resolve = this.#resolve;\n        this.#promise = undefined;\n        this.#resolve = undefined;\n        resolve?.();\n    }\n}\n", "/// <reference types=\"./sqlite-query-compiler.d.ts\" />\nimport { DefaultQueryCompiler } from '../../query-compiler/default-query-compiler.js';\nconst ID_WRAP_REGEX = /\"/g;\nexport class SqliteQueryCompiler extends DefaultQueryCompiler {\n    visitOrAction(node) {\n        this.append('or ');\n        this.append(node.action);\n    }\n    getCurrentParameterPlaceholder() {\n        return '?';\n    }\n    getLeftExplainOptionsWrapper() {\n        return '';\n    }\n    getRightExplainOptionsWrapper() {\n        return '';\n    }\n    getLeftIdentifierWrapper() {\n        return '\"';\n    }\n    getRightIdentifierWrapper() {\n        return '\"';\n    }\n    getAutoIncrement() {\n        return 'autoincrement';\n    }\n    sanitizeIdentifier(identifier) {\n        return identifier.replace(ID_WRAP_REGEX, '\"\"');\n    }\n    visitDefaultInsertValue(_) {\n        // sqlite doesn't support the `default` keyword in inserts.\n        this.append('null');\n    }\n}\n", "/// <reference types=\"./noop-plugin.d.ts\" />\nexport class NoopPlugin {\n    transformQuery(args) {\n        return args.node;\n    }\n    async transformResult(args) {\n        return args.result;\n    }\n}\n", "/// <reference types=\"./migrator.d.ts\" />\nimport { NoopPlugin } from '../plugin/noop-plugin.js';\nimport { WithSchemaPlugin } from '../plugin/with-schema/with-schema-plugin.js';\nimport { freeze, getLast } from '../util/object-utils.js';\nexport const DEFAULT_MIGRATION_TABLE = 'kysely_migration';\nexport const DEFAULT_MIGRATION_LOCK_TABLE = 'kysely_migration_lock';\nexport const DEFAULT_ALLOW_UNORDERED_MIGRATIONS = false;\nexport const MIGRATION_LOCK_ID = 'migration_lock';\nexport const NO_MIGRATIONS = freeze({ __noMigrations__: true });\n/**\n * A class for running migrations.\n *\n * ### Example\n *\n * This example uses the {@link FileMigrationProvider} that reads migrations\n * files from a single folder. You can easily implement your own\n * {@link MigrationProvider} if you want to provide migrations some\n * other way.\n *\n * ```ts\n * import { promises as fs } from 'node:fs'\n * import path from 'node:path'\n * import * as Sqlite from 'better-sqlite3'\n * import {\n *   FileMigrationProvider,\n *   Kysely,\n *   Migrator,\n *   SqliteDialect\n * } from 'kysely'\n *\n * const db = new Kysely<any>({\n *   dialect: new SqliteDialect({\n *     database: Sqlite(':memory:')\n *   })\n * })\n *\n * const migrator = new Migrator({\n *   db,\n *   provider: new FileMigrationProvider({\n *     fs,\n *     // Path to the folder that contains all your migrations.\n *     migrationFolder: 'some/path/to/migrations',\n *     path,\n *   })\n * })\n * ```\n */\nexport class Migrator {\n    #props;\n    constructor(props) {\n        this.#props = freeze(props);\n    }\n    /**\n     * Returns a {@link MigrationInfo} object for each migration.\n     *\n     * The returned array is sorted by migration name.\n     */\n    async getMigrations() {\n        const executedMigrations = (await this.#doesTableExists(this.#migrationTable))\n            ? await this.#props.db\n                .withPlugin(this.#schemaPlugin)\n                .selectFrom(this.#migrationTable)\n                .select(['name', 'timestamp'])\n                .$narrowType()\n                .execute()\n            : [];\n        const migrations = await this.#resolveMigrations();\n        return migrations.map(({ name, ...migration }) => {\n            const executed = executedMigrations.find((it) => it.name === name);\n            return {\n                name,\n                migration,\n                executedAt: executed ? new Date(executed.timestamp) : undefined,\n            };\n        });\n    }\n    /**\n     * Runs all migrations that have not yet been run.\n     *\n     * This method returns a {@link MigrationResultSet} instance and _never_ throws.\n     * {@link MigrationResultSet.error} holds the error if something went wrong.\n     * {@link MigrationResultSet.results} contains information about which migrations\n     * were executed and which failed. See the examples below.\n     *\n     * This method goes through all possible migrations provided by the provider and runs the\n     * ones whose names come alphabetically after the last migration that has been run. If the\n     * list of executed migrations doesn't match the beginning of the list of possible migrations\n     * an error is returned.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * import { promises as fs } from 'node:fs'\n     * import path from 'node:path'\n     * import * as Sqlite from 'better-sqlite3'\n     * import { FileMigrationProvider, Migrator } from 'kysely'\n     *\n     * const migrator = new Migrator({\n     *   db,\n     *   provider: new FileMigrationProvider({\n     *     fs,\n     *     migrationFolder: 'some/path/to/migrations',\n     *     path,\n     *   })\n     * })\n     *\n     * const { error, results } = await migrator.migrateToLatest()\n     *\n     * results?.forEach((it) => {\n     *   if (it.status === 'Success') {\n     *     console.log(`migration \"${it.migrationName}\" was executed successfully`)\n     *   } else if (it.status === 'Error') {\n     *     console.error(`failed to execute migration \"${it.migrationName}\"`)\n     *   }\n     * })\n     *\n     * if (error) {\n     *   console.error('failed to run `migrateToLatest`')\n     *   console.error(error)\n     * }\n     * ```\n     */\n    async migrateToLatest() {\n        return this.#migrate(() => ({ direction: 'Up', step: Infinity }));\n    }\n    /**\n     * Migrate up/down to a specific migration.\n     *\n     * This method returns a {@link MigrationResultSet} instance and _never_ throws.\n     * {@link MigrationResultSet.error} holds the error if something went wrong.\n     * {@link MigrationResultSet.results} contains information about which migrations\n     * were executed and which failed.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * import { promises as fs } from 'node:fs'\n     * import path from 'node:path'\n     * import { FileMigrationProvider, Migrator } from 'kysely'\n     *\n     * const migrator = new Migrator({\n     *   db,\n     *   provider: new FileMigrationProvider({\n     *     fs,\n     *     // Path to the folder that contains all your migrations.\n     *     migrationFolder: 'some/path/to/migrations',\n     *     path,\n     *   })\n     * })\n     *\n     * await migrator.migrateTo('some_migration')\n     * ```\n     *\n     * If you specify the name of the first migration, this method migrates\n     * down to the first migration, but doesn't run the `down` method of\n     * the first migration. In case you want to migrate all the way down,\n     * you can use a special constant `NO_MIGRATIONS`:\n     *\n     * ```ts\n     * import { promises as fs } from 'node:fs'\n     * import path from 'node:path'\n     * import { FileMigrationProvider, Migrator, NO_MIGRATIONS } from 'kysely'\n     *\n     * const migrator = new Migrator({\n     *   db,\n     *   provider: new FileMigrationProvider({\n     *     fs,\n     *     // Path to the folder that contains all your migrations.\n     *     migrationFolder: 'some/path/to/migrations',\n     *     path,\n     *   })\n     * })\n     *\n     * await migrator.migrateTo(NO_MIGRATIONS)\n     * ```\n     */\n    async migrateTo(targetMigrationName) {\n        return this.#migrate(({ migrations, executedMigrations, pendingMigrations, }) => {\n            if (targetMigrationName === NO_MIGRATIONS) {\n                return { direction: 'Down', step: Infinity };\n            }\n            if (!migrations.find((m) => m.name === targetMigrationName)) {\n                throw new Error(`migration \"${targetMigrationName}\" doesn't exist`);\n            }\n            const executedIndex = executedMigrations.indexOf(targetMigrationName);\n            const pendingIndex = pendingMigrations.findIndex((m) => m.name === targetMigrationName);\n            if (executedIndex !== -1) {\n                return {\n                    direction: 'Down',\n                    step: executedMigrations.length - executedIndex - 1,\n                };\n            }\n            else if (pendingIndex !== -1) {\n                return { direction: 'Up', step: pendingIndex + 1 };\n            }\n            else {\n                throw new Error(`migration \"${targetMigrationName}\" isn't executed or pending`);\n            }\n        });\n    }\n    /**\n     * Migrate one step up.\n     *\n     * This method returns a {@link MigrationResultSet} instance and _never_ throws.\n     * {@link MigrationResultSet.error} holds the error if something went wrong.\n     * {@link MigrationResultSet.results} contains information about which migrations\n     * were executed and which failed.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * import { promises as fs } from 'node:fs'\n     * import path from 'node:path'\n     * import { FileMigrationProvider, Migrator } from 'kysely'\n     *\n     * const migrator = new Migrator({\n     *   db,\n     *   provider: new FileMigrationProvider({\n     *     fs,\n     *     // Path to the folder that contains all your migrations.\n     *     migrationFolder: 'some/path/to/migrations',\n     *     path,\n     *   })\n     * })\n     *\n     * await migrator.migrateUp()\n     * ```\n     */\n    async migrateUp() {\n        return this.#migrate(() => ({ direction: 'Up', step: 1 }));\n    }\n    /**\n     * Migrate one step down.\n     *\n     * This method returns a {@link MigrationResultSet} instance and _never_ throws.\n     * {@link MigrationResultSet.error} holds the error if something went wrong.\n     * {@link MigrationResultSet.results} contains information about which migrations\n     * were executed and which failed.\n     *\n     * ### Examples\n     *\n     * ```ts\n     * import { promises as fs } from 'node:fs'\n     * import path from 'node:path'\n     * import { FileMigrationProvider, Migrator } from 'kysely'\n     *\n     * const migrator = new Migrator({\n     *   db,\n     *   provider: new FileMigrationProvider({\n     *     fs,\n     *     // Path to the folder that contains all your migrations.\n     *     migrationFolder: 'some/path/to/migrations',\n     *     path,\n     *   })\n     * })\n     *\n     * await migrator.migrateDown()\n     * ```\n     */\n    async migrateDown() {\n        return this.#migrate(() => ({ direction: 'Down', step: 1 }));\n    }\n    async #migrate(getMigrationDirectionAndStep) {\n        try {\n            await this.#ensureMigrationTablesExists();\n            return await this.#runMigrations(getMigrationDirectionAndStep);\n        }\n        catch (error) {\n            if (error instanceof MigrationResultSetError) {\n                return error.resultSet;\n            }\n            return { error };\n        }\n    }\n    get #migrationTableSchema() {\n        return this.#props.migrationTableSchema;\n    }\n    get #migrationTable() {\n        return this.#props.migrationTableName ?? DEFAULT_MIGRATION_TABLE;\n    }\n    get #migrationLockTable() {\n        return this.#props.migrationLockTableName ?? DEFAULT_MIGRATION_LOCK_TABLE;\n    }\n    get #allowUnorderedMigrations() {\n        return (this.#props.allowUnorderedMigrations ?? DEFAULT_ALLOW_UNORDERED_MIGRATIONS);\n    }\n    get #schemaPlugin() {\n        if (this.#migrationTableSchema) {\n            return new WithSchemaPlugin(this.#migrationTableSchema);\n        }\n        return new NoopPlugin();\n    }\n    async #ensureMigrationTablesExists() {\n        await this.#ensureMigrationTableSchemaExists();\n        await this.#ensureMigrationTableExists();\n        await this.#ensureMigrationLockTableExists();\n        await this.#ensureLockRowExists();\n    }\n    async #ensureMigrationTableSchemaExists() {\n        if (!this.#migrationTableSchema) {\n            // Use default schema. Nothing to do.\n            return;\n        }\n        if (!(await this.#doesSchemaExists())) {\n            try {\n                await this.#createIfNotExists(this.#props.db.schema.createSchema(this.#migrationTableSchema));\n            }\n            catch (error) {\n                // At least on PostgreSQL, `if not exists` doesn't guarantee the `create schema`\n                // query doesn't throw if the schema already exits. That's why we check if\n                // the schema exist here and ignore the error if it does.\n                if (!(await this.#doesSchemaExists())) {\n                    throw error;\n                }\n            }\n        }\n    }\n    async #ensureMigrationTableExists() {\n        if (!(await this.#doesTableExists(this.#migrationTable))) {\n            try {\n                if (this.#migrationTableSchema) {\n                    await this.#createIfNotExists(this.#props.db.schema.createSchema(this.#migrationTableSchema));\n                }\n                await this.#createIfNotExists(this.#props.db.schema\n                    .withPlugin(this.#schemaPlugin)\n                    .createTable(this.#migrationTable)\n                    .addColumn('name', 'varchar(255)', (col) => col.notNull().primaryKey())\n                    // The migration run time as ISO string. This is not a real date type as we\n                    // can't know which data type is supported by all future dialects.\n                    .addColumn('timestamp', 'varchar(255)', (col) => col.notNull()));\n            }\n            catch (error) {\n                // At least on PostgreSQL, `if not exists` doesn't guarantee the `create table`\n                // query doesn't throw if the table already exits. That's why we check if\n                // the table exist here and ignore the error if it does.\n                if (!(await this.#doesTableExists(this.#migrationTable))) {\n                    throw error;\n                }\n            }\n        }\n    }\n    async #ensureMigrationLockTableExists() {\n        if (!(await this.#doesTableExists(this.#migrationLockTable))) {\n            try {\n                await this.#createIfNotExists(this.#props.db.schema\n                    .withPlugin(this.#schemaPlugin)\n                    .createTable(this.#migrationLockTable)\n                    .addColumn('id', 'varchar(255)', (col) => col.notNull().primaryKey())\n                    .addColumn('is_locked', 'integer', (col) => col.notNull().defaultTo(0)));\n            }\n            catch (error) {\n                // At least on PostgreSQL, `if not exists` doesn't guarantee the `create table`\n                // query doesn't throw if the table already exits. That's why we check if\n                // the table exist here and ignore the error if it does.\n                if (!(await this.#doesTableExists(this.#migrationLockTable))) {\n                    throw error;\n                }\n            }\n        }\n    }\n    async #ensureLockRowExists() {\n        if (!(await this.#doesLockRowExists())) {\n            try {\n                await this.#props.db\n                    .withPlugin(this.#schemaPlugin)\n                    .insertInto(this.#migrationLockTable)\n                    .values({ id: MIGRATION_LOCK_ID, is_locked: 0 })\n                    .execute();\n            }\n            catch (error) {\n                if (!(await this.#doesLockRowExists())) {\n                    throw error;\n                }\n            }\n        }\n    }\n    async #doesSchemaExists() {\n        const schemas = await this.#props.db.introspection.getSchemas();\n        return schemas.some((it) => it.name === this.#migrationTableSchema);\n    }\n    async #doesTableExists(tableName) {\n        const schema = this.#migrationTableSchema;\n        const tables = await this.#props.db.introspection.getTables({\n            withInternalKyselyTables: true,\n        });\n        return tables.some((it) => it.name === tableName && (!schema || it.schema === schema));\n    }\n    async #doesLockRowExists() {\n        const lockRow = await this.#props.db\n            .withPlugin(this.#schemaPlugin)\n            .selectFrom(this.#migrationLockTable)\n            .where('id', '=', MIGRATION_LOCK_ID)\n            .select('id')\n            .executeTakeFirst();\n        return !!lockRow;\n    }\n    async #runMigrations(getMigrationDirectionAndStep) {\n        const adapter = this.#props.db.getExecutor().adapter;\n        const lockOptions = freeze({\n            lockTable: this.#props.migrationLockTableName ?? DEFAULT_MIGRATION_LOCK_TABLE,\n            lockRowId: MIGRATION_LOCK_ID,\n            lockTableSchema: this.#props.migrationTableSchema,\n        });\n        const run = async (db) => {\n            try {\n                await adapter.acquireMigrationLock(db, lockOptions);\n                const state = await this.#getState(db);\n                if (state.migrations.length === 0) {\n                    return { results: [] };\n                }\n                const { direction, step } = getMigrationDirectionAndStep(state);\n                if (step <= 0) {\n                    return { results: [] };\n                }\n                if (direction === 'Down') {\n                    return await this.#migrateDown(db, state, step);\n                }\n                else if (direction === 'Up') {\n                    return await this.#migrateUp(db, state, step);\n                }\n                return { results: [] };\n            }\n            finally {\n                await adapter.releaseMigrationLock(db, lockOptions);\n            }\n        };\n        if (adapter.supportsTransactionalDdl && !this.#props.disableTransactions) {\n            return this.#props.db.transaction().execute(run);\n        }\n        else {\n            return this.#props.db.connection().execute(run);\n        }\n    }\n    async #getState(db) {\n        const migrations = await this.#resolveMigrations();\n        const executedMigrations = await this.#getExecutedMigrations(db);\n        this.#ensureNoMissingMigrations(migrations, executedMigrations);\n        if (!this.#allowUnorderedMigrations) {\n            this.#ensureMigrationsInOrder(migrations, executedMigrations);\n        }\n        const pendingMigrations = this.#getPendingMigrations(migrations, executedMigrations);\n        return freeze({\n            migrations,\n            executedMigrations,\n            lastMigration: getLast(executedMigrations),\n            pendingMigrations,\n        });\n    }\n    #getPendingMigrations(migrations, executedMigrations) {\n        return migrations.filter((migration) => {\n            return !executedMigrations.includes(migration.name);\n        });\n    }\n    async #resolveMigrations() {\n        const allMigrations = await this.#props.provider.getMigrations();\n        return Object.keys(allMigrations)\n            .sort()\n            .map((name) => ({\n            ...allMigrations[name],\n            name,\n        }));\n    }\n    async #getExecutedMigrations(db) {\n        const executedMigrations = await db\n            .withPlugin(this.#schemaPlugin)\n            .selectFrom(this.#migrationTable)\n            .select(['name', 'timestamp'])\n            .$narrowType()\n            .execute();\n        const nameComparator = this.#props.nameComparator || ((a, b) => a.localeCompare(b));\n        return (executedMigrations\n            // https://github.com/kysely-org/kysely/issues/843\n            .sort((a, b) => {\n            if (a.timestamp === b.timestamp) {\n                return nameComparator(a.name, b.name);\n            }\n            return (new Date(a.timestamp).getTime() - new Date(b.timestamp).getTime());\n        })\n            .map((it) => it.name));\n    }\n    #ensureNoMissingMigrations(migrations, executedMigrations) {\n        // Ensure all executed migrations exist in the `migrations` list.\n        for (const executed of executedMigrations) {\n            if (!migrations.some((it) => it.name === executed)) {\n                throw new Error(`corrupted migrations: previously executed migration ${executed} is missing`);\n            }\n        }\n    }\n    #ensureMigrationsInOrder(migrations, executedMigrations) {\n        // Ensure the executed migrations are the first ones in the migration list.\n        for (let i = 0; i < executedMigrations.length; ++i) {\n            if (migrations[i].name !== executedMigrations[i]) {\n                throw new Error(`corrupted migrations: expected previously executed migration ${executedMigrations[i]} to be at index ${i} but ${migrations[i].name} was found in its place. New migrations must always have a name that comes alphabetically after the last executed migration.`);\n            }\n        }\n    }\n    async #migrateDown(db, state, step) {\n        const migrationsToRollback = state.executedMigrations\n            .slice()\n            .reverse()\n            .slice(0, step)\n            .map((name) => {\n            return state.migrations.find((it) => it.name === name);\n        });\n        const results = migrationsToRollback.map((migration) => {\n            return {\n                migrationName: migration.name,\n                direction: 'Down',\n                status: 'NotExecuted',\n            };\n        });\n        for (let i = 0; i < results.length; ++i) {\n            const migration = migrationsToRollback[i];\n            try {\n                if (migration.down) {\n                    await migration.down(db);\n                    await db\n                        .withPlugin(this.#schemaPlugin)\n                        .deleteFrom(this.#migrationTable)\n                        .where('name', '=', migration.name)\n                        .execute();\n                    results[i] = {\n                        migrationName: migration.name,\n                        direction: 'Down',\n                        status: 'Success',\n                    };\n                }\n            }\n            catch (error) {\n                results[i] = {\n                    migrationName: migration.name,\n                    direction: 'Down',\n                    status: 'Error',\n                };\n                throw new MigrationResultSetError({\n                    error,\n                    results,\n                });\n            }\n        }\n        return { results };\n    }\n    async #migrateUp(db, state, step) {\n        const migrationsToRun = state.pendingMigrations.slice(0, step);\n        const results = migrationsToRun.map((migration) => {\n            return {\n                migrationName: migration.name,\n                direction: 'Up',\n                status: 'NotExecuted',\n            };\n        });\n        for (let i = 0; i < results.length; i++) {\n            const migration = state.pendingMigrations[i];\n            try {\n                await migration.up(db);\n                await db\n                    .withPlugin(this.#schemaPlugin)\n                    .insertInto(this.#migrationTable)\n                    .values({\n                    name: migration.name,\n                    timestamp: new Date().toISOString(),\n                })\n                    .execute();\n                results[i] = {\n                    migrationName: migration.name,\n                    direction: 'Up',\n                    status: 'Success',\n                };\n            }\n            catch (error) {\n                results[i] = {\n                    migrationName: migration.name,\n                    direction: 'Up',\n                    status: 'Error',\n                };\n                throw new MigrationResultSetError({\n                    error,\n                    results,\n                });\n            }\n        }\n        return { results };\n    }\n    async #createIfNotExists(qb) {\n        if (this.#props.db.getExecutor().adapter.supportsCreateIfNotExists) {\n            qb = qb.ifNotExists();\n        }\n        await qb.execute();\n    }\n}\nclass MigrationResultSetError extends Error {\n    #resultSet;\n    constructor(result) {\n        super();\n        this.#resultSet = result;\n    }\n    get resultSet() {\n        return this.#resultSet;\n    }\n}\n", "/// <reference types=\"./sqlite-introspector.d.ts\" />\nimport { DEFAULT_MIGRATION_LOCK_TABLE, DEFAULT_MIGRATION_TABLE, } from '../../migration/migrator.js';\nimport { sql } from '../../raw-builder/sql.js';\nexport class SqliteIntrospector {\n    #db;\n    constructor(db) {\n        this.#db = db;\n    }\n    async getSchemas() {\n        // Sqlite doesn't support schemas.\n        return [];\n    }\n    async getTables(options = { withInternalKyselyTables: false }) {\n        return await this.#getTableMetadata(options);\n    }\n    async getMetadata(options) {\n        return {\n            tables: await this.getTables(options),\n        };\n    }\n    #tablesQuery(qb, options) {\n        let tablesQuery = qb\n            .selectFrom('sqlite_master')\n            .where('type', 'in', ['table', 'view'])\n            .where('name', 'not like', 'sqlite_%')\n            .select(['name', 'sql', 'type'])\n            .orderBy('name');\n        if (!options.withInternalKyselyTables) {\n            tablesQuery = tablesQuery\n                .where('name', '!=', DEFAULT_MIGRATION_TABLE)\n                .where('name', '!=', DEFAULT_MIGRATION_LOCK_TABLE);\n        }\n        return tablesQuery;\n    }\n    async #getTableMetadata(options) {\n        const tablesResult = await this.#tablesQuery(this.#db, options).execute();\n        const tableMetadata = await this.#db\n            .with('table_list', (qb) => this.#tablesQuery(qb, options))\n            .selectFrom([\n            'table_list as tl',\n            sql `pragma_table_info(tl.name)`.as('p'),\n        ])\n            .select([\n            'tl.name as table',\n            'p.cid',\n            'p.name',\n            'p.type',\n            'p.notnull',\n            'p.dflt_value',\n            'p.pk',\n        ])\n            .orderBy('tl.name')\n            .orderBy('p.cid')\n            .execute();\n        const columnsByTable = {};\n        for (const row of tableMetadata) {\n            columnsByTable[row.table] ??= [];\n            columnsByTable[row.table].push(row);\n        }\n        return tablesResult.map(({ name, sql, type }) => {\n            // // Try to find the name of the column that has `autoincrement` 🤦\n            let autoIncrementCol = sql\n                ?.split(/[\\(\\),]/)\n                ?.find((it) => it.toLowerCase().includes('autoincrement'))\n                ?.trimStart()\n                ?.split(/\\s+/)?.[0]\n                ?.replace(/[\"`]/g, '');\n            const columns = columnsByTable[name] ?? [];\n            // Otherwise, check for an INTEGER PRIMARY KEY\n            // https://www.sqlite.org/autoinc.html\n            if (!autoIncrementCol) {\n                const pkCols = columns.filter((r) => r.pk > 0);\n                if (pkCols.length === 1 && pkCols[0].type.toLowerCase() === 'integer') {\n                    autoIncrementCol = pkCols[0].name;\n                }\n            }\n            return {\n                name: name,\n                isView: type === 'view',\n                columns: columns.map((col) => ({\n                    name: col.name,\n                    dataType: col.type,\n                    isNullable: !col.notnull,\n                    isAutoIncrementing: col.name === autoIncrementCol,\n                    hasDefaultValue: col.dflt_value != null,\n                    comment: undefined,\n                })),\n            };\n        });\n    }\n}\n", "/// <reference types=\"./sqlite-adapter.d.ts\" />\nimport { DialectAdapterBase } from '../dialect-adapter-base.js';\nexport class SqliteAdapter extends DialectAdapterBase {\n    get supportsTransactionalDdl() {\n        return false;\n    }\n    get supportsReturning() {\n        return true;\n    }\n    async acquireMigrationLock(_db, _opt) {\n        // SQLite only has one connection that's reserved by the migration system\n        // for the whole time between acquireMigrationLock and releaseMigrationLock.\n        // We don't need to do anything here.\n    }\n    async releaseMigrationLock(_db, _opt) {\n        // SQLite only has one connection that's reserved by the migration system\n        // for the whole time between acquireMigrationLock and releaseMigrationLock.\n        // We don't need to do anything here.\n    }\n}\n", "/// <reference types=\"./sqlite-dialect.d.ts\" />\nimport { SqliteDriver } from './sqlite-driver.js';\nimport { SqliteQueryCompiler } from './sqlite-query-compiler.js';\nimport { SqliteIntrospector } from './sqlite-introspector.js';\nimport { SqliteAdapter } from './sqlite-adapter.js';\nimport { freeze } from '../../util/object-utils.js';\n/**\n * SQLite dialect that uses the [better-sqlite3](https://github.com/JoshuaWise/better-sqlite3) library.\n *\n * The constructor takes an instance of {@link SqliteDialectConfig}.\n *\n * ```ts\n * import Database from 'better-sqlite3'\n *\n * new SqliteDialect({\n *   database: new Database('db.sqlite')\n * })\n * ```\n *\n * If you want the pool to only be created once it's first used, `database`\n * can be a function:\n *\n * ```ts\n * import Database from 'better-sqlite3'\n *\n * new SqliteDialect({\n *   database: async () => new Database('db.sqlite')\n * })\n * ```\n */\nexport class SqliteDialect {\n    #config;\n    constructor(config) {\n        this.#config = freeze({ ...config });\n    }\n    createDriver() {\n        return new SqliteDriver(this.#config);\n    }\n    createQueryCompiler() {\n        return new SqliteQueryCompiler();\n    }\n    createAdapter() {\n        return new SqliteAdapter();\n    }\n    createIntrospector(db) {\n        return new SqliteIntrospector(db);\n    }\n}\n", "/// <reference types=\"./postgres-query-compiler.d.ts\" />\nimport { DefaultQueryCompiler } from '../../query-compiler/default-query-compiler.js';\nconst ID_WRAP_REGEX = /\"/g;\nexport class PostgresQueryCompiler extends DefaultQueryCompiler {\n    sanitizeIdentifier(identifier) {\n        return identifier.replace(ID_WRAP_REGEX, '\"\"');\n    }\n}\n", "/// <reference types=\"./postgres-introspector.d.ts\" />\nimport { DEFAULT_MIGRATION_LOCK_TABLE, DEFAULT_MIGRATION_TABLE, } from '../../migration/migrator.js';\nimport { freeze } from '../../util/object-utils.js';\nimport { sql } from '../../raw-builder/sql.js';\nexport class PostgresIntrospector {\n    #db;\n    constructor(db) {\n        this.#db = db;\n    }\n    async getSchemas() {\n        let rawSchemas = await this.#db\n            .selectFrom('pg_catalog.pg_namespace')\n            .select('nspname')\n            .$castTo()\n            .execute();\n        return rawSchemas.map((it) => ({ name: it.nspname }));\n    }\n    async getTables(options = { withInternalKyselyTables: false }) {\n        let query = this.#db\n            // column\n            .selectFrom('pg_catalog.pg_attribute as a')\n            // table\n            .innerJoin('pg_catalog.pg_class as c', 'a.attrelid', 'c.oid')\n            // table schema\n            .innerJoin('pg_catalog.pg_namespace as ns', 'c.relnamespace', 'ns.oid')\n            // column data type\n            .innerJoin('pg_catalog.pg_type as typ', 'a.atttypid', 'typ.oid')\n            // column data type schema\n            .innerJoin('pg_catalog.pg_namespace as dtns', 'typ.typnamespace', 'dtns.oid')\n            .select([\n            'a.attname as column',\n            'a.attnotnull as not_null',\n            'a.atthasdef as has_default',\n            'c.relname as table',\n            'c.relkind as table_type',\n            'ns.nspname as schema',\n            'typ.typname as type',\n            'dtns.nspname as type_schema',\n            sql `col_description(a.attrelid, a.attnum)`.as('column_description'),\n            sql `pg_get_serial_sequence(quote_ident(ns.nspname) || '.' || quote_ident(c.relname), a.attname)`.as('auto_incrementing'),\n        ])\n            .where('c.relkind', 'in', [\n            'r' /*regular table*/,\n            'v' /*view*/,\n            'p' /*partitioned table*/,\n        ])\n            .where('ns.nspname', '!~', '^pg_')\n            .where('ns.nspname', '!=', 'information_schema')\n            // No system columns\n            .where('a.attnum', '>=', 0)\n            .where('a.attisdropped', '!=', true)\n            .orderBy('ns.nspname')\n            .orderBy('c.relname')\n            .orderBy('a.attnum')\n            .$castTo();\n        if (!options.withInternalKyselyTables) {\n            query = query\n                .where('c.relname', '!=', DEFAULT_MIGRATION_TABLE)\n                .where('c.relname', '!=', DEFAULT_MIGRATION_LOCK_TABLE);\n        }\n        const rawColumns = await query.execute();\n        return this.#parseTableMetadata(rawColumns);\n    }\n    async getMetadata(options) {\n        return {\n            tables: await this.getTables(options),\n        };\n    }\n    #parseTableMetadata(columns) {\n        return columns.reduce((tables, it) => {\n            let table = tables.find((tbl) => tbl.name === it.table && tbl.schema === it.schema);\n            if (!table) {\n                table = freeze({\n                    name: it.table,\n                    isView: it.table_type === 'v',\n                    schema: it.schema,\n                    columns: [],\n                });\n                tables.push(table);\n            }\n            table.columns.push(freeze({\n                name: it.column,\n                dataType: it.type,\n                dataTypeSchema: it.type_schema,\n                isNullable: !it.not_null,\n                isAutoIncrementing: it.auto_incrementing !== null,\n                hasDefaultValue: it.has_default,\n                comment: it.column_description ?? undefined,\n            }));\n            return tables;\n        }, []);\n    }\n}\n", "/// <reference types=\"./postgres-adapter.d.ts\" />\nimport { sql } from '../../raw-builder/sql.js';\nimport { DialectAdapterBase } from '../dialect-adapter-base.js';\n// Random id for our transaction lock.\nconst LOCK_ID = BigInt('3853314791062309107');\nexport class PostgresAdapter extends DialectAdapterBase {\n    get supportsTransactionalDdl() {\n        return true;\n    }\n    get supportsReturning() {\n        return true;\n    }\n    async acquireMigrationLock(db, _opt) {\n        // Acquire a transaction level advisory lock.\n        await sql `select pg_advisory_xact_lock(${sql.lit(LOCK_ID)})`.execute(db);\n    }\n    async releaseMigrationLock(_db, _opt) {\n        // Nothing to do here. `pg_advisory_xact_lock` is automatically released at the\n        // end of the transaction and since `supportsTransactionalDdl` true, we know\n        // the `db` instance passed to acquireMigrationLock is actually a transaction.\n    }\n}\n", "/// <reference types=\"./stack-trace-utils.d.ts\" />\nimport { isObject, isString } from './object-utils.js';\nexport function extendStackTrace(err, stackError) {\n    if (isStackHolder(err) && stackError.stack) {\n        // Remove the first line that just says `Error`.\n        const stackExtension = stackError.stack.split('\\n').slice(1).join('\\n');\n        err.stack += `\\n${stackExtension}`;\n        return err;\n    }\n    return err;\n}\nfunction isStackHolder(obj) {\n    return isObject(obj) && isString(obj.stack);\n}\n", "/// <reference types=\"./mysql-driver.d.ts\" />\nimport { parseSavepointCommand } from '../../parser/savepoint-parser.js';\nimport { CompiledQuery } from '../../query-compiler/compiled-query.js';\nimport { isFunction, isObject, freeze } from '../../util/object-utils.js';\nimport { createQueryId } from '../../util/query-id.js';\nimport { extendStackTrace } from '../../util/stack-trace-utils.js';\nconst PRIVATE_RELEASE_METHOD = Symbol();\nexport class MysqlDriver {\n    #config;\n    #connections = new WeakMap();\n    #pool;\n    constructor(configOrPool) {\n        this.#config = freeze({ ...configOrPool });\n    }\n    async init() {\n        this.#pool = isFunction(this.#config.pool)\n            ? await this.#config.pool()\n            : this.#config.pool;\n    }\n    async acquireConnection() {\n        const rawConnection = await this.#acquireConnection();\n        let connection = this.#connections.get(rawConnection);\n        if (!connection) {\n            connection = new MysqlConnection(rawConnection);\n            this.#connections.set(rawConnection, connection);\n            // The driver must take care of calling `onCreateConnection` when a new\n            // connection is created. The `mysql2` module doesn't provide an async hook\n            // for the connection creation. We need to call the method explicitly.\n            if (this.#config?.onCreateConnection) {\n                await this.#config.onCreateConnection(connection);\n            }\n        }\n        if (this.#config?.onReserveConnection) {\n            await this.#config.onReserveConnection(connection);\n        }\n        return connection;\n    }\n    async #acquireConnection() {\n        return new Promise((resolve, reject) => {\n            this.#pool.getConnection(async (err, rawConnection) => {\n                if (err) {\n                    reject(err);\n                }\n                else {\n                    resolve(rawConnection);\n                }\n            });\n        });\n    }\n    async beginTransaction(connection, settings) {\n        if (settings.isolationLevel || settings.accessMode) {\n            const parts = [];\n            if (settings.isolationLevel) {\n                parts.push(`isolation level ${settings.isolationLevel}`);\n            }\n            if (settings.accessMode) {\n                parts.push(settings.accessMode);\n            }\n            const sql = `set transaction ${parts.join(', ')}`;\n            // On MySQL this sets the isolation level of the next transaction.\n            await connection.executeQuery(CompiledQuery.raw(sql));\n        }\n        await connection.executeQuery(CompiledQuery.raw('begin'));\n    }\n    async commitTransaction(connection) {\n        await connection.executeQuery(CompiledQuery.raw('commit'));\n    }\n    async rollbackTransaction(connection) {\n        await connection.executeQuery(CompiledQuery.raw('rollback'));\n    }\n    async savepoint(connection, savepointName, compileQuery) {\n        await connection.executeQuery(compileQuery(parseSavepointCommand('savepoint', savepointName), createQueryId()));\n    }\n    async rollbackToSavepoint(connection, savepointName, compileQuery) {\n        await connection.executeQuery(compileQuery(parseSavepointCommand('rollback to', savepointName), createQueryId()));\n    }\n    async releaseSavepoint(connection, savepointName, compileQuery) {\n        await connection.executeQuery(compileQuery(parseSavepointCommand('release savepoint', savepointName), createQueryId()));\n    }\n    async releaseConnection(connection) {\n        connection[PRIVATE_RELEASE_METHOD]();\n    }\n    async destroy() {\n        return new Promise((resolve, reject) => {\n            this.#pool.end((err) => {\n                if (err) {\n                    reject(err);\n                }\n                else {\n                    resolve();\n                }\n            });\n        });\n    }\n}\nfunction isOkPacket(obj) {\n    return isObject(obj) && 'insertId' in obj && 'affectedRows' in obj;\n}\nclass MysqlConnection {\n    #rawConnection;\n    constructor(rawConnection) {\n        this.#rawConnection = rawConnection;\n    }\n    async executeQuery(compiledQuery) {\n        try {\n            const result = await this.#executeQuery(compiledQuery);\n            if (isOkPacket(result)) {\n                const { insertId, affectedRows, changedRows } = result;\n                return {\n                    insertId: insertId !== undefined &&\n                        insertId !== null &&\n                        insertId.toString() !== '0'\n                        ? BigInt(insertId)\n                        : undefined,\n                    numAffectedRows: affectedRows !== undefined && affectedRows !== null\n                        ? BigInt(affectedRows)\n                        : undefined,\n                    numChangedRows: changedRows !== undefined && changedRows !== null\n                        ? BigInt(changedRows)\n                        : undefined,\n                    rows: [],\n                };\n            }\n            else if (Array.isArray(result)) {\n                return {\n                    rows: result,\n                };\n            }\n            return {\n                rows: [],\n            };\n        }\n        catch (err) {\n            throw extendStackTrace(err, new Error());\n        }\n    }\n    #executeQuery(compiledQuery) {\n        return new Promise((resolve, reject) => {\n            this.#rawConnection.query(compiledQuery.sql, compiledQuery.parameters, (err, result) => {\n                if (err) {\n                    reject(err);\n                }\n                else {\n                    resolve(result);\n                }\n            });\n        });\n    }\n    async *streamQuery(compiledQuery, _chunkSize) {\n        const stream = this.#rawConnection\n            .query(compiledQuery.sql, compiledQuery.parameters)\n            .stream({\n            objectMode: true,\n        });\n        try {\n            for await (const row of stream) {\n                yield {\n                    rows: [row],\n                };\n            }\n        }\n        catch (ex) {\n            if (ex &&\n                typeof ex === 'object' &&\n                'code' in ex &&\n                // @ts-ignore\n                ex.code === 'ERR_STREAM_PREMATURE_CLOSE') {\n                // Most likely because of https://github.com/mysqljs/mysql/blob/master/lib/protocol/sequences/Query.js#L220\n                return;\n            }\n            throw ex;\n        }\n    }\n    [PRIVATE_RELEASE_METHOD]() {\n        this.#rawConnection.release();\n    }\n}\n", "/// <reference types=\"./mysql-query-compiler.d.ts\" />\nimport { DefaultQueryCompiler } from '../../query-compiler/default-query-compiler.js';\nconst ID_WRAP_REGEX = /`/g;\nexport class MysqlQueryCompiler extends DefaultQueryCompiler {\n    getCurrentParameterPlaceholder() {\n        return '?';\n    }\n    getLeftExplainOptionsWrapper() {\n        return '';\n    }\n    getExplainOptionAssignment() {\n        return '=';\n    }\n    getExplainOptionsDelimiter() {\n        return ' ';\n    }\n    getRightExplainOptionsWrapper() {\n        return '';\n    }\n    getLeftIdentifierWrapper() {\n        return '`';\n    }\n    getRightIdentifierWrapper() {\n        return '`';\n    }\n    sanitizeIdentifier(identifier) {\n        return identifier.replace(ID_WRAP_REGEX, '``');\n    }\n    visitCreateIndex(node) {\n        this.append('create ');\n        if (node.unique) {\n            this.append('unique ');\n        }\n        this.append('index ');\n        if (node.ifNotExists) {\n            this.append('if not exists ');\n        }\n        this.visitNode(node.name);\n        if (node.using) {\n            this.append(' using ');\n            this.visitNode(node.using);\n        }\n        if (node.table) {\n            this.append(' on ');\n            this.visitNode(node.table);\n        }\n        if (node.columns) {\n            this.append(' (');\n            this.compileList(node.columns);\n            this.append(')');\n        }\n        if (node.where) {\n            this.append(' ');\n            this.visitNode(node.where);\n        }\n    }\n}\n", "/// <reference types=\"./mysql-introspector.d.ts\" />\nimport { DEFAULT_MIGRATION_LOCK_TABLE, DEFAULT_MIGRATION_TABLE, } from '../../migration/migrator.js';\nimport { freeze } from '../../util/object-utils.js';\nimport { sql } from '../../raw-builder/sql.js';\nexport class MysqlIntrospector {\n    #db;\n    constructor(db) {\n        this.#db = db;\n    }\n    async getSchemas() {\n        let rawSchemas = await this.#db\n            .selectFrom('information_schema.schemata')\n            .select('schema_name')\n            .$castTo()\n            .execute();\n        return rawSchemas.map((it) => ({ name: it.SCHEMA_NAME }));\n    }\n    async getTables(options = { withInternalKyselyTables: false }) {\n        let query = this.#db\n            .selectFrom('information_schema.columns as columns')\n            .innerJoin('information_schema.tables as tables', (b) => b\n            .onRef('columns.TABLE_CATALOG', '=', 'tables.TABLE_CATALOG')\n            .onRef('columns.TABLE_SCHEMA', '=', 'tables.TABLE_SCHEMA')\n            .onRef('columns.TABLE_NAME', '=', 'tables.TABLE_NAME'))\n            .select([\n            'columns.COLUMN_NAME',\n            'columns.COLUMN_DEFAULT',\n            'columns.TABLE_NAME',\n            'columns.TABLE_SCHEMA',\n            'tables.TABLE_TYPE',\n            'columns.IS_NULLABLE',\n            'columns.DATA_TYPE',\n            'columns.EXTRA',\n            'columns.COLUMN_COMMENT',\n        ])\n            .where('columns.TABLE_SCHEMA', '=', sql `database()`)\n            .orderBy('columns.TABLE_NAME')\n            .orderBy('columns.ORDINAL_POSITION')\n            .$castTo();\n        if (!options.withInternalKyselyTables) {\n            query = query\n                .where('columns.TABLE_NAME', '!=', DEFAULT_MIGRATION_TABLE)\n                .where('columns.TABLE_NAME', '!=', DEFAULT_MIGRATION_LOCK_TABLE);\n        }\n        const rawColumns = await query.execute();\n        return this.#parseTableMetadata(rawColumns);\n    }\n    async getMetadata(options) {\n        return {\n            tables: await this.getTables(options),\n        };\n    }\n    #parseTableMetadata(columns) {\n        return columns.reduce((tables, it) => {\n            let table = tables.find((tbl) => tbl.name === it.TABLE_NAME);\n            if (!table) {\n                table = freeze({\n                    name: it.TABLE_NAME,\n                    isView: it.TABLE_TYPE === 'VIEW',\n                    schema: it.TABLE_SCHEMA,\n                    columns: [],\n                });\n                tables.push(table);\n            }\n            table.columns.push(freeze({\n                name: it.COLUMN_NAME,\n                dataType: it.DATA_TYPE,\n                isNullable: it.IS_NULLABLE === 'YES',\n                isAutoIncrementing: it.EXTRA.toLowerCase().includes('auto_increment'),\n                hasDefaultValue: it.COLUMN_DEFAULT !== null,\n                comment: it.COLUMN_COMMENT === '' ? undefined : it.COLUMN_COMMENT,\n            }));\n            return tables;\n        }, []);\n    }\n}\n", "/// <reference types=\"./mysql-adapter.d.ts\" />\nimport { sql } from '../../raw-builder/sql.js';\nimport { DialectAdapterBase } from '../dialect-adapter-base.js';\nconst LOCK_ID = 'ea586330-2c93-47c8-908d-981d9d270f9d';\nconst LOCK_TIMEOUT_SECONDS = 60 * 60;\nexport class MysqlAdapter extends DialectAdapterBase {\n    get supportsTransactionalDdl() {\n        return false;\n    }\n    get supportsReturning() {\n        return false;\n    }\n    async acquireMigrationLock(db, _opt) {\n        // Kysely uses a single connection to run the migrations. Because of that, we\n        // can take a lock using `get_lock`. Locks acquired using `get_lock` get\n        // released when the connection is destroyed (session ends) or when the lock\n        // is released using `release_lock`. This way we know that the lock is either\n        // released by us after successfull or failed migrations OR it's released by\n        // MySQL if the process gets killed for some reason.\n        await sql `select get_lock(${sql.lit(LOCK_ID)}, ${sql.lit(LOCK_TIMEOUT_SECONDS)})`.execute(db);\n    }\n    async releaseMigrationLock(db, _opt) {\n        await sql `select release_lock(${sql.lit(LOCK_ID)})`.execute(db);\n    }\n}\n", "/// <reference types=\"./mysql-dialect.d.ts\" />\nimport { MysqlDriver } from './mysql-driver.js';\nimport { MysqlQueryCompiler } from './mysql-query-compiler.js';\nimport { MysqlIntrospector } from './mysql-introspector.js';\nimport { MysqlAdapter } from './mysql-adapter.js';\n/**\n * MySQL dialect that uses the [mysql2](https://github.com/sidorares/node-mysql2#readme) library.\n *\n * The constructor takes an instance of {@link MysqlDialectConfig}.\n *\n * ```ts\n * import { createPool } from 'mysql2'\n *\n * new MysqlDialect({\n *   pool: createPool({\n *     database: 'some_db',\n *     host: 'localhost',\n *   })\n * })\n * ```\n *\n * If you want the pool to only be created once it's first used, `pool`\n * can be a function:\n *\n * ```ts\n * import { createPool } from 'mysql2'\n *\n * new MysqlDialect({\n *   pool: async () => createPool({\n *     database: 'some_db',\n *     host: 'localhost',\n *   })\n * })\n * ```\n */\nexport class MysqlDialect {\n    #config;\n    constructor(config) {\n        this.#config = config;\n    }\n    createDriver() {\n        return new MysqlDriver(this.#config);\n    }\n    createQueryCompiler() {\n        return new MysqlQueryCompiler();\n    }\n    createAdapter() {\n        return new MysqlAdapter();\n    }\n    createIntrospector(db) {\n        return new MysqlIntrospector(db);\n    }\n}\n", "/// <reference types=\"./postgres-driver.d.ts\" />\nimport { parseSavepointCommand } from '../../parser/savepoint-parser.js';\nimport { CompiledQuery } from '../../query-compiler/compiled-query.js';\nimport { isFunction, freeze } from '../../util/object-utils.js';\nimport { createQueryId } from '../../util/query-id.js';\nimport { extendStackTrace } from '../../util/stack-trace-utils.js';\nconst PRIVATE_RELEASE_METHOD = Symbol();\nexport class PostgresDriver {\n    #config;\n    #connections = new WeakMap();\n    #pool;\n    constructor(config) {\n        this.#config = freeze({ ...config });\n    }\n    async init() {\n        this.#pool = isFunction(this.#config.pool)\n            ? await this.#config.pool()\n            : this.#config.pool;\n    }\n    async acquireConnection() {\n        const client = await this.#pool.connect();\n        let connection = this.#connections.get(client);\n        if (!connection) {\n            connection = new PostgresConnection(client, {\n                cursor: this.#config.cursor ?? null,\n            });\n            this.#connections.set(client, connection);\n            // The driver must take care of calling `onCreateConnection` when a new\n            // connection is created. The `pg` module doesn't provide an async hook\n            // for the connection creation. We need to call the method explicitly.\n            if (this.#config.onCreateConnection) {\n                await this.#config.onCreateConnection(connection);\n            }\n        }\n        if (this.#config.onReserveConnection) {\n            await this.#config.onReserveConnection(connection);\n        }\n        return connection;\n    }\n    async beginTransaction(connection, settings) {\n        if (settings.isolationLevel || settings.accessMode) {\n            let sql = 'start transaction';\n            if (settings.isolationLevel) {\n                sql += ` isolation level ${settings.isolationLevel}`;\n            }\n            if (settings.accessMode) {\n                sql += ` ${settings.accessMode}`;\n            }\n            await connection.executeQuery(CompiledQuery.raw(sql));\n        }\n        else {\n            await connection.executeQuery(CompiledQuery.raw('begin'));\n        }\n    }\n    async commitTransaction(connection) {\n        await connection.executeQuery(CompiledQuery.raw('commit'));\n    }\n    async rollbackTransaction(connection) {\n        await connection.executeQuery(CompiledQuery.raw('rollback'));\n    }\n    async savepoint(connection, savepointName, compileQuery) {\n        await connection.executeQuery(compileQuery(parseSavepointCommand('savepoint', savepointName), createQueryId()));\n    }\n    async rollbackToSavepoint(connection, savepointName, compileQuery) {\n        await connection.executeQuery(compileQuery(parseSavepointCommand('rollback to', savepointName), createQueryId()));\n    }\n    async releaseSavepoint(connection, savepointName, compileQuery) {\n        await connection.executeQuery(compileQuery(parseSavepointCommand('release', savepointName), createQueryId()));\n    }\n    async releaseConnection(connection) {\n        connection[PRIVATE_RELEASE_METHOD]();\n    }\n    async destroy() {\n        if (this.#pool) {\n            const pool = this.#pool;\n            this.#pool = undefined;\n            await pool.end();\n        }\n    }\n}\nclass PostgresConnection {\n    #client;\n    #options;\n    constructor(client, options) {\n        this.#client = client;\n        this.#options = options;\n    }\n    async executeQuery(compiledQuery) {\n        try {\n            const { command, rowCount, rows } = await this.#client.query(compiledQuery.sql, [...compiledQuery.parameters]);\n            return {\n                numAffectedRows: command === 'INSERT' ||\n                    command === 'UPDATE' ||\n                    command === 'DELETE' ||\n                    command === 'MERGE'\n                    ? BigInt(rowCount)\n                    : undefined,\n                rows: rows ?? [],\n            };\n        }\n        catch (err) {\n            throw extendStackTrace(err, new Error());\n        }\n    }\n    async *streamQuery(compiledQuery, chunkSize) {\n        if (!this.#options.cursor) {\n            throw new Error(\"'cursor' is not present in your postgres dialect config. It's required to make streaming work in postgres.\");\n        }\n        if (!Number.isInteger(chunkSize) || chunkSize <= 0) {\n            throw new Error('chunkSize must be a positive integer');\n        }\n        const cursor = this.#client.query(new this.#options.cursor(compiledQuery.sql, compiledQuery.parameters.slice()));\n        try {\n            while (true) {\n                const rows = await cursor.read(chunkSize);\n                if (rows.length === 0) {\n                    break;\n                }\n                yield {\n                    rows,\n                };\n            }\n        }\n        finally {\n            await cursor.close();\n        }\n    }\n    [PRIVATE_RELEASE_METHOD]() {\n        this.#client.release();\n    }\n}\n", "/// <reference types=\"./postgres-dialect.d.ts\" />\nimport { PostgresDriver } from './postgres-driver.js';\nimport { PostgresIntrospector } from './postgres-introspector.js';\nimport { PostgresQueryCompiler } from './postgres-query-compiler.js';\nimport { PostgresAdapter } from './postgres-adapter.js';\n/**\n * PostgreSQL dialect that uses the [pg](https://node-postgres.com/) library.\n *\n * The constructor takes an instance of {@link PostgresDialectConfig}.\n *\n * ```ts\n * import { Pool } from 'pg'\n *\n * new PostgresDialect({\n *   pool: new Pool({\n *     database: 'some_db',\n *     host: 'localhost',\n *   })\n * })\n * ```\n *\n * If you want the pool to only be created once it's first used, `pool`\n * can be a function:\n *\n * ```ts\n * import { Pool } from 'pg'\n *\n * new PostgresDialect({\n *   pool: async () => new Pool({\n *     database: 'some_db',\n *     host: 'localhost',\n *   })\n * })\n * ```\n */\nexport class PostgresDialect {\n    #config;\n    constructor(config) {\n        this.#config = config;\n    }\n    createDriver() {\n        return new PostgresDriver(this.#config);\n    }\n    createQueryCompiler() {\n        return new PostgresQueryCompiler();\n    }\n    createAdapter() {\n        return new PostgresAdapter();\n    }\n    createIntrospector(db) {\n        return new PostgresIntrospector(db);\n    }\n}\n", "/// <reference types=\"./mssql-adapter.d.ts\" />\nimport { DEFAULT_MIGRATION_TABLE } from '../../migration/migrator.js';\nimport { sql } from '../../raw-builder/sql.js';\nimport { DialectAdapterBase } from '../dialect-adapter-base.js';\nexport class MssqlAdapter extends DialectAdapterBase {\n    get supportsCreateIfNotExists() {\n        return false;\n    }\n    get supportsTransactionalDdl() {\n        return true;\n    }\n    get supportsOutput() {\n        return true;\n    }\n    async acquireMigrationLock(db) {\n        // Acquire a transaction-level exclusive lock on the migrations table.\n        // https://learn.microsoft.com/en-us/sql/relational-databases/system-stored-procedures/sp-getapplock-transact-sql?view=sql-server-ver16\n        await sql `exec sp_getapplock @DbPrincipal = ${sql.lit('dbo')}, @Resource = ${sql.lit(DEFAULT_MIGRATION_TABLE)}, @LockMode = ${sql.lit('Exclusive')}`.execute(db);\n    }\n    async releaseMigrationLock() {\n        // Nothing to do here. `sp_getapplock` is automatically released at the\n        // end of the transaction and since `supportsTransactionalDdl` true, we know\n        // the `db` instance passed to acquireMigrationLock is actually a transaction.\n    }\n}\n", "/// <reference types=\"./mssql-driver.d.ts\" />\nimport { freeze, isBigInt, isBoolean, isBuffer, isDate, isNull, isNumber, isString, isUndefined, } from '../../util/object-utils.js';\nimport { CompiledQuery } from '../../query-compiler/compiled-query.js';\nimport { extendStackTrace } from '../../util/stack-trace-utils.js';\nimport { randomString } from '../../util/random-string.js';\nimport { Deferred } from '../../util/deferred.js';\nconst PRIVATE_RESET_METHOD = Symbol();\nconst PRIVATE_DESTROY_METHOD = Symbol();\nexport class MssqlDriver {\n    #config;\n    #pool;\n    constructor(config) {\n        this.#config = freeze({ ...config });\n        const { tarn, tedious, validateConnections } = this.#config;\n        const { validateConnections: deprecatedValidateConnections, ...poolOptions } = tarn.options;\n        this.#pool = new tarn.Pool({\n            ...poolOptions,\n            create: async () => {\n                const connection = await tedious.connectionFactory();\n                return await new MssqlConnection(connection, tedious).connect();\n            },\n            destroy: async (connection) => {\n                await connection[PRIVATE_DESTROY_METHOD]();\n            },\n            // @ts-ignore `tarn` accepts a function that returns a promise here, but\n            // the types are not aligned and it type errors.\n            validate: validateConnections === false ||\n                deprecatedValidateConnections === false\n                ? undefined\n                : (connection) => connection.validate(),\n        });\n    }\n    async init() {\n        // noop\n    }\n    async acquireConnection() {\n        return await this.#pool.acquire().promise;\n    }\n    async beginTransaction(connection, settings) {\n        await connection.beginTransaction(settings);\n    }\n    async commitTransaction(connection) {\n        await connection.commitTransaction();\n    }\n    async rollbackTransaction(connection) {\n        await connection.rollbackTransaction();\n    }\n    async savepoint(connection, savepointName) {\n        await connection.savepoint(savepointName);\n    }\n    async rollbackToSavepoint(connection, savepointName) {\n        await connection.rollbackTransaction(savepointName);\n    }\n    async releaseConnection(connection) {\n        if (this.#config.resetConnectionsOnRelease ||\n            this.#config.tedious.resetConnectionOnRelease) {\n            await connection[PRIVATE_RESET_METHOD]();\n        }\n        this.#pool.release(connection);\n    }\n    async destroy() {\n        await this.#pool.destroy();\n    }\n}\nclass MssqlConnection {\n    #connection;\n    #tedious;\n    constructor(connection, tedious) {\n        this.#connection = connection;\n        this.#tedious = tedious;\n        this.#connection.on('error', console.error);\n        this.#connection.once('end', () => {\n            this.#connection.off('error', console.error);\n        });\n    }\n    async beginTransaction(settings) {\n        const { isolationLevel } = settings;\n        await new Promise((resolve, reject) => this.#connection.beginTransaction((error) => {\n            if (error)\n                reject(error);\n            else\n                resolve(undefined);\n        }, isolationLevel ? randomString(8) : undefined, isolationLevel\n            ? this.#getTediousIsolationLevel(isolationLevel)\n            : undefined));\n    }\n    async commitTransaction() {\n        await new Promise((resolve, reject) => this.#connection.commitTransaction((error) => {\n            if (error)\n                reject(error);\n            else\n                resolve(undefined);\n        }));\n    }\n    async connect() {\n        await new Promise((resolve, reject) => {\n            this.#connection.connect((error) => {\n                if (error) {\n                    console.error(error);\n                    reject(error);\n                }\n                else {\n                    resolve(undefined);\n                }\n            });\n        });\n        return this;\n    }\n    async executeQuery(compiledQuery) {\n        try {\n            const deferred = new Deferred();\n            const request = new MssqlRequest({\n                compiledQuery,\n                tedious: this.#tedious,\n                onDone: deferred,\n            });\n            this.#connection.execSql(request.request);\n            const { rowCount, rows } = await deferred.promise;\n            return {\n                numAffectedRows: rowCount !== undefined ? BigInt(rowCount) : undefined,\n                rows,\n            };\n        }\n        catch (err) {\n            throw extendStackTrace(err, new Error());\n        }\n    }\n    async rollbackTransaction(savepointName) {\n        await new Promise((resolve, reject) => this.#connection.rollbackTransaction((error) => {\n            if (error)\n                reject(error);\n            else\n                resolve(undefined);\n        }, savepointName));\n    }\n    async savepoint(savepointName) {\n        await new Promise((resolve, reject) => this.#connection.saveTransaction((error) => {\n            if (error)\n                reject(error);\n            else\n                resolve(undefined);\n        }, savepointName));\n    }\n    async *streamQuery(compiledQuery, chunkSize) {\n        if (!Number.isInteger(chunkSize) || chunkSize <= 0) {\n            throw new Error('chunkSize must be a positive integer');\n        }\n        const request = new MssqlRequest({\n            compiledQuery,\n            streamChunkSize: chunkSize,\n            tedious: this.#tedious,\n        });\n        this.#connection.execSql(request.request);\n        try {\n            while (true) {\n                const rows = await request.readChunk();\n                if (rows.length === 0) {\n                    break;\n                }\n                yield { rows };\n                if (rows.length < chunkSize) {\n                    break;\n                }\n            }\n        }\n        finally {\n            await this.#cancelRequest(request);\n        }\n    }\n    async validate() {\n        try {\n            const deferred = new Deferred();\n            const request = new MssqlRequest({\n                compiledQuery: CompiledQuery.raw('select 1'),\n                onDone: deferred,\n                tedious: this.#tedious,\n            });\n            this.#connection.execSql(request.request);\n            await deferred.promise;\n            return true;\n        }\n        catch {\n            return false;\n        }\n    }\n    #getTediousIsolationLevel(isolationLevel) {\n        const { ISOLATION_LEVEL } = this.#tedious;\n        const mapper = {\n            'read committed': ISOLATION_LEVEL.READ_COMMITTED,\n            'read uncommitted': ISOLATION_LEVEL.READ_UNCOMMITTED,\n            'repeatable read': ISOLATION_LEVEL.REPEATABLE_READ,\n            serializable: ISOLATION_LEVEL.SERIALIZABLE,\n            snapshot: ISOLATION_LEVEL.SNAPSHOT,\n        };\n        const tediousIsolationLevel = mapper[isolationLevel];\n        if (tediousIsolationLevel === undefined) {\n            throw new Error(`Unknown isolation level: ${isolationLevel}`);\n        }\n        return tediousIsolationLevel;\n    }\n    #cancelRequest(request) {\n        return new Promise((resolve) => {\n            request.request.once('requestCompleted', resolve);\n            const wasCanceled = this.#connection.cancel();\n            if (!wasCanceled) {\n                request.request.off('requestCompleted', resolve);\n                resolve(undefined);\n            }\n        });\n    }\n    async [PRIVATE_RESET_METHOD]() {\n        await new Promise((resolve, reject) => {\n            this.#connection.reset((error) => {\n                if (error)\n                    reject(error);\n                else\n                    resolve(undefined);\n            });\n        });\n    }\n    [PRIVATE_DESTROY_METHOD]() {\n        return new Promise((resolve) => {\n            this.#connection.once('end', () => {\n                resolve(undefined);\n            });\n            this.#connection.close();\n        });\n    }\n}\nclass MssqlRequest {\n    #request;\n    #rows;\n    #streamChunkSize;\n    #subscribers;\n    #tedious;\n    #rowCount;\n    constructor(props) {\n        const { compiledQuery, onDone, streamChunkSize, tedious } = props;\n        this.#rows = [];\n        this.#streamChunkSize = streamChunkSize;\n        this.#subscribers = {};\n        this.#tedious = tedious;\n        if (onDone) {\n            const subscriptionKey = 'onDone';\n            this.#subscribers[subscriptionKey] = (event, error) => {\n                if (event === 'chunkReady') {\n                    return;\n                }\n                delete this.#subscribers[subscriptionKey];\n                if (event === 'error') {\n                    onDone.reject(error);\n                }\n                else {\n                    onDone.resolve({\n                        rowCount: this.#rowCount,\n                        rows: this.#rows,\n                    });\n                }\n            };\n        }\n        this.#request = new this.#tedious.Request(compiledQuery.sql, (err, rowCount) => {\n            if (err) {\n                Object.values(this.#subscribers).forEach((subscriber) => subscriber('error', err instanceof AggregateError ? err.errors : err));\n            }\n            else {\n                this.#rowCount = rowCount;\n            }\n        });\n        this.#addParametersToRequest(compiledQuery.parameters);\n        this.#attachListeners();\n    }\n    get request() {\n        return this.#request;\n    }\n    readChunk() {\n        const subscriptionKey = this.readChunk.name;\n        return new Promise((resolve, reject) => {\n            this.#subscribers[subscriptionKey] = (event, error) => {\n                delete this.#subscribers[subscriptionKey];\n                if (event === 'error') {\n                    reject(error);\n                }\n                else {\n                    resolve(this.#rows.splice(0, this.#streamChunkSize));\n                }\n            };\n            this.#request.resume();\n        });\n    }\n    #addParametersToRequest(parameters) {\n        for (let i = 0; i < parameters.length; i++) {\n            const parameter = parameters[i];\n            this.#request.addParameter(String(i + 1), this.#getTediousDataType(parameter), parameter);\n        }\n    }\n    #attachListeners() {\n        const pauseAndEmitChunkReady = this.#streamChunkSize\n            ? () => {\n                if (this.#streamChunkSize <= this.#rows.length) {\n                    this.#request.pause();\n                    Object.values(this.#subscribers).forEach((subscriber) => subscriber('chunkReady'));\n                }\n            }\n            : () => { };\n        const rowListener = (columns) => {\n            const row = {};\n            for (const column of columns) {\n                row[column.metadata.colName] = column.value;\n            }\n            this.#rows.push(row);\n            pauseAndEmitChunkReady();\n        };\n        this.#request.on('row', rowListener);\n        this.#request.once('requestCompleted', () => {\n            Object.values(this.#subscribers).forEach((subscriber) => subscriber('completed'));\n            this.#request.off('row', rowListener);\n        });\n    }\n    #getTediousDataType(value) {\n        if (isNull(value) || isUndefined(value) || isString(value)) {\n            return this.#tedious.TYPES.NVarChar;\n        }\n        if (isBigInt(value) || (isNumber(value) && value % 1 === 0)) {\n            if (value < -2147483648 || value > 2147483647) {\n                return this.#tedious.TYPES.BigInt;\n            }\n            else {\n                return this.#tedious.TYPES.Int;\n            }\n        }\n        if (isNumber(value)) {\n            return this.#tedious.TYPES.Float;\n        }\n        if (isBoolean(value)) {\n            return this.#tedious.TYPES.Bit;\n        }\n        if (isDate(value)) {\n            return this.#tedious.TYPES.DateTime;\n        }\n        if (isBuffer(value)) {\n            return this.#tedious.TYPES.VarBinary;\n        }\n        return this.#tedious.TYPES.NVarChar;\n    }\n}\n", "/// <reference types=\"./mssql-introspector.d.ts\" />\nimport { DEFAULT_MIGRATION_LOCK_TABLE, DEFAULT_MIGRATION_TABLE, } from '../../migration/migrator.js';\nimport { freeze } from '../../util/object-utils.js';\nexport class MssqlIntrospector {\n    #db;\n    constructor(db) {\n        this.#db = db;\n    }\n    async getSchemas() {\n        return await this.#db.selectFrom('sys.schemas').select('name').execute();\n    }\n    async getTables(options = { withInternalKyselyTables: false }) {\n        const rawColumns = await this.#db\n            .selectFrom('sys.tables as tables')\n            .leftJoin('sys.schemas as table_schemas', 'table_schemas.schema_id', 'tables.schema_id')\n            .innerJoin('sys.columns as columns', 'columns.object_id', 'tables.object_id')\n            .innerJoin('sys.types as types', 'types.user_type_id', 'columns.user_type_id')\n            .leftJoin('sys.schemas as type_schemas', 'type_schemas.schema_id', 'types.schema_id')\n            .leftJoin('sys.extended_properties as comments', (join) => join\n            .onRef('comments.major_id', '=', 'tables.object_id')\n            .onRef('comments.minor_id', '=', 'columns.column_id')\n            .on('comments.name', '=', 'MS_Description'))\n            .$if(!options.withInternalKyselyTables, (qb) => qb\n            .where('tables.name', '!=', DEFAULT_MIGRATION_TABLE)\n            .where('tables.name', '!=', DEFAULT_MIGRATION_LOCK_TABLE))\n            .select([\n            'tables.name as table_name',\n            (eb) => eb\n                .ref('tables.type')\n                .$castTo()\n                .as('table_type'),\n            'table_schemas.name as table_schema_name',\n            'columns.default_object_id as column_default_object_id',\n            'columns.generated_always_type_desc as column_generated_always_type',\n            'columns.is_computed as column_is_computed',\n            'columns.is_identity as column_is_identity',\n            'columns.is_nullable as column_is_nullable',\n            'columns.is_rowguidcol as column_is_rowguidcol',\n            'columns.name as column_name',\n            'types.is_nullable as type_is_nullable',\n            'types.name as type_name',\n            'type_schemas.name as type_schema_name',\n            'comments.value as column_comment',\n        ])\n            .unionAll(this.#db\n            .selectFrom('sys.views as views')\n            .leftJoin('sys.schemas as view_schemas', 'view_schemas.schema_id', 'views.schema_id')\n            .innerJoin('sys.columns as columns', 'columns.object_id', 'views.object_id')\n            .innerJoin('sys.types as types', 'types.user_type_id', 'columns.user_type_id')\n            .leftJoin('sys.schemas as type_schemas', 'type_schemas.schema_id', 'types.schema_id')\n            .leftJoin('sys.extended_properties as comments', (join) => join\n            .onRef('comments.major_id', '=', 'views.object_id')\n            .onRef('comments.minor_id', '=', 'columns.column_id')\n            .on('comments.name', '=', 'MS_Description'))\n            .select([\n            'views.name as table_name',\n            'views.type as table_type',\n            'view_schemas.name as table_schema_name',\n            'columns.default_object_id as column_default_object_id',\n            'columns.generated_always_type_desc as column_generated_always_type',\n            'columns.is_computed as column_is_computed',\n            'columns.is_identity as column_is_identity',\n            'columns.is_nullable as column_is_nullable',\n            'columns.is_rowguidcol as column_is_rowguidcol',\n            'columns.name as column_name',\n            'types.is_nullable as type_is_nullable',\n            'types.name as type_name',\n            'type_schemas.name as type_schema_name',\n            'comments.value as column_comment',\n        ]))\n            .orderBy('table_schema_name')\n            .orderBy('table_name')\n            .orderBy('column_name')\n            .execute();\n        const tableDictionary = {};\n        for (const rawColumn of rawColumns) {\n            const key = `${rawColumn.table_schema_name}.${rawColumn.table_name}`;\n            const table = (tableDictionary[key] =\n                tableDictionary[key] ||\n                    freeze({\n                        columns: [],\n                        isView: rawColumn.table_type === 'V ',\n                        name: rawColumn.table_name,\n                        schema: rawColumn.table_schema_name ?? undefined,\n                    }));\n            table.columns.push(freeze({\n                dataType: rawColumn.type_name,\n                dataTypeSchema: rawColumn.type_schema_name ?? undefined,\n                hasDefaultValue: rawColumn.column_default_object_id > 0 ||\n                    rawColumn.column_generated_always_type !== 'NOT_APPLICABLE' ||\n                    rawColumn.column_is_identity ||\n                    rawColumn.column_is_computed ||\n                    rawColumn.column_is_rowguidcol,\n                isAutoIncrementing: rawColumn.column_is_identity,\n                isNullable: rawColumn.column_is_nullable && rawColumn.type_is_nullable,\n                name: rawColumn.column_name,\n                comment: rawColumn.column_comment ?? undefined,\n            }));\n        }\n        return Object.values(tableDictionary);\n    }\n    async getMetadata(options) {\n        return {\n            tables: await this.getTables(options),\n        };\n    }\n}\n", "/// <reference types=\"./mssql-query-compiler.d.ts\" />\nimport { DefaultQueryCompiler } from '../../query-compiler/default-query-compiler.js';\nconst COLLATION_CHAR_REGEX = /^[a-z0-9_]$/i;\nexport class MssqlQueryCompiler extends DefaultQueryCompiler {\n    getCurrentParameterPlaceholder() {\n        return `@${this.numParameters}`;\n    }\n    visitOffset(node) {\n        super.visitOffset(node);\n        this.append(' rows');\n    }\n    // mssql allows multi-column alterations in a single statement,\n    // but you can only use the command keyword/s once.\n    // it also doesn't support multiple kinds of commands in the same\n    // alter table statement, but we compile that anyway for the sake\n    // of WYSIWYG.\n    compileColumnAlterations(columnAlterations) {\n        const nodesByKind = {};\n        for (const columnAlteration of columnAlterations) {\n            if (!nodesByKind[columnAlteration.kind]) {\n                nodesByKind[columnAlteration.kind] = [];\n            }\n            nodesByKind[columnAlteration.kind].push(columnAlteration);\n        }\n        let first = true;\n        if (nodesByKind.AddColumnNode) {\n            this.append('add ');\n            this.compileList(nodesByKind.AddColumnNode);\n            first = false;\n        }\n        // multiple of these are not really supported by mssql,\n        // but for the sake of WYSIWYG.\n        if (nodesByKind.AlterColumnNode) {\n            if (!first)\n                this.append(', ');\n            this.compileList(nodesByKind.AlterColumnNode);\n        }\n        if (nodesByKind.DropColumnNode) {\n            if (!first)\n                this.append(', ');\n            this.append('drop column ');\n            this.compileList(nodesByKind.DropColumnNode);\n        }\n        // not really supported by mssql, but for the sake of WYSIWYG.\n        if (nodesByKind.ModifyColumnNode) {\n            if (!first)\n                this.append(', ');\n            this.compileList(nodesByKind.ModifyColumnNode);\n        }\n        // not really supported by mssql, but for the sake of WYSIWYG.\n        if (nodesByKind.RenameColumnNode) {\n            if (!first)\n                this.append(', ');\n            this.compileList(nodesByKind.RenameColumnNode);\n        }\n    }\n    visitAddColumn(node) {\n        this.visitNode(node.column);\n    }\n    visitDropColumn(node) {\n        this.visitNode(node.column);\n    }\n    visitMergeQuery(node) {\n        super.visitMergeQuery(node);\n        this.append(';');\n    }\n    visitCollate(node) {\n        this.append('collate ');\n        const { name } = node.collation;\n        for (const char of name) {\n            if (!COLLATION_CHAR_REGEX.test(char)) {\n                throw new Error(`Invalid collation: ${name}`);\n            }\n        }\n        this.append(name);\n    }\n    announcesNewColumnDataType() {\n        return false;\n    }\n}\n", "/// <reference types=\"./mssql-dialect.d.ts\" />\nimport { MssqlAdapter } from './mssql-adapter.js';\nimport { MssqlDriver } from './mssql-driver.js';\nimport { MssqlIntrospector } from './mssql-introspector.js';\nimport { MssqlQueryCompiler } from './mssql-query-compiler.js';\n/**\n * MS SQL Server dialect that uses the [tedious](https://tediousjs.github.io/tedious)\n * library.\n *\n * The constructor takes an instance of {@link MssqlDialectConfig}.\n *\n * ```ts\n * import * as Tedious from 'tedious'\n * import * as Tarn from 'tarn'\n *\n * const dialect = new MssqlDialect({\n *   tarn: {\n *     ...Tarn,\n *     options: {\n *       min: 0,\n *       max: 10,\n *     },\n *   },\n *   tedious: {\n *     ...Tedious,\n *     connectionFactory: () => new Tedious.Connection({\n *       authentication: {\n *         options: {\n *           password: 'password',\n *           userName: 'username',\n *         },\n *         type: 'default',\n *       },\n *       options: {\n *         database: 'some_db',\n *         port: 1433,\n *         trustServerCertificate: true,\n *       },\n *       server: 'localhost',\n *     }),\n *   },\n * })\n * ```\n */\nexport class MssqlDialect {\n    #config;\n    constructor(config) {\n        this.#config = config;\n    }\n    createDriver() {\n        return new MssqlDriver(this.#config);\n    }\n    createQueryCompiler() {\n        return new MssqlQueryCompiler();\n    }\n    createAdapter() {\n        return new MssqlAdapter();\n    }\n    createIntrospector(db) {\n        return new MssqlIntrospector(db);\n    }\n}\n", "/// <reference types=\"./file-migration-provider.d.ts\" />\nimport { isFunction, isObject } from '../util/object-utils.js';\n/**\n * Reads all migrations from a folder in node.js.\n *\n * ### Examples\n *\n * ```ts\n * import { promises as fs } from 'node:fs'\n * import path from 'node:path'\n *\n * new FileMigrationProvider({\n *   fs,\n *   path,\n *   migrationFolder: 'path/to/migrations/folder'\n * })\n * ```\n */\nexport class FileMigrationProvider {\n    #props;\n    constructor(props) {\n        this.#props = props;\n    }\n    async getMigrations() {\n        const migrations = {};\n        const files = await this.#props.fs.readdir(this.#props.migrationFolder);\n        for (const fileName of files) {\n            if (fileName.endsWith('.js') ||\n                (fileName.endsWith('.ts') && !fileName.endsWith('.d.ts')) ||\n                fileName.endsWith('.mjs') ||\n                (fileName.endsWith('.mts') && !fileName.endsWith('.d.mts'))) {\n                const migration = await import(\n                /* webpackIgnore: true */ this.#props.path.join(this.#props.migrationFolder, fileName));\n                const migrationKey = fileName.substring(0, fileName.lastIndexOf('.'));\n                // Handle esModuleInterop export's `default` prop...\n                if (isMigration(migration?.default)) {\n                    migrations[migrationKey] = migration.default;\n                }\n                else if (isMigration(migration)) {\n                    migrations[migrationKey] = migration;\n                }\n            }\n        }\n        return migrations;\n    }\n}\nfunction isMigration(obj) {\n    return isObject(obj) && isFunction(obj.up);\n}\n", "/// <reference types=\"./camel-case-transformer.d.ts\" />\nimport { OperationNodeTransformer } from '../../operation-node/operation-node-transformer.js';\nexport class SnakeCaseTransformer extends OperationNodeTransformer {\n    #snakeCase;\n    constructor(snakeCase) {\n        super();\n        this.#snakeCase = snakeCase;\n    }\n    transformIdentifier(node, queryId) {\n        node = super.transformIdentifier(node, queryId);\n        return {\n            ...node,\n            name: this.#snakeCase(node.name),\n        };\n    }\n}\n", "/// <reference types=\"./camel-case.d.ts\" />\n/**\n * Creates a function that transforms camel case strings to snake case.\n */\nexport function createSnakeCaseMapper({ upperCase = false, underscoreBeforeDigits = false, underscoreBetweenUppercaseLetters = false, } = {}) {\n    return memoize((str) => {\n        if (str.length === 0) {\n            return str;\n        }\n        const upper = str.toUpperCase();\n        const lower = str.toLowerCase();\n        let out = lower[0];\n        for (let i = 1, l = str.length; i < l; ++i) {\n            const char = str[i];\n            const prevChar = str[i - 1];\n            const upperChar = upper[i];\n            const prevUpperChar = upper[i - 1];\n            const lowerChar = lower[i];\n            const prevLowerChar = lower[i - 1];\n            // If underScoreBeforeDigits is true then, well, insert an underscore\n            // before digits :). Only the first digit gets an underscore if\n            // there are multiple.\n            if (underscoreBeforeDigits &&\n                isDigit(char) &&\n                !isDigit(prevChar) &&\n                !out.endsWith('_')) {\n                out += '_' + char;\n                continue;\n            }\n            // Test if `char` is an upper-case character and that the character\n            // actually has different upper and lower case versions.\n            if (char === upperChar && upperChar !== lowerChar) {\n                const prevCharacterIsUppercase = prevChar === prevUpperChar && prevUpperChar !== prevLowerChar;\n                // If underscoreBetweenUppercaseLetters is true, we always place an underscore\n                // before consecutive uppercase letters (e.g. \"fooBAR\" becomes \"foo_b_a_r\").\n                // Otherwise, we don't (e.g. \"fooBAR\" becomes \"foo_bar\").\n                if (underscoreBetweenUppercaseLetters || !prevCharacterIsUppercase) {\n                    out += '_' + lowerChar;\n                }\n                else {\n                    out += lowerChar;\n                }\n            }\n            else {\n                out += char;\n            }\n        }\n        if (upperCase) {\n            return out.toUpperCase();\n        }\n        else {\n            return out;\n        }\n    });\n}\n/**\n * Creates a function that transforms snake case strings to camel case.\n */\nexport function createCamelCaseMapper({ upperCase = false, } = {}) {\n    return memoize((str) => {\n        if (str.length === 0) {\n            return str;\n        }\n        if (upperCase && isAllUpperCaseSnakeCase(str)) {\n            // Only convert to lower case if the string is all upper\n            // case snake_case. This allows camelCase strings to go\n            // through without changing.\n            str = str.toLowerCase();\n        }\n        let out = str[0];\n        for (let i = 1, l = str.length; i < l; ++i) {\n            const char = str[i];\n            const prevChar = str[i - 1];\n            if (char !== '_') {\n                if (prevChar === '_') {\n                    out += char.toUpperCase();\n                }\n                else {\n                    out += char;\n                }\n            }\n        }\n        return out;\n    });\n}\nfunction isAllUpperCaseSnakeCase(str) {\n    for (let i = 1, l = str.length; i < l; ++i) {\n        const char = str[i];\n        if (char !== '_' && char !== char.toUpperCase()) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction isDigit(char) {\n    return char >= '0' && char <= '9';\n}\nfunction memoize(func) {\n    const cache = new Map();\n    return (str) => {\n        let mapped = cache.get(str);\n        if (!mapped) {\n            mapped = func(str);\n            cache.set(str, mapped);\n        }\n        return mapped;\n    };\n}\n", "/// <reference types=\"./camel-case-plugin.d.ts\" />\nimport { isPlainObject } from '../../util/object-utils.js';\nimport { SnakeCaseTransformer } from './camel-case-transformer.js';\nimport { createCamelCaseMapper, createSnakeCaseMapper, } from './camel-case.js';\n/**\n * A plugin that converts snake_case identifiers in the database into\n * camelCase in the JavaScript side.\n *\n * For example let's assume we have a table called `person_table`\n * with columns `first_name` and `last_name` in the database. When\n * using `CamelCasePlugin` we would setup Kysely like this:\n *\n * ```ts\n * import * as Sqlite from 'better-sqlite3'\n * import { CamelCasePlugin, Kysely, SqliteDialect } from 'kysely'\n *\n * interface CamelCasedDatabase {\n *   userMetadata: {\n *     firstName: string\n *     lastName: string\n *   }\n * }\n *\n * const db = new Kysely<CamelCasedDatabase>({\n *   dialect: new SqliteDialect({\n *     database: new Sqlite(':memory:'),\n *   }),\n *   plugins: [new CamelCasePlugin()],\n * })\n *\n * const person = await db.selectFrom('userMetadata')\n *   .where('firstName', '=', 'Arnold')\n *   .select(['firstName', 'lastName'])\n *   .executeTakeFirst()\n *\n * if (person) {\n *   console.log(person.firstName)\n * }\n * ```\n *\n * The generated SQL (SQLite):\n *\n * ```sql\n * select \"first_name\", \"last_name\" from \"user_metadata\" where \"first_name\" = ?\n * ```\n *\n * As you can see from the example, __everything__ needs to be defined\n * in camelCase in the TypeScript code: table names, columns, schemas,\n * __everything__. When using the `CamelCasePlugin` Kysely works as if\n * the database was defined in camelCase.\n *\n * There are various options you can give to the plugin to modify\n * the way identifiers are converted. See {@link CamelCasePluginOptions}.\n * If those options are not enough, you can override this plugin's\n * `snakeCase` and `camelCase` methods to make the conversion exactly\n * the way you like:\n *\n * ```ts\n * class MyCamelCasePlugin extends CamelCasePlugin {\n *   protected override snakeCase(str: string): string {\n *     // ...\n *\n *     return str\n *   }\n *\n *   protected override camelCase(str: string): string {\n *     // ...\n *\n *     return str\n *   }\n * }\n * ```\n */\nexport class CamelCasePlugin {\n    opt;\n    #camelCase;\n    #snakeCase;\n    #snakeCaseTransformer;\n    constructor(opt = {}) {\n        this.opt = opt;\n        this.#camelCase = createCamelCaseMapper(opt);\n        this.#snakeCase = createSnakeCaseMapper(opt);\n        this.#snakeCaseTransformer = new SnakeCaseTransformer(this.snakeCase.bind(this));\n    }\n    transformQuery(args) {\n        return this.#snakeCaseTransformer.transformNode(args.node, args.queryId);\n    }\n    async transformResult(args) {\n        if (args.result.rows && Array.isArray(args.result.rows)) {\n            return {\n                ...args.result,\n                rows: args.result.rows.map((row) => this.mapRow(row)),\n            };\n        }\n        return args.result;\n    }\n    mapRow(row) {\n        return Object.keys(row).reduce((obj, key) => {\n            let value = row[key];\n            if (Array.isArray(value)) {\n                value = value.map((it) => (canMap(it, this.opt) ? this.mapRow(it) : it));\n            }\n            else if (canMap(value, this.opt)) {\n                value = this.mapRow(value);\n            }\n            obj[this.camelCase(key)] = value;\n            return obj;\n        }, {});\n    }\n    snakeCase(str) {\n        return this.#snakeCase(str);\n    }\n    camelCase(str) {\n        return this.#camelCase(str);\n    }\n}\nfunction canMap(obj, opt) {\n    return isPlainObject(obj) && !opt?.maintainNestedObjectKeys;\n}\n", "/// <reference types=\"./deduplicate-joins-transformer.d.ts\" />\nimport { OperationNodeTransformer } from '../../operation-node/operation-node-transformer.js';\nimport { compare, freeze } from '../../util/object-utils.js';\nexport class DeduplicateJoinsTransformer extends OperationNodeTransformer {\n    transformSelectQuery(node, queryId) {\n        return this.#transformQuery(super.transformSelectQuery(node, queryId));\n    }\n    transformUpdateQuery(node, queryId) {\n        return this.#transformQuery(super.transformUpdateQuery(node, queryId));\n    }\n    transformDeleteQuery(node, queryId) {\n        return this.#transformQuery(super.transformDeleteQuery(node, queryId));\n    }\n    #transformQuery(node) {\n        if (!node.joins || node.joins.length === 0) {\n            return node;\n        }\n        return freeze({\n            ...node,\n            joins: this.#deduplicateJoins(node.joins),\n        });\n    }\n    #deduplicateJoins(joins) {\n        const out = [];\n        for (let i = 0; i < joins.length; ++i) {\n            let foundDuplicate = false;\n            for (let j = 0; j < out.length; ++j) {\n                if (compare(joins[i], out[j])) {\n                    foundDuplicate = true;\n                    break;\n                }\n            }\n            if (!foundDuplicate) {\n                out.push(joins[i]);\n            }\n        }\n        return freeze(out);\n    }\n}\n", "/// <reference types=\"./deduplicate-joins-plugin.d.ts\" />\nimport { DeduplicateJoinsTransformer } from './deduplicate-joins-transformer.js';\n/**\n * Plugin that removes duplicate joins from queries.\n *\n * See [this recipe](https://github.com/kysely-org/kysely/blob/master/site/docs/recipes/0008-deduplicate-joins.md)\n */\nexport class DeduplicateJoinsPlugin {\n    #transformer = new DeduplicateJoinsTransformer();\n    transformQuery(args) {\n        return this.#transformer.transformNode(args.node, args.queryId);\n    }\n    transformResult(args) {\n        return Promise.resolve(args.result);\n    }\n}\n", "/// <reference types=\"./parse-json-results-plugin.d.ts\" />\nimport { isPlainObject, isString } from '../../util/object-utils.js';\n/**\n * Parses JSON strings in query results into JSON objects.\n *\n * This plugin can be useful with dialects that don't automatically parse\n * JSON into objects and arrays but return JSON strings instead.\n *\n * To apply this plugin globally, pass an instance of it to the `plugins` option\n * when creating a new `Kysely` instance:\n *\n * ```ts\n * import * as Sqlite from 'better-sqlite3'\n * import { Kysely, ParseJSONResultsPlugin, SqliteDialect } from 'kysely'\n * import type { Database } from 'type-editor' // imaginary module\n *\n * const db = new Kysely<Database>({\n *   dialect: new SqliteDialect({\n *     database: new Sqlite(':memory:'),\n *   }),\n *   plugins: [new ParseJSONResultsPlugin()],\n * })\n * ```\n *\n * To apply this plugin to a single query:\n *\n * ```ts\n * import { ParseJSONResultsPlugin } from 'kysely'\n * import { jsonArrayFrom } from 'kysely/helpers/sqlite'\n *\n * const result = await db\n *   .selectFrom('person')\n *   .select((eb) => [\n *     'id',\n *     'first_name',\n *     'last_name',\n *     jsonArrayFrom(\n *       eb.selectFrom('pet')\n *         .whereRef('owner_id', '=', 'person.id')\n *         .select(['name', 'species'])\n *     ).as('pets')\n *   ])\n *   .withPlugin(new ParseJSONResultsPlugin())\n *   .execute()\n * ```\n */\nexport class ParseJSONResultsPlugin {\n    opt;\n    #objectStrategy;\n    constructor(opt = {}) {\n        this.opt = opt;\n        this.#objectStrategy = opt.objectStrategy || 'in-place';\n    }\n    // noop\n    transformQuery(args) {\n        return args.node;\n    }\n    async transformResult(args) {\n        return {\n            ...args.result,\n            rows: parseArray(args.result.rows, this.#objectStrategy),\n        };\n    }\n}\nfunction parseArray(arr, objectStrategy) {\n    const target = objectStrategy === 'create' ? new Array(arr.length) : arr;\n    for (let i = 0; i < arr.length; ++i) {\n        target[i] = parse(arr[i], objectStrategy);\n    }\n    return target;\n}\nfunction parse(obj, objectStrategy) {\n    if (isString(obj)) {\n        return parseString(obj);\n    }\n    if (Array.isArray(obj)) {\n        return parseArray(obj, objectStrategy);\n    }\n    if (isPlainObject(obj)) {\n        return parseObject(obj, objectStrategy);\n    }\n    return obj;\n}\nfunction parseString(str) {\n    if (maybeJson(str)) {\n        try {\n            return parse(JSON.parse(str), 'in-place');\n        }\n        catch (err) {\n            // this catch block is intentionally empty.\n        }\n    }\n    return str;\n}\nfunction maybeJson(value) {\n    return value.match(/^[\\[\\{]/) != null;\n}\nfunction parseObject(obj, objectStrategy) {\n    const target = objectStrategy === 'create' ? {} : obj;\n    for (const key in obj) {\n        target[key] = parse(obj[key], objectStrategy);\n    }\n    return target;\n}\n", "/// <reference types=\"./handle-empty-in-lists-transformer.d.ts\" />\nimport { OperationNodeTransformer } from '../../operation-node/operation-node-transformer.js';\nimport { PrimitiveValueListNode } from '../../operation-node/primitive-value-list-node.js';\nimport { OperatorNode } from '../../operation-node/operator-node.js';\nimport { ValueListNode } from '../../operation-node/value-list-node.js';\nexport class HandleEmptyInListsTransformer extends OperationNodeTransformer {\n    #strategy;\n    constructor(strategy) {\n        super();\n        this.#strategy = strategy;\n    }\n    transformBinaryOperation(node) {\n        if (this.#isEmptyInListNode(node)) {\n            return this.#strategy(node);\n        }\n        return node;\n    }\n    #isEmptyInListNode(node) {\n        const { operator, rightOperand } = node;\n        return ((PrimitiveValueListNode.is(rightOperand) ||\n            ValueListNode.is(rightOperand)) &&\n            rightOperand.values.length === 0 &&\n            OperatorNode.is(operator) &&\n            (operator.operator === 'in' || operator.operator === 'not in'));\n    }\n}\n", "/// <reference types=\"./handle-empty-in-lists-plugin.d.ts\" />\nimport { HandleEmptyInListsTransformer } from './handle-empty-in-lists-transformer.js';\n/**\n * A plugin that allows handling `in ()` and `not in ()` expressions.\n *\n * These expressions are invalid SQL syntax for many databases, and result in runtime\n * database errors.\n *\n * The workarounds used by other libraries always involve modifying the query under\n * the hood, which is not aligned with Kysely's philosophy of WYSIWYG. We recommend manually checking\n * for empty arrays before passing them as arguments to `in` and `not in` expressions\n * instead, but understand that this can be cumbersome. Hence we're going with an\n * opt-in approach where you can choose if and how to handle these cases. We do\n * not want to make this the default behavior, as it can lead to unexpected behavior.\n * Use it at your own risk. Test it. Make sure it works as expected for you.\n *\n * Using this plugin also allows you to throw an error (thus avoiding unnecessary\n * requests to the database) or print a warning in these cases.\n *\n * ### Examples\n *\n * The following strategy replaces the `in`/`not in` expression with a noncontingent\n * expression. A contradiction (falsy) `1 = 0` for `in`, and a tautology (truthy) `1 = 1` for `not in`),\n * similarily to how {@link https://github.com/knex/knex/blob/176151d8048b2a7feeb89a3d649a5580786d4f4e/docs/src/guide/query-builder.md#L1763 | Knex.js},\n * {@link https://github.com/prisma/prisma-engines/blob/99168c54187178484dae45d9478aa40cfd1866d2/quaint/src/visitor.rs#L804-L823 | PrismaORM},\n * {@link https://github.com/laravel/framework/blob/8.x/src/Illuminate/Database/Query/Grammars/Grammar.php#L284-L291 | Laravel},\n * {@link https://docs.sqlalchemy.org/en/13/core/engines.html#sqlalchemy.create_engine.params.empty_in_strategy | SQLAlchemy}\n * handle this.\n *\n * ```ts\n * import Sqlite from 'better-sqlite3'\n * import {\n *   HandleEmptyInListsPlugin,\n *   Kysely,\n *   replaceWithNoncontingentExpression,\n *   SqliteDialect,\n * } from 'kysely'\n * import type { Database } from 'type-editor' // imaginary module\n *\n * const db = new Kysely<Database>({\n *   dialect: new SqliteDialect({\n *     database: new Sqlite(':memory:'),\n *   }),\n *   plugins: [\n *     new HandleEmptyInListsPlugin({\n *       strategy: replaceWithNoncontingentExpression\n *     })\n *   ],\n * })\n *\n * const results = await db\n *   .selectFrom('person')\n *   .where('id', 'in', [])\n *   .where('first_name', 'not in', [])\n *   .selectAll()\n *   .execute()\n * ```\n *\n * The generated SQL (SQLite):\n *\n * ```sql\n * select * from \"person\" where 1 = 0 and 1 = 1\n * ```\n *\n * The following strategy does the following:\n *\n * When `in`, pushes a `null` value into the empty list resulting in `in (null)`,\n * similiarly to how {@link https://github.com/typeorm/typeorm/blob/0280cdc451c35ef73c830eb1191c95d34f6ce06e/src/query-builder/QueryBuilder.ts#L919-L922 | TypeORM}\n * and {@link https://github.com/sequelize/sequelize/blob/0f2891c6897e12bf9bf56df344aae5b698f58c7d/packages/core/src/abstract-dialect/where-sql-builder.ts#L368-L379 | Sequelize}\n * handle `in ()`. `in (null)` is logically the equivalent of `= null`, which returns\n * `null`, which is a falsy expression in most SQL databases. We recommend NOT\n * using this strategy if you plan to use `in` in `select`, `returning`, or `output`\n * clauses, as the return type differs from the `SqlBool` default type for comparisons.\n *\n * When `not in`, casts the left operand as `char` and pushes a unique value into\n * the empty list resulting in `cast({{lhs}} as char) not in ({{VALUE}})`. Casting\n * is required to avoid database errors with non-string values.\n *\n * ```ts\n * import Sqlite from 'better-sqlite3'\n * import {\n *   HandleEmptyInListsPlugin,\n *   Kysely,\n *   pushValueIntoList,\n *   SqliteDialect\n * } from 'kysely'\n * import type { Database } from 'type-editor' // imaginary module\n *\n * const db = new Kysely<Database>({\n *   dialect: new SqliteDialect({\n *     database: new Sqlite(':memory:'),\n *   }),\n *   plugins: [\n *     new HandleEmptyInListsPlugin({\n *       strategy: pushValueIntoList('__kysely_no_values_were_provided__') // choose a unique value for not in. has to be something with zero chance being in the data.\n *     })\n *   ],\n * })\n *\n * const results = await db\n *   .selectFrom('person')\n *   .where('id', 'in', [])\n *   .where('first_name', 'not in', [])\n *   .selectAll()\n *   .execute()\n * ```\n *\n * The generated SQL (SQLite):\n *\n * ```sql\n * select * from \"person\" where \"id\" in (null) and cast(\"first_name\" as char) not in ('__kysely_no_values_were_provided__')\n * ```\n *\n * The following custom strategy throws an error when an empty list is encountered\n * to avoid unnecessary requests to the database:\n *\n * ```ts\n * import Sqlite from 'better-sqlite3'\n * import {\n *   HandleEmptyInListsPlugin,\n *   Kysely,\n *   SqliteDialect\n * } from 'kysely'\n * import type { Database } from 'type-editor' // imaginary module\n *\n * const db = new Kysely<Database>({\n *   dialect: new SqliteDialect({\n *     database: new Sqlite(':memory:'),\n *   }),\n *   plugins: [\n *     new HandleEmptyInListsPlugin({\n *       strategy: () => {\n *         throw new Error('Empty in/not-in is not allowed')\n *       }\n *     })\n *   ],\n * })\n *\n * const results = await db\n *   .selectFrom('person')\n *   .where('id', 'in', [])\n *   .selectAll()\n *   .execute() // throws an error with 'Empty in/not-in is not allowed' message!\n * ```\n */\nexport class HandleEmptyInListsPlugin {\n    opt;\n    #transformer;\n    constructor(opt) {\n        this.opt = opt;\n        this.#transformer = new HandleEmptyInListsTransformer(opt.strategy);\n    }\n    transformQuery(args) {\n        return this.#transformer.transformNode(args.node, args.queryId);\n    }\n    async transformResult(args) {\n        return args.result;\n    }\n}\n", "/// <reference types=\"./handle-empty-in-lists.d.ts\" />\nimport { BinaryOperationNode } from '../../operation-node/binary-operation-node.js';\nimport { CastNode } from '../../operation-node/cast-node.js';\nimport { DataTypeNode } from '../../operation-node/data-type-node.js';\nimport { OperatorNode } from '../../operation-node/operator-node.js';\nimport { ValueListNode } from '../../operation-node/value-list-node.js';\nimport { ValueNode } from '../../operation-node/value-node.js';\nimport { freeze } from '../../util/object-utils.js';\nlet contradiction;\nlet eq;\nlet one;\nlet tautology;\n/**\n * Replaces the `in`/`not in` expression with a noncontingent expression (always true or always\n * false) depending on the original operator.\n *\n * This is how Knex.js, PrismaORM, Laravel, and SQLAlchemy handle `in ()` and `not in ()`.\n *\n * See {@link pushValueIntoList} for an alternative strategy.\n */\nexport function replaceWithNoncontingentExpression(node) {\n    const _one = (one ||= ValueNode.createImmediate(1));\n    const _eq = (eq ||= OperatorNode.create('='));\n    if (node.operator.operator === 'in') {\n        return (contradiction ||= BinaryOperationNode.create(_one, _eq, ValueNode.createImmediate(0)));\n    }\n    return (tautology ||= BinaryOperationNode.create(_one, _eq, _one));\n}\nlet char;\nlet listNull;\nlet listVal;\n/**\n * When `in`, pushes a `null` value into the list resulting in `in (null)`. This\n * is how TypeORM and Sequelize handle `in ()`. `in (null)` is logically the equivalent\n * of `= null`, which returns `null`, which is a falsy expression in most SQL databases.\n * We recommend NOT using this strategy if you plan to use `in` in `select`, `returning`,\n * or `output` clauses, as the return type differs from the `SqlBool` default type.\n *\n * When `not in`, casts the left operand as `char` and pushes a literal value into\n * the list resulting in `cast({{lhs}} as char) not in ({{VALUE}})`. Casting\n * is required to avoid database errors with non-string columns.\n *\n * See {@link replaceWithNoncontingentExpression} for an alternative strategy.\n */\nexport function pushValueIntoList(uniqueNotInLiteral) {\n    return function pushValueIntoList(node) {\n        if (node.operator.operator === 'in') {\n            return freeze({\n                ...node,\n                rightOperand: (listNull ||= ValueListNode.create([\n                    ValueNode.createImmediate(null),\n                ])),\n            });\n        }\n        return freeze({\n            ...node,\n            leftOperand: CastNode.create(node.leftOperand, (char ||= DataTypeNode.create('char'))),\n            rightOperand: (listVal ||= ValueListNode.create([\n                ValueNode.createImmediate(uniqueNotInLiteral),\n            ])),\n        });\n    };\n}\n"],
  "mappings": "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",
  "names": ["sql", "_props", "_props", "_props", "_props", "_props", "_props", "join_fn", "_props", "_queryId", "_props", "_props", "_node", "_props", "join_fn", "_alias", "_props", "_alias", "_props", "_node", "_alias", "_table", "_alias", "trim", "_node", "_node", "_props", "_props", "_props", "_props", "_node", "_node", "_node", "_props", "_props", "_props", "_props", "_props", "_props", "_props", "_transformer", "_props", "_props", "_props", "_props", "trim", "_props", "_driver", "_props", "_executor", "_state", "_props", "_alias", "sql", "sql", "_connection", "_db", "sql", "_promise", "_resolve", "_props", "_db", "sql", "_a", "_db", "_config", "ID_WRAP_REGEX", "_db", "_db", "_config", "_connections", "sql", "ID_WRAP_REGEX", "_db", "parseTableMetadata_fn", "LOCK_ID", "_config", "PRIVATE_RELEASE_METHOD", "_config", "_connections", "_pool", "sql", "_config", "_config", "_pool", "_connection", "_tedious", "_db", "char", "_config", "_props", "char", "_snakeCase", "_transformer", "_transformer", "pushValueIntoList"]
}
