{
  "version": 3,
  "sources": ["../../../../../../node_modules/.pnpm/@sqlite.org+sqlite-wasm@3.49.1-build2/node_modules/@sqlite.org/sqlite-wasm/sqlite-wasm/jswasm/sqlite3-bundler-friendly.mjs", "../../../../../../node_modules/.pnpm/@sqlite.org+sqlite-wasm@3.49.1-build2/node_modules/@sqlite.org/sqlite-wasm/sqlite-wasm/jswasm/sqlite3-worker1-promiser.mjs", "../../../../../../node_modules/.pnpm/@sqlite.org+sqlite-wasm@3.49.1-build2/node_modules/@sqlite.org/sqlite-wasm/index.mjs"],
  "sourcesContent": ["/*\n ** LICENSE for the sqlite3 WebAssembly/JavaScript APIs.\n **\n ** This bundle (typically released as sqlite3.js or sqlite3.mjs)\n ** is an amalgamation of JavaScript source code from two projects:\n **\n ** 1) https://emscripten.org: the Emscripten \"glue code\" is covered by\n **    the terms of the MIT license and University of Illinois/NCSA\n **    Open Source License, as described at:\n **\n **    https://emscripten.org/docs/introducing_emscripten/emscripten_license.html\n **\n ** 2) https://sqlite.org: all code and documentation labeled as being\n **    from this source are released under the same terms as the sqlite3\n **    C library:\n **\n ** 2022-10-16\n **\n ** The author disclaims copyright to this source code.  In place of a\n ** legal notice, here is a blessing:\n **\n ** *   May you do good and not evil.\n ** *   May you find forgiveness for yourself and forgive others.\n ** *   May you share freely, never taking more than you give.\n */\n/*\n ** This code was built from sqlite3 version...\n **\n ** SQLITE_VERSION \"3.49.1\"\n ** SQLITE_VERSION_NUMBER 3049001\n ** SQLITE_SOURCE_ID \"2025-02-18 13:38:58 873d4e274b4988d260ba8354a9718324a1c26187a4ab4c1cc0227c03d0f10e70\"\n **\n ** Using the Emscripten SDK version 3.1.70.\n */\n\nvar sqlite3InitModule = (() => {\n  var _scriptName = import.meta.url;\n\n  return function (moduleArg = {}) {\n    var moduleRtn;\n\n    var Module = moduleArg;\n\n    var readyPromiseResolve, readyPromiseReject;\n    var readyPromise = new Promise((resolve, reject) => {\n      readyPromiseResolve = resolve;\n      readyPromiseReject = reject;\n    });\n\n    var ENVIRONMENT_IS_WEB = typeof window == 'object';\n    var ENVIRONMENT_IS_WORKER = typeof importScripts == 'function';\n\n    var ENVIRONMENT_IS_NODE =\n      typeof process == 'object' &&\n      typeof process.versions == 'object' &&\n      typeof process.versions.node == 'string' &&\n      process.type != 'renderer';\n    var ENVIRONMENT_IS_SHELL =\n      !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;\n\n    const sqlite3InitModuleState =\n      globalThis.sqlite3InitModuleState ||\n      Object.assign(Object.create(null), {\n        debugModule: () => {},\n      });\n    delete globalThis.sqlite3InitModuleState;\n    sqlite3InitModuleState.debugModule(\n      'globalThis.location =',\n      globalThis.location,\n    );\n\n    var moduleOverrides = Object.assign({}, Module);\n\n    var arguments_ = [];\n    var thisProgram = './this.program';\n    var quit_ = (status, toThrow) => {\n      throw toThrow;\n    };\n\n    var scriptDirectory = '';\n    function locateFile(path) {\n      if (Module['locateFile']) {\n        return Module['locateFile'](path, scriptDirectory);\n      }\n      return scriptDirectory + path;\n    }\n\n    var readAsync, readBinary;\n\n    if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {\n      if (ENVIRONMENT_IS_WORKER) {\n        scriptDirectory = self.location.href;\n      } else if (typeof document != 'undefined' && document.currentScript) {\n        scriptDirectory = document.currentScript.src;\n      }\n\n      if (_scriptName) {\n        scriptDirectory = _scriptName;\n      }\n\n      if (scriptDirectory.startsWith('blob:')) {\n        scriptDirectory = '';\n      } else {\n        scriptDirectory = scriptDirectory.substr(\n          0,\n          scriptDirectory.replace(/[?#].*/, '').lastIndexOf('/') + 1,\n        );\n      }\n\n      {\n        if (ENVIRONMENT_IS_WORKER) {\n          readBinary = (url) => {\n            var xhr = new XMLHttpRequest();\n            xhr.open('GET', url, false);\n            xhr.responseType = 'arraybuffer';\n            xhr.send(null);\n            return new Uint8Array(xhr.response);\n          };\n        }\n\n        readAsync = (url) => {\n          return fetch(url, { credentials: 'same-origin' }).then((response) => {\n            if (response.ok) {\n              return response.arrayBuffer();\n            }\n            return Promise.reject(\n              new Error(response.status + ' : ' + response.url),\n            );\n          });\n        };\n      }\n    } else {\n    }\n\n    var out = Module['print'] || console.log.bind(console);\n    var err = Module['printErr'] || console.error.bind(console);\n\n    Object.assign(Module, moduleOverrides);\n\n    moduleOverrides = null;\n\n    if (Module['arguments']) arguments_ = Module['arguments'];\n\n    if (Module['thisProgram']) thisProgram = Module['thisProgram'];\n\n    var wasmBinary = Module['wasmBinary'];\n\n    var wasmMemory;\n\n    var ABORT = false;\n\n    var EXITSTATUS;\n\n    function assert(condition, text) {\n      if (!condition) {\n        abort(text);\n      }\n    }\n\n    var HEAP,\n      HEAP8,\n      HEAPU8,\n      HEAP16,\n      HEAPU16,\n      HEAP32,\n      HEAPU32,\n      HEAPF32,\n      HEAP64,\n      HEAPU64,\n      HEAPF64;\n\n    function updateMemoryViews() {\n      var b = wasmMemory.buffer;\n      Module['HEAP8'] = HEAP8 = new Int8Array(b);\n      Module['HEAP16'] = HEAP16 = new Int16Array(b);\n      Module['HEAPU8'] = HEAPU8 = new Uint8Array(b);\n      Module['HEAPU16'] = HEAPU16 = new Uint16Array(b);\n      Module['HEAP32'] = HEAP32 = new Int32Array(b);\n      Module['HEAPU32'] = HEAPU32 = new Uint32Array(b);\n      Module['HEAPF32'] = HEAPF32 = new Float32Array(b);\n      Module['HEAPF64'] = HEAPF64 = new Float64Array(b);\n      Module['HEAP64'] = HEAP64 = new BigInt64Array(b);\n      Module['HEAPU64'] = HEAPU64 = new BigUint64Array(b);\n    }\n\n    if (Module['wasmMemory']) {\n      wasmMemory = Module['wasmMemory'];\n    } else {\n      var INITIAL_MEMORY = Module['INITIAL_MEMORY'] || 16777216;\n\n      wasmMemory = new WebAssembly.Memory({\n        initial: INITIAL_MEMORY / 65536,\n\n        maximum: 32768,\n      });\n    }\n\n    updateMemoryViews();\n\n    var __ATPRERUN__ = [];\n    var __ATINIT__ = [];\n    var __ATEXIT__ = [];\n    var __ATPOSTRUN__ = [];\n\n    var runtimeInitialized = false;\n\n    function preRun() {\n      var preRuns = Module['preRun'];\n      if (preRuns) {\n        if (typeof preRuns == 'function') preRuns = [preRuns];\n        preRuns.forEach(addOnPreRun);\n      }\n      callRuntimeCallbacks(__ATPRERUN__);\n    }\n\n    function initRuntime() {\n      runtimeInitialized = true;\n\n      if (!Module['noFSInit'] && !FS.initialized) FS.init();\n      FS.ignorePermissions = false;\n\n      TTY.init();\n      callRuntimeCallbacks(__ATINIT__);\n    }\n\n    function postRun() {\n      var postRuns = Module['postRun'];\n      if (postRuns) {\n        if (typeof postRuns == 'function') postRuns = [postRuns];\n        postRuns.forEach(addOnPostRun);\n      }\n\n      callRuntimeCallbacks(__ATPOSTRUN__);\n    }\n\n    function addOnPreRun(cb) {\n      __ATPRERUN__.unshift(cb);\n    }\n\n    function addOnInit(cb) {\n      __ATINIT__.unshift(cb);\n    }\n\n    function addOnExit(cb) {}\n\n    function addOnPostRun(cb) {\n      __ATPOSTRUN__.unshift(cb);\n    }\n\n    var runDependencies = 0;\n    var runDependencyWatcher = null;\n    var dependenciesFulfilled = null;\n\n    function getUniqueRunDependency(id) {\n      return id;\n    }\n\n    function addRunDependency(id) {\n      runDependencies++;\n\n      Module['monitorRunDependencies']?.(runDependencies);\n    }\n\n    function removeRunDependency(id) {\n      runDependencies--;\n\n      Module['monitorRunDependencies']?.(runDependencies);\n\n      if (runDependencies == 0) {\n        if (runDependencyWatcher !== null) {\n          clearInterval(runDependencyWatcher);\n          runDependencyWatcher = null;\n        }\n        if (dependenciesFulfilled) {\n          var callback = dependenciesFulfilled;\n          dependenciesFulfilled = null;\n          callback();\n        }\n      }\n    }\n\n    function abort(what) {\n      Module['onAbort']?.(what);\n\n      what = 'Aborted(' + what + ')';\n\n      err(what);\n\n      ABORT = true;\n\n      what += '. Build with -sASSERTIONS for more info.';\n\n      var e = new WebAssembly.RuntimeError(what);\n\n      readyPromiseReject(e);\n\n      throw e;\n    }\n\n    var dataURIPrefix = 'data:application/octet-stream;base64,';\n\n    var isDataURI = (filename) => filename.startsWith(dataURIPrefix);\n\n    var isFileURI = (filename) => filename.startsWith('file://');\n\n    function findWasmBinary() {\n      if (Module['locateFile']) {\n        var f = 'sqlite3.wasm';\n        if (!isDataURI(f)) {\n          return locateFile(f);\n        }\n        return f;\n      }\n\n      return new URL('sqlite3.wasm', import.meta.url).href;\n    }\n\n    var wasmBinaryFile;\n\n    function getBinarySync(file) {\n      if (file == wasmBinaryFile && wasmBinary) {\n        return new Uint8Array(wasmBinary);\n      }\n      if (readBinary) {\n        return readBinary(file);\n      }\n      throw 'both async and sync fetching of the wasm failed';\n    }\n\n    function getBinaryPromise(binaryFile) {\n      if (!wasmBinary) {\n        return readAsync(binaryFile).then(\n          (response) => new Uint8Array(response),\n\n          () => getBinarySync(binaryFile),\n        );\n      }\n\n      return Promise.resolve().then(() => getBinarySync(binaryFile));\n    }\n\n    function instantiateArrayBuffer(binaryFile, imports, receiver) {\n      return getBinaryPromise(binaryFile)\n        .then((binary) => {\n          return WebAssembly.instantiate(binary, imports);\n        })\n        .then(receiver, (reason) => {\n          err(`failed to asynchronously prepare wasm: ${reason}`);\n\n          abort(reason);\n        });\n    }\n\n    function instantiateAsync(binary, binaryFile, imports, callback) {\n      if (\n        !binary &&\n        typeof WebAssembly.instantiateStreaming == 'function' &&\n        !isDataURI(binaryFile) &&\n        typeof fetch == 'function'\n      ) {\n        return fetch(binaryFile, { credentials: 'same-origin' }).then(\n          (response) => {\n            var result = WebAssembly.instantiateStreaming(response, imports);\n\n            return result.then(callback, function (reason) {\n              err(`wasm streaming compile failed: ${reason}`);\n              err('falling back to ArrayBuffer instantiation');\n              return instantiateArrayBuffer(binaryFile, imports, callback);\n            });\n          },\n        );\n      }\n      return instantiateArrayBuffer(binaryFile, imports, callback);\n    }\n\n    function getWasmImports() {\n      return {\n        env: wasmImports,\n        wasi_snapshot_preview1: wasmImports,\n      };\n    }\n\n    function createWasm() {\n      var info = getWasmImports();\n\n      function receiveInstance(instance, module) {\n        wasmExports = instance.exports;\n\n        addOnInit(wasmExports['__wasm_call_ctors']);\n\n        removeRunDependency('wasm-instantiate');\n        return wasmExports;\n      }\n\n      addRunDependency('wasm-instantiate');\n\n      function receiveInstantiationResult(result) {\n        receiveInstance(result['instance']);\n      }\n\n      if (Module['instantiateWasm']) {\n        try {\n          return Module['instantiateWasm'](info, receiveInstance);\n        } catch (e) {\n          err(`Module.instantiateWasm callback failed with error: ${e}`);\n\n          readyPromiseReject(e);\n        }\n      }\n\n      wasmBinaryFile ??= findWasmBinary();\n\n      instantiateAsync(\n        wasmBinary,\n        wasmBinaryFile,\n        info,\n        receiveInstantiationResult,\n      ).catch(readyPromiseReject);\n      return {};\n    }\n\n    function ExitStatus(status) {\n      this.name = 'ExitStatus';\n      this.message = `Program terminated with exit(${status})`;\n      this.status = status;\n    }\n\n    var callRuntimeCallbacks = (callbacks) => {\n      callbacks.forEach((f) => f(Module));\n    };\n\n    function getValue(ptr, type = 'i8') {\n      if (type.endsWith('*')) type = '*';\n      switch (type) {\n        case 'i1':\n          return HEAP8[ptr];\n        case 'i8':\n          return HEAP8[ptr];\n        case 'i16':\n          return HEAP16[ptr >> 1];\n        case 'i32':\n          return HEAP32[ptr >> 2];\n        case 'i64':\n          return HEAP64[ptr >> 3];\n        case 'float':\n          return HEAPF32[ptr >> 2];\n        case 'double':\n          return HEAPF64[ptr >> 3];\n        case '*':\n          return HEAPU32[ptr >> 2];\n        default:\n          abort(`invalid type for getValue: ${type}`);\n      }\n    }\n\n    var noExitRuntime = Module['noExitRuntime'] || true;\n\n    function setValue(ptr, value, type = 'i8') {\n      if (type.endsWith('*')) type = '*';\n      switch (type) {\n        case 'i1':\n          HEAP8[ptr] = value;\n          break;\n        case 'i8':\n          HEAP8[ptr] = value;\n          break;\n        case 'i16':\n          HEAP16[ptr >> 1] = value;\n          break;\n        case 'i32':\n          HEAP32[ptr >> 2] = value;\n          break;\n        case 'i64':\n          HEAP64[ptr >> 3] = BigInt(value);\n          break;\n        case 'float':\n          HEAPF32[ptr >> 2] = value;\n          break;\n        case 'double':\n          HEAPF64[ptr >> 3] = value;\n          break;\n        case '*':\n          HEAPU32[ptr >> 2] = value;\n          break;\n        default:\n          abort(`invalid type for setValue: ${type}`);\n      }\n    }\n\n    var stackRestore = (val) => __emscripten_stack_restore(val);\n\n    var stackSave = () => _emscripten_stack_get_current();\n\n    var PATH = {\n      isAbs: (path) => path.charAt(0) === '/',\n      splitPath: (filename) => {\n        var splitPathRe =\n          /^(\\/?|)([\\s\\S]*?)((?:\\.{1,2}|[^\\/]+?|)(\\.[^.\\/]*|))(?:[\\/]*)$/;\n        return splitPathRe.exec(filename).slice(1);\n      },\n      normalizeArray: (parts, allowAboveRoot) => {\n        var up = 0;\n        for (var i = parts.length - 1; i >= 0; i--) {\n          var last = parts[i];\n          if (last === '.') {\n            parts.splice(i, 1);\n          } else if (last === '..') {\n            parts.splice(i, 1);\n            up++;\n          } else if (up) {\n            parts.splice(i, 1);\n            up--;\n          }\n        }\n\n        if (allowAboveRoot) {\n          for (; up; up--) {\n            parts.unshift('..');\n          }\n        }\n        return parts;\n      },\n      normalize: (path) => {\n        var isAbsolute = PATH.isAbs(path),\n          trailingSlash = path.substr(-1) === '/';\n\n        path = PATH.normalizeArray(\n          path.split('/').filter((p) => !!p),\n          !isAbsolute,\n        ).join('/');\n        if (!path && !isAbsolute) {\n          path = '.';\n        }\n        if (path && trailingSlash) {\n          path += '/';\n        }\n        return (isAbsolute ? '/' : '') + path;\n      },\n      dirname: (path) => {\n        var result = PATH.splitPath(path),\n          root = result[0],\n          dir = result[1];\n        if (!root && !dir) {\n          return '.';\n        }\n        if (dir) {\n          dir = dir.substr(0, dir.length - 1);\n        }\n        return root + dir;\n      },\n      basename: (path) => {\n        if (path === '/') return '/';\n        path = PATH.normalize(path);\n        path = path.replace(/\\/$/, '');\n        var lastSlash = path.lastIndexOf('/');\n        if (lastSlash === -1) return path;\n        return path.substr(lastSlash + 1);\n      },\n      join: (...paths) => PATH.normalize(paths.join('/')),\n      join2: (l, r) => PATH.normalize(l + '/' + r),\n    };\n\n    var initRandomFill = () => {\n      if (\n        typeof crypto == 'object' &&\n        typeof crypto['getRandomValues'] == 'function'\n      ) {\n        return (view) => crypto.getRandomValues(view);\n      } else abort('initRandomDevice');\n    };\n    var randomFill = (view) => {\n      return (randomFill = initRandomFill())(view);\n    };\n\n    var PATH_FS = {\n      resolve: (...args) => {\n        var resolvedPath = '',\n          resolvedAbsolute = false;\n        for (var i = args.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n          var path = i >= 0 ? args[i] : FS.cwd();\n\n          if (typeof path != 'string') {\n            throw new TypeError('Arguments to path.resolve must be strings');\n          } else if (!path) {\n            return '';\n          }\n          resolvedPath = path + '/' + resolvedPath;\n          resolvedAbsolute = PATH.isAbs(path);\n        }\n\n        resolvedPath = PATH.normalizeArray(\n          resolvedPath.split('/').filter((p) => !!p),\n          !resolvedAbsolute,\n        ).join('/');\n        return (resolvedAbsolute ? '/' : '') + resolvedPath || '.';\n      },\n      relative: (from, to) => {\n        from = PATH_FS.resolve(from).substr(1);\n        to = PATH_FS.resolve(to).substr(1);\n        function trim(arr) {\n          var start = 0;\n          for (; start < arr.length; start++) {\n            if (arr[start] !== '') break;\n          }\n          var end = arr.length - 1;\n          for (; end >= 0; end--) {\n            if (arr[end] !== '') break;\n          }\n          if (start > end) return [];\n          return arr.slice(start, end - start + 1);\n        }\n        var fromParts = trim(from.split('/'));\n        var toParts = trim(to.split('/'));\n        var length = Math.min(fromParts.length, toParts.length);\n        var samePartsLength = length;\n        for (var i = 0; i < length; i++) {\n          if (fromParts[i] !== toParts[i]) {\n            samePartsLength = i;\n            break;\n          }\n        }\n        var outputParts = [];\n        for (var i = samePartsLength; i < fromParts.length; i++) {\n          outputParts.push('..');\n        }\n        outputParts = outputParts.concat(toParts.slice(samePartsLength));\n        return outputParts.join('/');\n      },\n    };\n\n    var UTF8Decoder =\n      typeof TextDecoder != 'undefined' ? new TextDecoder() : undefined;\n\n    var UTF8ArrayToString = (heapOrArray, idx = 0, maxBytesToRead = NaN) => {\n      var endIdx = idx + maxBytesToRead;\n      var endPtr = idx;\n\n      while (heapOrArray[endPtr] && !(endPtr >= endIdx)) ++endPtr;\n\n      if (endPtr - idx > 16 && heapOrArray.buffer && UTF8Decoder) {\n        return UTF8Decoder.decode(heapOrArray.subarray(idx, endPtr));\n      }\n      var str = '';\n\n      while (idx < endPtr) {\n        var u0 = heapOrArray[idx++];\n        if (!(u0 & 0x80)) {\n          str += String.fromCharCode(u0);\n          continue;\n        }\n        var u1 = heapOrArray[idx++] & 63;\n        if ((u0 & 0xe0) == 0xc0) {\n          str += String.fromCharCode(((u0 & 31) << 6) | u1);\n          continue;\n        }\n        var u2 = heapOrArray[idx++] & 63;\n        if ((u0 & 0xf0) == 0xe0) {\n          u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;\n        } else {\n          u0 =\n            ((u0 & 7) << 18) |\n            (u1 << 12) |\n            (u2 << 6) |\n            (heapOrArray[idx++] & 63);\n        }\n\n        if (u0 < 0x10000) {\n          str += String.fromCharCode(u0);\n        } else {\n          var ch = u0 - 0x10000;\n          str += String.fromCharCode(\n            0xd800 | (ch >> 10),\n            0xdc00 | (ch & 0x3ff),\n          );\n        }\n      }\n      return str;\n    };\n\n    var FS_stdin_getChar_buffer = [];\n\n    var lengthBytesUTF8 = (str) => {\n      var len = 0;\n      for (var i = 0; i < str.length; ++i) {\n        var c = str.charCodeAt(i);\n        if (c <= 0x7f) {\n          len++;\n        } else if (c <= 0x7ff) {\n          len += 2;\n        } else if (c >= 0xd800 && c <= 0xdfff) {\n          len += 4;\n          ++i;\n        } else {\n          len += 3;\n        }\n      }\n      return len;\n    };\n\n    var stringToUTF8Array = (str, heap, outIdx, maxBytesToWrite) => {\n      if (!(maxBytesToWrite > 0)) return 0;\n\n      var startIdx = outIdx;\n      var endIdx = outIdx + maxBytesToWrite - 1;\n      for (var i = 0; i < str.length; ++i) {\n        var u = str.charCodeAt(i);\n        if (u >= 0xd800 && u <= 0xdfff) {\n          var u1 = str.charCodeAt(++i);\n          u = (0x10000 + ((u & 0x3ff) << 10)) | (u1 & 0x3ff);\n        }\n        if (u <= 0x7f) {\n          if (outIdx >= endIdx) break;\n          heap[outIdx++] = u;\n        } else if (u <= 0x7ff) {\n          if (outIdx + 1 >= endIdx) break;\n          heap[outIdx++] = 0xc0 | (u >> 6);\n          heap[outIdx++] = 0x80 | (u & 63);\n        } else if (u <= 0xffff) {\n          if (outIdx + 2 >= endIdx) break;\n          heap[outIdx++] = 0xe0 | (u >> 12);\n          heap[outIdx++] = 0x80 | ((u >> 6) & 63);\n          heap[outIdx++] = 0x80 | (u & 63);\n        } else {\n          if (outIdx + 3 >= endIdx) break;\n          heap[outIdx++] = 0xf0 | (u >> 18);\n          heap[outIdx++] = 0x80 | ((u >> 12) & 63);\n          heap[outIdx++] = 0x80 | ((u >> 6) & 63);\n          heap[outIdx++] = 0x80 | (u & 63);\n        }\n      }\n\n      heap[outIdx] = 0;\n      return outIdx - startIdx;\n    };\n\n    function intArrayFromString(stringy, dontAddNull, length) {\n      var len = length > 0 ? length : lengthBytesUTF8(stringy) + 1;\n      var u8array = new Array(len);\n      var numBytesWritten = stringToUTF8Array(\n        stringy,\n        u8array,\n        0,\n        u8array.length,\n      );\n      if (dontAddNull) u8array.length = numBytesWritten;\n      return u8array;\n    }\n    var FS_stdin_getChar = () => {\n      if (!FS_stdin_getChar_buffer.length) {\n        var result = null;\n        if (\n          typeof window != 'undefined' &&\n          typeof window.prompt == 'function'\n        ) {\n          result = window.prompt('Input: ');\n          if (result !== null) {\n            result += '\\n';\n          }\n        } else {\n        }\n        if (!result) {\n          return null;\n        }\n        FS_stdin_getChar_buffer = intArrayFromString(result, true);\n      }\n      return FS_stdin_getChar_buffer.shift();\n    };\n    var TTY = {\n      ttys: [],\n      init() {},\n      shutdown() {},\n      register(dev, ops) {\n        TTY.ttys[dev] = { input: [], output: [], ops: ops };\n        FS.registerDevice(dev, TTY.stream_ops);\n      },\n      stream_ops: {\n        open(stream) {\n          var tty = TTY.ttys[stream.node.rdev];\n          if (!tty) {\n            throw new FS.ErrnoError(43);\n          }\n          stream.tty = tty;\n          stream.seekable = false;\n        },\n        close(stream) {\n          stream.tty.ops.fsync(stream.tty);\n        },\n        fsync(stream) {\n          stream.tty.ops.fsync(stream.tty);\n        },\n        read(stream, buffer, offset, length, pos) {\n          if (!stream.tty || !stream.tty.ops.get_char) {\n            throw new FS.ErrnoError(60);\n          }\n          var bytesRead = 0;\n          for (var i = 0; i < length; i++) {\n            var result;\n            try {\n              result = stream.tty.ops.get_char(stream.tty);\n            } catch (e) {\n              throw new FS.ErrnoError(29);\n            }\n            if (result === undefined && bytesRead === 0) {\n              throw new FS.ErrnoError(6);\n            }\n            if (result === null || result === undefined) break;\n            bytesRead++;\n            buffer[offset + i] = result;\n          }\n          if (bytesRead) {\n            stream.node.timestamp = Date.now();\n          }\n          return bytesRead;\n        },\n        write(stream, buffer, offset, length, pos) {\n          if (!stream.tty || !stream.tty.ops.put_char) {\n            throw new FS.ErrnoError(60);\n          }\n          try {\n            for (var i = 0; i < length; i++) {\n              stream.tty.ops.put_char(stream.tty, buffer[offset + i]);\n            }\n          } catch (e) {\n            throw new FS.ErrnoError(29);\n          }\n          if (length) {\n            stream.node.timestamp = Date.now();\n          }\n          return i;\n        },\n      },\n      default_tty_ops: {\n        get_char(tty) {\n          return FS_stdin_getChar();\n        },\n        put_char(tty, val) {\n          if (val === null || val === 10) {\n            out(UTF8ArrayToString(tty.output));\n            tty.output = [];\n          } else {\n            if (val != 0) tty.output.push(val);\n          }\n        },\n        fsync(tty) {\n          if (tty.output && tty.output.length > 0) {\n            out(UTF8ArrayToString(tty.output));\n            tty.output = [];\n          }\n        },\n        ioctl_tcgets(tty) {\n          return {\n            c_iflag: 25856,\n            c_oflag: 5,\n            c_cflag: 191,\n            c_lflag: 35387,\n            c_cc: [\n              0x03, 0x1c, 0x7f, 0x15, 0x04, 0x00, 0x01, 0x00, 0x11, 0x13, 0x1a,\n              0x00, 0x12, 0x0f, 0x17, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n              0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            ],\n          };\n        },\n        ioctl_tcsets(tty, optional_actions, data) {\n          return 0;\n        },\n        ioctl_tiocgwinsz(tty) {\n          return [24, 80];\n        },\n      },\n      default_tty1_ops: {\n        put_char(tty, val) {\n          if (val === null || val === 10) {\n            err(UTF8ArrayToString(tty.output));\n            tty.output = [];\n          } else {\n            if (val != 0) tty.output.push(val);\n          }\n        },\n        fsync(tty) {\n          if (tty.output && tty.output.length > 0) {\n            err(UTF8ArrayToString(tty.output));\n            tty.output = [];\n          }\n        },\n      },\n    };\n\n    var zeroMemory = (address, size) => {\n      HEAPU8.fill(0, address, address + size);\n    };\n\n    var alignMemory = (size, alignment) => {\n      return Math.ceil(size / alignment) * alignment;\n    };\n    var mmapAlloc = (size) => {\n      size = alignMemory(size, 65536);\n      var ptr = _emscripten_builtin_memalign(65536, size);\n      if (ptr) zeroMemory(ptr, size);\n      return ptr;\n    };\n    var MEMFS = {\n      ops_table: null,\n      mount(mount) {\n        return MEMFS.createNode(null, '/', 16384 | 511, 0);\n      },\n      createNode(parent, name, mode, dev) {\n        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {\n          throw new FS.ErrnoError(63);\n        }\n        MEMFS.ops_table ||= {\n          dir: {\n            node: {\n              getattr: MEMFS.node_ops.getattr,\n              setattr: MEMFS.node_ops.setattr,\n              lookup: MEMFS.node_ops.lookup,\n              mknod: MEMFS.node_ops.mknod,\n              rename: MEMFS.node_ops.rename,\n              unlink: MEMFS.node_ops.unlink,\n              rmdir: MEMFS.node_ops.rmdir,\n              readdir: MEMFS.node_ops.readdir,\n              symlink: MEMFS.node_ops.symlink,\n            },\n            stream: {\n              llseek: MEMFS.stream_ops.llseek,\n            },\n          },\n          file: {\n            node: {\n              getattr: MEMFS.node_ops.getattr,\n              setattr: MEMFS.node_ops.setattr,\n            },\n            stream: {\n              llseek: MEMFS.stream_ops.llseek,\n              read: MEMFS.stream_ops.read,\n              write: MEMFS.stream_ops.write,\n              allocate: MEMFS.stream_ops.allocate,\n              mmap: MEMFS.stream_ops.mmap,\n              msync: MEMFS.stream_ops.msync,\n            },\n          },\n          link: {\n            node: {\n              getattr: MEMFS.node_ops.getattr,\n              setattr: MEMFS.node_ops.setattr,\n              readlink: MEMFS.node_ops.readlink,\n            },\n            stream: {},\n          },\n          chrdev: {\n            node: {\n              getattr: MEMFS.node_ops.getattr,\n              setattr: MEMFS.node_ops.setattr,\n            },\n            stream: FS.chrdev_stream_ops,\n          },\n        };\n        var node = FS.createNode(parent, name, mode, dev);\n        if (FS.isDir(node.mode)) {\n          node.node_ops = MEMFS.ops_table.dir.node;\n          node.stream_ops = MEMFS.ops_table.dir.stream;\n          node.contents = {};\n        } else if (FS.isFile(node.mode)) {\n          node.node_ops = MEMFS.ops_table.file.node;\n          node.stream_ops = MEMFS.ops_table.file.stream;\n          node.usedBytes = 0;\n\n          node.contents = null;\n        } else if (FS.isLink(node.mode)) {\n          node.node_ops = MEMFS.ops_table.link.node;\n          node.stream_ops = MEMFS.ops_table.link.stream;\n        } else if (FS.isChrdev(node.mode)) {\n          node.node_ops = MEMFS.ops_table.chrdev.node;\n          node.stream_ops = MEMFS.ops_table.chrdev.stream;\n        }\n        node.timestamp = Date.now();\n\n        if (parent) {\n          parent.contents[name] = node;\n          parent.timestamp = node.timestamp;\n        }\n        return node;\n      },\n      getFileDataAsTypedArray(node) {\n        if (!node.contents) return new Uint8Array(0);\n        if (node.contents.subarray)\n          return node.contents.subarray(0, node.usedBytes);\n        return new Uint8Array(node.contents);\n      },\n      expandFileStorage(node, newCapacity) {\n        var prevCapacity = node.contents ? node.contents.length : 0;\n        if (prevCapacity >= newCapacity) return;\n\n        var CAPACITY_DOUBLING_MAX = 1024 * 1024;\n        newCapacity = Math.max(\n          newCapacity,\n          (prevCapacity *\n            (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) >>>\n            0,\n        );\n        if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256);\n        var oldContents = node.contents;\n        node.contents = new Uint8Array(newCapacity);\n        if (node.usedBytes > 0)\n          node.contents.set(oldContents.subarray(0, node.usedBytes), 0);\n      },\n      resizeFileStorage(node, newSize) {\n        if (node.usedBytes == newSize) return;\n        if (newSize == 0) {\n          node.contents = null;\n          node.usedBytes = 0;\n        } else {\n          var oldContents = node.contents;\n          node.contents = new Uint8Array(newSize);\n          if (oldContents) {\n            node.contents.set(\n              oldContents.subarray(0, Math.min(newSize, node.usedBytes)),\n            );\n          }\n          node.usedBytes = newSize;\n        }\n      },\n      node_ops: {\n        getattr(node) {\n          var attr = {};\n\n          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;\n          attr.ino = node.id;\n          attr.mode = node.mode;\n          attr.nlink = 1;\n          attr.uid = 0;\n          attr.gid = 0;\n          attr.rdev = node.rdev;\n          if (FS.isDir(node.mode)) {\n            attr.size = 4096;\n          } else if (FS.isFile(node.mode)) {\n            attr.size = node.usedBytes;\n          } else if (FS.isLink(node.mode)) {\n            attr.size = node.link.length;\n          } else {\n            attr.size = 0;\n          }\n          attr.atime = new Date(node.timestamp);\n          attr.mtime = new Date(node.timestamp);\n          attr.ctime = new Date(node.timestamp);\n\n          attr.blksize = 4096;\n          attr.blocks = Math.ceil(attr.size / attr.blksize);\n          return attr;\n        },\n        setattr(node, attr) {\n          if (attr.mode !== undefined) {\n            node.mode = attr.mode;\n          }\n          if (attr.timestamp !== undefined) {\n            node.timestamp = attr.timestamp;\n          }\n          if (attr.size !== undefined) {\n            MEMFS.resizeFileStorage(node, attr.size);\n          }\n        },\n        lookup(parent, name) {\n          throw FS.genericErrors[44];\n        },\n        mknod(parent, name, mode, dev) {\n          return MEMFS.createNode(parent, name, mode, dev);\n        },\n        rename(old_node, new_dir, new_name) {\n          if (FS.isDir(old_node.mode)) {\n            var new_node;\n            try {\n              new_node = FS.lookupNode(new_dir, new_name);\n            } catch (e) {}\n            if (new_node) {\n              for (var i in new_node.contents) {\n                throw new FS.ErrnoError(55);\n              }\n            }\n          }\n\n          delete old_node.parent.contents[old_node.name];\n          old_node.parent.timestamp = Date.now();\n          old_node.name = new_name;\n          new_dir.contents[new_name] = old_node;\n          new_dir.timestamp = old_node.parent.timestamp;\n        },\n        unlink(parent, name) {\n          delete parent.contents[name];\n          parent.timestamp = Date.now();\n        },\n        rmdir(parent, name) {\n          var node = FS.lookupNode(parent, name);\n          for (var i in node.contents) {\n            throw new FS.ErrnoError(55);\n          }\n          delete parent.contents[name];\n          parent.timestamp = Date.now();\n        },\n        readdir(node) {\n          var entries = ['.', '..'];\n          for (var key of Object.keys(node.contents)) {\n            entries.push(key);\n          }\n          return entries;\n        },\n        symlink(parent, newname, oldpath) {\n          var node = MEMFS.createNode(parent, newname, 511 | 40960, 0);\n          node.link = oldpath;\n          return node;\n        },\n        readlink(node) {\n          if (!FS.isLink(node.mode)) {\n            throw new FS.ErrnoError(28);\n          }\n          return node.link;\n        },\n      },\n      stream_ops: {\n        read(stream, buffer, offset, length, position) {\n          var contents = stream.node.contents;\n          if (position >= stream.node.usedBytes) return 0;\n          var size = Math.min(stream.node.usedBytes - position, length);\n          if (size > 8 && contents.subarray) {\n            buffer.set(contents.subarray(position, position + size), offset);\n          } else {\n            for (var i = 0; i < size; i++)\n              buffer[offset + i] = contents[position + i];\n          }\n          return size;\n        },\n        write(stream, buffer, offset, length, position, canOwn) {\n          if (buffer.buffer === HEAP8.buffer) {\n            canOwn = false;\n          }\n\n          if (!length) return 0;\n          var node = stream.node;\n          node.timestamp = Date.now();\n\n          if (buffer.subarray && (!node.contents || node.contents.subarray)) {\n            if (canOwn) {\n              node.contents = buffer.subarray(offset, offset + length);\n              node.usedBytes = length;\n              return length;\n            } else if (node.usedBytes === 0 && position === 0) {\n              node.contents = buffer.slice(offset, offset + length);\n              node.usedBytes = length;\n              return length;\n            } else if (position + length <= node.usedBytes) {\n              node.contents.set(\n                buffer.subarray(offset, offset + length),\n                position,\n              );\n              return length;\n            }\n          }\n\n          MEMFS.expandFileStorage(node, position + length);\n          if (node.contents.subarray && buffer.subarray) {\n            node.contents.set(\n              buffer.subarray(offset, offset + length),\n              position,\n            );\n          } else {\n            for (var i = 0; i < length; i++) {\n              node.contents[position + i] = buffer[offset + i];\n            }\n          }\n          node.usedBytes = Math.max(node.usedBytes, position + length);\n          return length;\n        },\n        llseek(stream, offset, whence) {\n          var position = offset;\n          if (whence === 1) {\n            position += stream.position;\n          } else if (whence === 2) {\n            if (FS.isFile(stream.node.mode)) {\n              position += stream.node.usedBytes;\n            }\n          }\n          if (position < 0) {\n            throw new FS.ErrnoError(28);\n          }\n          return position;\n        },\n        allocate(stream, offset, length) {\n          MEMFS.expandFileStorage(stream.node, offset + length);\n          stream.node.usedBytes = Math.max(\n            stream.node.usedBytes,\n            offset + length,\n          );\n        },\n        mmap(stream, length, position, prot, flags) {\n          if (!FS.isFile(stream.node.mode)) {\n            throw new FS.ErrnoError(43);\n          }\n          var ptr;\n          var allocated;\n          var contents = stream.node.contents;\n\n          if (!(flags & 2) && contents && contents.buffer === HEAP8.buffer) {\n            allocated = false;\n            ptr = contents.byteOffset;\n          } else {\n            allocated = true;\n            ptr = mmapAlloc(length);\n            if (!ptr) {\n              throw new FS.ErrnoError(48);\n            }\n            if (contents) {\n              if (position > 0 || position + length < contents.length) {\n                if (contents.subarray) {\n                  contents = contents.subarray(position, position + length);\n                } else {\n                  contents = Array.prototype.slice.call(\n                    contents,\n                    position,\n                    position + length,\n                  );\n                }\n              }\n              HEAP8.set(contents, ptr);\n            }\n          }\n          return { ptr, allocated };\n        },\n        msync(stream, buffer, offset, length, mmapFlags) {\n          MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);\n\n          return 0;\n        },\n      },\n    };\n\n    var asyncLoad = (url, onload, onerror, noRunDep) => {\n      var dep = !noRunDep ? getUniqueRunDependency(`al ${url}`) : '';\n      readAsync(url).then(\n        (arrayBuffer) => {\n          onload(new Uint8Array(arrayBuffer));\n          if (dep) removeRunDependency(dep);\n        },\n        (err) => {\n          if (onerror) {\n            onerror();\n          } else {\n            throw `Loading data file \"${url}\" failed.`;\n          }\n        },\n      );\n      if (dep) addRunDependency(dep);\n    };\n\n    var FS_createDataFile = (\n      parent,\n      name,\n      fileData,\n      canRead,\n      canWrite,\n      canOwn,\n    ) => {\n      FS.createDataFile(parent, name, fileData, canRead, canWrite, canOwn);\n    };\n\n    var preloadPlugins = Module['preloadPlugins'] || [];\n    var FS_handledByPreloadPlugin = (byteArray, fullname, finish, onerror) => {\n      if (typeof Browser != 'undefined') Browser.init();\n\n      var handled = false;\n      preloadPlugins.forEach((plugin) => {\n        if (handled) return;\n        if (plugin['canHandle'](fullname)) {\n          plugin['handle'](byteArray, fullname, finish, onerror);\n          handled = true;\n        }\n      });\n      return handled;\n    };\n    var FS_createPreloadedFile = (\n      parent,\n      name,\n      url,\n      canRead,\n      canWrite,\n      onload,\n      onerror,\n      dontCreateFile,\n      canOwn,\n      preFinish,\n    ) => {\n      var fullname = name ? PATH_FS.resolve(PATH.join2(parent, name)) : parent;\n      var dep = getUniqueRunDependency(`cp ${fullname}`);\n      function processData(byteArray) {\n        function finish(byteArray) {\n          preFinish?.();\n          if (!dontCreateFile) {\n            FS_createDataFile(\n              parent,\n              name,\n              byteArray,\n              canRead,\n              canWrite,\n              canOwn,\n            );\n          }\n          onload?.();\n          removeRunDependency(dep);\n        }\n        if (\n          FS_handledByPreloadPlugin(byteArray, fullname, finish, () => {\n            onerror?.();\n            removeRunDependency(dep);\n          })\n        ) {\n          return;\n        }\n        finish(byteArray);\n      }\n      addRunDependency(dep);\n      if (typeof url == 'string') {\n        asyncLoad(url, processData, onerror);\n      } else {\n        processData(url);\n      }\n    };\n\n    var FS_modeStringToFlags = (str) => {\n      var flagModes = {\n        r: 0,\n        'r+': 2,\n        w: 512 | 64 | 1,\n        'w+': 512 | 64 | 2,\n        a: 1024 | 64 | 1,\n        'a+': 1024 | 64 | 2,\n      };\n      var flags = flagModes[str];\n      if (typeof flags == 'undefined') {\n        throw new Error(`Unknown file open mode: ${str}`);\n      }\n      return flags;\n    };\n\n    var FS_getMode = (canRead, canWrite) => {\n      var mode = 0;\n      if (canRead) mode |= 292 | 73;\n      if (canWrite) mode |= 146;\n      return mode;\n    };\n\n    var FS = {\n      root: null,\n      mounts: [],\n      devices: {},\n      streams: [],\n      nextInode: 1,\n      nameTable: null,\n      currentPath: '/',\n      initialized: false,\n      ignorePermissions: true,\n      ErrnoError: class {\n        constructor(errno) {\n          this.name = 'ErrnoError';\n          this.errno = errno;\n        }\n      },\n      genericErrors: {},\n      filesystems: null,\n      syncFSRequests: 0,\n      readFiles: {},\n      FSStream: class {\n        constructor() {\n          this.shared = {};\n        }\n        get object() {\n          return this.node;\n        }\n        set object(val) {\n          this.node = val;\n        }\n        get isRead() {\n          return (this.flags & 2097155) !== 1;\n        }\n        get isWrite() {\n          return (this.flags & 2097155) !== 0;\n        }\n        get isAppend() {\n          return this.flags & 1024;\n        }\n        get flags() {\n          return this.shared.flags;\n        }\n        set flags(val) {\n          this.shared.flags = val;\n        }\n        get position() {\n          return this.shared.position;\n        }\n        set position(val) {\n          this.shared.position = val;\n        }\n      },\n      FSNode: class {\n        constructor(parent, name, mode, rdev) {\n          if (!parent) {\n            parent = this;\n          }\n          this.parent = parent;\n          this.mount = parent.mount;\n          this.mounted = null;\n          this.id = FS.nextInode++;\n          this.name = name;\n          this.mode = mode;\n          this.node_ops = {};\n          this.stream_ops = {};\n          this.rdev = rdev;\n          this.readMode = 292 | 73;\n          this.writeMode = 146;\n        }\n        get read() {\n          return (this.mode & this.readMode) === this.readMode;\n        }\n        set read(val) {\n          val ? (this.mode |= this.readMode) : (this.mode &= ~this.readMode);\n        }\n        get write() {\n          return (this.mode & this.writeMode) === this.writeMode;\n        }\n        set write(val) {\n          val ? (this.mode |= this.writeMode) : (this.mode &= ~this.writeMode);\n        }\n        get isFolder() {\n          return FS.isDir(this.mode);\n        }\n        get isDevice() {\n          return FS.isChrdev(this.mode);\n        }\n      },\n      lookupPath(path, opts = {}) {\n        path = PATH_FS.resolve(path);\n\n        if (!path) return { path: '', node: null };\n\n        var defaults = {\n          follow_mount: true,\n          recurse_count: 0,\n        };\n        opts = Object.assign(defaults, opts);\n\n        if (opts.recurse_count > 8) {\n          throw new FS.ErrnoError(32);\n        }\n\n        var parts = path.split('/').filter((p) => !!p);\n\n        var current = FS.root;\n        var current_path = '/';\n\n        for (var i = 0; i < parts.length; i++) {\n          var islast = i === parts.length - 1;\n          if (islast && opts.parent) {\n            break;\n          }\n\n          current = FS.lookupNode(current, parts[i]);\n          current_path = PATH.join2(current_path, parts[i]);\n\n          if (FS.isMountpoint(current)) {\n            if (!islast || (islast && opts.follow_mount)) {\n              current = current.mounted.root;\n            }\n          }\n\n          if (!islast || opts.follow) {\n            var count = 0;\n            while (FS.isLink(current.mode)) {\n              var link = FS.readlink(current_path);\n              current_path = PATH_FS.resolve(PATH.dirname(current_path), link);\n\n              var lookup = FS.lookupPath(current_path, {\n                recurse_count: opts.recurse_count + 1,\n              });\n              current = lookup.node;\n\n              if (count++ > 40) {\n                throw new FS.ErrnoError(32);\n              }\n            }\n          }\n        }\n\n        return { path: current_path, node: current };\n      },\n      getPath(node) {\n        var path;\n        while (true) {\n          if (FS.isRoot(node)) {\n            var mount = node.mount.mountpoint;\n            if (!path) return mount;\n            return mount[mount.length - 1] !== '/'\n              ? `${mount}/${path}`\n              : mount + path;\n          }\n          path = path ? `${node.name}/${path}` : node.name;\n          node = node.parent;\n        }\n      },\n      hashName(parentid, name) {\n        var hash = 0;\n\n        for (var i = 0; i < name.length; i++) {\n          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;\n        }\n        return ((parentid + hash) >>> 0) % FS.nameTable.length;\n      },\n      hashAddNode(node) {\n        var hash = FS.hashName(node.parent.id, node.name);\n        node.name_next = FS.nameTable[hash];\n        FS.nameTable[hash] = node;\n      },\n      hashRemoveNode(node) {\n        var hash = FS.hashName(node.parent.id, node.name);\n        if (FS.nameTable[hash] === node) {\n          FS.nameTable[hash] = node.name_next;\n        } else {\n          var current = FS.nameTable[hash];\n          while (current) {\n            if (current.name_next === node) {\n              current.name_next = node.name_next;\n              break;\n            }\n            current = current.name_next;\n          }\n        }\n      },\n      lookupNode(parent, name) {\n        var errCode = FS.mayLookup(parent);\n        if (errCode) {\n          throw new FS.ErrnoError(errCode);\n        }\n        var hash = FS.hashName(parent.id, name);\n        for (var node = FS.nameTable[hash]; node; node = node.name_next) {\n          var nodeName = node.name;\n          if (node.parent.id === parent.id && nodeName === name) {\n            return node;\n          }\n        }\n\n        return FS.lookup(parent, name);\n      },\n      createNode(parent, name, mode, rdev) {\n        var node = new FS.FSNode(parent, name, mode, rdev);\n\n        FS.hashAddNode(node);\n\n        return node;\n      },\n      destroyNode(node) {\n        FS.hashRemoveNode(node);\n      },\n      isRoot(node) {\n        return node === node.parent;\n      },\n      isMountpoint(node) {\n        return !!node.mounted;\n      },\n      isFile(mode) {\n        return (mode & 61440) === 32768;\n      },\n      isDir(mode) {\n        return (mode & 61440) === 16384;\n      },\n      isLink(mode) {\n        return (mode & 61440) === 40960;\n      },\n      isChrdev(mode) {\n        return (mode & 61440) === 8192;\n      },\n      isBlkdev(mode) {\n        return (mode & 61440) === 24576;\n      },\n      isFIFO(mode) {\n        return (mode & 61440) === 4096;\n      },\n      isSocket(mode) {\n        return (mode & 49152) === 49152;\n      },\n      flagsToPermissionString(flag) {\n        var perms = ['r', 'w', 'rw'][flag & 3];\n        if (flag & 512) {\n          perms += 'w';\n        }\n        return perms;\n      },\n      nodePermissions(node, perms) {\n        if (FS.ignorePermissions) {\n          return 0;\n        }\n\n        if (perms.includes('r') && !(node.mode & 292)) {\n          return 2;\n        } else if (perms.includes('w') && !(node.mode & 146)) {\n          return 2;\n        } else if (perms.includes('x') && !(node.mode & 73)) {\n          return 2;\n        }\n        return 0;\n      },\n      mayLookup(dir) {\n        if (!FS.isDir(dir.mode)) return 54;\n        var errCode = FS.nodePermissions(dir, 'x');\n        if (errCode) return errCode;\n        if (!dir.node_ops.lookup) return 2;\n        return 0;\n      },\n      mayCreate(dir, name) {\n        try {\n          var node = FS.lookupNode(dir, name);\n          return 20;\n        } catch (e) {}\n        return FS.nodePermissions(dir, 'wx');\n      },\n      mayDelete(dir, name, isdir) {\n        var node;\n        try {\n          node = FS.lookupNode(dir, name);\n        } catch (e) {\n          return e.errno;\n        }\n        var errCode = FS.nodePermissions(dir, 'wx');\n        if (errCode) {\n          return errCode;\n        }\n        if (isdir) {\n          if (!FS.isDir(node.mode)) {\n            return 54;\n          }\n          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {\n            return 10;\n          }\n        } else {\n          if (FS.isDir(node.mode)) {\n            return 31;\n          }\n        }\n        return 0;\n      },\n      mayOpen(node, flags) {\n        if (!node) {\n          return 44;\n        }\n        if (FS.isLink(node.mode)) {\n          return 32;\n        } else if (FS.isDir(node.mode)) {\n          if (FS.flagsToPermissionString(flags) !== 'r' || flags & 512) {\n            return 31;\n          }\n        }\n        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));\n      },\n      MAX_OPEN_FDS: 4096,\n      nextfd() {\n        for (var fd = 0; fd <= FS.MAX_OPEN_FDS; fd++) {\n          if (!FS.streams[fd]) {\n            return fd;\n          }\n        }\n        throw new FS.ErrnoError(33);\n      },\n      getStreamChecked(fd) {\n        var stream = FS.getStream(fd);\n        if (!stream) {\n          throw new FS.ErrnoError(8);\n        }\n        return stream;\n      },\n      getStream: (fd) => FS.streams[fd],\n      createStream(stream, fd = -1) {\n        stream = Object.assign(new FS.FSStream(), stream);\n        if (fd == -1) {\n          fd = FS.nextfd();\n        }\n        stream.fd = fd;\n        FS.streams[fd] = stream;\n        return stream;\n      },\n      closeStream(fd) {\n        FS.streams[fd] = null;\n      },\n      dupStream(origStream, fd = -1) {\n        var stream = FS.createStream(origStream, fd);\n        stream.stream_ops?.dup?.(stream);\n        return stream;\n      },\n      chrdev_stream_ops: {\n        open(stream) {\n          var device = FS.getDevice(stream.node.rdev);\n\n          stream.stream_ops = device.stream_ops;\n\n          stream.stream_ops.open?.(stream);\n        },\n        llseek() {\n          throw new FS.ErrnoError(70);\n        },\n      },\n      major: (dev) => dev >> 8,\n      minor: (dev) => dev & 0xff,\n      makedev: (ma, mi) => (ma << 8) | mi,\n      registerDevice(dev, ops) {\n        FS.devices[dev] = { stream_ops: ops };\n      },\n      getDevice: (dev) => FS.devices[dev],\n      getMounts(mount) {\n        var mounts = [];\n        var check = [mount];\n\n        while (check.length) {\n          var m = check.pop();\n\n          mounts.push(m);\n\n          check.push(...m.mounts);\n        }\n\n        return mounts;\n      },\n      syncfs(populate, callback) {\n        if (typeof populate == 'function') {\n          callback = populate;\n          populate = false;\n        }\n\n        FS.syncFSRequests++;\n\n        if (FS.syncFSRequests > 1) {\n          err(\n            `warning: ${FS.syncFSRequests} FS.syncfs operations in flight at once, probably just doing extra work`,\n          );\n        }\n\n        var mounts = FS.getMounts(FS.root.mount);\n        var completed = 0;\n\n        function doCallback(errCode) {\n          FS.syncFSRequests--;\n          return callback(errCode);\n        }\n\n        function done(errCode) {\n          if (errCode) {\n            if (!done.errored) {\n              done.errored = true;\n              return doCallback(errCode);\n            }\n            return;\n          }\n          if (++completed >= mounts.length) {\n            doCallback(null);\n          }\n        }\n\n        mounts.forEach((mount) => {\n          if (!mount.type.syncfs) {\n            return done(null);\n          }\n          mount.type.syncfs(mount, populate, done);\n        });\n      },\n      mount(type, opts, mountpoint) {\n        var root = mountpoint === '/';\n        var pseudo = !mountpoint;\n        var node;\n\n        if (root && FS.root) {\n          throw new FS.ErrnoError(10);\n        } else if (!root && !pseudo) {\n          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });\n\n          mountpoint = lookup.path;\n          node = lookup.node;\n\n          if (FS.isMountpoint(node)) {\n            throw new FS.ErrnoError(10);\n          }\n\n          if (!FS.isDir(node.mode)) {\n            throw new FS.ErrnoError(54);\n          }\n        }\n\n        var mount = {\n          type,\n          opts,\n          mountpoint,\n          mounts: [],\n        };\n\n        var mountRoot = type.mount(mount);\n        mountRoot.mount = mount;\n        mount.root = mountRoot;\n\n        if (root) {\n          FS.root = mountRoot;\n        } else if (node) {\n          node.mounted = mount;\n\n          if (node.mount) {\n            node.mount.mounts.push(mount);\n          }\n        }\n\n        return mountRoot;\n      },\n      unmount(mountpoint) {\n        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });\n\n        if (!FS.isMountpoint(lookup.node)) {\n          throw new FS.ErrnoError(28);\n        }\n\n        var node = lookup.node;\n        var mount = node.mounted;\n        var mounts = FS.getMounts(mount);\n\n        Object.keys(FS.nameTable).forEach((hash) => {\n          var current = FS.nameTable[hash];\n\n          while (current) {\n            var next = current.name_next;\n\n            if (mounts.includes(current.mount)) {\n              FS.destroyNode(current);\n            }\n\n            current = next;\n          }\n        });\n\n        node.mounted = null;\n\n        var idx = node.mount.mounts.indexOf(mount);\n        node.mount.mounts.splice(idx, 1);\n      },\n      lookup(parent, name) {\n        return parent.node_ops.lookup(parent, name);\n      },\n      mknod(path, mode, dev) {\n        var lookup = FS.lookupPath(path, { parent: true });\n        var parent = lookup.node;\n        var name = PATH.basename(path);\n        if (!name || name === '.' || name === '..') {\n          throw new FS.ErrnoError(28);\n        }\n        var errCode = FS.mayCreate(parent, name);\n        if (errCode) {\n          throw new FS.ErrnoError(errCode);\n        }\n        if (!parent.node_ops.mknod) {\n          throw new FS.ErrnoError(63);\n        }\n        return parent.node_ops.mknod(parent, name, mode, dev);\n      },\n      create(path, mode) {\n        mode = mode !== undefined ? mode : 438;\n        mode &= 4095;\n        mode |= 32768;\n        return FS.mknod(path, mode, 0);\n      },\n      mkdir(path, mode) {\n        mode = mode !== undefined ? mode : 511;\n        mode &= 511 | 512;\n        mode |= 16384;\n        return FS.mknod(path, mode, 0);\n      },\n      mkdirTree(path, mode) {\n        var dirs = path.split('/');\n        var d = '';\n        for (var i = 0; i < dirs.length; ++i) {\n          if (!dirs[i]) continue;\n          d += '/' + dirs[i];\n          try {\n            FS.mkdir(d, mode);\n          } catch (e) {\n            if (e.errno != 20) throw e;\n          }\n        }\n      },\n      mkdev(path, mode, dev) {\n        if (typeof dev == 'undefined') {\n          dev = mode;\n          mode = 438;\n        }\n        mode |= 8192;\n        return FS.mknod(path, mode, dev);\n      },\n      symlink(oldpath, newpath) {\n        if (!PATH_FS.resolve(oldpath)) {\n          throw new FS.ErrnoError(44);\n        }\n        var lookup = FS.lookupPath(newpath, { parent: true });\n        var parent = lookup.node;\n        if (!parent) {\n          throw new FS.ErrnoError(44);\n        }\n        var newname = PATH.basename(newpath);\n        var errCode = FS.mayCreate(parent, newname);\n        if (errCode) {\n          throw new FS.ErrnoError(errCode);\n        }\n        if (!parent.node_ops.symlink) {\n          throw new FS.ErrnoError(63);\n        }\n        return parent.node_ops.symlink(parent, newname, oldpath);\n      },\n      rename(old_path, new_path) {\n        var old_dirname = PATH.dirname(old_path);\n        var new_dirname = PATH.dirname(new_path);\n        var old_name = PATH.basename(old_path);\n        var new_name = PATH.basename(new_path);\n\n        var lookup, old_dir, new_dir;\n\n        lookup = FS.lookupPath(old_path, { parent: true });\n        old_dir = lookup.node;\n        lookup = FS.lookupPath(new_path, { parent: true });\n        new_dir = lookup.node;\n\n        if (!old_dir || !new_dir) throw new FS.ErrnoError(44);\n\n        if (old_dir.mount !== new_dir.mount) {\n          throw new FS.ErrnoError(75);\n        }\n\n        var old_node = FS.lookupNode(old_dir, old_name);\n\n        var relative = PATH_FS.relative(old_path, new_dirname);\n        if (relative.charAt(0) !== '.') {\n          throw new FS.ErrnoError(28);\n        }\n\n        relative = PATH_FS.relative(new_path, old_dirname);\n        if (relative.charAt(0) !== '.') {\n          throw new FS.ErrnoError(55);\n        }\n\n        var new_node;\n        try {\n          new_node = FS.lookupNode(new_dir, new_name);\n        } catch (e) {}\n\n        if (old_node === new_node) {\n          return;\n        }\n\n        var isdir = FS.isDir(old_node.mode);\n        var errCode = FS.mayDelete(old_dir, old_name, isdir);\n        if (errCode) {\n          throw new FS.ErrnoError(errCode);\n        }\n\n        errCode = new_node\n          ? FS.mayDelete(new_dir, new_name, isdir)\n          : FS.mayCreate(new_dir, new_name);\n        if (errCode) {\n          throw new FS.ErrnoError(errCode);\n        }\n        if (!old_dir.node_ops.rename) {\n          throw new FS.ErrnoError(63);\n        }\n        if (\n          FS.isMountpoint(old_node) ||\n          (new_node && FS.isMountpoint(new_node))\n        ) {\n          throw new FS.ErrnoError(10);\n        }\n\n        if (new_dir !== old_dir) {\n          errCode = FS.nodePermissions(old_dir, 'w');\n          if (errCode) {\n            throw new FS.ErrnoError(errCode);\n          }\n        }\n\n        FS.hashRemoveNode(old_node);\n\n        try {\n          old_dir.node_ops.rename(old_node, new_dir, new_name);\n\n          old_node.parent = new_dir;\n        } catch (e) {\n          throw e;\n        } finally {\n          FS.hashAddNode(old_node);\n        }\n      },\n      rmdir(path) {\n        var lookup = FS.lookupPath(path, { parent: true });\n        var parent = lookup.node;\n        var name = PATH.basename(path);\n        var node = FS.lookupNode(parent, name);\n        var errCode = FS.mayDelete(parent, name, true);\n        if (errCode) {\n          throw new FS.ErrnoError(errCode);\n        }\n        if (!parent.node_ops.rmdir) {\n          throw new FS.ErrnoError(63);\n        }\n        if (FS.isMountpoint(node)) {\n          throw new FS.ErrnoError(10);\n        }\n        parent.node_ops.rmdir(parent, name);\n        FS.destroyNode(node);\n      },\n      readdir(path) {\n        var lookup = FS.lookupPath(path, { follow: true });\n        var node = lookup.node;\n        if (!node.node_ops.readdir) {\n          throw new FS.ErrnoError(54);\n        }\n        return node.node_ops.readdir(node);\n      },\n      unlink(path) {\n        var lookup = FS.lookupPath(path, { parent: true });\n        var parent = lookup.node;\n        if (!parent) {\n          throw new FS.ErrnoError(44);\n        }\n        var name = PATH.basename(path);\n        var node = FS.lookupNode(parent, name);\n        var errCode = FS.mayDelete(parent, name, false);\n        if (errCode) {\n          throw new FS.ErrnoError(errCode);\n        }\n        if (!parent.node_ops.unlink) {\n          throw new FS.ErrnoError(63);\n        }\n        if (FS.isMountpoint(node)) {\n          throw new FS.ErrnoError(10);\n        }\n        parent.node_ops.unlink(parent, name);\n        FS.destroyNode(node);\n      },\n      readlink(path) {\n        var lookup = FS.lookupPath(path);\n        var link = lookup.node;\n        if (!link) {\n          throw new FS.ErrnoError(44);\n        }\n        if (!link.node_ops.readlink) {\n          throw new FS.ErrnoError(28);\n        }\n        return PATH_FS.resolve(\n          FS.getPath(link.parent),\n          link.node_ops.readlink(link),\n        );\n      },\n      stat(path, dontFollow) {\n        var lookup = FS.lookupPath(path, { follow: !dontFollow });\n        var node = lookup.node;\n        if (!node) {\n          throw new FS.ErrnoError(44);\n        }\n        if (!node.node_ops.getattr) {\n          throw new FS.ErrnoError(63);\n        }\n        return node.node_ops.getattr(node);\n      },\n      lstat(path) {\n        return FS.stat(path, true);\n      },\n      chmod(path, mode, dontFollow) {\n        var node;\n        if (typeof path == 'string') {\n          var lookup = FS.lookupPath(path, { follow: !dontFollow });\n          node = lookup.node;\n        } else {\n          node = path;\n        }\n        if (!node.node_ops.setattr) {\n          throw new FS.ErrnoError(63);\n        }\n        node.node_ops.setattr(node, {\n          mode: (mode & 4095) | (node.mode & ~4095),\n          timestamp: Date.now(),\n        });\n      },\n      lchmod(path, mode) {\n        FS.chmod(path, mode, true);\n      },\n      fchmod(fd, mode) {\n        var stream = FS.getStreamChecked(fd);\n        FS.chmod(stream.node, mode);\n      },\n      chown(path, uid, gid, dontFollow) {\n        var node;\n        if (typeof path == 'string') {\n          var lookup = FS.lookupPath(path, { follow: !dontFollow });\n          node = lookup.node;\n        } else {\n          node = path;\n        }\n        if (!node.node_ops.setattr) {\n          throw new FS.ErrnoError(63);\n        }\n        node.node_ops.setattr(node, {\n          timestamp: Date.now(),\n        });\n      },\n      lchown(path, uid, gid) {\n        FS.chown(path, uid, gid, true);\n      },\n      fchown(fd, uid, gid) {\n        var stream = FS.getStreamChecked(fd);\n        FS.chown(stream.node, uid, gid);\n      },\n      truncate(path, len) {\n        if (len < 0) {\n          throw new FS.ErrnoError(28);\n        }\n        var node;\n        if (typeof path == 'string') {\n          var lookup = FS.lookupPath(path, { follow: true });\n          node = lookup.node;\n        } else {\n          node = path;\n        }\n        if (!node.node_ops.setattr) {\n          throw new FS.ErrnoError(63);\n        }\n        if (FS.isDir(node.mode)) {\n          throw new FS.ErrnoError(31);\n        }\n        if (!FS.isFile(node.mode)) {\n          throw new FS.ErrnoError(28);\n        }\n        var errCode = FS.nodePermissions(node, 'w');\n        if (errCode) {\n          throw new FS.ErrnoError(errCode);\n        }\n        node.node_ops.setattr(node, {\n          size: len,\n          timestamp: Date.now(),\n        });\n      },\n      ftruncate(fd, len) {\n        var stream = FS.getStreamChecked(fd);\n        if ((stream.flags & 2097155) === 0) {\n          throw new FS.ErrnoError(28);\n        }\n        FS.truncate(stream.node, len);\n      },\n      utime(path, atime, mtime) {\n        var lookup = FS.lookupPath(path, { follow: true });\n        var node = lookup.node;\n        node.node_ops.setattr(node, {\n          timestamp: Math.max(atime, mtime),\n        });\n      },\n      open(path, flags, mode) {\n        if (path === '') {\n          throw new FS.ErrnoError(44);\n        }\n        flags = typeof flags == 'string' ? FS_modeStringToFlags(flags) : flags;\n        if (flags & 64) {\n          mode = typeof mode == 'undefined' ? 438 : mode;\n          mode = (mode & 4095) | 32768;\n        } else {\n          mode = 0;\n        }\n        var node;\n        if (typeof path == 'object') {\n          node = path;\n        } else {\n          path = PATH.normalize(path);\n          try {\n            var lookup = FS.lookupPath(path, {\n              follow: !(flags & 131072),\n            });\n            node = lookup.node;\n          } catch (e) {}\n        }\n\n        var created = false;\n        if (flags & 64) {\n          if (node) {\n            if (flags & 128) {\n              throw new FS.ErrnoError(20);\n            }\n          } else {\n            node = FS.mknod(path, mode, 0);\n            created = true;\n          }\n        }\n        if (!node) {\n          throw new FS.ErrnoError(44);\n        }\n\n        if (FS.isChrdev(node.mode)) {\n          flags &= ~512;\n        }\n\n        if (flags & 65536 && !FS.isDir(node.mode)) {\n          throw new FS.ErrnoError(54);\n        }\n\n        if (!created) {\n          var errCode = FS.mayOpen(node, flags);\n          if (errCode) {\n            throw new FS.ErrnoError(errCode);\n          }\n        }\n\n        if (flags & 512 && !created) {\n          FS.truncate(node, 0);\n        }\n\n        flags &= ~(128 | 512 | 131072);\n\n        var stream = FS.createStream({\n          node,\n          path: FS.getPath(node),\n          flags,\n          seekable: true,\n          position: 0,\n          stream_ops: node.stream_ops,\n\n          ungotten: [],\n          error: false,\n        });\n\n        if (stream.stream_ops.open) {\n          stream.stream_ops.open(stream);\n        }\n        if (Module['logReadFiles'] && !(flags & 1)) {\n          if (!(path in FS.readFiles)) {\n            FS.readFiles[path] = 1;\n          }\n        }\n        return stream;\n      },\n      close(stream) {\n        if (FS.isClosed(stream)) {\n          throw new FS.ErrnoError(8);\n        }\n        if (stream.getdents) stream.getdents = null;\n        try {\n          if (stream.stream_ops.close) {\n            stream.stream_ops.close(stream);\n          }\n        } catch (e) {\n          throw e;\n        } finally {\n          FS.closeStream(stream.fd);\n        }\n        stream.fd = null;\n      },\n      isClosed(stream) {\n        return stream.fd === null;\n      },\n      llseek(stream, offset, whence) {\n        if (FS.isClosed(stream)) {\n          throw new FS.ErrnoError(8);\n        }\n        if (!stream.seekable || !stream.stream_ops.llseek) {\n          throw new FS.ErrnoError(70);\n        }\n        if (whence != 0 && whence != 1 && whence != 2) {\n          throw new FS.ErrnoError(28);\n        }\n        stream.position = stream.stream_ops.llseek(stream, offset, whence);\n        stream.ungotten = [];\n        return stream.position;\n      },\n      read(stream, buffer, offset, length, position) {\n        if (length < 0 || position < 0) {\n          throw new FS.ErrnoError(28);\n        }\n        if (FS.isClosed(stream)) {\n          throw new FS.ErrnoError(8);\n        }\n        if ((stream.flags & 2097155) === 1) {\n          throw new FS.ErrnoError(8);\n        }\n        if (FS.isDir(stream.node.mode)) {\n          throw new FS.ErrnoError(31);\n        }\n        if (!stream.stream_ops.read) {\n          throw new FS.ErrnoError(28);\n        }\n        var seeking = typeof position != 'undefined';\n        if (!seeking) {\n          position = stream.position;\n        } else if (!stream.seekable) {\n          throw new FS.ErrnoError(70);\n        }\n        var bytesRead = stream.stream_ops.read(\n          stream,\n          buffer,\n          offset,\n          length,\n          position,\n        );\n        if (!seeking) stream.position += bytesRead;\n        return bytesRead;\n      },\n      write(stream, buffer, offset, length, position, canOwn) {\n        if (length < 0 || position < 0) {\n          throw new FS.ErrnoError(28);\n        }\n        if (FS.isClosed(stream)) {\n          throw new FS.ErrnoError(8);\n        }\n        if ((stream.flags & 2097155) === 0) {\n          throw new FS.ErrnoError(8);\n        }\n        if (FS.isDir(stream.node.mode)) {\n          throw new FS.ErrnoError(31);\n        }\n        if (!stream.stream_ops.write) {\n          throw new FS.ErrnoError(28);\n        }\n        if (stream.seekable && stream.flags & 1024) {\n          FS.llseek(stream, 0, 2);\n        }\n        var seeking = typeof position != 'undefined';\n        if (!seeking) {\n          position = stream.position;\n        } else if (!stream.seekable) {\n          throw new FS.ErrnoError(70);\n        }\n        var bytesWritten = stream.stream_ops.write(\n          stream,\n          buffer,\n          offset,\n          length,\n          position,\n          canOwn,\n        );\n        if (!seeking) stream.position += bytesWritten;\n        return bytesWritten;\n      },\n      allocate(stream, offset, length) {\n        if (FS.isClosed(stream)) {\n          throw new FS.ErrnoError(8);\n        }\n        if (offset < 0 || length <= 0) {\n          throw new FS.ErrnoError(28);\n        }\n        if ((stream.flags & 2097155) === 0) {\n          throw new FS.ErrnoError(8);\n        }\n        if (!FS.isFile(stream.node.mode) && !FS.isDir(stream.node.mode)) {\n          throw new FS.ErrnoError(43);\n        }\n        if (!stream.stream_ops.allocate) {\n          throw new FS.ErrnoError(138);\n        }\n        stream.stream_ops.allocate(stream, offset, length);\n      },\n      mmap(stream, length, position, prot, flags) {\n        if (\n          (prot & 2) !== 0 &&\n          (flags & 2) === 0 &&\n          (stream.flags & 2097155) !== 2\n        ) {\n          throw new FS.ErrnoError(2);\n        }\n        if ((stream.flags & 2097155) === 1) {\n          throw new FS.ErrnoError(2);\n        }\n        if (!stream.stream_ops.mmap) {\n          throw new FS.ErrnoError(43);\n        }\n        if (!length) {\n          throw new FS.ErrnoError(28);\n        }\n        return stream.stream_ops.mmap(stream, length, position, prot, flags);\n      },\n      msync(stream, buffer, offset, length, mmapFlags) {\n        if (!stream.stream_ops.msync) {\n          return 0;\n        }\n        return stream.stream_ops.msync(\n          stream,\n          buffer,\n          offset,\n          length,\n          mmapFlags,\n        );\n      },\n      ioctl(stream, cmd, arg) {\n        if (!stream.stream_ops.ioctl) {\n          throw new FS.ErrnoError(59);\n        }\n        return stream.stream_ops.ioctl(stream, cmd, arg);\n      },\n      readFile(path, opts = {}) {\n        opts.flags = opts.flags || 0;\n        opts.encoding = opts.encoding || 'binary';\n        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {\n          throw new Error(`Invalid encoding type \"${opts.encoding}\"`);\n        }\n        var ret;\n        var stream = FS.open(path, opts.flags);\n        var stat = FS.stat(path);\n        var length = stat.size;\n        var buf = new Uint8Array(length);\n        FS.read(stream, buf, 0, length, 0);\n        if (opts.encoding === 'utf8') {\n          ret = UTF8ArrayToString(buf);\n        } else if (opts.encoding === 'binary') {\n          ret = buf;\n        }\n        FS.close(stream);\n        return ret;\n      },\n      writeFile(path, data, opts = {}) {\n        opts.flags = opts.flags || 577;\n        var stream = FS.open(path, opts.flags, opts.mode);\n        if (typeof data == 'string') {\n          var buf = new Uint8Array(lengthBytesUTF8(data) + 1);\n          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);\n          FS.write(stream, buf, 0, actualNumBytes, undefined, opts.canOwn);\n        } else if (ArrayBuffer.isView(data)) {\n          FS.write(stream, data, 0, data.byteLength, undefined, opts.canOwn);\n        } else {\n          throw new Error('Unsupported data type');\n        }\n        FS.close(stream);\n      },\n      cwd: () => FS.currentPath,\n      chdir(path) {\n        var lookup = FS.lookupPath(path, { follow: true });\n        if (lookup.node === null) {\n          throw new FS.ErrnoError(44);\n        }\n        if (!FS.isDir(lookup.node.mode)) {\n          throw new FS.ErrnoError(54);\n        }\n        var errCode = FS.nodePermissions(lookup.node, 'x');\n        if (errCode) {\n          throw new FS.ErrnoError(errCode);\n        }\n        FS.currentPath = lookup.path;\n      },\n      createDefaultDirectories() {\n        FS.mkdir('/tmp');\n        FS.mkdir('/home');\n        FS.mkdir('/home/web_user');\n      },\n      createDefaultDevices() {\n        FS.mkdir('/dev');\n\n        FS.registerDevice(FS.makedev(1, 3), {\n          read: () => 0,\n          write: (stream, buffer, offset, length, pos) => length,\n        });\n        FS.mkdev('/dev/null', FS.makedev(1, 3));\n\n        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);\n        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);\n        FS.mkdev('/dev/tty', FS.makedev(5, 0));\n        FS.mkdev('/dev/tty1', FS.makedev(6, 0));\n\n        var randomBuffer = new Uint8Array(1024),\n          randomLeft = 0;\n        var randomByte = () => {\n          if (randomLeft === 0) {\n            randomLeft = randomFill(randomBuffer).byteLength;\n          }\n          return randomBuffer[--randomLeft];\n        };\n        FS.createDevice('/dev', 'random', randomByte);\n        FS.createDevice('/dev', 'urandom', randomByte);\n\n        FS.mkdir('/dev/shm');\n        FS.mkdir('/dev/shm/tmp');\n      },\n      createSpecialDirectories() {\n        FS.mkdir('/proc');\n        var proc_self = FS.mkdir('/proc/self');\n        FS.mkdir('/proc/self/fd');\n        FS.mount(\n          {\n            mount() {\n              var node = FS.createNode(proc_self, 'fd', 16384 | 511, 73);\n              node.node_ops = {\n                lookup(parent, name) {\n                  var fd = +name;\n                  var stream = FS.getStreamChecked(fd);\n                  var ret = {\n                    parent: null,\n                    mount: { mountpoint: 'fake' },\n                    node_ops: { readlink: () => stream.path },\n                  };\n                  ret.parent = ret;\n                  return ret;\n                },\n              };\n              return node;\n            },\n          },\n          {},\n          '/proc/self/fd',\n        );\n      },\n      createStandardStreams(input, output, error) {\n        if (input) {\n          FS.createDevice('/dev', 'stdin', input);\n        } else {\n          FS.symlink('/dev/tty', '/dev/stdin');\n        }\n        if (output) {\n          FS.createDevice('/dev', 'stdout', null, output);\n        } else {\n          FS.symlink('/dev/tty', '/dev/stdout');\n        }\n        if (error) {\n          FS.createDevice('/dev', 'stderr', null, error);\n        } else {\n          FS.symlink('/dev/tty1', '/dev/stderr');\n        }\n\n        var stdin = FS.open('/dev/stdin', 0);\n        var stdout = FS.open('/dev/stdout', 1);\n        var stderr = FS.open('/dev/stderr', 1);\n      },\n      staticInit() {\n        [44].forEach((code) => {\n          FS.genericErrors[code] = new FS.ErrnoError(code);\n          FS.genericErrors[code].stack = '<generic error, no stack>';\n        });\n\n        FS.nameTable = new Array(4096);\n\n        FS.mount(MEMFS, {}, '/');\n\n        FS.createDefaultDirectories();\n        FS.createDefaultDevices();\n        FS.createSpecialDirectories();\n\n        FS.filesystems = {\n          MEMFS: MEMFS,\n        };\n      },\n      init(input, output, error) {\n        FS.initialized = true;\n\n        input ??= Module['stdin'];\n        output ??= Module['stdout'];\n        error ??= Module['stderr'];\n\n        FS.createStandardStreams(input, output, error);\n      },\n      quit() {\n        FS.initialized = false;\n\n        for (var i = 0; i < FS.streams.length; i++) {\n          var stream = FS.streams[i];\n          if (!stream) {\n            continue;\n          }\n          FS.close(stream);\n        }\n      },\n      findObject(path, dontResolveLastLink) {\n        var ret = FS.analyzePath(path, dontResolveLastLink);\n        if (!ret.exists) {\n          return null;\n        }\n        return ret.object;\n      },\n      analyzePath(path, dontResolveLastLink) {\n        try {\n          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });\n          path = lookup.path;\n        } catch (e) {}\n        var ret = {\n          isRoot: false,\n          exists: false,\n          error: 0,\n          name: null,\n          path: null,\n          object: null,\n          parentExists: false,\n          parentPath: null,\n          parentObject: null,\n        };\n        try {\n          var lookup = FS.lookupPath(path, { parent: true });\n          ret.parentExists = true;\n          ret.parentPath = lookup.path;\n          ret.parentObject = lookup.node;\n          ret.name = PATH.basename(path);\n          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });\n          ret.exists = true;\n          ret.path = lookup.path;\n          ret.object = lookup.node;\n          ret.name = lookup.node.name;\n          ret.isRoot = lookup.path === '/';\n        } catch (e) {\n          ret.error = e.errno;\n        }\n        return ret;\n      },\n      createPath(parent, path, canRead, canWrite) {\n        parent = typeof parent == 'string' ? parent : FS.getPath(parent);\n        var parts = path.split('/').reverse();\n        while (parts.length) {\n          var part = parts.pop();\n          if (!part) continue;\n          var current = PATH.join2(parent, part);\n          try {\n            FS.mkdir(current);\n          } catch (e) {}\n          parent = current;\n        }\n        return current;\n      },\n      createFile(parent, name, properties, canRead, canWrite) {\n        var path = PATH.join2(\n          typeof parent == 'string' ? parent : FS.getPath(parent),\n          name,\n        );\n        var mode = FS_getMode(canRead, canWrite);\n        return FS.create(path, mode);\n      },\n      createDataFile(parent, name, data, canRead, canWrite, canOwn) {\n        var path = name;\n        if (parent) {\n          parent = typeof parent == 'string' ? parent : FS.getPath(parent);\n          path = name ? PATH.join2(parent, name) : parent;\n        }\n        var mode = FS_getMode(canRead, canWrite);\n        var node = FS.create(path, mode);\n        if (data) {\n          if (typeof data == 'string') {\n            var arr = new Array(data.length);\n            for (var i = 0, len = data.length; i < len; ++i)\n              arr[i] = data.charCodeAt(i);\n            data = arr;\n          }\n\n          FS.chmod(node, mode | 146);\n          var stream = FS.open(node, 577);\n          FS.write(stream, data, 0, data.length, 0, canOwn);\n          FS.close(stream);\n          FS.chmod(node, mode);\n        }\n      },\n      createDevice(parent, name, input, output) {\n        var path = PATH.join2(\n          typeof parent == 'string' ? parent : FS.getPath(parent),\n          name,\n        );\n        var mode = FS_getMode(!!input, !!output);\n        FS.createDevice.major ??= 64;\n        var dev = FS.makedev(FS.createDevice.major++, 0);\n\n        FS.registerDevice(dev, {\n          open(stream) {\n            stream.seekable = false;\n          },\n          close(stream) {\n            if (output?.buffer?.length) {\n              output(10);\n            }\n          },\n          read(stream, buffer, offset, length, pos) {\n            var bytesRead = 0;\n            for (var i = 0; i < length; i++) {\n              var result;\n              try {\n                result = input();\n              } catch (e) {\n                throw new FS.ErrnoError(29);\n              }\n              if (result === undefined && bytesRead === 0) {\n                throw new FS.ErrnoError(6);\n              }\n              if (result === null || result === undefined) break;\n              bytesRead++;\n              buffer[offset + i] = result;\n            }\n            if (bytesRead) {\n              stream.node.timestamp = Date.now();\n            }\n            return bytesRead;\n          },\n          write(stream, buffer, offset, length, pos) {\n            for (var i = 0; i < length; i++) {\n              try {\n                output(buffer[offset + i]);\n              } catch (e) {\n                throw new FS.ErrnoError(29);\n              }\n            }\n            if (length) {\n              stream.node.timestamp = Date.now();\n            }\n            return i;\n          },\n        });\n        return FS.mkdev(path, mode, dev);\n      },\n      forceLoadFile(obj) {\n        if (obj.isDevice || obj.isFolder || obj.link || obj.contents)\n          return true;\n        if (typeof XMLHttpRequest != 'undefined') {\n          throw new Error(\n            'Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.',\n          );\n        } else {\n          try {\n            obj.contents = readBinary(obj.url);\n            obj.usedBytes = obj.contents.length;\n          } catch (e) {\n            throw new FS.ErrnoError(29);\n          }\n        }\n      },\n      createLazyFile(parent, name, url, canRead, canWrite) {\n        class LazyUint8Array {\n          constructor() {\n            this.lengthKnown = false;\n            this.chunks = [];\n          }\n          get(idx) {\n            if (idx > this.length - 1 || idx < 0) {\n              return undefined;\n            }\n            var chunkOffset = idx % this.chunkSize;\n            var chunkNum = (idx / this.chunkSize) | 0;\n            return this.getter(chunkNum)[chunkOffset];\n          }\n          setDataGetter(getter) {\n            this.getter = getter;\n          }\n          cacheLength() {\n            var xhr = new XMLHttpRequest();\n            xhr.open('HEAD', url, false);\n            xhr.send(null);\n            if (\n              !((xhr.status >= 200 && xhr.status < 300) || xhr.status === 304)\n            )\n              throw new Error(\n                \"Couldn't load \" + url + '. Status: ' + xhr.status,\n              );\n            var datalength = Number(xhr.getResponseHeader('Content-length'));\n            var header;\n            var hasByteServing =\n              (header = xhr.getResponseHeader('Accept-Ranges')) &&\n              header === 'bytes';\n            var usesGzip =\n              (header = xhr.getResponseHeader('Content-Encoding')) &&\n              header === 'gzip';\n\n            var chunkSize = 1024 * 1024;\n\n            if (!hasByteServing) chunkSize = datalength;\n\n            var doXHR = (from, to) => {\n              if (from > to)\n                throw new Error(\n                  'invalid range (' +\n                    from +\n                    ', ' +\n                    to +\n                    ') or no bytes requested!',\n                );\n              if (to > datalength - 1)\n                throw new Error(\n                  'only ' + datalength + ' bytes available! programmer error!',\n                );\n\n              var xhr = new XMLHttpRequest();\n              xhr.open('GET', url, false);\n              if (datalength !== chunkSize)\n                xhr.setRequestHeader('Range', 'bytes=' + from + '-' + to);\n\n              xhr.responseType = 'arraybuffer';\n              if (xhr.overrideMimeType) {\n                xhr.overrideMimeType('text/plain; charset=x-user-defined');\n              }\n\n              xhr.send(null);\n              if (\n                !((xhr.status >= 200 && xhr.status < 300) || xhr.status === 304)\n              )\n                throw new Error(\n                  \"Couldn't load \" + url + '. Status: ' + xhr.status,\n                );\n              if (xhr.response !== undefined) {\n                return new Uint8Array(xhr.response || []);\n              }\n              return intArrayFromString(xhr.responseText || '', true);\n            };\n            var lazyArray = this;\n            lazyArray.setDataGetter((chunkNum) => {\n              var start = chunkNum * chunkSize;\n              var end = (chunkNum + 1) * chunkSize - 1;\n              end = Math.min(end, datalength - 1);\n              if (typeof lazyArray.chunks[chunkNum] == 'undefined') {\n                lazyArray.chunks[chunkNum] = doXHR(start, end);\n              }\n              if (typeof lazyArray.chunks[chunkNum] == 'undefined')\n                throw new Error('doXHR failed!');\n              return lazyArray.chunks[chunkNum];\n            });\n\n            if (usesGzip || !datalength) {\n              chunkSize = datalength = 1;\n              datalength = this.getter(0).length;\n              chunkSize = datalength;\n              out(\n                'LazyFiles on gzip forces download of the whole file when length is accessed',\n              );\n            }\n\n            this._length = datalength;\n            this._chunkSize = chunkSize;\n            this.lengthKnown = true;\n          }\n          get length() {\n            if (!this.lengthKnown) {\n              this.cacheLength();\n            }\n            return this._length;\n          }\n          get chunkSize() {\n            if (!this.lengthKnown) {\n              this.cacheLength();\n            }\n            return this._chunkSize;\n          }\n        }\n\n        if (typeof XMLHttpRequest != 'undefined') {\n          if (!ENVIRONMENT_IS_WORKER)\n            throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';\n          var lazyArray = new LazyUint8Array();\n          var properties = { isDevice: false, contents: lazyArray };\n        } else {\n          var properties = { isDevice: false, url: url };\n        }\n\n        var node = FS.createFile(parent, name, properties, canRead, canWrite);\n\n        if (properties.contents) {\n          node.contents = properties.contents;\n        } else if (properties.url) {\n          node.contents = null;\n          node.url = properties.url;\n        }\n\n        Object.defineProperties(node, {\n          usedBytes: {\n            get: function () {\n              return this.contents.length;\n            },\n          },\n        });\n\n        var stream_ops = {};\n        var keys = Object.keys(node.stream_ops);\n        keys.forEach((key) => {\n          var fn = node.stream_ops[key];\n          stream_ops[key] = (...args) => {\n            FS.forceLoadFile(node);\n            return fn(...args);\n          };\n        });\n        function writeChunks(stream, buffer, offset, length, position) {\n          var contents = stream.node.contents;\n          if (position >= contents.length) return 0;\n          var size = Math.min(contents.length - position, length);\n          if (contents.slice) {\n            for (var i = 0; i < size; i++) {\n              buffer[offset + i] = contents[position + i];\n            }\n          } else {\n            for (var i = 0; i < size; i++) {\n              buffer[offset + i] = contents.get(position + i);\n            }\n          }\n          return size;\n        }\n\n        stream_ops.read = (stream, buffer, offset, length, position) => {\n          FS.forceLoadFile(node);\n          return writeChunks(stream, buffer, offset, length, position);\n        };\n\n        stream_ops.mmap = (stream, length, position, prot, flags) => {\n          FS.forceLoadFile(node);\n          var ptr = mmapAlloc(length);\n          if (!ptr) {\n            throw new FS.ErrnoError(48);\n          }\n          writeChunks(stream, HEAP8, ptr, length, position);\n          return { ptr, allocated: true };\n        };\n        node.stream_ops = stream_ops;\n        return node;\n      },\n    };\n\n    var UTF8ToString = (ptr, maxBytesToRead) => {\n      return ptr ? UTF8ArrayToString(HEAPU8, ptr, maxBytesToRead) : '';\n    };\n    var SYSCALLS = {\n      DEFAULT_POLLMASK: 5,\n      calculateAt(dirfd, path, allowEmpty) {\n        if (PATH.isAbs(path)) {\n          return path;\n        }\n\n        var dir;\n        if (dirfd === -100) {\n          dir = FS.cwd();\n        } else {\n          var dirstream = SYSCALLS.getStreamFromFD(dirfd);\n          dir = dirstream.path;\n        }\n        if (path.length == 0) {\n          if (!allowEmpty) {\n            throw new FS.ErrnoError(44);\n          }\n          return dir;\n        }\n        return PATH.join2(dir, path);\n      },\n      doStat(func, path, buf) {\n        var stat = func(path);\n        HEAP32[buf >> 2] = stat.dev;\n        HEAP32[(buf + 4) >> 2] = stat.mode;\n        HEAPU32[(buf + 8) >> 2] = stat.nlink;\n        HEAP32[(buf + 12) >> 2] = stat.uid;\n        HEAP32[(buf + 16) >> 2] = stat.gid;\n        HEAP32[(buf + 20) >> 2] = stat.rdev;\n        HEAP64[(buf + 24) >> 3] = BigInt(stat.size);\n        HEAP32[(buf + 32) >> 2] = 4096;\n        HEAP32[(buf + 36) >> 2] = stat.blocks;\n        var atime = stat.atime.getTime();\n        var mtime = stat.mtime.getTime();\n        var ctime = stat.ctime.getTime();\n        HEAP64[(buf + 40) >> 3] = BigInt(Math.floor(atime / 1000));\n        HEAPU32[(buf + 48) >> 2] = (atime % 1000) * 1000 * 1000;\n        HEAP64[(buf + 56) >> 3] = BigInt(Math.floor(mtime / 1000));\n        HEAPU32[(buf + 64) >> 2] = (mtime % 1000) * 1000 * 1000;\n        HEAP64[(buf + 72) >> 3] = BigInt(Math.floor(ctime / 1000));\n        HEAPU32[(buf + 80) >> 2] = (ctime % 1000) * 1000 * 1000;\n        HEAP64[(buf + 88) >> 3] = BigInt(stat.ino);\n        return 0;\n      },\n      doMsync(addr, stream, len, flags, offset) {\n        if (!FS.isFile(stream.node.mode)) {\n          throw new FS.ErrnoError(43);\n        }\n        if (flags & 2) {\n          return 0;\n        }\n        var buffer = HEAPU8.slice(addr, addr + len);\n        FS.msync(stream, buffer, offset, len, flags);\n      },\n      getStreamFromFD(fd) {\n        var stream = FS.getStreamChecked(fd);\n        return stream;\n      },\n      varargs: undefined,\n      getStr(ptr) {\n        var ret = UTF8ToString(ptr);\n        return ret;\n      },\n    };\n    function ___syscall_chmod(path, mode) {\n      try {\n        path = SYSCALLS.getStr(path);\n        FS.chmod(path, mode);\n        return 0;\n      } catch (e) {\n        if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;\n        return -e.errno;\n      }\n    }\n\n    function ___syscall_faccessat(dirfd, path, amode, flags) {\n      try {\n        path = SYSCALLS.getStr(path);\n        path = SYSCALLS.calculateAt(dirfd, path);\n        if (amode & ~7) {\n          return -28;\n        }\n        var lookup = FS.lookupPath(path, { follow: true });\n        var node = lookup.node;\n        if (!node) {\n          return -44;\n        }\n        var perms = '';\n        if (amode & 4) perms += 'r';\n        if (amode & 2) perms += 'w';\n        if (amode & 1) perms += 'x';\n        if (perms && FS.nodePermissions(node, perms)) {\n          return -2;\n        }\n        return 0;\n      } catch (e) {\n        if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;\n        return -e.errno;\n      }\n    }\n\n    function ___syscall_fchmod(fd, mode) {\n      try {\n        FS.fchmod(fd, mode);\n        return 0;\n      } catch (e) {\n        if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;\n        return -e.errno;\n      }\n    }\n\n    function ___syscall_fchown32(fd, owner, group) {\n      try {\n        FS.fchown(fd, owner, group);\n        return 0;\n      } catch (e) {\n        if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;\n        return -e.errno;\n      }\n    }\n\n    function syscallGetVarargI() {\n      var ret = HEAP32[+SYSCALLS.varargs >> 2];\n      SYSCALLS.varargs += 4;\n      return ret;\n    }\n    var syscallGetVarargP = syscallGetVarargI;\n\n    function ___syscall_fcntl64(fd, cmd, varargs) {\n      SYSCALLS.varargs = varargs;\n      try {\n        var stream = SYSCALLS.getStreamFromFD(fd);\n        switch (cmd) {\n          case 0: {\n            var arg = syscallGetVarargI();\n            if (arg < 0) {\n              return -28;\n            }\n            while (FS.streams[arg]) {\n              arg++;\n            }\n            var newStream;\n            newStream = FS.dupStream(stream, arg);\n            return newStream.fd;\n          }\n          case 1:\n          case 2:\n            return 0;\n          case 3:\n            return stream.flags;\n          case 4: {\n            var arg = syscallGetVarargI();\n            stream.flags |= arg;\n            return 0;\n          }\n          case 12: {\n            var arg = syscallGetVarargP();\n            var offset = 0;\n\n            HEAP16[(arg + offset) >> 1] = 2;\n            return 0;\n          }\n          case 13:\n          case 14:\n            return 0;\n        }\n        return -28;\n      } catch (e) {\n        if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;\n        return -e.errno;\n      }\n    }\n\n    function ___syscall_fstat64(fd, buf) {\n      try {\n        var stream = SYSCALLS.getStreamFromFD(fd);\n        return SYSCALLS.doStat(FS.stat, stream.path, buf);\n      } catch (e) {\n        if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;\n        return -e.errno;\n      }\n    }\n\n    var INT53_MAX = 9007199254740992;\n\n    var INT53_MIN = -9007199254740992;\n    var bigintToI53Checked = (num) =>\n      num < INT53_MIN || num > INT53_MAX ? NaN : Number(num);\n    function ___syscall_ftruncate64(fd, length) {\n      length = bigintToI53Checked(length);\n\n      try {\n        if (isNaN(length)) return 61;\n        FS.ftruncate(fd, length);\n        return 0;\n      } catch (e) {\n        if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;\n        return -e.errno;\n      }\n    }\n\n    var stringToUTF8 = (str, outPtr, maxBytesToWrite) => {\n      return stringToUTF8Array(str, HEAPU8, outPtr, maxBytesToWrite);\n    };\n    function ___syscall_getcwd(buf, size) {\n      try {\n        if (size === 0) return -28;\n        var cwd = FS.cwd();\n        var cwdLengthInBytes = lengthBytesUTF8(cwd) + 1;\n        if (size < cwdLengthInBytes) return -68;\n        stringToUTF8(cwd, buf, size);\n        return cwdLengthInBytes;\n      } catch (e) {\n        if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;\n        return -e.errno;\n      }\n    }\n\n    function ___syscall_ioctl(fd, op, varargs) {\n      SYSCALLS.varargs = varargs;\n      try {\n        var stream = SYSCALLS.getStreamFromFD(fd);\n        switch (op) {\n          case 21509: {\n            if (!stream.tty) return -59;\n            return 0;\n          }\n          case 21505: {\n            if (!stream.tty) return -59;\n            if (stream.tty.ops.ioctl_tcgets) {\n              var termios = stream.tty.ops.ioctl_tcgets(stream);\n              var argp = syscallGetVarargP();\n              HEAP32[argp >> 2] = termios.c_iflag || 0;\n              HEAP32[(argp + 4) >> 2] = termios.c_oflag || 0;\n              HEAP32[(argp + 8) >> 2] = termios.c_cflag || 0;\n              HEAP32[(argp + 12) >> 2] = termios.c_lflag || 0;\n              for (var i = 0; i < 32; i++) {\n                HEAP8[argp + i + 17] = termios.c_cc[i] || 0;\n              }\n              return 0;\n            }\n            return 0;\n          }\n          case 21510:\n          case 21511:\n          case 21512: {\n            if (!stream.tty) return -59;\n            return 0;\n          }\n          case 21506:\n          case 21507:\n          case 21508: {\n            if (!stream.tty) return -59;\n            if (stream.tty.ops.ioctl_tcsets) {\n              var argp = syscallGetVarargP();\n              var c_iflag = HEAP32[argp >> 2];\n              var c_oflag = HEAP32[(argp + 4) >> 2];\n              var c_cflag = HEAP32[(argp + 8) >> 2];\n              var c_lflag = HEAP32[(argp + 12) >> 2];\n              var c_cc = [];\n              for (var i = 0; i < 32; i++) {\n                c_cc.push(HEAP8[argp + i + 17]);\n              }\n              return stream.tty.ops.ioctl_tcsets(stream.tty, op, {\n                c_iflag,\n                c_oflag,\n                c_cflag,\n                c_lflag,\n                c_cc,\n              });\n            }\n            return 0;\n          }\n          case 21519: {\n            if (!stream.tty) return -59;\n            var argp = syscallGetVarargP();\n            HEAP32[argp >> 2] = 0;\n            return 0;\n          }\n          case 21520: {\n            if (!stream.tty) return -59;\n            return -28;\n          }\n          case 21531: {\n            var argp = syscallGetVarargP();\n            return FS.ioctl(stream, op, argp);\n          }\n          case 21523: {\n            if (!stream.tty) return -59;\n            if (stream.tty.ops.ioctl_tiocgwinsz) {\n              var winsize = stream.tty.ops.ioctl_tiocgwinsz(stream.tty);\n              var argp = syscallGetVarargP();\n              HEAP16[argp >> 1] = winsize[0];\n              HEAP16[(argp + 2) >> 1] = winsize[1];\n            }\n            return 0;\n          }\n          case 21524: {\n            if (!stream.tty) return -59;\n            return 0;\n          }\n          case 21515: {\n            if (!stream.tty) return -59;\n            return 0;\n          }\n          default:\n            return -28;\n        }\n      } catch (e) {\n        if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;\n        return -e.errno;\n      }\n    }\n\n    function ___syscall_lstat64(path, buf) {\n      try {\n        path = SYSCALLS.getStr(path);\n        return SYSCALLS.doStat(FS.lstat, path, buf);\n      } catch (e) {\n        if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;\n        return -e.errno;\n      }\n    }\n\n    function ___syscall_mkdirat(dirfd, path, mode) {\n      try {\n        path = SYSCALLS.getStr(path);\n        path = SYSCALLS.calculateAt(dirfd, path);\n\n        path = PATH.normalize(path);\n        if (path[path.length - 1] === '/')\n          path = path.substr(0, path.length - 1);\n        FS.mkdir(path, mode, 0);\n        return 0;\n      } catch (e) {\n        if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;\n        return -e.errno;\n      }\n    }\n\n    function ___syscall_newfstatat(dirfd, path, buf, flags) {\n      try {\n        path = SYSCALLS.getStr(path);\n        var nofollow = flags & 256;\n        var allowEmpty = flags & 4096;\n        flags = flags & ~6400;\n        path = SYSCALLS.calculateAt(dirfd, path, allowEmpty);\n        return SYSCALLS.doStat(nofollow ? FS.lstat : FS.stat, path, buf);\n      } catch (e) {\n        if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;\n        return -e.errno;\n      }\n    }\n\n    function ___syscall_openat(dirfd, path, flags, varargs) {\n      SYSCALLS.varargs = varargs;\n      try {\n        path = SYSCALLS.getStr(path);\n        path = SYSCALLS.calculateAt(dirfd, path);\n        var mode = varargs ? syscallGetVarargI() : 0;\n        return FS.open(path, flags, mode).fd;\n      } catch (e) {\n        if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;\n        return -e.errno;\n      }\n    }\n\n    function ___syscall_readlinkat(dirfd, path, buf, bufsize) {\n      try {\n        path = SYSCALLS.getStr(path);\n        path = SYSCALLS.calculateAt(dirfd, path);\n        if (bufsize <= 0) return -28;\n        var ret = FS.readlink(path);\n\n        var len = Math.min(bufsize, lengthBytesUTF8(ret));\n        var endChar = HEAP8[buf + len];\n        stringToUTF8(ret, buf, bufsize + 1);\n\n        HEAP8[buf + len] = endChar;\n        return len;\n      } catch (e) {\n        if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;\n        return -e.errno;\n      }\n    }\n\n    function ___syscall_rmdir(path) {\n      try {\n        path = SYSCALLS.getStr(path);\n        FS.rmdir(path);\n        return 0;\n      } catch (e) {\n        if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;\n        return -e.errno;\n      }\n    }\n\n    function ___syscall_stat64(path, buf) {\n      try {\n        path = SYSCALLS.getStr(path);\n        return SYSCALLS.doStat(FS.stat, path, buf);\n      } catch (e) {\n        if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;\n        return -e.errno;\n      }\n    }\n\n    function ___syscall_unlinkat(dirfd, path, flags) {\n      try {\n        path = SYSCALLS.getStr(path);\n        path = SYSCALLS.calculateAt(dirfd, path);\n        if (flags === 0) {\n          FS.unlink(path);\n        } else if (flags === 512) {\n          FS.rmdir(path);\n        } else {\n          abort('Invalid flags passed to unlinkat');\n        }\n        return 0;\n      } catch (e) {\n        if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;\n        return -e.errno;\n      }\n    }\n\n    var readI53FromI64 = (ptr) => {\n      return HEAPU32[ptr >> 2] + HEAP32[(ptr + 4) >> 2] * 4294967296;\n    };\n\n    function ___syscall_utimensat(dirfd, path, times, flags) {\n      try {\n        path = SYSCALLS.getStr(path);\n        path = SYSCALLS.calculateAt(dirfd, path, true);\n        var now = Date.now(),\n          atime,\n          mtime;\n        if (!times) {\n          atime = now;\n          mtime = now;\n        } else {\n          var seconds = readI53FromI64(times);\n          var nanoseconds = HEAP32[(times + 8) >> 2];\n          if (nanoseconds == 1073741823) {\n            atime = now;\n          } else if (nanoseconds == 1073741822) {\n            atime = -1;\n          } else {\n            atime = seconds * 1000 + nanoseconds / (1000 * 1000);\n          }\n          times += 16;\n          seconds = readI53FromI64(times);\n          nanoseconds = HEAP32[(times + 8) >> 2];\n          if (nanoseconds == 1073741823) {\n            mtime = now;\n          } else if (nanoseconds == 1073741822) {\n            mtime = -1;\n          } else {\n            mtime = seconds * 1000 + nanoseconds / (1000 * 1000);\n          }\n        }\n\n        if (mtime != -1 || atime != -1) {\n          FS.utime(path, atime, mtime);\n        }\n        return 0;\n      } catch (e) {\n        if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;\n        return -e.errno;\n      }\n    }\n\n    var nowIsMonotonic = 1;\n    var __emscripten_get_now_is_monotonic = () => nowIsMonotonic;\n\n    var isLeapYear = (year) =>\n      year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);\n\n    var MONTH_DAYS_LEAP_CUMULATIVE = [\n      0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335,\n    ];\n\n    var MONTH_DAYS_REGULAR_CUMULATIVE = [\n      0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334,\n    ];\n    var ydayFromDate = (date) => {\n      var leap = isLeapYear(date.getFullYear());\n      var monthDaysCumulative = leap\n        ? MONTH_DAYS_LEAP_CUMULATIVE\n        : MONTH_DAYS_REGULAR_CUMULATIVE;\n      var yday = monthDaysCumulative[date.getMonth()] + date.getDate() - 1;\n\n      return yday;\n    };\n\n    function __localtime_js(time, tmPtr) {\n      time = bigintToI53Checked(time);\n\n      var date = new Date(time * 1000);\n      HEAP32[tmPtr >> 2] = date.getSeconds();\n      HEAP32[(tmPtr + 4) >> 2] = date.getMinutes();\n      HEAP32[(tmPtr + 8) >> 2] = date.getHours();\n      HEAP32[(tmPtr + 12) >> 2] = date.getDate();\n      HEAP32[(tmPtr + 16) >> 2] = date.getMonth();\n      HEAP32[(tmPtr + 20) >> 2] = date.getFullYear() - 1900;\n      HEAP32[(tmPtr + 24) >> 2] = date.getDay();\n\n      var yday = ydayFromDate(date) | 0;\n      HEAP32[(tmPtr + 28) >> 2] = yday;\n      HEAP32[(tmPtr + 36) >> 2] = -(date.getTimezoneOffset() * 60);\n\n      var start = new Date(date.getFullYear(), 0, 1);\n      var summerOffset = new Date(date.getFullYear(), 6, 1).getTimezoneOffset();\n      var winterOffset = start.getTimezoneOffset();\n      var dst =\n        (summerOffset != winterOffset &&\n          date.getTimezoneOffset() == Math.min(winterOffset, summerOffset)) | 0;\n      HEAP32[(tmPtr + 32) >> 2] = dst;\n    }\n\n    function __mmap_js(len, prot, flags, fd, offset, allocated, addr) {\n      offset = bigintToI53Checked(offset);\n\n      try {\n        if (isNaN(offset)) return 61;\n        var stream = SYSCALLS.getStreamFromFD(fd);\n        var res = FS.mmap(stream, len, offset, prot, flags);\n        var ptr = res.ptr;\n        HEAP32[allocated >> 2] = res.allocated;\n        HEAPU32[addr >> 2] = ptr;\n        return 0;\n      } catch (e) {\n        if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;\n        return -e.errno;\n      }\n    }\n\n    function __munmap_js(addr, len, prot, flags, fd, offset) {\n      offset = bigintToI53Checked(offset);\n\n      try {\n        var stream = SYSCALLS.getStreamFromFD(fd);\n        if (prot & 2) {\n          SYSCALLS.doMsync(addr, stream, len, flags, offset);\n        }\n      } catch (e) {\n        if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;\n        return -e.errno;\n      }\n    }\n\n    var __tzset_js = (timezone, daylight, std_name, dst_name) => {\n      var currentYear = new Date().getFullYear();\n      var winter = new Date(currentYear, 0, 1);\n      var summer = new Date(currentYear, 6, 1);\n      var winterOffset = winter.getTimezoneOffset();\n      var summerOffset = summer.getTimezoneOffset();\n\n      var stdTimezoneOffset = Math.max(winterOffset, summerOffset);\n\n      HEAPU32[timezone >> 2] = stdTimezoneOffset * 60;\n\n      HEAP32[daylight >> 2] = Number(winterOffset != summerOffset);\n\n      var extractZone = (timezoneOffset) => {\n        var sign = timezoneOffset >= 0 ? '-' : '+';\n\n        var absOffset = Math.abs(timezoneOffset);\n        var hours = String(Math.floor(absOffset / 60)).padStart(2, '0');\n        var minutes = String(absOffset % 60).padStart(2, '0');\n\n        return `UTC${sign}${hours}${minutes}`;\n      };\n\n      var winterName = extractZone(winterOffset);\n      var summerName = extractZone(summerOffset);\n      if (summerOffset < winterOffset) {\n        stringToUTF8(winterName, std_name, 17);\n        stringToUTF8(summerName, dst_name, 17);\n      } else {\n        stringToUTF8(winterName, dst_name, 17);\n        stringToUTF8(summerName, std_name, 17);\n      }\n    };\n\n    var _emscripten_date_now = () => Date.now();\n\n    var _emscripten_get_now = () => performance.now();\n\n    var getHeapMax = () => 2147483648;\n\n    var growMemory = (size) => {\n      var b = wasmMemory.buffer;\n      var pages = ((size - b.byteLength + 65535) / 65536) | 0;\n      try {\n        wasmMemory.grow(pages);\n        updateMemoryViews();\n        return 1;\n      } catch (e) {}\n    };\n    var _emscripten_resize_heap = (requestedSize) => {\n      var oldSize = HEAPU8.length;\n\n      requestedSize >>>= 0;\n\n      var maxHeapSize = getHeapMax();\n      if (requestedSize > maxHeapSize) {\n        return false;\n      }\n\n      for (var cutDown = 1; cutDown <= 4; cutDown *= 2) {\n        var overGrownHeapSize = oldSize * (1 + 0.2 / cutDown);\n\n        overGrownHeapSize = Math.min(\n          overGrownHeapSize,\n          requestedSize + 100663296,\n        );\n\n        var newSize = Math.min(\n          maxHeapSize,\n          alignMemory(Math.max(requestedSize, overGrownHeapSize), 65536),\n        );\n\n        var replacement = growMemory(newSize);\n        if (replacement) {\n          return true;\n        }\n      }\n      return false;\n    };\n\n    var ENV = {};\n\n    var getExecutableName = () => {\n      return thisProgram || './this.program';\n    };\n    var getEnvStrings = () => {\n      if (!getEnvStrings.strings) {\n        var lang =\n          (\n            (typeof navigator == 'object' &&\n              navigator.languages &&\n              navigator.languages[0]) ||\n            'C'\n          ).replace('-', '_') + '.UTF-8';\n        var env = {\n          USER: 'web_user',\n          LOGNAME: 'web_user',\n          PATH: '/',\n          PWD: '/',\n          HOME: '/home/web_user',\n          LANG: lang,\n          _: getExecutableName(),\n        };\n\n        for (var x in ENV) {\n          if (ENV[x] === undefined) delete env[x];\n          else env[x] = ENV[x];\n        }\n        var strings = [];\n        for (var x in env) {\n          strings.push(`${x}=${env[x]}`);\n        }\n        getEnvStrings.strings = strings;\n      }\n      return getEnvStrings.strings;\n    };\n\n    var stringToAscii = (str, buffer) => {\n      for (var i = 0; i < str.length; ++i) {\n        HEAP8[buffer++] = str.charCodeAt(i);\n      }\n\n      HEAP8[buffer] = 0;\n    };\n    var _environ_get = (__environ, environ_buf) => {\n      var bufSize = 0;\n      getEnvStrings().forEach((string, i) => {\n        var ptr = environ_buf + bufSize;\n        HEAPU32[(__environ + i * 4) >> 2] = ptr;\n        stringToAscii(string, ptr);\n        bufSize += string.length + 1;\n      });\n      return 0;\n    };\n\n    var _environ_sizes_get = (penviron_count, penviron_buf_size) => {\n      var strings = getEnvStrings();\n      HEAPU32[penviron_count >> 2] = strings.length;\n      var bufSize = 0;\n      strings.forEach((string) => (bufSize += string.length + 1));\n      HEAPU32[penviron_buf_size >> 2] = bufSize;\n      return 0;\n    };\n\n    function _fd_close(fd) {\n      try {\n        var stream = SYSCALLS.getStreamFromFD(fd);\n        FS.close(stream);\n        return 0;\n      } catch (e) {\n        if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;\n        return e.errno;\n      }\n    }\n\n    function _fd_fdstat_get(fd, pbuf) {\n      try {\n        var rightsBase = 0;\n        var rightsInheriting = 0;\n        var flags = 0;\n        {\n          var stream = SYSCALLS.getStreamFromFD(fd);\n\n          var type = stream.tty\n            ? 2\n            : FS.isDir(stream.mode)\n              ? 3\n              : FS.isLink(stream.mode)\n                ? 7\n                : 4;\n        }\n        HEAP8[pbuf] = type;\n        HEAP16[(pbuf + 2) >> 1] = flags;\n        HEAP64[(pbuf + 8) >> 3] = BigInt(rightsBase);\n        HEAP64[(pbuf + 16) >> 3] = BigInt(rightsInheriting);\n        return 0;\n      } catch (e) {\n        if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;\n        return e.errno;\n      }\n    }\n\n    var doReadv = (stream, iov, iovcnt, offset) => {\n      var ret = 0;\n      for (var i = 0; i < iovcnt; i++) {\n        var ptr = HEAPU32[iov >> 2];\n        var len = HEAPU32[(iov + 4) >> 2];\n        iov += 8;\n        var curr = FS.read(stream, HEAP8, ptr, len, offset);\n        if (curr < 0) return -1;\n        ret += curr;\n        if (curr < len) break;\n        if (typeof offset != 'undefined') {\n          offset += curr;\n        }\n      }\n      return ret;\n    };\n\n    function _fd_read(fd, iov, iovcnt, pnum) {\n      try {\n        var stream = SYSCALLS.getStreamFromFD(fd);\n        var num = doReadv(stream, iov, iovcnt);\n        HEAPU32[pnum >> 2] = num;\n        return 0;\n      } catch (e) {\n        if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;\n        return e.errno;\n      }\n    }\n\n    function _fd_seek(fd, offset, whence, newOffset) {\n      offset = bigintToI53Checked(offset);\n\n      try {\n        if (isNaN(offset)) return 61;\n        var stream = SYSCALLS.getStreamFromFD(fd);\n        FS.llseek(stream, offset, whence);\n        HEAP64[newOffset >> 3] = BigInt(stream.position);\n        if (stream.getdents && offset === 0 && whence === 0)\n          stream.getdents = null;\n        return 0;\n      } catch (e) {\n        if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;\n        return e.errno;\n      }\n    }\n\n    function _fd_sync(fd) {\n      try {\n        var stream = SYSCALLS.getStreamFromFD(fd);\n        if (stream.stream_ops?.fsync) {\n          return stream.stream_ops.fsync(stream);\n        }\n        return 0;\n      } catch (e) {\n        if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;\n        return e.errno;\n      }\n    }\n\n    var doWritev = (stream, iov, iovcnt, offset) => {\n      var ret = 0;\n      for (var i = 0; i < iovcnt; i++) {\n        var ptr = HEAPU32[iov >> 2];\n        var len = HEAPU32[(iov + 4) >> 2];\n        iov += 8;\n        var curr = FS.write(stream, HEAP8, ptr, len, offset);\n        if (curr < 0) return -1;\n        ret += curr;\n        if (curr < len) {\n          break;\n        }\n        if (typeof offset != 'undefined') {\n          offset += curr;\n        }\n      }\n      return ret;\n    };\n\n    function _fd_write(fd, iov, iovcnt, pnum) {\n      try {\n        var stream = SYSCALLS.getStreamFromFD(fd);\n        var num = doWritev(stream, iov, iovcnt);\n        HEAPU32[pnum >> 2] = num;\n        return 0;\n      } catch (e) {\n        if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;\n        return e.errno;\n      }\n    }\n\n    FS.createPreloadedFile = FS_createPreloadedFile;\n    FS.staticInit();\n\n    var wasmImports = {\n      __syscall_chmod: ___syscall_chmod,\n\n      __syscall_faccessat: ___syscall_faccessat,\n\n      __syscall_fchmod: ___syscall_fchmod,\n\n      __syscall_fchown32: ___syscall_fchown32,\n\n      __syscall_fcntl64: ___syscall_fcntl64,\n\n      __syscall_fstat64: ___syscall_fstat64,\n\n      __syscall_ftruncate64: ___syscall_ftruncate64,\n\n      __syscall_getcwd: ___syscall_getcwd,\n\n      __syscall_ioctl: ___syscall_ioctl,\n\n      __syscall_lstat64: ___syscall_lstat64,\n\n      __syscall_mkdirat: ___syscall_mkdirat,\n\n      __syscall_newfstatat: ___syscall_newfstatat,\n\n      __syscall_openat: ___syscall_openat,\n\n      __syscall_readlinkat: ___syscall_readlinkat,\n\n      __syscall_rmdir: ___syscall_rmdir,\n\n      __syscall_stat64: ___syscall_stat64,\n\n      __syscall_unlinkat: ___syscall_unlinkat,\n\n      __syscall_utimensat: ___syscall_utimensat,\n\n      _emscripten_get_now_is_monotonic: __emscripten_get_now_is_monotonic,\n\n      _localtime_js: __localtime_js,\n\n      _mmap_js: __mmap_js,\n\n      _munmap_js: __munmap_js,\n\n      _tzset_js: __tzset_js,\n\n      emscripten_date_now: _emscripten_date_now,\n\n      emscripten_get_now: _emscripten_get_now,\n\n      emscripten_resize_heap: _emscripten_resize_heap,\n\n      environ_get: _environ_get,\n\n      environ_sizes_get: _environ_sizes_get,\n\n      fd_close: _fd_close,\n\n      fd_fdstat_get: _fd_fdstat_get,\n\n      fd_read: _fd_read,\n\n      fd_seek: _fd_seek,\n\n      fd_sync: _fd_sync,\n\n      fd_write: _fd_write,\n\n      memory: wasmMemory,\n    };\n    var wasmExports = createWasm();\n    var ___wasm_call_ctors = () =>\n      (___wasm_call_ctors = wasmExports['__wasm_call_ctors'])();\n    var _sqlite3_status64 = (Module['_sqlite3_status64'] = (a0, a1, a2, a3) =>\n      (_sqlite3_status64 = Module['_sqlite3_status64'] =\n        wasmExports['sqlite3_status64'])(a0, a1, a2, a3));\n    var _sqlite3_status = (Module['_sqlite3_status'] = (a0, a1, a2, a3) =>\n      (_sqlite3_status = Module['_sqlite3_status'] =\n        wasmExports['sqlite3_status'])(a0, a1, a2, a3));\n    var _sqlite3_db_status = (Module['_sqlite3_db_status'] = (\n      a0,\n      a1,\n      a2,\n      a3,\n      a4,\n    ) =>\n      (_sqlite3_db_status = Module['_sqlite3_db_status'] =\n        wasmExports['sqlite3_db_status'])(a0, a1, a2, a3, a4));\n    var _sqlite3_msize = (Module['_sqlite3_msize'] = (a0) =>\n      (_sqlite3_msize = Module['_sqlite3_msize'] =\n        wasmExports['sqlite3_msize'])(a0));\n    var _sqlite3_vfs_find = (Module['_sqlite3_vfs_find'] = (a0) =>\n      (_sqlite3_vfs_find = Module['_sqlite3_vfs_find'] =\n        wasmExports['sqlite3_vfs_find'])(a0));\n    var _sqlite3_initialize = (Module['_sqlite3_initialize'] = () =>\n      (_sqlite3_initialize = Module['_sqlite3_initialize'] =\n        wasmExports['sqlite3_initialize'])());\n    var _sqlite3_malloc = (Module['_sqlite3_malloc'] = (a0) =>\n      (_sqlite3_malloc = Module['_sqlite3_malloc'] =\n        wasmExports['sqlite3_malloc'])(a0));\n    var _sqlite3_free = (Module['_sqlite3_free'] = (a0) =>\n      (_sqlite3_free = Module['_sqlite3_free'] = wasmExports['sqlite3_free'])(\n        a0,\n      ));\n    var _sqlite3_vfs_register = (Module['_sqlite3_vfs_register'] = (a0, a1) =>\n      (_sqlite3_vfs_register = Module['_sqlite3_vfs_register'] =\n        wasmExports['sqlite3_vfs_register'])(a0, a1));\n    var _sqlite3_vfs_unregister = (Module['_sqlite3_vfs_unregister'] = (a0) =>\n      (_sqlite3_vfs_unregister = Module['_sqlite3_vfs_unregister'] =\n        wasmExports['sqlite3_vfs_unregister'])(a0));\n    var _sqlite3_malloc64 = (Module['_sqlite3_malloc64'] = (a0) =>\n      (_sqlite3_malloc64 = Module['_sqlite3_malloc64'] =\n        wasmExports['sqlite3_malloc64'])(a0));\n    var _sqlite3_realloc = (Module['_sqlite3_realloc'] = (a0, a1) =>\n      (_sqlite3_realloc = Module['_sqlite3_realloc'] =\n        wasmExports['sqlite3_realloc'])(a0, a1));\n    var _sqlite3_realloc64 = (Module['_sqlite3_realloc64'] = (a0, a1) =>\n      (_sqlite3_realloc64 = Module['_sqlite3_realloc64'] =\n        wasmExports['sqlite3_realloc64'])(a0, a1));\n    var _sqlite3_value_text = (Module['_sqlite3_value_text'] = (a0) =>\n      (_sqlite3_value_text = Module['_sqlite3_value_text'] =\n        wasmExports['sqlite3_value_text'])(a0));\n    var _sqlite3_randomness = (Module['_sqlite3_randomness'] = (a0, a1) =>\n      (_sqlite3_randomness = Module['_sqlite3_randomness'] =\n        wasmExports['sqlite3_randomness'])(a0, a1));\n    var _sqlite3_stricmp = (Module['_sqlite3_stricmp'] = (a0, a1) =>\n      (_sqlite3_stricmp = Module['_sqlite3_stricmp'] =\n        wasmExports['sqlite3_stricmp'])(a0, a1));\n    var _sqlite3_strnicmp = (Module['_sqlite3_strnicmp'] = (a0, a1, a2) =>\n      (_sqlite3_strnicmp = Module['_sqlite3_strnicmp'] =\n        wasmExports['sqlite3_strnicmp'])(a0, a1, a2));\n    var _sqlite3_uri_parameter = (Module['_sqlite3_uri_parameter'] = (a0, a1) =>\n      (_sqlite3_uri_parameter = Module['_sqlite3_uri_parameter'] =\n        wasmExports['sqlite3_uri_parameter'])(a0, a1));\n    var _sqlite3_uri_boolean = (Module['_sqlite3_uri_boolean'] = (a0, a1, a2) =>\n      (_sqlite3_uri_boolean = Module['_sqlite3_uri_boolean'] =\n        wasmExports['sqlite3_uri_boolean'])(a0, a1, a2));\n    var _sqlite3_serialize = (Module['_sqlite3_serialize'] = (a0, a1, a2, a3) =>\n      (_sqlite3_serialize = Module['_sqlite3_serialize'] =\n        wasmExports['sqlite3_serialize'])(a0, a1, a2, a3));\n    var _sqlite3_prepare_v2 = (Module['_sqlite3_prepare_v2'] = (\n      a0,\n      a1,\n      a2,\n      a3,\n      a4,\n    ) =>\n      (_sqlite3_prepare_v2 = Module['_sqlite3_prepare_v2'] =\n        wasmExports['sqlite3_prepare_v2'])(a0, a1, a2, a3, a4));\n    var _sqlite3_step = (Module['_sqlite3_step'] = (a0) =>\n      (_sqlite3_step = Module['_sqlite3_step'] = wasmExports['sqlite3_step'])(\n        a0,\n      ));\n    var _sqlite3_column_int64 = (Module['_sqlite3_column_int64'] = (a0, a1) =>\n      (_sqlite3_column_int64 = Module['_sqlite3_column_int64'] =\n        wasmExports['sqlite3_column_int64'])(a0, a1));\n    var _sqlite3_reset = (Module['_sqlite3_reset'] = (a0) =>\n      (_sqlite3_reset = Module['_sqlite3_reset'] =\n        wasmExports['sqlite3_reset'])(a0));\n    var _sqlite3_exec = (Module['_sqlite3_exec'] = (a0, a1, a2, a3, a4) =>\n      (_sqlite3_exec = Module['_sqlite3_exec'] = wasmExports['sqlite3_exec'])(\n        a0,\n        a1,\n        a2,\n        a3,\n        a4,\n      ));\n    var _sqlite3_column_int = (Module['_sqlite3_column_int'] = (a0, a1) =>\n      (_sqlite3_column_int = Module['_sqlite3_column_int'] =\n        wasmExports['sqlite3_column_int'])(a0, a1));\n    var _sqlite3_finalize = (Module['_sqlite3_finalize'] = (a0) =>\n      (_sqlite3_finalize = Module['_sqlite3_finalize'] =\n        wasmExports['sqlite3_finalize'])(a0));\n    var _sqlite3_file_control = (Module['_sqlite3_file_control'] = (\n      a0,\n      a1,\n      a2,\n      a3,\n    ) =>\n      (_sqlite3_file_control = Module['_sqlite3_file_control'] =\n        wasmExports['sqlite3_file_control'])(a0, a1, a2, a3));\n    var _sqlite3_column_name = (Module['_sqlite3_column_name'] = (a0, a1) =>\n      (_sqlite3_column_name = Module['_sqlite3_column_name'] =\n        wasmExports['sqlite3_column_name'])(a0, a1));\n    var _sqlite3_column_text = (Module['_sqlite3_column_text'] = (a0, a1) =>\n      (_sqlite3_column_text = Module['_sqlite3_column_text'] =\n        wasmExports['sqlite3_column_text'])(a0, a1));\n    var _sqlite3_column_type = (Module['_sqlite3_column_type'] = (a0, a1) =>\n      (_sqlite3_column_type = Module['_sqlite3_column_type'] =\n        wasmExports['sqlite3_column_type'])(a0, a1));\n    var _sqlite3_errmsg = (Module['_sqlite3_errmsg'] = (a0) =>\n      (_sqlite3_errmsg = Module['_sqlite3_errmsg'] =\n        wasmExports['sqlite3_errmsg'])(a0));\n    var _sqlite3_deserialize = (Module['_sqlite3_deserialize'] = (\n      a0,\n      a1,\n      a2,\n      a3,\n      a4,\n      a5,\n    ) =>\n      (_sqlite3_deserialize = Module['_sqlite3_deserialize'] =\n        wasmExports['sqlite3_deserialize'])(a0, a1, a2, a3, a4, a5));\n    var _sqlite3_clear_bindings = (Module['_sqlite3_clear_bindings'] = (a0) =>\n      (_sqlite3_clear_bindings = Module['_sqlite3_clear_bindings'] =\n        wasmExports['sqlite3_clear_bindings'])(a0));\n    var _sqlite3_value_blob = (Module['_sqlite3_value_blob'] = (a0) =>\n      (_sqlite3_value_blob = Module['_sqlite3_value_blob'] =\n        wasmExports['sqlite3_value_blob'])(a0));\n    var _sqlite3_value_bytes = (Module['_sqlite3_value_bytes'] = (a0) =>\n      (_sqlite3_value_bytes = Module['_sqlite3_value_bytes'] =\n        wasmExports['sqlite3_value_bytes'])(a0));\n    var _sqlite3_value_double = (Module['_sqlite3_value_double'] = (a0) =>\n      (_sqlite3_value_double = Module['_sqlite3_value_double'] =\n        wasmExports['sqlite3_value_double'])(a0));\n    var _sqlite3_value_int = (Module['_sqlite3_value_int'] = (a0) =>\n      (_sqlite3_value_int = Module['_sqlite3_value_int'] =\n        wasmExports['sqlite3_value_int'])(a0));\n    var _sqlite3_value_int64 = (Module['_sqlite3_value_int64'] = (a0) =>\n      (_sqlite3_value_int64 = Module['_sqlite3_value_int64'] =\n        wasmExports['sqlite3_value_int64'])(a0));\n    var _sqlite3_value_subtype = (Module['_sqlite3_value_subtype'] = (a0) =>\n      (_sqlite3_value_subtype = Module['_sqlite3_value_subtype'] =\n        wasmExports['sqlite3_value_subtype'])(a0));\n    var _sqlite3_value_pointer = (Module['_sqlite3_value_pointer'] = (a0, a1) =>\n      (_sqlite3_value_pointer = Module['_sqlite3_value_pointer'] =\n        wasmExports['sqlite3_value_pointer'])(a0, a1));\n    var _sqlite3_value_type = (Module['_sqlite3_value_type'] = (a0) =>\n      (_sqlite3_value_type = Module['_sqlite3_value_type'] =\n        wasmExports['sqlite3_value_type'])(a0));\n    var _sqlite3_value_nochange = (Module['_sqlite3_value_nochange'] = (a0) =>\n      (_sqlite3_value_nochange = Module['_sqlite3_value_nochange'] =\n        wasmExports['sqlite3_value_nochange'])(a0));\n    var _sqlite3_value_frombind = (Module['_sqlite3_value_frombind'] = (a0) =>\n      (_sqlite3_value_frombind = Module['_sqlite3_value_frombind'] =\n        wasmExports['sqlite3_value_frombind'])(a0));\n    var _sqlite3_value_dup = (Module['_sqlite3_value_dup'] = (a0) =>\n      (_sqlite3_value_dup = Module['_sqlite3_value_dup'] =\n        wasmExports['sqlite3_value_dup'])(a0));\n    var _sqlite3_value_free = (Module['_sqlite3_value_free'] = (a0) =>\n      (_sqlite3_value_free = Module['_sqlite3_value_free'] =\n        wasmExports['sqlite3_value_free'])(a0));\n    var _sqlite3_result_blob = (Module['_sqlite3_result_blob'] = (\n      a0,\n      a1,\n      a2,\n      a3,\n    ) =>\n      (_sqlite3_result_blob = Module['_sqlite3_result_blob'] =\n        wasmExports['sqlite3_result_blob'])(a0, a1, a2, a3));\n    var _sqlite3_result_error_toobig = (Module['_sqlite3_result_error_toobig'] =\n      (a0) =>\n        (_sqlite3_result_error_toobig = Module['_sqlite3_result_error_toobig'] =\n          wasmExports['sqlite3_result_error_toobig'])(a0));\n    var _sqlite3_result_error_nomem = (Module['_sqlite3_result_error_nomem'] = (\n      a0,\n    ) =>\n      (_sqlite3_result_error_nomem = Module['_sqlite3_result_error_nomem'] =\n        wasmExports['sqlite3_result_error_nomem'])(a0));\n    var _sqlite3_result_double = (Module['_sqlite3_result_double'] = (a0, a1) =>\n      (_sqlite3_result_double = Module['_sqlite3_result_double'] =\n        wasmExports['sqlite3_result_double'])(a0, a1));\n    var _sqlite3_result_error = (Module['_sqlite3_result_error'] = (\n      a0,\n      a1,\n      a2,\n    ) =>\n      (_sqlite3_result_error = Module['_sqlite3_result_error'] =\n        wasmExports['sqlite3_result_error'])(a0, a1, a2));\n    var _sqlite3_result_int = (Module['_sqlite3_result_int'] = (a0, a1) =>\n      (_sqlite3_result_int = Module['_sqlite3_result_int'] =\n        wasmExports['sqlite3_result_int'])(a0, a1));\n    var _sqlite3_result_int64 = (Module['_sqlite3_result_int64'] = (a0, a1) =>\n      (_sqlite3_result_int64 = Module['_sqlite3_result_int64'] =\n        wasmExports['sqlite3_result_int64'])(a0, a1));\n    var _sqlite3_result_null = (Module['_sqlite3_result_null'] = (a0) =>\n      (_sqlite3_result_null = Module['_sqlite3_result_null'] =\n        wasmExports['sqlite3_result_null'])(a0));\n    var _sqlite3_result_pointer = (Module['_sqlite3_result_pointer'] = (\n      a0,\n      a1,\n      a2,\n      a3,\n    ) =>\n      (_sqlite3_result_pointer = Module['_sqlite3_result_pointer'] =\n        wasmExports['sqlite3_result_pointer'])(a0, a1, a2, a3));\n    var _sqlite3_result_subtype = (Module['_sqlite3_result_subtype'] = (\n      a0,\n      a1,\n    ) =>\n      (_sqlite3_result_subtype = Module['_sqlite3_result_subtype'] =\n        wasmExports['sqlite3_result_subtype'])(a0, a1));\n    var _sqlite3_result_text = (Module['_sqlite3_result_text'] = (\n      a0,\n      a1,\n      a2,\n      a3,\n    ) =>\n      (_sqlite3_result_text = Module['_sqlite3_result_text'] =\n        wasmExports['sqlite3_result_text'])(a0, a1, a2, a3));\n    var _sqlite3_result_zeroblob = (Module['_sqlite3_result_zeroblob'] = (\n      a0,\n      a1,\n    ) =>\n      (_sqlite3_result_zeroblob = Module['_sqlite3_result_zeroblob'] =\n        wasmExports['sqlite3_result_zeroblob'])(a0, a1));\n    var _sqlite3_result_zeroblob64 = (Module['_sqlite3_result_zeroblob64'] = (\n      a0,\n      a1,\n    ) =>\n      (_sqlite3_result_zeroblob64 = Module['_sqlite3_result_zeroblob64'] =\n        wasmExports['sqlite3_result_zeroblob64'])(a0, a1));\n    var _sqlite3_result_error_code = (Module['_sqlite3_result_error_code'] = (\n      a0,\n      a1,\n    ) =>\n      (_sqlite3_result_error_code = Module['_sqlite3_result_error_code'] =\n        wasmExports['sqlite3_result_error_code'])(a0, a1));\n    var _sqlite3_user_data = (Module['_sqlite3_user_data'] = (a0) =>\n      (_sqlite3_user_data = Module['_sqlite3_user_data'] =\n        wasmExports['sqlite3_user_data'])(a0));\n    var _sqlite3_context_db_handle = (Module['_sqlite3_context_db_handle'] = (\n      a0,\n    ) =>\n      (_sqlite3_context_db_handle = Module['_sqlite3_context_db_handle'] =\n        wasmExports['sqlite3_context_db_handle'])(a0));\n    var _sqlite3_vtab_nochange = (Module['_sqlite3_vtab_nochange'] = (a0) =>\n      (_sqlite3_vtab_nochange = Module['_sqlite3_vtab_nochange'] =\n        wasmExports['sqlite3_vtab_nochange'])(a0));\n    var _sqlite3_vtab_in_first = (Module['_sqlite3_vtab_in_first'] = (a0, a1) =>\n      (_sqlite3_vtab_in_first = Module['_sqlite3_vtab_in_first'] =\n        wasmExports['sqlite3_vtab_in_first'])(a0, a1));\n    var _sqlite3_vtab_in_next = (Module['_sqlite3_vtab_in_next'] = (a0, a1) =>\n      (_sqlite3_vtab_in_next = Module['_sqlite3_vtab_in_next'] =\n        wasmExports['sqlite3_vtab_in_next'])(a0, a1));\n    var _sqlite3_aggregate_context = (Module['_sqlite3_aggregate_context'] = (\n      a0,\n      a1,\n    ) =>\n      (_sqlite3_aggregate_context = Module['_sqlite3_aggregate_context'] =\n        wasmExports['sqlite3_aggregate_context'])(a0, a1));\n    var _sqlite3_get_auxdata = (Module['_sqlite3_get_auxdata'] = (a0, a1) =>\n      (_sqlite3_get_auxdata = Module['_sqlite3_get_auxdata'] =\n        wasmExports['sqlite3_get_auxdata'])(a0, a1));\n    var _sqlite3_set_auxdata = (Module['_sqlite3_set_auxdata'] = (\n      a0,\n      a1,\n      a2,\n      a3,\n    ) =>\n      (_sqlite3_set_auxdata = Module['_sqlite3_set_auxdata'] =\n        wasmExports['sqlite3_set_auxdata'])(a0, a1, a2, a3));\n    var _sqlite3_column_count = (Module['_sqlite3_column_count'] = (a0) =>\n      (_sqlite3_column_count = Module['_sqlite3_column_count'] =\n        wasmExports['sqlite3_column_count'])(a0));\n    var _sqlite3_data_count = (Module['_sqlite3_data_count'] = (a0) =>\n      (_sqlite3_data_count = Module['_sqlite3_data_count'] =\n        wasmExports['sqlite3_data_count'])(a0));\n    var _sqlite3_column_blob = (Module['_sqlite3_column_blob'] = (a0, a1) =>\n      (_sqlite3_column_blob = Module['_sqlite3_column_blob'] =\n        wasmExports['sqlite3_column_blob'])(a0, a1));\n    var _sqlite3_column_bytes = (Module['_sqlite3_column_bytes'] = (a0, a1) =>\n      (_sqlite3_column_bytes = Module['_sqlite3_column_bytes'] =\n        wasmExports['sqlite3_column_bytes'])(a0, a1));\n    var _sqlite3_column_double = (Module['_sqlite3_column_double'] = (a0, a1) =>\n      (_sqlite3_column_double = Module['_sqlite3_column_double'] =\n        wasmExports['sqlite3_column_double'])(a0, a1));\n    var _sqlite3_column_value = (Module['_sqlite3_column_value'] = (a0, a1) =>\n      (_sqlite3_column_value = Module['_sqlite3_column_value'] =\n        wasmExports['sqlite3_column_value'])(a0, a1));\n    var _sqlite3_column_decltype = (Module['_sqlite3_column_decltype'] = (\n      a0,\n      a1,\n    ) =>\n      (_sqlite3_column_decltype = Module['_sqlite3_column_decltype'] =\n        wasmExports['sqlite3_column_decltype'])(a0, a1));\n    var _sqlite3_bind_blob = (Module['_sqlite3_bind_blob'] = (\n      a0,\n      a1,\n      a2,\n      a3,\n      a4,\n    ) =>\n      (_sqlite3_bind_blob = Module['_sqlite3_bind_blob'] =\n        wasmExports['sqlite3_bind_blob'])(a0, a1, a2, a3, a4));\n    var _sqlite3_bind_double = (Module['_sqlite3_bind_double'] = (a0, a1, a2) =>\n      (_sqlite3_bind_double = Module['_sqlite3_bind_double'] =\n        wasmExports['sqlite3_bind_double'])(a0, a1, a2));\n    var _sqlite3_bind_int = (Module['_sqlite3_bind_int'] = (a0, a1, a2) =>\n      (_sqlite3_bind_int = Module['_sqlite3_bind_int'] =\n        wasmExports['sqlite3_bind_int'])(a0, a1, a2));\n    var _sqlite3_bind_int64 = (Module['_sqlite3_bind_int64'] = (a0, a1, a2) =>\n      (_sqlite3_bind_int64 = Module['_sqlite3_bind_int64'] =\n        wasmExports['sqlite3_bind_int64'])(a0, a1, a2));\n    var _sqlite3_bind_null = (Module['_sqlite3_bind_null'] = (a0, a1) =>\n      (_sqlite3_bind_null = Module['_sqlite3_bind_null'] =\n        wasmExports['sqlite3_bind_null'])(a0, a1));\n    var _sqlite3_bind_pointer = (Module['_sqlite3_bind_pointer'] = (\n      a0,\n      a1,\n      a2,\n      a3,\n      a4,\n    ) =>\n      (_sqlite3_bind_pointer = Module['_sqlite3_bind_pointer'] =\n        wasmExports['sqlite3_bind_pointer'])(a0, a1, a2, a3, a4));\n    var _sqlite3_bind_text = (Module['_sqlite3_bind_text'] = (\n      a0,\n      a1,\n      a2,\n      a3,\n      a4,\n    ) =>\n      (_sqlite3_bind_text = Module['_sqlite3_bind_text'] =\n        wasmExports['sqlite3_bind_text'])(a0, a1, a2, a3, a4));\n    var _sqlite3_bind_parameter_count = (Module[\n      '_sqlite3_bind_parameter_count'\n    ] = (a0) =>\n      (_sqlite3_bind_parameter_count = Module['_sqlite3_bind_parameter_count'] =\n        wasmExports['sqlite3_bind_parameter_count'])(a0));\n    var _sqlite3_bind_parameter_name = (Module['_sqlite3_bind_parameter_name'] =\n      (a0, a1) =>\n        (_sqlite3_bind_parameter_name = Module['_sqlite3_bind_parameter_name'] =\n          wasmExports['sqlite3_bind_parameter_name'])(a0, a1));\n    var _sqlite3_bind_parameter_index = (Module[\n      '_sqlite3_bind_parameter_index'\n    ] = (a0, a1) =>\n      (_sqlite3_bind_parameter_index = Module['_sqlite3_bind_parameter_index'] =\n        wasmExports['sqlite3_bind_parameter_index'])(a0, a1));\n    var _sqlite3_db_handle = (Module['_sqlite3_db_handle'] = (a0) =>\n      (_sqlite3_db_handle = Module['_sqlite3_db_handle'] =\n        wasmExports['sqlite3_db_handle'])(a0));\n    var _sqlite3_stmt_readonly = (Module['_sqlite3_stmt_readonly'] = (a0) =>\n      (_sqlite3_stmt_readonly = Module['_sqlite3_stmt_readonly'] =\n        wasmExports['sqlite3_stmt_readonly'])(a0));\n    var _sqlite3_stmt_isexplain = (Module['_sqlite3_stmt_isexplain'] = (a0) =>\n      (_sqlite3_stmt_isexplain = Module['_sqlite3_stmt_isexplain'] =\n        wasmExports['sqlite3_stmt_isexplain'])(a0));\n    var _sqlite3_stmt_explain = (Module['_sqlite3_stmt_explain'] = (a0, a1) =>\n      (_sqlite3_stmt_explain = Module['_sqlite3_stmt_explain'] =\n        wasmExports['sqlite3_stmt_explain'])(a0, a1));\n    var _sqlite3_stmt_busy = (Module['_sqlite3_stmt_busy'] = (a0) =>\n      (_sqlite3_stmt_busy = Module['_sqlite3_stmt_busy'] =\n        wasmExports['sqlite3_stmt_busy'])(a0));\n    var _sqlite3_stmt_status = (Module['_sqlite3_stmt_status'] = (a0, a1, a2) =>\n      (_sqlite3_stmt_status = Module['_sqlite3_stmt_status'] =\n        wasmExports['sqlite3_stmt_status'])(a0, a1, a2));\n    var _sqlite3_sql = (Module['_sqlite3_sql'] = (a0) =>\n      (_sqlite3_sql = Module['_sqlite3_sql'] = wasmExports['sqlite3_sql'])(a0));\n    var _sqlite3_expanded_sql = (Module['_sqlite3_expanded_sql'] = (a0) =>\n      (_sqlite3_expanded_sql = Module['_sqlite3_expanded_sql'] =\n        wasmExports['sqlite3_expanded_sql'])(a0));\n    var _sqlite3_preupdate_old = (Module['_sqlite3_preupdate_old'] = (\n      a0,\n      a1,\n      a2,\n    ) =>\n      (_sqlite3_preupdate_old = Module['_sqlite3_preupdate_old'] =\n        wasmExports['sqlite3_preupdate_old'])(a0, a1, a2));\n    var _sqlite3_preupdate_count = (Module['_sqlite3_preupdate_count'] = (a0) =>\n      (_sqlite3_preupdate_count = Module['_sqlite3_preupdate_count'] =\n        wasmExports['sqlite3_preupdate_count'])(a0));\n    var _sqlite3_preupdate_depth = (Module['_sqlite3_preupdate_depth'] = (a0) =>\n      (_sqlite3_preupdate_depth = Module['_sqlite3_preupdate_depth'] =\n        wasmExports['sqlite3_preupdate_depth'])(a0));\n    var _sqlite3_preupdate_blobwrite = (Module['_sqlite3_preupdate_blobwrite'] =\n      (a0) =>\n        (_sqlite3_preupdate_blobwrite = Module['_sqlite3_preupdate_blobwrite'] =\n          wasmExports['sqlite3_preupdate_blobwrite'])(a0));\n    var _sqlite3_preupdate_new = (Module['_sqlite3_preupdate_new'] = (\n      a0,\n      a1,\n      a2,\n    ) =>\n      (_sqlite3_preupdate_new = Module['_sqlite3_preupdate_new'] =\n        wasmExports['sqlite3_preupdate_new'])(a0, a1, a2));\n    var _sqlite3_value_numeric_type = (Module['_sqlite3_value_numeric_type'] = (\n      a0,\n    ) =>\n      (_sqlite3_value_numeric_type = Module['_sqlite3_value_numeric_type'] =\n        wasmExports['sqlite3_value_numeric_type'])(a0));\n    var _sqlite3_set_authorizer = (Module['_sqlite3_set_authorizer'] = (\n      a0,\n      a1,\n      a2,\n    ) =>\n      (_sqlite3_set_authorizer = Module['_sqlite3_set_authorizer'] =\n        wasmExports['sqlite3_set_authorizer'])(a0, a1, a2));\n    var _sqlite3_strglob = (Module['_sqlite3_strglob'] = (a0, a1) =>\n      (_sqlite3_strglob = Module['_sqlite3_strglob'] =\n        wasmExports['sqlite3_strglob'])(a0, a1));\n    var _sqlite3_strlike = (Module['_sqlite3_strlike'] = (a0, a1, a2) =>\n      (_sqlite3_strlike = Module['_sqlite3_strlike'] =\n        wasmExports['sqlite3_strlike'])(a0, a1, a2));\n    var _sqlite3_auto_extension = (Module['_sqlite3_auto_extension'] = (a0) =>\n      (_sqlite3_auto_extension = Module['_sqlite3_auto_extension'] =\n        wasmExports['sqlite3_auto_extension'])(a0));\n    var _sqlite3_cancel_auto_extension = (Module[\n      '_sqlite3_cancel_auto_extension'\n    ] = (a0) =>\n      (_sqlite3_cancel_auto_extension = Module[\n        '_sqlite3_cancel_auto_extension'\n      ] =\n        wasmExports['sqlite3_cancel_auto_extension'])(a0));\n    var _sqlite3_reset_auto_extension = (Module[\n      '_sqlite3_reset_auto_extension'\n    ] = () =>\n      (_sqlite3_reset_auto_extension = Module['_sqlite3_reset_auto_extension'] =\n        wasmExports['sqlite3_reset_auto_extension'])());\n    var _sqlite3_prepare_v3 = (Module['_sqlite3_prepare_v3'] = (\n      a0,\n      a1,\n      a2,\n      a3,\n      a4,\n      a5,\n    ) =>\n      (_sqlite3_prepare_v3 = Module['_sqlite3_prepare_v3'] =\n        wasmExports['sqlite3_prepare_v3'])(a0, a1, a2, a3, a4, a5));\n    var _sqlite3_create_module = (Module['_sqlite3_create_module'] = (\n      a0,\n      a1,\n      a2,\n      a3,\n    ) =>\n      (_sqlite3_create_module = Module['_sqlite3_create_module'] =\n        wasmExports['sqlite3_create_module'])(a0, a1, a2, a3));\n    var _sqlite3_create_module_v2 = (Module['_sqlite3_create_module_v2'] = (\n      a0,\n      a1,\n      a2,\n      a3,\n      a4,\n    ) =>\n      (_sqlite3_create_module_v2 = Module['_sqlite3_create_module_v2'] =\n        wasmExports['sqlite3_create_module_v2'])(a0, a1, a2, a3, a4));\n    var _sqlite3_drop_modules = (Module['_sqlite3_drop_modules'] = (a0, a1) =>\n      (_sqlite3_drop_modules = Module['_sqlite3_drop_modules'] =\n        wasmExports['sqlite3_drop_modules'])(a0, a1));\n    var _sqlite3_declare_vtab = (Module['_sqlite3_declare_vtab'] = (a0, a1) =>\n      (_sqlite3_declare_vtab = Module['_sqlite3_declare_vtab'] =\n        wasmExports['sqlite3_declare_vtab'])(a0, a1));\n    var _sqlite3_vtab_on_conflict = (Module['_sqlite3_vtab_on_conflict'] = (\n      a0,\n    ) =>\n      (_sqlite3_vtab_on_conflict = Module['_sqlite3_vtab_on_conflict'] =\n        wasmExports['sqlite3_vtab_on_conflict'])(a0));\n    var _sqlite3_vtab_collation = (Module['_sqlite3_vtab_collation'] = (\n      a0,\n      a1,\n    ) =>\n      (_sqlite3_vtab_collation = Module['_sqlite3_vtab_collation'] =\n        wasmExports['sqlite3_vtab_collation'])(a0, a1));\n    var _sqlite3_vtab_in = (Module['_sqlite3_vtab_in'] = (a0, a1, a2) =>\n      (_sqlite3_vtab_in = Module['_sqlite3_vtab_in'] =\n        wasmExports['sqlite3_vtab_in'])(a0, a1, a2));\n    var _sqlite3_vtab_rhs_value = (Module['_sqlite3_vtab_rhs_value'] = (\n      a0,\n      a1,\n      a2,\n    ) =>\n      (_sqlite3_vtab_rhs_value = Module['_sqlite3_vtab_rhs_value'] =\n        wasmExports['sqlite3_vtab_rhs_value'])(a0, a1, a2));\n    var _sqlite3_vtab_distinct = (Module['_sqlite3_vtab_distinct'] = (a0) =>\n      (_sqlite3_vtab_distinct = Module['_sqlite3_vtab_distinct'] =\n        wasmExports['sqlite3_vtab_distinct'])(a0));\n    var _sqlite3_keyword_name = (Module['_sqlite3_keyword_name'] = (\n      a0,\n      a1,\n      a2,\n    ) =>\n      (_sqlite3_keyword_name = Module['_sqlite3_keyword_name'] =\n        wasmExports['sqlite3_keyword_name'])(a0, a1, a2));\n    var _sqlite3_keyword_count = (Module['_sqlite3_keyword_count'] = () =>\n      (_sqlite3_keyword_count = Module['_sqlite3_keyword_count'] =\n        wasmExports['sqlite3_keyword_count'])());\n    var _sqlite3_keyword_check = (Module['_sqlite3_keyword_check'] = (a0, a1) =>\n      (_sqlite3_keyword_check = Module['_sqlite3_keyword_check'] =\n        wasmExports['sqlite3_keyword_check'])(a0, a1));\n    var _sqlite3_complete = (Module['_sqlite3_complete'] = (a0) =>\n      (_sqlite3_complete = Module['_sqlite3_complete'] =\n        wasmExports['sqlite3_complete'])(a0));\n    var _sqlite3_libversion = (Module['_sqlite3_libversion'] = () =>\n      (_sqlite3_libversion = Module['_sqlite3_libversion'] =\n        wasmExports['sqlite3_libversion'])());\n    var _sqlite3_libversion_number = (Module['_sqlite3_libversion_number'] =\n      () =>\n        (_sqlite3_libversion_number = Module['_sqlite3_libversion_number'] =\n          wasmExports['sqlite3_libversion_number'])());\n    var _sqlite3_shutdown = (Module['_sqlite3_shutdown'] = () =>\n      (_sqlite3_shutdown = Module['_sqlite3_shutdown'] =\n        wasmExports['sqlite3_shutdown'])());\n    var _sqlite3_last_insert_rowid = (Module['_sqlite3_last_insert_rowid'] = (\n      a0,\n    ) =>\n      (_sqlite3_last_insert_rowid = Module['_sqlite3_last_insert_rowid'] =\n        wasmExports['sqlite3_last_insert_rowid'])(a0));\n    var _sqlite3_set_last_insert_rowid = (Module[\n      '_sqlite3_set_last_insert_rowid'\n    ] = (a0, a1) =>\n      (_sqlite3_set_last_insert_rowid = Module[\n        '_sqlite3_set_last_insert_rowid'\n      ] =\n        wasmExports['sqlite3_set_last_insert_rowid'])(a0, a1));\n    var _sqlite3_changes64 = (Module['_sqlite3_changes64'] = (a0) =>\n      (_sqlite3_changes64 = Module['_sqlite3_changes64'] =\n        wasmExports['sqlite3_changes64'])(a0));\n    var _sqlite3_changes = (Module['_sqlite3_changes'] = (a0) =>\n      (_sqlite3_changes = Module['_sqlite3_changes'] =\n        wasmExports['sqlite3_changes'])(a0));\n    var _sqlite3_total_changes64 = (Module['_sqlite3_total_changes64'] = (a0) =>\n      (_sqlite3_total_changes64 = Module['_sqlite3_total_changes64'] =\n        wasmExports['sqlite3_total_changes64'])(a0));\n    var _sqlite3_total_changes = (Module['_sqlite3_total_changes'] = (a0) =>\n      (_sqlite3_total_changes = Module['_sqlite3_total_changes'] =\n        wasmExports['sqlite3_total_changes'])(a0));\n    var _sqlite3_txn_state = (Module['_sqlite3_txn_state'] = (a0, a1) =>\n      (_sqlite3_txn_state = Module['_sqlite3_txn_state'] =\n        wasmExports['sqlite3_txn_state'])(a0, a1));\n    var _sqlite3_close_v2 = (Module['_sqlite3_close_v2'] = (a0) =>\n      (_sqlite3_close_v2 = Module['_sqlite3_close_v2'] =\n        wasmExports['sqlite3_close_v2'])(a0));\n    var _sqlite3_busy_handler = (Module['_sqlite3_busy_handler'] = (\n      a0,\n      a1,\n      a2,\n    ) =>\n      (_sqlite3_busy_handler = Module['_sqlite3_busy_handler'] =\n        wasmExports['sqlite3_busy_handler'])(a0, a1, a2));\n    var _sqlite3_progress_handler = (Module['_sqlite3_progress_handler'] = (\n      a0,\n      a1,\n      a2,\n      a3,\n    ) =>\n      (_sqlite3_progress_handler = Module['_sqlite3_progress_handler'] =\n        wasmExports['sqlite3_progress_handler'])(a0, a1, a2, a3));\n    var _sqlite3_busy_timeout = (Module['_sqlite3_busy_timeout'] = (a0, a1) =>\n      (_sqlite3_busy_timeout = Module['_sqlite3_busy_timeout'] =\n        wasmExports['sqlite3_busy_timeout'])(a0, a1));\n    var _sqlite3_interrupt = (Module['_sqlite3_interrupt'] = (a0) =>\n      (_sqlite3_interrupt = Module['_sqlite3_interrupt'] =\n        wasmExports['sqlite3_interrupt'])(a0));\n    var _sqlite3_is_interrupted = (Module['_sqlite3_is_interrupted'] = (a0) =>\n      (_sqlite3_is_interrupted = Module['_sqlite3_is_interrupted'] =\n        wasmExports['sqlite3_is_interrupted'])(a0));\n    var _sqlite3_create_function = (Module['_sqlite3_create_function'] = (\n      a0,\n      a1,\n      a2,\n      a3,\n      a4,\n      a5,\n      a6,\n      a7,\n    ) =>\n      (_sqlite3_create_function = Module['_sqlite3_create_function'] =\n        wasmExports['sqlite3_create_function'])(\n        a0,\n        a1,\n        a2,\n        a3,\n        a4,\n        a5,\n        a6,\n        a7,\n      ));\n    var _sqlite3_create_function_v2 = (Module['_sqlite3_create_function_v2'] = (\n      a0,\n      a1,\n      a2,\n      a3,\n      a4,\n      a5,\n      a6,\n      a7,\n      a8,\n    ) =>\n      (_sqlite3_create_function_v2 = Module['_sqlite3_create_function_v2'] =\n        wasmExports['sqlite3_create_function_v2'])(\n        a0,\n        a1,\n        a2,\n        a3,\n        a4,\n        a5,\n        a6,\n        a7,\n        a8,\n      ));\n    var _sqlite3_create_window_function = (Module[\n      '_sqlite3_create_window_function'\n    ] = (a0, a1, a2, a3, a4, a5, a6, a7, a8, a9) =>\n      (_sqlite3_create_window_function = Module[\n        '_sqlite3_create_window_function'\n      ] =\n        wasmExports['sqlite3_create_window_function'])(\n        a0,\n        a1,\n        a2,\n        a3,\n        a4,\n        a5,\n        a6,\n        a7,\n        a8,\n        a9,\n      ));\n    var _sqlite3_overload_function = (Module['_sqlite3_overload_function'] = (\n      a0,\n      a1,\n      a2,\n    ) =>\n      (_sqlite3_overload_function = Module['_sqlite3_overload_function'] =\n        wasmExports['sqlite3_overload_function'])(a0, a1, a2));\n    var _sqlite3_trace_v2 = (Module['_sqlite3_trace_v2'] = (a0, a1, a2, a3) =>\n      (_sqlite3_trace_v2 = Module['_sqlite3_trace_v2'] =\n        wasmExports['sqlite3_trace_v2'])(a0, a1, a2, a3));\n    var _sqlite3_commit_hook = (Module['_sqlite3_commit_hook'] = (a0, a1, a2) =>\n      (_sqlite3_commit_hook = Module['_sqlite3_commit_hook'] =\n        wasmExports['sqlite3_commit_hook'])(a0, a1, a2));\n    var _sqlite3_update_hook = (Module['_sqlite3_update_hook'] = (a0, a1, a2) =>\n      (_sqlite3_update_hook = Module['_sqlite3_update_hook'] =\n        wasmExports['sqlite3_update_hook'])(a0, a1, a2));\n    var _sqlite3_rollback_hook = (Module['_sqlite3_rollback_hook'] = (\n      a0,\n      a1,\n      a2,\n    ) =>\n      (_sqlite3_rollback_hook = Module['_sqlite3_rollback_hook'] =\n        wasmExports['sqlite3_rollback_hook'])(a0, a1, a2));\n    var _sqlite3_preupdate_hook = (Module['_sqlite3_preupdate_hook'] = (\n      a0,\n      a1,\n      a2,\n    ) =>\n      (_sqlite3_preupdate_hook = Module['_sqlite3_preupdate_hook'] =\n        wasmExports['sqlite3_preupdate_hook'])(a0, a1, a2));\n    var _sqlite3_error_offset = (Module['_sqlite3_error_offset'] = (a0) =>\n      (_sqlite3_error_offset = Module['_sqlite3_error_offset'] =\n        wasmExports['sqlite3_error_offset'])(a0));\n    var _sqlite3_errcode = (Module['_sqlite3_errcode'] = (a0) =>\n      (_sqlite3_errcode = Module['_sqlite3_errcode'] =\n        wasmExports['sqlite3_errcode'])(a0));\n    var _sqlite3_extended_errcode = (Module['_sqlite3_extended_errcode'] = (\n      a0,\n    ) =>\n      (_sqlite3_extended_errcode = Module['_sqlite3_extended_errcode'] =\n        wasmExports['sqlite3_extended_errcode'])(a0));\n    var _sqlite3_errstr = (Module['_sqlite3_errstr'] = (a0) =>\n      (_sqlite3_errstr = Module['_sqlite3_errstr'] =\n        wasmExports['sqlite3_errstr'])(a0));\n    var _sqlite3_limit = (Module['_sqlite3_limit'] = (a0, a1, a2) =>\n      (_sqlite3_limit = Module['_sqlite3_limit'] =\n        wasmExports['sqlite3_limit'])(a0, a1, a2));\n    var _sqlite3_open = (Module['_sqlite3_open'] = (a0, a1) =>\n      (_sqlite3_open = Module['_sqlite3_open'] = wasmExports['sqlite3_open'])(\n        a0,\n        a1,\n      ));\n    var _sqlite3_open_v2 = (Module['_sqlite3_open_v2'] = (a0, a1, a2, a3) =>\n      (_sqlite3_open_v2 = Module['_sqlite3_open_v2'] =\n        wasmExports['sqlite3_open_v2'])(a0, a1, a2, a3));\n    var _sqlite3_create_collation = (Module['_sqlite3_create_collation'] = (\n      a0,\n      a1,\n      a2,\n      a3,\n      a4,\n    ) =>\n      (_sqlite3_create_collation = Module['_sqlite3_create_collation'] =\n        wasmExports['sqlite3_create_collation'])(a0, a1, a2, a3, a4));\n    var _sqlite3_create_collation_v2 = (Module['_sqlite3_create_collation_v2'] =\n      (a0, a1, a2, a3, a4, a5) =>\n        (_sqlite3_create_collation_v2 = Module['_sqlite3_create_collation_v2'] =\n          wasmExports['sqlite3_create_collation_v2'])(a0, a1, a2, a3, a4, a5));\n    var _sqlite3_collation_needed = (Module['_sqlite3_collation_needed'] = (\n      a0,\n      a1,\n      a2,\n    ) =>\n      (_sqlite3_collation_needed = Module['_sqlite3_collation_needed'] =\n        wasmExports['sqlite3_collation_needed'])(a0, a1, a2));\n    var _sqlite3_get_autocommit = (Module['_sqlite3_get_autocommit'] = (a0) =>\n      (_sqlite3_get_autocommit = Module['_sqlite3_get_autocommit'] =\n        wasmExports['sqlite3_get_autocommit'])(a0));\n    var _sqlite3_table_column_metadata = (Module[\n      '_sqlite3_table_column_metadata'\n    ] = (a0, a1, a2, a3, a4, a5, a6, a7, a8) =>\n      (_sqlite3_table_column_metadata = Module[\n        '_sqlite3_table_column_metadata'\n      ] =\n        wasmExports['sqlite3_table_column_metadata'])(\n        a0,\n        a1,\n        a2,\n        a3,\n        a4,\n        a5,\n        a6,\n        a7,\n        a8,\n      ));\n    var _sqlite3_extended_result_codes = (Module[\n      '_sqlite3_extended_result_codes'\n    ] = (a0, a1) =>\n      (_sqlite3_extended_result_codes = Module[\n        '_sqlite3_extended_result_codes'\n      ] =\n        wasmExports['sqlite3_extended_result_codes'])(a0, a1));\n    var _sqlite3_uri_key = (Module['_sqlite3_uri_key'] = (a0, a1) =>\n      (_sqlite3_uri_key = Module['_sqlite3_uri_key'] =\n        wasmExports['sqlite3_uri_key'])(a0, a1));\n    var _sqlite3_uri_int64 = (Module['_sqlite3_uri_int64'] = (a0, a1, a2) =>\n      (_sqlite3_uri_int64 = Module['_sqlite3_uri_int64'] =\n        wasmExports['sqlite3_uri_int64'])(a0, a1, a2));\n    var _sqlite3_db_name = (Module['_sqlite3_db_name'] = (a0, a1) =>\n      (_sqlite3_db_name = Module['_sqlite3_db_name'] =\n        wasmExports['sqlite3_db_name'])(a0, a1));\n    var _sqlite3_db_filename = (Module['_sqlite3_db_filename'] = (a0, a1) =>\n      (_sqlite3_db_filename = Module['_sqlite3_db_filename'] =\n        wasmExports['sqlite3_db_filename'])(a0, a1));\n    var _sqlite3_db_readonly = (Module['_sqlite3_db_readonly'] = (a0, a1) =>\n      (_sqlite3_db_readonly = Module['_sqlite3_db_readonly'] =\n        wasmExports['sqlite3_db_readonly'])(a0, a1));\n    var _sqlite3_compileoption_used = (Module['_sqlite3_compileoption_used'] = (\n      a0,\n    ) =>\n      (_sqlite3_compileoption_used = Module['_sqlite3_compileoption_used'] =\n        wasmExports['sqlite3_compileoption_used'])(a0));\n    var _sqlite3_compileoption_get = (Module['_sqlite3_compileoption_get'] = (\n      a0,\n    ) =>\n      (_sqlite3_compileoption_get = Module['_sqlite3_compileoption_get'] =\n        wasmExports['sqlite3_compileoption_get'])(a0));\n    var _sqlite3session_diff = (Module['_sqlite3session_diff'] = (\n      a0,\n      a1,\n      a2,\n      a3,\n    ) =>\n      (_sqlite3session_diff = Module['_sqlite3session_diff'] =\n        wasmExports['sqlite3session_diff'])(a0, a1, a2, a3));\n    var _sqlite3session_attach = (Module['_sqlite3session_attach'] = (a0, a1) =>\n      (_sqlite3session_attach = Module['_sqlite3session_attach'] =\n        wasmExports['sqlite3session_attach'])(a0, a1));\n    var _sqlite3session_create = (Module['_sqlite3session_create'] = (\n      a0,\n      a1,\n      a2,\n    ) =>\n      (_sqlite3session_create = Module['_sqlite3session_create'] =\n        wasmExports['sqlite3session_create'])(a0, a1, a2));\n    var _sqlite3session_delete = (Module['_sqlite3session_delete'] = (a0) =>\n      (_sqlite3session_delete = Module['_sqlite3session_delete'] =\n        wasmExports['sqlite3session_delete'])(a0));\n    var _sqlite3session_table_filter = (Module['_sqlite3session_table_filter'] =\n      (a0, a1, a2) =>\n        (_sqlite3session_table_filter = Module['_sqlite3session_table_filter'] =\n          wasmExports['sqlite3session_table_filter'])(a0, a1, a2));\n    var _sqlite3session_changeset = (Module['_sqlite3session_changeset'] = (\n      a0,\n      a1,\n      a2,\n    ) =>\n      (_sqlite3session_changeset = Module['_sqlite3session_changeset'] =\n        wasmExports['sqlite3session_changeset'])(a0, a1, a2));\n    var _sqlite3session_changeset_strm = (Module[\n      '_sqlite3session_changeset_strm'\n    ] = (a0, a1, a2) =>\n      (_sqlite3session_changeset_strm = Module[\n        '_sqlite3session_changeset_strm'\n      ] =\n        wasmExports['sqlite3session_changeset_strm'])(a0, a1, a2));\n    var _sqlite3session_patchset_strm = (Module[\n      '_sqlite3session_patchset_strm'\n    ] = (a0, a1, a2) =>\n      (_sqlite3session_patchset_strm = Module['_sqlite3session_patchset_strm'] =\n        wasmExports['sqlite3session_patchset_strm'])(a0, a1, a2));\n    var _sqlite3session_patchset = (Module['_sqlite3session_patchset'] = (\n      a0,\n      a1,\n      a2,\n    ) =>\n      (_sqlite3session_patchset = Module['_sqlite3session_patchset'] =\n        wasmExports['sqlite3session_patchset'])(a0, a1, a2));\n    var _sqlite3session_enable = (Module['_sqlite3session_enable'] = (a0, a1) =>\n      (_sqlite3session_enable = Module['_sqlite3session_enable'] =\n        wasmExports['sqlite3session_enable'])(a0, a1));\n    var _sqlite3session_indirect = (Module['_sqlite3session_indirect'] = (\n      a0,\n      a1,\n    ) =>\n      (_sqlite3session_indirect = Module['_sqlite3session_indirect'] =\n        wasmExports['sqlite3session_indirect'])(a0, a1));\n    var _sqlite3session_isempty = (Module['_sqlite3session_isempty'] = (a0) =>\n      (_sqlite3session_isempty = Module['_sqlite3session_isempty'] =\n        wasmExports['sqlite3session_isempty'])(a0));\n    var _sqlite3session_memory_used = (Module['_sqlite3session_memory_used'] = (\n      a0,\n    ) =>\n      (_sqlite3session_memory_used = Module['_sqlite3session_memory_used'] =\n        wasmExports['sqlite3session_memory_used'])(a0));\n    var _sqlite3session_object_config = (Module[\n      '_sqlite3session_object_config'\n    ] = (a0, a1, a2) =>\n      (_sqlite3session_object_config = Module['_sqlite3session_object_config'] =\n        wasmExports['sqlite3session_object_config'])(a0, a1, a2));\n    var _sqlite3session_changeset_size = (Module[\n      '_sqlite3session_changeset_size'\n    ] = (a0) =>\n      (_sqlite3session_changeset_size = Module[\n        '_sqlite3session_changeset_size'\n      ] =\n        wasmExports['sqlite3session_changeset_size'])(a0));\n    var _sqlite3changeset_start = (Module['_sqlite3changeset_start'] = (\n      a0,\n      a1,\n      a2,\n    ) =>\n      (_sqlite3changeset_start = Module['_sqlite3changeset_start'] =\n        wasmExports['sqlite3changeset_start'])(a0, a1, a2));\n    var _sqlite3changeset_start_v2 = (Module['_sqlite3changeset_start_v2'] = (\n      a0,\n      a1,\n      a2,\n      a3,\n    ) =>\n      (_sqlite3changeset_start_v2 = Module['_sqlite3changeset_start_v2'] =\n        wasmExports['sqlite3changeset_start_v2'])(a0, a1, a2, a3));\n    var _sqlite3changeset_start_strm = (Module['_sqlite3changeset_start_strm'] =\n      (a0, a1, a2) =>\n        (_sqlite3changeset_start_strm = Module['_sqlite3changeset_start_strm'] =\n          wasmExports['sqlite3changeset_start_strm'])(a0, a1, a2));\n    var _sqlite3changeset_start_v2_strm = (Module[\n      '_sqlite3changeset_start_v2_strm'\n    ] = (a0, a1, a2, a3) =>\n      (_sqlite3changeset_start_v2_strm = Module[\n        '_sqlite3changeset_start_v2_strm'\n      ] =\n        wasmExports['sqlite3changeset_start_v2_strm'])(a0, a1, a2, a3));\n    var _sqlite3changeset_next = (Module['_sqlite3changeset_next'] = (a0) =>\n      (_sqlite3changeset_next = Module['_sqlite3changeset_next'] =\n        wasmExports['sqlite3changeset_next'])(a0));\n    var _sqlite3changeset_op = (Module['_sqlite3changeset_op'] = (\n      a0,\n      a1,\n      a2,\n      a3,\n      a4,\n    ) =>\n      (_sqlite3changeset_op = Module['_sqlite3changeset_op'] =\n        wasmExports['sqlite3changeset_op'])(a0, a1, a2, a3, a4));\n    var _sqlite3changeset_pk = (Module['_sqlite3changeset_pk'] = (a0, a1, a2) =>\n      (_sqlite3changeset_pk = Module['_sqlite3changeset_pk'] =\n        wasmExports['sqlite3changeset_pk'])(a0, a1, a2));\n    var _sqlite3changeset_old = (Module['_sqlite3changeset_old'] = (\n      a0,\n      a1,\n      a2,\n    ) =>\n      (_sqlite3changeset_old = Module['_sqlite3changeset_old'] =\n        wasmExports['sqlite3changeset_old'])(a0, a1, a2));\n    var _sqlite3changeset_new = (Module['_sqlite3changeset_new'] = (\n      a0,\n      a1,\n      a2,\n    ) =>\n      (_sqlite3changeset_new = Module['_sqlite3changeset_new'] =\n        wasmExports['sqlite3changeset_new'])(a0, a1, a2));\n    var _sqlite3changeset_conflict = (Module['_sqlite3changeset_conflict'] = (\n      a0,\n      a1,\n      a2,\n    ) =>\n      (_sqlite3changeset_conflict = Module['_sqlite3changeset_conflict'] =\n        wasmExports['sqlite3changeset_conflict'])(a0, a1, a2));\n    var _sqlite3changeset_fk_conflicts = (Module[\n      '_sqlite3changeset_fk_conflicts'\n    ] = (a0, a1) =>\n      (_sqlite3changeset_fk_conflicts = Module[\n        '_sqlite3changeset_fk_conflicts'\n      ] =\n        wasmExports['sqlite3changeset_fk_conflicts'])(a0, a1));\n    var _sqlite3changeset_finalize = (Module['_sqlite3changeset_finalize'] = (\n      a0,\n    ) =>\n      (_sqlite3changeset_finalize = Module['_sqlite3changeset_finalize'] =\n        wasmExports['sqlite3changeset_finalize'])(a0));\n    var _sqlite3changeset_invert = (Module['_sqlite3changeset_invert'] = (\n      a0,\n      a1,\n      a2,\n      a3,\n    ) =>\n      (_sqlite3changeset_invert = Module['_sqlite3changeset_invert'] =\n        wasmExports['sqlite3changeset_invert'])(a0, a1, a2, a3));\n    var _sqlite3changeset_invert_strm = (Module[\n      '_sqlite3changeset_invert_strm'\n    ] = (a0, a1, a2, a3) =>\n      (_sqlite3changeset_invert_strm = Module['_sqlite3changeset_invert_strm'] =\n        wasmExports['sqlite3changeset_invert_strm'])(a0, a1, a2, a3));\n    var _sqlite3changeset_apply_v2 = (Module['_sqlite3changeset_apply_v2'] = (\n      a0,\n      a1,\n      a2,\n      a3,\n      a4,\n      a5,\n      a6,\n      a7,\n      a8,\n    ) =>\n      (_sqlite3changeset_apply_v2 = Module['_sqlite3changeset_apply_v2'] =\n        wasmExports['sqlite3changeset_apply_v2'])(\n        a0,\n        a1,\n        a2,\n        a3,\n        a4,\n        a5,\n        a6,\n        a7,\n        a8,\n      ));\n    var _sqlite3changeset_apply = (Module['_sqlite3changeset_apply'] = (\n      a0,\n      a1,\n      a2,\n      a3,\n      a4,\n      a5,\n    ) =>\n      (_sqlite3changeset_apply = Module['_sqlite3changeset_apply'] =\n        wasmExports['sqlite3changeset_apply'])(a0, a1, a2, a3, a4, a5));\n    var _sqlite3changeset_apply_v2_strm = (Module[\n      '_sqlite3changeset_apply_v2_strm'\n    ] = (a0, a1, a2, a3, a4, a5, a6, a7, a8) =>\n      (_sqlite3changeset_apply_v2_strm = Module[\n        '_sqlite3changeset_apply_v2_strm'\n      ] =\n        wasmExports['sqlite3changeset_apply_v2_strm'])(\n        a0,\n        a1,\n        a2,\n        a3,\n        a4,\n        a5,\n        a6,\n        a7,\n        a8,\n      ));\n    var _sqlite3changeset_apply_strm = (Module['_sqlite3changeset_apply_strm'] =\n      (a0, a1, a2, a3, a4, a5) =>\n        (_sqlite3changeset_apply_strm = Module['_sqlite3changeset_apply_strm'] =\n          wasmExports['sqlite3changeset_apply_strm'])(a0, a1, a2, a3, a4, a5));\n    var _sqlite3changegroup_new = (Module['_sqlite3changegroup_new'] = (a0) =>\n      (_sqlite3changegroup_new = Module['_sqlite3changegroup_new'] =\n        wasmExports['sqlite3changegroup_new'])(a0));\n    var _sqlite3changegroup_add = (Module['_sqlite3changegroup_add'] = (\n      a0,\n      a1,\n      a2,\n    ) =>\n      (_sqlite3changegroup_add = Module['_sqlite3changegroup_add'] =\n        wasmExports['sqlite3changegroup_add'])(a0, a1, a2));\n    var _sqlite3changegroup_output = (Module['_sqlite3changegroup_output'] = (\n      a0,\n      a1,\n      a2,\n    ) =>\n      (_sqlite3changegroup_output = Module['_sqlite3changegroup_output'] =\n        wasmExports['sqlite3changegroup_output'])(a0, a1, a2));\n    var _sqlite3changegroup_add_strm = (Module['_sqlite3changegroup_add_strm'] =\n      (a0, a1, a2) =>\n        (_sqlite3changegroup_add_strm = Module['_sqlite3changegroup_add_strm'] =\n          wasmExports['sqlite3changegroup_add_strm'])(a0, a1, a2));\n    var _sqlite3changegroup_output_strm = (Module[\n      '_sqlite3changegroup_output_strm'\n    ] = (a0, a1, a2) =>\n      (_sqlite3changegroup_output_strm = Module[\n        '_sqlite3changegroup_output_strm'\n      ] =\n        wasmExports['sqlite3changegroup_output_strm'])(a0, a1, a2));\n    var _sqlite3changegroup_delete = (Module['_sqlite3changegroup_delete'] = (\n      a0,\n    ) =>\n      (_sqlite3changegroup_delete = Module['_sqlite3changegroup_delete'] =\n        wasmExports['sqlite3changegroup_delete'])(a0));\n    var _sqlite3changeset_concat = (Module['_sqlite3changeset_concat'] = (\n      a0,\n      a1,\n      a2,\n      a3,\n      a4,\n      a5,\n    ) =>\n      (_sqlite3changeset_concat = Module['_sqlite3changeset_concat'] =\n        wasmExports['sqlite3changeset_concat'])(a0, a1, a2, a3, a4, a5));\n    var _sqlite3changeset_concat_strm = (Module[\n      '_sqlite3changeset_concat_strm'\n    ] = (a0, a1, a2, a3, a4, a5) =>\n      (_sqlite3changeset_concat_strm = Module['_sqlite3changeset_concat_strm'] =\n        wasmExports['sqlite3changeset_concat_strm'])(a0, a1, a2, a3, a4, a5));\n    var _sqlite3session_config = (Module['_sqlite3session_config'] = (a0, a1) =>\n      (_sqlite3session_config = Module['_sqlite3session_config'] =\n        wasmExports['sqlite3session_config'])(a0, a1));\n    var _sqlite3_sourceid = (Module['_sqlite3_sourceid'] = () =>\n      (_sqlite3_sourceid = Module['_sqlite3_sourceid'] =\n        wasmExports['sqlite3_sourceid'])());\n    var _sqlite3__wasm_pstack_ptr = (Module['_sqlite3__wasm_pstack_ptr'] = () =>\n      (_sqlite3__wasm_pstack_ptr = Module['_sqlite3__wasm_pstack_ptr'] =\n        wasmExports['sqlite3__wasm_pstack_ptr'])());\n    var _sqlite3__wasm_pstack_restore = (Module[\n      '_sqlite3__wasm_pstack_restore'\n    ] = (a0) =>\n      (_sqlite3__wasm_pstack_restore = Module['_sqlite3__wasm_pstack_restore'] =\n        wasmExports['sqlite3__wasm_pstack_restore'])(a0));\n    var _sqlite3__wasm_pstack_alloc = (Module['_sqlite3__wasm_pstack_alloc'] = (\n      a0,\n    ) =>\n      (_sqlite3__wasm_pstack_alloc = Module['_sqlite3__wasm_pstack_alloc'] =\n        wasmExports['sqlite3__wasm_pstack_alloc'])(a0));\n    var _sqlite3__wasm_pstack_remaining = (Module[\n      '_sqlite3__wasm_pstack_remaining'\n    ] = () =>\n      (_sqlite3__wasm_pstack_remaining = Module[\n        '_sqlite3__wasm_pstack_remaining'\n      ] =\n        wasmExports['sqlite3__wasm_pstack_remaining'])());\n    var _sqlite3__wasm_pstack_quota = (Module['_sqlite3__wasm_pstack_quota'] =\n      () =>\n        (_sqlite3__wasm_pstack_quota = Module['_sqlite3__wasm_pstack_quota'] =\n          wasmExports['sqlite3__wasm_pstack_quota'])());\n    var _sqlite3__wasm_db_error = (Module['_sqlite3__wasm_db_error'] = (\n      a0,\n      a1,\n      a2,\n    ) =>\n      (_sqlite3__wasm_db_error = Module['_sqlite3__wasm_db_error'] =\n        wasmExports['sqlite3__wasm_db_error'])(a0, a1, a2));\n    var _sqlite3__wasm_test_struct = (Module['_sqlite3__wasm_test_struct'] = (\n      a0,\n    ) =>\n      (_sqlite3__wasm_test_struct = Module['_sqlite3__wasm_test_struct'] =\n        wasmExports['sqlite3__wasm_test_struct'])(a0));\n    var _sqlite3__wasm_enum_json = (Module['_sqlite3__wasm_enum_json'] = () =>\n      (_sqlite3__wasm_enum_json = Module['_sqlite3__wasm_enum_json'] =\n        wasmExports['sqlite3__wasm_enum_json'])());\n    var _sqlite3__wasm_vfs_unlink = (Module['_sqlite3__wasm_vfs_unlink'] = (\n      a0,\n      a1,\n    ) =>\n      (_sqlite3__wasm_vfs_unlink = Module['_sqlite3__wasm_vfs_unlink'] =\n        wasmExports['sqlite3__wasm_vfs_unlink'])(a0, a1));\n    var _sqlite3__wasm_db_vfs = (Module['_sqlite3__wasm_db_vfs'] = (a0, a1) =>\n      (_sqlite3__wasm_db_vfs = Module['_sqlite3__wasm_db_vfs'] =\n        wasmExports['sqlite3__wasm_db_vfs'])(a0, a1));\n    var _sqlite3__wasm_db_reset = (Module['_sqlite3__wasm_db_reset'] = (a0) =>\n      (_sqlite3__wasm_db_reset = Module['_sqlite3__wasm_db_reset'] =\n        wasmExports['sqlite3__wasm_db_reset'])(a0));\n    var _sqlite3__wasm_db_export_chunked = (Module[\n      '_sqlite3__wasm_db_export_chunked'\n    ] = (a0, a1) =>\n      (_sqlite3__wasm_db_export_chunked = Module[\n        '_sqlite3__wasm_db_export_chunked'\n      ] =\n        wasmExports['sqlite3__wasm_db_export_chunked'])(a0, a1));\n    var _sqlite3__wasm_db_serialize = (Module['_sqlite3__wasm_db_serialize'] = (\n      a0,\n      a1,\n      a2,\n      a3,\n      a4,\n    ) =>\n      (_sqlite3__wasm_db_serialize = Module['_sqlite3__wasm_db_serialize'] =\n        wasmExports['sqlite3__wasm_db_serialize'])(a0, a1, a2, a3, a4));\n    var _sqlite3__wasm_vfs_create_file = (Module[\n      '_sqlite3__wasm_vfs_create_file'\n    ] = (a0, a1, a2, a3) =>\n      (_sqlite3__wasm_vfs_create_file = Module[\n        '_sqlite3__wasm_vfs_create_file'\n      ] =\n        wasmExports['sqlite3__wasm_vfs_create_file'])(a0, a1, a2, a3));\n    var _sqlite3__wasm_posix_create_file = (Module[\n      '_sqlite3__wasm_posix_create_file'\n    ] = (a0, a1, a2) =>\n      (_sqlite3__wasm_posix_create_file = Module[\n        '_sqlite3__wasm_posix_create_file'\n      ] =\n        wasmExports['sqlite3__wasm_posix_create_file'])(a0, a1, a2));\n    var _sqlite3__wasm_kvvfsMakeKeyOnPstack = (Module[\n      '_sqlite3__wasm_kvvfsMakeKeyOnPstack'\n    ] = (a0, a1) =>\n      (_sqlite3__wasm_kvvfsMakeKeyOnPstack = Module[\n        '_sqlite3__wasm_kvvfsMakeKeyOnPstack'\n      ] =\n        wasmExports['sqlite3__wasm_kvvfsMakeKeyOnPstack'])(a0, a1));\n    var _sqlite3__wasm_kvvfs_methods = (Module['_sqlite3__wasm_kvvfs_methods'] =\n      () =>\n        (_sqlite3__wasm_kvvfs_methods = Module['_sqlite3__wasm_kvvfs_methods'] =\n          wasmExports['sqlite3__wasm_kvvfs_methods'])());\n    var _sqlite3__wasm_vtab_config = (Module['_sqlite3__wasm_vtab_config'] = (\n      a0,\n      a1,\n      a2,\n    ) =>\n      (_sqlite3__wasm_vtab_config = Module['_sqlite3__wasm_vtab_config'] =\n        wasmExports['sqlite3__wasm_vtab_config'])(a0, a1, a2));\n    var _sqlite3__wasm_db_config_ip = (Module['_sqlite3__wasm_db_config_ip'] = (\n      a0,\n      a1,\n      a2,\n      a3,\n    ) =>\n      (_sqlite3__wasm_db_config_ip = Module['_sqlite3__wasm_db_config_ip'] =\n        wasmExports['sqlite3__wasm_db_config_ip'])(a0, a1, a2, a3));\n    var _sqlite3__wasm_db_config_pii = (Module['_sqlite3__wasm_db_config_pii'] =\n      (a0, a1, a2, a3, a4) =>\n        (_sqlite3__wasm_db_config_pii = Module['_sqlite3__wasm_db_config_pii'] =\n          wasmExports['sqlite3__wasm_db_config_pii'])(a0, a1, a2, a3, a4));\n    var _sqlite3__wasm_db_config_s = (Module['_sqlite3__wasm_db_config_s'] = (\n      a0,\n      a1,\n      a2,\n    ) =>\n      (_sqlite3__wasm_db_config_s = Module['_sqlite3__wasm_db_config_s'] =\n        wasmExports['sqlite3__wasm_db_config_s'])(a0, a1, a2));\n    var _sqlite3__wasm_config_i = (Module['_sqlite3__wasm_config_i'] = (\n      a0,\n      a1,\n    ) =>\n      (_sqlite3__wasm_config_i = Module['_sqlite3__wasm_config_i'] =\n        wasmExports['sqlite3__wasm_config_i'])(a0, a1));\n    var _sqlite3__wasm_config_ii = (Module['_sqlite3__wasm_config_ii'] = (\n      a0,\n      a1,\n      a2,\n    ) =>\n      (_sqlite3__wasm_config_ii = Module['_sqlite3__wasm_config_ii'] =\n        wasmExports['sqlite3__wasm_config_ii'])(a0, a1, a2));\n    var _sqlite3__wasm_config_j = (Module['_sqlite3__wasm_config_j'] = (\n      a0,\n      a1,\n    ) =>\n      (_sqlite3__wasm_config_j = Module['_sqlite3__wasm_config_j'] =\n        wasmExports['sqlite3__wasm_config_j'])(a0, a1));\n    var _sqlite3__wasm_qfmt_token = (Module['_sqlite3__wasm_qfmt_token'] = (\n      a0,\n      a1,\n    ) =>\n      (_sqlite3__wasm_qfmt_token = Module['_sqlite3__wasm_qfmt_token'] =\n        wasmExports['sqlite3__wasm_qfmt_token'])(a0, a1));\n    var _sqlite3__wasm_init_wasmfs = (Module['_sqlite3__wasm_init_wasmfs'] = (\n      a0,\n    ) =>\n      (_sqlite3__wasm_init_wasmfs = Module['_sqlite3__wasm_init_wasmfs'] =\n        wasmExports['sqlite3__wasm_init_wasmfs'])(a0));\n    var _sqlite3__wasm_test_intptr = (Module['_sqlite3__wasm_test_intptr'] = (\n      a0,\n    ) =>\n      (_sqlite3__wasm_test_intptr = Module['_sqlite3__wasm_test_intptr'] =\n        wasmExports['sqlite3__wasm_test_intptr'])(a0));\n    var _sqlite3__wasm_test_voidptr = (Module['_sqlite3__wasm_test_voidptr'] = (\n      a0,\n    ) =>\n      (_sqlite3__wasm_test_voidptr = Module['_sqlite3__wasm_test_voidptr'] =\n        wasmExports['sqlite3__wasm_test_voidptr'])(a0));\n    var _sqlite3__wasm_test_int64_max = (Module[\n      '_sqlite3__wasm_test_int64_max'\n    ] = () =>\n      (_sqlite3__wasm_test_int64_max = Module['_sqlite3__wasm_test_int64_max'] =\n        wasmExports['sqlite3__wasm_test_int64_max'])());\n    var _sqlite3__wasm_test_int64_min = (Module[\n      '_sqlite3__wasm_test_int64_min'\n    ] = () =>\n      (_sqlite3__wasm_test_int64_min = Module['_sqlite3__wasm_test_int64_min'] =\n        wasmExports['sqlite3__wasm_test_int64_min'])());\n    var _sqlite3__wasm_test_int64_times2 = (Module[\n      '_sqlite3__wasm_test_int64_times2'\n    ] = (a0) =>\n      (_sqlite3__wasm_test_int64_times2 = Module[\n        '_sqlite3__wasm_test_int64_times2'\n      ] =\n        wasmExports['sqlite3__wasm_test_int64_times2'])(a0));\n    var _sqlite3__wasm_test_int64_minmax = (Module[\n      '_sqlite3__wasm_test_int64_minmax'\n    ] = (a0, a1) =>\n      (_sqlite3__wasm_test_int64_minmax = Module[\n        '_sqlite3__wasm_test_int64_minmax'\n      ] =\n        wasmExports['sqlite3__wasm_test_int64_minmax'])(a0, a1));\n    var _sqlite3__wasm_test_int64ptr = (Module['_sqlite3__wasm_test_int64ptr'] =\n      (a0) =>\n        (_sqlite3__wasm_test_int64ptr = Module['_sqlite3__wasm_test_int64ptr'] =\n          wasmExports['sqlite3__wasm_test_int64ptr'])(a0));\n    var _sqlite3__wasm_test_stack_overflow = (Module[\n      '_sqlite3__wasm_test_stack_overflow'\n    ] = (a0) =>\n      (_sqlite3__wasm_test_stack_overflow = Module[\n        '_sqlite3__wasm_test_stack_overflow'\n      ] =\n        wasmExports['sqlite3__wasm_test_stack_overflow'])(a0));\n    var _sqlite3__wasm_test_str_hello = (Module[\n      '_sqlite3__wasm_test_str_hello'\n    ] = (a0) =>\n      (_sqlite3__wasm_test_str_hello = Module['_sqlite3__wasm_test_str_hello'] =\n        wasmExports['sqlite3__wasm_test_str_hello'])(a0));\n    var _sqlite3__wasm_SQLTester_strglob = (Module[\n      '_sqlite3__wasm_SQLTester_strglob'\n    ] = (a0, a1) =>\n      (_sqlite3__wasm_SQLTester_strglob = Module[\n        '_sqlite3__wasm_SQLTester_strglob'\n      ] =\n        wasmExports['sqlite3__wasm_SQLTester_strglob'])(a0, a1));\n    var _malloc = (Module['_malloc'] = (a0) =>\n      (_malloc = Module['_malloc'] = wasmExports['malloc'])(a0));\n    var _free = (Module['_free'] = (a0) =>\n      (_free = Module['_free'] = wasmExports['free'])(a0));\n    var _realloc = (Module['_realloc'] = (a0, a1) =>\n      (_realloc = Module['_realloc'] = wasmExports['realloc'])(a0, a1));\n    var _emscripten_builtin_memalign = (a0, a1) =>\n      (_emscripten_builtin_memalign =\n        wasmExports['emscripten_builtin_memalign'])(a0, a1);\n    var __emscripten_stack_restore = (a0) =>\n      (__emscripten_stack_restore = wasmExports['_emscripten_stack_restore'])(\n        a0,\n      );\n    var __emscripten_stack_alloc = (a0) =>\n      (__emscripten_stack_alloc = wasmExports['_emscripten_stack_alloc'])(a0);\n    var _emscripten_stack_get_current = () =>\n      (_emscripten_stack_get_current =\n        wasmExports['emscripten_stack_get_current'])();\n\n    Module['wasmMemory'] = wasmMemory;\n\n    var calledRun;\n    var calledPrerun;\n\n    dependenciesFulfilled = function runCaller() {\n      if (!calledRun) run();\n      if (!calledRun) dependenciesFulfilled = runCaller;\n    };\n\n    function run() {\n      if (runDependencies > 0) {\n        return;\n      }\n\n      if (!calledPrerun) {\n        calledPrerun = 1;\n        preRun();\n\n        if (runDependencies > 0) {\n          return;\n        }\n      }\n\n      function doRun() {\n        if (calledRun) return;\n        calledRun = 1;\n        Module['calledRun'] = 1;\n\n        if (ABORT) return;\n\n        initRuntime();\n\n        readyPromiseResolve(Module);\n        Module['onRuntimeInitialized']?.();\n\n        postRun();\n      }\n\n      if (Module['setStatus']) {\n        Module['setStatus']('Running...');\n        setTimeout(() => {\n          setTimeout(() => Module['setStatus'](''), 1);\n          doRun();\n        }, 1);\n      } else {\n        doRun();\n      }\n    }\n\n    if (Module['preInit']) {\n      if (typeof Module['preInit'] == 'function')\n        Module['preInit'] = [Module['preInit']];\n      while (Module['preInit'].length > 0) {\n        Module['preInit'].pop()();\n      }\n    }\n\n    run();\n\n    Module.runSQLite3PostLoadInit = function (EmscriptenModule) {\n      'use strict';\n\n      'use strict';\n      globalThis.sqlite3ApiBootstrap = function sqlite3ApiBootstrap(\n        apiConfig = globalThis.sqlite3ApiConfig ||\n          sqlite3ApiBootstrap.defaultConfig,\n      ) {\n        if (sqlite3ApiBootstrap.sqlite3) {\n          (sqlite3ApiBootstrap.sqlite3.config || console).warn(\n            'sqlite3ApiBootstrap() called multiple times.',\n            'Config and external initializers are ignored on calls after the first.',\n          );\n          return sqlite3ApiBootstrap.sqlite3;\n        }\n        const config = Object.assign(\n          Object.create(null),\n          {\n            exports: undefined,\n            memory: undefined,\n            bigIntEnabled: (() => {\n              if ('undefined' !== typeof Module) {\n                if (!!Module.HEAPU64) return true;\n              }\n              return !!globalThis.BigInt64Array;\n            })(),\n            debug: console.debug.bind(console),\n            warn: console.warn.bind(console),\n            error: console.error.bind(console),\n            log: console.log.bind(console),\n            wasmfsOpfsDir: '/opfs',\n\n            useStdAlloc: false,\n          },\n          apiConfig || {},\n        );\n\n        Object.assign(\n          config,\n          {\n            allocExportName: config.useStdAlloc ? 'malloc' : 'sqlite3_malloc',\n            deallocExportName: config.useStdAlloc ? 'free' : 'sqlite3_free',\n            reallocExportName: config.useStdAlloc\n              ? 'realloc'\n              : 'sqlite3_realloc',\n          },\n          config,\n        );\n\n        ['exports', 'memory', 'wasmfsOpfsDir'].forEach((k) => {\n          if ('function' === typeof config[k]) {\n            config[k] = config[k]();\n          }\n        });\n\n        delete globalThis.sqlite3ApiConfig;\n        delete sqlite3ApiBootstrap.defaultConfig;\n\n        const capi = Object.create(null);\n\n        const wasm = Object.create(null);\n\n        const __rcStr = (rc) => {\n          return (\n            (capi.sqlite3_js_rc_str && capi.sqlite3_js_rc_str(rc)) ||\n            'Unknown result code #' + rc\n          );\n        };\n\n        const __isInt = (n) => 'number' === typeof n && n === (n | 0);\n\n        class SQLite3Error extends Error {\n          constructor(...args) {\n            let rc;\n            if (args.length) {\n              if (__isInt(args[0])) {\n                rc = args[0];\n                if (1 === args.length) {\n                  super(__rcStr(args[0]));\n                } else {\n                  const rcStr = __rcStr(rc);\n                  if ('object' === typeof args[1]) {\n                    super(rcStr, args[1]);\n                  } else {\n                    args[0] = rcStr + ':';\n                    super(args.join(' '));\n                  }\n                }\n              } else {\n                if (2 === args.length && 'object' === typeof args[1]) {\n                  super(...args);\n                } else {\n                  super(args.join(' '));\n                }\n              }\n            }\n            this.resultCode = rc || capi.SQLITE_ERROR;\n            this.name = 'SQLite3Error';\n          }\n        }\n\n        SQLite3Error.toss = (...args) => {\n          throw new SQLite3Error(...args);\n        };\n        const toss3 = SQLite3Error.toss;\n\n        if (config.wasmfsOpfsDir && !/^\\/[^/]+$/.test(config.wasmfsOpfsDir)) {\n          toss3(\n            \"config.wasmfsOpfsDir must be falsy or in the form '/dir-name'.\",\n          );\n        }\n\n        const isInt32 = (n) => {\n          return (\n            'bigint' !== typeof n &&\n            !!(n === (n | 0) && n <= 2147483647 && n >= -2147483648)\n          );\n        };\n\n        const bigIntFits64 = function f(b) {\n          if (!f._max) {\n            f._max = BigInt('0x7fffffffffffffff');\n            f._min = ~f._max;\n          }\n          return b >= f._min && b <= f._max;\n        };\n\n        const bigIntFits32 = (b) => b >= -0x7fffffffn - 1n && b <= 0x7fffffffn;\n\n        const bigIntFitsDouble = function f(b) {\n          if (!f._min) {\n            f._min = Number.MIN_SAFE_INTEGER;\n            f._max = Number.MAX_SAFE_INTEGER;\n          }\n          return b >= f._min && b <= f._max;\n        };\n\n        const isTypedArray = (v) => {\n          return v && v.constructor && isInt32(v.constructor.BYTES_PER_ELEMENT)\n            ? v\n            : false;\n        };\n\n        const __SAB =\n          'undefined' === typeof SharedArrayBuffer\n            ? function () {}\n            : SharedArrayBuffer;\n\n        const isSharedTypedArray = (aTypedArray) =>\n          aTypedArray.buffer instanceof __SAB;\n\n        const typedArrayPart = (aTypedArray, begin, end) => {\n          return isSharedTypedArray(aTypedArray)\n            ? aTypedArray.slice(begin, end)\n            : aTypedArray.subarray(begin, end);\n        };\n\n        const isBindableTypedArray = (v) => {\n          return (\n            v &&\n            (v instanceof Uint8Array ||\n              v instanceof Int8Array ||\n              v instanceof ArrayBuffer)\n          );\n        };\n\n        const isSQLableTypedArray = (v) => {\n          return (\n            v &&\n            (v instanceof Uint8Array ||\n              v instanceof Int8Array ||\n              v instanceof ArrayBuffer)\n          );\n        };\n\n        const affirmBindableTypedArray = (v) => {\n          return (\n            isBindableTypedArray(v) ||\n            toss3('Value is not of a supported TypedArray type.')\n          );\n        };\n\n        const utf8Decoder = new TextDecoder('utf-8');\n\n        const typedArrayToString = function (typedArray, begin, end) {\n          return utf8Decoder.decode(typedArrayPart(typedArray, begin, end));\n        };\n\n        const flexibleString = function (v) {\n          if (isSQLableTypedArray(v)) {\n            return typedArrayToString(\n              v instanceof ArrayBuffer ? new Uint8Array(v) : v,\n            );\n          } else if (Array.isArray(v)) return v.join('');\n          else if (wasm.isPtr(v)) v = wasm.cstrToJs(v);\n          return v;\n        };\n\n        class WasmAllocError extends Error {\n          constructor(...args) {\n            if (2 === args.length && 'object' === typeof args[1]) {\n              super(...args);\n            } else if (args.length) {\n              super(args.join(' '));\n            } else {\n              super('Allocation failed.');\n            }\n            this.resultCode = capi.SQLITE_NOMEM;\n            this.name = 'WasmAllocError';\n          }\n        }\n\n        WasmAllocError.toss = (...args) => {\n          throw new WasmAllocError(...args);\n        };\n\n        Object.assign(capi, {\n          sqlite3_bind_blob: undefined,\n\n          sqlite3_bind_text: undefined,\n\n          sqlite3_create_function_v2: (\n            pDb,\n            funcName,\n            nArg,\n            eTextRep,\n            pApp,\n            xFunc,\n            xStep,\n            xFinal,\n            xDestroy,\n          ) => {},\n\n          sqlite3_create_function: (\n            pDb,\n            funcName,\n            nArg,\n            eTextRep,\n            pApp,\n            xFunc,\n            xStep,\n            xFinal,\n          ) => {},\n\n          sqlite3_create_window_function: (\n            pDb,\n            funcName,\n            nArg,\n            eTextRep,\n            pApp,\n            xStep,\n            xFinal,\n            xValue,\n            xInverse,\n            xDestroy,\n          ) => {},\n\n          sqlite3_prepare_v3: (\n            dbPtr,\n            sql,\n            sqlByteLen,\n            prepFlags,\n            stmtPtrPtr,\n            strPtrPtr,\n          ) => {},\n\n          sqlite3_prepare_v2: (\n            dbPtr,\n            sql,\n            sqlByteLen,\n            stmtPtrPtr,\n            strPtrPtr,\n          ) => {},\n\n          sqlite3_exec: (pDb, sql, callback, pVoid, pErrMsg) => {},\n\n          sqlite3_randomness: (n, outPtr) => {},\n        });\n\n        const util = {\n          affirmBindableTypedArray,\n          flexibleString,\n          bigIntFits32,\n          bigIntFits64,\n          bigIntFitsDouble,\n          isBindableTypedArray,\n          isInt32,\n          isSQLableTypedArray,\n          isTypedArray,\n          typedArrayToString,\n          isUIThread: () =>\n            globalThis.window === globalThis && !!globalThis.document,\n\n          isSharedTypedArray,\n          toss: function (...args) {\n            throw new Error(args.join(' '));\n          },\n          toss3,\n          typedArrayPart,\n\n          affirmDbHeader: function (bytes) {\n            if (bytes instanceof ArrayBuffer) bytes = new Uint8Array(bytes);\n            const header = 'SQLite format 3';\n            if (header.length > bytes.byteLength) {\n              toss3('Input does not contain an SQLite3 database header.');\n            }\n            for (let i = 0; i < header.length; ++i) {\n              if (header.charCodeAt(i) !== bytes[i]) {\n                toss3('Input does not contain an SQLite3 database header.');\n              }\n            }\n          },\n\n          affirmIsDb: function (bytes) {\n            if (bytes instanceof ArrayBuffer) bytes = new Uint8Array(bytes);\n            const n = bytes.byteLength;\n            if (n < 512 || n % 512 !== 0) {\n              toss3('Byte array size', n, 'is invalid for an SQLite3 db.');\n            }\n            util.affirmDbHeader(bytes);\n          },\n        };\n\n        Object.assign(wasm, {\n          ptrSizeof: config.wasmPtrSizeof || 4,\n\n          ptrIR: config.wasmPtrIR || 'i32',\n\n          bigIntEnabled: !!config.bigIntEnabled,\n\n          exports:\n            config.exports ||\n            toss3('Missing API config.exports (WASM module exports).'),\n\n          memory:\n            config.memory ||\n            config.exports['memory'] ||\n            toss3(\n              'API config object requires a WebAssembly.Memory object',\n              'in either config.exports.memory (exported)',\n              'or config.memory (imported).',\n            ),\n\n          alloc: undefined,\n\n          realloc: undefined,\n\n          dealloc: undefined,\n        });\n\n        wasm.allocFromTypedArray = function (srcTypedArray) {\n          if (srcTypedArray instanceof ArrayBuffer) {\n            srcTypedArray = new Uint8Array(srcTypedArray);\n          }\n          affirmBindableTypedArray(srcTypedArray);\n          const pRet = wasm.alloc(srcTypedArray.byteLength || 1);\n          wasm\n            .heapForSize(srcTypedArray.constructor)\n            .set(srcTypedArray.byteLength ? srcTypedArray : [0], pRet);\n          return pRet;\n        };\n\n        {\n          const keyAlloc = config.allocExportName,\n            keyDealloc = config.deallocExportName,\n            keyRealloc = config.reallocExportName;\n          for (const key of [keyAlloc, keyDealloc, keyRealloc]) {\n            const f = wasm.exports[key];\n            if (!(f instanceof Function))\n              toss3('Missing required exports[', key, '] function.');\n          }\n\n          wasm.alloc = function f(n) {\n            return (\n              f.impl(n) ||\n              WasmAllocError.toss('Failed to allocate', n, ' bytes.')\n            );\n          };\n          wasm.alloc.impl = wasm.exports[keyAlloc];\n          wasm.realloc = function f(m, n) {\n            const m2 = f.impl(m, n);\n            return n\n              ? m2 || WasmAllocError.toss('Failed to reallocate', n, ' bytes.')\n              : 0;\n          };\n          wasm.realloc.impl = wasm.exports[keyRealloc];\n          wasm.dealloc = wasm.exports[keyDealloc];\n        }\n\n        wasm.compileOptionUsed = function f(optName) {\n          if (!arguments.length) {\n            if (f._result) return f._result;\n            else if (!f._opt) {\n              f._rx = /^([^=]+)=(.+)/;\n              f._rxInt = /^-?\\d+$/;\n              f._opt = function (opt, rv) {\n                const m = f._rx.exec(opt);\n                rv[0] = m ? m[1] : opt;\n                rv[1] = m ? (f._rxInt.test(m[2]) ? +m[2] : m[2]) : true;\n              };\n            }\n            const rc = {},\n              ov = [0, 0];\n            let i = 0,\n              k;\n            while ((k = capi.sqlite3_compileoption_get(i++))) {\n              f._opt(k, ov);\n              rc[ov[0]] = ov[1];\n            }\n            return (f._result = rc);\n          } else if (Array.isArray(optName)) {\n            const rc = {};\n            optName.forEach((v) => {\n              rc[v] = capi.sqlite3_compileoption_used(v);\n            });\n            return rc;\n          } else if ('object' === typeof optName) {\n            Object.keys(optName).forEach((k) => {\n              optName[k] = capi.sqlite3_compileoption_used(k);\n            });\n            return optName;\n          }\n          return 'string' === typeof optName\n            ? !!capi.sqlite3_compileoption_used(optName)\n            : false;\n        };\n\n        wasm.pstack = Object.assign(Object.create(null), {\n          restore: wasm.exports.sqlite3__wasm_pstack_restore,\n\n          alloc: function (n) {\n            if ('string' === typeof n && !(n = wasm.sizeofIR(n))) {\n              WasmAllocError.toss(\n                'Invalid value for pstack.alloc(',\n                arguments[0],\n                ')',\n              );\n            }\n            return (\n              wasm.exports.sqlite3__wasm_pstack_alloc(n) ||\n              WasmAllocError.toss(\n                'Could not allocate',\n                n,\n                'bytes from the pstack.',\n              )\n            );\n          },\n\n          allocChunks: function (n, sz) {\n            if ('string' === typeof sz && !(sz = wasm.sizeofIR(sz))) {\n              WasmAllocError.toss(\n                'Invalid size value for allocChunks(',\n                arguments[1],\n                ')',\n              );\n            }\n            const mem = wasm.pstack.alloc(n * sz);\n            const rc = [];\n            let i = 0,\n              offset = 0;\n            for (; i < n; ++i, offset += sz) rc.push(mem + offset);\n            return rc;\n          },\n\n          allocPtr: (n = 1, safePtrSize = true) => {\n            return 1 === n\n              ? wasm.pstack.alloc(safePtrSize ? 8 : wasm.ptrSizeof)\n              : wasm.pstack.allocChunks(n, safePtrSize ? 8 : wasm.ptrSizeof);\n          },\n\n          call: function (f) {\n            const stackPos = wasm.pstack.pointer;\n            try {\n              return f(sqlite3);\n            } finally {\n              wasm.pstack.restore(stackPos);\n            }\n          },\n        });\n        Object.defineProperties(wasm.pstack, {\n          pointer: {\n            configurable: false,\n            iterable: true,\n            writeable: false,\n            get: wasm.exports.sqlite3__wasm_pstack_ptr,\n          },\n\n          quota: {\n            configurable: false,\n            iterable: true,\n            writeable: false,\n            get: wasm.exports.sqlite3__wasm_pstack_quota,\n          },\n\n          remaining: {\n            configurable: false,\n            iterable: true,\n            writeable: false,\n            get: wasm.exports.sqlite3__wasm_pstack_remaining,\n          },\n        });\n\n        capi.sqlite3_randomness = (...args) => {\n          if (\n            1 === args.length &&\n            util.isTypedArray(args[0]) &&\n            1 === args[0].BYTES_PER_ELEMENT\n          ) {\n            const ta = args[0];\n            if (0 === ta.byteLength) {\n              wasm.exports.sqlite3_randomness(0, 0);\n              return ta;\n            }\n            const stack = wasm.pstack.pointer;\n            try {\n              let n = ta.byteLength,\n                offset = 0;\n              const r = wasm.exports.sqlite3_randomness;\n              const heap = wasm.heap8u();\n              const nAlloc = n < 512 ? n : 512;\n              const ptr = wasm.pstack.alloc(nAlloc);\n              do {\n                const j = n > nAlloc ? nAlloc : n;\n                r(j, ptr);\n                ta.set(typedArrayPart(heap, ptr, ptr + j), offset);\n                n -= j;\n                offset += j;\n              } while (n > 0);\n            } catch (e) {\n              console.error(\n                'Highly unexpected (and ignored!) ' +\n                  'exception in sqlite3_randomness():',\n                e,\n              );\n            } finally {\n              wasm.pstack.restore(stack);\n            }\n            return ta;\n          }\n          wasm.exports.sqlite3_randomness(...args);\n        };\n\n        let __wasmfsOpfsDir = undefined;\n\n        capi.sqlite3_wasmfs_opfs_dir = function () {\n          if (undefined !== __wasmfsOpfsDir) return __wasmfsOpfsDir;\n\n          const pdir = config.wasmfsOpfsDir;\n          if (\n            !pdir ||\n            !globalThis.FileSystemHandle ||\n            !globalThis.FileSystemDirectoryHandle ||\n            !globalThis.FileSystemFileHandle\n          ) {\n            return (__wasmfsOpfsDir = '');\n          }\n          try {\n            if (\n              pdir &&\n              0 ===\n                wasm.xCallWrapped(\n                  'sqlite3__wasm_init_wasmfs',\n                  'i32',\n                  ['string'],\n                  pdir,\n                )\n            ) {\n              return (__wasmfsOpfsDir = pdir);\n            } else {\n              return (__wasmfsOpfsDir = '');\n            }\n          } catch (e) {\n            return (__wasmfsOpfsDir = '');\n          }\n        };\n\n        capi.sqlite3_wasmfs_filename_is_persistent = function (name) {\n          const p = capi.sqlite3_wasmfs_opfs_dir();\n          return p && name ? name.startsWith(p + '/') : false;\n        };\n\n        capi.sqlite3_js_db_uses_vfs = function (pDb, vfsName, dbName = 0) {\n          try {\n            const pK = capi.sqlite3_vfs_find(vfsName);\n            if (!pK) return false;\n            else if (!pDb) {\n              return pK === capi.sqlite3_vfs_find(0) ? pK : false;\n            } else {\n              return pK === capi.sqlite3_js_db_vfs(pDb, dbName) ? pK : false;\n            }\n          } catch (e) {\n            return false;\n          }\n        };\n\n        capi.sqlite3_js_vfs_list = function () {\n          const rc = [];\n          let pVfs = capi.sqlite3_vfs_find(0);\n          while (pVfs) {\n            const oVfs = new capi.sqlite3_vfs(pVfs);\n            rc.push(wasm.cstrToJs(oVfs.$zName));\n            pVfs = oVfs.$pNext;\n            oVfs.dispose();\n          }\n          return rc;\n        };\n\n        capi.sqlite3_js_db_export = function (pDb, schema = 0) {\n          pDb = wasm.xWrap.testConvertArg('sqlite3*', pDb);\n          if (!pDb) toss3('Invalid sqlite3* argument.');\n          if (!wasm.bigIntEnabled) toss3('BigInt64 support is not enabled.');\n          const scope = wasm.scopedAllocPush();\n          let pOut;\n          try {\n            const pSize = wasm.scopedAlloc(8 + wasm.ptrSizeof);\n            const ppOut = pSize + 8;\n\n            const zSchema = schema\n              ? wasm.isPtr(schema)\n                ? schema\n                : wasm.scopedAllocCString('' + schema)\n              : 0;\n            let rc = wasm.exports.sqlite3__wasm_db_serialize(\n              pDb,\n              zSchema,\n              ppOut,\n              pSize,\n              0,\n            );\n            if (rc) {\n              toss3(\n                'Database serialization failed with code',\n                sqlite3.capi.sqlite3_js_rc_str(rc),\n              );\n            }\n            pOut = wasm.peekPtr(ppOut);\n            const nOut = wasm.peek(pSize, 'i64');\n            rc = nOut\n              ? wasm.heap8u().slice(pOut, pOut + Number(nOut))\n              : new Uint8Array();\n            return rc;\n          } finally {\n            if (pOut) wasm.exports.sqlite3_free(pOut);\n            wasm.scopedAllocPop(scope);\n          }\n        };\n\n        capi.sqlite3_js_db_vfs = (dbPointer, dbName = 0) =>\n          util.sqlite3__wasm_db_vfs(dbPointer, dbName);\n\n        capi.sqlite3_js_aggregate_context = (pCtx, n) => {\n          return (\n            capi.sqlite3_aggregate_context(pCtx, n) ||\n            (n\n              ? WasmAllocError.toss(\n                  'Cannot allocate',\n                  n,\n                  'bytes for sqlite3_aggregate_context()',\n                )\n              : 0)\n          );\n        };\n\n        capi.sqlite3_js_posix_create_file = function (filename, data, dataLen) {\n          let pData;\n          if (data && wasm.isPtr(data)) {\n            pData = data;\n          } else if (\n            data instanceof ArrayBuffer ||\n            data instanceof Uint8Array\n          ) {\n            pData = wasm.allocFromTypedArray(data);\n            if (arguments.length < 3 || !util.isInt32(dataLen) || dataLen < 0) {\n              dataLen = data.byteLength;\n            }\n          } else {\n            SQLite3Error.toss(\n              'Invalid 2nd argument for sqlite3_js_posix_create_file().',\n            );\n          }\n          try {\n            if (!util.isInt32(dataLen) || dataLen < 0) {\n              SQLite3Error.toss(\n                'Invalid 3rd argument for sqlite3_js_posix_create_file().',\n              );\n            }\n            const rc = util.sqlite3__wasm_posix_create_file(\n              filename,\n              pData,\n              dataLen,\n            );\n            if (rc)\n              SQLite3Error.toss(\n                'Creation of file failed with sqlite3 result code',\n                capi.sqlite3_js_rc_str(rc),\n              );\n          } finally {\n            wasm.dealloc(pData);\n          }\n        };\n\n        capi.sqlite3_js_vfs_create_file = function (\n          vfs,\n          filename,\n          data,\n          dataLen,\n        ) {\n          config.warn(\n            'sqlite3_js_vfs_create_file() is deprecated and',\n            'should be avoided because it can lead to C-level crashes.',\n            'See its documentation for alternative options.',\n          );\n          let pData;\n          if (data) {\n            if (wasm.isPtr(data)) {\n              pData = data;\n            } else if (data instanceof ArrayBuffer) {\n              data = new Uint8Array(data);\n            }\n            if (data instanceof Uint8Array) {\n              pData = wasm.allocFromTypedArray(data);\n              if (\n                arguments.length < 4 ||\n                !util.isInt32(dataLen) ||\n                dataLen < 0\n              ) {\n                dataLen = data.byteLength;\n              }\n            } else {\n              SQLite3Error.toss(\n                'Invalid 3rd argument type for sqlite3_js_vfs_create_file().',\n              );\n            }\n          } else {\n            pData = 0;\n          }\n          if (!util.isInt32(dataLen) || dataLen < 0) {\n            wasm.dealloc(pData);\n            SQLite3Error.toss(\n              'Invalid 4th argument for sqlite3_js_vfs_create_file().',\n            );\n          }\n          try {\n            const rc = util.sqlite3__wasm_vfs_create_file(\n              vfs,\n              filename,\n              pData,\n              dataLen,\n            );\n            if (rc)\n              SQLite3Error.toss(\n                'Creation of file failed with sqlite3 result code',\n                capi.sqlite3_js_rc_str(rc),\n              );\n          } finally {\n            wasm.dealloc(pData);\n          }\n        };\n\n        capi.sqlite3_js_sql_to_string = (sql) => {\n          if ('string' === typeof sql) {\n            return sql;\n          }\n          const x = flexibleString(v);\n          return x === v ? undefined : x;\n        };\n\n        if (util.isUIThread()) {\n          const __kvvfsInfo = function (which) {\n            const rc = Object.create(null);\n            rc.prefix = 'kvvfs-' + which;\n            rc.stores = [];\n            if ('session' === which || '' === which)\n              rc.stores.push(globalThis.sessionStorage);\n            if ('local' === which || '' === which)\n              rc.stores.push(globalThis.localStorage);\n            return rc;\n          };\n\n          capi.sqlite3_js_kvvfs_clear = function (which = '') {\n            let rc = 0;\n            const kvinfo = __kvvfsInfo(which);\n            kvinfo.stores.forEach((s) => {\n              const toRm = [];\n              let i;\n              for (i = 0; i < s.length; ++i) {\n                const k = s.key(i);\n                if (k.startsWith(kvinfo.prefix)) toRm.push(k);\n              }\n              toRm.forEach((kk) => s.removeItem(kk));\n              rc += toRm.length;\n            });\n            return rc;\n          };\n\n          capi.sqlite3_js_kvvfs_size = function (which = '') {\n            let sz = 0;\n            const kvinfo = __kvvfsInfo(which);\n            kvinfo.stores.forEach((s) => {\n              let i;\n              for (i = 0; i < s.length; ++i) {\n                const k = s.key(i);\n                if (k.startsWith(kvinfo.prefix)) {\n                  sz += k.length;\n                  sz += s.getItem(k).length;\n                }\n              }\n            });\n            return sz * 2;\n          };\n        }\n\n        capi.sqlite3_db_config = function (pDb, op, ...args) {\n          switch (op) {\n            case capi.SQLITE_DBCONFIG_ENABLE_FKEY:\n            case capi.SQLITE_DBCONFIG_ENABLE_TRIGGER:\n            case capi.SQLITE_DBCONFIG_ENABLE_FTS3_TOKENIZER:\n            case capi.SQLITE_DBCONFIG_ENABLE_LOAD_EXTENSION:\n            case capi.SQLITE_DBCONFIG_NO_CKPT_ON_CLOSE:\n            case capi.SQLITE_DBCONFIG_ENABLE_QPSG:\n            case capi.SQLITE_DBCONFIG_TRIGGER_EQP:\n            case capi.SQLITE_DBCONFIG_RESET_DATABASE:\n            case capi.SQLITE_DBCONFIG_DEFENSIVE:\n            case capi.SQLITE_DBCONFIG_WRITABLE_SCHEMA:\n            case capi.SQLITE_DBCONFIG_LEGACY_ALTER_TABLE:\n            case capi.SQLITE_DBCONFIG_DQS_DML:\n            case capi.SQLITE_DBCONFIG_DQS_DDL:\n            case capi.SQLITE_DBCONFIG_ENABLE_VIEW:\n            case capi.SQLITE_DBCONFIG_LEGACY_FILE_FORMAT:\n            case capi.SQLITE_DBCONFIG_TRUSTED_SCHEMA:\n            case capi.SQLITE_DBCONFIG_STMT_SCANSTATUS:\n            case capi.SQLITE_DBCONFIG_REVERSE_SCANORDER:\n            case capi.SQLITE_DBCONFIG_ENABLE_ATTACH_CREATE:\n            case capi.SQLITE_DBCONFIG_ENABLE_ATTACH_WRITE:\n            case capi.SQLITE_DBCONFIG_ENABLE_COMMENTS:\n              if (!this.ip) {\n                this.ip = wasm.xWrap('sqlite3__wasm_db_config_ip', 'int', [\n                  'sqlite3*',\n                  'int',\n                  'int',\n                  '*',\n                ]);\n              }\n              return this.ip(pDb, op, args[0], args[1] || 0);\n            case capi.SQLITE_DBCONFIG_LOOKASIDE:\n              if (!this.pii) {\n                this.pii = wasm.xWrap('sqlite3__wasm_db_config_pii', 'int', [\n                  'sqlite3*',\n                  'int',\n                  '*',\n                  'int',\n                  'int',\n                ]);\n              }\n              return this.pii(pDb, op, args[0], args[1], args[2]);\n            case capi.SQLITE_DBCONFIG_MAINDBNAME:\n              if (!this.s) {\n                this.s = wasm.xWrap('sqlite3__wasm_db_config_s', 'int', [\n                  'sqlite3*',\n                  'int',\n                  'string:static',\n                ]);\n              }\n              return this.s(pDb, op, args[0]);\n            default:\n              return capi.SQLITE_MISUSE;\n          }\n        }.bind(Object.create(null));\n\n        capi.sqlite3_value_to_js = function (\n          pVal,\n          throwIfCannotConvert = true,\n        ) {\n          let arg;\n          const valType = capi.sqlite3_value_type(pVal);\n          switch (valType) {\n            case capi.SQLITE_INTEGER:\n              if (wasm.bigIntEnabled) {\n                arg = capi.sqlite3_value_int64(pVal);\n                if (util.bigIntFitsDouble(arg)) arg = Number(arg);\n              } else arg = capi.sqlite3_value_double(pVal);\n              break;\n            case capi.SQLITE_FLOAT:\n              arg = capi.sqlite3_value_double(pVal);\n              break;\n            case capi.SQLITE_TEXT:\n              arg = capi.sqlite3_value_text(pVal);\n              break;\n            case capi.SQLITE_BLOB: {\n              const n = capi.sqlite3_value_bytes(pVal);\n              const pBlob = capi.sqlite3_value_blob(pVal);\n              if (n && !pBlob)\n                sqlite3.WasmAllocError.toss(\n                  'Cannot allocate memory for blob argument of',\n                  n,\n                  'byte(s)',\n                );\n              arg = n ? wasm.heap8u().slice(pBlob, pBlob + Number(n)) : null;\n              break;\n            }\n            case capi.SQLITE_NULL:\n              arg = null;\n              break;\n            default:\n              if (throwIfCannotConvert) {\n                toss3(\n                  capi.SQLITE_MISMATCH,\n                  'Unhandled sqlite3_value_type():',\n                  valType,\n                );\n              }\n              arg = undefined;\n          }\n          return arg;\n        };\n\n        capi.sqlite3_values_to_js = function (\n          argc,\n          pArgv,\n          throwIfCannotConvert = true,\n        ) {\n          let i;\n          const tgt = [];\n          for (i = 0; i < argc; ++i) {\n            tgt.push(\n              capi.sqlite3_value_to_js(\n                wasm.peekPtr(pArgv + wasm.ptrSizeof * i),\n                throwIfCannotConvert,\n              ),\n            );\n          }\n          return tgt;\n        };\n\n        capi.sqlite3_result_error_js = function (pCtx, e) {\n          if (e instanceof WasmAllocError) {\n            capi.sqlite3_result_error_nomem(pCtx);\n          } else {\n            capi.sqlite3_result_error(pCtx, '' + e, -1);\n          }\n        };\n\n        capi.sqlite3_result_js = function (pCtx, val) {\n          if (val instanceof Error) {\n            capi.sqlite3_result_error_js(pCtx, val);\n            return;\n          }\n          try {\n            switch (typeof val) {\n              case 'undefined':\n                break;\n              case 'boolean':\n                capi.sqlite3_result_int(pCtx, val ? 1 : 0);\n                break;\n              case 'bigint':\n                if (util.bigIntFits32(val)) {\n                  capi.sqlite3_result_int(pCtx, Number(val));\n                } else if (util.bigIntFitsDouble(val)) {\n                  capi.sqlite3_result_double(pCtx, Number(val));\n                } else if (wasm.bigIntEnabled) {\n                  if (util.bigIntFits64(val))\n                    capi.sqlite3_result_int64(pCtx, val);\n                  else\n                    toss3(\n                      'BigInt value',\n                      val.toString(),\n                      'is too BigInt for int64.',\n                    );\n                } else {\n                  toss3('BigInt value', val.toString(), 'is too BigInt.');\n                }\n                break;\n              case 'number': {\n                let f;\n                if (util.isInt32(val)) {\n                  f = capi.sqlite3_result_int;\n                } else if (\n                  wasm.bigIntEnabled &&\n                  Number.isInteger(val) &&\n                  util.bigIntFits64(BigInt(val))\n                ) {\n                  f = capi.sqlite3_result_int64;\n                } else {\n                  f = capi.sqlite3_result_double;\n                }\n                f(pCtx, val);\n                break;\n              }\n              case 'string': {\n                const [p, n] = wasm.allocCString(val, true);\n                capi.sqlite3_result_text(pCtx, p, n, capi.SQLITE_WASM_DEALLOC);\n                break;\n              }\n              case 'object':\n                if (null === val) {\n                  capi.sqlite3_result_null(pCtx);\n                  break;\n                } else if (util.isBindableTypedArray(val)) {\n                  const pBlob = wasm.allocFromTypedArray(val);\n                  capi.sqlite3_result_blob(\n                    pCtx,\n                    pBlob,\n                    val.byteLength,\n                    capi.SQLITE_WASM_DEALLOC,\n                  );\n                  break;\n                }\n\n              default:\n                toss3(\n                  \"Don't not how to handle this UDF result value:\",\n                  typeof val,\n                  val,\n                );\n            }\n          } catch (e) {\n            capi.sqlite3_result_error_js(pCtx, e);\n          }\n        };\n\n        capi.sqlite3_column_js = function (\n          pStmt,\n          iCol,\n          throwIfCannotConvert = true,\n        ) {\n          const v = capi.sqlite3_column_value(pStmt, iCol);\n          return 0 === v\n            ? undefined\n            : capi.sqlite3_value_to_js(v, throwIfCannotConvert);\n        };\n\n        const __newOldValue = function (pObj, iCol, impl) {\n          impl = capi[impl];\n          if (!this.ptr) this.ptr = wasm.allocPtr();\n          else wasm.pokePtr(this.ptr, 0);\n          const rc = impl(pObj, iCol, this.ptr);\n          if (rc)\n            return SQLite3Error.toss(\n              rc,\n              arguments[2] + '() failed with code ' + rc,\n            );\n          const pv = wasm.peekPtr(this.ptr);\n          return pv ? capi.sqlite3_value_to_js(pv, true) : undefined;\n        }.bind(Object.create(null));\n\n        capi.sqlite3_preupdate_new_js = (pDb, iCol) =>\n          __newOldValue(pDb, iCol, 'sqlite3_preupdate_new');\n\n        capi.sqlite3_preupdate_old_js = (pDb, iCol) =>\n          __newOldValue(pDb, iCol, 'sqlite3_preupdate_old');\n\n        capi.sqlite3changeset_new_js = (pChangesetIter, iCol) =>\n          __newOldValue(pChangesetIter, iCol, 'sqlite3changeset_new');\n\n        capi.sqlite3changeset_old_js = (pChangesetIter, iCol) =>\n          __newOldValue(pChangesetIter, iCol, 'sqlite3changeset_old');\n\n        const sqlite3 = {\n          WasmAllocError: WasmAllocError,\n          SQLite3Error: SQLite3Error,\n          capi,\n          util,\n          wasm,\n          config,\n\n          version: Object.create(null),\n\n          client: undefined,\n\n          asyncPostInit: async function ff() {\n            if (ff.isReady instanceof Promise) return ff.isReady;\n            let lia = sqlite3ApiBootstrap.initializersAsync;\n            delete sqlite3ApiBootstrap.initializersAsync;\n            const postInit = async () => {\n              if (!sqlite3.__isUnderTest) {\n                delete sqlite3.util;\n\n                delete sqlite3.StructBinder;\n              }\n              return sqlite3;\n            };\n            const catcher = (e) => {\n              config.error('an async sqlite3 initializer failed:', e);\n              throw e;\n            };\n            if (!lia || !lia.length) {\n              return (ff.isReady = postInit().catch(catcher));\n            }\n            lia = lia.map((f) => {\n              return f instanceof Function ? async (x) => f(sqlite3) : f;\n            });\n            lia.push(postInit);\n            let p = Promise.resolve(sqlite3);\n            while (lia.length) p = p.then(lia.shift());\n            return (ff.isReady = p.catch(catcher));\n          },\n\n          scriptInfo: undefined,\n        };\n        try {\n          sqlite3ApiBootstrap.initializers.forEach((f) => {\n            f(sqlite3);\n          });\n        } catch (e) {\n          console.error('sqlite3 bootstrap initializer threw:', e);\n          throw e;\n        }\n        delete sqlite3ApiBootstrap.initializers;\n        sqlite3ApiBootstrap.sqlite3 = sqlite3;\n        return sqlite3;\n      };\n\n      globalThis.sqlite3ApiBootstrap.initializers = [];\n\n      globalThis.sqlite3ApiBootstrap.initializersAsync = [];\n\n      globalThis.sqlite3ApiBootstrap.defaultConfig = Object.create(null);\n\n      globalThis.sqlite3ApiBootstrap.sqlite3 = undefined;\n\n      globalThis.WhWasmUtilInstaller = function (target) {\n        'use strict';\n        if (undefined === target.bigIntEnabled) {\n          target.bigIntEnabled = !!globalThis['BigInt64Array'];\n        }\n\n        const toss = (...args) => {\n          throw new Error(args.join(' '));\n        };\n\n        if (!target.exports) {\n          Object.defineProperty(target, 'exports', {\n            enumerable: true,\n            configurable: true,\n            get: () => target.instance && target.instance.exports,\n          });\n        }\n\n        const ptrIR = target.pointerIR || 'i32';\n        const ptrSizeof = (target.ptrSizeof =\n          'i32' === ptrIR\n            ? 4\n            : 'i64' === ptrIR\n              ? 8\n              : toss('Unhandled ptrSizeof:', ptrIR));\n\n        const cache = Object.create(null);\n\n        cache.heapSize = 0;\n\n        cache.memory = null;\n\n        cache.freeFuncIndexes = [];\n\n        cache.scopedAlloc = [];\n\n        cache.utf8Decoder = new TextDecoder();\n        cache.utf8Encoder = new TextEncoder('utf-8');\n\n        target.sizeofIR = (n) => {\n          switch (n) {\n            case 'i8':\n              return 1;\n            case 'i16':\n              return 2;\n            case 'i32':\n            case 'f32':\n            case 'float':\n              return 4;\n            case 'i64':\n            case 'f64':\n            case 'double':\n              return 8;\n            case '*':\n              return ptrSizeof;\n            default:\n              return ('' + n).endsWith('*') ? ptrSizeof : undefined;\n          }\n        };\n\n        const heapWrappers = function () {\n          if (!cache.memory) {\n            cache.memory =\n              target.memory instanceof WebAssembly.Memory\n                ? target.memory\n                : target.exports.memory;\n          } else if (cache.heapSize === cache.memory.buffer.byteLength) {\n            return cache;\n          }\n\n          const b = cache.memory.buffer;\n          cache.HEAP8 = new Int8Array(b);\n          cache.HEAP8U = new Uint8Array(b);\n          cache.HEAP16 = new Int16Array(b);\n          cache.HEAP16U = new Uint16Array(b);\n          cache.HEAP32 = new Int32Array(b);\n          cache.HEAP32U = new Uint32Array(b);\n          if (target.bigIntEnabled) {\n            cache.HEAP64 = new BigInt64Array(b);\n            cache.HEAP64U = new BigUint64Array(b);\n          }\n          cache.HEAP32F = new Float32Array(b);\n          cache.HEAP64F = new Float64Array(b);\n          cache.heapSize = b.byteLength;\n          return cache;\n        };\n\n        target.heap8 = () => heapWrappers().HEAP8;\n\n        target.heap8u = () => heapWrappers().HEAP8U;\n\n        target.heap16 = () => heapWrappers().HEAP16;\n\n        target.heap16u = () => heapWrappers().HEAP16U;\n\n        target.heap32 = () => heapWrappers().HEAP32;\n\n        target.heap32u = () => heapWrappers().HEAP32U;\n\n        target.heapForSize = function (n, unsigned = true) {\n          let ctor;\n          const c =\n            cache.memory && cache.heapSize === cache.memory.buffer.byteLength\n              ? cache\n              : heapWrappers();\n          switch (n) {\n            case Int8Array:\n              return c.HEAP8;\n            case Uint8Array:\n              return c.HEAP8U;\n            case Int16Array:\n              return c.HEAP16;\n            case Uint16Array:\n              return c.HEAP16U;\n            case Int32Array:\n              return c.HEAP32;\n            case Uint32Array:\n              return c.HEAP32U;\n            case 8:\n              return unsigned ? c.HEAP8U : c.HEAP8;\n            case 16:\n              return unsigned ? c.HEAP16U : c.HEAP16;\n            case 32:\n              return unsigned ? c.HEAP32U : c.HEAP32;\n            case 64:\n              if (c.HEAP64) return unsigned ? c.HEAP64U : c.HEAP64;\n              break;\n            default:\n              if (target.bigIntEnabled) {\n                if (n === globalThis['BigUint64Array']) return c.HEAP64U;\n                else if (n === globalThis['BigInt64Array']) return c.HEAP64;\n                break;\n              }\n          }\n          toss(\n            'Invalid heapForSize() size: expecting 8, 16, 32,',\n            'or (if BigInt is enabled) 64.',\n          );\n        };\n\n        target.functionTable = function () {\n          return target.exports.__indirect_function_table;\n        };\n\n        target.functionEntry = function (fptr) {\n          const ft = target.functionTable();\n          return fptr < ft.length ? ft.get(fptr) : undefined;\n        };\n\n        target.jsFuncToWasm = function f(func, sig) {\n          if (!f._) {\n            f._ = {\n              sigTypes: Object.assign(Object.create(null), {\n                i: 'i32',\n                p: 'i32',\n                P: 'i32',\n                s: 'i32',\n                j: 'i64',\n                f: 'f32',\n                d: 'f64',\n              }),\n\n              typeCodes: Object.assign(Object.create(null), {\n                f64: 0x7c,\n                f32: 0x7d,\n                i64: 0x7e,\n                i32: 0x7f,\n              }),\n\n              uleb128Encode: function (tgt, method, n) {\n                if (n < 128) tgt[method](n);\n                else tgt[method](n % 128 | 128, n >> 7);\n              },\n\n              rxJSig: /^(\\w)\\((\\w*)\\)$/,\n\n              sigParams: function (sig) {\n                const m = f._.rxJSig.exec(sig);\n                return m ? m[2] : sig.substr(1);\n              },\n\n              letterType: (x) =>\n                f._.sigTypes[x] || toss('Invalid signature letter:', x),\n\n              pushSigType: (dest, letter) =>\n                dest.push(f._.typeCodes[f._.letterType(letter)]),\n            };\n          }\n          if ('string' === typeof func) {\n            const x = sig;\n            sig = func;\n            func = x;\n          }\n          const sigParams = f._.sigParams(sig);\n          const wasmCode = [0x01, 0x60];\n          f._.uleb128Encode(wasmCode, 'push', sigParams.length);\n          for (const x of sigParams) f._.pushSigType(wasmCode, x);\n          if ('v' === sig[0]) wasmCode.push(0);\n          else {\n            wasmCode.push(1);\n            f._.pushSigType(wasmCode, sig[0]);\n          }\n          f._.uleb128Encode(wasmCode, 'unshift', wasmCode.length);\n          wasmCode.unshift(\n            0x00,\n            0x61,\n            0x73,\n            0x6d,\n            0x01,\n            0x00,\n            0x00,\n            0x00,\n            0x01,\n          );\n          wasmCode.push(\n            0x02,\n            0x07,\n\n            0x01,\n            0x01,\n            0x65,\n            0x01,\n            0x66,\n            0x00,\n            0x00,\n            0x07,\n            0x05,\n\n            0x01,\n            0x01,\n            0x66,\n            0x00,\n            0x00,\n          );\n          return new WebAssembly.Instance(\n            new WebAssembly.Module(new Uint8Array(wasmCode)),\n            {\n              e: { f: func },\n            },\n          ).exports['f'];\n        };\n\n        const __installFunction = function f(func, sig, scoped) {\n          if (scoped && !cache.scopedAlloc.length) {\n            toss('No scopedAllocPush() scope is active.');\n          }\n          if ('string' === typeof func) {\n            const x = sig;\n            sig = func;\n            func = x;\n          }\n          if ('string' !== typeof sig || !(func instanceof Function)) {\n            toss(\n              'Invalid arguments: expecting (function,signature) ' +\n                'or (signature,function).',\n            );\n          }\n          const ft = target.functionTable();\n          const oldLen = ft.length;\n          let ptr;\n          while (cache.freeFuncIndexes.length) {\n            ptr = cache.freeFuncIndexes.pop();\n            if (ft.get(ptr)) {\n              ptr = null;\n              continue;\n            } else {\n              break;\n            }\n          }\n          if (!ptr) {\n            ptr = oldLen;\n            ft.grow(1);\n          }\n          try {\n            ft.set(ptr, func);\n            if (scoped) {\n              cache.scopedAlloc[cache.scopedAlloc.length - 1].push(ptr);\n            }\n            return ptr;\n          } catch (e) {\n            if (!(e instanceof TypeError)) {\n              if (ptr === oldLen) cache.freeFuncIndexes.push(oldLen);\n              throw e;\n            }\n          }\n\n          try {\n            const fptr = target.jsFuncToWasm(func, sig);\n            ft.set(ptr, fptr);\n            if (scoped) {\n              cache.scopedAlloc[cache.scopedAlloc.length - 1].push(ptr);\n            }\n          } catch (e) {\n            if (ptr === oldLen) cache.freeFuncIndexes.push(oldLen);\n            throw e;\n          }\n          return ptr;\n        };\n\n        target.installFunction = (func, sig) =>\n          __installFunction(func, sig, false);\n\n        target.scopedInstallFunction = (func, sig) =>\n          __installFunction(func, sig, true);\n\n        target.uninstallFunction = function (ptr) {\n          if (!ptr && 0 !== ptr) return undefined;\n          const fi = cache.freeFuncIndexes;\n          const ft = target.functionTable();\n          fi.push(ptr);\n          const rc = ft.get(ptr);\n          ft.set(ptr, null);\n          return rc;\n        };\n\n        target.peek = function f(ptr, type = 'i8') {\n          if (type.endsWith('*')) type = ptrIR;\n          const c =\n            cache.memory && cache.heapSize === cache.memory.buffer.byteLength\n              ? cache\n              : heapWrappers();\n          const list = Array.isArray(ptr) ? [] : undefined;\n          let rc;\n          do {\n            if (list) ptr = arguments[0].shift();\n            switch (type) {\n              case 'i1':\n              case 'i8':\n                rc = c.HEAP8[ptr >> 0];\n                break;\n              case 'i16':\n                rc = c.HEAP16[ptr >> 1];\n                break;\n              case 'i32':\n                rc = c.HEAP32[ptr >> 2];\n                break;\n              case 'float':\n              case 'f32':\n                rc = c.HEAP32F[ptr >> 2];\n                break;\n              case 'double':\n              case 'f64':\n                rc = Number(c.HEAP64F[ptr >> 3]);\n                break;\n              case 'i64':\n                if (target.bigIntEnabled) {\n                  rc = BigInt(c.HEAP64[ptr >> 3]);\n                  break;\n                }\n\n              default:\n                toss('Invalid type for peek():', type);\n            }\n            if (list) list.push(rc);\n          } while (list && arguments[0].length);\n          return list || rc;\n        };\n\n        target.poke = function (ptr, value, type = 'i8') {\n          if (type.endsWith('*')) type = ptrIR;\n          const c =\n            cache.memory && cache.heapSize === cache.memory.buffer.byteLength\n              ? cache\n              : heapWrappers();\n          for (const p of Array.isArray(ptr) ? ptr : [ptr]) {\n            switch (type) {\n              case 'i1':\n              case 'i8':\n                c.HEAP8[p >> 0] = value;\n                continue;\n              case 'i16':\n                c.HEAP16[p >> 1] = value;\n                continue;\n              case 'i32':\n                c.HEAP32[p >> 2] = value;\n                continue;\n              case 'float':\n              case 'f32':\n                c.HEAP32F[p >> 2] = value;\n                continue;\n              case 'double':\n              case 'f64':\n                c.HEAP64F[p >> 3] = value;\n                continue;\n              case 'i64':\n                if (c.HEAP64) {\n                  c.HEAP64[p >> 3] = BigInt(value);\n                  continue;\n                }\n\n              default:\n                toss('Invalid type for poke(): ' + type);\n            }\n          }\n          return this;\n        };\n\n        target.peekPtr = (...ptr) =>\n          target.peek(1 === ptr.length ? ptr[0] : ptr, ptrIR);\n\n        target.pokePtr = (ptr, value = 0) => target.poke(ptr, value, ptrIR);\n\n        target.peek8 = (...ptr) =>\n          target.peek(1 === ptr.length ? ptr[0] : ptr, 'i8');\n\n        target.poke8 = (ptr, value) => target.poke(ptr, value, 'i8');\n\n        target.peek16 = (...ptr) =>\n          target.peek(1 === ptr.length ? ptr[0] : ptr, 'i16');\n\n        target.poke16 = (ptr, value) => target.poke(ptr, value, 'i16');\n\n        target.peek32 = (...ptr) =>\n          target.peek(1 === ptr.length ? ptr[0] : ptr, 'i32');\n\n        target.poke32 = (ptr, value) => target.poke(ptr, value, 'i32');\n\n        target.peek64 = (...ptr) =>\n          target.peek(1 === ptr.length ? ptr[0] : ptr, 'i64');\n\n        target.poke64 = (ptr, value) => target.poke(ptr, value, 'i64');\n\n        target.peek32f = (...ptr) =>\n          target.peek(1 === ptr.length ? ptr[0] : ptr, 'f32');\n\n        target.poke32f = (ptr, value) => target.poke(ptr, value, 'f32');\n\n        target.peek64f = (...ptr) =>\n          target.peek(1 === ptr.length ? ptr[0] : ptr, 'f64');\n\n        target.poke64f = (ptr, value) => target.poke(ptr, value, 'f64');\n\n        target.getMemValue = target.peek;\n\n        target.getPtrValue = target.peekPtr;\n\n        target.setMemValue = target.poke;\n\n        target.setPtrValue = target.pokePtr;\n\n        target.isPtr32 = (ptr) =>\n          'number' === typeof ptr && ptr === (ptr | 0) && ptr >= 0;\n\n        target.isPtr = target.isPtr32;\n\n        target.cstrlen = function (ptr) {\n          if (!ptr || !target.isPtr(ptr)) return null;\n          const h = heapWrappers().HEAP8U;\n          let pos = ptr;\n          for (; h[pos] !== 0; ++pos) {}\n          return pos - ptr;\n        };\n\n        const __SAB =\n          'undefined' === typeof SharedArrayBuffer\n            ? function () {}\n            : SharedArrayBuffer;\n        const __utf8Decode = function (arrayBuffer, begin, end) {\n          return cache.utf8Decoder.decode(\n            arrayBuffer.buffer instanceof __SAB\n              ? arrayBuffer.slice(begin, end)\n              : arrayBuffer.subarray(begin, end),\n          );\n        };\n\n        target.cstrToJs = function (ptr) {\n          const n = target.cstrlen(ptr);\n          return n\n            ? __utf8Decode(heapWrappers().HEAP8U, ptr, ptr + n)\n            : null === n\n              ? n\n              : '';\n        };\n\n        target.jstrlen = function (str) {\n          if ('string' !== typeof str) return null;\n          const n = str.length;\n          let len = 0;\n          for (let i = 0; i < n; ++i) {\n            let u = str.charCodeAt(i);\n            if (u >= 0xd800 && u <= 0xdfff) {\n              u =\n                (0x10000 + ((u & 0x3ff) << 10)) | (str.charCodeAt(++i) & 0x3ff);\n            }\n            if (u <= 0x7f) ++len;\n            else if (u <= 0x7ff) len += 2;\n            else if (u <= 0xffff) len += 3;\n            else len += 4;\n          }\n          return len;\n        };\n\n        target.jstrcpy = function (\n          jstr,\n          tgt,\n          offset = 0,\n          maxBytes = -1,\n          addNul = true,\n        ) {\n          if (\n            !tgt ||\n            (!(tgt instanceof Int8Array) && !(tgt instanceof Uint8Array))\n          ) {\n            toss('jstrcpy() target must be an Int8Array or Uint8Array.');\n          }\n          if (maxBytes < 0) maxBytes = tgt.length - offset;\n          if (!(maxBytes > 0) || !(offset >= 0)) return 0;\n          let i = 0,\n            max = jstr.length;\n          const begin = offset,\n            end = offset + maxBytes - (addNul ? 1 : 0);\n          for (; i < max && offset < end; ++i) {\n            let u = jstr.charCodeAt(i);\n            if (u >= 0xd800 && u <= 0xdfff) {\n              u =\n                (0x10000 + ((u & 0x3ff) << 10)) |\n                (jstr.charCodeAt(++i) & 0x3ff);\n            }\n            if (u <= 0x7f) {\n              if (offset >= end) break;\n              tgt[offset++] = u;\n            } else if (u <= 0x7ff) {\n              if (offset + 1 >= end) break;\n              tgt[offset++] = 0xc0 | (u >> 6);\n              tgt[offset++] = 0x80 | (u & 0x3f);\n            } else if (u <= 0xffff) {\n              if (offset + 2 >= end) break;\n              tgt[offset++] = 0xe0 | (u >> 12);\n              tgt[offset++] = 0x80 | ((u >> 6) & 0x3f);\n              tgt[offset++] = 0x80 | (u & 0x3f);\n            } else {\n              if (offset + 3 >= end) break;\n              tgt[offset++] = 0xf0 | (u >> 18);\n              tgt[offset++] = 0x80 | ((u >> 12) & 0x3f);\n              tgt[offset++] = 0x80 | ((u >> 6) & 0x3f);\n              tgt[offset++] = 0x80 | (u & 0x3f);\n            }\n          }\n          if (addNul) tgt[offset++] = 0;\n          return offset - begin;\n        };\n\n        target.cstrncpy = function (tgtPtr, srcPtr, n) {\n          if (!tgtPtr || !srcPtr)\n            toss('cstrncpy() does not accept NULL strings.');\n          if (n < 0) n = target.cstrlen(strPtr) + 1;\n          else if (!(n > 0)) return 0;\n          const heap = target.heap8u();\n          let i = 0,\n            ch;\n          for (; i < n && (ch = heap[srcPtr + i]); ++i) {\n            heap[tgtPtr + i] = ch;\n          }\n          if (i < n) heap[tgtPtr + i++] = 0;\n          return i;\n        };\n\n        target.jstrToUintArray = (str, addNul = false) => {\n          return cache.utf8Encoder.encode(addNul ? str + '\\0' : str);\n        };\n\n        const __affirmAlloc = (obj, funcName) => {\n          if (\n            !(obj.alloc instanceof Function) ||\n            !(obj.dealloc instanceof Function)\n          ) {\n            toss(\n              'Object is missing alloc() and/or dealloc() function(s)',\n              'required by',\n              funcName + '().',\n            );\n          }\n        };\n\n        const __allocCStr = function (\n          jstr,\n          returnWithLength,\n          allocator,\n          funcName,\n        ) {\n          __affirmAlloc(target, funcName);\n          if ('string' !== typeof jstr) return null;\n          if (0) {\n            const n = target.jstrlen(jstr),\n              ptr = allocator(n + 1);\n            target.jstrcpy(jstr, target.heap8u(), ptr, n + 1, true);\n            return returnWithLength ? [ptr, n] : ptr;\n          } else {\n            const u = cache.utf8Encoder.encode(jstr),\n              ptr = allocator(u.length + 1),\n              heap = heapWrappers().HEAP8U;\n            heap.set(u, ptr);\n            heap[ptr + u.length] = 0;\n            return returnWithLength ? [ptr, u.length] : ptr;\n          }\n        };\n\n        target.allocCString = (jstr, returnWithLength = false) =>\n          __allocCStr(jstr, returnWithLength, target.alloc, 'allocCString()');\n\n        target.scopedAllocPush = function () {\n          __affirmAlloc(target, 'scopedAllocPush');\n          const a = [];\n          cache.scopedAlloc.push(a);\n          return a;\n        };\n\n        target.scopedAllocPop = function (state) {\n          __affirmAlloc(target, 'scopedAllocPop');\n          const n = arguments.length\n            ? cache.scopedAlloc.indexOf(state)\n            : cache.scopedAlloc.length - 1;\n          if (n < 0) toss('Invalid state object for scopedAllocPop().');\n          if (0 === arguments.length) state = cache.scopedAlloc[n];\n          cache.scopedAlloc.splice(n, 1);\n          for (let p; (p = state.pop()); ) {\n            if (target.functionEntry(p)) {\n              target.uninstallFunction(p);\n            } else target.dealloc(p);\n          }\n        };\n\n        target.scopedAlloc = function (n) {\n          if (!cache.scopedAlloc.length) {\n            toss('No scopedAllocPush() scope is active.');\n          }\n          const p = target.alloc(n);\n          cache.scopedAlloc[cache.scopedAlloc.length - 1].push(p);\n          return p;\n        };\n\n        Object.defineProperty(target.scopedAlloc, 'level', {\n          configurable: false,\n          enumerable: false,\n          get: () => cache.scopedAlloc.length,\n          set: () => toss(\"The 'active' property is read-only.\"),\n        });\n\n        target.scopedAllocCString = (jstr, returnWithLength = false) =>\n          __allocCStr(\n            jstr,\n            returnWithLength,\n            target.scopedAlloc,\n            'scopedAllocCString()',\n          );\n\n        const __allocMainArgv = function (isScoped, list) {\n          const pList = target[isScoped ? 'scopedAlloc' : 'alloc'](\n            (list.length + 1) * target.ptrSizeof,\n          );\n          let i = 0;\n          list.forEach((e) => {\n            target.pokePtr(\n              pList + target.ptrSizeof * i++,\n              target[isScoped ? 'scopedAllocCString' : 'allocCString']('' + e),\n            );\n          });\n          target.pokePtr(pList + target.ptrSizeof * i, 0);\n          return pList;\n        };\n\n        target.scopedAllocMainArgv = (list) => __allocMainArgv(true, list);\n\n        target.allocMainArgv = (list) => __allocMainArgv(false, list);\n\n        target.cArgvToJs = (argc, pArgv) => {\n          const list = [];\n          for (let i = 0; i < argc; ++i) {\n            const arg = target.peekPtr(pArgv + target.ptrSizeof * i);\n            list.push(arg ? target.cstrToJs(arg) : null);\n          }\n          return list;\n        };\n\n        target.scopedAllocCall = function (func) {\n          target.scopedAllocPush();\n          try {\n            return func();\n          } finally {\n            target.scopedAllocPop();\n          }\n        };\n\n        const __allocPtr = function (howMany, safePtrSize, method) {\n          __affirmAlloc(target, method);\n          const pIr = safePtrSize ? 'i64' : ptrIR;\n          let m = target[method](howMany * (safePtrSize ? 8 : ptrSizeof));\n          target.poke(m, 0, pIr);\n          if (1 === howMany) {\n            return m;\n          }\n          const a = [m];\n          for (let i = 1; i < howMany; ++i) {\n            m += safePtrSize ? 8 : ptrSizeof;\n            a[i] = m;\n            target.poke(m, 0, pIr);\n          }\n          return a;\n        };\n\n        target.allocPtr = (howMany = 1, safePtrSize = true) =>\n          __allocPtr(howMany, safePtrSize, 'alloc');\n\n        target.scopedAllocPtr = (howMany = 1, safePtrSize = true) =>\n          __allocPtr(howMany, safePtrSize, 'scopedAlloc');\n\n        target.xGet = function (name) {\n          return (\n            target.exports[name] || toss('Cannot find exported symbol:', name)\n          );\n        };\n\n        const __argcMismatch = (f, n) =>\n          toss(f + '() requires', n, 'argument(s).');\n\n        target.xCall = function (fname, ...args) {\n          const f = fname instanceof Function ? fname : target.xGet(fname);\n          if (!(f instanceof Function))\n            toss('Exported symbol', fname, 'is not a function.');\n          if (f.length !== args.length)\n            __argcMismatch(f === fname ? f.name : fname, f.length);\n          return 2 === arguments.length && Array.isArray(arguments[1])\n            ? f.apply(null, arguments[1])\n            : f.apply(null, args);\n        };\n\n        cache.xWrap = Object.create(null);\n        cache.xWrap.convert = Object.create(null);\n\n        cache.xWrap.convert.arg = new Map();\n\n        cache.xWrap.convert.result = new Map();\n        const xArg = cache.xWrap.convert.arg,\n          xResult = cache.xWrap.convert.result;\n\n        if (target.bigIntEnabled) {\n          xArg.set('i64', (i) => BigInt(i));\n        }\n        const __xArgPtr =\n          'i32' === ptrIR ? (i) => i | 0 : (i) => BigInt(i) | BigInt(0);\n        xArg\n          .set('i32', __xArgPtr)\n          .set('i16', (i) => (i | 0) & 0xffff)\n          .set('i8', (i) => (i | 0) & 0xff)\n          .set('f32', (i) => Number(i).valueOf())\n          .set('float', xArg.get('f32'))\n          .set('f64', xArg.get('f32'))\n          .set('double', xArg.get('f64'))\n          .set('int', xArg.get('i32'))\n          .set('null', (i) => i)\n          .set(null, xArg.get('null'))\n          .set('**', __xArgPtr)\n          .set('*', __xArgPtr);\n        xResult\n          .set('*', __xArgPtr)\n          .set('pointer', __xArgPtr)\n          .set('number', (v) => Number(v))\n          .set('void', (v) => undefined)\n          .set('null', (v) => v)\n          .set(null, xResult.get('null'));\n\n        {\n          const copyToResult = [\n            'i8',\n            'i16',\n            'i32',\n            'int',\n            'f32',\n            'float',\n            'f64',\n            'double',\n          ];\n          if (target.bigIntEnabled) copyToResult.push('i64');\n          const adaptPtr = xArg.get(ptrIR);\n          for (const t of copyToResult) {\n            xArg.set(t + '*', adaptPtr);\n            xResult.set(t + '*', adaptPtr);\n            xResult.set(t, xArg.get(t) || toss('Missing arg converter:', t));\n          }\n        }\n\n        const __xArgString = function (v) {\n          if ('string' === typeof v) return target.scopedAllocCString(v);\n          return v ? __xArgPtr(v) : null;\n        };\n        xArg\n          .set('string', __xArgString)\n          .set('utf8', __xArgString)\n          .set('pointer', __xArgString);\n\n        xResult\n          .set('string', (i) => target.cstrToJs(i))\n          .set('utf8', xResult.get('string'))\n          .set('string:dealloc', (i) => {\n            try {\n              return i ? target.cstrToJs(i) : null;\n            } finally {\n              target.dealloc(i);\n            }\n          })\n          .set('utf8:dealloc', xResult.get('string:dealloc'))\n          .set('json', (i) => JSON.parse(target.cstrToJs(i)))\n          .set('json:dealloc', (i) => {\n            try {\n              return i ? JSON.parse(target.cstrToJs(i)) : null;\n            } finally {\n              target.dealloc(i);\n            }\n          });\n\n        const AbstractArgAdapter = class {\n          constructor(opt) {\n            this.name = opt.name || 'unnamed adapter';\n          }\n\n          convertArg(v, argv, argIndex) {\n            toss('AbstractArgAdapter must be subclassed.');\n          }\n        };\n\n        xArg.FuncPtrAdapter = class FuncPtrAdapter extends AbstractArgAdapter {\n          constructor(opt) {\n            super(opt);\n            if (xArg.FuncPtrAdapter.warnOnUse) {\n              console.warn(\n                'xArg.FuncPtrAdapter is an internal-only API',\n                'and is not intended to be invoked from',\n                'client-level code. Invoked with:',\n                opt,\n              );\n            }\n            this.name = opt.name || 'unnamed';\n            this.signature = opt.signature;\n            if (opt.contextKey instanceof Function) {\n              this.contextKey = opt.contextKey;\n              if (!opt.bindScope) opt.bindScope = 'context';\n            }\n            this.bindScope =\n              opt.bindScope ||\n              toss(\n                'FuncPtrAdapter options requires a bindScope (explicit or implied).',\n              );\n            if (FuncPtrAdapter.bindScopes.indexOf(opt.bindScope) < 0) {\n              toss(\n                'Invalid options.bindScope (' +\n                  opt.bindMod +\n                  ') for FuncPtrAdapter. ' +\n                  'Expecting one of: (' +\n                  FuncPtrAdapter.bindScopes.join(', ') +\n                  ')',\n              );\n            }\n            this.isTransient = 'transient' === this.bindScope;\n            this.isContext = 'context' === this.bindScope;\n            this.isPermanent = 'permanent' === this.bindScope;\n            this.singleton = 'singleton' === this.bindScope ? [] : undefined;\n\n            this.callProxy =\n              opt.callProxy instanceof Function ? opt.callProxy : undefined;\n          }\n\n          contextKey(argv, argIndex) {\n            return this;\n          }\n\n          contextMap(key) {\n            const cm = this.__cmap || (this.__cmap = new Map());\n            let rc = cm.get(key);\n            if (undefined === rc) cm.set(key, (rc = []));\n            return rc;\n          }\n\n          convertArg(v, argv, argIndex) {\n            let pair = this.singleton;\n            if (!pair && this.isContext) {\n              pair = this.contextMap(this.contextKey(argv, argIndex));\n            }\n            if (pair && pair[0] === v) return pair[1];\n            if (v instanceof Function) {\n              if (this.callProxy) v = this.callProxy(v);\n              const fp = __installFunction(v, this.signature, this.isTransient);\n              if (FuncPtrAdapter.debugFuncInstall) {\n                FuncPtrAdapter.debugOut(\n                  'FuncPtrAdapter installed',\n                  this,\n                  this.contextKey(argv, argIndex),\n                  '@' + fp,\n                  v,\n                );\n              }\n              if (pair) {\n                if (pair[1]) {\n                  if (FuncPtrAdapter.debugFuncInstall) {\n                    FuncPtrAdapter.debugOut(\n                      'FuncPtrAdapter uninstalling',\n                      this,\n                      this.contextKey(argv, argIndex),\n                      '@' + pair[1],\n                      v,\n                    );\n                  }\n                  try {\n                    cache.scopedAlloc[cache.scopedAlloc.length - 1].push(\n                      pair[1],\n                    );\n                  } catch (e) {}\n                }\n                pair[0] = v;\n                pair[1] = fp;\n              }\n              return fp;\n            } else if (target.isPtr(v) || null === v || undefined === v) {\n              if (pair && pair[1] && pair[1] !== v) {\n                if (FuncPtrAdapter.debugFuncInstall) {\n                  FuncPtrAdapter.debugOut(\n                    'FuncPtrAdapter uninstalling',\n                    this,\n                    this.contextKey(argv, argIndex),\n                    '@' + pair[1],\n                    v,\n                  );\n                }\n                try {\n                  cache.scopedAlloc[cache.scopedAlloc.length - 1].push(pair[1]);\n                } catch (e) {}\n                pair[0] = pair[1] = v | 0;\n              }\n              return v || 0;\n            } else {\n              throw new TypeError(\n                'Invalid FuncPtrAdapter argument type. ' +\n                  'Expecting a function pointer or a ' +\n                  (this.name ? this.name + ' ' : '') +\n                  'function matching signature ' +\n                  this.signature +\n                  '.',\n              );\n            }\n          }\n        };\n\n        xArg.FuncPtrAdapter.warnOnUse = false;\n\n        xArg.FuncPtrAdapter.debugFuncInstall = false;\n\n        xArg.FuncPtrAdapter.debugOut = console.debug.bind(console);\n\n        xArg.FuncPtrAdapter.bindScopes = [\n          'transient',\n          'context',\n          'singleton',\n          'permanent',\n        ];\n\n        const __xArgAdapterCheck = (t) =>\n          xArg.get(t) || toss('Argument adapter not found:', t);\n\n        const __xResultAdapterCheck = (t) =>\n          xResult.get(t) || toss('Result adapter not found:', t);\n\n        cache.xWrap.convertArg = (t, ...args) => __xArgAdapterCheck(t)(...args);\n\n        cache.xWrap.convertArgNoCheck = (t, ...args) => xArg.get(t)(...args);\n\n        cache.xWrap.convertResult = (t, v) =>\n          null === t ? v : t ? __xResultAdapterCheck(t)(v) : undefined;\n\n        cache.xWrap.convertResultNoCheck = (t, v) =>\n          null === t ? v : t ? xResult.get(t)(v) : undefined;\n\n        target.xWrap = function (fArg, resultType, ...argTypes) {\n          if (3 === arguments.length && Array.isArray(arguments[2])) {\n            argTypes = arguments[2];\n          }\n          if (target.isPtr(fArg)) {\n            fArg =\n              target.functionEntry(fArg) ||\n              toss('Function pointer not found in WASM function table.');\n          }\n          const fIsFunc = fArg instanceof Function;\n          const xf = fIsFunc ? fArg : target.xGet(fArg);\n          if (fIsFunc) fArg = xf.name || 'unnamed function';\n          if (argTypes.length !== xf.length) __argcMismatch(fArg, xf.length);\n          if (null === resultType && 0 === xf.length) {\n            return xf;\n          }\n          if (undefined !== resultType && null !== resultType)\n            __xResultAdapterCheck(resultType);\n          for (const t of argTypes) {\n            if (t instanceof AbstractArgAdapter)\n              xArg.set(t, (...args) => t.convertArg(...args));\n            else __xArgAdapterCheck(t);\n          }\n          const cxw = cache.xWrap;\n          if (0 === xf.length) {\n            return (...args) =>\n              args.length\n                ? __argcMismatch(fArg, xf.length)\n                : cxw.convertResult(resultType, xf.call(null));\n          }\n          return function (...args) {\n            if (args.length !== xf.length) __argcMismatch(fArg, xf.length);\n            const scope = target.scopedAllocPush();\n            try {\n              let i = 0;\n              for (; i < args.length; ++i)\n                args[i] = cxw.convertArgNoCheck(argTypes[i], args[i], args, i);\n              return cxw.convertResultNoCheck(resultType, xf.apply(null, args));\n            } finally {\n              target.scopedAllocPop(scope);\n            }\n          };\n        };\n\n        const __xAdapter = function (\n          func,\n          argc,\n          typeName,\n          adapter,\n          modeName,\n          xcvPart,\n        ) {\n          if ('string' === typeof typeName) {\n            if (1 === argc) return xcvPart.get(typeName);\n            else if (2 === argc) {\n              if (!adapter) {\n                xcvPart.delete(typeName);\n                return func;\n              } else if (!(adapter instanceof Function)) {\n                toss(modeName, 'requires a function argument.');\n              }\n              xcvPart.set(typeName, adapter);\n              return func;\n            }\n          }\n          toss('Invalid arguments to', modeName);\n        };\n\n        target.xWrap.resultAdapter = function f(typeName, adapter) {\n          return __xAdapter(\n            f,\n            arguments.length,\n            typeName,\n            adapter,\n            'resultAdapter()',\n            xResult,\n          );\n        };\n\n        target.xWrap.argAdapter = function f(typeName, adapter) {\n          return __xAdapter(\n            f,\n            arguments.length,\n            typeName,\n            adapter,\n            'argAdapter()',\n            xArg,\n          );\n        };\n\n        target.xWrap.FuncPtrAdapter = xArg.FuncPtrAdapter;\n\n        target.xCallWrapped = function (fArg, resultType, argTypes, ...args) {\n          if (Array.isArray(arguments[3])) args = arguments[3];\n          return target\n            .xWrap(fArg, resultType, argTypes || [])\n            .apply(null, args || []);\n        };\n\n        target.xWrap.testConvertArg = cache.xWrap.convertArg;\n\n        target.xWrap.testConvertResult = cache.xWrap.convertResult;\n\n        return target;\n      };\n\n      globalThis.WhWasmUtilInstaller.yawl = function (config) {\n        const wfetch = () => fetch(config.uri, { credentials: 'same-origin' });\n        const wui = this;\n        const finalThen = function (arg) {\n          if (config.wasmUtilTarget) {\n            const toss = (...args) => {\n              throw new Error(args.join(' '));\n            };\n            const tgt = config.wasmUtilTarget;\n            tgt.module = arg.module;\n            tgt.instance = arg.instance;\n\n            if (!tgt.instance.exports.memory) {\n              tgt.memory =\n                (config.imports &&\n                  config.imports.env &&\n                  config.imports.env.memory) ||\n                toss(\"Missing 'memory' object!\");\n            }\n            if (!tgt.alloc && arg.instance.exports.malloc) {\n              const exports = arg.instance.exports;\n              tgt.alloc = function (n) {\n                return (\n                  exports.malloc(n) || toss('Allocation of', n, 'bytes failed.')\n                );\n              };\n              tgt.dealloc = function (m) {\n                exports.free(m);\n              };\n            }\n            wui(tgt);\n          }\n          if (config.onload) config.onload(arg, config);\n          return arg;\n        };\n        const loadWasm = WebAssembly.instantiateStreaming\n          ? function loadWasmStreaming() {\n              return WebAssembly.instantiateStreaming(\n                wfetch(),\n                config.imports || {},\n              ).then(finalThen);\n            }\n          : function loadWasmOldSchool() {\n              return wfetch()\n                .then((response) => response.arrayBuffer())\n                .then((bytes) =>\n                  WebAssembly.instantiate(bytes, config.imports || {}),\n                )\n                .then(finalThen);\n            };\n        return loadWasm;\n      }.bind(globalThis.WhWasmUtilInstaller);\n\n      ('use strict');\n      globalThis.Jaccwabyt = function StructBinderFactory(config) {\n        const toss = (...args) => {\n          throw new Error(args.join(' '));\n        };\n\n        if (\n          !(config.heap instanceof WebAssembly.Memory) &&\n          !(config.heap instanceof Function)\n        ) {\n          toss(\n            'config.heap must be WebAssembly.Memory instance or a function.',\n          );\n        }\n        ['alloc', 'dealloc'].forEach(function (k) {\n          config[k] instanceof Function ||\n            toss(\"Config option '\" + k + \"' must be a function.\");\n        });\n        const SBF = StructBinderFactory;\n        const heap =\n            config.heap instanceof Function\n              ? config.heap\n              : () => new Uint8Array(config.heap.buffer),\n          alloc = config.alloc,\n          dealloc = config.dealloc,\n          log = config.log || console.log.bind(console),\n          memberPrefix = config.memberPrefix || '',\n          memberSuffix = config.memberSuffix || '',\n          bigIntEnabled =\n            undefined === config.bigIntEnabled\n              ? !!globalThis['BigInt64Array']\n              : !!config.bigIntEnabled,\n          BigInt = globalThis['BigInt'],\n          BigInt64Array = globalThis['BigInt64Array'],\n          ptrSizeof = config.ptrSizeof || 4,\n          ptrIR = config.ptrIR || 'i32';\n        if (!SBF.debugFlags) {\n          SBF.__makeDebugFlags = function (deriveFrom = null) {\n            if (deriveFrom && deriveFrom.__flags)\n              deriveFrom = deriveFrom.__flags;\n            const f = function f(flags) {\n              if (0 === arguments.length) {\n                return f.__flags;\n              }\n              if (flags < 0) {\n                delete f.__flags.getter;\n                delete f.__flags.setter;\n                delete f.__flags.alloc;\n                delete f.__flags.dealloc;\n              } else {\n                f.__flags.getter = 0 !== (0x01 & flags);\n                f.__flags.setter = 0 !== (0x02 & flags);\n                f.__flags.alloc = 0 !== (0x04 & flags);\n                f.__flags.dealloc = 0 !== (0x08 & flags);\n              }\n              return f._flags;\n            };\n            Object.defineProperty(f, '__flags', {\n              iterable: false,\n              writable: false,\n              value: Object.create(deriveFrom),\n            });\n            if (!deriveFrom) f(0);\n            return f;\n          };\n          SBF.debugFlags = SBF.__makeDebugFlags();\n        }\n\n        const isLittleEndian = (function () {\n          const buffer = new ArrayBuffer(2);\n          new DataView(buffer).setInt16(0, 256, true);\n\n          return new Int16Array(buffer)[0] === 256;\n        })();\n\n        const isFuncSig = (s) => '(' === s[1];\n\n        const isPtrSig = (s) => 'p' === s || 'P' === s;\n        const isAutoPtrSig = (s) => 'P' === s;\n        const sigLetter = (s) => (isFuncSig(s) ? 'p' : s[0]);\n\n        const sigIR = function (s) {\n          switch (sigLetter(s)) {\n            case 'c':\n            case 'C':\n              return 'i8';\n            case 'i':\n              return 'i32';\n            case 'p':\n            case 'P':\n            case 's':\n              return ptrIR;\n            case 'j':\n              return 'i64';\n            case 'f':\n              return 'float';\n            case 'd':\n              return 'double';\n          }\n          toss('Unhandled signature IR:', s);\n        };\n\n        const affirmBigIntArray = BigInt64Array\n          ? () => true\n          : () => toss('BigInt64Array is not available.');\n\n        const sigDVGetter = function (s) {\n          switch (sigLetter(s)) {\n            case 'p':\n            case 'P':\n            case 's': {\n              switch (ptrSizeof) {\n                case 4:\n                  return 'getInt32';\n                case 8:\n                  return affirmBigIntArray() && 'getBigInt64';\n              }\n              break;\n            }\n            case 'i':\n              return 'getInt32';\n            case 'c':\n              return 'getInt8';\n            case 'C':\n              return 'getUint8';\n            case 'j':\n              return affirmBigIntArray() && 'getBigInt64';\n            case 'f':\n              return 'getFloat32';\n            case 'd':\n              return 'getFloat64';\n          }\n          toss('Unhandled DataView getter for signature:', s);\n        };\n\n        const sigDVSetter = function (s) {\n          switch (sigLetter(s)) {\n            case 'p':\n            case 'P':\n            case 's': {\n              switch (ptrSizeof) {\n                case 4:\n                  return 'setInt32';\n                case 8:\n                  return affirmBigIntArray() && 'setBigInt64';\n              }\n              break;\n            }\n            case 'i':\n              return 'setInt32';\n            case 'c':\n              return 'setInt8';\n            case 'C':\n              return 'setUint8';\n            case 'j':\n              return affirmBigIntArray() && 'setBigInt64';\n            case 'f':\n              return 'setFloat32';\n            case 'd':\n              return 'setFloat64';\n          }\n          toss('Unhandled DataView setter for signature:', s);\n        };\n\n        const sigDVSetWrapper = function (s) {\n          switch (sigLetter(s)) {\n            case 'i':\n            case 'f':\n            case 'c':\n            case 'C':\n            case 'd':\n              return Number;\n            case 'j':\n              return affirmBigIntArray() && BigInt;\n            case 'p':\n            case 'P':\n            case 's':\n              switch (ptrSizeof) {\n                case 4:\n                  return Number;\n                case 8:\n                  return affirmBigIntArray() && BigInt;\n              }\n              break;\n          }\n          toss('Unhandled DataView set wrapper for signature:', s);\n        };\n\n        const sPropName = (s, k) => s + '::' + k;\n\n        const __propThrowOnSet = function (structName, propName) {\n          return () => toss(sPropName(structName, propName), 'is read-only.');\n        };\n\n        const __instancePointerMap = new WeakMap();\n\n        const xPtrPropName = '(pointer-is-external)';\n\n        const __freeStruct = function (ctor, obj, m) {\n          if (!m) m = __instancePointerMap.get(obj);\n          if (m) {\n            __instancePointerMap.delete(obj);\n            if (Array.isArray(obj.ondispose)) {\n              let x;\n              while ((x = obj.ondispose.shift())) {\n                try {\n                  if (x instanceof Function) x.call(obj);\n                  else if (x instanceof StructType) x.dispose();\n                  else if ('number' === typeof x) dealloc(x);\n                } catch (e) {\n                  console.warn(\n                    'ondispose() for',\n                    ctor.structName,\n                    '@',\n                    m,\n                    'threw. NOT propagating it.',\n                    e,\n                  );\n                }\n              }\n            } else if (obj.ondispose instanceof Function) {\n              try {\n                obj.ondispose();\n              } catch (e) {\n                console.warn(\n                  'ondispose() for',\n                  ctor.structName,\n                  '@',\n                  m,\n                  'threw. NOT propagating it.',\n                  e,\n                );\n              }\n            }\n            delete obj.ondispose;\n            if (ctor.debugFlags.__flags.dealloc) {\n              log(\n                'debug.dealloc:',\n                obj[xPtrPropName] ? 'EXTERNAL' : '',\n                ctor.structName,\n                'instance:',\n                ctor.structInfo.sizeof,\n                'bytes @' + m,\n              );\n            }\n            if (!obj[xPtrPropName]) dealloc(m);\n          }\n        };\n\n        const rop = (v) => {\n          return {\n            configurable: false,\n            writable: false,\n            iterable: false,\n            value: v,\n          };\n        };\n\n        const __allocStruct = function (ctor, obj, m) {\n          let fill = !m;\n          if (m) Object.defineProperty(obj, xPtrPropName, rop(m));\n          else {\n            m = alloc(ctor.structInfo.sizeof);\n            if (!m) toss('Allocation of', ctor.structName, 'structure failed.');\n          }\n          try {\n            if (ctor.debugFlags.__flags.alloc) {\n              log(\n                'debug.alloc:',\n                fill ? '' : 'EXTERNAL',\n                ctor.structName,\n                'instance:',\n                ctor.structInfo.sizeof,\n                'bytes @' + m,\n              );\n            }\n            if (fill) heap().fill(0, m, m + ctor.structInfo.sizeof);\n            __instancePointerMap.set(obj, m);\n          } catch (e) {\n            __freeStruct(ctor, obj, m);\n            throw e;\n          }\n        };\n\n        const __memoryDump = function () {\n          const p = this.pointer;\n          return p\n            ? new Uint8Array(heap().slice(p, p + this.structInfo.sizeof))\n            : null;\n        };\n\n        const __memberKey = (k) => memberPrefix + k + memberSuffix;\n        const __memberKeyProp = rop(__memberKey);\n\n        const __lookupMember = function (\n          structInfo,\n          memberName,\n          tossIfNotFound = true,\n        ) {\n          let m = structInfo.members[memberName];\n          if (!m && (memberPrefix || memberSuffix)) {\n            for (const v of Object.values(structInfo.members)) {\n              if (v.key === memberName) {\n                m = v;\n                break;\n              }\n            }\n            if (!m && tossIfNotFound) {\n              toss(\n                sPropName(structInfo.name, memberName),\n                'is not a mapped struct member.',\n              );\n            }\n          }\n          return m;\n        };\n\n        const __memberSignature = function f(\n          obj,\n          memberName,\n          emscriptenFormat = false,\n        ) {\n          if (!f._)\n            f._ = (x) =>\n              x.replace(/[^vipPsjrdcC]/g, '').replace(/[pPscC]/g, 'i');\n          const m = __lookupMember(obj.structInfo, memberName, true);\n          return emscriptenFormat ? f._(m.signature) : m.signature;\n        };\n\n        const __ptrPropDescriptor = {\n          configurable: false,\n          enumerable: false,\n          get: function () {\n            return __instancePointerMap.get(this);\n          },\n          set: () => toss(\"Cannot assign the 'pointer' property of a struct.\"),\n        };\n\n        const __structMemberKeys = rop(function () {\n          const a = [];\n          for (const k of Object.keys(this.structInfo.members)) {\n            a.push(this.memberKey(k));\n          }\n          return a;\n        });\n\n        const __utf8Decoder = new TextDecoder('utf-8');\n        const __utf8Encoder = new TextEncoder();\n\n        const __SAB =\n          'undefined' === typeof SharedArrayBuffer\n            ? function () {}\n            : SharedArrayBuffer;\n        const __utf8Decode = function (arrayBuffer, begin, end) {\n          return __utf8Decoder.decode(\n            arrayBuffer.buffer instanceof __SAB\n              ? arrayBuffer.slice(begin, end)\n              : arrayBuffer.subarray(begin, end),\n          );\n        };\n\n        const __memberIsString = function (\n          obj,\n          memberName,\n          tossIfNotFound = false,\n        ) {\n          const m = __lookupMember(obj.structInfo, memberName, tossIfNotFound);\n          return m && 1 === m.signature.length && 's' === m.signature[0]\n            ? m\n            : false;\n        };\n\n        const __affirmCStringSignature = function (member) {\n          if ('s' === member.signature) return;\n          toss(\n            'Invalid member type signature for C-string value:',\n            JSON.stringify(member),\n          );\n        };\n\n        const __memberToJsString = function f(obj, memberName) {\n          const m = __lookupMember(obj.structInfo, memberName, true);\n          __affirmCStringSignature(m);\n          const addr = obj[m.key];\n\n          if (!addr) return null;\n          let pos = addr;\n          const mem = heap();\n          for (; mem[pos] !== 0; ++pos) {}\n\n          return addr === pos ? '' : __utf8Decode(mem, addr, pos);\n        };\n\n        const __addOnDispose = function (obj, ...v) {\n          if (obj.ondispose) {\n            if (!Array.isArray(obj.ondispose)) {\n              obj.ondispose = [obj.ondispose];\n            }\n          } else {\n            obj.ondispose = [];\n          }\n          obj.ondispose.push(...v);\n        };\n\n        const __allocCString = function (str) {\n          const u = __utf8Encoder.encode(str);\n          const mem = alloc(u.length + 1);\n          if (!mem) toss('Allocation error while duplicating string:', str);\n          const h = heap();\n\n          h.set(u, mem);\n          h[mem + u.length] = 0;\n\n          return mem;\n        };\n\n        const __setMemberCString = function (obj, memberName, str) {\n          const m = __lookupMember(obj.structInfo, memberName, true);\n          __affirmCStringSignature(m);\n\n          const mem = __allocCString(str);\n          obj[m.key] = mem;\n          __addOnDispose(obj, mem);\n          return obj;\n        };\n\n        const StructType = function ctor(structName, structInfo) {\n          if (arguments[2] !== rop) {\n            toss(\n              'Do not call the StructType constructor',\n              'from client-level code.',\n            );\n          }\n          Object.defineProperties(this, {\n            structName: rop(structName),\n            structInfo: rop(structInfo),\n          });\n        };\n\n        StructType.prototype = Object.create(null, {\n          dispose: rop(function () {\n            __freeStruct(this.constructor, this);\n          }),\n          lookupMember: rop(function (memberName, tossIfNotFound = true) {\n            return __lookupMember(this.structInfo, memberName, tossIfNotFound);\n          }),\n          memberToJsString: rop(function (memberName) {\n            return __memberToJsString(this, memberName);\n          }),\n          memberIsString: rop(function (memberName, tossIfNotFound = true) {\n            return __memberIsString(this, memberName, tossIfNotFound);\n          }),\n          memberKey: __memberKeyProp,\n          memberKeys: __structMemberKeys,\n          memberSignature: rop(function (memberName, emscriptenFormat = false) {\n            return __memberSignature(this, memberName, emscriptenFormat);\n          }),\n          memoryDump: rop(__memoryDump),\n          pointer: __ptrPropDescriptor,\n          setMemberCString: rop(function (memberName, str) {\n            return __setMemberCString(this, memberName, str);\n          }),\n        });\n\n        Object.assign(StructType.prototype, {\n          addOnDispose: function (...v) {\n            __addOnDispose(this, ...v);\n            return this;\n          },\n        });\n\n        Object.defineProperties(StructType, {\n          allocCString: rop(__allocCString),\n          isA: rop((v) => v instanceof StructType),\n          hasExternalPointer: rop(\n            (v) => v instanceof StructType && !!v[xPtrPropName],\n          ),\n          memberKey: __memberKeyProp,\n        });\n\n        const isNumericValue = (v) =>\n          Number.isFinite(v) || v instanceof (BigInt || Number);\n\n        const makeMemberWrapper = function f(ctor, name, descr) {\n          if (!f._) {\n            f._ = { getters: {}, setters: {}, sw: {} };\n            const a = ['i', 'c', 'C', 'p', 'P', 's', 'f', 'd', 'v()'];\n            if (bigIntEnabled) a.push('j');\n            a.forEach(function (v) {\n              f._.getters[v] = sigDVGetter(v);\n              f._.setters[v] = sigDVSetter(v);\n              f._.sw[v] = sigDVSetWrapper(v);\n            });\n            const rxSig1 = /^[ipPsjfdcC]$/,\n              rxSig2 = /^[vipPsjfdcC]\\([ipPsjfdcC]*\\)$/;\n            f.sigCheck = function (obj, name, key, sig) {\n              if (Object.prototype.hasOwnProperty.call(obj, key)) {\n                toss(obj.structName, 'already has a property named', key + '.');\n              }\n              rxSig1.test(sig) ||\n                rxSig2.test(sig) ||\n                toss(\n                  'Malformed signature for',\n                  sPropName(obj.structName, name) + ':',\n                  sig,\n                );\n            };\n          }\n          const key = ctor.memberKey(name);\n          f.sigCheck(ctor.prototype, name, key, descr.signature);\n          descr.key = key;\n          descr.name = name;\n          const sigGlyph = sigLetter(descr.signature);\n          const xPropName = sPropName(ctor.prototype.structName, key);\n          const dbg = ctor.prototype.debugFlags.__flags;\n\n          const prop = Object.create(null);\n          prop.configurable = false;\n          prop.enumerable = false;\n          prop.get = function () {\n            if (dbg.getter) {\n              log(\n                'debug.getter:',\n                f._.getters[sigGlyph],\n                'for',\n                sigIR(sigGlyph),\n                xPropName,\n                '@',\n                this.pointer,\n                '+',\n                descr.offset,\n                'sz',\n                descr.sizeof,\n              );\n            }\n            let rc = new DataView(\n              heap().buffer,\n              this.pointer + descr.offset,\n              descr.sizeof,\n            )[f._.getters[sigGlyph]](0, isLittleEndian);\n            if (dbg.getter) log('debug.getter:', xPropName, 'result =', rc);\n            return rc;\n          };\n          if (descr.readOnly) {\n            prop.set = __propThrowOnSet(ctor.prototype.structName, key);\n          } else {\n            prop.set = function (v) {\n              if (dbg.setter) {\n                log(\n                  'debug.setter:',\n                  f._.setters[sigGlyph],\n                  'for',\n                  sigIR(sigGlyph),\n                  xPropName,\n                  '@',\n                  this.pointer,\n                  '+',\n                  descr.offset,\n                  'sz',\n                  descr.sizeof,\n                  v,\n                );\n              }\n              if (!this.pointer) {\n                toss('Cannot set struct property on disposed instance.');\n              }\n              if (null === v) v = 0;\n              else\n                while (!isNumericValue(v)) {\n                  if (\n                    isAutoPtrSig(descr.signature) &&\n                    v instanceof StructType\n                  ) {\n                    v = v.pointer || 0;\n                    if (dbg.setter)\n                      log('debug.setter:', xPropName, 'resolved to', v);\n                    break;\n                  }\n                  toss('Invalid value for pointer-type', xPropName + '.');\n                }\n              new DataView(\n                heap().buffer,\n                this.pointer + descr.offset,\n                descr.sizeof,\n              )[f._.setters[sigGlyph]](0, f._.sw[sigGlyph](v), isLittleEndian);\n            };\n          }\n          Object.defineProperty(ctor.prototype, key, prop);\n        };\n\n        const StructBinder = function StructBinder(structName, structInfo) {\n          if (1 === arguments.length) {\n            structInfo = structName;\n            structName = structInfo.name;\n          } else if (!structInfo.name) {\n            structInfo.name = structName;\n          }\n          if (!structName) toss('Struct name is required.');\n          let lastMember = false;\n          Object.keys(structInfo.members).forEach((k) => {\n            const m = structInfo.members[k];\n            if (!m.sizeof) toss(structName, 'member', k, 'is missing sizeof.');\n            else if (m.sizeof === 1) {\n              m.signature === 'c' ||\n                m.signature === 'C' ||\n                toss(\n                  'Unexpected sizeof==1 member',\n                  sPropName(structInfo.name, k),\n                  'with signature',\n                  m.signature,\n                );\n            } else {\n              if (0 !== m.sizeof % 4) {\n                console.warn(\n                  'Invalid struct member description =',\n                  m,\n                  'from',\n                  structInfo,\n                );\n                toss(\n                  structName,\n                  'member',\n                  k,\n                  'sizeof is not aligned. sizeof=' + m.sizeof,\n                );\n              }\n              if (0 !== m.offset % 4) {\n                console.warn(\n                  'Invalid struct member description =',\n                  m,\n                  'from',\n                  structInfo,\n                );\n                toss(\n                  structName,\n                  'member',\n                  k,\n                  'offset is not aligned. offset=' + m.offset,\n                );\n              }\n            }\n            if (!lastMember || lastMember.offset < m.offset) lastMember = m;\n          });\n          if (!lastMember) toss('No member property descriptions found.');\n          else if (structInfo.sizeof < lastMember.offset + lastMember.sizeof) {\n            toss(\n              'Invalid struct config:',\n              structName,\n              'max member offset (' + lastMember.offset + ') ',\n              'extends past end of struct (sizeof=' + structInfo.sizeof + ').',\n            );\n          }\n          const debugFlags = rop(SBF.__makeDebugFlags(StructBinder.debugFlags));\n\n          const StructCtor = function StructCtor(externalMemory) {\n            if (!(this instanceof StructCtor)) {\n              toss(\n                'The',\n                structName,\n                \"constructor may only be called via 'new'.\",\n              );\n            } else if (arguments.length) {\n              if (\n                externalMemory !== (externalMemory | 0) ||\n                externalMemory <= 0\n              ) {\n                toss('Invalid pointer value for', structName, 'constructor.');\n              }\n              __allocStruct(StructCtor, this, externalMemory);\n            } else {\n              __allocStruct(StructCtor, this);\n            }\n          };\n          Object.defineProperties(StructCtor, {\n            debugFlags: debugFlags,\n            isA: rop((v) => v instanceof StructCtor),\n            memberKey: __memberKeyProp,\n            memberKeys: __structMemberKeys,\n            methodInfoForKey: rop(function (mKey) {}),\n            structInfo: rop(structInfo),\n            structName: rop(structName),\n          });\n          StructCtor.prototype = new StructType(structName, structInfo, rop);\n          Object.defineProperties(StructCtor.prototype, {\n            debugFlags: debugFlags,\n            constructor: rop(StructCtor),\n          });\n          Object.keys(structInfo.members).forEach((name) =>\n            makeMemberWrapper(StructCtor, name, structInfo.members[name]),\n          );\n          return StructCtor;\n        };\n        StructBinder.StructType = StructType;\n        StructBinder.config = config;\n        StructBinder.allocCString = __allocCString;\n        if (!StructBinder.debugFlags) {\n          StructBinder.debugFlags = SBF.__makeDebugFlags(SBF.debugFlags);\n        }\n        return StructBinder;\n      };\n\n      globalThis.sqlite3ApiBootstrap.initializers.push(function (sqlite3) {\n        'use strict';\n        const toss = (...args) => {\n          throw new Error(args.join(' '));\n        };\n        const toss3 = sqlite3.SQLite3Error.toss;\n        const capi = sqlite3.capi,\n          wasm = sqlite3.wasm,\n          util = sqlite3.util;\n        globalThis.WhWasmUtilInstaller(wasm);\n        delete globalThis.WhWasmUtilInstaller;\n\n        if (0) {\n          const dealloc = wasm.exports[sqlite3.config.deallocExportName];\n          const nFunc = wasm.functionTable().length;\n          let i;\n          for (i = 0; i < nFunc; ++i) {\n            const e = wasm.functionEntry(i);\n            if (dealloc === e) {\n              capi.SQLITE_WASM_DEALLOC = i;\n              break;\n            }\n          }\n          if (dealloc !== wasm.functionEntry(capi.SQLITE_WASM_DEALLOC)) {\n            toss(\n              'Internal error: cannot find function pointer for SQLITE_WASM_DEALLOC.',\n            );\n          }\n        }\n\n        wasm.bindingSignatures = [\n          ['sqlite3_aggregate_context', 'void*', 'sqlite3_context*', 'int'],\n\n          ['sqlite3_bind_double', 'int', 'sqlite3_stmt*', 'int', 'f64'],\n          ['sqlite3_bind_int', 'int', 'sqlite3_stmt*', 'int', 'int'],\n          ['sqlite3_bind_null', undefined, 'sqlite3_stmt*', 'int'],\n          ['sqlite3_bind_parameter_count', 'int', 'sqlite3_stmt*'],\n          ['sqlite3_bind_parameter_index', 'int', 'sqlite3_stmt*', 'string'],\n          ['sqlite3_bind_parameter_name', 'string', 'sqlite3_stmt*', 'int'],\n          [\n            'sqlite3_bind_pointer',\n            'int',\n            'sqlite3_stmt*',\n            'int',\n            '*',\n            'string:static',\n            '*',\n          ],\n          [\n            'sqlite3_busy_handler',\n            'int',\n            [\n              'sqlite3*',\n              new wasm.xWrap.FuncPtrAdapter({\n                signature: 'i(pi)',\n                contextKey: (argv, argIndex) => argv[0],\n              }),\n              '*',\n            ],\n          ],\n          ['sqlite3_busy_timeout', 'int', 'sqlite3*', 'int'],\n\n          ['sqlite3_changes', 'int', 'sqlite3*'],\n          ['sqlite3_clear_bindings', 'int', 'sqlite3_stmt*'],\n          ['sqlite3_collation_needed', 'int', 'sqlite3*', '*', '*'],\n          ['sqlite3_column_blob', '*', 'sqlite3_stmt*', 'int'],\n          ['sqlite3_column_bytes', 'int', 'sqlite3_stmt*', 'int'],\n          ['sqlite3_column_count', 'int', 'sqlite3_stmt*'],\n          ['sqlite3_column_decltype', 'string', 'sqlite3_stmt*', 'int'],\n          ['sqlite3_column_double', 'f64', 'sqlite3_stmt*', 'int'],\n          ['sqlite3_column_int', 'int', 'sqlite3_stmt*', 'int'],\n          ['sqlite3_column_name', 'string', 'sqlite3_stmt*', 'int'],\n          ['sqlite3_column_text', 'string', 'sqlite3_stmt*', 'int'],\n          ['sqlite3_column_type', 'int', 'sqlite3_stmt*', 'int'],\n          ['sqlite3_column_value', 'sqlite3_value*', 'sqlite3_stmt*', 'int'],\n          [\n            'sqlite3_commit_hook',\n            'void*',\n            [\n              'sqlite3*',\n              new wasm.xWrap.FuncPtrAdapter({\n                name: 'sqlite3_commit_hook',\n                signature: 'i(p)',\n                contextKey: (argv) => argv[0],\n              }),\n              '*',\n            ],\n          ],\n          ['sqlite3_compileoption_get', 'string', 'int'],\n          ['sqlite3_compileoption_used', 'int', 'string'],\n          ['sqlite3_complete', 'int', 'string:flexible'],\n          ['sqlite3_context_db_handle', 'sqlite3*', 'sqlite3_context*'],\n\n          ['sqlite3_data_count', 'int', 'sqlite3_stmt*'],\n          ['sqlite3_db_filename', 'string', 'sqlite3*', 'string'],\n          ['sqlite3_db_handle', 'sqlite3*', 'sqlite3_stmt*'],\n          ['sqlite3_db_name', 'string', 'sqlite3*', 'int'],\n          ['sqlite3_db_readonly', 'int', 'sqlite3*', 'string'],\n          ['sqlite3_db_status', 'int', 'sqlite3*', 'int', '*', '*', 'int'],\n          ['sqlite3_errcode', 'int', 'sqlite3*'],\n          ['sqlite3_errmsg', 'string', 'sqlite3*'],\n          ['sqlite3_error_offset', 'int', 'sqlite3*'],\n          ['sqlite3_errstr', 'string', 'int'],\n          [\n            'sqlite3_exec',\n            'int',\n            [\n              'sqlite3*',\n              'string:flexible',\n              new wasm.xWrap.FuncPtrAdapter({\n                signature: 'i(pipp)',\n                bindScope: 'transient',\n                callProxy: (callback) => {\n                  let aNames;\n                  return (pVoid, nCols, pColVals, pColNames) => {\n                    try {\n                      const aVals = wasm.cArgvToJs(nCols, pColVals);\n                      if (!aNames) aNames = wasm.cArgvToJs(nCols, pColNames);\n                      return callback(aVals, aNames) | 0;\n                    } catch (e) {\n                      return e.resultCode || capi.SQLITE_ERROR;\n                    }\n                  };\n                },\n              }),\n              '*',\n              '**',\n            ],\n          ],\n          ['sqlite3_expanded_sql', 'string', 'sqlite3_stmt*'],\n          ['sqlite3_extended_errcode', 'int', 'sqlite3*'],\n          ['sqlite3_extended_result_codes', 'int', 'sqlite3*', 'int'],\n          ['sqlite3_file_control', 'int', 'sqlite3*', 'string', 'int', '*'],\n          ['sqlite3_finalize', 'int', 'sqlite3_stmt*'],\n          ['sqlite3_free', undefined, '*'],\n          ['sqlite3_get_autocommit', 'int', 'sqlite3*'],\n          ['sqlite3_get_auxdata', '*', 'sqlite3_context*', 'int'],\n          ['sqlite3_initialize', undefined],\n          ['sqlite3_interrupt', undefined, 'sqlite3*'],\n          ['sqlite3_is_interrupted', 'int', 'sqlite3*'],\n          ['sqlite3_keyword_count', 'int'],\n          ['sqlite3_keyword_name', 'int', ['int', '**', '*']],\n          ['sqlite3_keyword_check', 'int', ['string', 'int']],\n          ['sqlite3_libversion', 'string'],\n          ['sqlite3_libversion_number', 'int'],\n          ['sqlite3_limit', 'int', ['sqlite3*', 'int', 'int']],\n          ['sqlite3_malloc', '*', 'int'],\n          ['sqlite3_open', 'int', 'string', '*'],\n          ['sqlite3_open_v2', 'int', 'string', '*', 'int', 'string'],\n\n          ['sqlite3_realloc', '*', '*', 'int'],\n          ['sqlite3_reset', 'int', 'sqlite3_stmt*'],\n\n          [\n            'sqlite3_result_blob',\n            undefined,\n            'sqlite3_context*',\n            '*',\n            'int',\n            '*',\n          ],\n          ['sqlite3_result_double', undefined, 'sqlite3_context*', 'f64'],\n          [\n            'sqlite3_result_error',\n            undefined,\n            'sqlite3_context*',\n            'string',\n            'int',\n          ],\n          ['sqlite3_result_error_code', undefined, 'sqlite3_context*', 'int'],\n          ['sqlite3_result_error_nomem', undefined, 'sqlite3_context*'],\n          ['sqlite3_result_error_toobig', undefined, 'sqlite3_context*'],\n          ['sqlite3_result_int', undefined, 'sqlite3_context*', 'int'],\n          ['sqlite3_result_null', undefined, 'sqlite3_context*'],\n          [\n            'sqlite3_result_pointer',\n            undefined,\n            'sqlite3_context*',\n            '*',\n            'string:static',\n            '*',\n          ],\n          ['sqlite3_result_subtype', undefined, 'sqlite3_value*', 'int'],\n          [\n            'sqlite3_result_text',\n            undefined,\n            'sqlite3_context*',\n            'string',\n            'int',\n            '*',\n          ],\n          ['sqlite3_result_zeroblob', undefined, 'sqlite3_context*', 'int'],\n          [\n            'sqlite3_rollback_hook',\n            'void*',\n            [\n              'sqlite3*',\n              new wasm.xWrap.FuncPtrAdapter({\n                name: 'sqlite3_rollback_hook',\n                signature: 'v(p)',\n                contextKey: (argv) => argv[0],\n              }),\n              '*',\n            ],\n          ],\n\n          [\n            'sqlite3_set_auxdata',\n            undefined,\n            [\n              'sqlite3_context*',\n              'int',\n              '*',\n              true\n                ? '*'\n                : new wasm.xWrap.FuncPtrAdapter({\n                    name: 'xDestroyAuxData',\n                    signature: 'v(p)',\n                    contextKey: (argv, argIndex) => argv[0],\n                  }),\n            ],\n          ],\n          ['sqlite3_shutdown', undefined],\n          ['sqlite3_sourceid', 'string'],\n          ['sqlite3_sql', 'string', 'sqlite3_stmt*'],\n          ['sqlite3_status', 'int', 'int', '*', '*', 'int'],\n          ['sqlite3_step', 'int', 'sqlite3_stmt*'],\n          ['sqlite3_stmt_busy', 'int', 'sqlite3_stmt*'],\n          ['sqlite3_stmt_readonly', 'int', 'sqlite3_stmt*'],\n          ['sqlite3_stmt_status', 'int', 'sqlite3_stmt*', 'int', 'int'],\n          ['sqlite3_strglob', 'int', 'string', 'string'],\n          ['sqlite3_stricmp', 'int', 'string', 'string'],\n          ['sqlite3_strlike', 'int', 'string', 'string', 'int'],\n          ['sqlite3_strnicmp', 'int', 'string', 'string', 'int'],\n          [\n            'sqlite3_table_column_metadata',\n            'int',\n            'sqlite3*',\n            'string',\n            'string',\n            'string',\n            '**',\n            '**',\n            '*',\n            '*',\n            '*',\n          ],\n          ['sqlite3_total_changes', 'int', 'sqlite3*'],\n          [\n            'sqlite3_trace_v2',\n            'int',\n            [\n              'sqlite3*',\n              'int',\n              new wasm.xWrap.FuncPtrAdapter({\n                name: 'sqlite3_trace_v2::callback',\n                signature: 'i(ippp)',\n                contextKey: (argv, argIndex) => argv[0],\n              }),\n              '*',\n            ],\n          ],\n          ['sqlite3_txn_state', 'int', ['sqlite3*', 'string']],\n\n          ['sqlite3_uri_boolean', 'int', 'sqlite3_filename', 'string', 'int'],\n          ['sqlite3_uri_key', 'string', 'sqlite3_filename', 'int'],\n          ['sqlite3_uri_parameter', 'string', 'sqlite3_filename', 'string'],\n          ['sqlite3_user_data', 'void*', 'sqlite3_context*'],\n          ['sqlite3_value_blob', '*', 'sqlite3_value*'],\n          ['sqlite3_value_bytes', 'int', 'sqlite3_value*'],\n          ['sqlite3_value_double', 'f64', 'sqlite3_value*'],\n          ['sqlite3_value_dup', 'sqlite3_value*', 'sqlite3_value*'],\n          ['sqlite3_value_free', undefined, 'sqlite3_value*'],\n          ['sqlite3_value_frombind', 'int', 'sqlite3_value*'],\n          ['sqlite3_value_int', 'int', 'sqlite3_value*'],\n          ['sqlite3_value_nochange', 'int', 'sqlite3_value*'],\n          ['sqlite3_value_numeric_type', 'int', 'sqlite3_value*'],\n          ['sqlite3_value_pointer', '*', 'sqlite3_value*', 'string:static'],\n          ['sqlite3_value_subtype', 'int', 'sqlite3_value*'],\n          ['sqlite3_value_text', 'string', 'sqlite3_value*'],\n          ['sqlite3_value_type', 'int', 'sqlite3_value*'],\n          ['sqlite3_vfs_find', '*', 'string'],\n          ['sqlite3_vfs_register', 'int', 'sqlite3_vfs*', 'int'],\n          ['sqlite3_vfs_unregister', 'int', 'sqlite3_vfs*'],\n        ];\n\n        if (!!wasm.exports.sqlite3_progress_handler) {\n          wasm.bindingSignatures.push([\n            'sqlite3_progress_handler',\n            undefined,\n            [\n              'sqlite3*',\n              'int',\n              new wasm.xWrap.FuncPtrAdapter({\n                name: 'xProgressHandler',\n                signature: 'i(p)',\n                bindScope: 'context',\n                contextKey: (argv, argIndex) => argv[0],\n              }),\n              '*',\n            ],\n          ]);\n        }\n\n        if (!!wasm.exports.sqlite3_stmt_explain) {\n          wasm.bindingSignatures.push(\n            ['sqlite3_stmt_explain', 'int', 'sqlite3_stmt*', 'int'],\n            ['sqlite3_stmt_isexplain', 'int', 'sqlite3_stmt*'],\n          );\n        }\n\n        if (!!wasm.exports.sqlite3_set_authorizer) {\n          wasm.bindingSignatures.push([\n            'sqlite3_set_authorizer',\n            'int',\n            [\n              'sqlite3*',\n              new wasm.xWrap.FuncPtrAdapter({\n                name: 'sqlite3_set_authorizer::xAuth',\n                signature: 'i(pi' + 'ssss)',\n                contextKey: (argv, argIndex) => argv[0],\n                callProxy: (callback) => {\n                  return (pV, iCode, s0, s1, s2, s3) => {\n                    try {\n                      s0 = s0 && wasm.cstrToJs(s0);\n                      s1 = s1 && wasm.cstrToJs(s1);\n                      s2 = s2 && wasm.cstrToJs(s2);\n                      s3 = s3 && wasm.cstrToJs(s3);\n                      return callback(pV, iCode, s0, s1, s2, s3) || 0;\n                    } catch (e) {\n                      return e.resultCode || capi.SQLITE_ERROR;\n                    }\n                  };\n                },\n              }),\n              '*',\n            ],\n          ]);\n        }\n\n        if (false && wasm.compileOptionUsed('SQLITE_ENABLE_NORMALIZE')) {\n          wasm.bindingSignatures.push([\n            'sqlite3_normalized_sql',\n            'string',\n            'sqlite3_stmt*',\n          ]);\n        }\n\n        wasm.bindingSignatures.int64 = [\n          ['sqlite3_bind_int64', 'int', ['sqlite3_stmt*', 'int', 'i64']],\n          ['sqlite3_changes64', 'i64', ['sqlite3*']],\n          ['sqlite3_column_int64', 'i64', ['sqlite3_stmt*', 'int']],\n          [\n            'sqlite3_deserialize',\n            'int',\n            'sqlite3*',\n            'string',\n            '*',\n            'i64',\n            'i64',\n            'int',\n          ],\n          ['sqlite3_last_insert_rowid', 'i64', ['sqlite3*']],\n          ['sqlite3_malloc64', '*', 'i64'],\n          ['sqlite3_msize', 'i64', '*'],\n          ['sqlite3_overload_function', 'int', ['sqlite3*', 'string', 'int']],\n          ['sqlite3_realloc64', '*', '*', 'i64'],\n          ['sqlite3_result_int64', undefined, '*', 'i64'],\n          ['sqlite3_result_zeroblob64', 'int', '*', 'i64'],\n          ['sqlite3_serialize', '*', 'sqlite3*', 'string', '*', 'int'],\n          ['sqlite3_set_last_insert_rowid', undefined, ['sqlite3*', 'i64']],\n          ['sqlite3_status64', 'int', 'int', '*', '*', 'int'],\n          ['sqlite3_total_changes64', 'i64', ['sqlite3*']],\n          [\n            'sqlite3_update_hook',\n            '*',\n            [\n              'sqlite3*',\n              new wasm.xWrap.FuncPtrAdapter({\n                name: 'sqlite3_update_hook',\n                signature: 'v(iippj)',\n                contextKey: (argv) => argv[0],\n                callProxy: (callback) => {\n                  return (p, op, z0, z1, rowid) => {\n                    callback(\n                      p,\n                      op,\n                      wasm.cstrToJs(z0),\n                      wasm.cstrToJs(z1),\n                      rowid,\n                    );\n                  };\n                },\n              }),\n              '*',\n            ],\n          ],\n          ['sqlite3_uri_int64', 'i64', ['sqlite3_filename', 'string', 'i64']],\n          ['sqlite3_value_int64', 'i64', 'sqlite3_value*'],\n        ];\n\n        if (wasm.bigIntEnabled && !!wasm.exports.sqlite3_declare_vtab) {\n          wasm.bindingSignatures.int64.push(\n            [\n              'sqlite3_create_module',\n              'int',\n              ['sqlite3*', 'string', 'sqlite3_module*', '*'],\n            ],\n            [\n              'sqlite3_create_module_v2',\n              'int',\n              ['sqlite3*', 'string', 'sqlite3_module*', '*', '*'],\n            ],\n            ['sqlite3_declare_vtab', 'int', ['sqlite3*', 'string:flexible']],\n            ['sqlite3_drop_modules', 'int', ['sqlite3*', '**']],\n            ['sqlite3_vtab_collation', 'string', 'sqlite3_index_info*', 'int'],\n            ['sqlite3_vtab_distinct', 'int', 'sqlite3_index_info*'],\n            ['sqlite3_vtab_in', 'int', 'sqlite3_index_info*', 'int', 'int'],\n            ['sqlite3_vtab_in_first', 'int', 'sqlite3_value*', '**'],\n            ['sqlite3_vtab_in_next', 'int', 'sqlite3_value*', '**'],\n\n            ['sqlite3_vtab_nochange', 'int', 'sqlite3_context*'],\n            ['sqlite3_vtab_on_conflict', 'int', 'sqlite3*'],\n            [\n              'sqlite3_vtab_rhs_value',\n              'int',\n              'sqlite3_index_info*',\n              'int',\n              '**',\n            ],\n          );\n        }\n\n        if (wasm.bigIntEnabled && !!wasm.exports.sqlite3_preupdate_hook) {\n          wasm.bindingSignatures.int64.push(\n            ['sqlite3_preupdate_blobwrite', 'int', 'sqlite3*'],\n            ['sqlite3_preupdate_count', 'int', 'sqlite3*'],\n            ['sqlite3_preupdate_depth', 'int', 'sqlite3*'],\n            [\n              'sqlite3_preupdate_hook',\n              '*',\n              [\n                'sqlite3*',\n                new wasm.xWrap.FuncPtrAdapter({\n                  name: 'sqlite3_preupdate_hook',\n                  signature: 'v(ppippjj)',\n                  contextKey: (argv) => argv[0],\n                  callProxy: (callback) => {\n                    return (p, db, op, zDb, zTbl, iKey1, iKey2) => {\n                      callback(\n                        p,\n                        db,\n                        op,\n                        wasm.cstrToJs(zDb),\n                        wasm.cstrToJs(zTbl),\n                        iKey1,\n                        iKey2,\n                      );\n                    };\n                  },\n                }),\n                '*',\n              ],\n            ],\n            ['sqlite3_preupdate_new', 'int', ['sqlite3*', 'int', '**']],\n            ['sqlite3_preupdate_old', 'int', ['sqlite3*', 'int', '**']],\n          );\n        }\n\n        if (\n          wasm.bigIntEnabled &&\n          !!wasm.exports.sqlite3changegroup_add &&\n          !!wasm.exports.sqlite3session_create &&\n          !!wasm.exports.sqlite3_preupdate_hook\n        ) {\n          const __ipsProxy = {\n            signature: 'i(ps)',\n            callProxy: (callback) => {\n              return (p, s) => {\n                try {\n                  return callback(p, wasm.cstrToJs(s)) | 0;\n                } catch (e) {\n                  return e.resultCode || capi.SQLITE_ERROR;\n                }\n              };\n            },\n          };\n\n          wasm.bindingSignatures.int64.push(\n            ...[\n              [\n                'sqlite3changegroup_add',\n                'int',\n                ['sqlite3_changegroup*', 'int', 'void*'],\n              ],\n              [\n                'sqlite3changegroup_add_strm',\n                'int',\n                [\n                  'sqlite3_changegroup*',\n                  new wasm.xWrap.FuncPtrAdapter({\n                    name: 'xInput',\n                    signature: 'i(ppp)',\n                    bindScope: 'transient',\n                  }),\n                  'void*',\n                ],\n              ],\n              [\n                'sqlite3changegroup_delete',\n                undefined,\n                ['sqlite3_changegroup*'],\n              ],\n              ['sqlite3changegroup_new', 'int', ['**']],\n              [\n                'sqlite3changegroup_output',\n                'int',\n                ['sqlite3_changegroup*', 'int*', '**'],\n              ],\n              [\n                'sqlite3changegroup_output_strm',\n                'int',\n                [\n                  'sqlite3_changegroup*',\n                  new wasm.xWrap.FuncPtrAdapter({\n                    name: 'xOutput',\n                    signature: 'i(ppi)',\n                    bindScope: 'transient',\n                  }),\n                  'void*',\n                ],\n              ],\n              [\n                'sqlite3changeset_apply',\n                'int',\n                [\n                  'sqlite3*',\n                  'int',\n                  'void*',\n                  new wasm.xWrap.FuncPtrAdapter({\n                    name: 'xFilter',\n                    bindScope: 'transient',\n                    ...__ipsProxy,\n                  }),\n                  new wasm.xWrap.FuncPtrAdapter({\n                    name: 'xConflict',\n                    signature: 'i(pip)',\n                    bindScope: 'transient',\n                  }),\n                  'void*',\n                ],\n              ],\n              [\n                'sqlite3changeset_apply_strm',\n                'int',\n                [\n                  'sqlite3*',\n                  new wasm.xWrap.FuncPtrAdapter({\n                    name: 'xInput',\n                    signature: 'i(ppp)',\n                    bindScope: 'transient',\n                  }),\n                  'void*',\n                  new wasm.xWrap.FuncPtrAdapter({\n                    name: 'xFilter',\n                    bindScope: 'transient',\n                    ...__ipsProxy,\n                  }),\n                  new wasm.xWrap.FuncPtrAdapter({\n                    name: 'xConflict',\n                    signature: 'i(pip)',\n                    bindScope: 'transient',\n                  }),\n                  'void*',\n                ],\n              ],\n              [\n                'sqlite3changeset_apply_v2',\n                'int',\n                [\n                  'sqlite3*',\n                  'int',\n                  'void*',\n                  new wasm.xWrap.FuncPtrAdapter({\n                    name: 'xFilter',\n                    bindScope: 'transient',\n                    ...__ipsProxy,\n                  }),\n                  new wasm.xWrap.FuncPtrAdapter({\n                    name: 'xConflict',\n                    signature: 'i(pip)',\n                    bindScope: 'transient',\n                  }),\n                  'void*',\n                  '**',\n                  'int*',\n                  'int',\n                ],\n              ],\n              [\n                'sqlite3changeset_apply_v2_strm',\n                'int',\n                [\n                  'sqlite3*',\n                  new wasm.xWrap.FuncPtrAdapter({\n                    name: 'xInput',\n                    signature: 'i(ppp)',\n                    bindScope: 'transient',\n                  }),\n                  'void*',\n                  new wasm.xWrap.FuncPtrAdapter({\n                    name: 'xFilter',\n                    bindScope: 'transient',\n                    ...__ipsProxy,\n                  }),\n                  new wasm.xWrap.FuncPtrAdapter({\n                    name: 'xConflict',\n                    signature: 'i(pip)',\n                    bindScope: 'transient',\n                  }),\n                  'void*',\n                  '**',\n                  'int*',\n                  'int',\n                ],\n              ],\n              [\n                'sqlite3changeset_concat',\n                'int',\n                ['int', 'void*', 'int', 'void*', 'int*', '**'],\n              ],\n              [\n                'sqlite3changeset_concat_strm',\n                'int',\n                [\n                  new wasm.xWrap.FuncPtrAdapter({\n                    name: 'xInputA',\n                    signature: 'i(ppp)',\n                    bindScope: 'transient',\n                  }),\n                  'void*',\n                  new wasm.xWrap.FuncPtrAdapter({\n                    name: 'xInputB',\n                    signature: 'i(ppp)',\n                    bindScope: 'transient',\n                  }),\n                  'void*',\n                  new wasm.xWrap.FuncPtrAdapter({\n                    name: 'xOutput',\n                    signature: 'i(ppi)',\n                    bindScope: 'transient',\n                  }),\n                  'void*',\n                ],\n              ],\n              [\n                'sqlite3changeset_conflict',\n                'int',\n                ['sqlite3_changeset_iter*', 'int', '**'],\n              ],\n              ['sqlite3changeset_finalize', 'int', ['sqlite3_changeset_iter*']],\n              [\n                'sqlite3changeset_fk_conflicts',\n                'int',\n                ['sqlite3_changeset_iter*', 'int*'],\n              ],\n              [\n                'sqlite3changeset_invert',\n                'int',\n                ['int', 'void*', 'int*', '**'],\n              ],\n              [\n                'sqlite3changeset_invert_strm',\n                'int',\n                [\n                  new wasm.xWrap.FuncPtrAdapter({\n                    name: 'xInput',\n                    signature: 'i(ppp)',\n                    bindScope: 'transient',\n                  }),\n                  'void*',\n                  new wasm.xWrap.FuncPtrAdapter({\n                    name: 'xOutput',\n                    signature: 'i(ppi)',\n                    bindScope: 'transient',\n                  }),\n                  'void*',\n                ],\n              ],\n              [\n                'sqlite3changeset_new',\n                'int',\n                ['sqlite3_changeset_iter*', 'int', '**'],\n              ],\n              ['sqlite3changeset_next', 'int', ['sqlite3_changeset_iter*']],\n              [\n                'sqlite3changeset_old',\n                'int',\n                ['sqlite3_changeset_iter*', 'int', '**'],\n              ],\n              [\n                'sqlite3changeset_op',\n                'int',\n                ['sqlite3_changeset_iter*', '**', 'int*', 'int*', 'int*'],\n              ],\n              [\n                'sqlite3changeset_pk',\n                'int',\n                ['sqlite3_changeset_iter*', '**', 'int*'],\n              ],\n              ['sqlite3changeset_start', 'int', ['**', 'int', '*']],\n              [\n                'sqlite3changeset_start_strm',\n                'int',\n                [\n                  '**',\n                  new wasm.xWrap.FuncPtrAdapter({\n                    name: 'xInput',\n                    signature: 'i(ppp)',\n                    bindScope: 'transient',\n                  }),\n                  'void*',\n                ],\n              ],\n              ['sqlite3changeset_start_v2', 'int', ['**', 'int', '*', 'int']],\n              [\n                'sqlite3changeset_start_v2_strm',\n                'int',\n                [\n                  '**',\n                  new wasm.xWrap.FuncPtrAdapter({\n                    name: 'xInput',\n                    signature: 'i(ppp)',\n                    bindScope: 'transient',\n                  }),\n                  'void*',\n                  'int',\n                ],\n              ],\n              ['sqlite3session_attach', 'int', ['sqlite3_session*', 'string']],\n              [\n                'sqlite3session_changeset',\n                'int',\n                ['sqlite3_session*', 'int*', '**'],\n              ],\n              ['sqlite3session_changeset_size', 'i64', ['sqlite3_session*']],\n              [\n                'sqlite3session_changeset_strm',\n                'int',\n                [\n                  'sqlite3_session*',\n                  new wasm.xWrap.FuncPtrAdapter({\n                    name: 'xOutput',\n                    signature: 'i(ppp)',\n                    bindScope: 'transient',\n                  }),\n                  'void*',\n                ],\n              ],\n              ['sqlite3session_config', 'int', ['int', 'void*']],\n              ['sqlite3session_create', 'int', ['sqlite3*', 'string', '**']],\n\n              [\n                'sqlite3session_diff',\n                'int',\n                ['sqlite3_session*', 'string', 'string', '**'],\n              ],\n              ['sqlite3session_enable', 'int', ['sqlite3_session*', 'int']],\n              ['sqlite3session_indirect', 'int', ['sqlite3_session*', 'int']],\n              ['sqlite3session_isempty', 'int', ['sqlite3_session*']],\n              ['sqlite3session_memory_used', 'i64', ['sqlite3_session*']],\n              [\n                'sqlite3session_object_config',\n                'int',\n                ['sqlite3_session*', 'int', 'void*'],\n              ],\n              [\n                'sqlite3session_patchset',\n                'int',\n                ['sqlite3_session*', '*', '**'],\n              ],\n              [\n                'sqlite3session_patchset_strm',\n                'int',\n                [\n                  'sqlite3_session*',\n                  new wasm.xWrap.FuncPtrAdapter({\n                    name: 'xOutput',\n                    signature: 'i(ppp)',\n                    bindScope: 'transient',\n                  }),\n                  'void*',\n                ],\n              ],\n              [\n                'sqlite3session_table_filter',\n                undefined,\n                [\n                  'sqlite3_session*',\n                  new wasm.xWrap.FuncPtrAdapter({\n                    name: 'xFilter',\n                    ...__ipsProxy,\n                    contextKey: (argv, argIndex) => argv[0],\n                  }),\n                  '*',\n                ],\n              ],\n            ],\n          );\n        }\n\n        wasm.bindingSignatures.wasmInternal = [\n          ['sqlite3__wasm_db_reset', 'int', 'sqlite3*'],\n          ['sqlite3__wasm_db_vfs', 'sqlite3_vfs*', 'sqlite3*', 'string'],\n          [\n            'sqlite3__wasm_vfs_create_file',\n            'int',\n            'sqlite3_vfs*',\n            'string',\n            '*',\n            'int',\n          ],\n          ['sqlite3__wasm_posix_create_file', 'int', 'string', '*', 'int'],\n          ['sqlite3__wasm_vfs_unlink', 'int', 'sqlite3_vfs*', 'string'],\n          ['sqlite3__wasm_qfmt_token', 'string:dealloc', 'string', 'int'],\n        ];\n\n        sqlite3.StructBinder = globalThis.Jaccwabyt({\n          heap: 0 ? wasm.memory : wasm.heap8u,\n          alloc: wasm.alloc,\n          dealloc: wasm.dealloc,\n          bigIntEnabled: wasm.bigIntEnabled,\n          memberPrefix: '$',\n        });\n        delete globalThis.Jaccwabyt;\n\n        {\n          const __xString = wasm.xWrap.argAdapter('string');\n          wasm.xWrap.argAdapter('string:flexible', (v) =>\n            __xString(util.flexibleString(v)),\n          );\n\n          wasm.xWrap.argAdapter(\n            'string:static',\n            function (v) {\n              if (wasm.isPtr(v)) return v;\n              v = '' + v;\n              let rc = this[v];\n              return rc || (this[v] = wasm.allocCString(v));\n            }.bind(Object.create(null)),\n          );\n\n          const __xArgPtr = wasm.xWrap.argAdapter('*');\n          const nilType = function () {};\n          wasm.xWrap.argAdapter('sqlite3_filename', __xArgPtr)(\n            'sqlite3_context*',\n            __xArgPtr,\n          )('sqlite3_value*', __xArgPtr)('void*', __xArgPtr)(\n            'sqlite3_changegroup*',\n            __xArgPtr,\n          )('sqlite3_changeset_iter*', __xArgPtr)(\n            'sqlite3_session*',\n            __xArgPtr,\n          )('sqlite3_stmt*', (v) =>\n            __xArgPtr(\n              v instanceof (sqlite3?.oo1?.Stmt || nilType) ? v.pointer : v,\n            ),\n          )('sqlite3*', (v) =>\n            __xArgPtr(\n              v instanceof (sqlite3?.oo1?.DB || nilType) ? v.pointer : v,\n            ),\n          )('sqlite3_vfs*', (v) => {\n            if ('string' === typeof v) {\n              return (\n                capi.sqlite3_vfs_find(v) ||\n                sqlite3.SQLite3Error.toss(\n                  capi.SQLITE_NOTFOUND,\n                  'Unknown sqlite3_vfs name:',\n                  v,\n                )\n              );\n            }\n            return __xArgPtr(\n              v instanceof (capi.sqlite3_vfs || nilType) ? v.pointer : v,\n            );\n          });\n          if (wasm.exports.sqlite3_declare_vtab) {\n            wasm.xWrap.argAdapter('sqlite3_index_info*', (v) =>\n              __xArgPtr(\n                v instanceof (capi.sqlite3_index_info || nilType)\n                  ? v.pointer\n                  : v,\n              ),\n            )('sqlite3_module*', (v) =>\n              __xArgPtr(\n                v instanceof (capi.sqlite3_module || nilType) ? v.pointer : v,\n              ),\n            );\n          }\n\n          const __xRcPtr = wasm.xWrap.resultAdapter('*');\n          wasm.xWrap.resultAdapter('sqlite3*', __xRcPtr)(\n            'sqlite3_context*',\n            __xRcPtr,\n          )('sqlite3_stmt*', __xRcPtr)('sqlite3_value*', __xRcPtr)(\n            'sqlite3_vfs*',\n            __xRcPtr,\n          )('void*', __xRcPtr);\n\n          if (0 === wasm.exports.sqlite3_step.length) {\n            wasm.xWrap.doArgcCheck = false;\n            sqlite3.config.warn(\n              'Disabling sqlite3.wasm.xWrap.doArgcCheck due to environmental quirks.',\n            );\n          }\n          for (const e of wasm.bindingSignatures) {\n            capi[e[0]] = wasm.xWrap.apply(null, e);\n          }\n          for (const e of wasm.bindingSignatures.wasmInternal) {\n            util[e[0]] = wasm.xWrap.apply(null, e);\n          }\n\n          const fI64Disabled = function (fname) {\n            return () =>\n              toss(\n                fname + '() is unavailable due to lack',\n                'of BigInt support in this build.',\n              );\n          };\n          for (const e of wasm.bindingSignatures.int64) {\n            capi[e[0]] = wasm.bigIntEnabled\n              ? wasm.xWrap.apply(null, e)\n              : fI64Disabled(e[0]);\n          }\n\n          delete wasm.bindingSignatures;\n\n          if (wasm.exports.sqlite3__wasm_db_error) {\n            const __db_err = wasm.xWrap(\n              'sqlite3__wasm_db_error',\n              'int',\n              'sqlite3*',\n              'int',\n              'string',\n            );\n\n            util.sqlite3__wasm_db_error = function (pDb, resultCode, message) {\n              if (resultCode instanceof sqlite3.WasmAllocError) {\n                resultCode = capi.SQLITE_NOMEM;\n                message = 0;\n              } else if (resultCode instanceof Error) {\n                message = message || '' + resultCode;\n                resultCode = resultCode.resultCode || capi.SQLITE_ERROR;\n              }\n              return pDb ? __db_err(pDb, resultCode, message) : resultCode;\n            };\n          } else {\n            util.sqlite3__wasm_db_error = function (pDb, errCode, msg) {\n              console.warn(\n                'sqlite3__wasm_db_error() is not exported.',\n                arguments,\n              );\n              return errCode;\n            };\n          }\n        }\n\n        {\n          const cJson = wasm.xCall('sqlite3__wasm_enum_json');\n          if (!cJson) {\n            toss(\n              \"Maintenance required: increase sqlite3__wasm_enum_json()'s\",\n              'static buffer size!',\n            );\n          }\n\n          wasm.ctype = JSON.parse(wasm.cstrToJs(cJson));\n\n          const defineGroups = [\n            'access',\n            'authorizer',\n            'blobFinalizers',\n            'changeset',\n            'config',\n            'dataTypes',\n            'dbConfig',\n            'dbStatus',\n            'encodings',\n            'fcntl',\n            'flock',\n            'ioCap',\n            'limits',\n            'openFlags',\n            'prepareFlags',\n            'resultCodes',\n            'sqlite3Status',\n            'stmtStatus',\n            'syncFlags',\n            'trace',\n            'txnState',\n            'udfFlags',\n            'version',\n          ];\n          if (wasm.bigIntEnabled) {\n            defineGroups.push('serialize', 'session', 'vtab');\n          }\n          for (const t of defineGroups) {\n            for (const e of Object.entries(wasm.ctype[t])) {\n              capi[e[0]] = e[1];\n            }\n          }\n          if (!wasm.functionEntry(capi.SQLITE_WASM_DEALLOC)) {\n            toss(\n              'Internal error: cannot resolve exported function',\n              'entry SQLITE_WASM_DEALLOC (==' + capi.SQLITE_WASM_DEALLOC + ').',\n            );\n          }\n          const __rcMap = Object.create(null);\n          for (const t of ['resultCodes']) {\n            for (const e of Object.entries(wasm.ctype[t])) {\n              __rcMap[e[1]] = e[0];\n            }\n          }\n\n          capi.sqlite3_js_rc_str = (rc) => __rcMap[rc];\n\n          const notThese = Object.assign(Object.create(null), {\n            WasmTestStruct: true,\n\n            sqlite3_kvvfs_methods: !util.isUIThread(),\n\n            sqlite3_index_info: !wasm.bigIntEnabled,\n            sqlite3_index_constraint: !wasm.bigIntEnabled,\n            sqlite3_index_orderby: !wasm.bigIntEnabled,\n            sqlite3_index_constraint_usage: !wasm.bigIntEnabled,\n          });\n          for (const s of wasm.ctype.structs) {\n            if (!notThese[s.name]) {\n              capi[s.name] = sqlite3.StructBinder(s);\n            }\n          }\n          if (capi.sqlite3_index_info) {\n            for (const k of [\n              'sqlite3_index_constraint',\n              'sqlite3_index_orderby',\n              'sqlite3_index_constraint_usage',\n            ]) {\n              capi.sqlite3_index_info[k] = capi[k];\n              delete capi[k];\n            }\n            capi.sqlite3_vtab_config = wasm.xWrap(\n              'sqlite3__wasm_vtab_config',\n              'int',\n              ['sqlite3*', 'int', 'int'],\n            );\n          }\n        }\n\n        const __dbArgcMismatch = (pDb, f, n) => {\n          return util.sqlite3__wasm_db_error(\n            pDb,\n            capi.SQLITE_MISUSE,\n            f + '() requires ' + n + ' argument' + (1 === n ? '' : 's') + '.',\n          );\n        };\n\n        const __errEncoding = (pDb) => {\n          return util.sqlite3__wasm_db_error(\n            pDb,\n            capi.SQLITE_FORMAT,\n            'SQLITE_UTF8 is the only supported encoding.',\n          );\n        };\n\n        const __argPDb = (pDb) => wasm.xWrap.argAdapter('sqlite3*')(pDb);\n        const __argStr = (str) => (wasm.isPtr(str) ? wasm.cstrToJs(str) : str);\n        const __dbCleanupMap = function (pDb, mode) {\n          pDb = __argPDb(pDb);\n          let m = this.dbMap.get(pDb);\n          if (!mode) {\n            this.dbMap.delete(pDb);\n            return m;\n          } else if (!m && mode > 0) {\n            this.dbMap.set(pDb, (m = Object.create(null)));\n          }\n          return m;\n        }.bind(\n          Object.assign(Object.create(null), {\n            dbMap: new Map(),\n          }),\n        );\n\n        __dbCleanupMap.addCollation = function (pDb, name) {\n          const m = __dbCleanupMap(pDb, 1);\n          if (!m.collation) m.collation = new Set();\n          m.collation.add(__argStr(name).toLowerCase());\n        };\n\n        __dbCleanupMap._addUDF = function (pDb, name, arity, map) {\n          name = __argStr(name).toLowerCase();\n          let u = map.get(name);\n          if (!u) map.set(name, (u = new Set()));\n          u.add(arity < 0 ? -1 : arity);\n        };\n\n        __dbCleanupMap.addFunction = function (pDb, name, arity) {\n          const m = __dbCleanupMap(pDb, 1);\n          if (!m.udf) m.udf = new Map();\n          this._addUDF(pDb, name, arity, m.udf);\n        };\n\n        if (wasm.exports.sqlite3_create_window_function) {\n          __dbCleanupMap.addWindowFunc = function (pDb, name, arity) {\n            const m = __dbCleanupMap(pDb, 1);\n            if (!m.wudf) m.wudf = new Map();\n            this._addUDF(pDb, name, arity, m.wudf);\n          };\n        }\n\n        __dbCleanupMap.cleanup = function (pDb) {\n          pDb = __argPDb(pDb);\n\n          const closeArgs = [pDb];\n          for (const name of [\n            'sqlite3_busy_handler',\n            'sqlite3_commit_hook',\n            'sqlite3_preupdate_hook',\n            'sqlite3_progress_handler',\n            'sqlite3_rollback_hook',\n            'sqlite3_set_authorizer',\n            'sqlite3_trace_v2',\n            'sqlite3_update_hook',\n          ]) {\n            const x = wasm.exports[name];\n            if (!x) {\n              continue;\n            }\n            closeArgs.length = x.length;\n            try {\n              capi[name](...closeArgs);\n            } catch (e) {\n              sqlite3.config.warn(\n                'close-time call of',\n                name + '(',\n                closeArgs,\n                ') threw:',\n                e,\n              );\n            }\n          }\n          const m = __dbCleanupMap(pDb, 0);\n          if (!m) return;\n          if (m.collation) {\n            for (const name of m.collation) {\n              try {\n                capi.sqlite3_create_collation_v2(\n                  pDb,\n                  name,\n                  capi.SQLITE_UTF8,\n                  0,\n                  0,\n                  0,\n                );\n              } catch (e) {}\n            }\n            delete m.collation;\n          }\n          let i;\n          for (i = 0; i < 2; ++i) {\n            const fmap = i ? m.wudf : m.udf;\n            if (!fmap) continue;\n            const func = i\n              ? capi.sqlite3_create_window_function\n              : capi.sqlite3_create_function_v2;\n            for (const e of fmap) {\n              const name = e[0],\n                arities = e[1];\n              const fargs = [pDb, name, 0, capi.SQLITE_UTF8, 0, 0, 0, 0, 0];\n              if (i) fargs.push(0);\n              for (const arity of arities) {\n                try {\n                  fargs[2] = arity;\n                  func.apply(null, fargs);\n                } catch (e) {}\n              }\n              arities.clear();\n            }\n            fmap.clear();\n          }\n          delete m.udf;\n          delete m.wudf;\n        };\n\n        {\n          const __sqlite3CloseV2 = wasm.xWrap(\n            'sqlite3_close_v2',\n            'int',\n            'sqlite3*',\n          );\n          capi.sqlite3_close_v2 = function (pDb) {\n            if (1 !== arguments.length)\n              return __dbArgcMismatch(pDb, 'sqlite3_close_v2', 1);\n            if (pDb) {\n              try {\n                __dbCleanupMap.cleanup(pDb);\n              } catch (e) {}\n            }\n            return __sqlite3CloseV2(pDb);\n          };\n        }\n\n        if (capi.sqlite3session_create) {\n          const __sqlite3SessionDelete = wasm.xWrap(\n            'sqlite3session_delete',\n            undefined,\n            ['sqlite3_session*'],\n          );\n          capi.sqlite3session_delete = function (pSession) {\n            if (1 !== arguments.length) {\n              return __dbArgcMismatch(pDb, 'sqlite3session_delete', 1);\n            } else if (pSession) {\n              capi.sqlite3session_table_filter(pSession, 0, 0);\n            }\n            __sqlite3SessionDelete(pSession);\n          };\n        }\n\n        {\n          const contextKey = (argv, argIndex) => {\n            return (\n              'argv[' +\n              argIndex +\n              ']:' +\n              argv[0] +\n              ':' +\n              wasm.cstrToJs(argv[1]).toLowerCase()\n            );\n          };\n          const __sqlite3CreateCollationV2 = wasm.xWrap(\n            'sqlite3_create_collation_v2',\n            'int',\n            [\n              'sqlite3*',\n              'string',\n              'int',\n              '*',\n              new wasm.xWrap.FuncPtrAdapter({\n                name: 'xCompare',\n                signature: 'i(pipip)',\n                contextKey,\n              }),\n              new wasm.xWrap.FuncPtrAdapter({\n                name: 'xDestroy',\n                signature: 'v(p)',\n                contextKey,\n              }),\n            ],\n          );\n\n          capi.sqlite3_create_collation_v2 = function (\n            pDb,\n            zName,\n            eTextRep,\n            pArg,\n            xCompare,\n            xDestroy,\n          ) {\n            if (6 !== arguments.length)\n              return __dbArgcMismatch(pDb, 'sqlite3_create_collation_v2', 6);\n            else if (0 === (eTextRep & 0xf)) {\n              eTextRep |= capi.SQLITE_UTF8;\n            } else if (capi.SQLITE_UTF8 !== (eTextRep & 0xf)) {\n              return __errEncoding(pDb);\n            }\n            try {\n              const rc = __sqlite3CreateCollationV2(\n                pDb,\n                zName,\n                eTextRep,\n                pArg,\n                xCompare,\n                xDestroy,\n              );\n              if (0 === rc && xCompare instanceof Function) {\n                __dbCleanupMap.addCollation(pDb, zName);\n              }\n              return rc;\n            } catch (e) {\n              return util.sqlite3__wasm_db_error(pDb, e);\n            }\n          };\n\n          capi.sqlite3_create_collation = (\n            pDb,\n            zName,\n            eTextRep,\n            pArg,\n            xCompare,\n          ) => {\n            return 5 === arguments.length\n              ? capi.sqlite3_create_collation_v2(\n                  pDb,\n                  zName,\n                  eTextRep,\n                  pArg,\n                  xCompare,\n                  0,\n                )\n              : __dbArgcMismatch(pDb, 'sqlite3_create_collation', 5);\n          };\n        }\n\n        {\n          const contextKey = function (argv, argIndex) {\n            return (\n              argv[0] +\n              ':' +\n              (argv[2] < 0 ? -1 : argv[2]) +\n              ':' +\n              argIndex +\n              ':' +\n              wasm.cstrToJs(argv[1]).toLowerCase()\n            );\n          };\n\n          const __cfProxy = Object.assign(Object.create(null), {\n            xInverseAndStep: {\n              signature: 'v(pip)',\n              contextKey,\n              callProxy: (callback) => {\n                return (pCtx, argc, pArgv) => {\n                  try {\n                    callback(pCtx, ...capi.sqlite3_values_to_js(argc, pArgv));\n                  } catch (e) {\n                    capi.sqlite3_result_error_js(pCtx, e);\n                  }\n                };\n              },\n            },\n            xFinalAndValue: {\n              signature: 'v(p)',\n              contextKey,\n              callProxy: (callback) => {\n                return (pCtx) => {\n                  try {\n                    capi.sqlite3_result_js(pCtx, callback(pCtx));\n                  } catch (e) {\n                    capi.sqlite3_result_error_js(pCtx, e);\n                  }\n                };\n              },\n            },\n            xFunc: {\n              signature: 'v(pip)',\n              contextKey,\n              callProxy: (callback) => {\n                return (pCtx, argc, pArgv) => {\n                  try {\n                    capi.sqlite3_result_js(\n                      pCtx,\n                      callback(pCtx, ...capi.sqlite3_values_to_js(argc, pArgv)),\n                    );\n                  } catch (e) {\n                    capi.sqlite3_result_error_js(pCtx, e);\n                  }\n                };\n              },\n            },\n            xDestroy: {\n              signature: 'v(p)',\n              contextKey,\n\n              callProxy: (callback) => {\n                return (pVoid) => {\n                  try {\n                    callback(pVoid);\n                  } catch (e) {\n                    console.error('UDF xDestroy method threw:', e);\n                  }\n                };\n              },\n            },\n          });\n\n          const __sqlite3CreateFunction = wasm.xWrap(\n            'sqlite3_create_function_v2',\n            'int',\n            [\n              'sqlite3*',\n              'string',\n              'int',\n              'int',\n              '*',\n              new wasm.xWrap.FuncPtrAdapter({\n                name: 'xFunc',\n                ...__cfProxy.xFunc,\n              }),\n              new wasm.xWrap.FuncPtrAdapter({\n                name: 'xStep',\n                ...__cfProxy.xInverseAndStep,\n              }),\n              new wasm.xWrap.FuncPtrAdapter({\n                name: 'xFinal',\n                ...__cfProxy.xFinalAndValue,\n              }),\n              new wasm.xWrap.FuncPtrAdapter({\n                name: 'xDestroy',\n                ...__cfProxy.xDestroy,\n              }),\n            ],\n          );\n\n          const __sqlite3CreateWindowFunction = wasm.exports\n            .sqlite3_create_window_function\n            ? wasm.xWrap('sqlite3_create_window_function', 'int', [\n                'sqlite3*',\n                'string',\n                'int',\n                'int',\n                '*',\n                new wasm.xWrap.FuncPtrAdapter({\n                  name: 'xStep',\n                  ...__cfProxy.xInverseAndStep,\n                }),\n                new wasm.xWrap.FuncPtrAdapter({\n                  name: 'xFinal',\n                  ...__cfProxy.xFinalAndValue,\n                }),\n                new wasm.xWrap.FuncPtrAdapter({\n                  name: 'xValue',\n                  ...__cfProxy.xFinalAndValue,\n                }),\n                new wasm.xWrap.FuncPtrAdapter({\n                  name: 'xInverse',\n                  ...__cfProxy.xInverseAndStep,\n                }),\n                new wasm.xWrap.FuncPtrAdapter({\n                  name: 'xDestroy',\n                  ...__cfProxy.xDestroy,\n                }),\n              ])\n            : undefined;\n\n          capi.sqlite3_create_function_v2 = function f(\n            pDb,\n            funcName,\n            nArg,\n            eTextRep,\n            pApp,\n            xFunc,\n            xStep,\n            xFinal,\n            xDestroy,\n          ) {\n            if (f.length !== arguments.length) {\n              return __dbArgcMismatch(\n                pDb,\n                'sqlite3_create_function_v2',\n                f.length,\n              );\n            } else if (0 === (eTextRep & 0xf)) {\n              eTextRep |= capi.SQLITE_UTF8;\n            } else if (capi.SQLITE_UTF8 !== (eTextRep & 0xf)) {\n              return __errEncoding(pDb);\n            }\n            try {\n              const rc = __sqlite3CreateFunction(\n                pDb,\n                funcName,\n                nArg,\n                eTextRep,\n                pApp,\n                xFunc,\n                xStep,\n                xFinal,\n                xDestroy,\n              );\n              if (\n                0 === rc &&\n                (xFunc instanceof Function ||\n                  xStep instanceof Function ||\n                  xFinal instanceof Function ||\n                  xDestroy instanceof Function)\n              ) {\n                __dbCleanupMap.addFunction(pDb, funcName, nArg);\n              }\n              return rc;\n            } catch (e) {\n              console.error('sqlite3_create_function_v2() setup threw:', e);\n              return util.sqlite3__wasm_db_error(\n                pDb,\n                e,\n                'Creation of UDF threw: ' + e,\n              );\n            }\n          };\n\n          capi.sqlite3_create_function = function f(\n            pDb,\n            funcName,\n            nArg,\n            eTextRep,\n            pApp,\n            xFunc,\n            xStep,\n            xFinal,\n          ) {\n            return f.length === arguments.length\n              ? capi.sqlite3_create_function_v2(\n                  pDb,\n                  funcName,\n                  nArg,\n                  eTextRep,\n                  pApp,\n                  xFunc,\n                  xStep,\n                  xFinal,\n                  0,\n                )\n              : __dbArgcMismatch(pDb, 'sqlite3_create_function', f.length);\n          };\n\n          if (__sqlite3CreateWindowFunction) {\n            capi.sqlite3_create_window_function = function f(\n              pDb,\n              funcName,\n              nArg,\n              eTextRep,\n              pApp,\n              xStep,\n              xFinal,\n              xValue,\n              xInverse,\n              xDestroy,\n            ) {\n              if (f.length !== arguments.length) {\n                return __dbArgcMismatch(\n                  pDb,\n                  'sqlite3_create_window_function',\n                  f.length,\n                );\n              } else if (0 === (eTextRep & 0xf)) {\n                eTextRep |= capi.SQLITE_UTF8;\n              } else if (capi.SQLITE_UTF8 !== (eTextRep & 0xf)) {\n                return __errEncoding(pDb);\n              }\n              try {\n                const rc = __sqlite3CreateWindowFunction(\n                  pDb,\n                  funcName,\n                  nArg,\n                  eTextRep,\n                  pApp,\n                  xStep,\n                  xFinal,\n                  xValue,\n                  xInverse,\n                  xDestroy,\n                );\n                if (\n                  0 === rc &&\n                  (xStep instanceof Function ||\n                    xFinal instanceof Function ||\n                    xValue instanceof Function ||\n                    xInverse instanceof Function ||\n                    xDestroy instanceof Function)\n                ) {\n                  __dbCleanupMap.addWindowFunc(pDb, funcName, nArg);\n                }\n                return rc;\n              } catch (e) {\n                console.error(\n                  'sqlite3_create_window_function() setup threw:',\n                  e,\n                );\n                return util.sqlite3__wasm_db_error(\n                  pDb,\n                  e,\n                  'Creation of UDF threw: ' + e,\n                );\n              }\n            };\n          } else {\n            delete capi.sqlite3_create_window_function;\n          }\n\n          capi.sqlite3_create_function_v2.udfSetResult =\n            capi.sqlite3_create_function.udfSetResult = capi.sqlite3_result_js;\n          if (capi.sqlite3_create_window_function) {\n            capi.sqlite3_create_window_function.udfSetResult =\n              capi.sqlite3_result_js;\n          }\n\n          capi.sqlite3_create_function_v2.udfConvertArgs =\n            capi.sqlite3_create_function.udfConvertArgs =\n              capi.sqlite3_values_to_js;\n          if (capi.sqlite3_create_window_function) {\n            capi.sqlite3_create_window_function.udfConvertArgs =\n              capi.sqlite3_values_to_js;\n          }\n\n          capi.sqlite3_create_function_v2.udfSetError =\n            capi.sqlite3_create_function.udfSetError =\n              capi.sqlite3_result_error_js;\n          if (capi.sqlite3_create_window_function) {\n            capi.sqlite3_create_window_function.udfSetError =\n              capi.sqlite3_result_error_js;\n          }\n        }\n\n        {\n          const __flexiString = (v, n) => {\n            if ('string' === typeof v) {\n              n = -1;\n            } else if (util.isSQLableTypedArray(v)) {\n              n = v.byteLength;\n              v = util.typedArrayToString(\n                v instanceof ArrayBuffer ? new Uint8Array(v) : v,\n              );\n            } else if (Array.isArray(v)) {\n              v = v.join('');\n              n = -1;\n            }\n            return [v, n];\n          };\n\n          const __prepare = {\n            basic: wasm.xWrap('sqlite3_prepare_v3', 'int', [\n              'sqlite3*',\n              'string',\n              'int',\n              'int',\n              '**',\n              '**',\n            ]),\n\n            full: wasm.xWrap('sqlite3_prepare_v3', 'int', [\n              'sqlite3*',\n              '*',\n              'int',\n              'int',\n              '**',\n              '**',\n            ]),\n          };\n\n          capi.sqlite3_prepare_v3 = function f(\n            pDb,\n            sql,\n            sqlLen,\n            prepFlags,\n            ppStmt,\n            pzTail,\n          ) {\n            if (f.length !== arguments.length) {\n              return __dbArgcMismatch(pDb, 'sqlite3_prepare_v3', f.length);\n            }\n            const [xSql, xSqlLen] = __flexiString(sql, sqlLen);\n            switch (typeof xSql) {\n              case 'string':\n                return __prepare.basic(\n                  pDb,\n                  xSql,\n                  xSqlLen,\n                  prepFlags,\n                  ppStmt,\n                  null,\n                );\n              case 'number':\n                return __prepare.full(\n                  pDb,\n                  xSql,\n                  xSqlLen,\n                  prepFlags,\n                  ppStmt,\n                  pzTail,\n                );\n              default:\n                return util.sqlite3__wasm_db_error(\n                  pDb,\n                  capi.SQLITE_MISUSE,\n                  'Invalid SQL argument type for sqlite3_prepare_v2/v3().',\n                );\n            }\n          };\n\n          capi.sqlite3_prepare_v2 = function f(\n            pDb,\n            sql,\n            sqlLen,\n            ppStmt,\n            pzTail,\n          ) {\n            return f.length === arguments.length\n              ? capi.sqlite3_prepare_v3(pDb, sql, sqlLen, 0, ppStmt, pzTail)\n              : __dbArgcMismatch(pDb, 'sqlite3_prepare_v2', f.length);\n          };\n        }\n\n        {\n          const __bindText = wasm.xWrap('sqlite3_bind_text', 'int', [\n            'sqlite3_stmt*',\n            'int',\n            'string',\n            'int',\n            '*',\n          ]);\n          const __bindBlob = wasm.xWrap('sqlite3_bind_blob', 'int', [\n            'sqlite3_stmt*',\n            'int',\n            '*',\n            'int',\n            '*',\n          ]);\n\n          capi.sqlite3_bind_text = function f(\n            pStmt,\n            iCol,\n            text,\n            nText,\n            xDestroy,\n          ) {\n            if (f.length !== arguments.length) {\n              return __dbArgcMismatch(\n                capi.sqlite3_db_handle(pStmt),\n                'sqlite3_bind_text',\n                f.length,\n              );\n            } else if (wasm.isPtr(text) || null === text) {\n              return __bindText(pStmt, iCol, text, nText, xDestroy);\n            } else if (text instanceof ArrayBuffer) {\n              text = new Uint8Array(text);\n            } else if (Array.isArray(pMem)) {\n              text = pMem.join('');\n            }\n            let p, n;\n            try {\n              if (util.isSQLableTypedArray(text)) {\n                p = wasm.allocFromTypedArray(text);\n                n = text.byteLength;\n              } else if ('string' === typeof text) {\n                [p, n] = wasm.allocCString(text);\n              } else {\n                return util.sqlite3__wasm_db_error(\n                  capi.sqlite3_db_handle(pStmt),\n                  capi.SQLITE_MISUSE,\n                  'Invalid 3rd argument type for sqlite3_bind_text().',\n                );\n              }\n              return __bindText(pStmt, iCol, p, n, capi.SQLITE_WASM_DEALLOC);\n            } catch (e) {\n              wasm.dealloc(p);\n              return util.sqlite3__wasm_db_error(\n                capi.sqlite3_db_handle(pStmt),\n                e,\n              );\n            }\n          };\n\n          capi.sqlite3_bind_blob = function f(\n            pStmt,\n            iCol,\n            pMem,\n            nMem,\n            xDestroy,\n          ) {\n            if (f.length !== arguments.length) {\n              return __dbArgcMismatch(\n                capi.sqlite3_db_handle(pStmt),\n                'sqlite3_bind_blob',\n                f.length,\n              );\n            } else if (wasm.isPtr(pMem) || null === pMem) {\n              return __bindBlob(pStmt, iCol, pMem, nMem, xDestroy);\n            } else if (pMem instanceof ArrayBuffer) {\n              pMem = new Uint8Array(pMem);\n            } else if (Array.isArray(pMem)) {\n              pMem = pMem.join('');\n            }\n            let p, n;\n            try {\n              if (util.isBindableTypedArray(pMem)) {\n                p = wasm.allocFromTypedArray(pMem);\n                n = nMem >= 0 ? nMem : pMem.byteLength;\n              } else if ('string' === typeof pMem) {\n                [p, n] = wasm.allocCString(pMem);\n              } else {\n                return util.sqlite3__wasm_db_error(\n                  capi.sqlite3_db_handle(pStmt),\n                  capi.SQLITE_MISUSE,\n                  'Invalid 3rd argument type for sqlite3_bind_blob().',\n                );\n              }\n              return __bindBlob(pStmt, iCol, p, n, capi.SQLITE_WASM_DEALLOC);\n            } catch (e) {\n              wasm.dealloc(p);\n              return util.sqlite3__wasm_db_error(\n                capi.sqlite3_db_handle(pStmt),\n                e,\n              );\n            }\n          };\n        }\n\n        {\n          capi.sqlite3_config = function (op, ...args) {\n            if (arguments.length < 2) return capi.SQLITE_MISUSE;\n            switch (op) {\n              case capi.SQLITE_CONFIG_COVERING_INDEX_SCAN:\n              case capi.SQLITE_CONFIG_MEMSTATUS:\n              case capi.SQLITE_CONFIG_SMALL_MALLOC:\n              case capi.SQLITE_CONFIG_SORTERREF_SIZE:\n              case capi.SQLITE_CONFIG_STMTJRNL_SPILL:\n              case capi.SQLITE_CONFIG_URI:\n                return wasm.exports.sqlite3__wasm_config_i(op, args[0]);\n              case capi.SQLITE_CONFIG_LOOKASIDE:\n                return wasm.exports.sqlite3__wasm_config_ii(\n                  op,\n                  args[0],\n                  args[1],\n                );\n              case capi.SQLITE_CONFIG_MEMDB_MAXSIZE:\n                return wasm.exports.sqlite3__wasm_config_j(op, args[0]);\n              case capi.SQLITE_CONFIG_GETMALLOC:\n              case capi.SQLITE_CONFIG_GETMUTEX:\n              case capi.SQLITE_CONFIG_GETPCACHE2:\n              case capi.SQLITE_CONFIG_GETPCACHE:\n              case capi.SQLITE_CONFIG_HEAP:\n              case capi.SQLITE_CONFIG_LOG:\n              case capi.SQLITE_CONFIG_MALLOC:\n              case capi.SQLITE_CONFIG_MMAP_SIZE:\n              case capi.SQLITE_CONFIG_MULTITHREAD:\n              case capi.SQLITE_CONFIG_MUTEX:\n              case capi.SQLITE_CONFIG_PAGECACHE:\n              case capi.SQLITE_CONFIG_PCACHE2:\n              case capi.SQLITE_CONFIG_PCACHE:\n              case capi.SQLITE_CONFIG_PCACHE_HDRSZ:\n              case capi.SQLITE_CONFIG_PMASZ:\n              case capi.SQLITE_CONFIG_SERIALIZED:\n              case capi.SQLITE_CONFIG_SINGLETHREAD:\n              case capi.SQLITE_CONFIG_SQLLOG:\n              case capi.SQLITE_CONFIG_WIN32_HEAPSIZE:\n              default:\n                return capi.SQLITE_NOTFOUND;\n            }\n          };\n        }\n\n        {\n          const __autoExtFptr = new Set();\n\n          capi.sqlite3_auto_extension = function (fPtr) {\n            if (fPtr instanceof Function) {\n              fPtr = wasm.installFunction('i(ppp)', fPtr);\n            } else if (1 !== arguments.length || !wasm.isPtr(fPtr)) {\n              return capi.SQLITE_MISUSE;\n            }\n            const rc = wasm.exports.sqlite3_auto_extension(fPtr);\n            if (fPtr !== arguments[0]) {\n              if (0 === rc) __autoExtFptr.add(fPtr);\n              else wasm.uninstallFunction(fPtr);\n            }\n            return rc;\n          };\n\n          capi.sqlite3_cancel_auto_extension = function (fPtr) {\n            if (!fPtr || 1 !== arguments.length || !wasm.isPtr(fPtr)) return 0;\n            return wasm.exports.sqlite3_cancel_auto_extension(fPtr);\n          };\n\n          capi.sqlite3_reset_auto_extension = function () {\n            wasm.exports.sqlite3_reset_auto_extension();\n            for (const fp of __autoExtFptr) wasm.uninstallFunction(fp);\n            __autoExtFptr.clear();\n          };\n        }\n\n        const pKvvfs = capi.sqlite3_vfs_find('kvvfs');\n        if (pKvvfs) {\n          if (util.isUIThread()) {\n            const kvvfsMethods = new capi.sqlite3_kvvfs_methods(\n              wasm.exports.sqlite3__wasm_kvvfs_methods(),\n            );\n            delete capi.sqlite3_kvvfs_methods;\n\n            const kvvfsMakeKey =\n                wasm.exports.sqlite3__wasm_kvvfsMakeKeyOnPstack,\n              pstack = wasm.pstack;\n\n            const kvvfsStorage = (zClass) =>\n              115 === wasm.peek(zClass) ? sessionStorage : localStorage;\n\n            const kvvfsImpls = {\n              xRead: (zClass, zKey, zBuf, nBuf) => {\n                const stack = pstack.pointer,\n                  astack = wasm.scopedAllocPush();\n                try {\n                  const zXKey = kvvfsMakeKey(zClass, zKey);\n                  if (!zXKey) return -3;\n                  const jKey = wasm.cstrToJs(zXKey);\n                  const jV = kvvfsStorage(zClass).getItem(jKey);\n                  if (!jV) return -1;\n                  const nV = jV.length;\n                  if (nBuf <= 0) return nV;\n                  else if (1 === nBuf) {\n                    wasm.poke(zBuf, 0);\n                    return nV;\n                  }\n                  const zV = wasm.scopedAllocCString(jV);\n                  if (nBuf > nV + 1) nBuf = nV + 1;\n                  wasm.heap8u().copyWithin(zBuf, zV, zV + nBuf - 1);\n                  wasm.poke(zBuf + nBuf - 1, 0);\n                  return nBuf - 1;\n                } catch (e) {\n                  console.error('kvstorageRead()', e);\n                  return -2;\n                } finally {\n                  pstack.restore(stack);\n                  wasm.scopedAllocPop(astack);\n                }\n              },\n              xWrite: (zClass, zKey, zData) => {\n                const stack = pstack.pointer;\n                try {\n                  const zXKey = kvvfsMakeKey(zClass, zKey);\n                  if (!zXKey) return 1;\n                  const jKey = wasm.cstrToJs(zXKey);\n                  kvvfsStorage(zClass).setItem(jKey, wasm.cstrToJs(zData));\n                  return 0;\n                } catch (e) {\n                  console.error('kvstorageWrite()', e);\n                  return capi.SQLITE_IOERR;\n                } finally {\n                  pstack.restore(stack);\n                }\n              },\n              xDelete: (zClass, zKey) => {\n                const stack = pstack.pointer;\n                try {\n                  const zXKey = kvvfsMakeKey(zClass, zKey);\n                  if (!zXKey) return 1;\n                  kvvfsStorage(zClass).removeItem(wasm.cstrToJs(zXKey));\n                  return 0;\n                } catch (e) {\n                  console.error('kvstorageDelete()', e);\n                  return capi.SQLITE_IOERR;\n                } finally {\n                  pstack.restore(stack);\n                }\n              },\n            };\n            for (const k of Object.keys(kvvfsImpls)) {\n              kvvfsMethods[kvvfsMethods.memberKey(k)] = wasm.installFunction(\n                kvvfsMethods.memberSignature(k),\n                kvvfsImpls[k],\n              );\n            }\n          } else {\n            capi.sqlite3_vfs_unregister(pKvvfs);\n          }\n        }\n\n        wasm.xWrap.FuncPtrAdapter.warnOnUse = true;\n\n        const StructBinder = sqlite3.StructBinder;\n        const installMethod = function callee(\n          tgt,\n          name,\n          func,\n          applyArgcCheck = callee.installMethodArgcCheck,\n        ) {\n          if (!(tgt instanceof StructBinder.StructType)) {\n            toss('Usage error: target object is-not-a StructType.');\n          } else if (!(func instanceof Function) && !wasm.isPtr(func)) {\n            toss('Usage errror: expecting a Function or WASM pointer to one.');\n          }\n          if (1 === arguments.length) {\n            return (n, f) => callee(tgt, n, f, applyArgcCheck);\n          }\n          if (!callee.argcProxy) {\n            callee.argcProxy = function (tgt, funcName, func, sig) {\n              return function (...args) {\n                if (func.length !== arguments.length) {\n                  toss(\n                    'Argument mismatch for',\n                    tgt.structInfo.name +\n                      '::' +\n                      funcName +\n                      ': Native signature is:',\n                    sig,\n                  );\n                }\n                return func.apply(this, args);\n              };\n            };\n\n            callee.removeFuncList = function () {\n              if (this.ondispose.__removeFuncList) {\n                this.ondispose.__removeFuncList.forEach((v, ndx) => {\n                  if ('number' === typeof v) {\n                    try {\n                      wasm.uninstallFunction(v);\n                    } catch (e) {}\n                  }\n                });\n                delete this.ondispose.__removeFuncList;\n              }\n            };\n          }\n          const sigN = tgt.memberSignature(name);\n          if (sigN.length < 2) {\n            toss(\n              'Member',\n              name,\n              'does not have a function pointer signature:',\n              sigN,\n            );\n          }\n          const memKey = tgt.memberKey(name);\n          const fProxy =\n            applyArgcCheck && !wasm.isPtr(func)\n              ? callee.argcProxy(tgt, memKey, func, sigN)\n              : func;\n          if (wasm.isPtr(fProxy)) {\n            if (fProxy && !wasm.functionEntry(fProxy)) {\n              toss('Pointer', fProxy, 'is not a WASM function table entry.');\n            }\n            tgt[memKey] = fProxy;\n          } else {\n            const pFunc = wasm.installFunction(\n              fProxy,\n              tgt.memberSignature(name, true),\n            );\n            tgt[memKey] = pFunc;\n            if (!tgt.ondispose || !tgt.ondispose.__removeFuncList) {\n              tgt.addOnDispose(\n                'ondispose.__removeFuncList handler',\n                callee.removeFuncList,\n              );\n              tgt.ondispose.__removeFuncList = [];\n            }\n            tgt.ondispose.__removeFuncList.push(memKey, pFunc);\n          }\n          return (n, f) => callee(tgt, n, f, applyArgcCheck);\n        };\n        installMethod.installMethodArgcCheck = false;\n\n        const installMethods = function (\n          structInstance,\n          methods,\n          applyArgcCheck = installMethod.installMethodArgcCheck,\n        ) {\n          const seen = new Map();\n          for (const k of Object.keys(methods)) {\n            const m = methods[k];\n            const prior = seen.get(m);\n            if (prior) {\n              const mkey = structInstance.memberKey(k);\n              structInstance[mkey] =\n                structInstance[structInstance.memberKey(prior)];\n            } else {\n              installMethod(structInstance, k, m, applyArgcCheck);\n              seen.set(m, k);\n            }\n          }\n          return structInstance;\n        };\n\n        StructBinder.StructType.prototype.installMethod = function callee(\n          name,\n          func,\n          applyArgcCheck = installMethod.installMethodArgcCheck,\n        ) {\n          return arguments.length < 3 && name && 'object' === typeof name\n            ? installMethods(this, ...arguments)\n            : installMethod(this, ...arguments);\n        };\n\n        StructBinder.StructType.prototype.installMethods = function (\n          methods,\n          applyArgcCheck = installMethod.installMethodArgcCheck,\n        ) {\n          return installMethods(this, methods, applyArgcCheck);\n        };\n      });\n\n      globalThis.sqlite3ApiBootstrap.initializers.push(function (sqlite3) {\n        sqlite3.version = {\n          libVersion: '3.49.1',\n          libVersionNumber: 3049001,\n          sourceId:\n            '2025-02-18 13:38:58 873d4e274b4988d260ba8354a9718324a1c26187a4ab4c1cc0227c03d0f10e70',\n          downloadVersion: 3490100,\n        };\n      });\n\n      globalThis.sqlite3ApiBootstrap.initializers.push(function (sqlite3) {\n        const toss = (...args) => {\n          throw new Error(args.join(' '));\n        };\n        const toss3 = (...args) => {\n          throw new sqlite3.SQLite3Error(...args);\n        };\n\n        const capi = sqlite3.capi,\n          wasm = sqlite3.wasm,\n          util = sqlite3.util;\n\n        const __ptrMap = new WeakMap();\n\n        const __stmtMap = new WeakMap();\n\n        const getOwnOption = (opts, p, dflt) => {\n          const d = Object.getOwnPropertyDescriptor(opts, p);\n          return d ? d.value : dflt;\n        };\n\n        const checkSqlite3Rc = function (dbPtr, sqliteResultCode) {\n          if (sqliteResultCode) {\n            if (dbPtr instanceof DB) dbPtr = dbPtr.pointer;\n            toss3(\n              sqliteResultCode,\n              'sqlite3 result code',\n              sqliteResultCode + ':',\n              dbPtr\n                ? capi.sqlite3_errmsg(dbPtr)\n                : capi.sqlite3_errstr(sqliteResultCode),\n            );\n          }\n          return arguments[0];\n        };\n\n        const __dbTraceToConsole = wasm.installFunction(\n          'i(ippp)',\n          function (t, c, p, x) {\n            if (capi.SQLITE_TRACE_STMT === t) {\n              console.log(\n                'SQL TRACE #' + ++this.counter + ' via sqlite3@' + c + ':',\n                wasm.cstrToJs(x),\n              );\n            }\n          }.bind({ counter: 0 }),\n        );\n\n        const __vfsPostOpenCallback = Object.create(null);\n\n        const dbCtorHelper = function ctor(...args) {\n          if (!ctor._name2vfs) {\n            ctor._name2vfs = Object.create(null);\n            const isWorkerThread =\n              'function' === typeof importScripts\n                ? (n) =>\n                    toss3(\n                      'The VFS for',\n                      n,\n                      'is only available in the main window thread.',\n                    )\n                : false;\n            ctor._name2vfs[':localStorage:'] = {\n              vfs: 'kvvfs',\n              filename: isWorkerThread || (() => 'local'),\n            };\n            ctor._name2vfs[':sessionStorage:'] = {\n              vfs: 'kvvfs',\n              filename: isWorkerThread || (() => 'session'),\n            };\n          }\n          const opt = ctor.normalizeArgs(...args);\n          let fn = opt.filename,\n            vfsName = opt.vfs,\n            flagsStr = opt.flags;\n          if (\n            ('string' !== typeof fn && 'number' !== typeof fn) ||\n            'string' !== typeof flagsStr ||\n            (vfsName &&\n              'string' !== typeof vfsName &&\n              'number' !== typeof vfsName)\n          ) {\n            sqlite3.config.error('Invalid DB ctor args', opt, arguments);\n            toss3('Invalid arguments for DB constructor.');\n          }\n          let fnJs = 'number' === typeof fn ? wasm.cstrToJs(fn) : fn;\n          const vfsCheck = ctor._name2vfs[fnJs];\n          if (vfsCheck) {\n            vfsName = vfsCheck.vfs;\n            fn = fnJs = vfsCheck.filename(fnJs);\n          }\n          let pDb,\n            oflags = 0;\n          if (flagsStr.indexOf('c') >= 0) {\n            oflags |= capi.SQLITE_OPEN_CREATE | capi.SQLITE_OPEN_READWRITE;\n          }\n          if (flagsStr.indexOf('w') >= 0) oflags |= capi.SQLITE_OPEN_READWRITE;\n          if (0 === oflags) oflags |= capi.SQLITE_OPEN_READONLY;\n          oflags |= capi.SQLITE_OPEN_EXRESCODE;\n          const stack = wasm.pstack.pointer;\n          try {\n            const pPtr = wasm.pstack.allocPtr();\n            let rc = capi.sqlite3_open_v2(fn, pPtr, oflags, vfsName || 0);\n            pDb = wasm.peekPtr(pPtr);\n            checkSqlite3Rc(pDb, rc);\n            capi.sqlite3_extended_result_codes(pDb, 1);\n            if (flagsStr.indexOf('t') >= 0) {\n              capi.sqlite3_trace_v2(\n                pDb,\n                capi.SQLITE_TRACE_STMT,\n                __dbTraceToConsole,\n                pDb,\n              );\n            }\n          } catch (e) {\n            if (pDb) capi.sqlite3_close_v2(pDb);\n            throw e;\n          } finally {\n            wasm.pstack.restore(stack);\n          }\n          this.filename = fnJs;\n          __ptrMap.set(this, pDb);\n          __stmtMap.set(this, Object.create(null));\n          try {\n            const pVfs =\n              capi.sqlite3_js_db_vfs(pDb) ||\n              toss3('Internal error: cannot get VFS for new db handle.');\n            const postInitSql = __vfsPostOpenCallback[pVfs];\n            if (postInitSql) {\n              if (postInitSql instanceof Function) {\n                postInitSql(this, sqlite3);\n              } else {\n                checkSqlite3Rc(\n                  pDb,\n                  capi.sqlite3_exec(pDb, postInitSql, 0, 0, 0),\n                );\n              }\n            }\n          } catch (e) {\n            this.close();\n            throw e;\n          }\n        };\n\n        dbCtorHelper.setVfsPostOpenCallback = function (pVfs, callback) {\n          if (!(callback instanceof Function)) {\n            toss3(\n              'dbCtorHelper.setVfsPostOpenCallback() should not be used with ' +\n                'a non-function argument.',\n              arguments,\n            );\n          }\n          __vfsPostOpenCallback[pVfs] = callback;\n        };\n\n        dbCtorHelper.normalizeArgs = function (\n          filename = ':memory:',\n          flags = 'c',\n          vfs = null,\n        ) {\n          const arg = {};\n          if (\n            1 === arguments.length &&\n            arguments[0] &&\n            'object' === typeof arguments[0]\n          ) {\n            Object.assign(arg, arguments[0]);\n            if (undefined === arg.flags) arg.flags = 'c';\n            if (undefined === arg.vfs) arg.vfs = null;\n            if (undefined === arg.filename) arg.filename = ':memory:';\n          } else {\n            arg.filename = filename;\n            arg.flags = flags;\n            arg.vfs = vfs;\n          }\n          return arg;\n        };\n\n        const DB = function (...args) {\n          dbCtorHelper.apply(this, args);\n        };\n        DB.dbCtorHelper = dbCtorHelper;\n\n        const BindTypes = {\n          null: 1,\n          number: 2,\n          string: 3,\n          boolean: 4,\n          blob: 5,\n        };\n        BindTypes['undefined'] == BindTypes.null;\n        if (wasm.bigIntEnabled) {\n          BindTypes.bigint = BindTypes.number;\n        }\n\n        const Stmt = function () {\n          if (BindTypes !== arguments[2]) {\n            toss3(\n              capi.SQLITE_MISUSE,\n              'Do not call the Stmt constructor directly. Use DB.prepare().',\n            );\n          }\n          this.db = arguments[0];\n          __ptrMap.set(this, arguments[1]);\n          this.parameterCount = capi.sqlite3_bind_parameter_count(this.pointer);\n        };\n\n        const affirmDbOpen = function (db) {\n          if (!db.pointer) toss3('DB has been closed.');\n          return db;\n        };\n\n        const affirmColIndex = function (stmt, ndx) {\n          if (ndx !== (ndx | 0) || ndx < 0 || ndx >= stmt.columnCount) {\n            toss3('Column index', ndx, 'is out of range.');\n          }\n          return stmt;\n        };\n\n        const parseExecArgs = function (db, args) {\n          const out = Object.create(null);\n          out.opt = Object.create(null);\n          switch (args.length) {\n            case 1:\n              if (\n                'string' === typeof args[0] ||\n                util.isSQLableTypedArray(args[0])\n              ) {\n                out.sql = args[0];\n              } else if (Array.isArray(args[0])) {\n                out.sql = args[0];\n              } else if (args[0] && 'object' === typeof args[0]) {\n                out.opt = args[0];\n                out.sql = out.opt.sql;\n              }\n              break;\n            case 2:\n              out.sql = args[0];\n              out.opt = args[1];\n              break;\n            default:\n              toss3('Invalid argument count for exec().');\n          }\n          out.sql = util.flexibleString(out.sql);\n          if ('string' !== typeof out.sql) {\n            toss3('Missing SQL argument or unsupported SQL value type.');\n          }\n          const opt = out.opt;\n          switch (opt.returnValue) {\n            case 'resultRows':\n              if (!opt.resultRows) opt.resultRows = [];\n              out.returnVal = () => opt.resultRows;\n              break;\n            case 'saveSql':\n              if (!opt.saveSql) opt.saveSql = [];\n              out.returnVal = () => opt.saveSql;\n              break;\n            case undefined:\n            case 'this':\n              out.returnVal = () => db;\n              break;\n            default:\n              toss3('Invalid returnValue value:', opt.returnValue);\n          }\n          if (!opt.callback && !opt.returnValue && undefined !== opt.rowMode) {\n            if (!opt.resultRows) opt.resultRows = [];\n            out.returnVal = () => opt.resultRows;\n          }\n          if (opt.callback || opt.resultRows) {\n            switch (undefined === opt.rowMode ? 'array' : opt.rowMode) {\n              case 'object':\n                out.cbArg = (stmt, cache) => {\n                  if (!cache.columnNames)\n                    cache.columnNames = stmt.getColumnNames([]);\n\n                  const row = stmt.get([]);\n                  const rv = Object.create(null);\n                  for (const i in cache.columnNames)\n                    rv[cache.columnNames[i]] = row[i];\n                  return rv;\n                };\n                break;\n              case 'array':\n                out.cbArg = (stmt) => stmt.get([]);\n                break;\n              case 'stmt':\n                if (Array.isArray(opt.resultRows)) {\n                  toss3(\n                    'exec(): invalid rowMode for a resultRows array: must',\n                    \"be one of 'array', 'object',\",\n                    'a result column number, or column name reference.',\n                  );\n                }\n                out.cbArg = (stmt) => stmt;\n                break;\n              default:\n                if (util.isInt32(opt.rowMode)) {\n                  out.cbArg = (stmt) => stmt.get(opt.rowMode);\n                  break;\n                } else if (\n                  'string' === typeof opt.rowMode &&\n                  opt.rowMode.length > 1 &&\n                  '$' === opt.rowMode[0]\n                ) {\n                  const $colName = opt.rowMode.substr(1);\n                  out.cbArg = (stmt) => {\n                    const rc = stmt.get(Object.create(null))[$colName];\n                    return undefined === rc\n                      ? toss3(\n                          capi.SQLITE_NOTFOUND,\n                          'exec(): unknown result column:',\n                          $colName,\n                        )\n                      : rc;\n                  };\n                  break;\n                }\n                toss3('Invalid rowMode:', opt.rowMode);\n            }\n          }\n          return out;\n        };\n\n        const __selectFirstRow = (db, sql, bind, ...getArgs) => {\n          const stmt = db.prepare(sql);\n          try {\n            const rc = stmt.bind(bind).step()\n              ? stmt.get(...getArgs)\n              : undefined;\n            stmt.reset();\n            return rc;\n          } finally {\n            stmt.finalize();\n          }\n        };\n\n        const __selectAll = (db, sql, bind, rowMode) =>\n          db.exec({\n            sql,\n            bind,\n            rowMode,\n            returnValue: 'resultRows',\n          });\n\n        DB.checkRc = (db, resultCode) => checkSqlite3Rc(db, resultCode);\n\n        DB.prototype = {\n          isOpen: function () {\n            return !!this.pointer;\n          },\n\n          affirmOpen: function () {\n            return affirmDbOpen(this);\n          },\n\n          close: function () {\n            if (this.pointer) {\n              if (this.onclose && this.onclose.before instanceof Function) {\n                try {\n                  this.onclose.before(this);\n                } catch (e) {}\n              }\n              const pDb = this.pointer;\n              Object.keys(__stmtMap.get(this)).forEach((k, s) => {\n                if (s && s.pointer) {\n                  try {\n                    s.finalize();\n                  } catch (e) {}\n                }\n              });\n              __ptrMap.delete(this);\n              __stmtMap.delete(this);\n              capi.sqlite3_close_v2(pDb);\n              if (this.onclose && this.onclose.after instanceof Function) {\n                try {\n                  this.onclose.after(this);\n                } catch (e) {}\n              }\n              delete this.filename;\n            }\n          },\n\n          changes: function (total = false, sixtyFour = false) {\n            const p = affirmDbOpen(this).pointer;\n            if (total) {\n              return sixtyFour\n                ? capi.sqlite3_total_changes64(p)\n                : capi.sqlite3_total_changes(p);\n            } else {\n              return sixtyFour\n                ? capi.sqlite3_changes64(p)\n                : capi.sqlite3_changes(p);\n            }\n          },\n\n          dbFilename: function (dbName = 'main') {\n            return capi.sqlite3_db_filename(affirmDbOpen(this).pointer, dbName);\n          },\n\n          dbName: function (dbNumber = 0) {\n            return capi.sqlite3_db_name(affirmDbOpen(this).pointer, dbNumber);\n          },\n\n          dbVfsName: function (dbName = 0) {\n            let rc;\n            const pVfs = capi.sqlite3_js_db_vfs(\n              affirmDbOpen(this).pointer,\n              dbName,\n            );\n            if (pVfs) {\n              const v = new capi.sqlite3_vfs(pVfs);\n              try {\n                rc = wasm.cstrToJs(v.$zName);\n              } finally {\n                v.dispose();\n              }\n            }\n            return rc;\n          },\n\n          prepare: function (sql) {\n            affirmDbOpen(this);\n            const stack = wasm.pstack.pointer;\n            let ppStmt, pStmt;\n            try {\n              ppStmt = wasm.pstack.alloc(8);\n              DB.checkRc(\n                this,\n                capi.sqlite3_prepare_v2(this.pointer, sql, -1, ppStmt, null),\n              );\n              pStmt = wasm.peekPtr(ppStmt);\n            } finally {\n              wasm.pstack.restore(stack);\n            }\n            if (!pStmt) toss3('Cannot prepare empty SQL.');\n            const stmt = new Stmt(this, pStmt, BindTypes);\n            __stmtMap.get(this)[pStmt] = stmt;\n            return stmt;\n          },\n\n          exec: function () {\n            affirmDbOpen(this);\n            const arg = parseExecArgs(this, arguments);\n            if (!arg.sql) {\n              return toss3('exec() requires an SQL string.');\n            }\n            const opt = arg.opt;\n            const callback = opt.callback;\n            const resultRows = Array.isArray(opt.resultRows)\n              ? opt.resultRows\n              : undefined;\n            let stmt;\n            let bind = opt.bind;\n            let evalFirstResult = !!(\n              arg.cbArg ||\n              opt.columnNames ||\n              resultRows\n            );\n            const stack = wasm.scopedAllocPush();\n            const saveSql = Array.isArray(opt.saveSql)\n              ? opt.saveSql\n              : undefined;\n            try {\n              const isTA = util.isSQLableTypedArray(arg.sql);\n              let sqlByteLen = isTA\n                ? arg.sql.byteLength\n                : wasm.jstrlen(arg.sql);\n              const ppStmt = wasm.scopedAlloc(\n                2 * wasm.ptrSizeof + (sqlByteLen + 1),\n              );\n              const pzTail = ppStmt + wasm.ptrSizeof;\n              let pSql = pzTail + wasm.ptrSizeof;\n              const pSqlEnd = pSql + sqlByteLen;\n              if (isTA) wasm.heap8().set(arg.sql, pSql);\n              else wasm.jstrcpy(arg.sql, wasm.heap8(), pSql, sqlByteLen, false);\n              wasm.poke(pSql + sqlByteLen, 0);\n              while (pSql && wasm.peek(pSql, 'i8')) {\n                wasm.pokePtr([ppStmt, pzTail], 0);\n                DB.checkRc(\n                  this,\n                  capi.sqlite3_prepare_v3(\n                    this.pointer,\n                    pSql,\n                    sqlByteLen,\n                    0,\n                    ppStmt,\n                    pzTail,\n                  ),\n                );\n                const pStmt = wasm.peekPtr(ppStmt);\n                pSql = wasm.peekPtr(pzTail);\n                sqlByteLen = pSqlEnd - pSql;\n                if (!pStmt) continue;\n                if (saveSql) saveSql.push(capi.sqlite3_sql(pStmt).trim());\n                stmt = new Stmt(this, pStmt, BindTypes);\n                if (bind && stmt.parameterCount) {\n                  stmt.bind(bind);\n                  bind = null;\n                }\n                if (evalFirstResult && stmt.columnCount) {\n                  let gotColNames = Array.isArray(opt.columnNames) ? 0 : 1;\n                  evalFirstResult = false;\n                  if (arg.cbArg || resultRows) {\n                    const cbArgCache = Object.create(null);\n                    for (; stmt.step(); stmt._lockedByExec = false) {\n                      if (0 === gotColNames++) {\n                        stmt.getColumnNames(\n                          (cbArgCache.columnNames = opt.columnNames || []),\n                        );\n                      }\n                      stmt._lockedByExec = true;\n                      const row = arg.cbArg(stmt, cbArgCache);\n                      if (resultRows) resultRows.push(row);\n                      if (callback && false === callback.call(opt, row, stmt)) {\n                        break;\n                      }\n                    }\n                    stmt._lockedByExec = false;\n                  }\n                  if (0 === gotColNames) {\n                    stmt.getColumnNames(opt.columnNames);\n                  }\n                } else {\n                  stmt.step();\n                }\n                stmt.reset().finalize();\n                stmt = null;\n              }\n            } finally {\n              wasm.scopedAllocPop(stack);\n              if (stmt) {\n                delete stmt._lockedByExec;\n                stmt.finalize();\n              }\n            }\n            return arg.returnVal();\n          },\n\n          createFunction: function f(name, xFunc, opt) {\n            const isFunc = (f) => f instanceof Function;\n            switch (arguments.length) {\n              case 1:\n                opt = name;\n                name = opt.name;\n                xFunc = opt.xFunc || 0;\n                break;\n              case 2:\n                if (!isFunc(xFunc)) {\n                  opt = xFunc;\n                  xFunc = opt.xFunc || 0;\n                }\n                break;\n              case 3:\n                break;\n              default:\n                break;\n            }\n            if (!opt) opt = {};\n            if ('string' !== typeof name) {\n              toss3('Invalid arguments: missing function name.');\n            }\n            let xStep = opt.xStep || 0;\n            let xFinal = opt.xFinal || 0;\n            const xValue = opt.xValue || 0;\n            const xInverse = opt.xInverse || 0;\n            let isWindow = undefined;\n            if (isFunc(xFunc)) {\n              isWindow = false;\n              if (isFunc(xStep) || isFunc(xFinal)) {\n                toss3('Ambiguous arguments: scalar or aggregate?');\n              }\n              xStep = xFinal = null;\n            } else if (isFunc(xStep)) {\n              if (!isFunc(xFinal)) {\n                toss3('Missing xFinal() callback for aggregate or window UDF.');\n              }\n              xFunc = null;\n            } else if (isFunc(xFinal)) {\n              toss3('Missing xStep() callback for aggregate or window UDF.');\n            } else {\n              toss3('Missing function-type properties.');\n            }\n            if (false === isWindow) {\n              if (isFunc(xValue) || isFunc(xInverse)) {\n                toss3(\n                  'xValue and xInverse are not permitted for non-window UDFs.',\n                );\n              }\n            } else if (isFunc(xValue)) {\n              if (!isFunc(xInverse)) {\n                toss3('xInverse must be provided if xValue is.');\n              }\n              isWindow = true;\n            } else if (isFunc(xInverse)) {\n              toss3('xValue must be provided if xInverse is.');\n            }\n            const pApp = opt.pApp;\n            if (\n              undefined !== pApp &&\n              null !== pApp &&\n              ('number' !== typeof pApp || !util.isInt32(pApp))\n            ) {\n              toss3(\n                'Invalid value for pApp property. Must be a legal WASM pointer value.',\n              );\n            }\n            const xDestroy = opt.xDestroy || 0;\n            if (xDestroy && !isFunc(xDestroy)) {\n              toss3('xDestroy property must be a function.');\n            }\n            let fFlags = 0;\n            if (getOwnOption(opt, 'deterministic'))\n              fFlags |= capi.SQLITE_DETERMINISTIC;\n            if (getOwnOption(opt, 'directOnly'))\n              fFlags |= capi.SQLITE_DIRECTONLY;\n            if (getOwnOption(opt, 'innocuous')) fFlags |= capi.SQLITE_INNOCUOUS;\n            name = name.toLowerCase();\n            const xArity = xFunc || xStep;\n            const arity = getOwnOption(opt, 'arity');\n            const arityArg =\n              'number' === typeof arity\n                ? arity\n                : xArity.length\n                  ? xArity.length - 1\n                  : 0;\n            let rc;\n            if (isWindow) {\n              rc = capi.sqlite3_create_window_function(\n                this.pointer,\n                name,\n                arityArg,\n                capi.SQLITE_UTF8 | fFlags,\n                pApp || 0,\n                xStep,\n                xFinal,\n                xValue,\n                xInverse,\n                xDestroy,\n              );\n            } else {\n              rc = capi.sqlite3_create_function_v2(\n                this.pointer,\n                name,\n                arityArg,\n                capi.SQLITE_UTF8 | fFlags,\n                pApp || 0,\n                xFunc,\n                xStep,\n                xFinal,\n                xDestroy,\n              );\n            }\n            DB.checkRc(this, rc);\n            return this;\n          },\n\n          selectValue: function (sql, bind, asType) {\n            return __selectFirstRow(this, sql, bind, 0, asType);\n          },\n\n          selectValues: function (sql, bind, asType) {\n            const stmt = this.prepare(sql),\n              rc = [];\n            try {\n              stmt.bind(bind);\n              while (stmt.step()) rc.push(stmt.get(0, asType));\n              stmt.reset();\n            } finally {\n              stmt.finalize();\n            }\n            return rc;\n          },\n\n          selectArray: function (sql, bind) {\n            return __selectFirstRow(this, sql, bind, []);\n          },\n\n          selectObject: function (sql, bind) {\n            return __selectFirstRow(this, sql, bind, {});\n          },\n\n          selectArrays: function (sql, bind) {\n            return __selectAll(this, sql, bind, 'array');\n          },\n\n          selectObjects: function (sql, bind) {\n            return __selectAll(this, sql, bind, 'object');\n          },\n\n          openStatementCount: function () {\n            return this.pointer ? Object.keys(__stmtMap.get(this)).length : 0;\n          },\n\n          transaction: function (callback) {\n            let opener = 'BEGIN';\n            if (arguments.length > 1) {\n              if (/[^a-zA-Z]/.test(arguments[0])) {\n                toss3(\n                  capi.SQLITE_MISUSE,\n                  'Invalid argument for BEGIN qualifier.',\n                );\n              }\n              opener += ' ' + arguments[0];\n              callback = arguments[1];\n            }\n            affirmDbOpen(this).exec(opener);\n            try {\n              const rc = callback(this);\n              this.exec('COMMIT');\n              return rc;\n            } catch (e) {\n              this.exec('ROLLBACK');\n              throw e;\n            }\n          },\n\n          savepoint: function (callback) {\n            affirmDbOpen(this).exec('SAVEPOINT oo1');\n            try {\n              const rc = callback(this);\n              this.exec('RELEASE oo1');\n              return rc;\n            } catch (e) {\n              this.exec('ROLLBACK to SAVEPOINT oo1; RELEASE SAVEPOINT oo1');\n              throw e;\n            }\n          },\n\n          checkRc: function (resultCode) {\n            return checkSqlite3Rc(this, resultCode);\n          },\n        };\n\n        const affirmStmtOpen = function (stmt) {\n          if (!stmt.pointer) toss3('Stmt has been closed.');\n          return stmt;\n        };\n\n        const isSupportedBindType = function (v) {\n          let t = BindTypes[null === v || undefined === v ? 'null' : typeof v];\n          switch (t) {\n            case BindTypes.boolean:\n            case BindTypes.null:\n            case BindTypes.number:\n            case BindTypes.string:\n              return t;\n            case BindTypes.bigint:\n              if (wasm.bigIntEnabled) return t;\n\n            default:\n              return util.isBindableTypedArray(v) ? BindTypes.blob : undefined;\n          }\n        };\n\n        const affirmSupportedBindType = function (v) {\n          return (\n            isSupportedBindType(v) ||\n            toss3('Unsupported bind() argument type:', typeof v)\n          );\n        };\n\n        const affirmParamIndex = function (stmt, key) {\n          const n =\n            'number' === typeof key\n              ? key\n              : capi.sqlite3_bind_parameter_index(stmt.pointer, key);\n          if (0 === n || !util.isInt32(n)) {\n            toss3('Invalid bind() parameter name: ' + key);\n          } else if (n < 1 || n > stmt.parameterCount)\n            toss3('Bind index', key, 'is out of range.');\n          return n;\n        };\n\n        const affirmNotLockedByExec = function (stmt, currentOpName) {\n          if (stmt._lockedByExec) {\n            toss3(\n              'Operation is illegal when statement is locked:',\n              currentOpName,\n            );\n          }\n          return stmt;\n        };\n\n        const bindOne = function f(stmt, ndx, bindType, val) {\n          affirmNotLockedByExec(affirmStmtOpen(stmt), 'bind()');\n          if (!f._) {\n            f._tooBigInt = (v) =>\n              toss3(\n                'BigInt value is too big to store without precision loss:',\n                v,\n              );\n            f._ = {\n              string: function (stmt, ndx, val, asBlob) {\n                const [pStr, n] = wasm.allocCString(val, true);\n                const f = asBlob\n                  ? capi.sqlite3_bind_blob\n                  : capi.sqlite3_bind_text;\n                return f(stmt.pointer, ndx, pStr, n, capi.SQLITE_WASM_DEALLOC);\n              },\n            };\n          }\n          affirmSupportedBindType(val);\n          ndx = affirmParamIndex(stmt, ndx);\n          let rc = 0;\n          switch (\n            null === val || undefined === val ? BindTypes.null : bindType\n          ) {\n            case BindTypes.null:\n              rc = capi.sqlite3_bind_null(stmt.pointer, ndx);\n              break;\n            case BindTypes.string:\n              rc = f._.string(stmt, ndx, val, false);\n              break;\n            case BindTypes.number: {\n              let m;\n              if (util.isInt32(val)) m = capi.sqlite3_bind_int;\n              else if ('bigint' === typeof val) {\n                if (!util.bigIntFits64(val)) {\n                  f._tooBigInt(val);\n                } else if (wasm.bigIntEnabled) {\n                  m = capi.sqlite3_bind_int64;\n                } else if (util.bigIntFitsDouble(val)) {\n                  val = Number(val);\n                  m = capi.sqlite3_bind_double;\n                } else {\n                  f._tooBigInt(val);\n                }\n              } else {\n                val = Number(val);\n                if (wasm.bigIntEnabled && Number.isInteger(val)) {\n                  m = capi.sqlite3_bind_int64;\n                } else {\n                  m = capi.sqlite3_bind_double;\n                }\n              }\n              rc = m(stmt.pointer, ndx, val);\n              break;\n            }\n            case BindTypes.boolean:\n              rc = capi.sqlite3_bind_int(stmt.pointer, ndx, val ? 1 : 0);\n              break;\n            case BindTypes.blob: {\n              if ('string' === typeof val) {\n                rc = f._.string(stmt, ndx, val, true);\n                break;\n              } else if (val instanceof ArrayBuffer) {\n                val = new Uint8Array(val);\n              } else if (!util.isBindableTypedArray(val)) {\n                toss3(\n                  'Binding a value as a blob requires',\n                  'that it be a string, Uint8Array, Int8Array, or ArrayBuffer.',\n                );\n              }\n              const pBlob = wasm.alloc(val.byteLength || 1);\n              wasm.heap8().set(val.byteLength ? val : [0], pBlob);\n              rc = capi.sqlite3_bind_blob(\n                stmt.pointer,\n                ndx,\n                pBlob,\n                val.byteLength,\n                capi.SQLITE_WASM_DEALLOC,\n              );\n              break;\n            }\n            default:\n              sqlite3.config.warn('Unsupported bind() argument type:', val);\n              toss3('Unsupported bind() argument type: ' + typeof val);\n          }\n          if (rc) DB.checkRc(stmt.db.pointer, rc);\n          stmt._mayGet = false;\n          return stmt;\n        };\n\n        Stmt.prototype = {\n          finalize: function () {\n            if (this.pointer) {\n              affirmNotLockedByExec(this, 'finalize()');\n              const rc = capi.sqlite3_finalize(this.pointer);\n              delete __stmtMap.get(this.db)[this.pointer];\n              __ptrMap.delete(this);\n              delete this._mayGet;\n              delete this.parameterCount;\n              delete this._lockedByExec;\n              delete this.db;\n              return rc;\n            }\n          },\n\n          clearBindings: function () {\n            affirmNotLockedByExec(affirmStmtOpen(this), 'clearBindings()');\n            capi.sqlite3_clear_bindings(this.pointer);\n            this._mayGet = false;\n            return this;\n          },\n\n          reset: function (alsoClearBinds) {\n            affirmNotLockedByExec(this, 'reset()');\n            if (alsoClearBinds) this.clearBindings();\n            const rc = capi.sqlite3_reset(affirmStmtOpen(this).pointer);\n            this._mayGet = false;\n            checkSqlite3Rc(this.db, rc);\n            return this;\n          },\n\n          bind: function () {\n            affirmStmtOpen(this);\n            let ndx, arg;\n            switch (arguments.length) {\n              case 1:\n                ndx = 1;\n                arg = arguments[0];\n                break;\n              case 2:\n                ndx = arguments[0];\n                arg = arguments[1];\n                break;\n              default:\n                toss3('Invalid bind() arguments.');\n            }\n            if (undefined === arg) {\n              return this;\n            } else if (!this.parameterCount) {\n              toss3('This statement has no bindable parameters.');\n            }\n            this._mayGet = false;\n            if (null === arg) {\n              return bindOne(this, ndx, BindTypes.null, arg);\n            } else if (Array.isArray(arg)) {\n              if (1 !== arguments.length) {\n                toss3(\n                  'When binding an array, an index argument is not permitted.',\n                );\n              }\n              arg.forEach((v, i) =>\n                bindOne(this, i + 1, affirmSupportedBindType(v), v),\n              );\n              return this;\n            } else if (arg instanceof ArrayBuffer) {\n              arg = new Uint8Array(arg);\n            }\n            if ('object' === typeof arg && !util.isBindableTypedArray(arg)) {\n              if (1 !== arguments.length) {\n                toss3(\n                  'When binding an object, an index argument is not permitted.',\n                );\n              }\n              Object.keys(arg).forEach((k) =>\n                bindOne(this, k, affirmSupportedBindType(arg[k]), arg[k]),\n              );\n              return this;\n            } else {\n              return bindOne(this, ndx, affirmSupportedBindType(arg), arg);\n            }\n            toss3('Should not reach this point.');\n          },\n\n          bindAsBlob: function (ndx, arg) {\n            affirmStmtOpen(this);\n            if (1 === arguments.length) {\n              arg = ndx;\n              ndx = 1;\n            }\n            const t = affirmSupportedBindType(arg);\n            if (\n              BindTypes.string !== t &&\n              BindTypes.blob !== t &&\n              BindTypes.null !== t\n            ) {\n              toss3('Invalid value type for bindAsBlob()');\n            }\n            return bindOne(this, ndx, BindTypes.blob, arg);\n          },\n\n          step: function () {\n            affirmNotLockedByExec(this, 'step()');\n            const rc = capi.sqlite3_step(affirmStmtOpen(this).pointer);\n            switch (rc) {\n              case capi.SQLITE_DONE:\n                return (this._mayGet = false);\n              case capi.SQLITE_ROW:\n                return (this._mayGet = true);\n              default:\n                this._mayGet = false;\n                sqlite3.config.warn(\n                  'sqlite3_step() rc=',\n                  rc,\n                  capi.sqlite3_js_rc_str(rc),\n                  'SQL =',\n                  capi.sqlite3_sql(this.pointer),\n                );\n                DB.checkRc(this.db.pointer, rc);\n            }\n          },\n\n          stepReset: function () {\n            this.step();\n            return this.reset();\n          },\n\n          stepFinalize: function () {\n            try {\n              const rc = this.step();\n              this.reset();\n              return rc;\n            } finally {\n              try {\n                this.finalize();\n              } catch (e) {}\n            }\n          },\n\n          get: function (ndx, asType) {\n            if (!affirmStmtOpen(this)._mayGet) {\n              toss3('Stmt.step() has not (recently) returned true.');\n            }\n            if (Array.isArray(ndx)) {\n              let i = 0;\n              const n = this.columnCount;\n              while (i < n) {\n                ndx[i] = this.get(i++);\n              }\n              return ndx;\n            } else if (ndx && 'object' === typeof ndx) {\n              let i = 0;\n              const n = this.columnCount;\n              while (i < n) {\n                ndx[capi.sqlite3_column_name(this.pointer, i)] = this.get(i++);\n              }\n              return ndx;\n            }\n            affirmColIndex(this, ndx);\n            switch (\n              undefined === asType\n                ? capi.sqlite3_column_type(this.pointer, ndx)\n                : asType\n            ) {\n              case capi.SQLITE_NULL:\n                return null;\n              case capi.SQLITE_INTEGER: {\n                if (wasm.bigIntEnabled) {\n                  const rc = capi.sqlite3_column_int64(this.pointer, ndx);\n                  if (\n                    rc >= Number.MIN_SAFE_INTEGER &&\n                    rc <= Number.MAX_SAFE_INTEGER\n                  ) {\n                    return Number(rc).valueOf();\n                  }\n                  return rc;\n                } else {\n                  const rc = capi.sqlite3_column_double(this.pointer, ndx);\n                  if (\n                    rc > Number.MAX_SAFE_INTEGER ||\n                    rc < Number.MIN_SAFE_INTEGER\n                  ) {\n                    toss3(\n                      'Integer is out of range for JS integer range: ' + rc,\n                    );\n                  }\n\n                  return util.isInt32(rc) ? rc | 0 : rc;\n                }\n              }\n              case capi.SQLITE_FLOAT:\n                return capi.sqlite3_column_double(this.pointer, ndx);\n              case capi.SQLITE_TEXT:\n                return capi.sqlite3_column_text(this.pointer, ndx);\n              case capi.SQLITE_BLOB: {\n                const n = capi.sqlite3_column_bytes(this.pointer, ndx),\n                  ptr = capi.sqlite3_column_blob(this.pointer, ndx),\n                  rc = new Uint8Array(n);\n\n                if (n) rc.set(wasm.heap8u().slice(ptr, ptr + n), 0);\n\n                if (n && this.db._blobXfer instanceof Array) {\n                  this.db._blobXfer.push(rc.buffer);\n                }\n                return rc;\n              }\n              default:\n                toss3(\n                  \"Don't know how to translate\",\n                  'type of result column #' + ndx + '.',\n                );\n            }\n            toss3('Not reached.');\n          },\n\n          getInt: function (ndx) {\n            return this.get(ndx, capi.SQLITE_INTEGER);\n          },\n\n          getFloat: function (ndx) {\n            return this.get(ndx, capi.SQLITE_FLOAT);\n          },\n\n          getString: function (ndx) {\n            return this.get(ndx, capi.SQLITE_TEXT);\n          },\n\n          getBlob: function (ndx) {\n            return this.get(ndx, capi.SQLITE_BLOB);\n          },\n\n          getJSON: function (ndx) {\n            const s = this.get(ndx, capi.SQLITE_STRING);\n            return null === s ? s : JSON.parse(s);\n          },\n\n          getColumnName: function (ndx) {\n            return capi.sqlite3_column_name(\n              affirmColIndex(affirmStmtOpen(this), ndx).pointer,\n              ndx,\n            );\n          },\n\n          getColumnNames: function (tgt = []) {\n            affirmColIndex(affirmStmtOpen(this), 0);\n            const n = this.columnCount;\n            for (let i = 0; i < n; ++i) {\n              tgt.push(capi.sqlite3_column_name(this.pointer, i));\n            }\n            return tgt;\n          },\n\n          getParamIndex: function (name) {\n            return affirmStmtOpen(this).parameterCount\n              ? capi.sqlite3_bind_parameter_index(this.pointer, name)\n              : undefined;\n          },\n\n          getParamName: function (ndx) {\n            return affirmStmtOpen(this).parameterCount\n              ? capi.sqlite3_bind_parameter_name(this.pointer, ndx)\n              : undefined;\n          },\n\n          isBusy: function () {\n            return 0 !== capi.sqlite3_stmt_busy(affirmStmtOpen(this));\n          },\n\n          isReadOnly: function () {\n            return 0 !== capi.sqlite3_stmt_readonly(affirmStmtOpen(this));\n          },\n        };\n\n        {\n          const prop = {\n            enumerable: true,\n            get: function () {\n              return __ptrMap.get(this);\n            },\n            set: () => toss3('The pointer property is read-only.'),\n          };\n          Object.defineProperty(Stmt.prototype, 'pointer', prop);\n          Object.defineProperty(DB.prototype, 'pointer', prop);\n        }\n\n        Object.defineProperty(Stmt.prototype, 'columnCount', {\n          enumerable: false,\n          get: function () {\n            return capi.sqlite3_column_count(this.pointer);\n          },\n          set: () => toss3('The columnCount property is read-only.'),\n        });\n\n        sqlite3.oo1 = {\n          DB,\n          Stmt,\n        };\n\n        if (util.isUIThread()) {\n          sqlite3.oo1.JsStorageDb = function (storageName = 'session') {\n            const opt = dbCtorHelper.normalizeArgs(...arguments);\n            storageName = opt.filename;\n            if ('session' !== storageName && 'local' !== storageName) {\n              toss3(\"JsStorageDb db name must be one of 'session' or 'local'.\");\n            }\n            opt.vfs = 'kvvfs';\n            dbCtorHelper.call(this, opt);\n          };\n          const jdb = sqlite3.oo1.JsStorageDb;\n          jdb.prototype = Object.create(DB.prototype);\n\n          jdb.clearStorage = capi.sqlite3_js_kvvfs_clear;\n\n          jdb.prototype.clearStorage = function () {\n            return jdb.clearStorage(affirmDbOpen(this).filename);\n          };\n\n          jdb.storageSize = capi.sqlite3_js_kvvfs_size;\n\n          jdb.prototype.storageSize = function () {\n            return jdb.storageSize(affirmDbOpen(this).filename);\n          };\n        }\n      });\n\n      globalThis.sqlite3ApiBootstrap.initializers.push(function (sqlite3) {\n        const util = sqlite3.util;\n        sqlite3.initWorker1API = function () {\n          'use strict';\n          const toss = (...args) => {\n            throw new Error(args.join(' '));\n          };\n          if (!(globalThis.WorkerGlobalScope instanceof Function)) {\n            toss('initWorker1API() must be run from a Worker thread.');\n          }\n          const sqlite3 = this.sqlite3 || toss('Missing this.sqlite3 object.');\n          const DB = sqlite3.oo1.DB;\n\n          const getDbId = function (db) {\n            let id = wState.idMap.get(db);\n            if (id) return id;\n            id = 'db#' + ++wState.idSeq + '@' + db.pointer;\n\n            wState.idMap.set(db, id);\n            return id;\n          };\n\n          const wState = {\n            dbList: [],\n\n            idSeq: 0,\n\n            idMap: new WeakMap(),\n\n            xfer: [],\n            open: function (opt) {\n              const db = new DB(opt);\n              this.dbs[getDbId(db)] = db;\n              if (this.dbList.indexOf(db) < 0) this.dbList.push(db);\n              return db;\n            },\n            close: function (db, alsoUnlink) {\n              if (db) {\n                delete this.dbs[getDbId(db)];\n                const filename = db.filename;\n                const pVfs = util.sqlite3__wasm_db_vfs(db.pointer, 0);\n                db.close();\n                const ddNdx = this.dbList.indexOf(db);\n                if (ddNdx >= 0) this.dbList.splice(ddNdx, 1);\n                if (alsoUnlink && filename && pVfs) {\n                  util.sqlite3__wasm_vfs_unlink(pVfs, filename);\n                }\n              }\n            },\n\n            post: function (msg, xferList) {\n              if (xferList && xferList.length) {\n                globalThis.postMessage(msg, Array.from(xferList));\n                xferList.length = 0;\n              } else {\n                globalThis.postMessage(msg);\n              }\n            },\n\n            dbs: Object.create(null),\n\n            getDb: function (id, require = true) {\n              return (\n                this.dbs[id] ||\n                (require ? toss('Unknown (or closed) DB ID:', id) : undefined)\n              );\n            },\n          };\n\n          const affirmDbOpen = function (db = wState.dbList[0]) {\n            return db && db.pointer ? db : toss('DB is not opened.');\n          };\n\n          const getMsgDb = function (msgData, affirmExists = true) {\n            const db = wState.getDb(msgData.dbId, false) || wState.dbList[0];\n            return affirmExists ? affirmDbOpen(db) : db;\n          };\n\n          const getDefaultDbId = function () {\n            return wState.dbList[0] && getDbId(wState.dbList[0]);\n          };\n\n          const isSpecialDbFilename = (n) => {\n            return '' === n || ':' === n[0];\n          };\n\n          const wMsgHandler = {\n            open: function (ev) {\n              const oargs = Object.create(null),\n                args = ev.args || Object.create(null);\n              if (args.simulateError) {\n                toss('Throwing because of simulateError flag.');\n              }\n              const rc = Object.create(null);\n              oargs.vfs = args.vfs;\n              oargs.filename = args.filename || '';\n              const db = wState.open(oargs);\n              rc.filename = db.filename;\n              rc.persistent = !!sqlite3.capi.sqlite3_js_db_uses_vfs(\n                db.pointer,\n                'opfs',\n              );\n              rc.dbId = getDbId(db);\n              rc.vfs = db.dbVfsName();\n              return rc;\n            },\n\n            close: function (ev) {\n              const db = getMsgDb(ev, false);\n              const response = {\n                filename: db && db.filename,\n              };\n              if (db) {\n                const doUnlink =\n                  ev.args && 'object' === typeof ev.args\n                    ? !!ev.args.unlink\n                    : false;\n                wState.close(db, doUnlink);\n              }\n              return response;\n            },\n\n            exec: function (ev) {\n              const rc =\n                'string' === typeof ev.args\n                  ? { sql: ev.args }\n                  : ev.args || Object.create(null);\n              if ('stmt' === rc.rowMode) {\n                toss(\n                  \"Invalid rowMode for 'exec': stmt mode\",\n                  'does not work in the Worker API.',\n                );\n              } else if (!rc.sql) {\n                toss(\"'exec' requires input SQL.\");\n              }\n              const db = getMsgDb(ev);\n              if (rc.callback || Array.isArray(rc.resultRows)) {\n                db._blobXfer = wState.xfer;\n              }\n              const theCallback = rc.callback;\n              let rowNumber = 0;\n              const hadColNames = !!rc.columnNames;\n              if ('string' === typeof theCallback) {\n                if (!hadColNames) rc.columnNames = [];\n\n                rc.callback = function (row, stmt) {\n                  wState.post(\n                    {\n                      type: theCallback,\n                      columnNames: rc.columnNames,\n                      rowNumber: ++rowNumber,\n                      row: row,\n                    },\n                    wState.xfer,\n                  );\n                };\n              }\n              try {\n                const changeCount = !!rc.countChanges\n                  ? db.changes(true, 64 === rc.countChanges)\n                  : undefined;\n                db.exec(rc);\n                if (undefined !== changeCount) {\n                  rc.changeCount =\n                    db.changes(true, 64 === rc.countChanges) - changeCount;\n                }\n                if (rc.callback instanceof Function) {\n                  rc.callback = theCallback;\n\n                  wState.post({\n                    type: theCallback,\n                    columnNames: rc.columnNames,\n                    rowNumber: null,\n                    row: undefined,\n                  });\n                }\n              } finally {\n                delete db._blobXfer;\n                if (rc.callback) rc.callback = theCallback;\n              }\n              return rc;\n            },\n\n            'config-get': function () {\n              const rc = Object.create(null),\n                src = sqlite3.config;\n              ['bigIntEnabled'].forEach(function (k) {\n                if (Object.getOwnPropertyDescriptor(src, k)) rc[k] = src[k];\n              });\n              rc.version = sqlite3.version;\n              rc.vfsList = sqlite3.capi.sqlite3_js_vfs_list();\n              return rc;\n            },\n\n            export: function (ev) {\n              const db = getMsgDb(ev);\n              const response = {\n                byteArray: sqlite3.capi.sqlite3_js_db_export(db.pointer),\n                filename: db.filename,\n                mimetype: 'application/x-sqlite3',\n              };\n              wState.xfer.push(response.byteArray.buffer);\n              return response;\n            },\n\n            toss: function (ev) {\n              toss('Testing worker exception');\n            },\n          };\n\n          globalThis.onmessage = async function (ev) {\n            ev = ev.data;\n            let result,\n              dbId = ev.dbId,\n              evType = ev.type;\n            const arrivalTime = performance.now();\n            try {\n              if (\n                wMsgHandler.hasOwnProperty(evType) &&\n                wMsgHandler[evType] instanceof Function\n              ) {\n                result = await wMsgHandler[evType](ev);\n              } else {\n                toss('Unknown db worker message type:', ev.type);\n              }\n            } catch (err) {\n              evType = 'error';\n              result = {\n                operation: ev.type,\n                message: err.message,\n                errorClass: err.name,\n                input: ev,\n              };\n              if (err.stack) {\n                result.stack =\n                  'string' === typeof err.stack\n                    ? err.stack.split(/\\n\\s*/)\n                    : err.stack;\n              }\n              if (0)\n                sqlite3.config.warn(\n                  'Worker is propagating an exception to main thread.',\n                  'Reporting it _here_ for the stack trace:',\n                  err,\n                  result,\n                );\n            }\n            if (!dbId) {\n              dbId = result.dbId || getDefaultDbId();\n            }\n\n            wState.post(\n              {\n                type: evType,\n                dbId: dbId,\n                messageId: ev.messageId,\n                workerReceivedTime: arrivalTime,\n                workerRespondTime: performance.now(),\n                departureTime: ev.departureTime,\n\n                result: result,\n              },\n              wState.xfer,\n            );\n          };\n          globalThis.postMessage({\n            type: 'sqlite3-api',\n            result: 'worker1-ready',\n          });\n        }.bind({ sqlite3 });\n      });\n\n      ('use strict');\n      globalThis.sqlite3ApiBootstrap.initializers.push(function (sqlite3) {\n        const wasm = sqlite3.wasm,\n          capi = sqlite3.capi,\n          toss = sqlite3.util.toss3;\n        const vfs = Object.create(null);\n        sqlite3.vfs = vfs;\n\n        capi.sqlite3_vfs.prototype.registerVfs = function (asDefault = false) {\n          if (!(this instanceof sqlite3.capi.sqlite3_vfs)) {\n            toss('Expecting a sqlite3_vfs-type argument.');\n          }\n          const rc = capi.sqlite3_vfs_register(this, asDefault ? 1 : 0);\n          if (rc) {\n            toss('sqlite3_vfs_register(', this, ') failed with rc', rc);\n          }\n          if (this.pointer !== capi.sqlite3_vfs_find(this.$zName)) {\n            toss(\n              'BUG: sqlite3_vfs_find(vfs.$zName) failed for just-installed VFS',\n              this,\n            );\n          }\n          return this;\n        };\n\n        vfs.installVfs = function (opt) {\n          let count = 0;\n          const propList = ['io', 'vfs'];\n          for (const key of propList) {\n            const o = opt[key];\n            if (o) {\n              ++count;\n              o.struct.installMethods(o.methods, !!o.applyArgcCheck);\n              if ('vfs' === key) {\n                if (!o.struct.$zName && 'string' === typeof o.name) {\n                  o.struct.addOnDispose(\n                    (o.struct.$zName = wasm.allocCString(o.name)),\n                  );\n                }\n                o.struct.registerVfs(!!o.asDefault);\n              }\n            }\n          }\n          if (!count)\n            toss(\n              'Misuse: installVfs() options object requires at least',\n              'one of:',\n              propList,\n            );\n          return this;\n        };\n      });\n\n      ('use strict');\n      globalThis.sqlite3ApiBootstrap.initializers.push(function (sqlite3) {\n        if (!sqlite3.wasm.exports.sqlite3_declare_vtab) {\n          return;\n        }\n        const wasm = sqlite3.wasm,\n          capi = sqlite3.capi,\n          toss = sqlite3.util.toss3;\n        const vtab = Object.create(null);\n        sqlite3.vtab = vtab;\n\n        const sii = capi.sqlite3_index_info;\n\n        sii.prototype.nthConstraint = function (n, asPtr = false) {\n          if (n < 0 || n >= this.$nConstraint) return false;\n          const ptr =\n            this.$aConstraint +\n            sii.sqlite3_index_constraint.structInfo.sizeof * n;\n          return asPtr ? ptr : new sii.sqlite3_index_constraint(ptr);\n        };\n\n        sii.prototype.nthConstraintUsage = function (n, asPtr = false) {\n          if (n < 0 || n >= this.$nConstraint) return false;\n          const ptr =\n            this.$aConstraintUsage +\n            sii.sqlite3_index_constraint_usage.structInfo.sizeof * n;\n          return asPtr ? ptr : new sii.sqlite3_index_constraint_usage(ptr);\n        };\n\n        sii.prototype.nthOrderBy = function (n, asPtr = false) {\n          if (n < 0 || n >= this.$nOrderBy) return false;\n          const ptr =\n            this.$aOrderBy + sii.sqlite3_index_orderby.structInfo.sizeof * n;\n          return asPtr ? ptr : new sii.sqlite3_index_orderby(ptr);\n        };\n\n        const __xWrapFactory = function (methodName, StructType) {\n          return function (ptr, removeMapping = false) {\n            if (0 === arguments.length) ptr = new StructType();\n            if (ptr instanceof StructType) {\n              this.set(ptr.pointer, ptr);\n              return ptr;\n            } else if (!wasm.isPtr(ptr)) {\n              sqlite3.SQLite3Error.toss(\n                'Invalid argument to',\n                methodName + '()',\n              );\n            }\n            let rc = this.get(ptr);\n            if (removeMapping) this.delete(ptr);\n            return rc;\n          }.bind(new Map());\n        };\n\n        const StructPtrMapper = function (name, StructType) {\n          const __xWrap = __xWrapFactory(name, StructType);\n\n          return Object.assign(Object.create(null), {\n            StructType,\n\n            create: (ppOut) => {\n              const rc = __xWrap();\n              wasm.pokePtr(ppOut, rc.pointer);\n              return rc;\n            },\n\n            get: (pCObj) => __xWrap(pCObj),\n\n            unget: (pCObj) => __xWrap(pCObj, true),\n\n            dispose: (pCObj) => {\n              const o = __xWrap(pCObj, true);\n              if (o) o.dispose();\n            },\n          });\n        };\n\n        vtab.xVtab = StructPtrMapper('xVtab', capi.sqlite3_vtab);\n\n        vtab.xCursor = StructPtrMapper('xCursor', capi.sqlite3_vtab_cursor);\n\n        vtab.xIndexInfo = (pIdxInfo) => new capi.sqlite3_index_info(pIdxInfo);\n\n        vtab.xError = function f(methodName, err, defaultRc) {\n          if (f.errorReporter instanceof Function) {\n            try {\n              f.errorReporter(\n                'sqlite3_module::' + methodName + '(): ' + err.message,\n              );\n            } catch (e) {}\n          }\n          let rc;\n          if (err instanceof sqlite3.WasmAllocError) rc = capi.SQLITE_NOMEM;\n          else if (arguments.length > 2) rc = defaultRc;\n          else if (err instanceof sqlite3.SQLite3Error) rc = err.resultCode;\n          return rc || capi.SQLITE_ERROR;\n        };\n        vtab.xError.errorReporter = 1 ? console.error.bind(console) : false;\n\n        vtab.xRowid = (ppRowid64, value) => wasm.poke(ppRowid64, value, 'i64');\n\n        vtab.setupModule = function (opt) {\n          let createdMod = false;\n          const mod =\n            this instanceof capi.sqlite3_module\n              ? this\n              : opt.struct || (createdMod = new capi.sqlite3_module());\n          try {\n            const methods = opt.methods || toss(\"Missing 'methods' object.\");\n            for (const e of Object.entries({\n              xConnect: 'xCreate',\n              xDisconnect: 'xDestroy',\n            })) {\n              const k = e[0],\n                v = e[1];\n              if (true === methods[k]) methods[k] = methods[v];\n              else if (true === methods[v]) methods[v] = methods[k];\n            }\n            if (opt.catchExceptions) {\n              const fwrap = function (methodName, func) {\n                if (['xConnect', 'xCreate'].indexOf(methodName) >= 0) {\n                  return function (pDb, pAux, argc, argv, ppVtab, pzErr) {\n                    try {\n                      return func(...arguments) || 0;\n                    } catch (e) {\n                      if (!(e instanceof sqlite3.WasmAllocError)) {\n                        wasm.dealloc(wasm.peekPtr(pzErr));\n                        wasm.pokePtr(pzErr, wasm.allocCString(e.message));\n                      }\n                      return vtab.xError(methodName, e);\n                    }\n                  };\n                } else {\n                  return function (...args) {\n                    try {\n                      return func(...args) || 0;\n                    } catch (e) {\n                      return vtab.xError(methodName, e);\n                    }\n                  };\n                }\n              };\n              const mnames = [\n                'xCreate',\n                'xConnect',\n                'xBestIndex',\n                'xDisconnect',\n                'xDestroy',\n                'xOpen',\n                'xClose',\n                'xFilter',\n                'xNext',\n                'xEof',\n                'xColumn',\n                'xRowid',\n                'xUpdate',\n                'xBegin',\n                'xSync',\n                'xCommit',\n                'xRollback',\n                'xFindFunction',\n                'xRename',\n                'xSavepoint',\n                'xRelease',\n                'xRollbackTo',\n                'xShadowName',\n              ];\n              const remethods = Object.create(null);\n              for (const k of mnames) {\n                const m = methods[k];\n                if (!(m instanceof Function)) continue;\n                else if ('xConnect' === k && methods.xCreate === m) {\n                  remethods[k] = methods.xCreate;\n                } else if ('xCreate' === k && methods.xConnect === m) {\n                  remethods[k] = methods.xConnect;\n                } else {\n                  remethods[k] = fwrap(k, m);\n                }\n              }\n              mod.installMethods(remethods, false);\n            } else {\n              mod.installMethods(methods, !!opt.applyArgcCheck);\n            }\n            if (0 === mod.$iVersion) {\n              let v;\n              if ('number' === typeof opt.iVersion) v = opt.iVersion;\n              else if (mod.$xShadowName) v = 3;\n              else if (mod.$xSavePoint || mod.$xRelease || mod.$xRollbackTo)\n                v = 2;\n              else v = 1;\n              mod.$iVersion = v;\n            }\n          } catch (e) {\n            if (createdMod) createdMod.dispose();\n            throw e;\n          }\n          return mod;\n        };\n\n        capi.sqlite3_module.prototype.setupModule = function (opt) {\n          return vtab.setupModule.call(this, opt);\n        };\n      });\n\n      ('use strict');\n      globalThis.sqlite3ApiBootstrap.initializers.push(function (sqlite3) {\n        const installOpfsVfs = function callee(options) {\n          if (!globalThis.SharedArrayBuffer || !globalThis.Atomics) {\n            return Promise.reject(\n              new Error(\n                'Cannot install OPFS: Missing SharedArrayBuffer and/or Atomics. ' +\n                  'The server must emit the COOP/COEP response headers to enable those. ' +\n                  'See https://sqlite.org/wasm/doc/trunk/persistence.md#coop-coep',\n              ),\n            );\n          } else if ('undefined' === typeof WorkerGlobalScope) {\n            return Promise.reject(\n              new Error(\n                'The OPFS sqlite3_vfs cannot run in the main thread ' +\n                  'because it requires Atomics.wait().',\n              ),\n            );\n          } else if (\n            !globalThis.FileSystemHandle ||\n            !globalThis.FileSystemDirectoryHandle ||\n            !globalThis.FileSystemFileHandle ||\n            !globalThis.FileSystemFileHandle.prototype.createSyncAccessHandle ||\n            !navigator?.storage?.getDirectory\n          ) {\n            return Promise.reject(new Error('Missing required OPFS APIs.'));\n          }\n          if (!options || 'object' !== typeof options) {\n            options = Object.create(null);\n          }\n          const urlParams = new URL(globalThis.location.href).searchParams;\n          if (urlParams.has('opfs-disable')) {\n            return Promise.resolve(sqlite3);\n          }\n          if (undefined === options.verbose) {\n            options.verbose = urlParams.has('opfs-verbose')\n              ? +urlParams.get('opfs-verbose') || 2\n              : 1;\n          }\n          if (undefined === options.sanityChecks) {\n            options.sanityChecks = urlParams.has('opfs-sanity-check');\n          }\n          if (undefined === options.proxyUri) {\n            options.proxyUri = callee.defaultProxyUri;\n          }\n\n          if ('function' === typeof options.proxyUri) {\n            options.proxyUri = options.proxyUri();\n          }\n          const thePromise = new Promise(function (\n            promiseResolve_,\n            promiseReject_,\n          ) {\n            const loggers = [\n              sqlite3.config.error,\n              sqlite3.config.warn,\n              sqlite3.config.log,\n            ];\n            const logImpl = (level, ...args) => {\n              if (options.verbose > level)\n                loggers[level]('OPFS syncer:', ...args);\n            };\n            const log = (...args) => logImpl(2, ...args);\n            const warn = (...args) => logImpl(1, ...args);\n            const error = (...args) => logImpl(0, ...args);\n            const toss = sqlite3.util.toss;\n            const capi = sqlite3.capi;\n            const util = sqlite3.util;\n            const wasm = sqlite3.wasm;\n            const sqlite3_vfs = capi.sqlite3_vfs;\n            const sqlite3_file = capi.sqlite3_file;\n            const sqlite3_io_methods = capi.sqlite3_io_methods;\n\n            const opfsUtil = Object.create(null);\n\n            const thisThreadHasOPFS = () => {\n              return (\n                globalThis.FileSystemHandle &&\n                globalThis.FileSystemDirectoryHandle &&\n                globalThis.FileSystemFileHandle &&\n                globalThis.FileSystemFileHandle.prototype\n                  .createSyncAccessHandle &&\n                navigator?.storage?.getDirectory\n              );\n            };\n\n            opfsUtil.metrics = {\n              dump: function () {\n                let k,\n                  n = 0,\n                  t = 0,\n                  w = 0;\n                for (k in state.opIds) {\n                  const m = metrics[k];\n                  n += m.count;\n                  t += m.time;\n                  w += m.wait;\n                  m.avgTime = m.count && m.time ? m.time / m.count : 0;\n                  m.avgWait = m.count && m.wait ? m.wait / m.count : 0;\n                }\n                sqlite3.config.log(\n                  globalThis.location.href,\n                  'metrics for',\n                  globalThis.location.href,\n                  ':',\n                  metrics,\n                  '\\nTotal of',\n                  n,\n                  'op(s) for',\n                  t,\n                  'ms (incl. ' + w + ' ms of waiting on the async side)',\n                );\n                sqlite3.config.log('Serialization metrics:', metrics.s11n);\n                W.postMessage({ type: 'opfs-async-metrics' });\n              },\n              reset: function () {\n                let k;\n                const r = (m) => (m.count = m.time = m.wait = 0);\n                for (k in state.opIds) {\n                  r((metrics[k] = Object.create(null)));\n                }\n                let s = (metrics.s11n = Object.create(null));\n                s = s.serialize = Object.create(null);\n                s.count = s.time = 0;\n                s = metrics.s11n.deserialize = Object.create(null);\n                s.count = s.time = 0;\n              },\n            };\n            const opfsIoMethods = new sqlite3_io_methods();\n            const opfsVfs = new sqlite3_vfs().addOnDispose(() =>\n              opfsIoMethods.dispose(),\n            );\n            let promiseWasRejected = undefined;\n            const promiseReject = (err) => {\n              promiseWasRejected = true;\n              opfsVfs.dispose();\n              return promiseReject_(err);\n            };\n            const promiseResolve = () => {\n              promiseWasRejected = false;\n              return promiseResolve_(sqlite3);\n            };\n            const W = new Worker(\n              new URL('sqlite3-opfs-async-proxy.js', import.meta.url),\n            );\n            setTimeout(() => {\n              if (undefined === promiseWasRejected) {\n                promiseReject(\n                  new Error(\n                    'Timeout while waiting for OPFS async proxy worker.',\n                  ),\n                );\n              }\n            }, 4000);\n            W._originalOnError = W.onerror;\n            W.onerror = function (err) {\n              error('Error initializing OPFS asyncer:', err);\n              promiseReject(\n                new Error(\n                  'Loading OPFS async Worker failed for unknown reasons.',\n                ),\n              );\n            };\n            const pDVfs = capi.sqlite3_vfs_find(null);\n            const dVfs = pDVfs ? new sqlite3_vfs(pDVfs) : null;\n            opfsIoMethods.$iVersion = 1;\n            opfsVfs.$iVersion = 2;\n            opfsVfs.$szOsFile = capi.sqlite3_file.structInfo.sizeof;\n            opfsVfs.$mxPathname = 1024;\n            opfsVfs.$zName = wasm.allocCString('opfs');\n\n            opfsVfs.$xDlOpen =\n              opfsVfs.$xDlError =\n              opfsVfs.$xDlSym =\n              opfsVfs.$xDlClose =\n                null;\n            opfsVfs.addOnDispose(\n              '$zName',\n              opfsVfs.$zName,\n              'cleanup default VFS wrapper',\n              () => (dVfs ? dVfs.dispose() : null),\n            );\n\n            const state = Object.create(null);\n            state.verbose = options.verbose;\n            state.littleEndian = (() => {\n              const buffer = new ArrayBuffer(2);\n              new DataView(buffer).setInt16(0, 256, true);\n\n              return new Int16Array(buffer)[0] === 256;\n            })();\n\n            state.asyncIdleWaitTime = 150;\n\n            state.asyncS11nExceptions = 1;\n\n            state.fileBufferSize = 1024 * 64;\n            state.sabS11nOffset = state.fileBufferSize;\n\n            state.sabS11nSize = opfsVfs.$mxPathname * 2;\n\n            state.sabIO = new SharedArrayBuffer(\n              state.fileBufferSize + state.sabS11nSize,\n            );\n            state.opIds = Object.create(null);\n            const metrics = Object.create(null);\n            {\n              let i = 0;\n\n              state.opIds.whichOp = i++;\n\n              state.opIds.rc = i++;\n\n              state.opIds.xAccess = i++;\n              state.opIds.xClose = i++;\n              state.opIds.xDelete = i++;\n              state.opIds.xDeleteNoWait = i++;\n              state.opIds.xFileSize = i++;\n              state.opIds.xLock = i++;\n              state.opIds.xOpen = i++;\n              state.opIds.xRead = i++;\n              state.opIds.xSleep = i++;\n              state.opIds.xSync = i++;\n              state.opIds.xTruncate = i++;\n              state.opIds.xUnlock = i++;\n              state.opIds.xWrite = i++;\n              state.opIds.mkdir = i++;\n              state.opIds['opfs-async-metrics'] = i++;\n              state.opIds['opfs-async-shutdown'] = i++;\n\n              state.opIds.retry = i++;\n              state.sabOP = new SharedArrayBuffer(i * 4);\n              opfsUtil.metrics.reset();\n            }\n\n            state.sq3Codes = Object.create(null);\n            [\n              'SQLITE_ACCESS_EXISTS',\n              'SQLITE_ACCESS_READWRITE',\n              'SQLITE_BUSY',\n              'SQLITE_CANTOPEN',\n              'SQLITE_ERROR',\n              'SQLITE_IOERR',\n              'SQLITE_IOERR_ACCESS',\n              'SQLITE_IOERR_CLOSE',\n              'SQLITE_IOERR_DELETE',\n              'SQLITE_IOERR_FSYNC',\n              'SQLITE_IOERR_LOCK',\n              'SQLITE_IOERR_READ',\n              'SQLITE_IOERR_SHORT_READ',\n              'SQLITE_IOERR_TRUNCATE',\n              'SQLITE_IOERR_UNLOCK',\n              'SQLITE_IOERR_WRITE',\n              'SQLITE_LOCK_EXCLUSIVE',\n              'SQLITE_LOCK_NONE',\n              'SQLITE_LOCK_PENDING',\n              'SQLITE_LOCK_RESERVED',\n              'SQLITE_LOCK_SHARED',\n              'SQLITE_LOCKED',\n              'SQLITE_MISUSE',\n              'SQLITE_NOTFOUND',\n              'SQLITE_OPEN_CREATE',\n              'SQLITE_OPEN_DELETEONCLOSE',\n              'SQLITE_OPEN_MAIN_DB',\n              'SQLITE_OPEN_READONLY',\n            ].forEach((k) => {\n              if (undefined === (state.sq3Codes[k] = capi[k])) {\n                toss('Maintenance required: not found:', k);\n              }\n            });\n            state.opfsFlags = Object.assign(Object.create(null), {\n              OPFS_UNLOCK_ASAP: 0x01,\n\n              OPFS_UNLINK_BEFORE_OPEN: 0x02,\n\n              defaultUnlockAsap: false,\n            });\n\n            const opRun = (op, ...args) => {\n              const opNdx = state.opIds[op] || toss('Invalid op ID:', op);\n              state.s11n.serialize(...args);\n              Atomics.store(state.sabOPView, state.opIds.rc, -1);\n              Atomics.store(state.sabOPView, state.opIds.whichOp, opNdx);\n              Atomics.notify(state.sabOPView, state.opIds.whichOp);\n              const t = performance.now();\n              while (\n                'not-equal' !==\n                Atomics.wait(state.sabOPView, state.opIds.rc, -1)\n              ) {}\n\n              const rc = Atomics.load(state.sabOPView, state.opIds.rc);\n              metrics[op].wait += performance.now() - t;\n              if (rc && state.asyncS11nExceptions) {\n                const err = state.s11n.deserialize();\n                if (err) error(op + '() async error:', ...err);\n              }\n              return rc;\n            };\n\n            opfsUtil.debug = {\n              asyncShutdown: () => {\n                warn(\n                  'Shutting down OPFS async listener. The OPFS VFS will no longer work.',\n                );\n                opRun('opfs-async-shutdown');\n              },\n              asyncRestart: () => {\n                warn(\n                  'Attempting to restart OPFS VFS async listener. Might work, might not.',\n                );\n                W.postMessage({ type: 'opfs-async-restart' });\n              },\n            };\n\n            const initS11n = () => {\n              if (state.s11n) return state.s11n;\n              const textDecoder = new TextDecoder(),\n                textEncoder = new TextEncoder('utf-8'),\n                viewU8 = new Uint8Array(\n                  state.sabIO,\n                  state.sabS11nOffset,\n                  state.sabS11nSize,\n                ),\n                viewDV = new DataView(\n                  state.sabIO,\n                  state.sabS11nOffset,\n                  state.sabS11nSize,\n                );\n              state.s11n = Object.create(null);\n\n              const TypeIds = Object.create(null);\n              TypeIds.number = {\n                id: 1,\n                size: 8,\n                getter: 'getFloat64',\n                setter: 'setFloat64',\n              };\n              TypeIds.bigint = {\n                id: 2,\n                size: 8,\n                getter: 'getBigInt64',\n                setter: 'setBigInt64',\n              };\n              TypeIds.boolean = {\n                id: 3,\n                size: 4,\n                getter: 'getInt32',\n                setter: 'setInt32',\n              };\n              TypeIds.string = { id: 4 };\n\n              const getTypeId = (v) =>\n                TypeIds[typeof v] ||\n                toss(\n                  'Maintenance required: this value type cannot be serialized.',\n                  v,\n                );\n              const getTypeIdById = (tid) => {\n                switch (tid) {\n                  case TypeIds.number.id:\n                    return TypeIds.number;\n                  case TypeIds.bigint.id:\n                    return TypeIds.bigint;\n                  case TypeIds.boolean.id:\n                    return TypeIds.boolean;\n                  case TypeIds.string.id:\n                    return TypeIds.string;\n                  default:\n                    toss('Invalid type ID:', tid);\n                }\n              };\n\n              state.s11n.deserialize = function (clear = false) {\n                ++metrics.s11n.deserialize.count;\n                const t = performance.now();\n                const argc = viewU8[0];\n                const rc = argc ? [] : null;\n                if (argc) {\n                  const typeIds = [];\n                  let offset = 1,\n                    i,\n                    n,\n                    v;\n                  for (i = 0; i < argc; ++i, ++offset) {\n                    typeIds.push(getTypeIdById(viewU8[offset]));\n                  }\n                  for (i = 0; i < argc; ++i) {\n                    const t = typeIds[i];\n                    if (t.getter) {\n                      v = viewDV[t.getter](offset, state.littleEndian);\n                      offset += t.size;\n                    } else {\n                      n = viewDV.getInt32(offset, state.littleEndian);\n                      offset += 4;\n                      v = textDecoder.decode(viewU8.slice(offset, offset + n));\n                      offset += n;\n                    }\n                    rc.push(v);\n                  }\n                }\n                if (clear) viewU8[0] = 0;\n\n                metrics.s11n.deserialize.time += performance.now() - t;\n                return rc;\n              };\n\n              state.s11n.serialize = function (...args) {\n                const t = performance.now();\n                ++metrics.s11n.serialize.count;\n                if (args.length) {\n                  const typeIds = [];\n                  let i = 0,\n                    offset = 1;\n                  viewU8[0] = args.length & 0xff;\n                  for (; i < args.length; ++i, ++offset) {\n                    typeIds.push(getTypeId(args[i]));\n                    viewU8[offset] = typeIds[i].id;\n                  }\n                  for (i = 0; i < args.length; ++i) {\n                    const t = typeIds[i];\n                    if (t.setter) {\n                      viewDV[t.setter](offset, args[i], state.littleEndian);\n                      offset += t.size;\n                    } else {\n                      const s = textEncoder.encode(args[i]);\n                      viewDV.setInt32(offset, s.byteLength, state.littleEndian);\n                      offset += 4;\n                      viewU8.set(s, offset);\n                      offset += s.byteLength;\n                    }\n                  }\n                } else {\n                  viewU8[0] = 0;\n                }\n                metrics.s11n.serialize.time += performance.now() - t;\n              };\n              return state.s11n;\n            };\n\n            const randomFilename = function f(len = 16) {\n              if (!f._chars) {\n                f._chars =\n                  'abcdefghijklmnopqrstuvwxyz' +\n                  'ABCDEFGHIJKLMNOPQRSTUVWXYZ' +\n                  '012346789';\n                f._n = f._chars.length;\n              }\n              const a = [];\n              let i = 0;\n              for (; i < len; ++i) {\n                const ndx = (Math.random() * (f._n * 64)) % f._n | 0;\n                a[i] = f._chars[ndx];\n              }\n              return a.join('');\n            };\n\n            const __openFiles = Object.create(null);\n\n            const opTimer = Object.create(null);\n            opTimer.op = undefined;\n            opTimer.start = undefined;\n            const mTimeStart = (op) => {\n              opTimer.start = performance.now();\n              opTimer.op = op;\n              ++metrics[op].count;\n            };\n            const mTimeEnd = () =>\n              (metrics[opTimer.op].time += performance.now() - opTimer.start);\n\n            const ioSyncWrappers = {\n              xCheckReservedLock: function (pFile, pOut) {\n                wasm.poke(pOut, 0, 'i32');\n                return 0;\n              },\n              xClose: function (pFile) {\n                mTimeStart('xClose');\n                let rc = 0;\n                const f = __openFiles[pFile];\n                if (f) {\n                  delete __openFiles[pFile];\n                  rc = opRun('xClose', pFile);\n                  if (f.sq3File) f.sq3File.dispose();\n                }\n                mTimeEnd();\n                return rc;\n              },\n              xDeviceCharacteristics: function (pFile) {\n                return capi.SQLITE_IOCAP_UNDELETABLE_WHEN_OPEN;\n              },\n              xFileControl: function (pFile, opId, pArg) {\n                return capi.SQLITE_NOTFOUND;\n              },\n              xFileSize: function (pFile, pSz64) {\n                mTimeStart('xFileSize');\n                let rc = opRun('xFileSize', pFile);\n                if (0 == rc) {\n                  try {\n                    const sz = state.s11n.deserialize()[0];\n                    wasm.poke(pSz64, sz, 'i64');\n                  } catch (e) {\n                    error('Unexpected error reading xFileSize() result:', e);\n                    rc = state.sq3Codes.SQLITE_IOERR;\n                  }\n                }\n                mTimeEnd();\n                return rc;\n              },\n              xLock: function (pFile, lockType) {\n                mTimeStart('xLock');\n                const f = __openFiles[pFile];\n                let rc = 0;\n\n                if (!f.lockType) {\n                  rc = opRun('xLock', pFile, lockType);\n                  if (0 === rc) f.lockType = lockType;\n                } else {\n                  f.lockType = lockType;\n                }\n                mTimeEnd();\n                return rc;\n              },\n              xRead: function (pFile, pDest, n, offset64) {\n                mTimeStart('xRead');\n                const f = __openFiles[pFile];\n                let rc;\n                try {\n                  rc = opRun('xRead', pFile, n, Number(offset64));\n                  if (0 === rc || capi.SQLITE_IOERR_SHORT_READ === rc) {\n                    wasm.heap8u().set(f.sabView.subarray(0, n), pDest);\n                  }\n                } catch (e) {\n                  error('xRead(', arguments, ') failed:', e, f);\n                  rc = capi.SQLITE_IOERR_READ;\n                }\n                mTimeEnd();\n                return rc;\n              },\n              xSync: function (pFile, flags) {\n                mTimeStart('xSync');\n                ++metrics.xSync.count;\n                const rc = opRun('xSync', pFile, flags);\n                mTimeEnd();\n                return rc;\n              },\n              xTruncate: function (pFile, sz64) {\n                mTimeStart('xTruncate');\n                const rc = opRun('xTruncate', pFile, Number(sz64));\n                mTimeEnd();\n                return rc;\n              },\n              xUnlock: function (pFile, lockType) {\n                mTimeStart('xUnlock');\n                const f = __openFiles[pFile];\n                let rc = 0;\n                if (capi.SQLITE_LOCK_NONE === lockType && f.lockType) {\n                  rc = opRun('xUnlock', pFile, lockType);\n                }\n                if (0 === rc) f.lockType = lockType;\n                mTimeEnd();\n                return rc;\n              },\n              xWrite: function (pFile, pSrc, n, offset64) {\n                mTimeStart('xWrite');\n                const f = __openFiles[pFile];\n                let rc;\n                try {\n                  f.sabView.set(wasm.heap8u().subarray(pSrc, pSrc + n));\n                  rc = opRun('xWrite', pFile, n, Number(offset64));\n                } catch (e) {\n                  error('xWrite(', arguments, ') failed:', e, f);\n                  rc = capi.SQLITE_IOERR_WRITE;\n                }\n                mTimeEnd();\n                return rc;\n              },\n            };\n\n            const vfsSyncWrappers = {\n              xAccess: function (pVfs, zName, flags, pOut) {\n                mTimeStart('xAccess');\n                const rc = opRun('xAccess', wasm.cstrToJs(zName));\n                wasm.poke(pOut, rc ? 0 : 1, 'i32');\n                mTimeEnd();\n                return 0;\n              },\n              xCurrentTime: function (pVfs, pOut) {\n                wasm.poke(\n                  pOut,\n                  2440587.5 + new Date().getTime() / 86400000,\n                  'double',\n                );\n                return 0;\n              },\n              xCurrentTimeInt64: function (pVfs, pOut) {\n                wasm.poke(\n                  pOut,\n                  2440587.5 * 86400000 + new Date().getTime(),\n                  'i64',\n                );\n                return 0;\n              },\n              xDelete: function (pVfs, zName, doSyncDir) {\n                mTimeStart('xDelete');\n                const rc = opRun(\n                  'xDelete',\n                  wasm.cstrToJs(zName),\n                  doSyncDir,\n                  false,\n                );\n                mTimeEnd();\n                return rc;\n              },\n              xFullPathname: function (pVfs, zName, nOut, pOut) {\n                const i = wasm.cstrncpy(pOut, zName, nOut);\n                return i < nOut ? 0 : capi.SQLITE_CANTOPEN;\n              },\n              xGetLastError: function (pVfs, nOut, pOut) {\n                warn('OPFS xGetLastError() has nothing sensible to return.');\n                return 0;\n              },\n\n              xOpen: function f(pVfs, zName, pFile, flags, pOutFlags) {\n                mTimeStart('xOpen');\n                let opfsFlags = 0;\n                if (0 === zName) {\n                  zName = randomFilename();\n                } else if (wasm.isPtr(zName)) {\n                  if (capi.sqlite3_uri_boolean(zName, 'opfs-unlock-asap', 0)) {\n                    opfsFlags |= state.opfsFlags.OPFS_UNLOCK_ASAP;\n                  }\n                  if (\n                    capi.sqlite3_uri_boolean(zName, 'delete-before-open', 0)\n                  ) {\n                    opfsFlags |= state.opfsFlags.OPFS_UNLINK_BEFORE_OPEN;\n                  }\n                  zName = wasm.cstrToJs(zName);\n                }\n                const fh = Object.create(null);\n                fh.fid = pFile;\n                fh.filename = zName;\n                fh.sab = new SharedArrayBuffer(state.fileBufferSize);\n                fh.flags = flags;\n                fh.readOnly =\n                  !(sqlite3.SQLITE_OPEN_CREATE & flags) &&\n                  !!(flags & capi.SQLITE_OPEN_READONLY);\n                const rc = opRun('xOpen', pFile, zName, flags, opfsFlags);\n                if (!rc) {\n                  if (fh.readOnly) {\n                    wasm.poke(pOutFlags, capi.SQLITE_OPEN_READONLY, 'i32');\n                  }\n                  __openFiles[pFile] = fh;\n                  fh.sabView = state.sabFileBufView;\n                  fh.sq3File = new sqlite3_file(pFile);\n                  fh.sq3File.$pMethods = opfsIoMethods.pointer;\n                  fh.lockType = capi.SQLITE_LOCK_NONE;\n                }\n                mTimeEnd();\n                return rc;\n              },\n            };\n\n            if (dVfs) {\n              opfsVfs.$xRandomness = dVfs.$xRandomness;\n              opfsVfs.$xSleep = dVfs.$xSleep;\n            }\n            if (!opfsVfs.$xRandomness) {\n              vfsSyncWrappers.xRandomness = function (pVfs, nOut, pOut) {\n                const heap = wasm.heap8u();\n                let i = 0;\n                for (; i < nOut; ++i)\n                  heap[pOut + i] = (Math.random() * 255000) & 0xff;\n                return i;\n              };\n            }\n            if (!opfsVfs.$xSleep) {\n              vfsSyncWrappers.xSleep = function (pVfs, ms) {\n                Atomics.wait(state.sabOPView, state.opIds.xSleep, 0, ms);\n                return 0;\n              };\n            }\n\n            opfsUtil.getResolvedPath = function (filename, splitIt) {\n              const p = new URL(filename, 'file://irrelevant').pathname;\n              return splitIt ? p.split('/').filter((v) => !!v) : p;\n            };\n\n            opfsUtil.getDirForFilename = async function f(\n              absFilename,\n              createDirs = false,\n            ) {\n              const path = opfsUtil.getResolvedPath(absFilename, true);\n              const filename = path.pop();\n              let dh = opfsUtil.rootDirectory;\n              for (const dirName of path) {\n                if (dirName) {\n                  dh = await dh.getDirectoryHandle(dirName, {\n                    create: !!createDirs,\n                  });\n                }\n              }\n              return [dh, filename];\n            };\n\n            opfsUtil.mkdir = async function (absDirName) {\n              try {\n                await opfsUtil.getDirForFilename(\n                  absDirName + '/filepart',\n                  true,\n                );\n                return true;\n              } catch (e) {\n                return false;\n              }\n            };\n\n            opfsUtil.entryExists = async function (fsEntryName) {\n              try {\n                const [dh, fn] = await opfsUtil.getDirForFilename(fsEntryName);\n                await dh.getFileHandle(fn);\n                return true;\n              } catch (e) {\n                return false;\n              }\n            };\n\n            opfsUtil.randomFilename = randomFilename;\n\n            opfsUtil.treeList = async function () {\n              const doDir = async function callee(dirHandle, tgt) {\n                tgt.name = dirHandle.name;\n                tgt.dirs = [];\n                tgt.files = [];\n                for await (const handle of dirHandle.values()) {\n                  if ('directory' === handle.kind) {\n                    const subDir = Object.create(null);\n                    tgt.dirs.push(subDir);\n                    await callee(handle, subDir);\n                  } else {\n                    tgt.files.push(handle.name);\n                  }\n                }\n              };\n              const root = Object.create(null);\n              await doDir(opfsUtil.rootDirectory, root);\n              return root;\n            };\n\n            opfsUtil.rmfr = async function () {\n              const dir = opfsUtil.rootDirectory,\n                opt = { recurse: true };\n              for await (const handle of dir.values()) {\n                dir.removeEntry(handle.name, opt);\n              }\n            };\n\n            opfsUtil.unlink = async function (\n              fsEntryName,\n              recursive = false,\n              throwOnError = false,\n            ) {\n              try {\n                const [hDir, filenamePart] = await opfsUtil.getDirForFilename(\n                  fsEntryName,\n                  false,\n                );\n                await hDir.removeEntry(filenamePart, { recursive });\n                return true;\n              } catch (e) {\n                if (throwOnError) {\n                  throw new Error(\n                    'unlink(',\n                    arguments[0],\n                    ') failed: ' + e.message,\n                    {\n                      cause: e,\n                    },\n                  );\n                }\n                return false;\n              }\n            };\n\n            opfsUtil.traverse = async function (opt) {\n              const defaultOpt = {\n                recursive: true,\n                directory: opfsUtil.rootDirectory,\n              };\n              if ('function' === typeof opt) {\n                opt = { callback: opt };\n              }\n              opt = Object.assign(defaultOpt, opt || {});\n              const doDir = async function callee(dirHandle, depth) {\n                for await (const handle of dirHandle.values()) {\n                  if (false === opt.callback(handle, dirHandle, depth))\n                    return false;\n                  else if (opt.recursive && 'directory' === handle.kind) {\n                    if (false === (await callee(handle, depth + 1))) break;\n                  }\n                }\n              };\n              doDir(opt.directory, 0);\n            };\n\n            const importDbChunked = async function (filename, callback) {\n              const [hDir, fnamePart] = await opfsUtil.getDirForFilename(\n                filename,\n                true,\n              );\n              const hFile = await hDir.getFileHandle(fnamePart, {\n                create: true,\n              });\n              let sah = await hFile.createSyncAccessHandle();\n              let nWrote = 0,\n                chunk,\n                checkedHeader = false,\n                err = false;\n              try {\n                sah.truncate(0);\n                while (undefined !== (chunk = await callback())) {\n                  if (chunk instanceof ArrayBuffer)\n                    chunk = new Uint8Array(chunk);\n                  if (0 === nWrote && chunk.byteLength >= 15) {\n                    util.affirmDbHeader(chunk);\n                    checkedHeader = true;\n                  }\n                  sah.write(chunk, { at: nWrote });\n                  nWrote += chunk.byteLength;\n                }\n                if (nWrote < 512 || 0 !== nWrote % 512) {\n                  toss(\n                    'Input size',\n                    nWrote,\n                    'is not correct for an SQLite database.',\n                  );\n                }\n                if (!checkedHeader) {\n                  const header = new Uint8Array(20);\n                  sah.read(header, { at: 0 });\n                  util.affirmDbHeader(header);\n                }\n                sah.write(new Uint8Array([1, 1]), { at: 18 });\n                return nWrote;\n              } catch (e) {\n                await sah.close();\n                sah = undefined;\n                await hDir.removeEntry(fnamePart).catch(() => {});\n                throw e;\n              } finally {\n                if (sah) await sah.close();\n              }\n            };\n\n            opfsUtil.importDb = async function (filename, bytes) {\n              if (bytes instanceof Function) {\n                return importDbChunked(filename, bytes);\n              }\n              if (bytes instanceof ArrayBuffer) bytes = new Uint8Array(bytes);\n              util.affirmIsDb(bytes);\n              const n = bytes.byteLength;\n              const [hDir, fnamePart] = await opfsUtil.getDirForFilename(\n                filename,\n                true,\n              );\n              let sah,\n                err,\n                nWrote = 0;\n              try {\n                const hFile = await hDir.getFileHandle(fnamePart, {\n                  create: true,\n                });\n                sah = await hFile.createSyncAccessHandle();\n                sah.truncate(0);\n                nWrote = sah.write(bytes, { at: 0 });\n                if (nWrote != n) {\n                  toss(\n                    'Expected to write ' +\n                      n +\n                      ' bytes but wrote ' +\n                      nWrote +\n                      '.',\n                  );\n                }\n                sah.write(new Uint8Array([1, 1]), { at: 18 });\n                return nWrote;\n              } catch (e) {\n                if (sah) {\n                  await sah.close();\n                  sah = undefined;\n                }\n                await hDir.removeEntry(fnamePart).catch(() => {});\n                throw e;\n              } finally {\n                if (sah) await sah.close();\n              }\n            };\n\n            if (sqlite3.oo1) {\n              const OpfsDb = function (...args) {\n                const opt = sqlite3.oo1.DB.dbCtorHelper.normalizeArgs(...args);\n                opt.vfs = opfsVfs.$zName;\n                sqlite3.oo1.DB.dbCtorHelper.call(this, opt);\n              };\n              OpfsDb.prototype = Object.create(sqlite3.oo1.DB.prototype);\n              sqlite3.oo1.OpfsDb = OpfsDb;\n              OpfsDb.importDb = opfsUtil.importDb;\n              sqlite3.oo1.DB.dbCtorHelper.setVfsPostOpenCallback(\n                opfsVfs.pointer,\n                function (oo1Db, sqlite3) {\n                  sqlite3.capi.sqlite3_busy_timeout(oo1Db, 10000);\n                },\n              );\n            }\n\n            const sanityCheck = function () {\n              const scope = wasm.scopedAllocPush();\n              const sq3File = new sqlite3_file();\n              try {\n                const fid = sq3File.pointer;\n                const openFlags =\n                  capi.SQLITE_OPEN_CREATE |\n                  capi.SQLITE_OPEN_READWRITE |\n                  capi.SQLITE_OPEN_MAIN_DB;\n                const pOut = wasm.scopedAlloc(8);\n                const dbFile = '/sanity/check/file' + randomFilename(8);\n                const zDbFile = wasm.scopedAllocCString(dbFile);\n                let rc;\n                state.s11n.serialize('This is ä string.');\n                rc = state.s11n.deserialize();\n                log('deserialize() says:', rc);\n                if ('This is ä string.' !== rc[0]) toss('String d13n error.');\n                vfsSyncWrappers.xAccess(opfsVfs.pointer, zDbFile, 0, pOut);\n                rc = wasm.peek(pOut, 'i32');\n                log('xAccess(', dbFile, ') exists ?=', rc);\n                rc = vfsSyncWrappers.xOpen(\n                  opfsVfs.pointer,\n                  zDbFile,\n                  fid,\n                  openFlags,\n                  pOut,\n                );\n                log(\n                  'open rc =',\n                  rc,\n                  'state.sabOPView[xOpen] =',\n                  state.sabOPView[state.opIds.xOpen],\n                );\n                if (0 !== rc) {\n                  error('open failed with code', rc);\n                  return;\n                }\n                vfsSyncWrappers.xAccess(opfsVfs.pointer, zDbFile, 0, pOut);\n                rc = wasm.peek(pOut, 'i32');\n                if (!rc) toss('xAccess() failed to detect file.');\n                rc = ioSyncWrappers.xSync(sq3File.pointer, 0);\n                if (rc) toss('sync failed w/ rc', rc);\n                rc = ioSyncWrappers.xTruncate(sq3File.pointer, 1024);\n                if (rc) toss('truncate failed w/ rc', rc);\n                wasm.poke(pOut, 0, 'i64');\n                rc = ioSyncWrappers.xFileSize(sq3File.pointer, pOut);\n                if (rc) toss('xFileSize failed w/ rc', rc);\n                log('xFileSize says:', wasm.peek(pOut, 'i64'));\n                rc = ioSyncWrappers.xWrite(sq3File.pointer, zDbFile, 10, 1);\n                if (rc) toss('xWrite() failed!');\n                const readBuf = wasm.scopedAlloc(16);\n                rc = ioSyncWrappers.xRead(sq3File.pointer, readBuf, 6, 2);\n                wasm.poke(readBuf + 6, 0);\n                let jRead = wasm.cstrToJs(readBuf);\n                log('xRead() got:', jRead);\n                if ('sanity' !== jRead) toss('Unexpected xRead() value.');\n                if (vfsSyncWrappers.xSleep) {\n                  log('xSleep()ing before close()ing...');\n                  vfsSyncWrappers.xSleep(opfsVfs.pointer, 2000);\n                  log('waking up from xSleep()');\n                }\n                rc = ioSyncWrappers.xClose(fid);\n                log('xClose rc =', rc, 'sabOPView =', state.sabOPView);\n                log('Deleting file:', dbFile);\n                vfsSyncWrappers.xDelete(opfsVfs.pointer, zDbFile, 0x1234);\n                vfsSyncWrappers.xAccess(opfsVfs.pointer, zDbFile, 0, pOut);\n                rc = wasm.peek(pOut, 'i32');\n                if (rc)\n                  toss(\n                    'Expecting 0 from xAccess(',\n                    dbFile,\n                    ') after xDelete().',\n                  );\n                warn('End of OPFS sanity checks.');\n              } finally {\n                sq3File.dispose();\n                wasm.scopedAllocPop(scope);\n              }\n            };\n\n            W.onmessage = function ({ data }) {\n              switch (data.type) {\n                case 'opfs-unavailable':\n                  promiseReject(new Error(data.payload.join(' ')));\n                  break;\n                case 'opfs-async-loaded':\n                  W.postMessage({ type: 'opfs-async-init', args: state });\n                  break;\n                case 'opfs-async-inited': {\n                  if (true === promiseWasRejected) {\n                    break;\n                  }\n                  try {\n                    sqlite3.vfs.installVfs({\n                      io: { struct: opfsIoMethods, methods: ioSyncWrappers },\n                      vfs: { struct: opfsVfs, methods: vfsSyncWrappers },\n                    });\n                    state.sabOPView = new Int32Array(state.sabOP);\n                    state.sabFileBufView = new Uint8Array(\n                      state.sabIO,\n                      0,\n                      state.fileBufferSize,\n                    );\n                    state.sabS11nView = new Uint8Array(\n                      state.sabIO,\n                      state.sabS11nOffset,\n                      state.sabS11nSize,\n                    );\n                    initS11n();\n                    if (options.sanityChecks) {\n                      warn(\n                        'Running sanity checks because of opfs-sanity-check URL arg...',\n                      );\n                      sanityCheck();\n                    }\n                    if (thisThreadHasOPFS()) {\n                      navigator.storage\n                        .getDirectory()\n                        .then((d) => {\n                          W.onerror = W._originalOnError;\n                          delete W._originalOnError;\n                          sqlite3.opfs = opfsUtil;\n                          opfsUtil.rootDirectory = d;\n                          log('End of OPFS sqlite3_vfs setup.', opfsVfs);\n                          promiseResolve();\n                        })\n                        .catch(promiseReject);\n                    } else {\n                      promiseResolve();\n                    }\n                  } catch (e) {\n                    error(e);\n                    promiseReject(e);\n                  }\n                  break;\n                }\n                default: {\n                  const errMsg =\n                    'Unexpected message from the OPFS async worker: ' +\n                    JSON.stringify(data);\n                  error(errMsg);\n                  promiseReject(new Error(errMsg));\n                  break;\n                }\n              }\n            };\n          });\n          return thePromise;\n        };\n        installOpfsVfs.defaultProxyUri = 'sqlite3-opfs-async-proxy.js';\n        globalThis.sqlite3ApiBootstrap.initializersAsync.push(\n          async (sqlite3) => {\n            try {\n              let proxyJs = installOpfsVfs.defaultProxyUri;\n              if (sqlite3.scriptInfo.sqlite3Dir) {\n                installOpfsVfs.defaultProxyUri =\n                  sqlite3.scriptInfo.sqlite3Dir + proxyJs;\n              }\n              return installOpfsVfs().catch((e) => {\n                sqlite3.config.warn(\n                  'Ignoring inability to install OPFS sqlite3_vfs:',\n                  e.message,\n                );\n              });\n            } catch (e) {\n              sqlite3.config.error('installOpfsVfs() exception:', e);\n              return Promise.reject(e);\n            }\n          },\n        );\n      });\n\n      globalThis.sqlite3ApiBootstrap.initializers.push(function (sqlite3) {\n        'use strict';\n        const toss = sqlite3.util.toss;\n        const toss3 = sqlite3.util.toss3;\n        const initPromises = Object.create(null);\n        const capi = sqlite3.capi;\n        const util = sqlite3.util;\n        const wasm = sqlite3.wasm;\n\n        const SECTOR_SIZE = 4096;\n        const HEADER_MAX_PATH_SIZE = 512;\n        const HEADER_FLAGS_SIZE = 4;\n        const HEADER_DIGEST_SIZE = 8;\n        const HEADER_CORPUS_SIZE = HEADER_MAX_PATH_SIZE + HEADER_FLAGS_SIZE;\n        const HEADER_OFFSET_FLAGS = HEADER_MAX_PATH_SIZE;\n        const HEADER_OFFSET_DIGEST = HEADER_CORPUS_SIZE;\n        const HEADER_OFFSET_DATA = SECTOR_SIZE;\n\n        const PERSISTENT_FILE_TYPES =\n          capi.SQLITE_OPEN_MAIN_DB |\n          capi.SQLITE_OPEN_MAIN_JOURNAL |\n          capi.SQLITE_OPEN_SUPER_JOURNAL |\n          capi.SQLITE_OPEN_WAL;\n\n        const OPAQUE_DIR_NAME = '.opaque';\n\n        const getRandomName = () => Math.random().toString(36).slice(2);\n\n        const textDecoder = new TextDecoder();\n        const textEncoder = new TextEncoder();\n\n        const optionDefaults = Object.assign(Object.create(null), {\n          name: 'opfs-sahpool',\n          directory: undefined,\n          initialCapacity: 6,\n          clearOnInit: false,\n\n          verbosity: 2,\n          forceReinitIfPreviouslyFailed: false,\n        });\n\n        const loggers = [\n          sqlite3.config.error,\n          sqlite3.config.warn,\n          sqlite3.config.log,\n        ];\n        const log = sqlite3.config.log;\n        const warn = sqlite3.config.warn;\n        const error = sqlite3.config.error;\n\n        const __mapVfsToPool = new Map();\n        const getPoolForVfs = (pVfs) => __mapVfsToPool.get(pVfs);\n        const setPoolForVfs = (pVfs, pool) => {\n          if (pool) __mapVfsToPool.set(pVfs, pool);\n          else __mapVfsToPool.delete(pVfs);\n        };\n\n        const __mapSqlite3File = new Map();\n        const getPoolForPFile = (pFile) => __mapSqlite3File.get(pFile);\n        const setPoolForPFile = (pFile, pool) => {\n          if (pool) __mapSqlite3File.set(pFile, pool);\n          else __mapSqlite3File.delete(pFile);\n        };\n\n        const ioMethods = {\n          xCheckReservedLock: function (pFile, pOut) {\n            const pool = getPoolForPFile(pFile);\n            pool.log('xCheckReservedLock');\n            pool.storeErr();\n            wasm.poke32(pOut, 1);\n            return 0;\n          },\n          xClose: function (pFile) {\n            const pool = getPoolForPFile(pFile);\n            pool.storeErr();\n            const file = pool.getOFileForS3File(pFile);\n            if (file) {\n              try {\n                pool.log(`xClose ${file.path}`);\n                pool.mapS3FileToOFile(pFile, false);\n                file.sah.flush();\n                if (file.flags & capi.SQLITE_OPEN_DELETEONCLOSE) {\n                  pool.deletePath(file.path);\n                }\n              } catch (e) {\n                return pool.storeErr(e, capi.SQLITE_IOERR);\n              }\n            }\n            return 0;\n          },\n          xDeviceCharacteristics: function (pFile) {\n            return capi.SQLITE_IOCAP_UNDELETABLE_WHEN_OPEN;\n          },\n          xFileControl: function (pFile, opId, pArg) {\n            return capi.SQLITE_NOTFOUND;\n          },\n          xFileSize: function (pFile, pSz64) {\n            const pool = getPoolForPFile(pFile);\n            pool.log(`xFileSize`);\n            const file = pool.getOFileForS3File(pFile);\n            const size = file.sah.getSize() - HEADER_OFFSET_DATA;\n\n            wasm.poke64(pSz64, BigInt(size));\n            return 0;\n          },\n          xLock: function (pFile, lockType) {\n            const pool = getPoolForPFile(pFile);\n            pool.log(`xLock ${lockType}`);\n            pool.storeErr();\n            const file = pool.getOFileForS3File(pFile);\n            file.lockType = lockType;\n            return 0;\n          },\n          xRead: function (pFile, pDest, n, offset64) {\n            const pool = getPoolForPFile(pFile);\n            pool.storeErr();\n            const file = pool.getOFileForS3File(pFile);\n            pool.log(`xRead ${file.path} ${n} @ ${offset64}`);\n            try {\n              const nRead = file.sah.read(\n                wasm.heap8u().subarray(pDest, pDest + n),\n                { at: HEADER_OFFSET_DATA + Number(offset64) },\n              );\n              if (nRead < n) {\n                wasm.heap8u().fill(0, pDest + nRead, pDest + n);\n                return capi.SQLITE_IOERR_SHORT_READ;\n              }\n              return 0;\n            } catch (e) {\n              return pool.storeErr(e, capi.SQLITE_IOERR);\n            }\n          },\n          xSectorSize: function (pFile) {\n            return SECTOR_SIZE;\n          },\n          xSync: function (pFile, flags) {\n            const pool = getPoolForPFile(pFile);\n            pool.log(`xSync ${flags}`);\n            pool.storeErr();\n            const file = pool.getOFileForS3File(pFile);\n\n            try {\n              file.sah.flush();\n              return 0;\n            } catch (e) {\n              return pool.storeErr(e, capi.SQLITE_IOERR);\n            }\n          },\n          xTruncate: function (pFile, sz64) {\n            const pool = getPoolForPFile(pFile);\n            pool.log(`xTruncate ${sz64}`);\n            pool.storeErr();\n            const file = pool.getOFileForS3File(pFile);\n\n            try {\n              file.sah.truncate(HEADER_OFFSET_DATA + Number(sz64));\n              return 0;\n            } catch (e) {\n              return pool.storeErr(e, capi.SQLITE_IOERR);\n            }\n          },\n          xUnlock: function (pFile, lockType) {\n            const pool = getPoolForPFile(pFile);\n            pool.log('xUnlock');\n            const file = pool.getOFileForS3File(pFile);\n            file.lockType = lockType;\n            return 0;\n          },\n          xWrite: function (pFile, pSrc, n, offset64) {\n            const pool = getPoolForPFile(pFile);\n            pool.storeErr();\n            const file = pool.getOFileForS3File(pFile);\n            pool.log(`xWrite ${file.path} ${n} ${offset64}`);\n            try {\n              const nBytes = file.sah.write(\n                wasm.heap8u().subarray(pSrc, pSrc + n),\n                { at: HEADER_OFFSET_DATA + Number(offset64) },\n              );\n              return n === nBytes ? 0 : toss('Unknown write() failure.');\n            } catch (e) {\n              return pool.storeErr(e, capi.SQLITE_IOERR);\n            }\n          },\n        };\n\n        const opfsIoMethods = new capi.sqlite3_io_methods();\n        opfsIoMethods.$iVersion = 1;\n        sqlite3.vfs.installVfs({\n          io: { struct: opfsIoMethods, methods: ioMethods },\n        });\n\n        const vfsMethods = {\n          xAccess: function (pVfs, zName, flags, pOut) {\n            const pool = getPoolForVfs(pVfs);\n            pool.storeErr();\n            try {\n              const name = pool.getPath(zName);\n              wasm.poke32(pOut, pool.hasFilename(name) ? 1 : 0);\n            } catch (e) {\n              wasm.poke32(pOut, 0);\n            }\n            return 0;\n          },\n          xCurrentTime: function (pVfs, pOut) {\n            wasm.poke(\n              pOut,\n              2440587.5 + new Date().getTime() / 86400000,\n              'double',\n            );\n            return 0;\n          },\n          xCurrentTimeInt64: function (pVfs, pOut) {\n            wasm.poke(pOut, 2440587.5 * 86400000 + new Date().getTime(), 'i64');\n            return 0;\n          },\n          xDelete: function (pVfs, zName, doSyncDir) {\n            const pool = getPoolForVfs(pVfs);\n            pool.log(`xDelete ${wasm.cstrToJs(zName)}`);\n            pool.storeErr();\n            try {\n              pool.deletePath(pool.getPath(zName));\n              return 0;\n            } catch (e) {\n              pool.storeErr(e);\n              return capi.SQLITE_IOERR_DELETE;\n            }\n          },\n          xFullPathname: function (pVfs, zName, nOut, pOut) {\n            const i = wasm.cstrncpy(pOut, zName, nOut);\n            return i < nOut ? 0 : capi.SQLITE_CANTOPEN;\n          },\n          xGetLastError: function (pVfs, nOut, pOut) {\n            const pool = getPoolForVfs(pVfs);\n            const e = pool.popErr();\n            pool.log(`xGetLastError ${nOut} e =`, e);\n            if (e) {\n              const scope = wasm.scopedAllocPush();\n              try {\n                const [cMsg, n] = wasm.scopedAllocCString(e.message, true);\n                wasm.cstrncpy(pOut, cMsg, nOut);\n                if (n > nOut) wasm.poke8(pOut + nOut - 1, 0);\n              } catch (e) {\n                return capi.SQLITE_NOMEM;\n              } finally {\n                wasm.scopedAllocPop(scope);\n              }\n            }\n            return e ? e.sqlite3Rc || capi.SQLITE_IOERR : 0;\n          },\n\n          xOpen: function f(pVfs, zName, pFile, flags, pOutFlags) {\n            const pool = getPoolForVfs(pVfs);\n            try {\n              pool.log(`xOpen ${wasm.cstrToJs(zName)} ${flags}`);\n\n              const path =\n                zName && wasm.peek8(zName)\n                  ? pool.getPath(zName)\n                  : getRandomName();\n              let sah = pool.getSAHForPath(path);\n              if (!sah && flags & capi.SQLITE_OPEN_CREATE) {\n                if (pool.getFileCount() < pool.getCapacity()) {\n                  sah = pool.nextAvailableSAH();\n                  pool.setAssociatedPath(sah, path, flags);\n                } else {\n                  toss('SAH pool is full. Cannot create file', path);\n                }\n              }\n              if (!sah) {\n                toss('file not found:', path);\n              }\n\n              const file = { path, flags, sah };\n              pool.mapS3FileToOFile(pFile, file);\n              file.lockType = capi.SQLITE_LOCK_NONE;\n              const sq3File = new capi.sqlite3_file(pFile);\n              sq3File.$pMethods = opfsIoMethods.pointer;\n              sq3File.dispose();\n              wasm.poke32(pOutFlags, flags);\n              return 0;\n            } catch (e) {\n              pool.storeErr(e);\n              return capi.SQLITE_CANTOPEN;\n            }\n          },\n        };\n\n        const createOpfsVfs = function (vfsName) {\n          if (sqlite3.capi.sqlite3_vfs_find(vfsName)) {\n            toss3('VFS name is already registered:', vfsName);\n          }\n          const opfsVfs = new capi.sqlite3_vfs();\n\n          const pDVfs = capi.sqlite3_vfs_find(null);\n          const dVfs = pDVfs ? new capi.sqlite3_vfs(pDVfs) : null;\n          opfsVfs.$iVersion = 2;\n          opfsVfs.$szOsFile = capi.sqlite3_file.structInfo.sizeof;\n          opfsVfs.$mxPathname = HEADER_MAX_PATH_SIZE;\n          opfsVfs.addOnDispose(\n            (opfsVfs.$zName = wasm.allocCString(vfsName)),\n            () => setPoolForVfs(opfsVfs.pointer, 0),\n          );\n\n          if (dVfs) {\n            opfsVfs.$xRandomness = dVfs.$xRandomness;\n            opfsVfs.$xSleep = dVfs.$xSleep;\n            dVfs.dispose();\n          }\n          if (!opfsVfs.$xRandomness && !vfsMethods.xRandomness) {\n            vfsMethods.xRandomness = function (pVfs, nOut, pOut) {\n              const heap = wasm.heap8u();\n              let i = 0;\n              for (; i < nOut; ++i)\n                heap[pOut + i] = (Math.random() * 255000) & 0xff;\n              return i;\n            };\n          }\n          if (!opfsVfs.$xSleep && !vfsMethods.xSleep) {\n            vfsMethods.xSleep = (pVfs, ms) => 0;\n          }\n          sqlite3.vfs.installVfs({\n            vfs: { struct: opfsVfs, methods: vfsMethods },\n          });\n          return opfsVfs;\n        };\n\n        class OpfsSAHPool {\n          vfsDir;\n\n          #dhVfsRoot;\n\n          #dhOpaque;\n\n          #dhVfsParent;\n\n          #mapSAHToName = new Map();\n\n          #mapFilenameToSAH = new Map();\n\n          #availableSAH = new Set();\n\n          #mapS3FileToOFile_ = new Map();\n\n          #apBody = new Uint8Array(HEADER_CORPUS_SIZE);\n\n          #dvBody;\n\n          #cVfs;\n\n          #verbosity;\n\n          constructor(options = Object.create(null)) {\n            this.#verbosity = options.verbosity ?? optionDefaults.verbosity;\n            this.vfsName = options.name || optionDefaults.name;\n            this.#cVfs = createOpfsVfs(this.vfsName);\n            setPoolForVfs(this.#cVfs.pointer, this);\n            this.vfsDir = options.directory || '.' + this.vfsName;\n            this.#dvBody = new DataView(\n              this.#apBody.buffer,\n              this.#apBody.byteOffset,\n            );\n            this.isReady = this.reset(\n              !!(options.clearOnInit ?? optionDefaults.clearOnInit),\n            ).then(() => {\n              if (this.$error) throw this.$error;\n              return this.getCapacity()\n                ? Promise.resolve(undefined)\n                : this.addCapacity(\n                    options.initialCapacity || optionDefaults.initialCapacity,\n                  );\n            });\n          }\n\n          #logImpl(level, ...args) {\n            if (this.#verbosity > level)\n              loggers[level](this.vfsName + ':', ...args);\n          }\n          log(...args) {\n            this.#logImpl(2, ...args);\n          }\n          warn(...args) {\n            this.#logImpl(1, ...args);\n          }\n          error(...args) {\n            this.#logImpl(0, ...args);\n          }\n\n          getVfs() {\n            return this.#cVfs;\n          }\n\n          getCapacity() {\n            return this.#mapSAHToName.size;\n          }\n\n          getFileCount() {\n            return this.#mapFilenameToSAH.size;\n          }\n\n          getFileNames() {\n            const rc = [];\n            const iter = this.#mapFilenameToSAH.keys();\n            for (const n of iter) rc.push(n);\n            return rc;\n          }\n\n          async addCapacity(n) {\n            for (let i = 0; i < n; ++i) {\n              const name = getRandomName();\n              const h = await this.#dhOpaque.getFileHandle(name, {\n                create: true,\n              });\n              const ah = await h.createSyncAccessHandle();\n              this.#mapSAHToName.set(ah, name);\n              this.setAssociatedPath(ah, '', 0);\n            }\n            return this.getCapacity();\n          }\n\n          async reduceCapacity(n) {\n            let nRm = 0;\n            for (const ah of Array.from(this.#availableSAH)) {\n              if (nRm === n || this.getFileCount() === this.getCapacity()) {\n                break;\n              }\n              const name = this.#mapSAHToName.get(ah);\n\n              ah.close();\n              await this.#dhOpaque.removeEntry(name);\n              this.#mapSAHToName.delete(ah);\n              this.#availableSAH.delete(ah);\n              ++nRm;\n            }\n            return nRm;\n          }\n\n          releaseAccessHandles() {\n            for (const ah of this.#mapSAHToName.keys()) ah.close();\n            this.#mapSAHToName.clear();\n            this.#mapFilenameToSAH.clear();\n            this.#availableSAH.clear();\n          }\n\n          async acquireAccessHandles(clearFiles) {\n            const files = [];\n            for await (const [name, h] of this.#dhOpaque) {\n              if ('file' === h.kind) {\n                files.push([name, h]);\n              }\n            }\n            return Promise.all(\n              files.map(async ([name, h]) => {\n                try {\n                  const ah = await h.createSyncAccessHandle();\n                  this.#mapSAHToName.set(ah, name);\n                  if (clearFiles) {\n                    ah.truncate(HEADER_OFFSET_DATA);\n                    this.setAssociatedPath(ah, '', 0);\n                  } else {\n                    const path = this.getAssociatedPath(ah);\n                    if (path) {\n                      this.#mapFilenameToSAH.set(path, ah);\n                    } else {\n                      this.#availableSAH.add(ah);\n                    }\n                  }\n                } catch (e) {\n                  this.storeErr(e);\n                  this.releaseAccessHandles();\n                  throw e;\n                }\n              }),\n            );\n          }\n\n          getAssociatedPath(sah) {\n            sah.read(this.#apBody, { at: 0 });\n\n            const flags = this.#dvBody.getUint32(HEADER_OFFSET_FLAGS);\n            if (\n              this.#apBody[0] &&\n              (flags & capi.SQLITE_OPEN_DELETEONCLOSE ||\n                (flags & PERSISTENT_FILE_TYPES) === 0)\n            ) {\n              warn(\n                `Removing file with unexpected flags ${flags.toString(16)}`,\n                this.#apBody,\n              );\n              this.setAssociatedPath(sah, '', 0);\n              return '';\n            }\n\n            const fileDigest = new Uint32Array(HEADER_DIGEST_SIZE / 4);\n            sah.read(fileDigest, { at: HEADER_OFFSET_DIGEST });\n            const compDigest = this.computeDigest(this.#apBody);\n            if (fileDigest.every((v, i) => v === compDigest[i])) {\n              const pathBytes = this.#apBody.findIndex((v) => 0 === v);\n              if (0 === pathBytes) {\n                sah.truncate(HEADER_OFFSET_DATA);\n              }\n              return pathBytes\n                ? textDecoder.decode(this.#apBody.subarray(0, pathBytes))\n                : '';\n            } else {\n              warn('Disassociating file with bad digest.');\n              this.setAssociatedPath(sah, '', 0);\n              return '';\n            }\n          }\n\n          setAssociatedPath(sah, path, flags) {\n            const enc = textEncoder.encodeInto(path, this.#apBody);\n            if (HEADER_MAX_PATH_SIZE <= enc.written + 1) {\n              toss('Path too long:', path);\n            }\n            this.#apBody.fill(0, enc.written, HEADER_MAX_PATH_SIZE);\n            this.#dvBody.setUint32(HEADER_OFFSET_FLAGS, flags);\n\n            const digest = this.computeDigest(this.#apBody);\n            sah.write(this.#apBody, { at: 0 });\n            sah.write(digest, { at: HEADER_OFFSET_DIGEST });\n            sah.flush();\n\n            if (path) {\n              this.#mapFilenameToSAH.set(path, sah);\n              this.#availableSAH.delete(sah);\n            } else {\n              sah.truncate(HEADER_OFFSET_DATA);\n              this.#availableSAH.add(sah);\n            }\n          }\n\n          computeDigest(byteArray) {\n            let h1 = 0xdeadbeef;\n            let h2 = 0x41c6ce57;\n            for (const v of byteArray) {\n              h1 = 31 * h1 + v * 307;\n              h2 = 31 * h2 + v * 307;\n            }\n            return new Uint32Array([h1 >>> 0, h2 >>> 0]);\n          }\n\n          async reset(clearFiles) {\n            await this.isReady;\n            let h = await navigator.storage.getDirectory();\n            let prev, prevName;\n            for (const d of this.vfsDir.split('/')) {\n              if (d) {\n                prev = h;\n                h = await h.getDirectoryHandle(d, { create: true });\n              }\n            }\n            this.#dhVfsRoot = h;\n            this.#dhVfsParent = prev;\n            this.#dhOpaque = await this.#dhVfsRoot.getDirectoryHandle(\n              OPAQUE_DIR_NAME,\n              { create: true },\n            );\n            this.releaseAccessHandles();\n            return this.acquireAccessHandles(clearFiles);\n          }\n\n          getPath(arg) {\n            if (wasm.isPtr(arg)) arg = wasm.cstrToJs(arg);\n            return (\n              arg instanceof URL ? arg : new URL(arg, 'file://localhost/')\n            ).pathname;\n          }\n\n          deletePath(path) {\n            const sah = this.#mapFilenameToSAH.get(path);\n            if (sah) {\n              this.#mapFilenameToSAH.delete(path);\n              this.setAssociatedPath(sah, '', 0);\n            }\n            return !!sah;\n          }\n\n          storeErr(e, code) {\n            if (e) {\n              e.sqlite3Rc = code || capi.SQLITE_IOERR;\n              this.error(e);\n            }\n            this.$error = e;\n            return code;\n          }\n\n          popErr() {\n            const rc = this.$error;\n            this.$error = undefined;\n            return rc;\n          }\n\n          nextAvailableSAH() {\n            const [rc] = this.#availableSAH.keys();\n            return rc;\n          }\n\n          getOFileForS3File(pFile) {\n            return this.#mapS3FileToOFile_.get(pFile);\n          }\n\n          mapS3FileToOFile(pFile, file) {\n            if (file) {\n              this.#mapS3FileToOFile_.set(pFile, file);\n              setPoolForPFile(pFile, this);\n            } else {\n              this.#mapS3FileToOFile_.delete(pFile);\n              setPoolForPFile(pFile, false);\n            }\n          }\n\n          hasFilename(name) {\n            return this.#mapFilenameToSAH.has(name);\n          }\n\n          getSAHForPath(path) {\n            return this.#mapFilenameToSAH.get(path);\n          }\n\n          async removeVfs() {\n            if (!this.#cVfs.pointer || !this.#dhOpaque) return false;\n            capi.sqlite3_vfs_unregister(this.#cVfs.pointer);\n            this.#cVfs.dispose();\n            delete initPromises[this.vfsName];\n            try {\n              this.releaseAccessHandles();\n              await this.#dhVfsRoot.removeEntry(OPAQUE_DIR_NAME, {\n                recursive: true,\n              });\n              this.#dhOpaque = undefined;\n              await this.#dhVfsParent.removeEntry(this.#dhVfsRoot.name, {\n                recursive: true,\n              });\n              this.#dhVfsRoot = this.#dhVfsParent = undefined;\n            } catch (e) {\n              sqlite3.config.error(this.vfsName, 'removeVfs() failed:', e);\n            }\n            return true;\n          }\n\n          exportFile(name) {\n            const sah =\n              this.#mapFilenameToSAH.get(name) || toss('File not found:', name);\n            const n = sah.getSize() - HEADER_OFFSET_DATA;\n            const b = new Uint8Array(n > 0 ? n : 0);\n            if (n > 0) {\n              const nRead = sah.read(b, { at: HEADER_OFFSET_DATA });\n              if (nRead != n) {\n                toss(\n                  'Expected to read ' + n + ' bytes but read ' + nRead + '.',\n                );\n              }\n            }\n            return b;\n          }\n\n          async importDbChunked(name, callback) {\n            const sah =\n              this.#mapFilenameToSAH.get(name) ||\n              this.nextAvailableSAH() ||\n              toss('No available handles to import to.');\n            sah.truncate(0);\n            let nWrote = 0,\n              chunk,\n              checkedHeader = false,\n              err = false;\n            try {\n              while (undefined !== (chunk = await callback())) {\n                if (chunk instanceof ArrayBuffer) chunk = new Uint8Array(chunk);\n                if (0 === nWrote && chunk.byteLength >= 15) {\n                  util.affirmDbHeader(chunk);\n                  checkedHeader = true;\n                }\n                sah.write(chunk, { at: HEADER_OFFSET_DATA + nWrote });\n                nWrote += chunk.byteLength;\n              }\n              if (nWrote < 512 || 0 !== nWrote % 512) {\n                toss(\n                  'Input size',\n                  nWrote,\n                  'is not correct for an SQLite database.',\n                );\n              }\n              if (!checkedHeader) {\n                const header = new Uint8Array(20);\n                sah.read(header, { at: 0 });\n                util.affirmDbHeader(header);\n              }\n              sah.write(new Uint8Array([1, 1]), {\n                at: HEADER_OFFSET_DATA + 18,\n              });\n            } catch (e) {\n              this.setAssociatedPath(sah, '', 0);\n              throw e;\n            }\n            this.setAssociatedPath(sah, name, capi.SQLITE_OPEN_MAIN_DB);\n            return nWrote;\n          }\n\n          importDb(name, bytes) {\n            if (bytes instanceof ArrayBuffer) bytes = new Uint8Array(bytes);\n            else if (bytes instanceof Function)\n              return this.importDbChunked(name, bytes);\n            const sah =\n              this.#mapFilenameToSAH.get(name) ||\n              this.nextAvailableSAH() ||\n              toss('No available handles to import to.');\n            const n = bytes.byteLength;\n            if (n < 512 || n % 512 != 0) {\n              toss('Byte array size is invalid for an SQLite db.');\n            }\n            const header = 'SQLite format 3';\n            for (let i = 0; i < header.length; ++i) {\n              if (header.charCodeAt(i) !== bytes[i]) {\n                toss('Input does not contain an SQLite database header.');\n              }\n            }\n            const nWrote = sah.write(bytes, { at: HEADER_OFFSET_DATA });\n            if (nWrote != n) {\n              this.setAssociatedPath(sah, '', 0);\n              toss(\n                'Expected to write ' + n + ' bytes but wrote ' + nWrote + '.',\n              );\n            } else {\n              sah.write(new Uint8Array([1, 1]), {\n                at: HEADER_OFFSET_DATA + 18,\n              });\n              this.setAssociatedPath(sah, name, capi.SQLITE_OPEN_MAIN_DB);\n            }\n            return nWrote;\n          }\n        }\n\n        class OpfsSAHPoolUtil {\n          #p;\n\n          constructor(sahPool) {\n            this.#p = sahPool;\n            this.vfsName = sahPool.vfsName;\n          }\n\n          async addCapacity(n) {\n            return this.#p.addCapacity(n);\n          }\n\n          async reduceCapacity(n) {\n            return this.#p.reduceCapacity(n);\n          }\n\n          getCapacity() {\n            return this.#p.getCapacity(this.#p);\n          }\n\n          getFileCount() {\n            return this.#p.getFileCount();\n          }\n          getFileNames() {\n            return this.#p.getFileNames();\n          }\n\n          async reserveMinimumCapacity(min) {\n            const c = this.#p.getCapacity();\n            return c < min ? this.#p.addCapacity(min - c) : c;\n          }\n\n          exportFile(name) {\n            return this.#p.exportFile(name);\n          }\n\n          importDb(name, bytes) {\n            return this.#p.importDb(name, bytes);\n          }\n\n          async wipeFiles() {\n            return this.#p.reset(true);\n          }\n\n          unlink(filename) {\n            return this.#p.deletePath(filename);\n          }\n\n          async removeVfs() {\n            return this.#p.removeVfs();\n          }\n        }\n\n        const apiVersionCheck = async () => {\n          const dh = await navigator.storage.getDirectory();\n          const fn = '.opfs-sahpool-sync-check-' + getRandomName();\n          const fh = await dh.getFileHandle(fn, { create: true });\n          const ah = await fh.createSyncAccessHandle();\n          const close = ah.close();\n          await close;\n          await dh.removeEntry(fn);\n          if (close?.then) {\n            toss(\n              'The local OPFS API is too old for opfs-sahpool:',\n              'it has an async FileSystemSyncAccessHandle.close() method.',\n            );\n          }\n          return true;\n        };\n\n        sqlite3.installOpfsSAHPoolVfs = async function (\n          options = Object.create(null),\n        ) {\n          options = Object.assign(\n            Object.create(null),\n            optionDefaults,\n            options || {},\n          );\n          const vfsName = options.name;\n          if (options.$testThrowPhase1) {\n            throw options.$testThrowPhase1;\n          }\n          if (initPromises[vfsName]) {\n            try {\n              const p = await initPromises[vfsName];\n\n              return p;\n            } catch (e) {\n              if (options.forceReinitIfPreviouslyFailed) {\n                delete initPromises[vfsName];\n              } else {\n                throw e;\n              }\n            }\n          }\n          if (\n            !globalThis.FileSystemHandle ||\n            !globalThis.FileSystemDirectoryHandle ||\n            !globalThis.FileSystemFileHandle ||\n            !globalThis.FileSystemFileHandle.prototype.createSyncAccessHandle ||\n            !navigator?.storage?.getDirectory\n          ) {\n            return (initPromises[vfsName] = Promise.reject(\n              new Error('Missing required OPFS APIs.'),\n            ));\n          }\n\n          return (initPromises[vfsName] = apiVersionCheck()\n            .then(async function () {\n              if (options.$testThrowPhase2) {\n                throw options.$testThrowPhase2;\n              }\n              const thePool = new OpfsSAHPool(options);\n              return thePool.isReady\n                .then(async () => {\n                  const poolUtil = new OpfsSAHPoolUtil(thePool);\n                  if (sqlite3.oo1) {\n                    const oo1 = sqlite3.oo1;\n                    const theVfs = thePool.getVfs();\n                    const OpfsSAHPoolDb = function (...args) {\n                      const opt = oo1.DB.dbCtorHelper.normalizeArgs(...args);\n                      opt.vfs = theVfs.$zName;\n                      oo1.DB.dbCtorHelper.call(this, opt);\n                    };\n                    OpfsSAHPoolDb.prototype = Object.create(oo1.DB.prototype);\n                    poolUtil.OpfsSAHPoolDb = OpfsSAHPoolDb;\n                  }\n                  thePool.log('VFS initialized.');\n                  return poolUtil;\n                })\n                .catch(async (e) => {\n                  await thePool.removeVfs().catch(() => {});\n                  throw e;\n                });\n            })\n            .catch((err) => {\n              return (initPromises[vfsName] = Promise.reject(err));\n            }));\n        };\n      });\n\n      ('use strict');\n      if ('undefined' !== typeof Module) {\n        const SABC = Object.assign(\n          Object.create(null),\n          {\n            exports:\n              'undefined' === typeof wasmExports ? Module['asm'] : wasmExports,\n            memory: Module.wasmMemory,\n          },\n          globalThis.sqlite3ApiConfig || {},\n        );\n\n        globalThis.sqlite3ApiConfig = SABC;\n        let sqlite3;\n        try {\n          sqlite3 = globalThis.sqlite3ApiBootstrap();\n        } catch (e) {\n          console.error('sqlite3ApiBootstrap() error:', e);\n          throw e;\n        } finally {\n          delete globalThis.sqlite3ApiBootstrap;\n          delete globalThis.sqlite3ApiConfig;\n        }\n\n        Module.sqlite3 = sqlite3;\n      } else {\n        console.warn(\n          'This is not running in an Emscripten module context, so',\n          'globalThis.sqlite3ApiBootstrap() is _not_ being called due to lack',\n          'of config info for the WASM environment.',\n          'It must be called manually.',\n        );\n      }\n    };\n\n    moduleRtn = readyPromise;\n\n    return moduleRtn;\n  };\n})();\n\nconst toExportForESM = (function () {\n  const originalInit = sqlite3InitModule;\n  if (!originalInit) {\n    throw new Error(\n      'Expecting globalThis.sqlite3InitModule to be defined by the Emscripten build.',\n    );\n  }\n\n  const initModuleState = (globalThis.sqlite3InitModuleState = Object.assign(\n    Object.create(null),\n    {\n      moduleScript: globalThis?.document?.currentScript,\n      isWorker: 'undefined' !== typeof WorkerGlobalScope,\n      location: globalThis.location,\n      urlParams: globalThis?.location?.href\n        ? new URL(globalThis.location.href).searchParams\n        : new URLSearchParams(),\n    },\n  ));\n  initModuleState.debugModule = initModuleState.urlParams.has(\n    'sqlite3.debugModule',\n  )\n    ? (...args) => console.warn('sqlite3.debugModule:', ...args)\n    : () => {};\n\n  if (initModuleState.urlParams.has('sqlite3.dir')) {\n    initModuleState.sqlite3Dir =\n      initModuleState.urlParams.get('sqlite3.dir') + '/';\n  } else if (initModuleState.moduleScript) {\n    const li = initModuleState.moduleScript.src.split('/');\n    li.pop();\n    initModuleState.sqlite3Dir = li.join('/') + '/';\n  }\n\n  globalThis.sqlite3InitModule = function ff(...args) {\n    return originalInit(...args)\n      .then((EmscriptenModule) => {\n        EmscriptenModule.runSQLite3PostLoadInit(EmscriptenModule);\n        const s = EmscriptenModule.sqlite3;\n        s.scriptInfo = initModuleState;\n\n        if (ff.__isUnderTest) s.__isUnderTest = true;\n        const f = s.asyncPostInit;\n        delete s.asyncPostInit;\n        const rv = f();\n        return rv;\n      })\n      .catch((e) => {\n        console.error('Exception loading sqlite3 module:', e);\n        throw e;\n      });\n  };\n  globalThis.sqlite3InitModule.ready = originalInit.ready;\n\n  if (globalThis.sqlite3InitModuleState.moduleScript) {\n    const sim = globalThis.sqlite3InitModuleState;\n    let src = sim.moduleScript.src.split('/');\n    src.pop();\n    sim.scriptDir = src.join('/') + '/';\n  }\n  initModuleState.debugModule('sqlite3InitModuleState =', initModuleState);\n  if (0) {\n    console.warn('Replaced sqlite3InitModule()');\n    console.warn('globalThis.location.href =', globalThis.location.href);\n    if ('undefined' !== typeof document) {\n      console.warn(\n        'document.currentScript.src =',\n        document?.currentScript?.src,\n      );\n    }\n  }\n  return globalThis.sqlite3InitModule;\n})();\nsqlite3InitModule = toExportForESM;\nexport default sqlite3InitModule;\n", "/*\n  2022-08-24\n\n  The author disclaims copyright to this source code.  In place of a\n  legal notice, here is a blessing:\n\n  *   May you do good and not evil.\n  *   May you find forgiveness for yourself and forgive others.\n  *   May you share freely, never taking more than you give.\n\n  ***********************************************************************\n\n  This file implements a Promise-based proxy for the sqlite3 Worker\n  API #1. It is intended to be included either from the main thread or\n  a Worker, but only if (A) the environment supports nested Workers\n  and (B) it's _not_ a Worker which loads the sqlite3 WASM/JS\n  module. This file's features will load that module and provide a\n  slightly simpler client-side interface than the slightly-lower-level\n  Worker API does.\n\n  This script necessarily exposes one global symbol, but clients may\n  freely `delete` that symbol after calling it.\n*/\n'use strict';\n\nglobalThis.sqlite3Worker1Promiser = function callee(\n  config = callee.defaultConfig,\n) {\n  if (1 === arguments.length && 'function' === typeof arguments[0]) {\n    const f = config;\n    config = Object.assign(Object.create(null), callee.defaultConfig);\n    config.onready = f;\n  } else {\n    config = Object.assign(Object.create(null), callee.defaultConfig, config);\n  }\n  const handlerMap = Object.create(null);\n  const noop = function () {};\n  const err = config.onerror || noop;\n  const debug = config.debug || noop;\n  const idTypeMap = config.generateMessageId ? undefined : Object.create(null);\n  const genMsgId =\n    config.generateMessageId ||\n    function (msg) {\n      return (\n        msg.type + '#' + (idTypeMap[msg.type] = (idTypeMap[msg.type] || 0) + 1)\n      );\n    };\n  const toss = (...args) => {\n    throw new Error(args.join(' '));\n  };\n  if (!config.worker) config.worker = callee.defaultConfig.worker;\n  if ('function' === typeof config.worker) config.worker = config.worker();\n  let dbId;\n  let promiserFunc;\n  config.worker.onmessage = function (ev) {\n    ev = ev.data;\n    debug('worker1.onmessage', ev);\n    let msgHandler = handlerMap[ev.messageId];\n    if (!msgHandler) {\n      if (ev && 'sqlite3-api' === ev.type && 'worker1-ready' === ev.result) {\n        if (config.onready) config.onready(promiserFunc);\n        return;\n      }\n      msgHandler = handlerMap[ev.type];\n      if (msgHandler && msgHandler.onrow) {\n        msgHandler.onrow(ev);\n        return;\n      }\n      if (config.onunhandled) config.onunhandled(arguments[0]);\n      else err('sqlite3Worker1Promiser() unhandled worker message:', ev);\n      return;\n    }\n    delete handlerMap[ev.messageId];\n    switch (ev.type) {\n      case 'error':\n        msgHandler.reject(ev);\n        return;\n      case 'open':\n        if (!dbId) dbId = ev.dbId;\n        break;\n      case 'close':\n        if (ev.dbId === dbId) dbId = undefined;\n        break;\n      default:\n        break;\n    }\n    try {\n      msgHandler.resolve(ev);\n    } catch (e) {\n      msgHandler.reject(e);\n    }\n  };\n  return (promiserFunc = function () {\n    let msg;\n    if (1 === arguments.length) {\n      msg = arguments[0];\n    } else if (2 === arguments.length) {\n      msg = Object.create(null);\n      msg.type = arguments[0];\n      msg.args = arguments[1];\n      msg.dbId = msg.args.dbId;\n    } else {\n      toss('Invalid arguments for sqlite3Worker1Promiser()-created factory.');\n    }\n    if (!msg.dbId && msg.type !== 'open') msg.dbId = dbId;\n    msg.messageId = genMsgId(msg);\n    msg.departureTime = performance.now();\n    const proxy = Object.create(null);\n    proxy.message = msg;\n    let rowCallbackId;\n    if ('exec' === msg.type && msg.args) {\n      if ('function' === typeof msg.args.callback) {\n        rowCallbackId = msg.messageId + ':row';\n        proxy.onrow = msg.args.callback;\n        msg.args.callback = rowCallbackId;\n        handlerMap[rowCallbackId] = proxy;\n      } else if ('string' === typeof msg.args.callback) {\n        toss(\n          'exec callback may not be a string when using the Promise interface.',\n        );\n      }\n    }\n\n    let p = new Promise(function (resolve, reject) {\n      proxy.resolve = resolve;\n      proxy.reject = reject;\n      handlerMap[msg.messageId] = proxy;\n      debug(\n        'Posting',\n        msg.type,\n        'message to Worker dbId=' + (dbId || 'default') + ':',\n        msg,\n      );\n      config.worker.postMessage(msg);\n    });\n    if (rowCallbackId) p = p.finally(() => delete handlerMap[rowCallbackId]);\n    return p;\n  });\n};\n\nglobalThis.sqlite3Worker1Promiser.defaultConfig = {\n  worker: function () {\n    return new Worker(\n      new URL('sqlite3-worker1-bundler-friendly.mjs', import.meta.url),\n      {\n        type: 'module',\n      },\n    );\n  },\n  onerror: (...args) => console.error('worker1 promiser error', ...args),\n};\n\nsqlite3Worker1Promiser.v2 = function (config) {\n  let oldFunc;\n  if ('function' == typeof config) {\n    oldFunc = config;\n    config = {};\n  } else if ('function' === typeof config?.onready) {\n    oldFunc = config.onready;\n    delete config.onready;\n  }\n  const promiseProxy = Object.create(null);\n  config = Object.assign(config || Object.create(null), {\n    onready: async function (func) {\n      try {\n        if (oldFunc) await oldFunc(func);\n        promiseProxy.resolve(func);\n      } catch (e) {\n        promiseProxy.reject(e);\n      }\n    },\n  });\n  const p = new Promise(function (resolve, reject) {\n    promiseProxy.resolve = resolve;\n    promiseProxy.reject = reject;\n  });\n  try {\n    this.original(config);\n  } catch (e) {\n    promiseProxy.reject(e);\n  }\n  return p;\n}.bind({\n  original: sqlite3Worker1Promiser,\n});\n\nexport default sqlite3Worker1Promiser.v2;\n", "import { default as sqlite3InitModule } from './sqlite-wasm/jswasm/sqlite3-bundler-friendly.mjs';\nimport './sqlite-wasm/jswasm/sqlite3-worker1-promiser.mjs';\n\nconst sqlite3Worker1Promiser = globalThis.sqlite3Worker1Promiser;\n\nexport default sqlite3InitModule;\nexport { sqlite3Worker1Promiser };\n"],
  "mappings": "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",
  "names": ["err", "byteArray", "_a", "xhr", "lazyArray", "v", "pDb", "sig", "BigInt", "BigInt64Array", "f", "name", "key", "StructBinder", "StructCtor", "e", "pMem", "callee", "tgt", "func", "out", "stmt", "ndx", "val", "sqlite3", "require", "t", "sqlite3Worker1Promiser"]
}
