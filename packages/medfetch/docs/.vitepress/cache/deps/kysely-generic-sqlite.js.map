{
  "version": 3,
  "sources": ["../../../../../../node_modules/.pnpm/kysely-generic-sqlite@1.2.1_kysely@0.28.2/node_modules/kysely-generic-sqlite/dist/chunk-YWE62C55.js", "../../../../../../node_modules/.pnpm/kysely-generic-sqlite@1.2.1_kysely@0.28.2/node_modules/kysely-generic-sqlite/dist/index.js"],
  "sourcesContent": ["import { SqliteQueryCompiler, SqliteAdapter, SqliteIntrospector, CompiledQuery, RawNode, IdentifierNode } from 'kysely';\n\n// src/base.ts\nvar BaseSqliteDialect = class {\n  /**\n   * Base class that implements {@link Dialect}\n   * @param create function that create {@link Driver}\n   */\n  constructor(create) {\n    this.createDriver = create;\n  }\n  createDriver;\n  createQueryCompiler() {\n    return new SqliteQueryCompiler();\n  }\n  createAdapter() {\n    return new SqliteAdapter();\n  }\n  createIntrospector(db) {\n    return new SqliteIntrospector(db);\n  }\n};\nvar ConnectionMutex = class {\n  promise;\n  resolve;\n  async lock() {\n    while (this.promise) {\n      await this.promise;\n    }\n    this.promise = new Promise((resolve) => {\n      this.resolve = resolve;\n    });\n  }\n  unlock() {\n    const resolve = this.resolve;\n    this.promise = void 0;\n    this.resolve = void 0;\n    resolve?.();\n  }\n};\nasync function runSavepoint(command, createQueryId, connection, savepointName, compileQuery) {\n  await connection.executeQuery(\n    compileQuery(\n      RawNode.createWithChildren([\n        RawNode.createWithSql(`${command} `),\n        IdentifierNode.create(savepointName)\n        // ensures savepointName gets sanitized\n      ]),\n      createQueryId()\n    )\n  );\n}\nvar BaseSqliteDriver = class {\n  mutex = new ConnectionMutex();\n  conn;\n  savepoint;\n  releaseSavepoint;\n  rollbackToSavepoint;\n  init;\n  /**\n   * Base abstract class that implements {@link Driver}\n   *\n   * You **MUST** assign `this.conn` in `init` and implement `destroy` method\n   */\n  constructor(init) {\n    this.init = () => import('kysely').then(({ createQueryId }) => {\n      if (createQueryId) {\n        this.savepoint = runSavepoint.bind(null, \"savepoint\", createQueryId);\n        this.releaseSavepoint = runSavepoint.bind(null, \"release\", createQueryId);\n        this.rollbackToSavepoint = runSavepoint.bind(null, \"rollback to\", createQueryId);\n      }\n    }).then(init);\n  }\n  async acquireConnection() {\n    await this.mutex.lock();\n    return this.conn;\n  }\n  async beginTransaction(connection) {\n    await connection.executeQuery(CompiledQuery.raw(\"begin\"));\n  }\n  async commitTransaction(connection) {\n    await connection.executeQuery(CompiledQuery.raw(\"commit\"));\n  }\n  async rollbackTransaction(connection) {\n    await connection.executeQuery(CompiledQuery.raw(\"rollback\"));\n  }\n  async releaseConnection() {\n    this.mutex.unlock();\n  }\n};\nfunction buildQueryFnAlt(exec) {\n  return async (isSelect, sql, parameters) => isSelect ? { rows: await exec.all(sql, parameters) } : { rows: [], ...await exec.run(sql, parameters) };\n}\nfunction buildQueryFn(exec) {\n  return async (isSelect, sql, parameters) => {\n    const rows = await exec.all(sql, parameters);\n    return isSelect || rows.length ? { rows } : { rows: [], ...await exec.run(\"select 1\") };\n  };\n}\nfunction parseBigInt(num) {\n  return num === void 0 || num === null ? void 0 : BigInt(num);\n}\n\nexport { BaseSqliteDialect, BaseSqliteDriver, buildQueryFn, buildQueryFnAlt, parseBigInt };\n", "import { BaseSqliteDriver, BaseSqliteDialect } from './chunk-YWE62C55.js';\nexport { BaseSqliteDialect, BaseSqliteDriver, buildQueryFn, buildQueryFnAlt, parseBigInt } from './chunk-YWE62C55.js';\nimport { SelectQueryNode } from 'kysely';\n\nvar GenericSqliteDriver = class extends BaseSqliteDriver {\n  db;\n  constructor(executor, onCreateConnection) {\n    super(async () => {\n      this.db = await executor();\n      this.conn = new GenericSqliteConnection(this.db);\n      await onCreateConnection?.(this.conn);\n    });\n  }\n  async destroy() {\n    await this.db?.close();\n  }\n};\nvar GenericSqliteConnection = class {\n  constructor(db) {\n    this.db = db;\n  }\n  async *streamQuery({ parameters, query, sql }) {\n    if (!this.db.iterator) {\n      throw new Error(\"streamQuery() is not supported.\");\n    }\n    const it = this.db.iterator(SelectQueryNode.is(query), sql, parameters);\n    for await (const row of it) {\n      yield { rows: [row] };\n    }\n  }\n  async executeQuery({ parameters, query, sql }) {\n    return await this.db.query(SelectQueryNode.is(query), sql, parameters);\n  }\n};\n\n// src/dialect.ts\nvar GenericSqliteDialect = class extends BaseSqliteDialect {\n  /**\n   * Dialect for generic SQLite that run SQLs in current thread\n   *\n   * @param executor function to create {@link IGenericSqlite}\n   * @param onCreateConnection optional callback after connection created\n   */\n  constructor(executor, onCreateConnection) {\n    super(() => new GenericSqliteDriver(executor, onCreateConnection));\n  }\n};\n\nexport { GenericSqliteConnection, GenericSqliteDialect, GenericSqliteDriver };\n"],
  "mappings": "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",
  "names": []
}
