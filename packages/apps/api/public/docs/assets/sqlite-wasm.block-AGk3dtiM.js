(function(){"use strict";function u(s){return[new Int32Array(s,0,2),new Uint8Array(s,8)]}function h(s,r,{encode:c=JSON.stringify,decode:d=JSON.parse,byteSize:g=5e5}={}){const n=Array.isArray(s),t=n?s[0]:s,a=n?s[1]:null;let m;const v=(...e)=>{if(self.name===t){const o=new SharedArrayBuffer(8+g),[i,l]=u(o);if(!self){console.warn(`[block-promise::${s}] > I can't post that message. Did you forget to set the async worker?`);return}if(m?m.postMessage({sab:o,args:e}):self.postMessage({sab:o,args:e}),Atomics.wait(i,0,0),Atomics.load(i,0))throw new Error("Deferred error");const f=i[1],y=new TextDecoder().decode(l.slice(0,f));return d(y)}else if(self.name===a){console.warn(`[block-promise::${t}] > From async worker: ${a}: "I can't block for that worker: ${self.name}"`);return}else return},k=async e=>{if(e.data&&e.data.sab){const{sab:o,args:i}=e.data,[l,w]=u(o);let f=0;try{const y=await r(...i),p=new TextEncoder().encode(c(y));if(p.length>w.length)throw new Error(`[block-promise::${s}] > Too large`);w.set(p),l[1]=p.length}catch{f=1}finally{Atomics.store(l,0,f),Atomics.notify(l,0)}}},A=async e=>{const o=typeof e=="function"?e({syncWorker:t,asyncWorker:a}):e;return self.name===t?m=await b(o):o.onmessage=k,o},E=()=>{self.name===a&&(console.log('[block-promise] > Registering "forward " async worker thread',a),self.onmessage=e=>{if(e.ports&&e.ports[0]){const o=e.ports[0];o.postMessage(0),o.onmessage=k}})};return self.name===a&&E(),[v,A]}async function b(s){const{port1:r,port2:c}=new MessageChannel;return new Promise((d,g)=>{const n=t=>{t.data===0?(r.removeEventListener("message",n),d(r)):(r.removeEventListener("message",n),g(new Error(`Unexpected message: ${JSON.stringify(t.data)}`)))};r.addEventListener("message",n),r.start(),s.postMessage(null,[c])})}h(["sqlite-wasm.thread","sqlite-wasm.block"],async(...s)=>{const c=await(await fetch(...s)).json();return JSON.stringify(c)})})();
